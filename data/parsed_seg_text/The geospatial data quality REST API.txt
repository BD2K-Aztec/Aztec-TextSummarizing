We present a REST web service to assess the geospatial quality of primary biodiversity data. It enables access to basic and advanced functions to detect completeness and consistency issues as well as general errors in the provided record or set of records. The API uses JSON for data interchange and efficient parallelization techniques for fast assessments of large datasets. Availability and implementation: The Geospatial Data Quality API is part of the vert net set of APIs. It can be accessed at http://api-geospatial.vertnet-portal.appspot.com/geospatial and is already implemented in the vert net data portal for quality reporting. Source code is freely available under GPL license from

introduction primary Biodiversity Data (PBD) are the most basic and interpretation free pieces of information upon which most biodiversity studies are built (). They are characterized, at minimum, by a geospatial locality and a taxonomic identification (). Macro-scale biodiversity studies require larger PBD assembly, which are usually extracted from many different sources. To allow interoperability among these sources, data publishers are encouraged to store and share their records utilizing standard vocabularies such as the Darwin Core () and tools () for providing seamless access via portals such as vert net (http://www.vertnet.org) and the Global Biodiversity Information Facility (http://www.gbif. org). While quantity may be a requirement for scaling up analyses, quality assurance is equally important, as has been amply demonstrated in a set of recent studies. (). While the scope of the problem has been made clear, solutions in the form of standard tools for data quality assessment have lagged behind, even if 'best practices' and 'principles' white papers are available (). Here, we present a set of functions that perform basic and advanced spatial quality assessments over user provided sets of PBD, wrapped in a REST API. REST relies on HTTP requests to specific URL endpoints, to send and receive data to and from the underlying services, generally using JSON as the data interchange format. Our implementation focuses on best practice outputs and works at scale, leveraging cloud based processing. It can be implemented at any point in the data cleaning workflow, from ingest by publishers and aggregators to end users looking to further check downloaded datasets. Although the focus is on PBD, this service is usable for data coming from related domains such as ecological genomics, or wherever biological records have geospatial data. present: decimal latitude decimal longitude country code and scientific name. POST requests are best for assessing larger amounts of records with a single call. With this method, the user sends a JSON array with one or more records (each one as a JSON object) in the body of the HTTP request. Records can have an arbitrary number of fields in each JSON object, but the API will only work on the four fields described above. Examples on how to build both requests, and fully worked examples of inputs and outputs, are available in the Supplementary Material.

discussion using an external API for data quality management, such as the one we present here, enables access to relatively complex assessment functions to data managers with little or no programming skills. The performed assessments codify best practices, grouped into completeness, consistency and correctness checks. The API integrates well with most programming languages and frameworks, so application developers can leverage these tools easily. A special benefit of using JSON as the data format is that information can stream seamlessly between systems and workflows. For POST requests, we decided to include all the request fields in the response, instead of ignoring them as with GET requests. This gives more flexibility to the users, since they don't have to heavily modify the structure of their record set: they only need to make sure the four key fields are called according to the Darwin Core standard. Besides, this removes the hassle of including the quality flags on the original records a posteriori. Just as a simple example, one could download a set of records from the GBIF API (http://www.gbif.org/ developer occurrence and, without modification, pass the result to the Geospatial Quality API to get the same record structure plus the quality flags. GET requests work best when integrated into single record viewers. One currently working example is the 'Spatial Quality' tab on vert nets occurrence pages, where each record is checked against this API on the fly and results are formatted according to the web portal style (Supplemental). This provides an easy to read report per record for data consumers (http://vertnet.org/resources/spa tial quality tab guide html. Our future plans include adding more assessments to the set of functions and developing further performance optimizations.
