Motivation: Accuracy in protein design requires a fine grained rota-mer search, multiple backbone conformations, and a detailed energy function, creating a burden in runtime and memory requirements. A design task may be split into manageable pieces in both three dimensional space and in the rotamer search space to produce small, fast jobs that are easily distributed. However, these jobs must overlap, presenting a problem in resolving conflicting solutions in the overlap regions. Results: Piecemeal design, in which the design space is split into overlapping regions and rotamer search spaces, accelerates the design process whether jobs are run in series or in parallel. Large jobs that can not fit in memory were made possible by splitting. Accepting the consensus amino acid selection in conflict regions led to non optimal choices. Instead, conflicts were resolved using a second pass, in which the split regions were re-combined and designed as one, producing results that were closer to optimal with a minimal increase in runtime over the consensus strategy. Splitting the search space at the rotamer level instead of at the amino acid level further improved the efficiency by reducing the search space in the second pass. Availability and implementation: Programs for splitting protein design expressions are available at www bio in for pie du tools piece meal html
introduction computational protein design is the process of finding an amino acid sequence that best accommodates a desired protein backbone conformation, with additional optional constraints on the structure. Designed proteins have demonstrated increased binding affinities, increased thermal stability () and entirely new functions, such as small molecule binding () or protein binding (). A novel fold has been designed (), as have proteins with switchable folds (), and at least two novel enzymes (). Computational protein design has been used as a protein engineering tool and as an approach to understanding protein folding, stability and function. Algorithms for protein design must overcome a massive conformational search space (). Simplifying and reducing the space, by fixing the backbone atoms and discretizing the side chain conformations into rotamer libraries (), makes protein design feasible but creates new challenges. Energy calculations tend to be less accurate as the sampling of conformational space becomes more coarse grained. This translates to a trade-off between design accuracy and runtime. The complexity of the design problem, defined as the total number of possible sequences in the search space, can be reduced by splitting the search space into smaller tasks. Each task may be solved independently, and the results assembled into a single solution. Splitting the search space introduces the possibility of using a fine grained search, which in turn enhances accuracy in energy calculations. Splitting has been implemented for the side chain packing problem using graph theory () and for the dead end elimination (DEE) algorithm () by applying a divide and conquer approach (). However, these solutions still encounter a complexity ceiling due to memory requirements. This memory problem was overcome by, who were able to fit a large design into small memory by random splitting of the rotamer search space and stochastic, iterative re estimation of the rotamer profile. But unfortunately as 'dimensionality reduction' was increased, the quality of the design decreased. Another option is to design small regions of the target in isolation and to combine those results into the final output. This kind of approach has been done using a sliding window of *To whom correspondence should be addressed. tetrapeptide units, resulting in thermophilic versions of the to p7 protein (). Analogous methods have been employed for the inverse RNA folding problem, using hierarchical decomposition () and loop decomposition () to extend the range of design able structures. However, splitting the design into overlapping three dimensional (real) spaces downplays the covariant nature of energetic interactions, which may be important for accurate energy calculations. To illustrate covariant interactions, if residue A interacts with residue B, and B interacts with C but not with A, the choice of rotamer at A still does affect the choice of rotamer at C. In this work, we explored the trade-offs between computational efficiency and accuracy in computational protein design. To evaluate the splitting concept in protein design, we divided real space into overlapping regions defined by a distance cut off from a central residue of a template structure. The sequence search space complexity of the small split design regions was low, and consequently the runtime of the entire process was reduced by almost 5-fold without any loss in design accuracy. Splitting the space into small pieces made it possible to reintroduce fine grained conformational sampling, thus gaining speed without losing accuracy. Furthermore, the split tasks can be run independently on different processors with no inter-process communication burden. In recombining the results of the split design tasks, conflicts appear where a residue in the overlapping region is assigned incompatible choices of amino acids. In this work, we explored ways of resolving these conflicts while preserving efficiency and accuracy. The results showed us that a second pass rotamer search was necessary to resolve these conflicts, that the search space complexity for the second pass was significantly reduced from that of the combined first pass design spaces and that a conservative approach to reducing the rotamer search space complexity was more accurate than an aggressive approach. Piecemeal design is a general strategy for making computational protein design more efficient, accurate, and amenable to the distributed computing environment. The method wraps around any computational protein design method with minimal adaptation.
