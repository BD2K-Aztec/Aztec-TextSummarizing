The specifications of the Systems Biology Markup Language (SBML) define standards for storing and exchanging computer models of biological processes in text files. In order to perform model simulations, graphical visualizations and other software manipulations, an in memory representation of SBML is required. We developed j sbml for this purpose. In contrast to prior implementations of SBML APIs, j sbml has been designed from the ground up for the Javaâ„¢ programming language, and can therefore be used on all platforms supported by a Java Runtime Environment. This offers important benefits for Java users, including the ability to distribute software as Java Web Start applications. j sbml supports all SBML Levels and Versions through Level 3 Version 1, and we have strived to maintain the highest possible degree of compatibility with the popular library lib sbml. j sbml also supports modules that can facilitate the development of plugins for end user applications, as well as ease migration from a lib sbml based backend. Availability: Source code, binaries and documentation for j sbml can be freely obtained under the terms of the LGPL 2.1 from the website http://sbml.org/Software/JSBML.

introduction the xml based Systems Biology Markup Language (SBML,) is the de facto standard file format for the storage and exchange of quantitative computational models in systems biology, supported by more than 210 software packages to date (). Much of this success is due to its clearly defined specifications and the availability of lib sbml (), a portable, robust, full featured and easy to use library. lib sbml provides many methods for the manipulation and validation of SBML files through its Application Programming Interface (API). Primarily written in C and C++, lib sbml also provides automatically generated language bindings for Java, among other programming languages. However, the full platform independence brought by the use of Java is limited demonstrates how the hierarchically structured content of an SBML file can be easily visualized in the form of a tree. j sbml includes parsers that read mathematical formulas in both MathML format and an in fix formula syntax. Internally, it converts formulas into an abstract syntax tree representation; it can write out the trees in MathML, in fix and L AT E X formula notations. In addition, although j sbml does not implement full featured consistency checking of SBML models, it does throw Java exceptions in some situations to prevent users from creating invalid content. It implements a check for overdetermined models using the algorithm of; this is also used to identify variables in algebraic rules. Further, j sbml can automatically derive the units of a mathematical expression. Whenever a property of some s base is altered, an s base change event is fired that notifies dedicated listeners. As one possible application, graphical user interfaces could automatically react when the model is changed. Using modules, j sbml capabilities can be further extended; it can therefore be used as a communication layer between an application and lib sbml or cell designer () this also facilitates turning an existing application into a plugin for cell designer
conclusion j sbml is an ongoing project that provides comprehensive and entirely java based data structures to read, write and manipulate SBML files. Its layered architecture allows for the creation of Java Web Start applications and cell designer plugins based on stand-alone programs with very little effort. New versions of sbml squeezer () and bio models Database () have already been released using j sbml. Many other projects are planned.
