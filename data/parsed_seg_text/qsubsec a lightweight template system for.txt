The Sun Grid Engine (SGE) high performance computing batch queueing system is commonly used in bioinformatics analysis. Creating re-usable scripts for the SGE is a common challenge. The q subsec template language and interpreter described here allow researchers to easily create generic template definitions that encapsulate a particular computational job, effectively separating the process logic from the specific run details. At submission time, the generic template is filled in with specific values. This system provides an intermediate level between simple script-ing and complete workflow management tools. Availability and implementation: q subsec is open source and is available at https://github.com/ alastair droop q subsec
introduction high performance computing (HPC) is fast becoming an essential part of all but the smallest bioinformatics analyses. Increasingly, shared HPC resources are available for research use. Although a great asset to bioinformatics, these systems are usually shared across multiple disciplines and are utilized by multiple simultaneous users. Such multiuser, multi application systems require scheduling software to ensure fair use of the resources between multiple users and to make sure that the resources are optimally utilized. These schedulers demand researchers submit their analyses in a specific format with suitable metadata on memory and time limits. The Sun Grid Engine (SGE: https:// arc.liv.ac.uk/trac/SGE) is a popular version of such a system. To make full use of the available HPC, researchers must adapt their analysis scripts to work with the associated scheduling systems. Frequently, this involves breaking down large or time consuming analyses into smaller steps to make better use of resource limitations imposed by the HPC, or to parallel ise independent tasks. Ordered collections of individual computational steps constitute a protocol or workflow. Workflow management software, for example Taverna Workbench (), Pegasus () and Galaxy (), aims to simplify the creation, management and execution of workflows. These systems attempt to be complete data management and integration tools. As such, they allow users to search online data repositories, download relevant data and provide sets of common analysis tools (). These systems ultimately attempt to simplify common bioinformatics analyses but there can be several major hurdles: installation and maintenance are not trivial, workflow definitions often require knowledge of languages such as CWL (https://github.com/common-workflow-lan guage common workflow language or scu fl (), and the user is conceptually removed from the running code. Furthermore, the multi application nature of HPC often precludes installation of complex domain specific software suites; in these cases, a full workflow management suite might well not be available. In many cases, these complex management suites are unnecessary, and a simpler framework for defining a workflow element is required. I here describe q subsec a python based mini language that separates the core logic of a computational task from the specific data for a single instance without the overhead of a workflow management system. This enables users to easily write SGE job scripts in a generic form that is processed at submission time into a specific computational task. This greatly simplifies the process of defining and maintaining computational pipelines on general purpose HPC systems. The q subsec template mini language and interpreter allow the computational logic of a job, along with the metadata required by the SGE queueing system, to be defined in a simple, generalised form. Specific data (for example sample names or identifiers) are provided to the interpreter at submission time. The template and specific data are then used to create and submit a job to the SGE queue. This system allows simple scripts written for use in the terminal to be trivially converted to q subsec template files. By separating computational logic and specific data, template files can be reused in different analyses saving a large amount of code repetition. Generalization is implemented using tokens; a token (specified as an uppercase identifier surrounded by curly braces) is used wherever a run specific data value is required. Tokens can be used in all parts of the template, including the scheduler resource definitions and job names. At submission time, the script is parsed and the values of all tokens present in the template file provided by the user. The q subsec tool temporarily appends the specific q subsec language functions (such as section, limits and command) to the Python 3 built in function list and parses the supplied template using this superset. This allows the template scripts to utilize the full power of Python during job pre-processing. For example, data can easily be read from web servers or from SQL databases before the parsed job is submitted to SGE. A full description of the q subsec built in functions is provided in the Supplementary Material.
