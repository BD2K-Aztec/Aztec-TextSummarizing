The ever increasing number of structural biological data calls for robust and efficient software for analysis. Easy Structural Biology Template Library es btl is a lightweight C++ library that allows the handling of PDB data and provides a data structure suitable for geometric constructions and analyses. The parser and data model provided by this ready to use include only library allows adequate treatment of usually discarded information (insertion code, atom occupancy, etc.) while still being able to detect badly formatted files. The template based structure allows rapid design of new computational structural biology applications and is fully compatible with the new remediated PDB archive format. It also allows the code to be easy to use while being versatile enough to allow advanced user developments.

introduction robust implementation of new methods is a major challenge in modern computational structural biology. For new ideas and biological hypotheses to be tested in silico, programs have to be fast, robust and quick to develop. Using a general purpose compiled language provides high performance. C++ is thus suitable for computationally expensive techniques and or large amount of data. The use of template libraries makes C++ a very versatile language, used in a wide variety of applications. Indeed templates allow functions and classes to operate with generic types (so that they do not need to be rewritten to work on a different data type). The success of the Boost C++ library 1 providing a general purpose extension of the C++ standard library shows the wide use of a library extensively using templates among a large community. Many solutions for handling macromolecules and the PDB format have already been developed. Most of these, such as BTL (), BioC++ (), pdb lib (), were developed some time ago and are either not maintained or do not fully benefit from the features of C++ in terms of genericity and versatility. The MMDB parser developed by RCSB () and the CCP4 parser () are mainly C-style and are very application specific, making them very difficult to use for other large scale applications. BALL () is an exhaustive C++ advanced compiled 2 library. Thus it is large and requires several external components. Other recent tools for handling PDB data such as the BioPython PDB Parser (), the MMTK toolkit (), were mainly designed in Python, making the code easy to use but relatively slow because of the use of an interpreter. These libraries were not designed for heavy geometric computations and thus do not provide easy access to geometric constructions such as Voronoi diagrams which are widely used in structural bioinformatics (). Here, we present Easy Structural Biology Template Library es btl which provides a large variety of template classes and functions to parse PDB data. es btl offers a data model suitable for the structural and geometric analysis of biological macromolecules. These can be used with 3D geometric algorithms and constructions such as those provided by the CGAL library 3. CGAL is intended to geometry algorithm development and provides a wide range of robust geometric code and tools. However its point based data structures are not suited to represent macromolecular objects (there is no convenient way to attach information to points). Not only does es btl provide a robust PDB parser, but also an optional integrated library interface to perform geometric computations using CGAL (triangulation, alpha shape skin surface, etc.) in a very simple way. Prototyping of computational structural biology and bio geometry applications is thus made very easy. es btl should fill in the gap for efficient development and be a valuable software tool to the structural bioinformatics community.

description the data model presented on is implemented by a hierarchical data structure in which each biological structure is represented as a System object. A System is obtained from a builder and may contain several Model objects. Like in other frameworks, following the PDB data structure and the remediated PDB format (), each Model contains Chain, Residue and Atom objects that can be extracted from their parents (Model, Chain and Residue, respectively). Residues can be both of protein and nucleic acid types (the Residue name is preferred to a specific nucleotide definition). Residue and Atom objects can be both regular and coarse grained such as in bead based models (). The interface with CGAL is made by providing kernels where atom or pseudo atom can directly be used as point types. Note that CGAL is not required to use es btl. Access to various objects of the hierarchy are provided through direct access and iterators (e.g. atoms of a model and residues of a chain). Native structure properties (e.g. atom types and residue names) benefit from direct access. A classifier allows easy definition and access to specific properties (e.g. atom radii and residue physicochemical properties). ready to use System objects are built by applying a structure selection that can be done at the parsing stage. This allows to load only the interested parts of the molecule. Structures can be read from both PDB files, compressed PDB files (.gz and .bz2) and .xtc trajectory files. The template structure fulfills most of user specific needs. This generic design allows to personalize each class used in the hierarchy, coarse grained models, specific properties, restricted iterators, required PDB fields and so on. For most of general use code development, shortcut types are supplied to avoid complete template declarations and to provide easy access for beginners.

conclusion the es btl parser and structure library provides a very easy to use and powerful library for large scale structural biology applications. It is very lightweight and its template structure allows to use it as a robust base for efficient software development. On the contrary to many other projects, as it is an include only library, it is easy to install and does not require a handful of external libraries. Interestingly, a coarse grained model builder is supplied for multilevel application development. New features will be added to the library and contributions to the project are welcome.
