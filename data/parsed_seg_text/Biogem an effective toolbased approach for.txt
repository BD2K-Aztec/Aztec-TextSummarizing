bio gem provides a software development environment for the Ruby programming language, which encourages community based software development for bioinformatics while lowering the barrier to entry and encouraging best practices. bio gem with its targeted modular and decentralized approach, software generator, tools and tight web integration, is an improved general model for scaling up collaborative open source software development in bioinformatics. Availability: bio gem and modules are free and are OSS. bio gem runs on all systems that support recent versions of Ruby, including Linux, Mac OS X and Windows. Further information at

introduction in biomedical science, new technologies, data formats and methods emerge continuously. Scientists want to take advantage of these developments as soon as possible, which requires bioinformatics * To whom correspondence should be addressed.  The authors wish it to be known that, in their opinion, the first and last two authors should be regarded as joint First Authors. software to keep up with new requirements. We support the notion of the Open Bioinformatics Foundation (OBF) that development of collaborative open source software (OSS) is essential for bioinformatics. The OBF represents a number of important projects, such as BioPerl (), Biopython (), BioRuby () and BioJava (). These Bio-star (Bio*) projects effectively function as community centres and share a centralized approach in software development with large source code repositories. Bio* projects, generally, aim for consolidated tools, a stable application programming interface (API), and backwards compatibility. Within the BioRuby project we experienced the drive for stability easily overwhelmed and discouraged developers. Not only because of the complexity of the existing code base, but also because coding standards are enforced, and extensive tests and documentation are required. Furthermore, newly contributed code may be subject to community scrutiny, and in many cases further demands for improving the code follow. The full process introduces a significant delay between initial idea and final acceptance of the code in the main project. Months, even years, may pass between stable releases of main Bio* projects. It may take a long time before a new feature is publicly released. To scale up collaborative software development in BioRuby, we recognized existing and new developers need to be encouraged to contribute more code. To achieve this, we created bio gem a Ruby application framework for rapid creation of decentralized, internet published software modules written to lower the barrier to entry. bio gem was initially inspired by the r bioconductor 2 The developer writes or modifies source code and (3) quickly and easily publishes the source code and module online, for others to read, install and use. Collaboration (4) is facilitated by publishing source code and changes to navigation able websites. Then the workflow continues again at (2). The http://biogems.info website tracks published modules. Popularity of each published module is tracked, as well as source code changes, updates, bugs and issues. Unlike with the practise of publishing scientific papers, collaboration on software often comes post factum, i.e. after original publishing of a software module. Therefore, it pays to publish software modules early and often. This is reflected in the bio gem workflow. packaging system (), which encourages software developers to publish software modules independently using simple rules; and Ruby on Rails plugins (), which provides a software generator and modular software plugin system.

conclusion bio gem provides an environment for rapid bioinformatics software development with a low barrier to entry. bio gem frees potential contributors from code maturity expectations that can be deterring, and encourages Ruby developers to contribute experimental source code early to the BioRuby community. Through bio gem software is published in a modular way, and best practises are encouraged through infrastructure for software specification and testing. All this results in better utilization of existing and new software development manpower, thereby scaling up OSS development in bioinformatics. We suggest bio gem can serve as a generic model; not by replacing existing Bio* projects, but by supplementing them with a decentralized and evolutionary model for collaborative software development.
