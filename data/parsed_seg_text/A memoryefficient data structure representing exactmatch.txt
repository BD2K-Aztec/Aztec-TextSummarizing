Motivation: exact match overlap graphs have been broadly used in the context of DNA assembly and the shortest super string problem where the number of strings n ranges from thousands to billions. The length of the strings is from 25 to 1000, depending on the DNA sequencing technologies. However, many DNA assemblers using overlap graphs suffer from the need for too much time and space in constructing the graphs. It is nearly impossible for these DNA assemblers to handle the huge amount of data produced by the next generation sequencing technologies where the number n of strings could be several billions. If the overlap graph is explicitly stored, it would require (n 2) memory, which could be prohibitive in practice when n is greater than a hundred million. In this article, we propose a novel data structure using which the overlap graph can be compactly stored. This data structure requires only linear time to construct and and linear memory to store. Results: For a given set of input strings (also called reads), we can informally define an exact match overlap graph as follows. Each read is represented as a node in the graph and there is an edge between two nodes if the corresponding reads overlap sufficiently. A formal description follows. The maximal exact match overlap of two strings x and y, denoted by ov max (x,y), is the longest string which is a suffix of x and a prefix of y. The exact match overlap graph of n given strings of length is an edge weighted graph in which each vertex is associated with a string and there is an edge (x, y) of weight ω = −|ov max (x,y)| if and only if ω ≤ λ, where |ov max (x,y)| is the length of ov max (x,y) and λ is a given threshold. In this article, we show that the exact match overlap graphs can be represented by a compact data structure that can be stored using at most (2λ−1)(2logn++logλ)n bits with a guarantee that the basic operation of accessing an edge takes o log time. We also propose two algorithms for constructing the data structure for the exact match overlap graph. The first algorithm runs in on log n worse case time and requires O(λ) extra memory. The second one runs in O(λλn) time and requires O(n) extra memory. Our experimental results on a huge amount of simulated data from sequence assembly show that the data structure can be constructed efficiently in time and memory. Availability: Our DNA sequence assembler that incorporates the data structure is freely available on the web at

introduction an exact match overlap graph of n given strings of length each is an edge weighted graph defined as follows. Each vertex is associated with a string and there is an edge (x,y) of weight  = |ov max (x,y)| if and only if   , where  is a given threshold and |ov max (x,y)| is the length of the maximal exact match overlap of two strings x and y.  =  |ov max (x,y)| is called the overlap threshold. The formal definition of the exact match overlap graph is given in Section 2. Storing the exact match overlap graphs efficiently in term of memory becomes essential when the number of strings is very large. In the literature, there are two common data structures to store a general graph G = (V ,E). The first data structure uses a 2D array of size |V ||V |. We refer to this as an array based data structure. One of its advantages is that the time for accessing a given edge is O(1). However, it requires (|V | 2 ) memory. The second data structure stores the set of edges E. We refer to this as an edge based data structure. It requires (|V |+|E|) memory and the time for accessing a given edge is o log where is the degree of the graph. Both these data structures require (|E|) memory. If the exact match overlap graphs are stored using these two data structures, we will need (|E|) memory. Even this much of memory may not be feasible in cases when the number of strings is over a hundred million. In this article, we focus on data structures for the exact match overlap graphs that will call for much less memory than |E|.

conclusion we have described a memory efficient data structure that represents the exact match overlap graph. We have shown that this data structure needs at most (21)(2logn++log)n bits, which is a surprising result because the number of edges in the graph can be (n 2 ). Also, it takes o log time to access an edge through the data structure. We have proposed two fast algorithms to construct the data structure. The first algorithm is based on binary search and runs in on log n time and takes O() extra memory. The second algorithm, based on the trie, runs in O(n) time, which is slightly faster than the first algorithm, but it takes O(n) extra memory to store the trie. The nice thing about the first algorithm is that the memory it uses is mostly for the input strings. This feature is very crucial for building an efficient DNA assembler. We are also developing our assembler LEAP that incorporates the data structure for the overlap graph. The experimental results show that our assembler can efficiently handle datasets of size equal to that of the whole human genome. Currently, our assembler works for error free reads. In reality, reads usually have errors. If the error rate is high, our assembler may not work well. However, with improving accuracy in sequencing technology, the error rate has been reduced. If the error rate is low enough, we will have many error free reads, which means that our assembler will still work in this case. Also, an alternative way to use our assembler is to first correct the reads before feeding them to our assembler. In future, we would like to adapt our assembler to handle reads with errors as well.
