The determination of protein sequences from a meta genomic dataset enables the study of metabolism and functional roles of the organisms that are present in the sampled microbial community. We had previously introduced algorithm and software for the accurate reconstruction of protein sequences from short peptides identified on nucleotide reads in a meta genomic dataset. Here, we present significant computational improvements to the short peptide assembly algorithm that make it practical to reconstruct proteins from large meta genomic datasets containing several hundred million reads, while maintaining accuracy. The improved computational efficiency is achieved using a suffix array data structure that allows for fast querying during the assembly process, and a significant redesign of assembly steps that enables multi-threaded execution. Availability and implementation: The program is available under the GPLv3 license from sourceforge net projects spa assembler
introduction next generation sequencing (NGS) technologies are used routinely in meta genomics and provide a cost effective approach to assay microbial communities at a high sequencing depth (). However, the computational analysis of these large datasets is a challenge and is influenced by the genomic composition and taxonomic divergence of the constituent microbes in the sampled community. In particular, effective identification of sequence and function of proteins from meta genomic datasets is hampered by the short read lengths generated by NGS technologies, and also by the fragmented nature of meta genomic assemblies (of nucleotide reads) that are attempted to reconstruct genome sequences. To address this problem, we had previously introduced a framework that reconstructs proteins from meta genomic data by first identifying partial protein sequences (or short peptides) from the nucleotide reads using a gene finder and subsequently assembling these short peptides into long protein sequences using a novel algorithm (). Our short peptide assembler (SPA) algorithm and framework was compared to the alternate strategy of first assembling the nucleotide reads and then identifying proteins on the assembled contigs; several different nucleotide assemblers were evaluated. We showed that SPA outperforms the alternate strategy under multiple evaluation criteria, including specificity, sensitivity, read assembly rate and chimera rate (). However, while our evaluations included datasets containing more than 100 million reads, we noted that the computational efficiency of SPA could be improved. Here, we present computational improvements to SPA that result in a substantial speed up of the assembly process, while maintaining assembly output quality. Our new assembly algorithm and implementation, denoted as sfas pa uses the suffix array ()a space efficient data structure that also allows for the computationally efficient querying of patterns in a given text. The suffix array is used to speed up the initial path finding step of SPA, which is a major run time bottleneck. In addition, several assembly steps were significantly redesigned and re-implemented, and these improvements now allow due to additional lookups needed to calculate the size of the read support set), it is still nearly six-fold faster than SPA (m  25) on these data (). Chimera rates are very low in both implementations and sfas pa achieves similar read assembly rates as SPA (Supplementary S3.1). In addition to the effect of the minimum overlap length m, the effects of other parameters (minimum seed depth s and minimum read support r) on the performance of sfas pa were also evaluated (Supplementary S3.2 and S3.3); these evaluations highlight the relative importance of the overlap parameter m on the assembly quality. The peak memory usage for sfas pa is higher than that of SPA, with sfas pa using 95 GB RAM (2.8 times more than SPA) for the oral sim dataset (Supplementary S3.1). We note though that the sizes of the suffix array and its associated data structures grow linearly with the input size. The increased memory usage for sfas pa is expected given the space versus run time tradeoff in our algorithm redesign; however, this is not an issue since hardware costs associated with these physical memory size requirements are reasonable. Finally, the run time of sfas pa is comparable to that of other nucleotide sequence assemblers for meta genomic data (Supplementary S3.4).
