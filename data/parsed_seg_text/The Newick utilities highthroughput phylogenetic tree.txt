We present a suite of UNIX shell programs for processing any number of phylogenetic trees of any size. They perform frequently used tree operations without requiring user interaction. They also allow tree drawing as scalable vector graphics (SVG), suitable for high quality presentations and further editing, and as ASCII graphics for command line inspection. As an example we include an implementation of boot scanning a procedure for finding recombination breakpoints in viral genomes. Availability: C source code, Python bindings and executables for various platforms are available from

introduction phylogenetic trees are a fundamental component of evolutionary biology, and methods for computing them are an active area of research. Once computed, a tree may be further processed in various ways (). Small datasets consisting of a few trees of moderate size can be processed with interactive GUI programs. As datasets grow, however, interactivity becomes a burden and a source of errors, and it becomes impractical to process large datasets of hundreds of trees and or very large trees without automation. Automation is facilitated if the programs that constitute an analysis pipeline can easily communicate data with each other. One way of doing this in the Unix shell environment is to make them capable of reading from standard input and writing to standard output such programs are called filters. Although there are many automat able programs for computing trees [e.g. phy ml (), PHYLIP (, programs for processing trees [e.g. TreeView (), it ol ()] are typically interactive. Here, we present the Newick utilities, a set of automat able filters that implement the most frequent tree processing operations. * To whom correspondence should be addressed.

discussion the Newick utilities add tree processing capabilities to a shell user's toolkit. Since they have no hard-coded limits, they can handle large amounts of data; since they are non-interactive, they are easy to automate into pipelines, and since they are filters, they can easily work with other shell tools. Tree processing may also be programmed using a specialized package [e.g. BioPerl (), APE () or ETE (, but this implies knowledge of the package, and such programs tend to be slower and use more resources than their C equivalents. The difference is particularly apparent for large trees ().
