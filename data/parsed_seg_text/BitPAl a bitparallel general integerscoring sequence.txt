Motivation: Mapping of high throughput sequencing data and other bulk sequence comparison applications have motivated a search for high efficiency sequence alignment algorithms. The bit parallel approach represents individual cells in an alignment scoring matrix as bits in computer words and emulates the calculation of scores by a series of logic operations composed of AND, OR, XOR, complement, shift and addition. bit parallelism has been successfully applied to the longest common subsequence (LCS) and edit distance problems, producing fast algorithms in practice. Results: We have developed bit pal a bit parallel algorithm for general , integer scoring global alignment. integer scoring schemes assign integer weights for match, mismatch and insertion deletion. The bit pal method uses structural properties in the relationship between adjacent scores in the scoring matrix to construct classes of efficient algorithms , each designed for a particular set of weights. In timed tests, we show that bit pal runs 7â€“25 times faster than a standard iterative algorithm. Availability and implementation: Source code is freely available for download at http://lobstah.bu.edu/BitPAl/BitPAl.html. bit pal is implemented in C and runs on all major operating systems.

introduction sequence alignment algorithms are critical tools in the analysis of biological sequence data including DNA, RNA and protein sequences. The demands placed on computational resources by high throughput experiments require new, more efficient methodologies. While the standard algorithms of Smith and and Needleman and calculate the score in each cell of the alignment scoring matrix sequentially, a newer technique called bit parallelism partially overcomes score dependencies so that scores can be calculated in parallel to achieve much higher efficiencies. bit parallel algorithms have been developed for exact and approximate string matching problems. Early examples include the algorithms of baeza yates and, which finds exact matches to a simple string pattern, and, which finds approximate matches to a string pattern or a regular expression, where the number of differences between the pattern and the text is at most k (counting single character substitutions and single character insertions and deletions or indels). The latter is implemented as the Unix command agrep. Additional k differences examples include (), which finds matches to 'limited expressions', i.e. regular expressions without Kleene closure, (), which finds matches to simple string patterns and emulates the dynamic programming solution used in alignment, and (), which allows arbitrary integer weights for substitution of each pair of characters, insertion of each character and deletion of each character, and finds occurrences of regular expressions where the sum of the edit weights is at most k. In most k differences algorithms, the complexity (and computing time) increases with increasing k. bit parallel methods have been successfully applied to the longest common subsequence (LCS) problem (), and to unit cost edit distance hy yr o and) by modifications of myers s method (1999). These algorithms compute the alignment score, de linking that computation from the traceback, which produces the final alignment. In the LCS scoring matrix, scores are monotonically non-decreasing in the rows and columns, and bit parallel implementations use bits to represent the cells where an increase occurs. In edit distance scoring, adjacent scores can differ by at most one, and the binary representation stores the locations of (two of the three) possible differences, +1, 1 and zero. These algorithms are ad hoc in their approach, relying on specific properties of the underlying problems, making it difficult to directly adapt them to other alignment scoring schemes. Below, we present a bit parallel method for similarity and distance based global alignment using general integer scoring (), allowing arbitrary integer weights for match, mismatch and in del. Other approaches have been suggested by and Bergeron and Hamel (2002). The method of is more flexible in scoring and applies to both simple patterns and regular expressions, but is much slower than our method in practice. Our contribution is based on an observation of the regularity in the relationship between adjacent scores in the scoring matrix (Section 2.1) and the design of an efficient series of bit operations to exploit that regularity (Section 3). Because every distinct choice of weights requires a different program, we show how to construct a class of efficient algorithms, each designed for a particular set of weights, and provide an online C code generator for users. *To whom correspondence should be addressed.  The Author 2014. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited the complexity of our algorithms depends on the weights, not the ultimate score of the alignment. Our method works for general alphabets, but our interest derives from frequent use of DNA alignment when analyzing high throughput sequencing data to detect genetic variation.

discussion the bit pal and bit pal packed algorithms outlined above can be extended in several ways. Computers now in common usage have special 128 bit SIMD registers (Single Instruction, Multiple Data). Using these, with the addition of several bookkeeping operations, would essentially double the efficiency and the speed of computation. Another extension derives from the unexploited parallelism of the operations. There are no dependencies on prior computations after the "V vectors in Zone A are computed. This means that all the computations in Zones B, C and D for "V and all the subsequent computations for "H can be done simultaneously, an ideal situation for the use of general purpose graphical processing units gp gpu. Another possible extension expands the types of scoring schemes allowed. BLOSUM type scoring, which is useful for protein alignments, eliminates match and mismatch scoring and instead assigns different substitution weights to each pair of characters. affine gap scoring replaces single character in del scoring with gap initiation and gap extension weights. Extension to local alignment is also possible. This is a different class of problem in that the best final alignment score can occur in any cell of the alignment matrix. If all the cells have to be examined, then the time complexity shifts back to on m. hy yr  o and Navarro (2006) had some success with this problem using unit cost weights and identifying columns in which the score of at least one cell exceeds a predefined threshold k. The bit pal methods have already been used to accelerate software for detecting tandem repeat variants in high throughput sequencing data () and are well suited to other DNA sequence comparison tasks that involve computing many alignments. Funding: This work was supported by the National Science Foundation (IIS-1017621 to G.B., DGE-0654108 to J.L. and Y.H.).
