Motivation: Tools aiding in collaborative data analysis are becoming ever more important as researchers work together over long distances. We present an extension to the Gaggle framework, which has been widely adopted as a tool to enable data exchange between different analysis programs on one computer. Results: Our program, gaggle bridge transparently extends this functionality to allow data exchange between Gaggle users at different geographic locations using network communication. gaggle bridge can automatically set up SSH tunnels to traverse firewalls while adding some security features to the Gaggle communication. Availability: gaggle bridge is available as open source software implemented in the Java language at

introduction the Gaggle () has become the standard framework for connecting different applications together to study systems biology questions more efficiently. Many different applications support Gaggle, i.e. they are implementing the Gaggle Goose interface. Data such as gene identifiers, clusters, regulatory networks or data matrices can be exchanged between all such Geese that are connected to a common Gaggle Boss instance. This can greatly speed up scientific work by removing the need for data format conversion and exporting importing data between different programs. This communication is usually limited to programs running on the local computer. However, the Gaggle approach could also be used to allow different researchers to work together on one dataset. For example, data could be sent from one user's genome browser to another user's microarray analysis software, enabling the collaborative dissection of complex datasets. The RMI methodology underlying gaggle s implementation is network transparent and allows a connection between programs over long distances. However, only very few Geese support connections to remote Boss instances. Furthermore, connecting to remote instances is not always straightforward as these might be behind firewalls or security gateways. Exposing them to the world-wide network is undesirable as Gaggle does not include any security or authentication scheme. * To whom correspondence should be addressed.  The authors wish it to be known that, in their opinion, the first two authors should be regarded as joint First authors here we present gaggle bridge an addition to the Gaggle that extends the existing concept to allow collaborative research over the network a screenshot showing gaggle bridge with three connected Boss instances, one connection to the locally running Boss instance, one connection to a remote instance without tunneling (user Alex) and one remote connection via SSH tunneling (user Luca); (B) screenshot of a Gaggle Genome Browser instance (user Luca) broadcasting a selection of three loci; (C) screenshot of a Gaggle Genome Browser instance (user Alex) receiving this broadcast. The loci are highlighted and added to list of bookmarks on the right.

discussion the availability of automated network communication, which is provided by gaggle bridge results in a wide range of possible applications. While the main focus of Gaggle is data exchange between different bioinformatic tools, the connection of several instances of the same tool running on different computers now enables collaborating scientists at different locations to work simultaneously on the same data. Using Gaggle in a networked environment has two inherent security problems: first, in an open network configuration, anyone can connect to a running Gaggle Boss, whether the original user wants this or not. Secondly, when using gaggle bridge any of the connected users could allow a third party to take part in the information transmitted, either locally or by connecting them with a further gaggle bridge connection. While our enhanced Boss somewhat remedies the first problem, we believe that this security issue should be addressed in a possible later release of the Gaggle itself. The second problem is the general problem of trust between collaborating researchers. Currently, we can not propose a technical solution for this issue. To illustrate the benefit of our approach, we present the example of two users (same project. Both use the Gaggle Genome Browser () to visualize locus data, in addition they have a conversation via a telephone conference. Their Gaggle Boss instances are connected via gaggle bridge. Now Luca can select specific loci in the browser and broadcast the selection with Gaggle (). Alex' genome browser receives this information, the same elements are instantly selected and the loci are added to the list of bookmarks (). This increases the efficiency of the communication between the users substantially as a verbal description of the locus by Luca and a tedious manual search for the elements by Alex is no longer required. Such communication can also take place within a much larger group of users, and each user can run additional Geese, which will all receive the broadcasts processing and visualizing the data according to their specific functionality. Note that, as gaggle bridge transparently enhances Gaggle, no modification of these Geese or the connected Boss instances are required. Thus, the features of gaggle bridge can be used with minimal installation effort, allowing to swiftly introduce a collaborative approach to data analysis into any research environment.
