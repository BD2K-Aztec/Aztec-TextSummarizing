bio js is an open source project whose main objective is the visualization of biological data in JavaScript. bio js provides an easy to use consistent framework for bioinformatics application programmers. It follows a community driven standard specification that includes a collection of components purposely designed to require a very simple configuration and installation. In addition to the programming framework, bio js provides a centralized repository of components available for reutilization by the bioinformatics community. Availability and implementation:

introduction numerous web applications exist for the visualization and integration of biological data. Biological data can be complex and heterogeneous, making it challenging to integrate and visualize results in web applications. JavaScript is a popular language for developing Rich Internet Applications (RIA); most RIA rely on JavaScript libraries for deployment of functionality. Despite its widespread use in bioinformatics, JavaScript applications are usually implemented to satisfy a particular utility, ignoring its potential for reutilization by other applications with similar purposes. Here, we present bio js an open source community driven JavaScript framework of reusable graphical components. bio js offers a set of standard guidelines on how to develop components for JavaScript modules in the Life Sciences. These guidelines make installation and addition of new code the same for all new components, minimizing effort and encouraging good programming practice. bio js provides a catalogue of open source modules in JavaScript for Life Sciences. These modules include many commonly used functionalities, available there for developers or scientists to download. bio js embraces a similar philosophy to previously successful biologically oriented open source projects, such as BioPerl (), BioJava (), BioPython () or BioRuby (), advocating that any functional component or module should be developed only once and reused whenever possible. Our approach offers a standard and scalable set of specifications to produce custom applications; it also facilitates the integration of components into more comprehensive web applications. To our knowledge, no community efforts have so far achieved a coordinated development of JavaScript applications for the visual representation of biological data.
