Motivation: Maximal exact matches, or just MEMs, are a powerful tool in the context of multiple sequence alignment and approximate string matching. The most efficient algorithms to collect them are based on compressed indexes that rely on longest common prefix array centered data structures. However, their space efficient representations make use of encoding techniques that are expensive from a computational point of view. With the deluge of data generated by high throughput sequencing, new approaches need to be developed to deal with larger genomic sequences. Results: In this work, we have developed a new longest common prefix array sampled representation, optimized to work with the backward search method inherently used by the fm index. Unlike previous implementations that sacrifice running time to have smaller space, ours lead to both a fast and a space efficient approach. This implementation was used by the new software slam em developed to efficiently retrieve MEMs. The results show that the new algorithm is competitive against existing state of the art approaches. Availability and implementation: The software is implemented in C and is operating system independent. The source code is freely available for download at

introduction with the new high throughput sequencing technologies becoming faster, cheaper and more accurate, the number of available genomes is growing fast. meta genomics is also pushing forward the need to align new sequences to those already known to compare different strains or assemblies, build phylogenetic trees, identify new genes, identify mutations or polymorphisms, observe structural variations and perform other relevant operations. It is well known that dynamic programming approaches are prohibitive, both in terms of required memory and processing time, when aligning large genomes or a number of different genomes. To approach these problems, strategies using seeded alignments with shared segments, which are identical among the sequences and act as anchor points for the alignment, have been developed. These anchors can be fixed length exact matches, or km ers as those used in the BLAST () tool. However, this type of match is inefficient because it can lead to an oversized number of hits, and these still have to be extended in both directions using pairwise comparisons, implying a significant processing time. Much more efficient is the identification of maximal unique matches (MUMs) that have been introduced first by). MUMs are identical substrings that occur exactly once in each sequence and whose occurrences can not be extended to either side without producing a mismatch. The second version of MUMmer () introduced a new more compact suffix tree (ST) representation, and the third and last one () added the ability to output maximal exact matches (MEMs). These are similar to MUMs but can occur any number of times, which is useful when the number of MUMs is insufficient to produce enough anchors for a solid alignment, e.g. when many repeated regions exist. Also, using MEMs instead of MUMs multiplies the regions covered by anchors, reducing considerably the areas requiring further processing. However, the bottleneck of MUMmer is the memory requirements of its ST index structure, which can become problematic when it does not fit into the main memory. Other closed source tools based on enhanced suffix arrays (ESAs) such as v match () and CoCoNUT () have also been released, but they share the same problem. For this reason, and to deal with larger sequences, other approaches to find MEMs have been developed. The sparse mem approach () makes use of a sparse SA as an index, which trades memory space for extra computational time. Later, backward mem () used a backward search method over a compressed ESA. More recently, es same m () improved sparse mem by enhancing it with a sparse child array that reduces computational time maintaining the same memory footprint. This method currently shows the best tradeoff between time and memory consumption for MEM identification. In this work, we propose another approach as an alternative to these previous tools. We have developed a new sampled representation of the longest common prefix (LCP) array, optimized to work with the backward search method inherent from the *To whom correspondence should be addressed. fm index. Results show the effectiveness of the new method for a number of different genomes.
