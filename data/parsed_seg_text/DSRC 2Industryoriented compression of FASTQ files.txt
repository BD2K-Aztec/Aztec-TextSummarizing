Modern sequencing platforms produce huge amounts of data. Archiving them raises major problems but is crucial for reprodu-cibility of results, one of the most fundamental principles of science. The widely used gzip compressor, used for reduction of storage and transfer costs, is not a perfect solution, so a few specialized fast q compressors were proposed recently. Unfortunately, they are often impractical because of slow processing, lack of support for some variants of fast q files or instability. We propose DSRC 2 that offers compression ratios comparable with the best existing solutions, while being a few times faster and more flexible. Availability and Implementation: DSRC 2 is freely available at http:// sun.aei.polsl.pl/dsrc. The package contains command line compres-sor, C and Python libraries for easy integration with existing software and technical documentation with examples of usage.

introduction genome sequencing has growing impact on medicine. There are emerging projects like the Personal Genome Project () or the Million Veteran Program (), in which hundreds of thousands of human genomes are to be sequenced. Illumina Company offers whole genome sequencing for clinical purposes for a few thousand US dollars. The companies like Ion Torrent promise the whole human genome sequencing in hours for 51000 dollars to be available soon. It seems that personalized medicine for the masses will be available in the near future. The low cost of pure sequencing is not, however, everything, as the data must be stored and transferred. The IT costs were not treated seriously in the past, when the sequencing was expensive and slow. Nowadays, the costs of storage and transfers counted in hundreds of dollars for a single genome per year are no longer negligible. Moreover, the improvements in this field are far behind what is present in the sequencing (). An obvious solution to the data deluge is data compression and many specialized compressors appeared in the recent years (see the survey,). These tools are, however, rather 'experimental' and tend to suffer from one or more of the following drawbacks: (i) they focus mainly on the compression ratio, and as a consequence (de)compression is slow (sometimes even comparable with the speed of sequencing), (ii) they are available as external tools, so the compressed formats can not be directly used by other software, (iii) they have no support for some types of fast q files, e.g. in color space or variable length reads and (iv) they are unstable and crash frequently. The focus on the compression ratio can sometimes be justified, especially, when the goal is just storage for archival purposes. In many situations the data are, however, stored locally and decompressed many times (for various analyses), so the decompression speed could be a significant factor of the processing speed of a whole pipeline. Thus, in practice the well known but rather inefficient gzip program is still in wide use. We think that it is time for industry oriented solutions. Thus, we introduce DSRC 2, supporting any variant of fast q files. Its compression ratios are much better than gzip/bzip2 and only moderately worse than the best existing programs, but the speed of (de)compression is high. DSRC 2 also supports illumina s plan of quality resolution reduction (http://res.illumina.com/ documents products white papers white paper data compression. pdf, 2012) and can read/write to pipes, for easy integration with pipelines. with context being the position in the read, or the order 1 Huffman coder of the run length encoded quality stream. In the second method, the quality values are compressed arithmetically with context lengths up to 6.
