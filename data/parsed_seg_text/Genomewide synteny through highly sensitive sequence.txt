Motivation: Comparative genomics heavily relies on alignments of large and often complex DNA sequences. From an engineering perspective, the problem here is to provide maximum sensitivity (to find all there is to find), specificity (to only find real homology) and speed (to accommodate the billions of base pairs of vertebrate genomes). Results: Satsuma addresses all three issues through novel strategies: (i) cross correlation implemented via fast Fourier transform; (ii) a match scoring scheme that eliminates almost all false hits; and (iii) an asynchronous battleship like search that allows for aligning two entire fish genomes (470 and 217 Mb) in 120 CPU hours using 15 processors on a single machine. Availability: Satsuma is part of the Spines software package, implemented in C++ on Linux. The latest version of Spines can be freely downloaded under the LGPL license from

introduction the problem of identifying DNA sequences that share a common origin dates back to the beginning of modern genomics, and a number of sequence alignment programs have been developed over the past 30 years [an incomplete list includes fast a (); the BLAST family, including blast z and mega blast (), http://blast.wustl.edu; s search (); MUMmer (); BLAT (); pattern hunter (. Comparative genome biology aims to find genomic differences as well as similarities. From a computational perspective, this requires providing pairwise sequence alignments at maximum sensitivity, specificity and acceptable speed. While full dynamic programming approaches (such as in) in theory yield maximal sensitivity, it is not practical to apply them to large datasets (e.g. entire vertebrate genomes), because of the high computational cost. * To whom correspondence should be addressed two other approaches have been used to address this issue i suffix tree based methods (e.g.), which are very fast, but limited to highly similar sequences; and (ii) k tuple or seeded matches (), where specific regions are considered for more thorough alignments if a minimum number of seeds (either consecutive runs of bases, k tuples km ers or windows that allow for mismatches in certain positions but not others) can be matched perfectly between both sequences, so that the size of the seed (i.e. the minimum number of bases that need to match) determines the runtime of the program versus its sensitivity. Seeded aligners generally require genomic sequences to be masked for repeats and or these programs dynamically filter out seeds that occur too many times, to avoid runtimes that increase exponentially with seed frequency (). Satsuma is a new sequence alignment program, which, in contrast, finds sequence matches through cross correlation a widely used technique in audio signal processing. When we treat genomic sequences as if they were audio signals, applying cross correlation is like finding decayed echoes of originally identical acoustic patterns in this case homologous DNA that has diverged over time (for similar, yet conceptually different approaches applying cross correlation to DNA sequence, see). cross correlation computes a measure of similarity between two analog signals in the time domain as a function of time lag or relative shift between them, resulting in a sliding dot product of both signals. This operation can be done in the frequency domain as a number of multiplications at computational cost that is linear with the signal length; given that the transformation back and forth between time and frequency domains is computed rapidly using the fast Fourier transform (FFT) algorithm (), cross correlation can be computed very efficiently (). However, it is not computationally possible to fourier transform large sequences such as entire chromosomes at once (runtime = O(n * log n so Satsuma divides genomic sequences (the query and the target) into windows (4096 bp by default) that overlap in the query sequence (overlap = one fourth of the size). When a query window is compared to a target window, nucleotides from both sequence windows are translated into four numeric signals, one for each base (or letter, A, C, G and T), and cross correlation is applied to each signal pair. After summing up the results for all letters, we are left with a function that indicates the letter similarity between query
