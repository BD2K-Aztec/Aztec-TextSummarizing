Motivation: Unambiguous sequence variant descriptions are important in reporting the outcome of clinical diagnostic DNA tests. The standard nomenclature of the Human Genome Variation Society (HGVS) describes the observed variant sequence relative to a given reference sequence. We propose an efficient algorithm for the extraction of HGVS descriptions from two sequences with three main requirements in mind: minimizing the length of the resulting descriptions, minimizing the computation time and keeping the unambiguous descriptions biologically meaningful. Results: Our algorithm is able to compute the HGVS descriptions of complete chromosomes or other large DNA strings in a reasonable amount of computation time and its resulting descriptions are relatively small. Additional applications include updating of gene variant database contents and reference sequence lift overs
introduction the Human Genome Variation Society (HGVS) publishes nomenclature guidelines () for unambiguous sequence variant descriptions in clinical reports, the literature and genetic databases. The muta lyze r program suite () has been built to automatically check and correct these variant descriptions: the automatic checking and correction of variant descriptions. As many complex variants are supported, the corresponding descriptions are not always straightforward to construct, justifying the need for the automatic extraction of HGVS descriptions by comparison of the sequence observed in an individual to the reference sequence specified in guidelines and databases. Here, we approach this from an informatics perspective as a string comparison problem. Consider two DNA strings: R, the reference string and S, the sample or observed string the string S can be rewritten in terms of string R by using the HGVS description the string tostring correction problem calculates the distance between two strings as measured by the minimum cost of a sequence of edit operations needed to transform one string into the other. The traditionally allowed edit operations () are exchanging one symbol of a string for another: a substitution indicated using  between symbols (26A  C), deleting a single symbol from a string: a deletion indicated using abbreviation del (17del), and inserting one symbol: an insertion using abbreviation ins (5 6insTT). There is a specific case: insertion of previous symbol(s) is described with HGVS term duplication using abbreviation dup (35dup). The string tostring correction problem has been extended on in numerous occasions () usually allowing more powerful edit operations. Here, we solve another extension of this problem by defining additional edit operators especially suited to the HGVS nomenclature. Formally, our extension can be defined as follows. Given two strings R and S over the finite alphabet R  fA; C; G; Tg, and a set of edit operators with their corresponding (non-negative) weights, calculate a sequence of edit operations that transforms a reference string R into a sample string S with a minimum cost with regard to the weights of the operations given in. The weights in are based on the textual length of the HGVS nomenclature. Note that the length of the description of the position is dependent on the position, i.e. toward the end it takes more symbols to describe the position, therefore we will parameterize all weights making them independent of the positions. Traditionally, the edit operations are defined on single symbols. To provide a more intuitive way of describing variants, we extend these operations in a natural way allowing use of substrings rather than individual symbols. Note that, in contrast to the insertion operator, the deletion operator on multiple symbols is not dependent on the length of the deleted substring, thereby creating an asymmetry between insertion and deletion. In addition to the traditional edit operators, we define two additional operators: inversion (HGVS abbreviation: in v matches the reverse complement of the string and transpositions.

discussion in this section, we introduce two additional qualities of automatically generated HGVS descriptions especially when used in genomic databases.

conclusion we introduced an algorithm to extract HGVS descriptions from raw DNA sequences with respect to reference sequences. We made this algorithm computationally efficient for highly similar strings by introducing an alternative version of the classic LCS algorithm using overlapping and non-overlapping km ers. We showed that the combination of these algorithms is able to compute the HGVS descriptions of large DNA strings in a reasonable amount of computation time and that the resulting descriptions are relatively small. The HGVS descriptions yielded by the extraction algorithm are fully compliant with the muta lyze r tool suite. The Name Checker tool can be used to generate the original sample string from the description. We proposed to extend the HGVS nomenclature with the transposition operator as it can greatly reduce the lengths of descriptions, while still being able to efficiently compute these transpositions. In addition to having a canonical algorithm for generating HGVS descriptions, we have shown that these descriptions are useful in genomic databases for their compression and transitivity properties. The automatic extraction of descriptions will be of great value to curators of existing databases: it makes updates using new versions of reference sequences or of the nomenclature and correction of HGVS descriptions very easy.
