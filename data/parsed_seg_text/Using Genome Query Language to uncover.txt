Motivation: With high throughput DNA sequencing costs dropping 5$1000 for human genomes, data storage, retrieval and analysis are the major bottlenecks in biological studies. To address the large data challenges, we advocate a clean separation between the evidence collection and the inference in variant calling. We define and implement a Genome Query Language (GQL) that allows for the rapid collection of evidence needed for calling variants. Results: We provide a number of cases to showcase the use of GQL for complex evidence collection, such as the evidence for large structural variations. Specifically, typical GQL queries can be written in 5â€“10 lines of high level code and search large datasets (100 GB) in minutes. We also demonstrate its complementarity with other variant calling tools. Popular variant calling tools can achieve one order of magnitude speed up by using GQL to retrieve evidence. Finally, we show how GQL can be used to query and compare multiple datasets. By separating the evidence and inference for variant calling, it frees all variant detection tools from the data intensive evidence collection and focuses on statistical inference. Availability: GQL can be downloaded from

introduction as sequencing costs drop, we envision a scenario where every individual is sequenced, perhaps multiple times in their lifetime. There is already a vast array of genomic information across various large scale sequencing projects including the 1000 genome project (1000 Genomes) and the cancer genome atlas (TCGA) (). In many of these projects, a re-sequencing strategy is applied in which whole genomes are sequenced redundantly with coverage between 4 and 40. The clone inserts ($500 bp) and sequenced reads ( 150 bp) are typically short and are not de novo assembled. Instead, they are mapped back to a standard reference to decipher the genomic variation in the individual relative to the reference. Even with advances in single molecule sequencing and genomic assembly (), we are many years away from having finished and error free assembled sequences from human donors. At least in the near to mid-term, we expect that the bulk of sequencing will follow the resequencing mapping variant calling approach (e.g.). Mapped reads (represented by BAM files) from a single individual sequenced with 40 coverage are relatively inexpensive to generate, but they are storage intensive ($100GB). As sequencing becomes more accessible, and larger numbers of individuals are sequenced, the amount of information will increase rapidly; this will pose a serious challenge to available community resources. Although raw archiving of large datasets is possible (), the analysis of this huge amount of data remains a challenge. To facilitate access, some of the large datasets have been moved to commercially available cloud platforms. For example, the 1000 genome data are available on Amazon's EC2 1000 genomes cloud 2012). The genomes on Amazon can be analyzed remotely using appropriate software frameworks like Galaxy [that allow for the pipelining integration of multiple analysis tools (, as well as tools like Genome Analysis Toolkit g atk () and sam tools (). The promise of this approach is that much of the analysis can be done remotely, without the need for extensive infrastructure on the user's part. Even with these developments, a significant challenge remains. Each individual genome is unique, and the inference of variation, relative to a standard reference remains challenging. In addition to small indels and substitutions (the so called single nucleotide variations or sn vs an individual might have large structural changes, including, but not limited to, insertions, deletions, inversions (), translocations of large segments (10 2 10 6 bp in size) (), incorporation of novel viral and microbial elements and recombination mediated rearrangements (). Further, many of these rearrangements may overlap leading to more complex structural variations. The detection of these variations remains challenging even for the simplest sn vs and there is little consensus on the best practices for the discovery of more complex rearrangements. For large, remotely located datasets, it is often difficult to create a fully customized analysis. It is often desirable to download the evidence (reads) required for the detection of variation to a local machine, and experiment with a collection of analysis tools for the actual inference. In that case, we are back again to the problem of building a large local infrastructure, including clusters and large disks, at each analysis site in addition to the resources in the cloud. As an example, we consider the use of paired end sequencing and mapping (PEM) for identifying structural variation. In *To whom correspondence should be addressed. PEM, fixed length inserts are selected for sequencing at both ends, and the sequenced sub reads are mapped to a reference genome. Without variation, the distance and orientation of the mapped reads match the a priori expectation. However, if a region is deleted in the donor relative to the reference, ends of the insert spanning the deleted region will map much further apart than expected. Similarly, the expected orientation of the read alignments for Illumina sequencing is (,). A (,) orientation is suggestive of an inversion event. Using PEM evidence, different callers still use different inference mechanisms. gas v () arranges overlapping discordant ly mapping pair end reads on the Cartesian plane and draws the grid of possible break point locations under the assumption that the discord ancy is a result of a single SV. break dancer () finds all areas that contain at least two discordant pair end reads, and it uses a Poisson model to evaluate the probability that those areas contain a SV as a function of the total number of discordant reads of each of those areas. variation hunter () reports that regions of SV are the ones that minimize the total number of clusters that the pair ends can form. Given the complexity of the data, and the different inference methodologies, all of these methods have significant type 1 false positive and type 2 false negative errors. Further, as the authors of variation hunter () point out, there are a number of confounding factors for discovery. For example, repetitive regions, sequencing errors, could all lead to incorrect mappings. At the same time, incorrect calls can not be easily detected because tools need to be modified to re-examine the source data. In addition, the run time of the entire pipeline of those tools is not negligible given that they have to parse the raw data. A starting point of our work is the observation all tools follow a two step procedure, implicitly or explicitly, for discovery of variation. The first step the evidence step involves the processing of raw data to fetch (say) the discordant pair end reads; the second step the inference step involves statistical inference on the evidence to make a variant call. Moreover, the evidence gathering step is similar and is typically the data intensive part of the procedure. For example, in SNV discovery, the evidence step is the alignment pile up of nucleotides to a specific location, whereas the inference step involves SNV estimation based on alignment quality and other factors. By contrast, for SVs such as large deletions, the evidence might be in the form of (a) length discordant reads and (b) concordant reads mapping to a region; the inference might involve an analysis of the clustering of the length discordant reads, and looking for copy number decline and loss of heterozygosity in concordant reads. In this article, we propose a Genome Query Language (GQL) that allows for the efficient querying of genomic fragment data to uncover evidence for variation in the sampled genomes. Note that our tool does not replace other variant calling tools, but it is complementary to existing efforts. It focuses on the collection of evidence that all inference tools can use to make custom inference. First, by providing a simple interface to extract the required evidence from the raw data stored in the cloud, GQL can free callers from the need to handle large data efficiently. Second, we show how existing tools can be sped up and simplified using GQL, with larger speed-ups possible through a cloud based parallel GQL implementation. Third, analysts can examine and visualize the evidence for each variant, independent of the tool used to identify the variant. Software layers and interfaces for genomics: We also place GQL in the context of other genomics software. It is helpful to think of a layered, hourglass, model for genomic processing. At the bottom is the wide, instrument layer (customized for each instrument) for calling reads. This is followed by mapping/ compression layers (the 'narrow waist' of the hourglass), and subsequently, multiple application layers. Some of these layers have been standardized. Many instruments now produce sequence data as fast q format, which in turn is mapped against a reference genome using alignment tools, such as BWA () and MAQ (); further, aligned reads are often represented in the compressed, BAM format () that also allows random access. Recently, more compressed alignment formats have come into vogue including slim gene () CRAM () and others () as well as compression tools for unmapped reads (). At the highest level, standards such as VCF (VCF) describe variants (the output of the inference stage of). In this context, we propose additional layering. Specifically, we advocate the splitting of the processing below the application layer to support a query into an evidence layer deterministic large data movement, standardized) and an inference layer (probabilistic, comparatively smaller data movement, little agreement on techniques). For evidence gathering, the closest tools are sam tools (), bam tools bio hdf () and g atk (). sam tools consists of a toolkit and an API for handling mapped reads; together, they comprise the first attempt to hide the implications of raw data handling by treating datasets uniformly regardless of the instrument sources am tools also provide quick random access to large files and provide a clean API to programmatically handle alignments. The tool combines index sorted BAM files with a lightweight and extremely efficient binning that clusters reads that map in neighboring locations. Thus, sam tools can quickly return a set of reads that overlap with a particular location or create a pile up (i.e. all bases seen in reads that map to any reference locus). bam tools is a C API built to support queries in a JSON format. bed tools closely aligned with sam tools allows interval related queries through a clean unix and a python interface. Although powerful, these tools still require programmer level expertise to open binary files, assign buffers, read alignments and manipulate various fields. The g atk () is built on top of sam tools and reduces the programming complexity of data collection. gat ks API provides two main iterator categories to an application programmer. The first iterator traverses individual reads; the second iterator walks through all genome loci, either individually or in adjacent groups. The toolkit, which is written based on the Map Reduce framework and thus easily parallelizable, is an excellent resource for developers of applications that need to determine local realignment, quality score re-calibration and genotyping (). The support of many of these tools for looking at paired ends and consequently for structural variation, is limited, depending (in gat ks case) on the existence of the optional fields r next and p next of the samba m alignments g atk pair end 2012). The single biggest difference between our proposed tool, GQL and others is that GQL has a sql like declarative syntax in its own language, as opposed to a procedural syntax, designed to help programmers rather than the end user. Declarative languages, such as GQL and SQL, not only raise the level of abstraction of data access but also allow automatic data optimization without programmer intervention. By asking users to specify what data they want as opposed to how they want to retrieve it, we will show that GQL can facilitate automatic optimizations, such as the use of indices and caching; these seem harder to support in other tools without explicit programmer directives. Further, it is feasible to compile GQL queries to a distributed, cloud based, back-end. Finally, GQL queries allow genomes to be browsed for variations of interest, allowing an interactive exploration of the data as we show in our results. Although the UCSC browser also allows genome browsing, it does only by position or string, which we refer to as syntactic genome browsing. By contrast, GQL allows browsing for all regions containing reads that satisfy a specified property (e.g. discrepant reads) and view the results on the UCSC browser. We refer to this as semantic genome browsing and give many examples in Section 2. Our performance results indicate that such browsing can be done interactively in minutes using a single cheap CPU.
