In order to develop powerful computational predictors for identifying the biological features or attributes of DNAs, one of the most challenging problems is to find a suitable approach to effectively represent the DNA sequences. To facilitate the studies of DNAs and nucleotides, we developed a Python package called representations of DNAs rep dna for generating the widely used features reflecting the physicochemical properties and sequence order effects of DNAs and nucleotides. There are three feature groups composed of 15 features. The first group calculates three nucleic acid composition features describing the local sequence information by means of km ers the second group calculates six autocorrelation features describing the level of correlation between two oligonucleotides along a DNA sequence in terms of their specific physicochemical properties; the third group calculates six pseudo nucleotide composition features, which can be used to represent a DNA sequence with a discrete model or vector yet still keep considerable sequence order information via the physicochemical properties of its constituent oligonucleotides. In addition, these features can be easily calculated based on both the built in and user defined properties via using rep dna. Availability and implementation: The rep dna Python package is freely accessible to the public at

introduction with the avalanche of biological sequences generated in the post genomic age, one of the most challenging problems in computational biology is how to formulate a biological sequence with a discrete model or vector, yet still keep considerable sequence order information. This is because almost all the existing machine learning algorithms were developed to handle vector but not sequence samples. However, a vector defined in a discrete model may completely lose all the sequence order information. To avoid completely losing the sequence order information for proteins, the pseudo amino acid V C The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals permission soup com composition or pse aac () was propose. Ever since the concept of pse aac was proposed in 2001, it has been widely used in almost all the areas of computational proteomics [see e.g. () as well as a long list of references cited in a recent article (. Encouraged by the successes of using pse aac to deal with protein peptide sequences, a natural question has occurred: how to use the similar approach to deal with DNA sequences? Actually, this problem had been encountered in various genome analysis studies, such as DNA recombination spot identification (), prediction of nucleosome positioning in genomes (), investigation of nucleosome organization's functions () and promoter prediction (). Since various features derived from DNA sequences have been increasingly used for developing different models to analyze many genome analysis problems, recently a web server called pseudo k tuple r nucleotide composition p sek nc () was established to generate p sek nc. However, p sek nc is limited to a certain kind of features without the function of user defined physicochemical properties. In this study, we proposed an open source Python package called representations of DNAs rep dna which implemented a selection of sophisticated DNA features, including 15 different kinds of features in three categories. To our best knowledge, rep dna is the first Python package computing comprehensive DNA features based on the built in and user defined physicochemical properties. The rep dna package may hold very high potential for enhancing the power in dealing with many problems in computational genomics and genome sequence analysis.

conclusion to facilitate the studies of DNA and nucleotides, rep dna was proposed, which is able to generate various feature vectors for DNA sequences. The performance and efficiency of the various features in rep dna have been validated by a series of recent publications (). The implementation of each algorithm in rep dna has been extensively tested by a large number of testing DNA sequences, and the output results were compared with the known values of these sequences to make sure that our implementation is correct.
