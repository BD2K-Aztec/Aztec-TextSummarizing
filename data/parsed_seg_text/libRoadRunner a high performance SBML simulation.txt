Motivation: This article presents lib roadrunner an extensible, high performance cross platform open source software library for the simulation and analysis of models expressed using Systems Biology Markup Language (SBML). SBML is the most widely used standard for representing dynamic networks, especially biochemical networks. lib roadrunner is fast enough to support large scale problems such as tissue models, studies that require large numbers of repeated runs and interactive simulations. Results: lib roadrunner is a self contained library, able to run both as a component inside other tools via its Cþþ and C bindings, and interactively through its Python interface. Its Python Application Programming Interface (API) is similar to the APIs of MATLAB www mathworks com and SciPy (http://www.scipy.org/), making it fast and easy to learn. lib roadrunner uses a custom justin time (JIT) compiler built on the widely used LLVM JIT compiler framework. It compiles sbml specified models directly into native machine code for a variety of processors, making it appropriate for solving extremely large models or repeated runs. lib roadrunner is flexible, supporting the bulk of the SBML specification (except for delay and non-linear algebraic equations) including several SBML extensions (composition and distributions). It offers multiple deterministic and stochastic integrators, as well as tools for steady state analysis, stability analysis and structural analysis of the stoichiometric matrix. Availability and implementation: lib roadrunner binary distributions are available for Mac OS X, Linux and Windows. The library is licensed under Apache License Version 2.0. lib roadrunner is also available for arm based computers such as the Raspberry Pi. http://www.libroadrunner.org provides online documentation, full build instructions, binaries and a git source repository. Contacts:

introduction dynamic network models () of metabolic, gene regulatory, protein signaling and electrophysiological networks require the specification of components, interactions, compartments and kinetic parameters. The Systems Biology Markup Language (SBML) () has become the de facto standard for declarative specification of these types of model (). Popular tools for the development, simulation and analysis of models specified in SBML include copas i (), Systems Biology Workbench (SBW) (), The Systems Biology Simulation Core Algorithm tsbs c (), jar nac (), lib sbml sim (), sos lib (), i bios im (), pys ces () and virtual cell (). Some of these applications are stand-alone packages designed for interactive use, with limited reusability as components in other applications. Few are reusable libraries. Currently, none is fast enough to support emerging applications that require large scale simulation of network dynamics. For example, multi-cell virtual tissue simulations () often require simultaneous simulation of tens of thousands of replicas of dynamic network models residing in their cell objects and interacting between cells. In addition, optimization methods require generation of time series for tens of thousands of replica networks to explore the high dimensional parameter spaces typical of biochemical networks (). We designed lib roadrunner to provide: (i) Efficient time series generation and analysis of large or multiple sbml based models; (ii) A comprehensive and logical Application Programming Interface (API); (iii) Interactive simulations in the style of IPython and MATLAB and (iv) Extensibility. Most existing SBML simulation engines use built in interpreters to parse and execute SBML model specifications. Interpreted execution is simple and flexible, but much slower than execution of compiled code. Other simulation engines generate compiled executables from SBML by first converting sbml specified models into a general purpose language representation. The engines then call an external compiler to translate the general purpose language into an executable shared library to load at run time. E.g., sbw roadrunner in the SBW suite () converts SBML into C# [see  1.4 of (, then compiles the C# using the built in compiler from the .NET distribution. This approach generates relatively fast executables. However, it requires distribution of a separate compiler or a redistributable runtime, reducing portability. A more efficient approach to sbml to executable compilation uses a specialized justin time (JIT) compiler, to compile SBML into an optimized Intermediate Language (IL) representation and the IL code into native executable machine code directly in memory used JIT compilation to generate CUDA code from SBML and execute it on an Nvidia GPU. lib roadrunner and the Stochastic Simulation Compiler (SSC) () both compile dynamic network model specifications into executables, SSC focusing on stochastic simulation of rule based models and lib roadrunner on sbml specified models. lib roadrunner supports execution of a broad range of SBML models on CPUs using a custom built JIT compiler [based on the LLVM JIT compiler framework (] which translates SBML into highly optimized executable code for a broad range of processors. llvm based compilers are small, so all JIT operations occur in memory, without external file or compiler access, ensuring fast, self contained simulations and a relatively small distribution package.
