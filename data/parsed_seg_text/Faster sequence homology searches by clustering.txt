Motivation: Sequence homology searches are used in various fields. New sequencing technologies produce huge amounts of sequence data, which continuously increase the size of sequence databases. As a result, homology searches require large amounts of computational time, especially for meta genomic analysis. Results: We developed a fast homology search method based on database subsequence clustering , and implemented it as ghost z. This method clusters similar subsequences from a database to perform an efficient seed search and un gapped extension by reducing alignment candidates based on triangle inequality. The database subsequence clustering technique achieved an $2-fold increase in speed without a large decrease in search sensitivity. When we measured with meta genomic data, ghost z is $2.2–2.8 times faster than rap search and is $185–261 times faster than BLASTX. Availability and implementation: The source code is freely available for download at

introduction dna sequencing technologies have improved rapidly. The HiSeq2500 can produce several hundred billion base pairs (bp) of sequence data in a single run and its throughput is ~10 000 times higher than that of old generation sequencers. Most sequencers produce information in short fragments (reads) that range in length from 100 to 1000 bp. Thus, it is necessary to determine the location of each read in a genome, to use known biological information even when a reference genome is available. This process is called mapping, and many effective mapping programs, such as BWA () and Bowtie (), have been developed for this purpose. In meta genomic analysis, environmental samples frequently include DNA sequences from many different species, and the reference database often does not contain closely related genome sequences. Thus, more sensitive approaches are required to identify novel genes in these samples. In a typical meta genomic analysis, reads are translated into protein coding sequences and assigned to protein families by running homology searches against publicly available databases, such as COG () and Pfam (). The BLASTX program () is commonly used for such binning and classification searches. To identify homologs that may not have high nucleotide sequence identities, BLASTX translates nucleotide sequences into protein sequences, because protein sequences are often more similar than the original nucleotide sequences (). However, the search speed of BLASTX has become insufficient for analysis of the large quantities of sequence data now available.

discussion in the evaluation experiment, ghost z achieved an ~2-fold increase in speed, relative to ghost z without clustering. This acceleration can probably be attributed to the reduction in the number of un gapped extensions that were required when using ghost z. To validate this hypothesis, we compared the total number of un gapped extensions required by each method. In the database subsequence clustering approach, similarity filtering requires comparable computing time to the un gapped extension process; therefore, we added the number of similarity filtering s performed to the number of un gapped extensions. We found that the number of un gapped extensions could be reduced to approximately one third of the original number using database subsequence clustering. Currently, un gapped extension is one of the primary bottlenecks in fast homology searches. Thus, we think that this effective decrease in un gapped extensions contributed to the large acceleration we observed when using subsequence clustering for homology searches. ca blastp which is based on a compression approach, achieved 2.43.1-fold faster processing speed than the original BLASTP (). The acceleration achieved by ghost z was ~2-fold faster than the speed of ghost z without clustering, which is comparable to that of ca blastp. However, we achieved a processing speed that was much faster than that of the BLAST homology search algorithm. As described earlier, the compression approach used in ca blastp requires high search sensitivity and can not be applied to faster, but less sensitive, homology search algorithms. In the initial processing, the compression search algorithm needs to find remote homologs in a coarse database, and less sensitive homology search algorithms often fail to find such sequences. In contrast, the clustering targets used in our approach are subsequences in a database, which does not depend on search sensitivity. In addition, ghost z uses hamming distance in database subsequence clustering to measure the dissimilarity between sequences, whereas ca blastp uses sequence similarity. Using distance allows search seeds to be pruned efficiently using triangle inequality in an un gapped extension process, contributing to the acceleration in processing. ghost z allows the indexes of a database to be constructed a new so that users who wish to use other parameters can use this note The first, second and third columns show the size of the database chunks, the memory required for constructing the index (GB) and the memory required for the homology search (GB), respectively. We searched the KEGG GENES (3.9 GB) database note The first, second and third columns show the size of the database chunks, the computation time and the acceleration in processing speed relative to ghost z respectively, using 1 GB database chunks. We searched the KEGG GENES (3.9 GB) database.

conclusion we developed a new homology search algorithm with subsequence clustering. We reduced the number of un gapped alignment extensions by clustering subsequences in a database, and achieved a 2-fold acceleration in processing speed without a drop in search sensitivity. The algorithm was designed for functional and taxonomic annotation in meta genome analysis. The proposed database subsequence clustering method could also be useful in proteome research, which requires a huge number of sequence homology searches.
