We present a new R package for training gapped km er SVM classifiers for DNA and protein sequences. We describe an improved algorithm for kernel matrix calculation that speeds run time by about 2 to 5-fold over our original gkm svm algorithm. This package supports several sequence kernels, including: gkm svm km ers vm mismatch kernel and wildcard kernel.

introduction we recently introduced a gapped km ers vm classifier gkm svm () to detect functional sequence elements in regulatory DNA which has been applied to interpret a wide range of genomic datasets (). While we released a version of our earlier km ers vm () as a web server (), gkm svm was only released as C  source code. Here, we present an R package, gk msv mr with several improvements to facilitate easier implementation and broader use. Our original gkmSVM-1.3 implementation used a tree algorithm to compute the kernel matrix (. In this paper, we describe a new algorithm, idl bound that speeds up kernel matrix computation. We have implemented the algorithm in C  and our R package is easily accessible on different platforms. Our package also includes fast implementations of other kernels (). We refer the C  code implementing the faster iDL kernel calculation as gkmsvm20 shows an overview of the gkm svm analysis pipeline. Given two sets of sequences, the goal is to build a predictive model to classify the two sets. For example, in () a gkm svm is trained to detect regulatory DNA elements active in a cell type by using chromatin accessible DNA sequences as the positive set and a set of GC matched inaccessible DNA sequences as negative set. The model then can score and predict the accessibility of any DNA sequence. The first step is to build the kernel matrix (the pairwise similarity scores for all the sequences in the positive and negative sets). This is done using gkm svm kernel function: gkmsvm_kernel(posfn, neg fn kernel fn where pos fn and neg fn are the input file names for the positive and negative sets fast a format) and kernel fn is the output file name for the kernel matrix. The second step is to train the SVM model, using: gkm svm train kernel fn pos fn neg fn svmfnprfx where svmfnprfx is the output file name prefix for the SVM model (support vectors). Finally to classify score a sequence, gkm svm classify is used: gkm svm classify test fn svmfnprfx, out fn
