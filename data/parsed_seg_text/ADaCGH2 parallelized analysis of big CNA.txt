Motivation: Studies of genomic DNA copy number alteration can deal with datasets with several million probes and thousands of subjects. Analyzing these data with currently available software (e.g. as available from BioConductor) can be extremely slow and may not be feasible because of memory requirements. Results: We have developed a BioConductor package, ADaCGH2, that parallelize s the main segmentation algorithms (using for king on multicore computers or parallelization via message passing interface, etc., in clusters of computers) and uses ff objects for reading and data storage. We show examples of data with 6 million probes per array; we can analyze data that would otherwise not fit in memory, and compared with the non parallelized versions we can achieve speed-ups of 25â€“40 times on a 64-cores machine. Availability and implementation: ADaCGH2 is an R package available from BioConductor. Version 2.3.11 or higher is available from the development branch

introduction current studies of genomic copy number alterations (CNA) are using platforms with several million probes per array and several thousand subjects (e.g.), but the canonical implementations of the widely used open source packages for the analysis of CNA data did not allow for parallelized execution of the analysis. This makes it difficult to use clusters of servers and does not take advantage of the trends in parallel computing toward multicore machines (servers with 16124 cores or laptops with 2 or 4 cores are nowadays common). Moreover, especially for r bioconductor software, the available packages will not be able to analyze big datasets if these are larger than about a quarter to a half of the available memory (unless one uses time consuming and ad hoc, manual partition of the input and subsequent recombination of the output see discussion in Section 'Why ADaCGH2 instead of a ''manual'' solution' in the vignette of the package). Here I describe ADaCGH2, a BioConductor package designed to address the above deficiencies. I leverage on two R packages, parallel, part of the standard set of R packages, and ff (), and combine them, to provide the following: Parallelized analysis. I have parallelized the most widely used segmentation approaches that can be applied to CNA data, including both comparative genomic hybridization (CGH) and SNP arrays (), and also covering sequencing data, when these have been appropriately processed, but see the ability to analyze data that can not fit in memory. Using ff, we only access the section of the data currently being analyzed, keeping in RAM and moving between processes only a pointer to the rest of the data on disk. Parallelization of data input and output and plotting. Input from, and output to, other BioConductor packages here I present the main functions of the package, the differences with former version and some benchmarks. A full set of examples, further benchmarks and detailed suggestions for usage are included in the package vignettes. the code has been rewritten to use for king data handling and reading of input data has been completely modified so that data much larger than available memory can be read and analyzed and missing value handling has been changed to use all available data per array. The vignette benchmarks pdf provides extensive comparisons between the new (2.3.5) and latest previous running versions (version 1.10), but the main differences between these two versions are as follows reading and analysis of large datasets. The new version can read datasets much larger than the old one and datasets much larger than available memory (see details in Section 3). As a consequence of being able to read much larger datasets, the new version can analyze datasets much larger than the old one. Missing value handling. The old version used row wise deletion of missing values when reading data (i.e. a probe would be deleted from the data if it had one missing value in any array column. The new version deals with missing values array by array, so for each array (or column) all available data (or probes) are used in the segmentation. for king and clusters. The new version of ADaCGH2 allows for the usage of for king or an explicit cluster (e.g. MPI, sockets) to parallelize reading and analysis. In POSIX operating systems (including Unix, GNU/Linux and Mac OS), for king can be faster, less memory consuming and much easier to use than a cluster. Flexibility of reading data and compatibility with former version. The new version of ADaCGH2 has not removed the mechanisms of reading data available in the old version (when data are small or memory is plentiful, reading data from a single r data is an available option) and accepts data read by the former version. However, the old version can not accept data read by the new version because it assumes that data that have been read contain no missing values. These differences in implementation, however, do not affect the underlying core code for the algorithms, which is the same as in the previous version. There have been, however, changes in some defaults to adapt the package to really large data (e.g. using MAD as merging default or using haar seg as the smooth func for da glad following recommendations in the package vignette for glad shows benchmarks of reading and analyzing data with 6 067 433 probes per array column. Those figures compare memory usage and wall time of the old and new versions and of the non parallelized (NP) versions in two different machines (data for the figures, as well as benchmarks for a third machine, and with MPI over two machines, are available from the vignette benchmarks pdf. To give an idea of sizes, the r data file for the 1000 arrays data is of 41 GB, and the directory with the data for 2000 columns arrays occupies 198 GB. Compared with the NP version, in the analysis of data, ADaCGH2 leads to speed increases by factors of 2540 times in the 64 cores machines and 710 times in the 12 cores machines, and allows us to analyze data that would not fit in memory. Compared with the former version, the new version uses less memory for analysis. More importantly, the new version allows us to read and analyze much larger datasets. In the 256 and. Wall time and memory use (summed over all spawned processes) of reading and analysis as a function of number of arrays. Reading: comparison between new and old versions. Analysis: new and old versions with four segmentation methods and NP for two methods. No benchmark allowed to run for 436 h. Without parallelization, in the AMD machine no runs of CBS with 1000 arrays or haar seg with 2000 can be done (R runs out of memory); in the Intel machine no runs for 1000 arrays with any method can be done (R runs out of memory). Work flow from input data to figures. R functions are shown with courier font inside boxes. In italics are the names of other packages, which can provide input accept output. Data frames are stored in memory, in contrast to ff objects. Data input and conversion to ff objects are done with input to ada cgh may be after using cut file for parallelized reading of single column files). Segmentation is performed with p segment and results can then be plotted p chrom plot or used by other packages output to cgh regions. When using ff objects, after data input (in a single machine) the remaining analyses can be conducted in a cluster
