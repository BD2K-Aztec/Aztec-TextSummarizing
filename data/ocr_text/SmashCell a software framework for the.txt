Vol. 26 no. 23 2010, pages 2979-2980
APPS NO  doi:10.1093/bioinformatics/btq564

 

Genome analysis

Advance Access publication October 21, 2010

SmashCell: a software framework for the analysis of single-cell

amplified genome sequences

Eoghan D. Harrington1’2’*, Manimozhiyan Arumugam3, Jeroen Raes4, Peer Bork?”5 and

David A. Relman1 ’2’6

1Department of Microbiology and Immunology, 2Department of Medicine, Stanford University School of Medicine,
Stanford, CA 94305, USA, 3EMBL, Meyerhofstrasse 1, 69117 Heidelberg, Germany, 4VlB — Vrije Universiteit Brussel,
Pleinlaan 2, 1050 Brussels, Belgium, 5Max Delbr ck Center for Molecular Medicine, D—13092 Berlin, Germany and
6Veterans Affairs Palo Alto Health Care System, Palo Alto, CA 94304, USA

Associate Editor: Dmitrij Frishman

 

ABSTRACT

Summary: Recent advances in single-cell manipulation technology,
whole genome amplification and high-throughput sequencing have
now made it possible to sequence the genome of an individual cell.
The bioinformatic analysis of these genomes, however, is far more
complicated than the analysis of those generated using traditional,
culture-based methods. In order to simplify this analysis, we have
developed SmashCeII (Simple Metagenomics Analysis SHeII-for
sequences from single Cells). It is designed to automate the main
steps in microbial genome analysis—assembly, gene prediction,
functional annotation—in a way that allows parameter and algorithm
exploration at each step in the process. It also manages the data
created by these analyses and provides visualization methods for
rapid analysis of the results.

Availability: The SmashCeII source code and a comprehensive
manual are available at http://asiago.stanford.edu/SmashCeII
Contact: eoghanh@stanford.edu

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on May 14, 2010; revised on September 10, 2010;
accepted on September 30, 2010

1 INTRODUCTION

The rapid evolution of DNA sequencing platforms has had a
dramatic, beneﬁcial impact on the study of microbial ecology
and population genetics. So far, these beneﬁts have mostly come
from shotgun community metagenomics that provides a high—
level overview of the taxonomic and functional composition of
microbial communities [see Arumugam et al. (2010) for details].
However, this approach is limited in its ability to yield complete
genome sequences as well as the ﬁne—scale genetic variation that
deﬁnes population substructures within these communities. One
possible solution uses a combination of single—cell manipulation
technologies, multiple—displacement ampliﬁcation (MDA) and hi gh—
throughput sequencing to generate single—cell ampliﬁed genomes
(SAGs). This approach has already been used to characterize the
genomes of uncultivated microbes (Marcy et al., 2007; Woyke
et al., 2009) and as the throughput of the associated technologies

 

*To whom correspondence should be addressed.

increase it should become possible to obtain high—resolution proﬁles
of populations or communities.

However, it is more difﬁcult to produce a high—quality assembly
and functional annotation from a SAG than from the output of
traditional methods due to limitations inherent in sample preparation
and sequencing (detailed below). To overcome this requires an
iterative, exploratory approach that transforms the traditional linear
process of genome assembly, gene prediction and functional
annotation into a tree—like structure, each branch deﬁned by a
different choice of algorithm or parameters, one of which will be
chosen as the ﬁnal version (Fig. 1A). This approach is not easily
achieved using existing tools, which take an assembled genome as
their input and do not allow parameterization of sub sequent steps (for
a comparison with existing tools see Supplementary Table). In order
to automate the process and deal with the resulting combinatorial
increase in data we have created SmashCell. While developed for use
on SAGs many of its analyses are equally applicable to traditional
microbial genome sequences and low—complexity metagenomes.

2 FEATURES

SmashCell automates the steps common to most genome analyses—
assembly, gene prediction and functional annotation—and addresses
some of the challenges posed by SAGs. For instance, it is difﬁcult
to isolate a single cell for sequencing without including some
environmental DNA, in effect creating a metagenome. As a result,
SmashCell includes both sequence similarity and k—mer based
tools to identify potential contaminants, the latter being especially
useful when the target genome and/or contaminants are not closely
related to existing genome sequences (see Fig. 1B for details).
Another challenge with SAGs is the orders of magnitude variance in
MDA product abundance along the genome, which creates several
obstacles to obtaining high—quality annotation. First, it hampers
genome assembly, as most algorithms are designed for lower and
more evenly distributed read depth. Secondly, it vastly increases
the amount of sequencing required to obtain a complete genome
sequence. To address the ﬁrst challenge, SmashCell includes scripts
to downsample overrepresented regions of the SAG and to address
the second, SmashCell uses the STRING database (Jensen et al.,
2009) to obtain counts of single—copy orthologous groups (Fig. 1C),
which can then be used to estimate genome completeness. In
addition to these SAG—speciﬁc features, SmashCell contains genome

 

Published by Oxford University Press on behalf of the US Government 2010.

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non—Commercial License (http://creativecommons.org/Iicenses/
by—nc/2.5), which permits unrestricted non—commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /§.IO'SIBUJHOprOJXO'SOllBIIIJOJUTOTQ/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘lg lsnﬁnv (10::

E.D.Harrington et aI.

 

A —
/' 4 —

MGS A83

1 —’ I

#\ \. '-FUHC
» ‘ /.4

-SmashDB ->-MC1 -MG1 -AS1
» Q. —
MC3
—
B Organism Mean Distance to Neighbours
88008088888 0000888 80088 I: _:
8888880800888'00000880880 - u 9 ,7,
088888088 800008 0880000 .  5
88888888888 00 _; g
0808888886 -5 g
80000088398 :3 S
éﬁﬁﬁﬁ? -2 m
C

fgenes-fgenes_cogs
fgenes-string.8.2 -
prodigal-string.8.2 -

E. coli Sakai 7

E. coli K12 r
Enterobacter sp. 638 a
M. barkeri r

F. nucleatumr

 

 

 

|
°"‘SGBD¥8%$

D

z‘
'8
1|
ll
0
0

 

Type
. coding

Prodigal

 

6)
m
m
m

d
B
0
II

 

Type
. coding

 

 

 

 

 

 

 

 

Fgenes

Genes

 

GC content
— %GC -

window size 304

%GC

 

Quality Scores

— Avg - core
(bin width 5)
Max/Min Q-Score

Quality Scores

 

Homopolymers (>5 nt)

I ll ||| |||||||§||||||||||||||||I| |||||||| Ill :3331’?)
I l I I

- poly(G)

 

 

: I
2500 3000

1500 2000
MC1.MG1.ASS.C106

Fig. 1. (A) The data model used in SmashCell is designed to reduce redundancy and facilitate the comparison of results using different parameters and/or
algorithms [MC: metagenome collection, MG: metagenome (equivalent to a SAG), AS: assembly, GP: gene prediction, FUNC: functional annotation]. (B)
K—mer frequency statistics supplement sequence similarity information to identify potential contaminants. This shows a self—organizing map (SOM) trained
on the tetramer frequencies of an assembly. The left panel shows a series of pie charts highlighting the taxonomic identity (determined by best hit in GenBank,
those with no hits are uncoloured) of the contigs assigned to each neuron. The right panel shows the U—matrix of the SOM. (C) The abundance of single—copy
COGs can be used to assess genome completeness, the presence of contamination and the quality of the assembly. (D) SmashCell uses different graphs to aid
in parameter and algorithm selection. Here the results from two different gene prediction algorithms are presented, along with GC—content, quality scores and

read depth.

visualization and other tools (Fig. 1D) that are generally applicable
to genomic and metagenomic data. SmashCell uses the same basic
data model as SmashCommunity [designed for shotgun community
sequencing; Arumugam et al. (2010)]. As a result, several of the
analyses available in SmashCell can be run on data generated by
SmashCommunity and vice versa. Documentation for these and
many more features are available on the SmashCell website.

3 DESIGN AND IMPLEMENTATION

SmashCell is a framework written in Python that provides a variety
of analysis tools that can be used either from the command line or
from within other Python scripts. The main function of SmashCell
is to automate the common steps in genome analysis in a way
that facilitates parameter and algorithm exploration. Using the data
model shown in Figure 1A, SmashCell manages the ﬁles and
data associated with each of these steps, reducing redundancy and
providing a layer of abstraction that simpliﬁes access to these
data. SmashCell also uses generic databases to provide a common
format for assembly and gene prediction information, allowing it to
work with a variety of third—party assemblers and gene prediction
algorithms. In order to facilitate the exploration of genomic data,
SmashCell automatically generates many different types of graphs
(e. g. see Fig. lB—D) and provides wrappers for exploratory statistical
techniques.

ACKNOWLEDGEMENTS

We would like to thank S. Pamp and P. Blainey for assistance with
testing.

Funding: Human Frontiers Science Program (LTF to E.D.H);
National Institutes of Health (1R01HG004863 and Director’s
Pioneer Award to D.A.R); Thomas C. and Joan M. Merigan
Endowment at Stanford University (to D.A.R); European
Community FP7 [MetaHIT].

Conﬂict of Interest: none declared.

REFERENCES

Arumugam,M. et al. (2010) SmashCommunity: a metagenomic annotation and analysis
tool. Bioinformatics, 26, 2977—2978.

Jensen,L.J. et al. (2009) STRING 8—a global view on proteins and their functional
interactions in 630 organisms. Nucleic Acids Res., 37, D412—D416.

Marcy,Y. et al. (2007) Dissecting biological “dark matter” with single-cell genetic
analysis of rare and uncultivated TM7 microbes from the human mouth. Proc. Natl
Acad. Sci. USA, 104, 11889—11894.

Woyke,T. et al. (2009) Assembling the marine metagenome, one cell at a time. PloS
ONE, 4, e5299.

 

2980

112 /§.IO'SIBUJHOIPJOJXO'SOIlBIHJOJUIOICI/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘lg lsnﬁnv (10::

