ORIGINAL PAPER

Vol. 28 no. 20 2012, pages 25 76-2583
doi: 10. 1093/bioinformatics/bts484

 

Sequence analysis

Advance Access publication July 31, 2012

PRISM: Pair-read informed split-read mapping for base-pair level
detection of insertion, deletion and structural variants

1,2,*

Yue Jiang

, Yadong Wang” and Michael Brudno

2,3,*

1Center for Biomedical Informatics, School of Computer Science and Technology, Harbin Institute of Technology, Harbin,
Heilongjiang 150001, China, 2Department of Computer Science, The Donnelly Centre, University of Toronto, M5S 3G4
and 8Centre for Computational Medicine, Hospital for Sick Children, Toronto, M5G 1X8, Canada

Associate Editor: Alex Bateman

 

ABSTRACT

Motivation: The development of high-through put sequencing technol-
ogies has enabled novel methods for detecting structural variants
(SVs). Current methods are typically based on depth of coverage or
pair-end mapping clusters. However, most of these only report an
approximate location for each SV, rather than exact breakpoints.
Results: We have developed pair-read informed split mapping
(PRISM), a method that identifies SVs and their precise breakpoints
from whole-genome resequencing data. PRISM uses a split-alignment
approach informed by the mapping of paired-end reads,
hence enabling breakpoint identification of multiple SV types, including
arbitrary-sized inversions, deletions and tandem duplications.
Comparisons to previous datasets and simulation experiments illus-
trate PRISM’s high sensitivity, while PCR validations of PRISM results,
including previously uncharacterized variants, indicate an overall pre-
cision of ~90%.

Availability: PRISM is freely available at http://compbio.cs.toronto
.edu/prism.

Contact: yue.jiang.hit@gmail.com (YJ); ydwang@hit.edu.cn (YW);
brudno@cs.toronto.edu (MB)

Supplementary Information: Supplementary data are available at
Bioinformatics online.

Received on March 28, 2012; revised on June 15, 2012; accepted on
July 26, 2012

1 INTRODUCTION

The development of high-throughput sequencing (HTS) technol-
ogies has enabled novel methods for detecting structural variants
(SVs). Current methods, which are usually based on depth
of coverage (Abyzov et al., 2011), pair-end mapping clusters
(Chen et al., 2009) or a combination of these (Medvedev et al.,
2010), have been successful in quantifying structural variation in
individual genomes and populations (Mills et al., 2011).
However, most of these only report an approximate location
for each SV, rather than exact breakpoints. Accurate mapping
of split reads (reads that span across a breakpoint of an SV) is
evidence for the linking relationship of the segments that are
adjacent in the sequenced genome (donor) but not in the refer-
ence human genome. Split-read based methods, such as Pindel
(Ye et al., 2009), Splitread (Karakoc et al., 2011) and SVseq
(Zhang et al., 2011), while able to identify these breakpoints,

 

*To whom correspondence should be addressed.

have been limited in their ability to identify large-scale “struc-
tural’ variants. These tools take the approach of aligning the
split read only in the immediate vicinity of the read’s pair and
thus limit the maximum discoverable variant size. Pindel and
Splitread take a user-speciﬁed maximum indel size as a param-
eter, while SVseq uses a fixed constant. Typically, the running
times and accuracies of the programs heavily depend on this
parameter, as alignment of a small portion of the read to a
large segment of the human genome is computationally intensive
and error-prone. Several recent approaches (Nord et al., 2011;
Zhang et al., 2012; Emde et al., 2012) combine the split-mapping
signature with additional information: the depth of coverage and
discordant paired ends, respectively. However, the Nord et al.
method can only be used with capture data rather than whole
genomes, and the Zhang et al. method (SVseq2) only handles
indels and not other SVs. The recent CREST method Wang
et al., 2011) takes an alternative approach for assembling the
unaligned clipped ends of reads and mapping these to the
genome.

We have developed pair-read informed split mapping
(PRISM), a method that makes use of discordant pair-end clus-
ters to direct split-read mapping. The use of discordant clusters
allows us to substantially reduce the search space for split map-
ping, leading to faster run times and significantly higher accuracy
at identifying large deletions and other structural variants.
PRISM also uses a modiﬁcation of the Needleman-Wunsch
(NW) algorithm for the base-level alignment of the split read
to enable high accuracy in the presence of SNPs, small indels
and sequencing errors proximal to the SV.

2 METHODS

2.1 Overview

The PRISM method relies on a thorough analysis of hanging
read pairs (where only one of the two mates has a reliable map-
ping). PRISM uses clusters of discordant read pairs (pairs which
have abnormal mapping distance, orientation or order) as signals
for the possible existence of large deletions, inversions and
tandem duplications (Figure 1A). If the unmapped read could
not be mapped because it spans the breakpoint of an SV, it
should be split mappable to the two sides of the breakpoint
(Figure 1B). A detailed description of the discordant pairs and
split reads can be found in the review (Medvedev et al., 2009).
PRISM has two different strategies to select database and query

 

2576 © The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please e—mail: journals.permissions@oup.com

112 /310's113umo [p.IOJXO'SOllBIHJOJUIOIQ/ﬁdllq 11101; prBOIUAAOG

9IOZ ‘091sn3nv uo ::

PRISM: Pair Read Informed Split Mapping

 

 

ﬂ Deletion Insertion
do nor  5 E
E I. " 'I-t 
ref  
Inversion Tandem Duplication
d U'I'IUT  I

B Deletion Insertion
I—“n. .
{—x ,— 
4" 5 
1‘ x a 
Inversion Tandem Duplication
H.‘ H
—_.._ 4—..—
----'-.I _.-'--- I ."---.

Fig. 1. (A) Discordant pairs caused by different types of SVs. (B) The corresponding split-mapping signatures in reads that span the SV breakpoints

sequences for SVs with and without discordant clusters. First, to
identify small indels, each unmapped read of a hanging pair is
aligned to the region approximately one insert size away from the
location of the mapped one, while allowing for an unpenalized
insertion or deletion in the alignment. Such indels may have been
missed by the initial alignment due to a large gap penalty or
insufﬁcient sensitivity of the mapping program. If the hanging
pair is located near a cluster of discordant pairs, PRISM at-
tempts to align the unmapped read partially to the sequence
near the mapped read and partially to the segment around the
distal side of the cluster. The two segments are selected for full
dynamic programming alignment, where an arbitrary ‘jump’ is
allowed, so that the read aligns partially to one side of the break-
point, and partially to the other. In the following sections, we
present a thorough description of PRISM.

2.2 Deﬁnitions

In this section, we will deﬁne terms useful for presenting the
PRISM method. All of these terms are illustrated in Figure 2.

(l) ,u. and o are the mean and the standard deviation of the
insert size, respectively.

(2) Mapped pair: given a read pair P that consists of reads r]
and r2, if r] and r2 are both mapped, P is a mapped pair.

(3) Discordant pair: given a mapped pair P that consists of
reads r] and r2, if (i) the mapping distance between r] and
r2 is larger than ,u.+ 30 (we take the value ,u—l— 30 as a
threshold for a discordant pair, though this can be set by
the user) or (ii) the mapping orientation of r] or r2 is
different from sequencing orientation, read pair P is a dis-
cordant pair.

(4) Concordant pair: if a mapped pair P is not a discordant
pair, P is a concordant pair.

(5) Anchor read and hanging read: given a read pair P that
consists of reads r] and r2, if r] is mapped and r2 is not
mapped, mapped with one or more indels, or has an un-
aligned section (soft clipping), r] is an anchor read and r2
is a hanging read.

(6) Hanging pair: if read pair P consists of an anchor read and
a hanging read, P is a hanging pair.

Anchor Hanging Hanging
read pair read
I? Neighhorpairs  f‘
Concordant In" J. I." I." . -- a”!
,I' II

 

I
I
I
I
I
:- '-C 24-: .

I |
I I
-: | I' - u ' I
I II“ If It“: d :
I .' I I
I .I | . .
I; rc—In- m—H
. ' Concordant Discordant I
NEIgh her reads . .
reglon regIorI

Fig. 2. An illustration of the deﬁnitions. Reads are represented by
arrows. Reads in a pair are connected by arcs

(7) Neighbor: given pair P consists of r] and r2 and Q consists
of s] and s2. Assume without loss of generality that r] is
mapped to pm] and s] is mapped to p0s2. If lposl—
p0s2| 3 60, r] and s] are neighbor reads, while P and Q
are neighbor pairs.

(8) Concordant region: given a hanging pair P that consists of
reads r] and r2, where r] is the anchor read mapped to
pm] and assume p0s2 is posI + insert size. Given an inter-
val d (the value depends on in what region the breakpoint
of the SV is expected to be, usually about 30), the region
[p0s2 — d, pos2+d] is a concordant region for P. We call
the region [p0s2 — d, p0s2+ d] a concordant region when
there is no ambiguity.

(9

v

Discordant region: given a discordant pair P that consists
of read r] and r2, r] is mapped to pm] and r2 is mapped to
p0s2. Given another read pair Q that consists of read 5]
and s2, 5] is an anchor read mapped to p0s3 and s2 is a
hanging read. If r] is a neighbor read of s], given an inter-
val d (the value depends on in what region the breakpoint
of the SV is expected to be, usually smaller than ,u), we call
region [p0s2 — d, p052 + d] a discordant region for Q from
P. We simply call region [p0s2 — d, p0s2+ d] a discordant
region when there is no ambiguity. In practice, we use
clusters of discordant pairs to identify discordant regions:
each cluster has two feet corresponding to the two ends of
a pair.

 

2577

112 /310's113umo [p.IOJXO'SOtlBIHJOJUIOIQ/ﬁdllq 11101; pSpBOIIIAAOG

9IOZ ‘091sn3nv uo ::

Y.Jiang et aI.

 

2.2 PRISM workflow

Running PRISM consists of ﬁve stages: mapping reads, prepro-
cessing mapping result ﬁles, clustering discordant pairs, split
mapping and calling SVs. PRISM typically deals with one
chromosome in each execution, though it is also possible to com-
bine the chromosomes to detect translocation events (see
Supplementary Section S4.5).

Stage 1: Mapping reads We map the reads using BWA (ver-
sion 0.5.9rcl; Li and Durbin, 2009) with default settings. A series
of SAM (Li et al., 2009) ﬁles are generated and processed in the
subsequent stages.

Stage 2: Preprocessing We identify discordant and hanging
pairs from the SAM ﬁle. The discordant pairs are clustered in
Stage 3. The hanging pairs are sorted by the positions of the
anchor read and are further used in Stage 4.

Stage 3: Clustering We identify all discordant pairs and clus-
ter these with the paired read clustering tool used in CNVer
(Medvedev et al., 2010). This program uses a greedy algorithm
that clusters together pairs with similar mapping distance and
orientation. The details of this algorithm can be found in the
original article. The generated discordant clusters are used to-
gether with hanging pairs in the next stage.

Stage 4: Split mapping This stage is the core of PRISM. It
scans the hanging pairs generated in Stage 2, trying several split
mappings. First, for each hanging read PRISM tries to align it in
the concordant region, allowing for one insertion or deletion
with a ﬁxed penalty (regardless its size). Additionally, if there
are discordant clusters located within the concordant region, the
hanging read is also aligned in a way that allows part of it to map
to the concordant region and the other part to the discordant
region. PRISM uses a modiﬁed NW algorithm for split mapping,
described in Section 2.3. PRISM generates read alignments in the
SAM format. If the variant is an inversion or a duplication,
PRISM modiﬁes the original read sequence so that it can map
linearly to the genome and stores the modiﬁcation in an add-
itional SAM ﬁeld (see description of ‘ST Field’ in README ﬁle
for details).

Stage 5 .' Filtration and calling SVs After the alignment,
PRISM calls the SV loci from the SAM ﬁles. PRISM ﬁlters the
initial list of variants based on the number of supporting reads and
the alignment score. The users can set these thresholds to tradeoff
between sensitivity and speciﬁcity. In this manuscript, we require
each variant to be supported by at least ﬁve reads, of which at least
one has a score equal to 870 (for a 100 bp read the maximum score
is 1000) for analysis of simulation data and of the NA18507
genome. Because of the lower coverage in the NA12878 dataset,
we also allow variants to be supported by only two reads as long as
one of them has a minimum score of 925.

2.3 Algorithm for split mapping

2.3.] Modified NW algorithm To perform alignment of the
split-mapped reads to the reference genome, we use a modiﬁed
NW algorithm. For deletions, the query is the read sequence, and
the database are two segments of the reference, where we expect

the beginning and the end to map (the selection of these two
segments, called region] and region2, is described in Section
2.3.2). Note that the two regions may be the same. We build
two dynamic programming matrices for read x region]
(matrix]) and read x region2 (matrix2). Each cell in matrix] is
computed as in the traditional NW (with afﬁne gap penalties).
For matrix2 we calculate one additional recurrence, which uses
the max score of all cells of the immediately previous line in
matrix]. (This is illustrated in Figure 3C). We use this score to
allow the alignment to ‘jump’ from matrix2 to matrix] by intro-
ducing a large gap that corresponds to the split in the read. The
penalty for this gap is a constant not related to its length. For
insertions the algorithm is similar, except we align a single region
of the genome to two copies of the read. The algorithm for
alignment is identical, except that the ‘jump’ is now between
two copies of the read.

The modiﬁed NW matrix for deletions is built using the
following recurrences (also see illustration in Supplementary
Fig. S1).

 = Idb(09j) = qr(09j) = 0 0  E m1 + m2 +1

14709 = qr(i9m1 +  : _gapopen _ i X gapext 1 E if I

Idb(i,0) = M(i,0) =Idb(i,m1 -I— 1) = M(i,m1 +1): —001§i§l

M (i — 1,} — 1) + WWII], dbljl)
Idb(i — 19f — 1) + WWII], dbljl)
Iqr(i — 191' — 1) + WWII], dbljl)
M (i — ijax) + WWII], dbljl) — jumpqr

fora,bandc:lgigl,l§j§m1+m2+l,j;&m1+l,
ford:lgigl,m1+l<j§m1+m2+l

M(i,j) = max

CLOUSD

IEiElJaémi-l-L
IEJEmi-l—mz-l—l

.. M(i,j—l)—gap
I l, = max . . Open
db( 1) { Idb(l:] — 1) — gapext
IEiElJaémH-l,

. . _  _  _ gapopen

Iqr(i _ 19]) _ gapext

where

db is built by two fragments of reference sequence as described
in Section 2.3.2. The lengths of these two fragments are m1 and
W2;

qr is the read sequence; l is the length of qr;

M(i, j), Iq,(i, j) and Idb(i, j) are the maximum similarity scores
given that qr[i] is aligned to db[/] (match/mismatch), qr[i_| to a gap
(insertion) or db[/] to a gap (deletion), respectively;

gapOpen is the penalty for opening a gap in the alignment;

gapext is the penalty for extending a gap in the alignment;

w(a, b) is a scoring function that is positive when a=b and
negative otherwise;

jumpq, is penalty for a jump from matrix2 to matrix] (from
cell Cur to cell NW-MAX, see Figure 3C) and

jmax is the db index of cell NW-MAX, i.e. if cell Cur’s
coordinate is (i, j) cell NW-MAX’s should be (i— l, jmax) (see
Figure 3C).

 

2578

112 /310's113umo [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁdllq 11101; popeommoq

9IOZ ‘091sn3nv uo ::

PRISM: Pair Read Informed Split Mapping

 

Note that the jump score is not calculated for [qr and Id],
because a deletion cannot be followed directly by an inser-
tion, while a deletion followed directly by a jump can be
included in the jump. The same algorithm is used for split
mapping of inversions and tandem duplications as deletions,
as illustrated in Section 2.3.2. The algorithm for insertions is
similar, except that the read, rather than the reference seg-
ment is duplicated, and is presented in the Supplementary
Material (Section 2). Finally, to optimize the performance
of the dynamic programming step, we use an anchored align-
ment approach, which is also presented in the Supplementary
Material (Section 3).

2.3.2 Selection of query and database for modified NW
matrix For SVs of different types and sizes, PRISM has

different strategies to select query and database sequences for
the modiﬁed NW algorithm. The database can consist of the
sequence in the concordant region, the discordant region or
their reverse complements. The query is the read sequence or
the doubled read sequence (for insertions).

Split mapping within the concordant region: For each anchor
read, the hanging read may be unmapped due to spanning across
a small indel that is not big enough to generate discordant pairs.
In this case, the indel will be within the concordant region. This
case is illustrated in Figure 3A (for deletions) and B (for inser-
tions). In the deletion case, the two regions to which the read is
mapped are identical. Similarly, in the case of an insertion, the
read is duplicated and aligned to a single copy of the genomic

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

A Small Deletion B Small Insertion
—L- - 4;— L i
._ ._ '—'II
H'Il'rlouln
|
Hillth I _ . _
|
_i. ‘—
_I. {_ ._... rderm
m —.-
_ ' . '— "den *— —"' m
I' — —i-n——
—! .
Iﬂl'mllm
Iﬂd'mﬂrh
T Database . E Tandem Duplication
Pal'tl Part1
PIN-MAX —I- i—
: rill-m
  ‘ ‘ ‘ ...
. _ hi
I'qlon
ruin-n —._
E erl'l'tﬂlt

Fig. 3. Illustration of alignment of small indels (not supported by clusters), duplications, inversions and long deletions (supported by clusters). (A) An
illustration of alignment with a small deletion (gap in the read) within the concordant region. The concordant region (black arrow) of the anchor read
(blue arrow) with a deletion (green line) is duplicated to be the database of the modiﬁed NW algorithm. The query is the hanging read. (B) An illustration
of alignment with a small insertion (gap in the reference) within the concordant region. The concordant region (black arrow) of the anchor read (blue
arrow) is the database of the modiﬁed NW algorithm. The hanging read with the insertion (green line) is duplicated to be the query. The split mappings
we expect to ﬁnd are shown in both subﬁgures (blue line). In (C—E), purple arrows are concordant pairs and orange arrows are discordant pairs. Hanging
pairs are in blue. All these SVs can share the same split-mapping algorithm. The only difference is the selection of a database sequence. (C) The
illustration of alignment for a long deletion (supported by clusters) with NW algorithm details. The presence of the deleted segment (green line) in the
reference (red line) generates a group of discordant pairs (in orange). The breakpoints of the deletion are likely to fall close to the two end points of
the cluster. PRISM picks the two regions surrounding the two end points and uses them for split mapping of all hanging reads (in blue) in proximity of
the cluster. To map the read, we modify the standard NW algorithm matrix to allow for a large, unpenalized gap that spans the breakpoint between the
two regions. D: Inversion (green arrow), the anchor read is outside the inversion. The database is the concatenation of the concordant region and the
reverse complement of the discordant region. E: Duplication (green arrow). The database is the concatenation of the discordant and concordant regions

 

2579

112 /310's113umo [p.IOJXO'SOilBIIIJOJUIOIQ/ﬁdllq 11101; popeommoq

9IOZ ‘091sn3nv uo ::

Y.Jiang et al.

 

region. We attempt both the insertion and deletion split align-
ments for each hanging read.

Split mapping between the concordant and the discordant
regions: For each hanging pair, if there are neighbor reads
that are members of a discordant cluster, the hanging read
may be unmapped because it spans across the breakpoints of a
large deletion, an inversion or a duplication (depending on the
type of cluster). The cluster allows us to identify the discordant
region, and the difference between the split mappings of these
three types of SVs is only in the selection of the discordant
region, as the alignment only needs to allow for a large ‘jump’
from the concordant to the discordant region. Figure 3 (C—E)
illustrates the selection of the databases and queries for these
SVs.

2.4 Simulation dataset

To estimate both the sensitivity and speciﬁcity of PRISM on a
realistic dataset with a known ground truth, we implanted
known human indels (Mills et al., 2006) into chromosome 1 of
the human genome and simulated 100 bp paired reads with
Gaussian-distributed inserts (500 bp mean, 30 bp SD). The
sequencing error model followed real Illumina data (1% overall
error rate).

3 RESULTS

To evaluate our method, we conducted simulation experiments
and analyzed two recently sequenced genomes.

3.1 Simulation results

We ran PRISM, Pindel, SVseq, Splitread, BreakDancer (Chen
et al., 2009), CNVnator (Abyzov et al., 2011) and CREST on our
simulation dataset, with the results summarized in
Supplementary Table S1. PRISM achieved recall: 95% for
small variants (insertions and deletions l—10bp and 11—50 hp),
with precision294%. For medium-size deletions (51—100bp),
the recall was 63% with precision 77%. For deletions of
101—1000 bp, PRISM achieved recall of 80% at 95% precision,
while for deletions> 1 kb the recall was 80% and precision was
95%. Pindel and SVseq performed the best of the remaining
tools, followed by Splitread and CREST. CREST is designed
for somatic rather than germline variants, so we decided to ex-
clude it from the comparisons on real genomes. Splitread and
SVseq were also not run on whole genomes due to inappropri-
ateness of the method for our experiments, or due to technical
issues, as discussed in the Supplementary Material.

3.2 Results on real data

To evaluate PRISM on real data, we used two recent whole-
genome paired-end datasets generated with Illumina Genome
Analyzer II: Yoruban HapMap individual NA18507 (NCBI
SRA id: SRA010896) with 47 x sequencing coverage, insert size
500 bp, PCR duplicate reads 7.4% and the CEU HapMap indi-
vidual NA12878 (SRA id: ERX012406) sequenced at 15 x cover-
age, 300 bp insert size, PCR duplicate reads 3.6%. We used the
hgl8 reference genome. The characterization of these genomes in
multiple previous studies (Kidd et al., 2008; McCarroll et al.,

2007; McKernan et al., 2009; Mills et al., 2011) allows us to
compare PRISM results to both predicted and validated vari-
ants, as well as to identify novel variants that could not be dis-
covered with previous methods. We compared PRISM with the
latest (unpublished) version of Pindel (2.0) that is able to identify
tandem duplications and inversions, as well as small insertions
and large deletions. In Table l we present a comparison to vari-
ants that have been detected using Sanger sequencing, PCR or
array studies, as well as the study (McKernan et al., 2009) for
inversions. Comparison to additional HTS-based analyses is in
Supplementary Table S3. To evaluate various tools, we consider
a previously reported set of variants as a gold standard, and
compute precision—the fraction of true positives over all predic-
tions, and recall—the fraction of true positives over all variants
in the dataset. Note that because the gold standard datasets are
not complete we do not expect the precision to be close to one for
most datasets. In particular, the datasets (Kidd et al., 2008;
McCarroll et al., 2007), which did not utilize high-coverage
whole-genome sequencing, are likely missing true variants.
Similarly, only a fraction of all variants are identiﬁable through
a split-read approach. A thorough discussion of the causes of
false negatives is presented in the Supplementary Material.

For the NA18507 genome, PRISM detected 784 319 indels of
l—100bp, of which 145944 (19%) were previously identiﬁed in
Kidd et al. (2008). PRISM was able to identify 65% of the vari-
ants known from the study (Table 1). This compares favorably
with Pindel, which identiﬁed fewer total variants, of which a
smaller percentage was previously known. We also compared
PRISM with GATK (McKenna et al., 2010), a standard
method for identifying small indels, and found that the two
methods were comparable for indels l—20 bp, PRISM showed
better sensitivity at detecting larger variants: GATK did not
detect any indels larger than 50 bp. We also analyzed the CEU
NA12878 genome, where we identiﬁed an overall smaller number
of indels (592 373 l—100bp, 2042 101—5000 bp, l60>5kb).
PRISM showed a signiﬁcant advantage at identifying larger vari-
ants due to its use of paired-end analysis to identify likely loca-
tions of breakpoints. Compared to several datasets of validated
deletions (Mills et al., 2011), PRISM achieved signiﬁcantly
higher recall and somewhat lower precision for variants
50—200 bp, and higher precision and recall for deletions > 200 bp
(Fig. 4 and Supplementary Table S6). When comparing to large
deletions (>5 kb) identiﬁed Via Sanger sequencing (Kidd et al.,
2008) in the NA18507 individual, the same trend held: despite
reporting 82% fewer variants than Pindel, PRISM identiﬁed a
higher number of known deletions, thus achieving better preci-
sion and recall. The results of PRISM were nearly on par with
BreakDancer, a tool that only utilizes pair-end data, and cannot
identify the precise breakpoints of variants.

We also used the NA18507 genome to analyze performance on
inversions and duplications. For these variants, breakpoints are
often in repetitive regions, making them especially difﬁcult to
identify with the split-read approach. PRISM identiﬁed 172 in-
version breakpoints in this genome. Of these, 36 (21%) were
among the 83 inversion variants previously identiﬁed with a
paired-end approach (McKernan et al., 2009). We also found
407 split reads displaying the duplication signature and com-
pared these with the copy counts previously reported by
McCarroll et al. (2007), who used array-CGH to identify

 

2580

112 /810's113umo [p.IOJXO'SOilBIIIJOJUIOIQ/ﬁdllq 11101; popeommoq

9IOZ ‘091sn8nv uo ::

PRISM: Pair Read Informed Split Mapping

 

Table 1. Comparison of PRISM, Pindel, GATK and BreakDancer (BreakD.) on the NA18507 dataset

 

Indels 1—20 bp Indels 21—50 hp Indels 51—100 bp

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Known 223 196“1 2727"1 1 86"1

SV Caller Pindel GATK PRISM Pindel GATK PRISM Pindel PRISM

Observed 669 781 781066 772 242 11266 2735 10 361 1387 1716

Found 124 871 145 055 144 851 995 423 1026 49 67

Recall (%) 55.9 64.9 64.9 36.5 15.5 37.6 26.3 36.0

Precision (%) 18.6 18.6 18.8 8.8 15.5 9.9 3.5 3.9
Deletions >5000 bp Inversions Duplications

Known 151“1 83b 26c

SV Caller Pindel BreakD. PRISM Pindel BreakD. PRISM Pindel PRISM

Observed 1997 362 351 193 343 172 427 407

Found 42 55 45 33 54 36 3 7

Recall (%) 27.8 36.4 29.8 39.7 65.1 43.4 11.54 26.9

Precision (%) 2.1 15.2 12.8 17.1 15.7 20.9 0.7 1.7

 

Known SVs catalogued in several studies (Kidd et al., 2008a; McCarroll et al. 2007b; McKernan et al. 20090) are separated into several groups: small indelsa (1—20, 21—50,
51—100bp), large deletionsa (>5000 bp), duplicationsb and inversionsc. The total line indicates the number of variants of a given type identiﬁed by each method as well as the
number present in each dataset. Comparison for deletionsc (>100 bp) is in Supplementary Table S3.

   
 

     

.‘ KNOWN - moer Known
PRISM I’m-am PRISM Pindel PRISM ’Pindel
some hp 201-1pm hp 1oo1+ hp

Fig. 4. Venn diagrams illustrating the concordance of PRISM and Pindel deletion calls of various lengths in the NA12878 individual with variants
annotated at nucleotide resolution by the Yale group (YL_SR) based on 454 read data and validated with PCR (Mills et al., 2011). Two calls are
considered to overlap if they have exactly the same size and their locations deviate by< 100 bp

genomic regions with a signiﬁcant difference in intensity of 270
individuals (90 Yoruban and 180 Eurasian). Following the
method of Medvedev et al. (2010), we identiﬁed 26 genomic re-
gions in which NA18507 likely has higher copy counts than the

characterize PRISM’s ability to identify novel genomic variants
inaccessible to previous tools, we attempted to select ﬁve add-
itional variants from within each size set that did not intersect
with previously known indels or SVs (from the Database of
reference. We found 7/407 of our duplication calls agree with Genomic Variants; http://projects.tcag.ca/variation/) and
these 26 regions, compared with 3/427 duplications reported by which were not reported by Pindel. The novel variants were
Pindel. also visually inspected (see Figure 5A—E) to exclude regions

Finally, to directly measure PRISM’s false-positive rate and with multiple overlapping events. Overall, in 2/ 58 cases, the
to validate the novel variants identiﬁed by our method, we primers did not work, and in 4/ 58, neither of the two alleles
conducted PCR experiments on 58 variants. These were matched in size either the reference genome or the predicted
chosen from various size ranges, with ~10 variants selected variant, likely indicating mispriming or a misassembly in the
from each of the following categories: insertions 10—50 bp, de— reference genome. Of the remaining experiments, 47/52 (90%)
letions 10—50, 50—100, 100—1000, 1000—5000 and >5000 bp. To validated PRISM predictions, while 2/52 (4%) indicated no
allow for the evaluation of the overall accuracy of PRISM, we variation. The ﬁnal 3 /52 (6%) revealed a variant at the genomic
randomly selected ﬁve variants from each category. To region that was different from the one predicted by PRISM

 

2581

112 /3.IO‘S[BUJHO[p.IOJXO'SOIlBUIJOJUIOiq/ﬂdllq 11101; popeommoq

9IOZ ‘OE lsnﬁnv uo ::

Y.Jiang et al.

 

chrEl: $5,521,514 - £51134? v Go Largo-I: 5,134

 

 

 

 

 

 

 

 

 

 

 

Fig. 5. Visualization of a PRISM-predicted variant in the Savant Genome Browser (Fiume et al., 2010, 2012) and a comparison of deletions for the
NA12878 individual. The variant is the 4090 bp deletion on chromosome 8 validated by PCR. The three tracks show (A) the reference genome; (B) the
aligned read pairs, Visualized as arcs. The height of the arc is proportional to the distance between the reads, with blue arcs indicating concordant pairs
while purple arcs are discordant pairs indicating the presence of deletion; (C) the PRISM split-mapping track. Most of the reads in track C contain the
same deletion (gray region), which is consistent with the discordant pairs in track B (purple arcs). Furthermore, there is a second small deletion spanned
by most of the reads supporting this long deletion (black column within the red oval in track C). This additional deletion makes aligning these reads
especially challenging. (D and E) Zoomed in Views of both sides of the deletion

(See Supplementary Table S9). Of the randomly chosen vari-
ants, 30/33 (91%) were validated, with 2/33 (6%) not validat-
ing, and 1/33 (3%) showing alternate variants. Similarly, 17/19
(89%) selected novel variants validated, with the remaining two
regions showing alternate genomic variation.

We also indirectly measured PRISM’s accuracy by analyzing
the fraction and length of indel variants within coding regions of
the genome. The fractions of such indels reported by the three
tools are very close (373/784319:0.05% for PRISM,
364/682434:0.05% for Pindel and 373/783 801:0.05% for
GATK), while a higher fraction of PRISM coding indels had
lengths that are a multiple of three (155/373 241.6% for
PRISM, 143/364:39.3% for Pindel and l44/373=38.6% for
GATK).

4 CONCLUSION

PRISM has several advantages over previous methods for de-
tection of SVs from HTS data, including combining paired read
analysis and split mapping for detection of the exact break-
points for variants of arbitrary size. The sensitive-alignment
algorithm used in PRISM accurately identiﬁes breakpoints
even proximal to other variants or sequencing errors. One
such example is shown in Figure 5, where a large deletion pre-
dicted by PRISM (and validated by PCR) is immediately fol-
lowed by a small deletion, making the alignment of reads that
span the deletion especially challenging. The PCR validations
conﬁrm not only the overall high accuracy of PRISM results
but also its ability to identify novel variants inaccessible to
previous methods.

ACKNOWLEDGEMENT

The authors are grateful to The Centre for Applied Genomics
(Toronto) for assisting with the wet lab validation experiments.

Funding: This work was supported by CIHR and NSERC grants
to ME. and a China Scholarship Council Fellowship to Y.J.

Conﬂict of Interest: none declared.

REFERENCES

Abyzov,A. et al. (2011) CNVnator: an approach to discover, genotype and charac-
terize typical and atypical CNVs from family and population genome sequen-
cing. Genome Res., 21, 974—984.

Chen,K. et al. (2009) BreakDancer: an algorithm for high-resolution mapping of
genomic structural variation. Nat. Methods, 6, 677—681.

Emde,A.K., Schulz,M.H., Weese,D., Sun,R., Vingron,M., Kalscheuer,V.M.,
Haas,S.A. and Reinert,K. (2012) Detecting genomic indel variants with exact
breakpoints in single- and paired-end sequencing data using SplazerS.
Bioinformatics, 28, 619—627.

Fiume,M. et al. (2010) Savant: genome browser for high-throughput sequencing
data. Bioinformatics, 26, 1938—1944.

Fiume,M. et al. (2012) Savant Genome Browser 2: Visualization and analysis for
population scale genomics. Nucleic Acids Res., 40, W615—W62l.

Kidd,J.M. et al. (2008) Mapping and sequencing of structural variation from eight
human genomes. Nature, 453, 56—64.

Karakoc,E. et al. (2011) Detection of structural variants and indels within exome
data. Nat. Methods, 9, 176—178.

Li,H. and Durbin,R. (2009) Fast and accurate short read alignment with
Burrows-Wheeler transform. Bioinformatics, 25, 1754—1760.

Li,H. et al. (2009) The Sequence Alignment/Map format and SAMtools.
Bioinformatics, 25, 2078—2079.

McCarroll,S.A. et al. (2007) Copy-number variation and association studies of
human disease. Nat. Genet, 40, 1166—1174.

 

2582

112 /3.IO'SIBUJHO[p.IOJXO'SOIleJOJUIOiW/Idllq 11101; popeommoq

9IOZ ‘OE lsnﬁnv uo ::

PRISM: Pair Read Informed Split Mapping

 

McKernan,K.J. et al. (2009) Sequence and structural variation in a human genome
uncovered by short-read, massively parallel ligation sequencing using two-base
encoding. Genome Res., 19, 1527—1541.

McKenna,A. et al. (2010) The Genome Analysis Toolkit: a map reduce framework
for analyzing next-generation DNA sequencing data. Genome Res., 20,
1297—1303.

Medvedev,P. et al. (2009) Computational methods for discovering structural vari-
ation with next-generation sequencing. Nat. Methods, 6, $13—$20.

Medvedev,P. et al. (2010) Detecting copy number variation with mated short reads.
Genome Res., 20, 1613—1622.

Mills,R.E. et al. (2006) An initial map of insertion and deletion (INDEL) variation
in the human genome. Genome Res., 16, 1182—1190.

Mills,R.E. et al. (2011) Mapping copy number variation by population-scale
genome sequencing. Nature, 470, 59—65.

Nord,A. et al. (2011) Accurate and exact CNV identiﬁcation from targeted
high-throughput sequence data. BM C Genomics, 12, 184.

Wang,J. et al. (2011) CREST maps somatic structural variation in cancer genomes
with base-pair resolution. Nat. Methods, 8, 652—654.

Ye,K. et al. (2009) Pindel: a pattern growth approach to detect break points of large
deletions and medium sized insertions from paired-end short reads.
Bioinformatics, 25, 2865—2871.

Zhang,J. et al. (2011) SVseq: an approach for detecting exact breakpoints of dele-
tions with low-coverage sequence data. Bioinformatics, 27, 3228—3234.

Zhang,J., Wang,J. and Yufeng,Wu (2012) An improved approach for accurate and
efﬁcient calling of structural variations with low-coverage sequence data. BM C
Bioinformatics, 13 (Suppl. 6), S6.

 

2583

112 /810's112umo [p.IOJXO'SOilBIIHOJUIOIQ/ﬁ(11111 1110131 pop1201umoq

9IOZ ‘091sn8nv uo ::

