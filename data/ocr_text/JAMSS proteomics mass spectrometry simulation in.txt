Bioinformatics, 31 (5), 2015, 791—793

doi: 10.1093/bioinformatics/btu729

Advance Access Publication Date: 3 November 2014
Applications Note

 

Data and text mining

JAMSS: proteomics mass spectrometry
simulation in Java
Rob Smith1'* and John T. Prince2

1Department of Computer Science, University of Montana, Missoula, MT 59812, USA and 2Department of
Chemistry, Brigham Young University, Provo, UT 84602, USA

*To whom correspondence should be addressed.
Associate Editor: Jonathan Wren

Received on January 22, 2014; revised on October 22, 2014; accepted on October 29, 2014

Abstract

Summary: Countless proteomics data processing algorithms have been proposed, yet few have
been critically evaluated due to lack of labeled data (data with known identities and quantities).
Although labeling techniques exist, they are limited in terms of confidence and accuracy. In silico
simulators have recently been used to create complex data with known identities and quantities.
We propose Java Mass Spectrometry Simulator (JAMSS): a fast, self—contained in silico simulator
capable of generating simulated MS and LC—MS runs while providing meta information on the
provenance of each generated signal. JAMSS improves upon previous in silico simulators in terms
of its ease to install, minimal parameters, graphical user interface, multithreading capability, reten—
tion time shift model and reproducibility.

Availability and implementation: The simulator creates szL 1.1.0. It is open source software
licensed under the GPLV3. The software and source are available at https://github.com/optimus

 

moose/JAMSS.
Contact: 2robsmith@gmail.com

 

1 Introduction

Proteomics studies require the prediction of the quantity and iden—
tity of proteins in sample. The accuracy of the determination relies
wholly on the accuracy of the data processing pipeline modules that
systematically extract and process the components of the sample
output file (Smith et 61]., 2013a). Despite the criticality of data pro—
cessing accuracy, few published algorithms have quantitative com—
parisons against other algorithms using labeled data—data where
the correct protein quantity and identity are known (Smith et 61].,
2013c).

Common strategies for labeling data are limited in terms of con-
fidence and accuracy. For example, MS/MS identifications are
biased towards the approximately 16% most intense signals, and
have an approximately 50% false—positive rate (Michalski et 61].,
2011), leading to evaluative results that are not representative of the
dataset, particularly among the more biologically significant but
less—abundant peptides. Hand—labeled datasets exist (Conley et 61].,
2014; Smith et 61]., 2014), but due to the complexity of labeling by

hand usually consist of small segments of data within an intensity
threshold. Using existing tools, hand labeling consists of many sub—
jective decisions, and creating a set of replicates would take years.

Construction of in silico datasets is an attractive alternative to
labeling, as these datasets automatically include labels. In silico
simulation consists of emulating the physiochemical processes
involved in the mass spectrometry analysis of a sample in order to
produce an szL (or equivalent) output file similar to what would
be generated in a real run but without any material or instrument
time cost. Although more research is needed before an exact repli—
cate of a real sample run can be simulated, the overall characteristics
of the output data in terms of density, noise, signal shape, etc., are
similar enough to be valuable as labeled data for LC—MS data pro—
cessing algorithmic evaluation.

LC—MS simulation is still in its infancy. LC-MSsim, an incorpo—
rated module of OpenMS, was the first simulator to produce full—
featured MS simulated data (Schulz—Trieglaff et 61]., 2008). It has
since been replaced by MSSimulator, featuring more realistic isotope

©The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 791

112 /§JO'S{eumo [p.IOJXO'SOTlBIHJOJUTOTCI/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

792

R.Smith and J. T.Prince

 

trace variance (in both intensity and m/z) and MS/MS simulation
(Bielow et 61]., 2011). Most recently, Mspire—simulator, a standalone
simulator in the Ruby programming language, provided automatic
charge modeling, realistic hourglass—shaped isotope traces (increased
variance at lower intensities), direct control over post—translational
modifications (PTMs), and the ability to extract simulation param—
eters from existing szL files using machine learning (Noyce et 61].,
2013).

There remains much to be done in MS simulation. Existing simu—
lators do not provide the molecular provenance of output signals ne—
cessary for generating ground truth data for quantitative MS data
processing algorithm evaluation. They have involved installation
processes, requiring installation of their parent libraries and a some—
times onerous degree of dependency management. They are also
both command—line programs with very little documentation.
Neither program is multithreaded. Both programs feature many par—
ameters, some of which significantly alter the simulation outcome in
unclear ways. Although Mspire—simulator produces run—to—run vari—
ation (unlike MSSimulator), it does not vary the RT of eluents across
runs and cannot produce a clone of a previous run when fed the
same input and parameters. Although Mspire—simulator’s isotope
trace generation features more realistic variance in m/z and intensity
than MSSimulator, it is many times slower and has no bound on
RAM requirements. Both programs seem limited in regards to
PTMs: Mspire—simulator renders all PTMs as static (even variable
ones) and MSSimulator seems to as well. MSSimulator produces the
same isotope trace shape (scaled for intensity) for every peptide,
meaning its utility for generating datasets for evaluating data pro—
cessing algorithms is limited.

This article describes the Java Mass Spectrometry Simulator
(JAMSS), a novel simulator designed to address each of the above—
mentioned drawbacks of current simulation software.

2 Methods

JAMSS takes any protein.fasta file as input. Optionally, users can
specify the quantity of each protein as a percentage of the total sam—
ple content (see program documentation in README file). The GUI
provides several clear options to modify the run. For example, the
user can specify how many cores to use if using a multicore machine.
They can select one of 16 digestion enzymes. They can select how
many scans per second, how many missed cleavages to allow, how
many MSZs per scan to generate, how many noise points to include
and at what intensity range and the pH of the sample. They can con—
trol the resolution of the simulation through a merge parameter. In
addition, the GUI can be set for a one—dimensional (non—chromato—
graphic) simulation, which is useful in modeling direct injection
experiments. There are also settings for PTMs. The program in-
cludes options for carbamidomethylation, pyroglutamation, phos—
phorylation and methionine oxidation. Although these options do
not include all possible PTMs, limiting them by explicit mention
allows for treating variable PTMs as they should be treated: that is,
the combinatoric possibilities of all selected PTMs are calculated,
and the total quantity of each protein is split according to the per—
centage of the proteins each PTM combination will affect.

After reading the .fasta file, the simulator performs an in silico
digestion of each protein. At this point, the work is divided among
the number of user—selected available CPU cores. For each peptide,
atom counts are calculated from which the isotopic envelopes and
charge are calculated. If PTMs are selected, this process is executed
for each PTM applicable to the peptide. From there, the amino acid

H} UNION-'5: HE'S-5 'SIJE'I: UNIONS:

“a,” Fig. "an, I open Hul'lrlhrud: How mam EFLIFI‘ I I I I I I I 'T'
I 3 3 -1 E- E 'I' '9
'n'drlL Elma-L11: F||I-. cu:th
D'an 5515‘.“ '
I'D“ m'“”' m“ mum sun-LP“ Second: I
Elan-er _
Hemﬁﬁﬂg Nurtm-eliuwndsk Ian-3.5
'Ia'brrrlvldumrll‘L-rlcllun laun- . I_I
_ _ Hlsnd'IIIla-ngu 'I I I I I I
PMutammo us: I: Ll [I 1 2 1 4 5
Pf'asphn-rﬁum IZ-IIIrI IZ-  “Enrica-E T . I I I l I I I
_ [I 1 I 3 4 5 ﬁ '-' S 5- 1-2!
'J-Hullunol Hethitlnm III-m "' I-
Dm- lbIrIIn-MIDI'I smﬂmi: _
Sample pH '1"
[imp-m P-merta-ae-Il-l-ZIIJE 1
min Hon..- Mlii PeI I3II:aIrI: l 
I Hatr- Hclse Herr-sly. “II”
J Hh N'DI'FSE Intensity. 5:0
manap Hang-a: :- 5:92

Flaunt Donut: Rut

Fig. 1. JAMSS has a straightforward GUI interface to facilitate parameter se-
lection for MS simulation

profile of the peptide (or PTM—modified peptide, if applicable) is fed
into the same machine learning model used in Noyce et al. (2013) to
predict the retention time of the peptide (see Noyce et 61]., 2013
for details). The intensity of the peptide is determined by the user—
provided intensity or, if none is provided, an inverse exponential
sample. The shape and variance of each isotope trace in a molecular
envelope’s isotopic envelopes is modeled using the same mechanisms
in Noyce et 61]., (2013). Isotope trace shapes are determined via a
modified Gaussian function with sufficient variation so that no two
isotope traces are identical, providing variation for replicate runs.
Further variation is achieved by modeling RT shifts as normally dis-
tributed events. From there, each centroid is subject to general noise
in m/z, as well as intensity—specific noise in m/z (providing splayed
isotope traces in the head/tail regions).

Memory usage is bounded by having the MS objects periodically
writing their produced centroids onto disk. Frequency of writing out
is determined automatically as a factor of the size of the JVM se—
lected by the user and the CPUs in use by the user. For faster pro—
cessing, more RAM can be selected by the user at runtime. After all
centroids are created, the program finishes each RT scan by merging
points within the resolution set by the user and generating an szL
output file, as well as .csv files providing all necessary meta-informa-
tion to trace the provenance of each signal in the szL file to the
protein it originated from. This provenance meta—information is es—
sential to creating ground truth data for MS data processing algo—
rithm evaluation.

3 Results

JAMSS is a GUI—based MS simulator in Java (see Fig. 1). It creates
fully annotated complex proteomic datasets in szL with straight—
forward.csv provenance meta—information. It can be used to gener—
ate LC—MS and MS data, allowing for the evaluation of a wide
range of data processing algorithms such as isotope trace extraction
(both in chromatographic and non—chromatographic applications—
Smith et 61]., 2012), isotopic envelope extraction, molecular envelope
extraction and reduction, and correspondence (Smith et 61]., 2013b).
It has a limited number of intuitive parameters, a self—contained one—
click installation with no external libraries or dependencies, and
supports multithreading. It creates isotope traces with realistic vari—
ance in both m/z and intensity and has a user—set memory upper
bound. JAMSS handles variable PTMs and static PTMs. JAMSS
features controlled randomized trace shape generators to create

112 /§JO'Sjeumo [p.IOJXO'SOTlBIHJOJUTOTCI/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

Proteomics mass spectrometry simulation in Java

793

 

run-to—run variation in replicates but uses controlled random seed—
ing so it is possible to produce a clone of a previous run. It maintains
relative protein abundance in isotope traces accounting for isotope
trace variability and abundance distribution over PTMs. JAMSS
also models RT shifts in order to provide more realistic replicates
for generating datasets to test LC—MS correspondence algorithms.

References

Bielow,C. et a]. (2011) MSSimulator: simulation of mass spectrometry data.
]. Proteome Res, 10, 2922—2929.

Conley,C. et al. (2014) Massifquant: open-source Kalman ﬁlter based XC-MS
feature detection. Bioinformatics 30, 263 6—2643.

Michalski,A. et a]. (2011) More than 100,000 detectable peptide species elute
in single shotgun proteomics runs but the majority is inaccessible to data-
dependent LC-MS/MS.]. Proteome Res, 10, 1785—1793.

N0yce,A.B. et al. (2013) Mspire-Simulator: LC-MS shotgun proteomic simu-
lator for creating realistic gold standard data. ]. Proteome Res, 12,
5 742—5 749.

Schulz-Trieglaff,O. et al. (2008) LC-MSsim—a simulation software
for liquid chromatography mass spectrometry data. BMC Bioinformatics
9, 423.

Smith,R. et al. (2012) Statistical agglomeration: peak summarization for direct
infusion lipidomics. Bioinformatics 29, 2445—245 1.

Smith,R. et al. (2013a) Controlling for confounding variables in ms-omics
protocol: Why modularity matters. Brief. Bioinform. 15, 768—770.

Smith,R. et al. (2013b) LC-MS alignment in theory and practice: a comprehen-
sive algorithmic review. Brief. Bioinform. 16, 104—1 17.

Smith,R. et al. (2013c) Novel algorithms and the beneﬁts of comparative valid-
ation. Bioinformatics, 29, 15 83—15 85 .

Smith,R. et a]. (2014) Proteomics, lipidomics, metabolomics: a mass spectrom-
etry tutorial from a computer scientist’s point of View. BMC Bioinformatics,
15(Suppl. 7), S9.

112 /§JO'Sjeumo [p.IOJXO'SOTlBIHJOJUTOTCI/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

