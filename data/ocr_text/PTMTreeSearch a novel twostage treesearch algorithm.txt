ORIGINAL PAPER

Vol. 30 no. 2 2014, pages 234—241
doi:10. 1093/bioinformatics/btt642

 

Data and text mining

Advance Access publication November 8, 2013

PTMTreeSearch: a novel two-stage tree-search algorithm with
pruning rules for the identification of post-translational
modification of proteins in MS/MS spectra

Attila Kertész—Farkasl, Beata Rei22, Roberto Veral, Michael P. Myers3 and

Séndor Pongor1’4’*

1Protein Structure and Bioinformatics Group, International Centre for Genetic Engineering and Biotechnology, AREA
Research Park, 99 Padriciano, Trieste, Italy, 34149, 2Institute of Biophysics, Biological Research Centre, Temesvari krt.
62, H—6727 Szeged, Hungary, 3Protein Networks Group, International Centre for Genetic Engineering and
Biotechnology, AREA Research Park, Padriciano 99, 34149 Trieste, Italy and 4Faculty of Information Technology,
Pazmany Péter Catholic University, Prater u. 50/a, H—1083 Budapest, Hungary

Associate Editor: Dr Jonathan Wren

 

ABSTRACT

Motivation: Tandem mass spectrometry has become a standard tool
for identifying post-translational modifications (PTMs) of proteins.
Algorithmic searches for PTMs from tandem mass spectrum data
(MS/MS) tend to be hampered by noisy data as well as by a combina-
torial explosion of search space. This leads to high uncertainty and
long search-execution times.

Results: To address this issue, we present PTMTreeSearch, a new
algorithm that uses a large database of known PTMs to identify PTMs
from MS/MS data. For a given peptide sequence, PTMTreeSearch
builds a computational tree wherein each path from the root to the
leaves is labeled with the amino acids of a peptide sequence.
Branches then represent PTMs. Various empirical tree pruning rules
have been designed to decrease the search-execution time by elim-
inating biologically unlikely solutions. PTMTreeSearch first identifies a
relatively small set of high confidence PTM types, and in a second
stage, performs a more exhaustive search on this restricted set using
relaxed search parameter settings. An analysis of experimental data
shows that using the same criteria for false discovery, PTMTreeSearch
annotates more peptides than the current state-of—the—art methods
and PTM identiﬁcation algorithms, and achieves this at roughly the
same execution time. PTMTreeSearch is implemented as a plugable
scoring function in the XITandem search engine.

Availability: The source code of PTMTreeSearch and a demo server
application can be found at http://net.icgeb.org/ptmtreesearch.
Contacts: pongor@icgeb.org

Supplementary information: Supplementary materials are available
at Bioinformatics online.

Received on May 3, 2013; revised on October 21, 2013; accepted on
November 3, 2013

1 INTRODUCTION

Mass spectrometry is now the de facto method used for protein
identiﬁcation in complex biological samples. Subsequent compu-
tational analysis of data from even a single sample may be

 

*To whom correspondence should be addressed.

intense and involve the application of a long pipeline of various
algorithms to reveal protein identiﬁcation and structure. (For
reviews see Aebersold and Mann, 2003; Becker and Bern,
2011; Deutsch et al., 2008; Jacob, 2010; Johnson et al., 2005;
Kertesz—Farkas et al., 2012; MacCoss, 2005; McDonald et al.,
2004; Menschaert et al., 2010; Nesvizhskii, 2010; Nesvizhskii and
Aebersold, 2004; Neumann and Bocker, 2010; Noble and
MacCoss, 2012; Webb-Robertson and Cannon, 2007; Yates
et al., 1995.) Difﬁculties arise when unexpected or missed cleav-
ages, point mutations and post-translational and chemical modi-
ﬁcations need to be considered in the analysis, since the inclusion
of these structural features of proteins can lead to the combina-
torial explosion of the search space. This can lead to increases in
search-execution time, decreases in the signiﬁcance of hits, and
increases in the number of false assignments. A solution to this
problem involves application of a so-called two-round-search
(often termed error-tolerant search) applied extensively in
XITandem (Craig and Beavis, 2003, 2004; Craig et al., 2004)
and Mascot (Creasy and Cottrell, 2002). The ﬁrst round of this
strategy uses ‘clean’, i.e. unmodiﬁed peptides to identify proteins,
and then in a second round of analysis, a more exhaustive search
is used to identify modiﬁed peptides. This principle assumes that
at least one high-quality unmodiﬁed peptide is present in the
sample under analysis.

Identiﬁcation of post-translational modiﬁcations of proteins
(PTMs) is an especially difﬁcult task. On average, human pro-
teins are thought to carry about three PTMs per molecule
(MacCoss et al., 2002). However, <1% of the proteins in the
UniProtKB/Swiss-Prot databases are annotated with PTMs
(Tharakan et al., 2010), meaning signiﬁcant variations from
this estimate may exist. The current list of known PTMs is
>500, and they can be found in various lookup tables
(PTMDBs, PTM databases). A good example is the RESID
Database of Protein Modiﬁcations (Garavelli, 2003).

A PTM carried on a peptide alters the molecular weight of the
peptide and the corresponding fragment ions and results in a
shift within the mass spectrum fragment ion series. We term
this shift a ‘gap’. A PTM search can then be formalized as
follows: given a theoretical and an experimental spectrum,

 

234 © The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com

112 ﬁhO'smumo[pJOJXO'sopquJOJuroiq/ﬁd11q IIIOJJ pepcolumoq

910K ‘09 lsnﬁnV no :2

PTMTreeSearch

 

insert one or more gaps into the theoretical spectrum such that
it maximizes the number of the overlapping peaks or other
scoring functions. The main challenge for the PTM-search
algorithms is then to ﬁnd such gaps that can be interpreted as
PTMs in the MS /MS data, while keeping the execution time and
the false discovery rate (FDR) low (Benjamini and Hochberg,
1995)

PTM-search algorithms can be categorized into three large
groups: targeted, untargeted and de novo PTM-search methods
(for a review see Ahrne et al., 2010). In the case of targeted PTM
searches, the user/experimenter has to specify the PTMs that
may be present in the sample as an input parameter to the
search program and these parameters will then be used to calcu-
late the gaps. F or instance, XITandem (Craig and Beavis, 2004)
considers one type of PTM per amino acid. However, this results
in a combinatorial explosion of the search space that increases
the execution time and often reduces the signiﬁcance of the hits.
For example, a partial (incomplete) modiﬁcation, such as phos-
phorylation of serine would result in a mass shift of ~+80 Da at
serine residues and would effectively double the number of
serine-containing peptides. This is because each serine residue
would have to be annotated with and without the mass shift
due to phosphorylation.

Untargeted PTM searches do not require the user to specify
expected PTMs but instead use heuristic search algorithms to
ﬁnd modiﬁcations on the basis of a database of known PTMs.
RESID (Garavelli, 2003) is one such database that can be used in
this type of search. For instance, the algorithm PILOT_PTM
(prediction via integer linear optimization and tandem mass
spectrometry) uses a binary integer optimization model to ﬁnd
PTMs that best match the experimental data under analysis
(Baliban et al., 2010). MODi (Kim et al., 2006) identiﬁes short-
sequence tags (3—5-amino acid long) and ﬁlls gaps between tags
with amino acids that are unmodiﬁed or modiﬁed by PTMs.
PTMSearchPlus (Kertesz et al., 2009) uses further information
obtained from accurate intact protein mass to identify PTMs in
MS/MS data.

De novo PTM-search algorithms (also called ‘unrestricted
PTM searches or blind searches’) do not use a priori information
about modiﬁcations making it possible to discover novel, previ-
ously never reported, modiﬁcations. In general, a theoretical
spectrum of a peptide sequence is aligned to an experimental
spectrum, allowing placement of one or a few gaps in one way
or another. These gaps are then reported as putative PTMs. To
explain this in more detail, let A denote the mass difference
between the precursor mass of the experimental spectrum and
the parent mass of the theoretical peptide. Some methods have a
restriction on gaps, such as the number of the gaps or the sum of
the inserted gaps must be 2 A. MS-Alignment (Tsur et al., 2005)
uses a dynamic programming approach to calculate the best
alignment. A similar method has been proposed by (Chiyong
et al., 2010), but in this case does not take A into account
during the alignment calculation. P—Mod (Hansen et al., 2005),
PTMap (Chen et al., 2009) and pMatch OK e et al., 2010) place A
of each amino acid on the theoretical peptide and matches it to
the experimental spectrum iteratively. In a similar manner,
TwinPeaks (Havilio and Wool, 2007) and DeltAMT (Fu et al.,
2011) calculate the location of the PTM but TwinPeaks shifts the
theoretical peptide over a wide range and derives the PTM mass

from the shift providing the highest score. DeltAMT meanwhile
assumes that both modiﬁed and unmodiﬁed versions of the pep-
tides are present in the sample and looks for frequent occurrences
of the retention time and parent ion-mass difference between
spectral pairs. High concentration of such pairs is assumed to
represent modiﬁcation groups in the sample. OpenSea (Searle
et al., 2004), in a similar manner to MODi, identiﬁes short-
sequence tags from the spectrum but ﬁlls the gaps between
tags without using a PTMDB. SIMS (Liu et al., 2008) meanwhile
interprets pairs of product ion peaks, which represent potential
amino acid residues or intervals, as a means of mapping PTMs.
The de novo PTM identiﬁcation algorithms often misplace PTMs
on the amino acid sequence or require other corrections to im-
prove accuracy. PTMClust (Chung et al., 2011) and PTMFinder
(Tanner et al., 2008) have been designed to improve the quality
of PTM assignments obtained with de novo PTM identiﬁcation.

Building a preﬁx tree from theoretical peptide sequences con-
stitutes a different kind of approach wherein the problem of
PTM identiﬁcation is reduced to tree traversal (Kertesz-Farkas
et al., 2011). For a peptide sequence p1. . . pn of length n, a preﬁx
tree structure can be built wherein the nodes at the i-th level
of the tree are labeled with the amino acid p,- and each branch
represents different modiﬁcations on p,- taken from a PTMDB.
At each node, the corresponding theoretical fragment ion masses
are calculated and matched to the experimental spectrum, pro-
viding a score for the given node. Leaves that have gathered
modiﬁcations on the path from the root and add up to the
parent mass difference are considered feasible solutions. The
problem with this approach is the tree’s size: a complete traversal
is too time-consuming for practical application. A greedy traver-
sal heuristic has previously been proposed that traverses only a
fraction of the full search space thus reducing running times to a
manageable level (Kertesz-Farkas et al., 2011). However, greedy
algorithms may fail to ﬁnd the best solution and report false
annotations. Instead of developing more sophisticated tree tra-
versal algorithms for this problem, we decided to develop tree-
pruning rules to eliminate unlikely modiﬁcations and reduce the
search space.

In this article we present a novel method, called
PTMTreeSearch, which is designed to identify modiﬁcations in
experimental spectra using a PTMDB. PTMTreeSearch is exe-
cuted in two rounds. Using strict tree-pruning rules, the ﬁrst
round of search is aimed at identifying a restricted set of PTM
types with high conﬁdence. The second round uses this restricted
set of PTM types but runs with relaxed tree-pruning rules so as
to identify more modiﬁed spectra. To the best of our knowledge,
this method is the ﬁrst that applies a two-stage-search approach
to PTM identiﬁcation. This idea is analogous to the two round
peptide identiﬁcation strategy used by XITandem and Mascot,
where the ﬁrst round is used to reduce the search space to likely
solutions followed by an error-tolerant, more exhaustive search
in the second round.

The rest of this article is structured as follows: Section 2
presents the PTMTreeSearch algorithm along with the tree
pruning techniques applied; Section 3 describes the datasets
and methods used and Section 4 presents and discusses the re-
sults. Finally, Section 5 concludes our ﬁndings and outlines
further work.

 

235

112 ﬁhO'smumo[pJOJXO'sopquJOJuroiq/ﬁd11q IIIOJJ pepcolumoq

910K ‘09 lsnﬁnV no :2

A.Kertész-Farkas et al.

 

2 METHODS

Let La be a list of modiﬁcation masses (measured in Daltons) for the amino
acid a and 12,, = |La| denote the number of the elements in the list (0.0 Da is
always included and represents no modiﬁcation). A modiﬁcation mass is
the mass difference that the amino acid gains or losses due to the molecular
modiﬁcation. For example LC: /0.0, —17.0265, 47.9847, 57.0215,
71.0371,. . . , ‘/’ means the amino acid cysteine can be (i) unmodiﬁed, (ii)
lose 17.0265 Da (via losing ammonia from cysteine), (iii) gain 47.9847 Da
(via complete oxidation), (iv) gain 57.0215 Da (via carbamidomethylation)
and (v) gain 71.0371 Da (via propionamide), and so on. The molecular
mass of cysteine is 121.16 Da and becomes 178.1815 Da after carbamido-
methylation. Note that one particular amino acid molecule is not modiﬁed
with more than one modiﬁcation at the same time, but an amino acid can
be modiﬁed with various modiﬁcations at different occurrences in the
peptide sequence (and in different peptides as well).

Let q be an experimental spectrum represented as a list of location-
intensity peak pairs, pzalaz. . .an be a peptide sequence, PM(q) and
PM(p) denote the precursor mass of q and 1), respectively, and
A = PM(q) —PM(p). The basic idea is to generate the theoretical fragment
ion peaks for all modiﬁed variations of peptide 1) and store them in a
preﬁx tree, where a branch at the level i denotes a PTM on amino acid a,.
A tree node at the level i contains a structure v = (s, b, y, m, c), where sis a
score that quantiﬁes the comparison of the peptide part a1...a,- to the
experimental spectrum. Then c is the number and m is the sum of the
mass of the acquired modiﬁcations in the sequence a1 . . . a,. The variables
b and y store the masses (m/z) of the b- and y-fragment ions that corres-
pond to the (al . . .ai) +m and (a,+1 . . . an) + A —m fragment ions,
respectively.

Now we recursively deﬁne the tree and the values stored in the node
structures as follows: the root node is (0, 0, PM(q), 0, 0) at level 0. If
v = (s, b, y, m, c) is a node in the tree at the level i (0 5 i < n), then the node
v]: (s + h, b + mai+1+ mj, y—mai+1—mj, m + mj, c’) is a child of the node v
at level i + 1, where

0 mg,“ is the mass of the amino acid am,
0 mj is the j-th modiﬁcation in the list La“,

0 h is the sum of the intensities of the experimental peaks that matches
to the theoretical peaks b +mai+1+mj and y—ma,+1—mj within the
small ion match tolerance,

o c’ = c + 1 if mi 75 0, otherwise c’ = c (that is c’ counts the PTMs on
the al . . . ai+1 fragment).

The node vj at level i+ 1 represents that the amino acid ai+1 in the peptide
1) is modiﬁed with the j-th modiﬁcation from La“. If v is a node at level n
then v is a leaf node. A leaf 1 = (s, b, y, m, c) is called a feasible solution if
A =m (up to a small precursor mass tolerance); that is the mass of the
peptide with the acquired modiﬁcation masses is equal to the precursor
mass of the query spectrum. Note that b can be calculated in an efﬁcient
way by storing the peaks of the experimental spectrum in an ordered list
ordered by the peaks’ m/z locations.

The score of the spectrum q and peptide 1) comparison is the maximum
score of the feasible solutions, if there is any, otherwise ‘null’ is returned.
This goal can be found with any kind of tree traversal method—depth-
ﬁrst traversal algorithms are a good example in this case. The modiﬁca-
tions on the peptide can then be extracted from the path between the root
and the best goal leaf.

Note that all nodes at level i correspond to the i-th amino acids in
peptide 1), and all have the same nu,- number of children. Hence, the tree is
balanced and all leaves have the same depth. This gives the size of the
search space:

n j
ITI=1+ZHna,

j=1 i=1

M9 MQL
M M Q+0.98 M Q+0.98L

5: score
b: mass of (M+15-994SQ+°-98L) = 406.9749
y: mass of (SQL)+A—16.9749 = 329.0251-A

m:16.9749
c: 2
+15.994QQ+0.98

Peptide: M Q L S Q L
Mods: LM={0,15.9949} LQ={0,0.98,31.9898}

 

 

Fig. 1. Illustration of a computational tree representation of the search
space of the peptide MQLSQL, where the amino acid M can be oxidized,
Q can carry 0.98 and 31.9898 modiﬁcations, and where the curly bracket
shows the structure of a node. Each path from the root to the leaf rep-
resents a modiﬁed peptide and each branch represents an insertion of a
modiﬁcation to the peptide

which makes the time complexity of the traversal algorithm impractical.
Note also that the size of the search space does not depend on the ex-
perimental spectrum. In the next subsection we deﬁne pruning techniques
in order to maintain the run time polynomial and make it appropriate for
real applications. An example computational tree is given in Figure 1.

2.1 Search space reduction via tree pruning

In theory, for a peptide of 10 residues each modiﬁable by three modiﬁ-
cations, the search space will be a tree consisting of around four million
nodes. Checking all these nodes means a complete traversal of the tree
would require prohibitively long calculations for practical applications.
However, we can deﬁne simple rules for eliminating potential modiﬁca-
tions and/or combinations that are unlikely to occur. This is a rule-based
reduction of the search space, which corresponds to the pruning of the
tree. Namely, if a rule is not fulﬁlled at a certain node, a sub-tree beyond
the node in question is eliminated, and, as a result, tree traversal will
become faster. We use the following rules.

(i) Limiting the number of modiﬁcations: Let MB be a user-defmed
upper bound on the number of modiﬁcations allowed on any
peptide. The algorithm eliminates the node v: (s, b, y, m, 6)
along with the corresponding sub-tree from the search space if
c > MB. We noticed that applying a large MB value (say 5) leads
to a disproportionally large number of erroneous annotations in
short peptides (data not shown). This bias can be removed by
applying a length-dependent upper bound, MB’ 2 min(MB, n/ 3),
where n is the length of the peptide in question.
Excluding adjacent, compensatory modiﬁcations: In the data-
base of modiﬁcations there are 102 pairs in which the mass
change is identical but of adverse sign. We term these ‘pairs—
compensatory’ modiﬁcations. For instance, hydroxylation of
lysine to hydroxyl-lysine leads to a mass gain of 15.9994 Da,
while reduction of serine to alanine (or threonine to a-aminobu—
tyrate) leads to a mass loss of 15.9994 Da. The algorithm would
automatically allow these pairs to be included since the overall
mass of the peptide would not change. Currently we disallow
such compensatory modiﬁcations if they are adjacent (but are
not necessarily on two subsequent amino acids). If the sum of the
peak shifts caused by two adjacent PTMs is 0 within a certain
tolerance, the node and the respective sub-tree will be pruned
from the tree.
(iii) Excluding non-productive modiﬁcations: In the ﬁrst approxima-
tion, a PTM is accepted if adding its mass shift to the corres-
ponding theoretical peaks (type b- and its complementary peak

(ii

V

 

236

112 /810's112umo[pJOJXO'soi112u1101uroiq/ﬁd11q 111011 pep1201umoq

910K ‘09 lsnﬁnV no 22

PTMTreeSearch

 

of type y-) will cause the modiﬁed peak to match with one peak
of the experimental spectrum. Formally, the node v]: (s’, b’, y’,
m’, c’) is to be deleted if c’ > c and s = s’ with respect to its parent
node v: (s, b, y, m, 6).

(iv) Setting a threshold on matching intensities: In practice, an experi-
mental-theoretical spectrum comparison can be considered ac-
ceptable if the total intensity of the matching peaks exceeds a
certain threshold. The algorithm applies such a threshold and
prunes a node when the score of the current node plus a predicted
score for the path from the current node to leaves does not exceed
a certain value. Formally, let S be the sum of the intensity of the d
most intense experimental peaks, where d is the number of the
theoretical peaks of the peptide and let matching intensities (score
ratio (SR)) be a user-deﬁned threshold (0<SR<1). The node
v: (s, b, y, m, c) at level i is to be eliminated if (s/S+(n—i)/
n) < SR. Score estimation for a path connecting a node to a leaf
is a widely used technique in A*-algorithms (Hart et al., 1968).

(v) Equilibrated matching frequencies: We deﬁne matching fre-
quency as the number of theoretical peaks matching with the
experimental peaks divided by the total number of the theoretical
peaks. By prescribing equilibrated matching frequencies, we
require that the matching frequency of fragments carrying 0, 1,
2,. . .PTMs, respectively, should be roughly the same. For in-
stance, if a peptide has 10 unmodiﬁed fragments, 20 fragments
carrying one PTM and 10 fragments carrying two PTMs, we
expect that the ratio of matching peaks should be roughly the
same, say 40%, in all three groups. For quantifying the evenness
of the distribution, we deﬁne the modiﬁed peptide entropy score
(MPE), which is based on the formula of Shannon entropy (see
Supplementary Materials Section SI for the formal deﬁnition).
MPE is 1.0 when the modiﬁed fragment ions match to experi-
mental peaks evenly, while MPE is 0.0 when only one type of
(modiﬁed or non-modiﬁed) fragment matches. We note that
MPE does not take into account the number of the matching
peaks and it can give 1.0 as a value for poor but evenly matching
frequencies (such as those that occur in random spectrum-
peptide comparisons). Hence, MPE does not substitute the
usual scoring function but rather complements it. A high MPE
score is a necessary but not sufﬁcient condition for identifying
modiﬁed peptides. This rule is applied on feasible solutions
(leaves)—i.e. it ﬁlters solutions but not tree nodes. Hence appli-
cation of this rule does not speed up the calculations, but
improves accuracy by eliminating ambiguous annotations.

PTMTreeSearch builds, explores and applies the pruning rules simultan-
eously, i.e. it does not build a full tree before pruning it. PTMTreeSearch
builds the tree recursively, starting from the root node and applies the tree
pruning rules in each newly created node. In addition, tree traversal
follows a depth-ﬁrst search strategy, meaning that only the path from
the root to the current node is kept in memory. As a consequence, the
RAM requirement of PTMTreeSearch is low. We note that rules deﬁned
here can be applied independently from each other. Supplementary
Material Section S3 shows a ﬂowchart and a pseudo code of the
algorithm.

2.2 Two-stage searching

Pruning parameters [MB, non-productive modiﬁcations (NPM), SR,
MPE] determine the size of the search space. Strict parameter settings
(small MB, NPM, high SR and high MPE) allow identiﬁcation of high
conﬁdence PTMs in good quality spectra in relatively short times.
Conversely, loose parameter settings (high MB, without NPM, low SR
and low MPE), allow the analysis of a larger search space and give rise to
a larger set of PTMs at the expense of running time. In order to keep
the beneﬁts of both strategies, PTMTreeSearch is implemented in a

 

 

 

Fast Potential X | X N-termini C-termini Point PTMTreeSearch
matching Mods cleavage modiﬁcation modiﬁcation mutations Two-Stage Search

Fig. 2. The spectrum identiﬁcation pipeline of the XITandem including
PTMTreeSearch

 

 

 

 

 

2nd stage (Error tolerant search) I

 

two-round fashion. The ﬁrst round uses strict parameter settings and
serves to identify a smaller set of likely PTM types, while looser param-
eter settings applied in the second round identify all possible occurrences
of this restricted set of PTM types. This approach is based on the as-
sumption that each modiﬁcation type present in a sample has to be found
in at least one good quality spectrum. This idea builds on the two-step
database search principle used by programs such as XITandem and
Mascot.

2.3 Implementation, availability, and remarks

PTMTreeSearch is written in C++ using MPICH (message passing inter-
face) parallelization technology. It is implemented as a pluggable scoring
function (MacLean et al., 2006) within the XIITandem search engine
(Bjomson et al., 2008), which is a parallel version of the XITandem pro-
gram. PTMTreeSearch consists of two main classes. One class is called
PTMTreeSearchScore. It derives from the class mscore_tandem
and it implements the PTMTreeSearch method. The other class is
called PTMTreeSearch. It derives from the mrefine class and initial-
izes the variables, loads the modiﬁcations, launches the spectrum-peptide
comparisons using PTMTreeSearchScore and collects the modiﬁcations
found. The PTMTreeSearch class carries out the two-stage searching. The
source code of PTMTreeSearch along with an installation guide and the
parameter speciﬁcations can be found at http://net.icgeb.org/ptmtree
search/doc. For demonstration purposes, we developed a web server
that contains the XIITandem search engine with PTMTreeSearch
included (http://net.icgeb.org/ptmtreesearch). We note that XITandem
uses a binning technique for peak representation, while in contrast
PTMTreeSearch uses the exact measured location of the peaks and the
accurate mass of the modiﬁcations. The latter was chosen because it
provides a higher accuracy than a binning approach. Figure 2 shows
PTMTreeSearch within the XITandem pipeline.

XIITandem implements reading of the input experimental spectra, ﬁl-
ters and manages the results and outputs it in a standard manner. From
XITandem, as it is speciﬁed in the input parameter ﬁle, PTMTreeSearch
obtains the parameter settings, such as the tolerance parameters, frag-
mentions to score (a-, b-, c-, x-, y-, z- ions) and considers partial, missed
cleavage and multiply charged precursor ions. Fixed modiﬁcations
deﬁned in XITandem are not included up to the allowed PTM limit MB.

2.4 Methods and datasets

2.4.1 Collections of known PT MS We collected different types of
PTMs from four public sources: (i) OMSSA (http://www.ncbi.nlm.nih.
gov/ IEB/ToolBox/CPP_DOC/lxr/source/src/algo/ms/omssa/mods.xml)
(Geer et al., 2004), (ii) Unimod (http://www.unimodorg/downloads.
html), (iii) Uniprot http://www.uniprot.org/docs/ptmlist and (iv) ResId
(ftp://ftp. ebi.ac.uk/pub/databases/RESID/) (Garavelli, 2003). The data
were downloaded October 10, 2011. We compiled a unique list of
amino acid modiﬁcations, which resulted in 524 modiﬁcation types.

2.4.2 Spectrum datasets used for testing ‘The Aurum’ dataset is a
publicly available dataset that contains 9832 singly charged spectra gen-
erated on an ABI 4700 MALDI TOF/TOF instrument from 246 puriﬁed
and trypsin—digested protein samples. This dataset was explicitly designed
for testing novel MS/MS algorithms and tools (Falkner et al., 2007).

 

237

112 /810's112umo[pJOJXO'soi112u1101uroiq//2d11q 111011 pep1201umoq

910K ‘09 lsnﬁnV no 22

A.Kertész-Farkas et al.

 

The data were downloaded from ProteomeCommons.org Tranche net-
work via the following hash: anUzQuuP7BIqF1antLtjwnfwauOM-
Avag2BFmenNe9Ue MgprBFh7+wtpchanMk2KY—8z9ijquY
DbQOpTNqu4AAAAAA SJlaw: :. ‘HSPP2A’ is a dataset containing
29 583 spectra (20 773 doubly and 8706 triply, 474 quadruply, 26 quin-
tuply and four hexuply charged spectra) and was obtained with an LTQ
mass spectrometer. The data were obtained from trypsin digested pro-
teins of the human protein phosphatase 2A system (Glatter et al., 2009)
and downloaded from www.peptideatlas. org/repository/publications/
Glatter2008. The Universal Proteomics Standard I (Sigma) dataset
(UPSl) contains 3368 singly charged spectra obtained from 50 trypsin-
digested proteins using an Applied Biosystems 4800 MALDI TOF/TOF
instrument (Bish et al., 2008). The data were obtained from the authors.

2.4.3 Protein sequences Computational identiﬁcation of PTMs re-
quires a collection of protein sequences, which are selected by the experi-
menter, and will be dependent on the goal of the experiment. In order to
compare various algorithms on an equal footing, we compiled uniform
collections of protein sequences that were then used with each PTM
ﬁnder program used in this work. Each spectral dataset was submitted
to the XITandem program using the IPI.Human v3.81 protein sequence
dataset (Kersey et al., 2004), and the proteins that passed to the second
round were collected in separate FASTA ﬁles (Jeong et al., 2012). For
statistical analysis, we constructed decoy datasets (Elias and Gygi, 2007)
from reversed sequences (Moore et al., 2002). The target and reverse
datasets were uniﬁed in concatenated FASTA ﬁles before use by various
programs. Supplementary Material Section S8 shows a summary of the
datasets and the corresponding parameters used.

2.4.4 Performance evaluation The performance was evaluated using
the receiver operator characteristic (ROC) curve technique (Green and
Swets, 1966; Sonego et al., 2008). Annotated spectra were ranked accord-
ing to a matching score. Spectra annotated with target peptide sequences
were then plotted as a function of the number of spectra annotated with a
decoy peptide sequence by varying a threshold over the ranking variable
range. This plot gives a monotonously increasing curve, the ROC curve.
A higher running ROC curve indicates better performance. The false
discovery rate (FDR) was calculated as the ratio of the number of the
decoy hits over the number of positive hits at a certain threshold i using
the following formula (Kall et al., 2007):

Number of decoy(t)

FDR : —.
Number of target(t)

The ROC plot can also be used to compare methods at the level of the
same FDR. For instance, FDR: 1% is a straight line in the ROC plot,
and the intersections with the ROC curves indicate the number of target
and decoy peptides found at the same level of FDR. The FDR: 100%
would coincide with the diagonal x : y line.

2.4.5 PT M ﬁnding programs ‘InsPecT’ [version 2012.01.09 (Tsur
et al., 2005)] was downloaded from the project web site (http://prote
omics.ucsd.edu/Software/Inspecthtml) and installed on Linux. Inspect
was running in ‘unrestrictive’ mode in order to ﬁnd modiﬁcations in a
de novo way. No ﬁxed or partial modiﬁcations were included as param-
eters. The parameter MaxPTMSize was set to 200 Da. The results ﬁles
were then post-processed by ComputeFDRjar script (part of Inspect)
and the ﬁeld InspectFDR was used as a ranking variable for the ROC
analysis.

MODi v3.01 (Kim et al., 2006) was run remotely at the web server
available at http://prix.hanyang.ac.kr/modi/search.jsp. The runs were per-
formed without ﬁxed modiﬁcations and by allowing all 615 variable
modiﬁcations present in the database of MODi. The modiﬁcation
range was set from —50 to 200 Da. The ROC analysis was carried out
using the ‘Probability’ ﬁeld as ranking parameter. ‘SIMS’ (Liu et al.,
2008) was obtained from the authors. SIMS was used with the

‘FULL_TRYPTIC FALSE’ parameter setting and the modiﬁcation
range was set to 0—200 Da. No ﬁxed or variable modiﬁcations were
used. ‘XITandem’ version 10-12—01 (Craig and Beavis, 2004) was down-
loaded from www.thegpm.org. For the experimental calculations only,
the source code of XITandem was slightly altered such that it uses the
complete restricted protein sequences in the second round in order to
allow FDR and ROC calculations based on target/decoy comparisons.
The LogE values taken from the XITandem output ﬁle were used for
FDR and ROC calculations.

2.4.6 Computational environment All programs (except MODi,
which was run on a web server) were executed on a Linux cluster con-
sisting of one frontend and 20 backend nodes, each equipped with 2.2
Ghz CPU and 2 GB memory. The execution time was calculated as if the
experiments were run on a single CPU computer in order to make the
execution time comparable with other methods.

3 RESULTS AND DISCUSSIONS

3.1 Comparison of tree-pruning strategies

PTMTreeSearch has three parameters (MB, SR, NPM) that con-
trol the size of the search space. In this section we investigate
their impact on accuracy and execution time. First, we ﬁxed
MB:1 and MPE:0.0, and we deﬁned six search strategies
(Table 1) for the SR and NPM, in which the size of the search
space gradually decreases from complete search (no tree pruning)
to restricted search (strict tree pruning).These search strategies
were applied to the three spectrum datasets and the identiﬁed
peptides (spectra that are assigned to a peptide sequence), the
modiﬁed peptides (peptides that carry at least one modiﬁcation)
and the modiﬁcation types (a modiﬁcation from the PTMDB,
such as carbamidomethylation of cysteine or oxidation of me-
thionine) were counted at the level of 1% FDR. Note that the
number of identiﬁed peptides includes both modiﬁed and un-
modiﬁed peptides. The exact numbers can be found in the
Supplementary Materials Table S3, Section S4. On each dataset,
the relative increase or decrease in speed, compared to the full
search (Search Strategy 1) were calculated, and averaged over the
three spectrum datasets. These are illustrated in Figure 3. As
expected, stricter pruning rules reduced the execution time
(PTMTreeSearch became 3—4-times faster) however they also
reduce the number of the identiﬁed modiﬁcation types and anno-
tated modiﬁed peptides. We have evaluated the six search stra-
tegies using MB:2, and the results are presented in the
Supplementary Materials Table S4, Figure S8 in Section S4.
These results show that larger search space can result in higher
execution times and fewer annotations at FDR: 1%. When
tree-pruning rules are applied, the execution time decreases sig-
niﬁcantly and the number of annotated peptides increases.
In order to further improve the performance we decided to
implement a two-stage-search process.

3.2 Two-stage search

In the ﬁrst stage of this strategy, strict tree pruning rules are
used to identify trusted modiﬁcation types from PTMDB. The
modiﬁcation types found in the ﬁrst stage are ﬁltered according
to the MPE criterion as described in Supplementary Materials
Sections S1 and S2. A more exhaustive search is then performed
in the second round, using this relatively small set of trusted

 

238

112 /810's112umo[pJOJXO'soi112u1101uroiq/ﬁd11q 111011 pepcolumoq

910K ‘09 isnﬁnV no 22

PTMTreeSearch

 

Table 1. Search strategy (SS) names and deﬁnitions

 

SS Name Full NPM SR2 SR4 SR6 SR8

 

NPM No Yes Yes Yes Yes Yes
SR 0 0 0.2 0.4 0.6 0.8

 

 

 

 

 

 

 

 

 

 

 

3  ----  ------  -------  -------------------- 
E _ E FullSearch _ NPM  \_\
5  ----  ------  ------- ~= -------  ---------------- 
E - - - - - - SR2 I
a) . . . . . . . . v \
'9  . . . .  . . . . . .  . . . . . . .  . . . . . .  . . . . . . . . . . . .._
< + Peptides 5 SR4 ‘ \
_ _ - : : : , \
20-.. I UniqluleMods.  ....... ... ........... _.. ....  .... 
 Modified Peptides : : : +  I
: : : : : : E E ' SR6 
0 I I I I I I I l I A
10090 80 70 60 50 40 30 20 10

Relative Time (%)

Fig. 3. The effect of tree pruning on execution times and the number of
assignments (peptides, modiﬁed peptides, modiﬁcation types). The abbre-
viations of the tree-pruning strategies are explained in the text. The data
were normalized by taking the number of assignments and the running
time values of the full database search as 100%, and then the data
obtained on the three datasets (Aurum, UPSl, HSPP2A) were averaged.
Two-stage search

modiﬁcation types in conjunction with more relaxed tree pruning
rules. In practice, we used MB: 1, with NPM, SR:0.4 and
MPE:0.99 as the parameter settings for the ﬁrst round. The
impact of the MPE on the number of the modiﬁcation types and
on the results can be found in the Supplementary Materials
(Section S2). A comparison of PTMTreeSearch with MPi
Preview v1.0 is shown in Supplementary Material Section S6.
For the second stage, we used the following parameter settings:
SR:0.3, without NPM, and MPE:0.00, with various values
(between 1 and 5) for MB. The number of allowed modiﬁcations,
MB, is a critically important parameter since it regulates the
search space size in all PTM ﬁnding algorithms. Untargeted
PTM ﬁnders used in practice frequently produce prohibitively
long running times if more than two or three modiﬁcations are
allowed, while de novo PTM ﬁnders usually allow one modiﬁca-
tion per peptide. The effect of MB on the performance of
PTMTreeSearch is shown in Figure 4. Data used for the ﬁgure
can be found in the Section S5 in the Supplementary Materials.
In these experiments, MB was varied only in the second round of
the search. The data show that allowing more modiﬁcations dra-
matically increases the running time of PTMTreeSearch.
Allowing four to seven modiﬁcations increases the running
times by 10—50 times, respectively. It is also apparent that allow-
ing more than three or four modiﬁcations does not improve the
number of correct assignments. The change in correct assign-
ments is simply due to the fact that the combinations of more
modiﬁcations can easily produce random matches which will
then impair the signiﬁcance of the hits. Therefore an optimal
settings for the two-stage search process we propose are
MB : 1, using NPM, SR:0.4, MPE: 0.99, for the ﬁrst round
and SR : 0.3, MPE : 0.0, without NMP and MB : 1, 2, 3. The

 

120

MB-2' giiiiT3=3;;;;;'
* i; 2222 113:4
:MB=1.:. e-:-.--"":" . :::::.. . .::
11o - - - - - - - - --: ~ - - - - - -  - ~ ~ - - - - --: - - - -  - - - - - ~ - 
I 222,222: I II\I\ III: I III
E SE

     
 

 _ . . . . . . .  .2

FuIIESearbh 3 3 3 3 3 '1

Assignments (%)

 

 

 

 

 

 

 

........ 
90 : :I: :::::: (One:Round): ::::::
_I3:::::: ii=r==rr=
 +peptides
- I - Modified Peptides
. _ . . .  V FullSearch (One Round)
70 i i 2 liiiii : i i Iiiiii 2
1o1 102 103

Relative Time (%)

Fig. 4. The effect of allowed modiﬁcations on the number of assignments
(number of identiﬁed peptides, modiﬁed peptides) in the two-stage
search. The general parameter settings were (MB :1, with NPM,
SR:0.4, MPE:0.99) for the ﬁrst and (SR:0.3, without NPM,
MPE:0.0) with MB: 1,. . ., 5 for the second stage, respectively. MB
was varied in round 2 only. The data were normalized by taking the
number of assignments and the running time values of the full database
search as 100%, and then the data obtained on the three datasets were
averaged

Section S5 in the Supplementary Materials presents results with
various parameter settings.

3.3 Comparison of PTMTreeSearch with other
state-of-the—art methods

The performance of the optimized two-stage PTMTreeSearch
was compared to InsPecT, MODi and SIMS using the ROC
analysis and shown in Figure 5. At any given FDR,
PTMTreeSearch identiﬁes more peptides and misses relatively
fewer than the other methods. Figure 6 shows that
PTMTreeSearch identiﬁes 73% more and misses 13% less pep-
tides on average in comparison to the other methods at
FDR: 1%. For a detailed comparison and execution times see
Supplementary Tables S12 and S13, respectively. Supplementary
Excel Table 3 presents a summary about known modiﬁcation
types found in UPSl dataset. If one PTM is allowed, the
running time of PTMTreeSearch compares quite favorably to
those of the other programs. If we allow more modiﬁcations,
PTMTreeSearch becomes slower. For these cases, we cannot
compare the accuracies since InsPecT and SIMS allow only
one modiﬁcation per peptide.

We also evaluated PTMTreeSearch on the PTM benchmark-
ing dataset of The Proteome Informatics Research Group
(iPRG) of the Association of Biomolecular Resource Facilities
(ABRF), which was designed for a programming contest in 2012
(http 2 / /www.abrf . org/index.cfm/ group. show/ProteomicsInf ormat
icsResearchGroup.53.htm#R_4). This spectrum dataset has been
spiked with 69 additional synthetic peptides, with modiﬁed phos-
phorylation, methylation, acetylation, nitro, sulfation, etc. We
compared PTMSearch with the two best anonymous contest par-
ticipants, 71755v and EK93128i, as well as Inspect, SIMs and
MODi. Supplementary Figure S12 shows that PTMTreeSearch
identiﬁes 35% more peptides than the two best submissions,
compared at FDR: 1%.

Supplementary Excel Table 1 summarizes the modiﬁcation
types found in this dataset. Supplementary Excel Table 2
shows a separate list of hits found on the 69 spiked modiﬁed

 

239

112 /810's112umo[pJOJXO'soi112u1101uioiq/ﬁd11q 111011 pepcolumoq

910K ‘09 isnﬁnV no 22

A.Kertész-Farkas et al.

 

Aurum dataset

/

# target
# target

----- -- PTMTreeSearch (MB=1)
---- - PTMTreeSearch (MB=2)
— PTMTreeSearch (MB=3)
........ “Mom

—0— SIMS

 Inspect

— FDR 1%

 

1 0 20 30 4O 50 60 70 80 2 4 6
# decoy

 

UPS1 dataset HSPP2A dataset

/

# target

- ---- -- PTMTreeSearch (MB=1)
----- PTMTreeSearch (MB=2)
— PTMTreeSearch (MB=3)
....V.... Inspect

+ MODi

+ SIMS

— FDR 1%

----- -- PTMTreeSearch (MB=1)
---- -i PTMTreeSearch (MB=2)
— PTMTreeSearch (MB=3)

/ ......... .i 

 Inspect

/ —°— SIMS
— FDR 1%

 

10 12 14 16 18 20 10 20 30 40 50 60 70 80 90 100

# decoy # decoy

Fig. 5. ROC comparisons of the PTMTreeSearch to the state-of—the-art methods. The intersection of the ROC curve and the straight line indicates the

number of target and decoy peptides annotated at 1% FDR

Amum UPS1 HSPP2A
5500 9000
5000 _ 1400 Insped
4500
4000
3500
3000
2500
2000
1500
1000
500

 

 

1%

8000'

- 1200 ' 7000.

_ 1000 - 6000-

 _  '

4000 '
600 -

3000 -

 

400 -
2000 -

' 1000-

Number of annotated peptides at FDR

 

 

 

 

 

 

     

F'g. 6. Pair-wise comparison of results obtained with PTMTreeSearch to
the state-of—the-art methods. The grey bar denotes the number of the spec-
tra annotated with other program (indicated on the top of the bar). The
white bar denotes the number of the spectrum annotated with both the
PTMTreeSearch and the other program. The black bar denotes the
number of the spectrum annotated only with PTMTreeSearch program

_

peptides. In this comparison, PTMTreeSearch was also one of
the best performers, although this, depended on the number of
modiﬁcations allowed (See Supplementary Materials Section S8
for further details).

We have compared the current version of the PTMTreeSearch
to its previous version (Kertesz-Farkas et al., 2011). In the earlier
version, the full search space was traversed using a greedy algo-
rithm allowing for backtracking with a limited size priority
double-ended queue. On average, on our datasets, the greedy
approach identiﬁes 36% more modiﬁcation types, but 5% fewer
peptides, 18% fewer modiﬁed peptides and takes three and half
times longer than the current version of PTMTreeSearch. Data
are shown in the Section S7 in Supplementary Materials. The time
increase is due to the priority queue operations, which are loga-
rithmic in time. The current version of PTMTreeSearch using tree-
pruning rules and a two-round search strategy provided more
assignments in shorter running times.

4 CONCLUSIONS

In this article, we have presented a novel algorithm called
PTMTreeSearch for identiﬁcation of PTM in tandem mass spec-
trometry data using a large collection of known amino acid
modiﬁcations. The method employs a preﬁx tree for search
space representation where branches represent PTMs and tree

pruning techniques are used to eliminate unlikely solutions and
to reduce the execution time. Moreover, it uses a two-stage
search, where a small set of trusted modiﬁcation types are iden-
tiﬁed in the ﬁrst round, and this restricted set of modiﬁcation
types is used in the second round to identify PTMs in an
exhaustive manner.

We believe PTMTreeSearch and the state-of-the-art methods
(such as Inspect, SIMS, MODi) are able to ﬁnd the PTMs in a
complex biological sample. The question remains whether modi-
ﬁcations are identiﬁed with high conﬁdence or if the modiﬁed
peptide annotation vanishes among the decoy matches. In our
opinion the computational tree provides a natural way to repre-
sent the search space for ﬁnding modiﬁcations and avoiding
redundant calculations. The tree pruning techniques and the
two-stage search provide more accurate modiﬁcation identiﬁca-
tion at a reasonable time cost, and identiﬁes more peptides than
current state-of-the art PTM ﬁnder algorithms at the same FDR
level.

We implemented PTMTreeSearch as a plug-in of the
XITandem framework, and hence PTMTreeSearch is fully com-
patible with all data and output formats of XITandem. In
addition, PTMTreeSearch ﬁxes one drawback of XITandem -
namely, that XITandem cannot detect different modiﬁcations
on the same type of amino acid (not on the same side-chain).
For example, with PTMTreeSearch it becomes possible to search
for multiple modiﬁcations of cysteine without multiple searches.
Simply put, if the corresponding modiﬁcations are part of the
user-deﬁned PTMDB, PTMTreeSearch will consider them in
various combinations on the peptide sequences at the same
time. Finally, we note that PTMTreeSearch interprets peak
shifts using known PTMs, so it cannot identify PTMs that nei-
ther induce peak shifts nor alter the type of the product ions.

ACKNOWLEDGEMENTS

The authors thank Drs. Yoonsung J oh, Eunok Paek and the
MODi team for their help with using MODi program as well
as to Dr Max Bingham (freelance, Rotterdam, The Netherlands)
for editorial assistance prior to submission.

Funding: Arturo F alaschi Fellowship program (AKF) (to the
work at ICGEB, Trieste); Informatics PhD Program of the
University of Szeged, Hungary (BR) and Hungarian National
Research Foundation OTKA [grant number K.84335 BIOIN]

 

240

112 /810's112umo[pJOJXO'soi112u1101uioiq/ﬁd11q 111011 pepcolumoq

910K ‘09 isnﬁnV no 22

PTMTreeSearch

 

(to the work at BRC Szeged); grants TET_10-1-2011-0058,
TAMOP-4.2.1.B_11/2/KMR-2011-0002 and TAMOP-4.2.2/B-
10/1-2010-0014 (to the work at Pazmany University, Budapest).

Conflict of Interest: none declared.

REFERENCES

Aebersold,R. and Mann,M. (2003) Mass spectrometry-based proteomics. Nature,
422, 198—207.

Ahrne,E. et al. (2010) Unrestricted identiﬁcation of modiﬁed proteins using
MS/MS. Proteomics, 10, 671—686.

Baliban,R.C. et al. (2010) A novel approach for untargeted post-translational modi-
ﬁcation identiﬁcation using integer linear optimization and tandem mass
spectrometry. Mol Cell Proteom., 9, 764—779.

Becker,C.H. and Bem,M. (2011) Recent developments in quantitative proteomics.
Mutation Res., 722, 171—182.

Benjamini,Y. and Hochberg,Y. (1995) Controlling the false discovery rate: a prac-
tical and powerful approach to multiple testing. J. Royal Stat. Soc. Series B
(Methodological), 57, 289—300.

Bish,R.A. et al. (2008) Conjugation of complex polyubiquitin chains to WRNIPI.
J. Proteome Res., 7, 3481—3489.

Bjornson,R.D. et al. (2008) XIITandem, an improved method for running Xltandem
in parallel on collections of commodity computers. J. Proteome Res., 7,
293—299.

Chen,Y. et al. (2009) PTMap—a sequence alignment software for unrestricted,
accurate, and full-spectrum identiﬁcation of post-translational modiﬁcation
sites. Proc. Natl Acad. Sci. USA, 106, 761—766.

Chiyong,K. et al. (2010) Unrestricted identiﬁcation of post translational modiﬁca-
tions from tandem mass spectra datasets. In: Proceedings of the International
Conference on Bioinformatics and Biomedical Technology (ICBBT), 2010,
Sanya, China. pp. 244—247.

Chung,C. et al. (2011) Computational refinement of post-translational modiﬁca-
tions predicted from tandem mass spectrometry. Bioinformatics (Oxford,
England), 27, 797—806.

Craig,R. and Beavis,R.C. (2003) A method for reducing the time required to match
protein sequences with tandem mass spectra. Rapid Commun. Mass Spectrom.,
17, 2310—2316.

Craig,R. and Beavis,R.C. (2004) TANDEM: matching proteins with tandem mass
spectra. Bioinformatics (Oxford, England), 20, 1466—1467.

Craig,R. et al. (2004) Open source system for analyzing, validating, and storing
protein identiﬁcation data. J. Proteome Res., 3, 1234—1242.

Creasy,D.M. and Cottrell,J.S. (2002) Error tolerant searching of uninterpreted
tandem mass spectrometry data. Proteomics, 2, 1426—1434.

Deutsch,E.W. et al. (2008) Data analysis and bioinformatics tools for tandem mass
spectrometry in proteomics. Physiol. Genom., 33, 18—25.

Elias,J.E. and Gygi,S.P. (2007) Target-decoy search strategy for increased conﬁ-
dence in large-scale protein identiﬁcations by mass spectrometry. Nat.
Methods, 4, 207—214.

Falkner,J.A. et al. (2007) Validated MALDI-TOF/TOF mass spectra for protein
standards. J. Am. Soc. Mass Spectrom., 18, 850—855.

Fu,Y. et al. (2011) DeltAMT: a statistical algorithm for fast detection of protein
modiﬁcations from LC-MS/MS data. Mol. Cell Proteom., 10, M110 000455.

Garavelli,J.S. (2003) The RESID database of protein modiﬁcations: 2003 develop-
ments. Nucleic Acids Res., 31, 499—501.

Geer,L.Y. et al. (2004) Open mass spectrometry search algorithm. J. Proteome Res.,
3, 958—964.

Glatter,T. et al. (2009) An integrated workﬂow for charting the human interaction
proteome: insights into the PP2A system. Mol. Syst. Biol., 5, 237.

Green,D.M. and Swets,J.A. (1966) Signal Detection Theory and Psychophysics.
Wiley, New York.

Hansen,B.T. et al. (2005) P-Mod: an algorithm and software to map modiﬁcations
to peptide sequences using tandem MS data. J. Proteome Res., 4, 358—368.
Hart,P.E., Nilsson,N.J. and Raphael,B. (1968) A formal basis for the heuristic
determination of minimum cost paths. Systems Science and Cybernetics, 4,

100—107.

Havilio,M. and Wool,A. (2007) Large-scale unrestricted identiﬁcation of post-
translation modiﬁcations using tandem mass spectrometry. Anal. Chem, 79,
1362—1368.

Jacob,R.J. (2010) Bioinformatics for LC-MS/MS-based proteomics. Methods Mol.
Biol, 658, 61—91.

Jeong,K. et al. (2012) False discovery rates in spectral identiﬁcation. BM C
Bioinform, 13 (Suppl 16), S2.

J ohnson,R.S. et al. (2005) Informatics for protein identiﬁcation by mass spectrom-
etry. Methods, 35, 223—236.

Kall,L. et al. (2007) Assigning signiﬁcance to peptides identiﬁed by tandem mass
spectrometry using decoy databases. J. Proteome Res., 7, 29—34.

Kersey,P.J. et al. (2004) The International Protein Index: an integrated database for
proteomics experiments. Proteomics, 4, 1985—1988.

Kertesz-Farkas,A. et al. (2011) PTMSearch: a greedy tree traversal algorithm for ﬁnd-
ing protein post-translational modiﬁcations in tandem mass spectra. In: Proceedings
of the 2011 European conference on Machine Learning and Knowledge Discovery in
Databases - Volume Part II. Springer-Verlag, Athens, Greece.

Kertesz-Farkas,A. et al. (2012) Database searching in mass spectrometry based
proteomics. Curr. Bioinform, 7, 221—230.

Kertesz,V. et al. (2009) PTMSearchPlus: software tool for automated protein iden-
tiﬁcation and post-translational modiﬁcation characterization by integrating
accurate intact protein mass and bottom-up mass spectrometric data searches.
Anal. Chem, 81, 8387—8395.

Kim,S. et al. (2006) MODi: a powerful and convenient web server for identifying
multiple post-translational peptide modiﬁcations from tandem mass spectra.
Nucleic Acids Res., 34, W258—W263.

Liu,J. et al. (2008) Sequential interval motif search: unrestricted database surveys of
global MS/MS data sets for detection of putative post-translational modifica-
tions. Anal. Chem, 80, 7846—7854.

MacCoss,M.J. (2005) Computational analysis of shotgun proteomics data. Curr.
Opin. Chem. Biol., 9, 88—94.

MacCoss,M.J. et al. (2002) Shotgun identiﬁcation of protein modiﬁcations from
protein complexes and lens tissue. Proc. Natl Acad. Sci. USA, 99, 7900—7905.

MacLean,B., Eng,J.K., Beavis,R.C. and McIntosh,M. (2006) General framework
for developing and evaluating database scoring algorithms using the TANDEM
search engine. Bioinformatics, 22, 2830—2832.

McDonald,W.H. et al. (2004) MSl, MS2, and SQT-three uniﬁed, compact, and
easily parsed ﬁle formats for the storage of shotgun proteomic spectra and
identiﬁcations. Rapid Commun. Mass Spectrom., 18, 2162—2168.

Menschaert,G. et al. (2010) Peptidomics coming of age: a review of contributions
from a bioinformatics angle. J. Proteome Res., 9, 2051—2061.

Moore,R.E. et al. (2002) Qscore: an algorithm for evaluating SEQUEST database
search results. J. Am. Soc. Mass Spectrom., 13, 378—386.

Nesvizhskii,A.I. (2010) A survey of computational methods and error rate estima-
tion procedures for peptide and protein identiﬁcation in shotgun proteomics.
J. Proteom., 73, 2092—2123.

Nesvizhskii,A.I. and Aebersold,R. (2004) Analysis, statistical validation and dissem-
ination of large-scale proteomics datasets generated by tandem MS. Drug
Discov. Today, 9, 173—181.

Neumann,S. and Bocker,S. (2010) Computational mass spectrometry for metabo-
lomics: identiﬁcation of metabolites and small molecules. Anal. Bioanalyt.
Chem, 398, 2779—2788.

Noble,W.S. and MacCoss,M.J. (2012) Computational and statistical analysis of
protein mass spectrometry data. PLoS Comput Biol., 8, e1002296.

Searle,B.C. et al. (2004) High-throughput identiﬁcation of proteins and unantici-
pated sequence modiﬁcations using a mass-based alignment algorithm for MS/
MS de novo sequencing results. Anal. Chem, 76, 2220—2230.

Sonego,P. et al. (2008) ROC analysis: applications to the classiﬁcation of biological
sequences and 3D structures. Brief. Bioinform, 9, 198—209.

Tanner,S. et al. (2008) Accurate annotation of peptide modiﬁcations through
unrestrictive database search. J. Proteome Res., 7, 170—181.

Tharakan,R. et al. (2010) Data maximization by multipass analysis of protein mass
spectra. Proteomics, 10, 1160—1171.

Tsur,D. et al. (2005) Identiﬁcation of post-translational modiﬁcations via blind
search of mass-spectra. In: Proceedings/IEEE Computational Systems
Bioinformatics Conference, CSB, San Francisco, CA, USA. pp. 157—166.

Webb-Robertson,B.J. and Cannon,W.R. (2007) Current trends in computational
inference from mass spectrometry-based proteomics. Brief. Bioinform, 8,
304—317.

Yates,J.R. 3rd et al. (1995) Method to correlate tandem mass spectra of modified
peptides to amino acid sequences in the protein database. Anal. Chem, 67,
1426—1436.

Ye,D. et al. (2010) Open MS/MS spectral library search to identify unanticipated
post-translational modiﬁcations and increase spectral identiﬁcation rate.
Bioinformatics (Oxford, England), 26, i399—i406.

 

241

112 /810's112umo[pJOJXO'sot112u1101utotq/ﬁd11q 111011 pepeolumoq

910K ‘09 isnﬁnV no 22

