Bioinformatics Advance Access published June 6, 2016

Bioinformatics, 2016, 1—8

doi: l0.1093/bioinformatics/btw302

Advance Access Publication Date: 13 May 2016
Original Paper

 

Genome analysis

SoFIA: a data integration framework for
annotating high-throughput datasets

Liam Harold Childs1'*, Soulafa Mamloukz, Jorgen Brandt‘, Christine
Sers2 and Ulf Leser1

1Wissenmanagement in der Bioinformatik, Humboldt-Universitat zu Berlin, Berlin, Germany and 2DKTK Deutsches
Konsortium Fiir Translationale Krebsforschung, Partner site Charite Berlin, Berlin, Germany

*To whom correspondence should be addressed.
Associate Editor: Alfonso Valencia

Received on October 29, 2015; revised on April 13, 2016; accepted on May 6,2016

Abstract

Motivation: Integrating heterogeneous datasets from several sources is a common bioinformatics
task that often requires implementing a complex workflow intermixing database access, data filter—
ing, format conversions, identifier mapping, among further diverse operations. Data integration is es—
pecially important when annotating next generation sequencing data, where a multitude of diverse
tools and heterogeneous databases can be used to provide a large variety of annotation for genomic
locations, such a single nucleotide variants or genes. Each tool and data source is potentially useful
for a given project and often more than one are used in parallel for the same purpose. However, soft—
ware that always produces all available data is difficult to maintain and quickly leads to an excess of
data, creating an information overload rather than the desired goal—oriented and integrated result.
Results: We present SoFlA, a framework for workflow—driven data integration with a focus on gen—
omic annotation. SoFIA conceptualizes workflow templates as comprehensive workflows that
cover as many data integration operations as possible in a given domain. However, these tem—
plates are not intended to be executed as a whole; instead, when given an integration task consist—
ing of a set of input data and a set of desired output data, SoFIA derives a minimal workflow that
completes the task. These workflows are typically fast and create exactly the information a user
wants without requiring them to do any implementation work. Using a comprehensive genome an—
notation template, we highlight the flexibility, extensibility and power of the framework using real—
Iife case studies.

Availability and Implementation: https://github.com/chiIdsish/sofia/releases/Iatest under the GNU
General Public License

Contact: Iiam.childs@hu—berlin.de

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

 

Biological entity annotation is the process of retrieving the broader
biological context around a biological entity from available data
sources. It is a crucial step in essentially all current biological ana-
lyses based on high—throughput experiments (Ng et 61]., 2010; Wang
et 61]., 2010). Only by considering the biological context Within
which an experiment took place can the results be properly

interpreted and a pertinent conclusion reached. As increasingly
more knowledge about biological systems is discovered and stored
in structured databases, the effort required to integrate all relevant
information in projects producing comprehensive experimental
datasets becomes more and more involved. Providing investigators
all available information can lead to information overload, as such
‘complete’ annotation sets contain much more data than is relevant

©The Author 2016. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journalspermissions@oup.com l

91% ‘09 1sn3nv uo sepﬁuv s01 ‘BIUJOJIIBD aIo Amie/xtqu 112 /§.IO'S[BU.IHO[p.IOJXO'SODBIHJOJUIOIQ/ﬁdllq 11101; prBOIUAAOG

L.H.Childs et al.

 

to the investigated hypothesis. There is a lack of fast and intuitive
methods that (i) allow researchers to specify exactly the type of in—
formation that they think is best suited to their investigations and
(ii) produce this information quickly and fully automatically.

Data integration for the life sciences is by no means a new topic
(Blankenberg et al., 2010; Cingolani et al., 2012; Huang et al., 2009a,b;
McLaren et al., 2010, McCarthy et al., 2014; Wang et al., 2010)

Current approaches can be broadly categorized into three
classes. So—called data warehouses are relational databases that inte—
grate a selected set of data into a common schema (Kasprzyk, 2011;
Trissl et al., 2005). Accessing the data in a data warehouse requires
either the ability to program complex queries (usually in SQL), or
the usage of specific point—and—click user interfaces encapsulating
such queries. The latter solution is the only option when program-
ming expertise is lacking, but is inﬂexible and involves costly inter—
face development. A second class of data integration systems are
based on linked open data and Semantic Web standards (Livingston
et al., 2015; Machado et al., 2013). These offer more ﬂexibility in
terms of data modelling, but require efforts comparable to data
warehousing for building semantically integrated datasets
(Bechhofer et al., 2013). Both approaches perform data integration
prior to any concrete analysis, which implies that they usually try to
be as comprehensive as possible to cover unforeseen applications.
Creating or updating this large integrated dataset is highly complex
and time consuming, increasing the danger of using outdated data
(Jorg and Dessloch, 2008; Lee et al., 2006).

More recently, a third class of systems has emerged that are
based on flexible integration workﬂows (Giardine et al., 2005;
McLaren et al., 2010; Rios et al., 2009; Wolstencroft et al., 2013).
In these approaches, data integration is performed by starting a
pipeline of steps that are defined in advance by a workflow devel—
oper. Results of these workflows are typically directly consumed by
the user or by other tools and not meant to be materialized in a per-
sistent, maintained manner. Accordingly, every analysis uses the
most recent data available. To be fast, these workﬂows are
specialized; a drawback when no available workﬂow exactly meets
the user’s requirements. Either a new workﬂow has to be developed,
or multiple workﬂows with potentially overlapping subtasks have to
be executed, yielding inflexibility and unnecessary computation.
What is lacking is a data integration method that, based on a for—
malized understanding of an application domain, is able to automat—
ically determine the minimal complete sequence of steps required to
fulfil a given user request starting from a given set of input data.

SoFIA, Software for Flexible Integration of Annotation, aims at
filling this gap. Using SoFIA, workﬂow designers specify compre—
hensive workﬂow templates covering as much of a given application
domain as possible, much like defining the process used to populate
a data warehouse. However, these templates are not intended to be
executed in their entirety. Instead, they should be understood as a
formalized knowledge base of processes transforming various types
of input data into various types of annotations using background
knowledge. When given a set of input data (e.g. results from wet lab
experimentation) and a desired output (e.g. gene names related to
the experimental data in a specific way), SoFIA uses the template to
infer a minimal set of actions necessary to produce the output from
the inputs. In case there is a unique way for doing so, the process
runs fully automatically. We see that the SoFIA approach has the
following important advantages:

a. It is fast, as only the necessary steps are executed;
b. It supports reproducibility, as users can choose which data ver—
sions will be integrated;

c. From a user’s perspective, it is very simple to use, as only inputs
and outputs have to be speciﬁed;

d. It relieves from the need to build and update a large, comprehen—
sive database for unforeseen applications;

e. It clearly separates data provisioning from data transformation/
annotation steps, which yields a clear workﬂow design.

We developed SoFIA specifically for performing multiple types of
analysis in next generation sequencing (NGS), such as variant anno—
tation, RNA—seq analysis, ChIP—seq analysis, or epigenetic analysis.
Common aspects of these experiments are that they (i) map experi-
mental read—outs to parts of a genomic sequence, (ii) require specific
information on these genome parts to produce biologically meaning—
ful results and (iii) multiple tools and databases exist for each step in
such a pipeline. The design of SoFIA directly targets these require—
ments. In this paper, we present our framework for data integration,
describe a template that is readily provided with the system, and
demonstrate the flexibility and power of SoFIA by case studies in
variant annotation for a breast cancer dataset, comparison of the
impact of using different gene models, and an analysis of translation
efficiencies using E.coli protein expression data.

2 Methods
2.1 Data model

SoFIA builds on a semi—structured entity model, as is common in
many biological databases (Lacroix et al., 2003). The most funda—
mental element is the entity type; a general term that can refer to
biological concepts like genes, sequences or pathways, or even to
single values like expression measurements or variant frequencies.
Entity types may be nested using both a ‘has—a’ hierarchy that allows
automatic entity extraction (e.g. a variant ‘has a’ alternate allele,
and the presence of a variant implies the presence of an alternate al-
lele), and an ‘is—a’ hierarchy that allows more specialized entities to
be used in place of their more general predecessors (e.g. a variant ‘is
a’ genomic position, and can be treated as a genomic position). An
example can be seen in Figure 1 (Note that our model is very close
to the popular JSON format.). Any concrete entity or value is an in-
stance of exactly one entity type, which determines its schema.

To keep the framework simple, we do not enforce any consist—
ency constraints; for instance, if a given gene (specified by an identi—
fier) appears twice in different contexts, we do not ensure that these
two instances refer to the same, single object or that the attribute
values associated to the two instances are identical. Instead, we
allow special attributes (specified as key—value pairs) to be assigned
to entities for tracking meta—information on their origin and the way
they were created. This allows workﬂow resolution to ‘react’ to spe—
cific attributes and adjust the resolved workﬂow accordingly (ex—
ample in Section 2.4 below).

Entities may be derived from external sources, such as a data—
base, or are an intermediate product of an integration workflow.
Thus, in principle, entities could be accessed remotely, for instance
through a web service. Our implementation, SoFIA, currently as—
sumes all sources are locally available as downloaded database files.
This requires a certain amount of storage space, but improves access
speeds and control over versioning. We keep these files up—to—date
with CRON jobs.

2.2 Data integration processes

We model all types of information as entity types, including numeric
attributes such as start or stop positions of a genomic interval.
SoFIA interprets entity integration as the process of finding

91% ‘09 1sn3nv uo sepﬁuv s01 ‘BIUJOJIIBD aIo AllSJQAlUn 112 /§.IO'S[BU.IHO[p.IOJXO'SODBIHJOJUIOIQ/ﬁdllq 11101; pepeommoq

SoFIA

 

/
has g/ has a W produced by
H” i

lchromasome_id| | positionl | variant |

.\\
as a \has a
\I.

rsference_allals

B GelSequenDeElyMDdel


l reduced by
GotGeneModelByPosition GetGeneMudelEIyName

Fig. 1. Data model. SoFIA uses a bipartite graph to model the process of data
integration where the two partitions are used to represent the entities (rect-
angles) and steps (ovals). (A) The relationships among entities is modelled
using ‘is-a' and ‘has-a' relationships permitting a significant degree of expres-
sion with few concise terms. These relationships specify the minimum fields
needed for a workflow to process an entity. Thus, even if a variant can be
described by more data, only the chromosome id, position, reference allele
and alternate allele will be used in the example definition. (B) Entities are
both produced and consumed by steps, referred to as the preceding and suc-
ceeding steps. Only one preceding step needs to be executed for an entity to
be considered available, upon which it is available to all succeeding steps. (C)
Steps both consume and produce entities. All preceding entities must be
available for a step to be executed, upon which all succeeding entities are
considered available

 

 

 

 

alternata_allals |genumic_p-Dsi'tion

 

Fene_model_sat(

 

 

 

 

 

 

 

  
     

associations with other entities, possibly through a chain of inter-
mediates. Such chains are defined on entity types, i.e. every step in
such a chain associates one set of entities with another. For example,
if the pathway affected by a mutation is sought, one can model the
chain of associations as (i) a step associating the genomic position of
mutations to one or more genes and (ii) a step associating genes to
one or more pathways.

Such processes can be naturally modelled as directed acyclic bi—
partite graphs, where the nodes of one partition are the entity types
(entity nodes) and the nodes of the other partition are the steps asso—
ciating entity types with each other (step nodes). Step nodes are con—
nected to the entity nodes they produce and the entity nodes they
consume; in turn, entity nodes are connected to the step nodes that
can produce them and those that can consume them (Fig. 2).
Furthermore, an entity node may be a source (the input data) or a
sink (a result not further worked upon). Within this general model,
SoFIA enforces the following constraints defining a clear and simple
execution semantic: (i) Step nodes have at least one incoming edge
from entity nodes, its predecessors. For a step node to be executed,
all predecessors must be available. (ii) Step nodes have one or more
outgoing edges to entity nodes, its successors. If a step node is exe—
cuted all successors are available upon completion. (iii) All entity
nodes except source nodes have at least one incoming edge from
step nodes. Unlike step nodes, the execution of only one predecessor
is necessary to ensure the availability of an entity; if multiple preced-
ing step nodes exist, the entity node is called ambiguous and any of
these predecessors may be executed to produce the entity type.
Otherwise it is called unique. (iv) All entity nodes except sink nodes
have one or more outgoing edges to step nodes.

Attributes are optional and can be defined on any entity includ—
ing the input and output entities of intermediate steps. This can have
the effect of restricting connections between steps or to allow the
workﬂow resolution algorithm to react to properties resulting from

“a...
GetGeneSequenceByNarne

um
I
F has a
Qaneﬁna ma ....... 

GetSequenceByModel
GetGeneModelBy Position

is a . . .
-----T---(geanIGJ:l05lllﬂn

     

 

 

gs muse-nuance,th

 

 

 

ganegmodel

 

‘chmmosomeﬁseouencewsat

 

 

 

        

| variant
|

gene_mudel_set

 

 

 

 

 

Fig. 2. Example template. This is example template can be used to obtain a
gene sequence from a variant. Two possible solutions are possible, shown as
solid and dashed paths, depending on the entities provided. A gene sequence
set, chromosome sequence set or gene model set can be provided by the
user. The target entity is the variant. The solid solution is only possible if a
gene sequence set is provided and the dashed solution is only possible if
both a gene model set and a chromosome sequence set is provided. Any
other combination will lead to ambiguous or incomplete solutions.
Ambiguous solutions can be resolved by specifying which entities the gene
sequence must be derived from; either a gene sequence set or either of the
gene model set or a chromosome sequence set

executing particular steps. For example, some variant callers may
only be compatible with certain read aligners, or a workflow may
need to include extra steps if a particular attribute is not defined.

Every such bipartite graph, together with a model of the entity
types it contains, is called a workflow template. An example work-
ﬂow is shown in Figure 2.

2.3 Workflow resolution

Templates are intended to be comprehensive for a given application
domain meaning that they should be designed by an expert with the
goal to fulfil as many user needs as possible. Having a large template
carries no disadvantages as it is not executed as a whole; instead, it
is used as a blueprint to derive a concrete workflow execution plan
for a given user—specified task. This process is called workﬂow reso—
lution. Resolving a workﬂow in SoFIA is simple: a user defines an
annotation task by indicating which entity types are available
(referred to as the provided entities and requesting the types of enti—
ties they wish to derive (the requested entities).

With this information, SoFIA infers a minimal series of steps that
produces all requested entities from the provided entities. To this
end, the template is traversed by attempting to find a resolution for
each requested entity in turn. Entity nodes are considered resolved if
any of the preceding step nodes can be resolved, possibly leading to
multiple solutions if multiple step nodes can be resolved. Step nodes
are considered resolved if all of the preceding entity nodes can be
resolved and all combinations of the solutions from the preceding
entity nodes are evaluated. The potentially very large number of pos—
sible solutions is limited by applying a filtering heuristic at each
node that permits only the solutions that require the least number of
extra provided entities. The solutions for each requested entity are
merged and the smallest workﬂow is used as the resolved workﬂow
(RW); a minimal workﬂow computing all request output data. If
there are multiple, equally small RWs with equally few extra enti—
ties, the user is prompted for additional information.

Using the template in Figure 2 as an example, consider finding
the gene sequence for the gene affected by a variant, a common,

91% ‘09 1sn3nv uo sepﬁuv s01 ‘121u10111123 10 AllSJQATUn 112 /§.IO'S[BLLIHO[p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 11101; pep1201umoq

L.H.Childs et al.

 

multi—step annotation task. There are two possibilities starting after
a gene model is found using the variant’s position. (i) Assemble the
gene sequence using the exon information from the gene model and
a chromosome sequence set. (ii) Get the gene sequence from a gene
sequence set, using the gene model’s gene name. Assuming the user
provides a set of variants for annotation and a gene model set, and
specifies the gene sequence as the requested entity, a resolution algo—
rithm will first attempt to resolve the gene sequence entity node.
This will trigger a recursive descent through the graph until all nodes
are visited. The traversal will fork at the gene sequence entity node
to explore the two steps that can produce it. In the left branch, the
traversal will find that it requires a gene sequence set. If provided by
the user, along with a gene model set this will yield a valid solution.
Otherwise the absence is noted and traversal of this branch is
aborted. A similar scenario occurs in the right branch yielding a
valid solution if the user provided a chromosome sequence set.

2.4 Attribute resolution

During workflow resolution, the resolution algorithm implemented
in SoFIA can react to entity attributes and adjust the RW accord—
ingly. This is used to trigger implicit computational steps. One ex—
ample of such steps is the ability to perform automatic identifier
conversion working as follows: During resolution, the attributes of
the incoming entities are compared. If the entities have matching at—
tributes but different attribute values, a conversion step can be in—
serted that uses a lookup table to convert one of the values to match
the other. We currently produce such tables using BioMart
(Kasprzyk, 2011) and CRONOS (Waegele et al., 2009). Similarly,
attributes can be used to define which provided entities a requested
entity must be derived from.

2.5 Workflow execution

SoFIA executes a RW starting from the source nodes. First, step
nodes depending only on source nodes are executed producing new
entity sets thus enabling new step nodes to be executed and so on.
This process continues until all desired output nodes have been
computed.

2.6 Implementation and extensibility

The framework was implemented as a Python program. The pro—
gram is divided into three main parts, template definition, workﬂow
resolution and workflow execution. Templates are defined by writ—
ing Python classes that represent steps in a workflow. In each class,
the incoming and outgoing entities are declared and the calculations
needed to perform the step are defined via calls to external tools or
coded within the step itself. Steps are connected to each other by
connecting outgoing entities to incoming entities where the entity
types match. To extend an existing template, a new step is written
with incoming and outgoing entity types compatible to the existing
template.

When implementing SoFIA, we followed a ‘one input — one out—
put’ strategy to aid interpretability, enable data—dependent paralle—
lization and reduce memory footprint. Execution of SoFIA requires
the user to designate one source as the ‘target’. The requested enti—
ties computed are then output in a tabular format with one column
per requested entity and one row per entity in the target source.
Optionally, users can specify their own output format enabling the
production of fasta files or vcf files. Given this rule, if the user desig—
nates a vcf file as the target, then one line of output is produced for
each line in the target containing a variant in a direct one—to—one re—
lationship leaving little—to—no room for confusion.

To give users greater control over versioning and improve access
speeds all data used by SoFIA must be local either as files database
downloads or provided by the user (experimental results and param—
eters). Further documentation on using and extending the frame-
work is available in the supplementary and on the project home
page: https://github.com/childsish/sofia.

3 Results

We developed SoFIA, a framework that models biological entity an-
notation as an integration workﬂow that associates provided input
data from high—throughput experiments to requested annotations
with little effort on the part of the user. SoFIA is freely available and
comes with a comprehensive template for annotating genomic data
which we demonstrate here with three real—life use cases: annotating
sequence variants, comparing gene model consequences and calcu—
lating sequence features that purportedly estimate translational
efficiency.

3.1 Genomics workflow template

We created a comprehensive workflow template that covers many
aspects of genomics data integration including (i) interval manipula-
tion and querying, (ii) sequence extraction, transcription and trans—
lation, (iii) sequence feature calculation and (iv) sequence variant
manipulation and categorization (Supplementary Material 1). The
template makes use of tabix (Li, 2011) from htslib (Li et al., 2009)
and a custom library to index source files dramatically improving
annotation speed. Basic caching has also been implemented for sour—
ces, also improving speed when several consecutive queries return
the same result.

3.2 Sequence variant annotation

An area where entity annotation is of utmost importance is large—
scale genomic sequencing, which is typically performed to derive
genomic variations whose interpretation critically depends on
proper annotations (Cingolani et al., 2012; McLaren et al., 2010;
Wang et al., 2010). Our genomics template follows the guidelines
set out by the Human Variation Nomenclature Society for variant
descriptions (Den Dunnen and Antonarakis, 2000) wherever pos—
sible and applies the sequence ontology to describe variant effects
(Eilbeck et al., 2005).

We showcase the capability and ﬂexibility of our framework by
annotating breast cancer (BRCA) variants for three theoretical labs
with different requirements. One lab is interested finding which vari-
ants could be natural variants from the 1000 genomes project (1000
Genomes Project Consortium et al., 2015) and dbSNP (Sherry et al.,
2001), another is interested in finding which variants exist in cancer
variant databases such as COSMIC (Forbes et al., 2015 ) and TCGA
(Stratton et al., 2009) and the final lab is interested in finding which
drugs from DrugBank (Law et al., 2014) or Genomics of Drug
Sensitivity in Cancer (Yang et al., 2013) could be used to target af—
fected genes. Downloading and converting BRCA into variant call
format resulted in 43 278 unique sequence variant positions
(Supplementary Data 3). SoFIA was provided the BRCA dataset,
Gencode gene models, the hg19 reference genome, PROVEAN esti-
mates of variant impact (Choi et al., 2012) and KEGG pathways
(Ogata et al., 1999), and was requested to produce gene names,
amino acid variants, variant types, gene annotations, annotated
pathways, homopolymer regions, overlaps with genomic regions of
interest and variant impact on protein function for all three theoret—
ical labs. In addition, the extra entities and resources required for

91% ‘09 1sn3nv uo sejeﬁuv s01 ‘BTUJOJTIBD 10 AllSJQATUn 112 /§.IO'S[BU.IHO[p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 11101; pep1201umoq

SoFIA

 

Table 1. Run-times for each SoFIA request. SoFIA demonstrates rapid flexibility when handling different requests

 

Annotation purpose Extra data sources

Workﬂow resolution time

Workﬂow execution time Output size

 

Natural variants 1000 genomes dbSNP 2.1 5
Cancer mutants COSMIC TCGA 3.1 5
Drug response DrugBank GDSC 2.3 s

14min5s 3.4Mb
9min 56s 3.9Mb
9min 28$ 3.5Mb

 

Three requests for different types of data were tested and the workﬂow resolution and executions times were measured. In each encounter with a new data and

request, SoFIA can quickly resolve a suitable workﬂow within a matter of seconds and annotate the entire dataset in under 15 min. In contrast, the creation of a

new workﬂow or adaptation of an existing workﬂow by hand is likely to take signiﬁcantly longer.

each labs individual needs were provided individually for each lab’s
request. Each run took approximately 15 min on a 2.6 GHz Pentium
i5 CPU, without parallelization. The command line used to run
SoFIA and a summary of all annotations produced by the resolved
workﬂows are provided in Supplementary Material 2 and
Supplementary Data 4—6, respectively.

This example shows that SoFIA exhibits remarkably quick
adaptability to new data and requests. In each case, a sensible work—
ﬂow is resolved in a matter of seconds saving the time required to
create a new workﬂow or adapt an existing one by hand. In each
case several non—trivial steps are automatically resolved including
matching variants from multiple variant file formats (.vcf and .maf),
interval queries and several identifier conversion steps, Overall,
SoFIA greatly simplifies many otherwise tedious tasks (Table 1).

3.3 Gene model comparison

The flexible nature of the framework makes it easy to compare simi—
lar information from multiple sources. Choosing the most suitable
gene models is a very real and concrete problem many bioinformati-
cians face when analysing NGS datasets (McCarthy et al., 2014).
We used our genomics template to compare the impact of gene mod—
els from different sources on variant annotation. SoFIA was pro—
vided RefSeq gene models from NCBI (Pruitt et al., 2014) and
Gencode gene models (Harrow et al., 2006) from the Encode project
along with the BRCA dataset and the hg19 human genome sequence
from the previous example, and was requested to output all gene
identifiers as RefSeq identifiers to facilitate a direct comparison
(Supplementary Material 2). The resolved workflow associated
BRCA variants with gene models from RefSeq and Gencode, re—
spectively, found amino acid variants for both sources as well as the
variant effect. SoFIA seamlessly integrated the two different file for-
mats provided by RefSeq and Gencode to provide the requested an—
notations (Supplementary Data 7).

A comparison of the two resulting annotation sets (on the same
input) shows that there exist quite a few genes that show largely dif—
ferent annotation depending on which gene model was used, al—
though the majority of variants are annotated in the same way by
both models. Generally, variants were more often labelled missense
variants using RefSeq than with Gencode. In contrast, Gencode had
a much higher proportion of intron variants (Fig. 3A). We took a
closer look at the genes with greater than 10 variant annotation dif-
ferences (Fig. 3B). Notably, RefSeq and Gencode sometimes use
very different gene names for the same genes (e.g. DSSP versus
RP11—742B18, MYH8 versus RP11—799N11, PKD1L1 versus HUSI
and MYH1 versus RP11—799N11). Occasionally, variants belonging
to one gene in Gencode are found in two genes in RefSeq (FLG and
HRNR versus FLG—AS1, MYH8 and MYH1 versus RP11—799N11).
Furthermore, many variants annotated as missense and synonymous
by RefSeq are annotated as intronic by Gencode hinting at a higher
number of exons in the RefSeq models. Only one gene shows the op—
posite. In two cases a gene in one dataset is completely missing in

A Variant type B
SYI'IUWI'I‘IOUS 'I'rN <—> ‘I'I'N - —
slopJetained FLG e-b FLG — —
_ M12 =—> Hume — _
«mono
“PP—m MAP-3K1 c—a- MAFEM — -
Elﬁn-gained a? HHNH w FL: - —
- - _
!] “Flt—‘9‘“ E nsFP afﬁﬁﬁﬁaﬁ — —
_ missense é. MYH8- 4—: HFI1-1’99N11- —
Elan int ._ cmnmc c—a-GAGNMC - I
‘3 m" 1: Prcmu HU51 _
. . {-a- -
IE IntEHJEFIIC F- 131301de a—a —
g :1“. lm13E-t-cn-UNE13C- l I
'5 Refaaq type '=-=' Garlands Inn-El EGDLGMLZ c.2- EDIE-ABLE — | I
20cm - ' _ PFIKDC {—3 PRIDE - —
% Inlergenic < } missense a Wm h} “WNW” _ -
3 I ""‘E'FQE'W "3’ 5WDWWPU5 E FPOG'IB :4 more — I
2 Inlron c—a- mlssonss é ITF'H1 s-a |TFﬁ1 ' I.
_ CF11 q-a- CH1 -
1 _ I Inlmn <—} synonymous E H. PEDHB? _ I
missense {—1.3- Intergenlc E WDR52 .2-) WDREQ — - I
I mlssanse <—> Intron R” f" “In” ' I

UT
PCDHM c—s PCDHM - -
FHASI -.-—: FHA51— II
FEFt1L5 4-:- FEH1L5 — _
synonymous -c-:- interganic mm“ 3T mm“ - I I. u I r
. a 1n 2:} so do
I Wmt'ms ‘" '“I‘Pn Number of differenl variants
synonymous s—h rnlssense

missense <—b missense
D _ I missense d—b synonymous

refseq 136an

Fig. 3. Comparison of gene model providers. By and large the majority of
variants get identical annotation. (A) However, Gencode shows a greater
number of intron variants and a smaller number of missense variants when
compared to RefSeq. The proportions of other types of variant remain
roughly the same. (B) The most affected genes (>10 differences) show a simi-
lar story. Eleven genes are fully annotated in RefSeq with missense and syn-
onymous variants but only appear as intron variants in Gencode. Only one
gene shows the reverse case. Ten genes show a disagreement between mis-
sense variants and each provider misses one annotated gene each. By and
large, the providers use similar names for the genes but in some cases the
names used are distinctly different

the other (C13orf40 in RefSeq and PCDHB7 in Gencode).
Furthermore, many missense variants in both datasets do not show
the same amino acid change.

3.4 Sequence feature annotation

Another task for which SoFIA is well suited is the generation of se—
quence features derived from mRNA or protein sequences, such as
nucleotide or amino acid frequencies. Sequence features are com—
monly computed to study the inﬂuence of intrinsic sequence proper—
ties on transcriptional and translational efficiency and various
features have been found to have significant correlations (Navon
and Pilpel, 2011; Sharp and Li, 1987).

Using SoFIA, we correlated previously published protein expres—
sion data (Lu et al., 2007) with various sequence features that have
been proposed to have correlation with protein expression in differ-
ent systems including (i) the codon adaptation index (CAI) (Navon
and Pilpel, 2011; Sharp and Li, 1987), a measure of how closely a
given gene’s codon usage matches that of known highly expressed
genes, (ii) the effective number of codons (Sun et al., 2013), an alter—
native to the CAI that measures the diversity of codons being used in
a gene, (iii) the number of PEST sequences, sequences rich in the
amino acids proline, glutamic acid, serine and threonine, which are
associated with a short intracellular half—life, (iv) the number of up-
stream ORFs, of which a high number is expected to interfere with
translation initiation and (v) the minimum free energy of the start
codon RNA secondary structure, a measure of how much RNA
structure interferes with translation initiation (Scharff et al., 2011;

9mg ‘09 1sn3nv uo sejeﬁuv s01 ‘BTUJOJTIBD 10 AllSJQATUn 112 /§.IO'S[BU.IHO[p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 11101; pep1201umoq

L.H.Childs et al.

 

Tuller et al., 2010) (command line in Supplementary Material 2,
output in Supplementary Data 8).

As expected, the results (Fig. 4) show significant correlations.
Specifically, mRNA expression correlates better than any of the se—
quence features, which correlate in order from best to worst starting
with the effective number of codons followed by the codon adapta—
tion index, the number of PEST sequences, the number of upstream
ORFs and ending with the minimum free energy of the translation
start site. Note that the resolved SoFIA workflow altogether com—
bines two data sources with sixteen computational steps, producing
twelve intermediate entity types.

4 Discussion and conclusion

SoFIA is a framework for entity annotation building on a compre—
hensive domain—specific data transformation and annotation acces—
sion model encoded in the form of a workﬂow template. Concrete
integration pipelines that annotate a given input with the requested
information are automatically inferred from this model.
Conceptually, our approach can be seen as a hybrid between data
warehouses, from which it inherits its ability to encode complex in-
tegration logic, and federated databases, from which it takes its on—
demand execution strategy. This novel architecture brings several
advantages. First, it allows for the separation of concerns where ana—
lysis specialists can focus on building specialized tools, which do—
main specialists assemble into workﬂow templates, which in turn
are used by end users who do not need to worry about how their
required information can be produced. Second, it leads to fast anno—
tation as only the minimally necessary integration and transform-
ation steps are executed. This speed allows for up—to—date results, as
it costs little to rerun a pipeline after updating data sources. Third,
workﬂows are naturally modular, which increases maintainability
and extensibility of templates. Fourth, SoFIA generates complete
provenance traces for any annotation it produces, an important
cornerstone to achieve reproducibility and transparency of scientific
studies and a topic of growing concern in the community
(Nekrutenko and Taylor, 2012). Fifth, it enables researchers to
quickly generate their own personalized view into their data by
focussing specifically on the details that interest them. Sixth, the ap—
proach is rather robust, as, for a concrete integration goal, it is not

       

A B C

: Ia+D5- 8:038 - 1 x
‘2 DWIUE=?.3EE-42;. -'

E -. 4‘" .

E "'

n. - ‘

K ' 1.

W 12+03- .'

.E ' ' g

3 ' 3‘: =1.- 1 _ 11:11.1?
3 ' I. ' p valua=T.SEE-18

 

p valueﬂﬂ 11.12:! ,
I I I I I | | I
20 30 M] 51} 0.? 0.5 0.9 1.0

 

I l J
1 lo 10 :15
mRNA expression Effective number of cations 1:1:an adaptation Index
D F
13+Dﬁ- : ~ rim-'35
5 : . pvalua=1.IBE-DE L _' o I
‘w llﬂ: : -: A?“ F' '1: '
E I: .. I. II I _ I ___——— I ‘ '
a y! .. I ' nut—L.” ' ‘_
a _ I . _ — —\ I,
9 13ml}- I-I _- ﬂh .“ _ . :1
.E  I I- L. .-- . n:- .. u...
5 I'IEIIEI IE" r’=o.tu ' i If”: tag-'2'
E -:: * pvaluE=D.02 [1:53]?" - I "l
. . pvalue=ﬂ.5? .
ti 5 1'0 1'5 2'0 in 115:: air: air: 460 .110 -:'ao -éo .io ti
Number of upstream ORFS

Number uf PEST sequences Translation start minimum free energy
Fig. 4. Sequence feature correlation with translation efficiency. Sequence fea-
tures for all E.coligenes were calculated using SoFIA and correlated with pre-
viously published protein expression. The results show significant correlation
for four features (effective number of codons, codon adaptation index, num-
ber of PEST sequences and number of upstream ORFs) after multiple testing
correction using the Benjamini—Hochberg method

necessary that every step of the template is executable. If a part
breaks that is used only occasionally, for instance due to format
changes in a data sources, most usages of the embracing template
will not be affected.

The flexibility that this approach provides should also prove use—
ful when new experimental techniques and new biological entities
emerge from technological advances in research. At some point in
the past, the concept of a variant was also new and once the technol—
ogy to call them in vast amounts was developed, several new tools
were developed to annotate them. Due to the extensibility of work-
ﬂow templates, it would take little effort to incorporate any new
biological entity.

4.1 Comparison to stand—alone tools

Stand—alone programs such as Variant Effect Predictor (McLaren
et al., 2010), Annovar (Wang et al., 2010), sanff (Cingolani et al.,
2012) or DAVID (Huang et al., 2009a,b) often provide convenient
graphical user interfaces, but can be inflexible as they are restricted
to a predefined tool set and produce a fixed output (McCarthy
et al., 2014). This places two major restrictions on their use when
compared to SoFIA: First, it is difficult for a researcher to create tail—
ored annotation for their data resulting in the inclusion of extrane-
ous, and the exclusion of pertinent, information. In contrast, SoFIA
is purpose built for such an on—demand generation of annotations.
Second, these tools are typically developed as monolithic applica—
tions and changing or exchanging parts of them that become out—
dated by new technologies and data can only be accomplished by
the original developers. This is very different for the modular ap—
proach, as implemented in workﬂow systems like SoFIA, where
every data source or tool can be replaced with comparable ease
(note that format adaptations sometimes become necessary). These
issues emphasize the advantages of an open and modular framework
that places control in the hands of a community, a role we hope
SoFIA can fulfil. Here, we want to re—emphasize that SoFIA is not re—
stricted to annotating variants, but can link any entities defined
within the same template a task that is currently outside the scope of
existing stand—alone tools.

4.2 Comparison to scientific workflow systems

SoFIA essentially consists of three parts: A workflow execution sys—
tem, a workflow specification language and templates for deriving
concrete workﬂows. The first two components are at the core of any
scientific workﬂow execution system. For instance, Taverna work—
ﬂows are specified using SCUFL (Oinn et al., 2004) and executed on
a custom execution engine. Galaxy workﬂows are graphically de-
signed and encoded in a custom XML format (Giardine et al.,
2005); their execution can be performed locally or with compute
clusters using CloudMan. SAASFEE (Bux et al., 2015 ) accepts work—
ﬂows specified in Cuneiform, a functional dataflow language, and
executes them on Apache Hadoop. In principle, any of these systems
could also be used as basis for SoFIA, which would require the com-
pilation of resolved workﬂows in scripts of the respective language
or format. Actually, we believe this is an interesting venue for future
research; in our vision, SoFIA would focus on template provisioning
and resolution, while other frameworks are used for robust and fast
workﬂow execution.

From the user perspective, the addition of a template to work—
ﬂow systems introduces the ability to produce workflows on de—
mand. Previously, obtaining a workﬂow for a given problem
required either the creation of an entirely new workﬂow, the adap—
tation of an old one, or the download of a workflow from an open

91% ‘09 1sn3nv uo sejeﬁuv s01 ‘etuioattjeg 10 AllSJQATUn 112 /§.IO'S[BU.IHO[p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 11101; pep1201umoq

SoFIA

 

workﬂow repository (Goderis et al., 2008; Starlinger et al., 2016).
While the former two approaches require considerable investment
of time, the latter can be faster if an appropriate workflow is pre—
sent. With a template, a workflow system is able to quickly adapt to
a multitude of different requests as demonstrated in the first ex—
ample. This situation arises particularly often during biological an—
notation and we specifically sought to support this through the
development of SoFIA. However, the SoFIA approach to workﬂow
resolution also has a number of disadvantages when compared clas—
sical workﬂow systems that directly execute a given specification:
(i) SoFIA does not optimally support large parameter sweeps or
interactive configuration through parameterization. Defining par-
ameters for specific steps using SoFIA is possible through the use of
entity attributes, however, this approach may prove unwieldy.
(ii) Before executing a workﬂow, SoFIA must resolve it, and the gen—
erated workﬂow will not be optimized for performance. Thus, when
high throughput is required or a workﬂow is run hundreds of times
on different data, a system which allows for specialized performance
optimization is in order.

4.3 SoFIA design choices

When developing SoFIA we chose to follow the aforementioned
‘one input — one output’ strategy that brings multiple advantages
and disadvantages. One advantage is that the strategy aids interpret—
ability. If provided a set of variants for instance, for each variant a
single line of output is produced. Additional or fewer lines may re—
sult in a perceived discrepancy between the number of input and
output variants. In addition, the strategy enables data—dependent
parallelization meaning each entity within the target source can be
processed in parallel, improving compute time and reducing the
memory footprint. Among the disadvantages is limited multiplicity
capability. Although a step can output multiple entities, the follow—
ing step must implement its own way to handle this. Where this
applies, this typically results in a comma separated field within the
tab—delimited output. Furthermore, it becomes difficult to imple-
ment whole set operations such as calculating the rank of an entity
from some ordering of its set.

The heuristic used by SoFIA when resolving workflows provides
multiple benefits. Most importantly, extraneous information that
was not requested by the user will not be included. For example, if
the user provides a variant set and requests the variant quality, it
would make little sense to first find a matching variant from another
set and provide the quality of that variant. Thus, the heuristic pre—
vents the incorporation of irrelevant information that would give in—
correct results. The information provided to a user is dependent on
the formulation of the problem (the requested and proved entities).
For a properly formulated problem, there is only one solution. If im—
properly formulated, there are either no solutions or multiple solu—
tions, and SoFIA will inform the user which case their problem falls
under and give suggestions about how the problem may be better
formulated. The heuristic employed may miss the most optimal
workﬂow satisfying the problem instead. An additional benefit of
the heuristic is faster workflow resolution and smaller workﬂows.

The genomics workflow was implemented to rely completely on
local sources, introducing a number of benefits and drawbacks. We
made this restriction to give the user complete control over data ver—
sioning and to reduce concerns about data privacy. However, this
choice introduces the need for local space and manual updating. The
exact amount of space required depends heavily on the sources that
the user wants to provide to SoFIA. However, the minimum
required space for basic annotation (gene name, amino acid variant

and variant type) is roughly 3 GB. As data continues to grow, local
storage may become impractical and SoFIA is fully capable of per-
forming operations remotely via the Python urllib library, poten—
tially mitigating this outcome. Regardless, we envisage the main
users of SoFIA to be embedded bioinformaticians in small to me-
dium sized research groups where access to core facilities and highly
parallel computing may be limited, but data demands are also low.

4.4 Conclusion

We strongly believe that supporting individualized data annotation is
an important yet often neglected matter. Even when using the same
type of data, two different groups may have different annotation
needs depending on their overall research goal. For instance, while
some groups may seek information from drug response databases
such as DrugBank (Law et al., 2014) or context specific genetic
dependencies such as Achilles (Cowley et al., 2014), others may be
more interested in the population genetics which requires comparing
their variant set to those from projects like the 1000 Genomes Project
(1000 Genomes Project Consortium et al., 2015) or dbSNP (Sherry
et al., 2001). A third group might study the mechanistic effects of
variants for particular types of diseases, which requires them to inte—
grate data from diseases—specific sequencing panels like The Cancer
Genome Atlas (Stratton et al., 2009) or the International Cancer
Genome Consortium (Husdon, 2011). Supporting all such needs with
a single, up—to—date data warehouse requires complex schemas, costly
maintenance operations, and continuous systems re—engineering to
properly integrate novel datasets and types into the schema. The same
extensions in SoFIA would require only programming a series of data
transformations, which are later only executed on—demand.

Funding

This work has been supported by the German Ministry for Research and
Education, collaborative research grant ONCOPATH.

Conﬂict of Interest: none declared.

References

1000 Genomes Project Consortium. et al. (2015) A global reference for human
genetic variation. Nature, 526, 6 8—74.

Bechhofer,S. et al. (2013) Why linked data is not enough for scientists. Future
Generat. Comput. Syst., 5 99—61 1.

Blankenberg,D. et al. (2010) Galaxy: a web-based genome analysis tool for ex-
perimentalists. Curr. Protoc. Mol. Biol, 89, 1—21.

BuX,M. et al. (2015 ) SAASFEE: scalable scientiﬁc workﬂow execution engine.
Very Large Data Bases, 8, 1892—1895.

Choi,Y. et al. (2012) Predicting the functional effect of amino acid substitu-
tions and indels. PLOS One, 7, e46688.

Cingolani,P. et al. (2012) A program for annotating and predicting the effects
of single nucleotide polymorphisms, Sanff: SNPs in the genome of
Drosopkila melanogaster strain w 1 1 1 8; iso-2; iso-3. Fly (Austin), 6, 80—92.

Cowley,G.S. et al. (2014) Parallel genome-scale loss of function screens in 216
cancer cell lines for the identiﬁcation of context-speciﬁc genetic dependen-
cies. Sci. Data, 1, 140035.

Den Dunnen,].T. and Antonarakis,S.E. (2000) Mutation nomenclature exten-
sions and suggestions to describe complex mutations: a discussion. Hum.
Mutat., 15, 7—12.

Eilbeck,K. et al. (2005) The sequence ontology: a tool for the uniﬁcation of
genome annotations. Genome Biol ., 6, R44.

Forbes,S.A. et al. (2015 ) COSMIC: exploring the world’s knowledge of som-
atic mutations in human cancer. Nucleic Acids Res., 43, D805—D8 1 1.

Giardine,B. et al. (2005) Galaxy: a platform for interactive large-scale genome
analysis. Genome Res., 15, 1451—1455.

91% ‘09 1sn3nv uo sejeﬁuv s01 ‘etuioattjeg 10 AllSJQATUn 112 /§.IO'S[BU.IHO[p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 11101; pep1201umoq

L.H.Childs et al.

 

Goderis,A. et al. (2008) Discovering Scientiﬁc Workﬂows: The myExperiment
Benchmarks.

Harrow,]. et al. (2006) GENCODE: producing a reference annotation for
ENCODE. Genome Biol., 7, 841—89.

Huang,D.W. et al. (2009a) Bioinformatics enrichment tools: paths toward the
comprehensive functional analysis of large gene lists. Nucleic Acids Res.,
37, 1—13.

Huang,D.W. et al. (2009b) Systematic and integrative analysis of large gene
lists using DAVID bioinformatics resources. Nat. Protoc., 4, 44—5 7.

Husdon,T.]. (2011) International Cancer Genome Consortium. Cancer, 2011,
1—20.

Jorg,T. and Dessloch,S. (2008) Towards generating ETL processes for incre-
mental loading. In: Proceedings of the 2008 international symposium on
Database engineering (’9' applications — IDEAS ’08, p. 101.

Kasprzyk,A. (2011) BioMart: Driving a paradigm change in biological data
management. Database, 2011, bar049.

LacroiX,Z. et al. (2003) Bioinformatics: Managing Scientiﬁc Data.

Law,V. et al. (2014) DrugBank 4.0: Shedding new light on drug metabolism.
Nucleic Acids Res., 42, D1091—D1097.

Lee,T.]. et al. (2006) BioWarehouse: a bioinformatics database warehouse
toolkit. BMC Bioinformatics, 7, 170.

Li,H. (2011) TabiX: fast retrieval of sequence features from generic TAB-
delimited ﬁles. B ioinformatics, 27, 718—719.

Li,H. et al. (2009) The Sequence Alignment/Map format and SAMtools.
Bioinformatics, 25, 2078—2079.

Livingston,K.M. et al. (2015 ) KaBOB: ontology-based semantic integration of
biomedical databases. BMC Bioinformatics, 16, 126.

Lu,P. et al. (2007) Absolute protein expression proﬁling estimates the relative
contributions of transcriptional and translational regulation. Nat.
Biotechnol, 25, 1 17—124.

Machado,C.M. et al. (2013) The semantic web in translational medicine: cur-
rent applications and future directions. Brief. Bioinform., 16, 89—103.

McCarthy,D.]. et al. (2014) Choice of transcripts and software has a large ef-
fect on variant annotation. Genome Med., 6, 26.

McLaren,W. et al. (2010) Deriving the consequences of genomic variants with
the Ensembl API and SNP Effect Predictor. Bioinformatics, 26, 2069—2070.

Navon,S. and Pilpel,Y. (2011) The role of codon selection in regulation of
translation efﬁciency deduced from synthetic libraries. Genome Biol., 12,
R12—R12.

Nekrutenko,A. and Taylor,]. (2012) Next-generation sequencing data inter-
pretation: enhancing reproducibility and accessibility. Nat. Rev. Genet., 13,
667—672.

Ng,S.B. et al. (2010) Exome sequencing identiﬁes the cause of a mendelian dis-
order. Nat. Genet., 42, 30—35.

Ogata,H. et al. (1999) KEGG: Kyoto encyclopedia of genes and genomes.
Nucleic Acids Res., 27, 29—34.

Oinn,T. et al. (2004) Taverna: a tool for the composition and enactment of
bioinformatics workﬂows. Bioinformatics, 20, 3045—3054.

Pruitt,K.D. et al. (2014) RefSeq: an update on mammalian reference se-
quences. Nucleic Acids Res., 42, D756—D763.

Rios,]. et al. (2009) Magallanes: a web services discovery and automatic work-
ﬂow composition tool. BMC Bioinformatics, 10, 334.

Scharff,L.B. et al. (2011) Local absence of secondary structure permits transla-
tion of mRNAs that lack ribosome-binding sites. PLoS Genet., 7, e1002155.
Sharp,P.M. and Li,W.H. (1987) The codon adaptation index-a measure of dir-
ectional synonymous codon usage bias, and its potential applications.

Nucleic Acids Res., 15, 1281—1295.

Sherry,S.T. et al. (2001) dbSNP: the NCBI database of genetic variation.
Nucleic Acids Res., 29, 308—31 1.

Starlinger,]. et al. (2016) Effective and efﬁcient similarity search in scientiﬁc
workﬂow repositories. Future Gener. Comput. Syst., 56, 5 84—594.

Stratton,M.R. et al. (2009) The cancer genome atlas. Nature, 458, 719—724.

Sun,X. et al. (2013) An improved implementation of effective number of
codons (NC). Mol. Biol. Evol., 30, 191—196.

Trissl,S. et al. (2005 ) Columba: an integrated database of proteins, structures,
and annotations. BMC Bioinformatics, 6, 81.

Tuller,T. et al. (2010) Translation efﬁciency is determined by both codon bias
and folding energy. Proc. Natl. Acad. Sci. USA, 107, 3645—3650.

Waegele,B. et al. (2009) CRONOS: The cross-reference navigation server.
Bioinformatics, 25, 141—143.

Wang,K. et al. (2010) ANNOVAR: functional annotation of genetic variants
from high-throughput sequencing data. Nucleic Acids Res., 38, e164.

Wolstencroft,K. et al. (2013) The Taverna workﬂow suite: designing and exe-
cuting workﬂows of Web Services on the desktop, web or in the cloud.
Nucleic Acids Res., 41, W557—W561.

Yang,W. et al. (2013) Genomics of Drug Sensitivity in Cancer (GDSC): a re-
source for therapeutic biomarker discovery in cancer cells. Nucleic Acids
Res., 41, D955—D961.

9mg ‘09 1sn3nv uo sejeﬁuv s01 ‘etuioattjeg 10 Amie/xtqu 112 /§.IO'S[BU.IHO[p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 11101; pep1201umoq

