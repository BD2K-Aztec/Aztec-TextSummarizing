Bioinformatics, 32(3), 2016, 456—458

doi: 10.1093/bioinformatics/btv589

Advance Access Publication Date: 10 October 2015
Applications Note

 

Sequence analysis

Jflow: a workflow management system for
web applications

Jéréme Mariette1'*, Frédéric Escudié‘, Philippe Bardouz,
lbouniyamine Nabihoudine‘, Céline Noirot‘, Marie-Stéphane Trotard1,
Christine Gaspin1 and Christophe Klopp1'2

1Plate-forme Bio-lnformatique Genotoul, INRA, UR875 Mathmatiques et lnformatique Appliques Toulouse,
Castanet-Tolosan, France and 2Plate-forme SIGENAE, INRA, GenPhyse, Castanet-Tolosan Cedex, France

*To whom correspondence should be addressed.
Associate Editor: John Hancock

Received on June 30, 2015; revised on October 2, 2015; accepted on October 7, 2015

Abstract

Summary: Biologists produce large data sets and are in demand of rich and simple web portals in
which they can upload and analyze their files. Providing such tools requires to mask the complexity
induced by the needed High Performance Computing (HPC) environment. The connection between
interface and computing infrastructure is usually specific to each portal. With Jflow, we introduce a
Workflow Management System (WMS), composed of jQuery plug—ins which can easily be
embedded in any web application and a Python library providing all requested features to setup,
run and monitor workflows.

Availability and implementation: Jflow is available under the GNU General Public License (GPL) at
http://bioinfo.genotoul.fr/jflow. The package is coming with full documentation, quick start and a

 

running test portal.
Contact: Jerome.Mariette@toulouse.inra.fr

 

1 Introduction

Building rich web environments aimed at helping scientists analyze
their data is a common trend in bioinformatics. Specialized web por—
tals such as MG—RAST (Meyer et 61]., 2008), MetaVir (Roux et 61].,
2011) or NG6 (Mariette et 61]., 2012) provide multiple services and
analysis tools in an integrated manner for specific experiments or
data types. These applications require WMS features to manage and
execute their computational pipelines.

Generic WMS, such as Galaxy (Goecks et 61]., 2010), Ergatis
(Orvis et 61]., 2010) or Mobyle (Néron et 61]., 2009) provide a user
friendly graphical interface easing workflow creation and execution.
Unfortunately, such environments come with their own interface,
complicating their integration within already existing web tools.
Other WMS such as weaver (Bui et 61]., 2012), Snakemake
(Koster et 61]., 2012), Ruffus (Goodstadt, 2010) or Cosmos (Gafni

©The Author 2015. Published by Oxford University Press.

et 61]., 2014) provide a framework or a domain—specific language to
developers wanting to build and run workflows. These software
packages offer the flexibility and power of a high-level programming
language, but they do not provide a user interface, enable compo—
nent and workﬂow definition.

JFlow combines a user friendly interface with an intuitive python
API. It is, to our knowledge, the only WMS designed to be
embedded in any web application, thanks to its organization as
jQuery (http://jquery.com/) plug—ins.

2 Methods

Jﬂow user interface gathers five jQuery plug—ins providing user ori-
ented views.

456

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/by-nc/4.0/),
which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact

journals.permissions@oup.com

112 /§JO'sreumo [p.IOJXO'SSUBUHOJUTOTQ/ﬁdllq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

Jflow

457

 

° availablewf lists all runnable workﬂows accessible to users,

° activewf monitors all started, completed, failed, aborted and re—
seted workﬂows,

° wffonn presents workﬂow editable parameters in a form,

° wfoutputs displays all outputs produced by the workﬂow organ—
ized per component,

° wfstatus shows the workﬂow execution state as a list or an exe—
cution graph. The graph visualization uses the Cytoscape web
JavaScript plug—in (Lopes et 61]., 2010).

The plug—ins give access to multiple communication methods
and events. They interact with the server side through Jﬂow’s REST
API, running under a cherrypy (http://www.cherrypy.org/) web ser—
ver. The included server uses the JSONP communication technique
enabling cross—domain requests.

To be available from the different jQuery plug-ins, the work-
flows have to be implemented using the Jflow API. A Jflow com-
ponent is in charge of an execution step. Adding a component to
the system requires to write a Python Component subclass. In
Jflow, different solutions are available to ease component cre—
ation. To wrap a single command line, the developer can give a
position or a flag for each parameter. Jflow also embeds an XML
parser which allows to run genuine Mobyle (Néron et 61].,
2009) components. Finally, to allow developers to integrate com—
ponents from other WMS, Jflow provides a skeleton class. This
class only requires to implement the parsing step. A workflow
chains components. It is represented by a directed acyclic graph
(DAG) where nodes represent jobs and edges links between inputs
and outputs. When paths are disjoint, jobs are run in parallel. A
Jflow workflow is built as a Workflow subclass. Components are
added to the workflow as variables and chained linking outputs
and inputs.

To define the parameters presented to the final user, Jflow
gives access to different class methods. Each parameter has at least
a name, a user help text and a data type. For file or directory par—
ameters, it is possible to set required file format, size limitation
and location. Jflow handles server side files with regular expres—
sions, but also URLs and client side files, in which case, it auto—
matically uploads them. Before running the workflow, Jflow
checks data type compliance for each parameter. Job submission,
status checking and error handling, rely on Makeflow (Albrecht
et 61]., 2012) and weaver (Bui et 61]., 2012). Therefore Jflow man-
ages error recovery and supports most distributed resource man—
agement systems (Condor, SGE, Work Queue or a single multi
core machine, . . . ). Replacing Makeflow by an other job submitter
requires to implement a new Engine subclass. This class creates
and executes the workflow DAG.

3 Example

Jﬂow user interface has been designed to allow an easy integration
in mash up web applications. Hereunder, we present its integration
in NG6, which provides a user—friendly interface to process, store
and download high—throughput sequencing data. The environment
displays sequencing runs as a table. From this view, the user can add
new data by running workflows in charge of loading the data and
checking its quality. Different workflows are available considering
data type and sequencing technology.

Workﬂows are listed by the availablewf plug—in built within a
NG6 modal box. A selectnvailablewf event thrown by the availa-
blewf plug—in is listened and caught to generate the parameter form
using the wffonn plug—in. Considering the parameter type, Jflow

- - :‘.-.-.1--- 1- lap-.3- --I.- -.'-.- I-n ..:--:-.-|Iv! FI.I-j:'l --.~
a:|:'.'rm:I-|1II"

:rIJ'..' . bchll:l'.l.'.- ﬂuid: a“. ---'

'ul:l.':-_'Iudn'.' ".-.u. Z-IE'

illumina_qc : . -_--

LII'I1 Wf-‘Ig|-'||Eu-n'lu‘:|11

-.l-- En! n I:I-:".:.". --.~

'Il :.-.I-r\-r.1| ::- [nu .
IlnLua-m-LlJ-anu. '-'--' ' ' nwmnm. mail

.
. .
I e
..
.
"-5-! 'w‘I'I'I- :nla'tr nun-uruu-nJ
'-'.-' .I-- ..|."
.' bull-c '.r..- a:"..-'.-:'-: Lulu-:11 -:-' 1m: ESE-52. J:-' '-:I:'.
-' "-'|."::'-'¢'-'.' Il'-" -'|:= .-.' u nun-rmuu-u..1
':l|:t:.1|u'UE Jiv'
hrﬂ'n-HJI
.. .- .- ..-..-- --u I ...- u-. ..L_ Ll”.

..I.-.I\... ..'I .In. a..li....u-...-x‘l-. ML... . ..lru _
-' "."u'ul'.'—2 3.111 ".5: 'mﬂlli-l-lud

@ﬂtnrnnunl In; ®

..|.". hh!

n.l ru'i'_'|'\- -r.~ Fri-'JI Fr-ITII :n-':r'\-
'Irnlh-Ir-r-n-LIIl-nmly' --'I : .".'

'Fm'r |'.Iu:-'J.‘-d|v

.-.._I -- . .  _:.

 l' :.'rI ".V-nl '-: Fury-I. ."F'Iln :.-.I I'm-:11 hi“: I" :I-
'nLn:uI-nn-dnJ-In:+'.' "..--

' :.-... -' '- ' ."m.

. .-.|..
.. IluI :IE I.:.'_ :'::III':::_I- '.III h! r! "Lu: L'...'- I:I 33"" ﬂ'lﬂk"
InraTIH-mdnl-bncy

{c} 3km- W

[h]-

 !ill::'\.-.I l.:.-- NRIJ: :‘L'I
ihLatul mun] '

Fig. 1. Jflow integration: (a) a piece of the NG6 HTML code source in which is
positioned an empty div to build the activewfplug-in and a modal box for the
Wfstatus plug-in. (b) The jOuery code in charge to build Jflow plug-ins and
manage user action. When the selectactivewfevent is thrown from activewf-
div, a function is called with two parameters: event and workflow. The last
parameter stores all the workflow’s information, such as its name and its id,
used in this example to update the modal box title and to build the Wfstatus
plug-in. (c) The status of the illumina_qc workflow with the id 26 displayed as
a graph in the NG6 application

adapts its display. For example, a date is shown as a calendar and a
boolean as a check box.

Biologists use NG6 to check sequencing reads quality, including
experimental samples contamination measure. The first input of this
analysis is the contaminant reference genome fasta file, displayed as
a file selector. The second input is a parameter set describing the bio—
logical samples. It includes the read files and metadata such as sam—
ple name, tissue and development stage. To help biologists populate
it, Jflow uses a structured data input rendered by the wffonn plug—in
as a spreadsheet. It allows to copy and paste multiple lines. Jflow it-
erates then on the table content to launch each sample processing in
parallel.

To monitor running workﬂows, NG6 provides a table in a spe—
cific page. The table is filled by the activewf plug—in. In the same
way as described above, the wfstatus is built on a modal box when a
selectactivewf event is thrown by the activewf plug—in, as presented
in Figure 1. This view shows the workflow’s execution graph where
nodes represent components and edges links between inputs and
outputs.

NG6 was first implemented using the Ergatis (Orvis et 61].,
2010) WMS, which had a separate user interface. With Jflow, all
actions are now available from the same application, which
makes it user friendly.

4 Conclusion

Jﬂow is a simple and efficient solution to embed WMS features within a
web application. It is, to our knowledge, the only WMS designed with
this purpose. It is already embedded in RNAbrowse (Mariette et 61].,
2014) and NG6 (Mariette et 61]., 2012), where it has been used to process
more than 2000 sequencing runs on a 5000 cores HPC environment.

Conﬂict of Interest: none declared.

References

Albrecht,M. et a]. (2012) Makeﬂow: a portable abstraction for data intensive
computing on clusters, clouds, and grids. SWEET at ACM SI GMOD, 20.
doi: 10.1145/2443416.2443417.

112 /§JO'sreumo [p.IOJXO'SSUBUHOJUTOTQ/ﬁdllq 11101; popcorumoq

9IOZ ‘09 lsnﬁnv uo ::

458

J. Mariette et al.

 

Bui,P. (2012) Compiler Toolchain For Data Intensive Scientiﬁc Workﬂows.
PhD. Thesis, University ofNotre Dame.

Gafni,E. et al. (2014) COSMOS: python library for massively parallel work-
ﬂows. Bioinformatics, 30, 295 6—295 8.

Goecks,]. et al. (2010) Galaxy: a comprehensive approach for supporting ac-
cessible, reproducible, and transparent computational research in the life
sciences, Genome Biol., 11, R86.

Goodstadt,L. (2010) Ruffus: a lightweight Python library for computational
pipelines. Bioinformatics, 26, 2778—2779.

Koster,]. and Rahmann,S. (2012) Snakemake—a scalable bioinformatics
workﬂow engine. Bioinformatics, 28, 2520—2522.

Lopes,C.T. et al. (2010) Cytoscape Web: an interactive web-based network
browser, Bioinformatics, 26, 2347—2348.

Mariette,]. et al. (2012) NG6: Integrated next generation sequencing storage
and processing environment. BMC Genomics, 13, 462.

Mariette,]. et al. (2014) RNAbrowse: RNA-seq de novo assembly results
browser. PLOS ONE, 9, e96821.

Meyer,F. et al. (2008) The metagenomics RAST server a public resource for
the automatic phylogenetic and functional analysis of metagenomes, BMC
Bioinformatics, 9, 386.

Néron,B. et al (2009) Mobyle: a new full web bioinformatics framework, 25,
3005—3011.

Orvis,]. et al. (2010) Ergatis: a web interface and scalable software system for
bioinformatics workﬂows. B ioinformatics, 15, 26.

RouX,S. et al. (2011) MetaVir: a web server dedicated to Virome analysis,
Bioinformatics, 21, 3074—3075.

112 /B.IO'S[BU.IT10[p.IOJXO'SOTlBIHJOJUTOTQ/ﬁdllq 11101; popeorumoq

9IOZ ‘09 lsnﬁnv uo ::

