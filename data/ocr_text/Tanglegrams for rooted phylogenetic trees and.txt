Vol. 27 ISMB 2011, pages i248—i256
doi: 10. 1093/bioinformatics/btr210

 

Tanglegrams for rooted phylogenetic trees and networks

Celine Scornavacca*, Franziska Zickmann and Daniel H. Huson*
Center for Bioinformatics (ZBIT), T bingen University, Sand 14, 72076 T bingen, Germany

 

ABSTRACT

Motivation: In systematic biology, one is often faced with the task
of comparing different phylogenetic trees, in particular in multi-
gene analysis or cospeciation studies. One approach is to use
a tanglegram in which two rooted phylogenetic trees are drawn
opposite each other, using auxiliary lines to connect matching taxa.
There is an increasing interest in using rooted phylogenetic networks
to represent evolutionary history, so as to explicitly represent
reticulate events, such as horizontal gene transfer, hybridization or
reassortment. Thus, the question arises how to define and compute
a tanglegram for such networks.

Results: In this article, we present the first formal definition of a
tanglegram for rooted phylogenetic networks and present a heuristic
approach for computing one, called the NN-tanglegram method.
We compare the performance of our method with existing tree
tanglegram algorithms and also show a typical application to real
biological datasets. For maximum usability, the algorithm does not
require that the trees or networks are bifurcating or bicombining, or
that they are on identical taxon sets.

Availability: The algorithm is implemented in our program
Dendroscope 3, which is freely available from www.dendroscope.org.
Contact: scornava@informatik.uni-tuebingen.de;
huson@informatik.uni-tuebingen.de

1 INTRODUCTION

In systematic biology, one is often faced with the task of comparing
different phylogenetic trees, in particular in multi—gene analysis
or cospeciation studies (Burt and Trivers, 2008; Charleston, 1998;
Charleston and Perkins, 2003; Lee and Stock, 2010; Machado et al.,
2005; Merkel et al., 2010). One way to visualize similarities and
differences is to draw two phylogenetic trees as rooted trees side
by side and to draw lines (which we will call connectors) between
taxa that correspond to each other in the two trees, see Figure 1.
Such a depiction is called a tanglegram and different variations of
the problem of computing an optimal tanglegram have been studied
in the literature.

For example, a number of articles (Bansal et al., 2009; Becker
et al., 2009; Buchin et al., 2009; Femau et al., 2005; Nollenburg
et al., 2009; Venkatachalam et al., 2010) consider the One—Tree
Crossing Minimization (OTCM) and the Two—Tree Crossing
Minimization (TTCM) problems that both aim at minimizing the
number of crossings between connectors. In the former problem,
the layout of one of the trees is ﬁxed and that of the other is
mutable whereas in the latter formulation the layout of both trees
are allowed to be changed. For binary trees, OTCM is solvable
in 0(nlogn) time (Venkatachalam et al., 2010), while TTCM is
NP—complete (Fernau et al., 2010). In Dwyer and Schreiber (2004),
the authors describe a ‘seesaw’ heuristic for the TTCM problem for

 

*To whom correspondence should be addressed.

(a) (b)

Teudpua

 

 

 

_____ -‘ Waterstoniella
Conosycea ----
___.. Elizabethiella
Galoglychia 
‘_— Platyscapa
Americana --..‘.‘_‘,:;___ Pegoscapus
UrOStigma “ ,v W. punctde

 

 

n.

. , . .
l‘lbub , , .,
,

Rhizocladus " ,.——‘ W' pum'lae

Kradibia

Kalosyce —

S 'd' ‘
yc' lum ____ _- C. pilipes

Sycocarpus  C. arabicus

C. capenbia

Fig. 1. A tanglegram between a phylogeny of sections of Ficus (a) and that
of their associated genera of pollinating wasps (b). Adapted from (Machado
et 61]., 2005).

binary (or bifurcating) trees, which operates by repeatedly solving
the OTCM problem, each time switching the roles of the two
trees. A branch—and—bound approach for binary trees that works
in 0(n3) time and gives a 2—approximation for complete binary
trees is presented in Buchin et al. (2009). A generalization of the
algorithm to unbalanced binary trees is described in Nollenburg
et al. (2009), though in this case the approximation factor does not
hold. In addition, this article gives an ILP formulation and an exact
branch—and—bound algorithm for binary trees, where the latter has
a worst—case running time of 0(n2 4—11-22”). Other approaches use
ﬁxed-parameter tractability (FPT) parameterized by the number k of
connector crossings (Fernau et al., 2005). A generalization to non—
binary trees is discussed in Venkatachalam et al. (2010). The only
algorithm that is able to compute tanglegrams for binary trees with
many—to—many connections is described in Bansal et al. (2009). Their
algorithm requires 0(klog2k/ loglogk) time (where k is the number
of connectors) in the case that one tree is ﬁxed. Additionally, they
present some alternating and local search strategies for the TTCM
problem.

While evolutionary histories are usually described by rooted
phylogenetic trees, in some cases rooted phylogenetic networks
may provide a more accurate evolutionary scenario, especially
when mechanisms such as horizontal gene transfer, hybridization,
recombination, reassortment or incomplete lineage sorting have
played a role in shaping the history. There is currently much research
on the development of computational methods for computing rooted
phylogenetic networks, for an overview see Huson and Scornavacca
(2011a); Huson et al. (2011).

The goal of this article is to introduce the concept of a tanglegram
for rooted phylogenetic networks and to provide a useful heuristic
for computing such tanglegrams. Unlike trees, rooted phylogenetic
networks are not necessarily planar and so the deﬁnition of
an optimal tanglegram is not immediately obvious for them.
Our heuristic does not require that the networks are bifurcating or

 

© The Author(s) 2011. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non—Commercial License (http://creativecommons.org/Iicenses/
by—nc/2.5), which permits unrestricted non—commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /§.IO'SIBUJHOIPJOJXO'SOIlBIIIJOJUIOIQ/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

Tanglegrams for rooted phylogenetic networks

 

bicombining, or that they both contain the same set of taxa. It can also
be used to compare two trees, or to compare a tree and a network,
of course. Moreover, the heuristic can also be employed to align the
order of leaves for a whole collection of rooted trees or networks.
The algorithm is implemented in our Java program Dendroscope 3
(Huson and Scornavacca, 2011b; Huson et al., 2007), which is freely
available from www.dendroscope.org.

2 BASICS

Throughout this article, we follow the terminology and notation
deﬁned in Huson et al. (2011) and assume that the reader is familiar
with graphs and related terminology. In this section we introduce
some basic concepts and results.

2.1 Phylogenetic trees and networks

Let X be a set of taxa. An unrooted phylogenetic network N on X is
an unrooted, connected graph whose leaves are bijectively labeled
by the taxa in X. A rooted DAG is deﬁned as a directed graph that is
free of directed cycles and contains precisely one node with indegree
zero, called the root. A rooted phylogenetic network N on X is a
rooted DAG whose set of leaves is bijectively labeled by the taxa
in X. A node v in N is said to be a tree node if its indegree is less
than two and a reticulate node otherwise. An edge of N is called
a tree edge, unless it leads to a reticulate node, in which case it is
called a reticulate edge. A (rooted) phylogenetic tree is a (rooted)
phylogenetic network for which it is not possible to delete any edge
without producing a graph that is not connected.

2.2 Clusters, splits and split networks

Let N be a rooted phylogenetic network on X. Any tree edge e in
N deﬁnes a cluster C(e) which is given by the set of all taxa that
label leaves that lie below e in N. We use C (N) to denote the set of
all clusters obtainable from N in this way.

Let X be a set of taxa. A split A |B on X is a partition of X into
two non—empty sets. Any edge e in an unrooted phylogenetic tree T
on X deﬁnes a split S (e) =A |B, where A and B are all taxa that label
nodes that lie on one side or the other side of the edge, respectively.
A split A |B is said to separate two taxa x and y if they are contained
in different parts of the split, that is, if |{x,y}ﬂA| = |{x,y}ﬂB| :1
holds. The restriction of a split S to a set of taxa X’, denoted by S | X/
is deﬁned as the split S’ =A’|B’, where A’ =AﬂX’ and B’ =BﬂX’.

Let E be a set of splits on X. A weighting of E is given by a map
a) that assigns a non—negative weight w(S) to each split S e 2. Let
E be a set of weighted splits on X. We deﬁne a distance matrix of
split distances D(E)= {dxy} on X by setting dxy = 2562(x,y)w(S),
where 2(x, y) denotes the set of all splits in E that separate the taxa
x and y. If E is unweighted, then we use this deﬁnition with w(S) = 1
for all S.

DEFINITION 2.1 (Compatibility). Two splits A1 |31 and A2 |B2 are
compatible if at least one of the sets AlﬂAz, A1032, B1 0A2
or B1 0B2 is empty. Otherwise they are called incompatible. A
collection of splits E is compatible if and only if all splits are
pairwise compatible.

A set of compatible splits can always be represented by a tree
(Buneman, 1971). More generally, any set of splits E can always be
represented by a split network N (Dress and Huson, 2004). This is

(a) (b)
{a7b7d767 I {Ca
{aacadaeagah}l{b7f} h f

{CI/70787.9} I {b7d7f7h}

{may} I {b,d,e,f,h}

{01,076,139} | {Nah} e

{a7e7h} I {b7cid7f7g} a g0

Fig. 2. (a) A set of six circular splits E on X ={a,b,...,h}. A circular
ordering is given by (a,g, c, f ,b,d,h,e). (b) An outer—labeled planar split
network representing 2.

an unrooted phylogenetic network with the property that every split

S =A |B in E is represented in N by a set of parallel edges, such

that deleting all edges in the set will result in exactly two connected

components, one labeled by the taxa in A and the other labeled by B.
A class of splits of particular interest are the circular splits.

DEFINITION 2.2 (Circular splits). A set of splits E on X is called
circular, if there exists a linear ordering n=(x1,...,xn) of the
elements of X for 2 such that each split S e E is interval-realizable,
that is, has the form

for appropriately chosen 1 < p 5 q 5 n.

Such an ordering n=(x1, ...,xn) is called a circular ordering for
E, as it holds that (x1,...,xn) is a circular ordering for E, if and
only if the inverse ordering (xn,xn_1, ...,x1) and (x2,x3, ...,xn,x1)
both are.

Circular splits are of particular interest because any set of circular
splits can always be represented by a split network that can be drawn
in the plane such that no two edges intersect and all labeled nodes
lie on the outside of the network, see Figure 2.

2.3 The Neighbor-Net algorithm

Given a distance matrix D on X, the Neighbor—Net algorithm (Bryant
and Moulton, 2004) computes a circular ordering it of X from D
and then a set of weighted splits E that are interval—realizable with
respect to 71'. A distance matrix D on X is said to be circular if and
only if there exists a set of circular weighted splits E on X such
that D(E)=D. The following result asserts the consistency of the
Neighbor—Net method:

THEOREM 2.3 [Neighbor—Net consistency (Bryant et al., 2007)].
Given a circular distance matrix D on X, the Neighbor—Net algorithm
produces a circular ordering 71' and a set of weighted splits E that
are interval—realizable with respect to 71' such that D =D(E).

3 TANGLEGRAMS FOR ROOTED
PHYLOGENETIC NETWORKS

In this section, we ﬁrst develop the concept of a tanglegram for
rooted phylogenetic networks and then deﬁne what we mean by an
optimal tanglegram. We then develop a heuristic for computing an
optimal tanglegram for two rooted phylogenetic networks.

Let N be a rooted phylogenetic network on X. A topological
embedding of N is given by a map that assigns to each node v in

 

i249

112 /§JO'smumoprOJIXO'sonemJOJIuIOIq/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

C.Scornavacca et aI.

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Fig. 3. (a) A phylogenetic network N. (b) A concrete drawing 1 of the
forest .7: (N ). This drawing induces a partial order of the leaves such that
a<rd<Tf<Tg<rh<rL i<rj<rk, and b<rc.

N an ordering (121,122, ...,vk) of the set of its children. Note that any
concrete drawing 6 of N induces such a topological embedding that
is given by the order in which edges leave a node. Moreover, such
a drawing deﬁnes a total order on X, which we will denote by 719.

Note that deletion of all reticulate edges in N produces a forest
or collection of trees, {T1, ...,Tk}, which we denote by .7: (N ). For
any tree T, in .7: (N ), let X,- denote the set of taxa that label leaves of
Ti. Note that T, is not necessarily a phylogenetic tree because some
(or even all) of its leaves may be unlabeled.

A topological embedding ‘L' for .7: (N ) is given by specifying a
topological embedding for each tree T, in .7: (N ). Note that ‘L' induces
a total ordering of the taxon set X, for each T, in .7: (N ). While ‘1:
determines a partial ordering <I of X, it does not specify a total
ordering of X because the trees of .7: (N ) are not ordered.

DEFINITION 3.1 (Non—interleaving order). Let N be a rooted
phylogenetic network on X and let I be a topological embedding of
.7: (N ). A total order 71' on X is called non-interleaving with respect
to ‘L' if for any two taxa a <7: b, we have:

1. If a,b€ X,- for some tree Ti, then a<r b;

2. If a e X, and b e  (with i 75 j), then there exists no taxa c e X,
and der such that a<nb<ﬂc<ﬂ d.

For example, for the phylogenetic network N on X ={a, ...,l}
and the concrete drawing 6 of the forest .7: (N ) in Figure 3, both
(a,b,c,d,e,f,g,h,i,j,k,l) and (a,d,f,g,h,l,i,j,k,b,c,e) are non—
interleaving total orders on X w.r.t. 6, while (a,d , f , g,h, i , j , l ,

k,b, c, e) is not because it violates condition (2) of Deﬁnition 3.1.

What is the relevance of this deﬁnition? We want to be able to draw
a rooted phylogenetic network N in such a way that we preserve the
given topological embedding ‘L' of its forest and also that we place
all leaves of the network along a line in the order speciﬁed by JT and
the root occurs on the outside of the drawing. The non—interleaving
property ensures that this can be done in such a way that no two tree
edges cross.

3.1 Deﬁnition of a tanglegram for networks

Let N1 and N2 be two rooted phylogenetic networks on taxon sets
X1 and X2, respectively. We will use M g X1 >< X2 to denote a set of
connectors between X1 and X2. If the two networks are on the same
taxon set, then M is the set of identity connectors that connects each

taxon to itself, which we will denote by MId below for emphasis.
In the case of a host—parasite comparison, M will pair hosts and
parasites.

Unlike trees, rooted phylogenetic networks are not necessarily
planar and so the deﬁnition of a tanglegram is not immediately
obvious for them:

DEFINITION 3.2 (Tanglegram for networks). Let N1 and N2 be two
rooted phylogenetic networks on X1 and X2, respectively, and let M
be a set of connectors between X1 and X2. A tanglegram Z for N1,
N2 andM is speciﬁed by a system (N1,X1,t1,rt1,N2,X2,t2,Jt2,M)
where t,- is a topological embedding of .7-"(Ni) and Jr,- is a non—
interleaving total order of X,- with respect to 131', for i = 1,2.

Let N be a rooted phylogenetic network on X. Consider a concrete
drawing 6 of N in the plane. We call 6 a rooted outer-labeled
(tree-)planar embedding if all taxon labels are placed on a line,
the root node occurs on the outside of the embedded network and
no two (tree) edges cross. If N possesses a non—interleaving order
71' of X with respect to a topological embedding ‘L' for .7: (N ), then
there exists a rooted outer—labeled tree—planar embedding for N in
which the taxa appear along a line in the order speciﬁed by 71'. As
mentioned above, the non—interleaving property of 71' ensures that
we can lineup appropriate embeddings of all the trees in .7: (N ) in
the order induced by 71'.

A drawing of a tanglegram Z=(N1,X1,t1,n1,N2,X2,t2,rt2,M)
consists of a rooted outer—labeled tree—planar embedding of both
N1 and N2, together with a set of lines representing the connectors
between X1 and X2. Such a drawing of Z can be obtained in the
following steps. First draw all trees in .7: (N 1) and .7-"(N2) in such a
way that the two orderings t1 and :2 are respected and all the leaves
of N1 and N2 are lined up in the order speciﬁed by 711 and 712.
Second, add all reticulate edges to the diagram. These two steps can
always be done in such a way that no two tree edges cross and that
the roots of N1 and N2 occur on the outside of the drawing, due
to the fact that both 711 and 712 are non—interleaving. Finally, draw
lines between the leaves of the two networks so as to connect taxa
as speciﬁed in M.

Note that, if N1 and N2 are two trees, F (N 1) and F (N2) coincide
with N1 and N2, respectively. This means that, in this case,
a tanglegram between N1 and N2 deﬁne univocally the rooted
outer—labeled tree—planar embeddings of N1 and N2. Giving an
embedding, drawing a tree is straightforward (see Huson et al.,
2011), Chapter 13). Therefore, our deﬁnition of a tanglegram for
two rooted phylogenetic networks generalizes the deﬁnition of a
tanglegram for two rooted phylogenetic trees, and so, in particular,
the problem of computing an optimal tanglegram for networks is
NP—complete (Fernau et al., 2010).

Let N be a rooted phylogenetic network on X, let I be a
topological embedding of .7: (N ) and let 71' be a non—interleaving
total order on X. We deﬁne the reticulation crossing number as the
minimum number of crossings involving reticulation edges in any
drawing of N respecting ‘L' and 71'. An optimal tanglegram can now
be deﬁned as follows:

DEFINITION 3.3 (Optimal tanglegram). Let N1 and N2 be two rooted
phylogenetic networks on X1 and X2, respectively, and let M
be a set of connectors between X1 and X2. A tanglegram Z:
(N1,X1,t1,n1,N2,X2,t2,Jt2,M) is called optimal if the crossings
between connectors in M is minimized by $1 and t2 and, among the

 

i250

112 /§.IO'SIBUJHOIPJOJXO'SOIlBIIIJOJUIOIQ/ﬁ(1111] 111011 pop1201um0q

9IOZ ‘09 lsnﬁnv uo ::

Tanglegrams for rooted phylogenetic networks

 

tanglegrams minimizing this value, it can be drawn so as to minimize
the sum of reticulation crossing numbers for N1 and N2.

Let N1 and N2 be two rooted phylogenetic networks on X1 and
X2, respectively, and let M be a set of connectors between X1
and X2. For two linear orderings 711 and 712 of X1 and X2, the
number of crossings Cr(n1,rt2,M) among connectors in M can
be calculated as |{(a,b) EM ><M | a=(p,q),b=(x,y) with (p <7rx /\
q >7, y) V (p >7, x /\ q <7, y)} |. A heuristic that computes the reticulate
crossing number for a drawing of a rooted phylogenetic network is
described in (Huson, 2009).

3.2 Neighbor-net heuristic for tanglegrams

Let N1 and N2 be two rooted phylogenetic networks on X1 and X2,
respectively, and let M be a set of connectors between X1 and X2.
For the purposes of this paper, we will assume that M pairs the leaves
of the two trees in a one—to—one manner. (Note, however, that the
example shown in Figure 1 does not have this property.) If M pairs
two distinct taxa a and b, as for example in a host/parasite study,
then we identify the labels a and b with each other while computing
the tanglegram, but then distinguish between the two labels when
drawing the tanglegram.

In the following, we present a heuristic for obtaining an optimal
tanglegram for N1 and N2. We call this the NN-tanglegram approach.

In our approach, we ﬁrst compute a distance matrix H on the
total set of taxa X =X1 UX2 that reﬂects the topology of the two
networks N1 and N2, then apply the Neighbor—Net algorithm to H
to obtain an ordering 71' of X, and ﬁnally construct a tanglegram for
N1 and N2 based on 71'. In the following, we will assume that both
networks contain a single leaf connected to the root of the network
that is labeled by a special taxon ,0, which we will refer to as a formal
outgroup.

To compute a distance matrix on X, we need to construct a set
of splits for each of the two networks. We describe the process for
the network N1. For each tree edge e in N1 let C1(e) be the set of
all taxa that label a leaf that lies below e in N1. We deﬁne the split
associated with e as C(e) | X1 \C1 (e). Let 2(N1) denote the set of all
splits obtained in this way. We compute 2(N2) similarly and we then
deﬁne E = E(N1)|X1ﬂX2 U 2(N2)|X1nX2. (The restriction to X1 OX2
ensures the applicability of Theorem 3.5 if X1 75 X2).

We obtain the distance matrix H on X by setting the distance
between two taxa x and y equal to the number of splits that separate
the two taxa, where any split that occurs both for N1 and N2
is counted twice. In other words, we set H =D(E(N1)|X1nX2)—l—
D(E(N2)lx1nx2)-

In the simulation study in Section 5.1, we will also present the
results when using H’ =Dpath (N1)—I—Dpath (N2) as distance matrix,
where Dpath (Ni): {dxy} such that dxy is the length of the shortest
path between x and y in Ni. As we will see, this variant actually
performs better on networks than using splits—based distances.

We apply the Neighbor—Net algorithm to the distance matrix H
(or H’ in the case that the shortest path distance matrix is used) so as
to obtain a circular ordering {=(x1, ...,xn) of X. The ordering g“ is
computed in this way because this ensures that the NN-tanglegram
method returns the optimal solution under optimal conditions (see
Theorem 3.5). Let i denote the position of the formal outgroup taxon
,o in 4“. We obtain a linear ordering 71' of X by breaking the ordering
g“ at position i, that is, by setting n=(xi,xi+1,...,xn,x1,...,xi_1).
Given the ordering 71' of X, we now have to compute two embeddings

t1 and :2 for the forests .7-"(N1) and .7-"(N2) such that 71' is non—
interleaving with respect to $1 and :2. Given a rooted phylogenetic
network N and a node u of N, we use XN(u) to denote the set of
taxa that label the leaves below u.

To compute :1, we ﬁrst delete all reticulate edges in N1 to
produce the forest .7: (N 1 ). Then, for each T* e .7: (N 1 ), we determine
a topological embedding t* that minimizes the number of crossings
among connectors Cr(§*,n,M1d), where 5* is the ordering of X *
induced by the embedding t*. This optimization is easily solved in
a bottom—up traversal of each tree in .7: (N 1 ). Note that the place that
is assigned to a node v such that XN1 (10:0 or XN1 (ml/«(10X2 =0
in the the topological embedding of its parent is not relevant for
the computation of the number of crossings among connectors
Cr(§*,rt,M1d) and so can be chosen arbitrarily. The set of topological
embeddings for all trees T* in .7-"(N1) constitutes :1. To obtain :11
from :1, we add the taxa of X1 to 711 one by one, in such a way that
:11 remains non—interleaving w.r.t. t1 and the value of Cr(n1,rt,M1d)
is minimized. The ordering :2 is computed in exactly the same way
but using the network N2 instead of N1.

Let C(N) be the set of clusters associated with N. We say that
C (N) is interval-realizable with respect to 71' =(x1,x2, ...,xn) if each
cluster C in C(N) has the form {xp,xp+1, ...,xq}, for appropriately
chosen 1 5p 5 q 5 n. We have the following result:

LEMMA 3.4 (Interval realizability). Let N be a phylogenetic network
on X. If N has a rooted outer—labeled planar embedding 6 and n9
is the linear order on X that is deﬁned by 6, then C (N) is interval—
realizable with respect to 719.

This lemma is used to prove the following theorem:

THEOREM 3.5 (Zero crossings solution). Let N1 and N2 be two rooted
phylogenetic networks on X1 and X2, respectively and let M be a
set of connectors between X1 and X2. If a planar drawing exists for
the tanglegram of N1, N2 and M, then the NN—tanglegram heuristic
will ﬁnd a solution with zero crossings among connectors.

The proof of both results can be found in Appendix A. Note that
Theorem 3.5 ensures that, if an optimal tanglegram with cost zero
exists for two trees, then our algorithm will ﬁnd it, because a tree
does not contain any reticulate edges.

This is not true for networks. Indeed, in this case the Neighbor—Net
algorithm may have more than one optimal solution. Theorem 3.5
ensures that any linear ordering 71' computed as described in
Section 3.2 can be realized with zero crossings among connectors,
but it does not guarantee that the resulting drawing will have
zero crossings involving reticulate edges. For example, for the
two networks in Figure 4, both orders (a,b,c,d) and (b,c,d,a)
are circular with respect to H =D(E(N1))-l-D(E(N2)) and can be
obtained from the distance matrix H using Neighbor—Net. Both
orderings give a solution with zero crossings among connectors;
yet, while a planar drawing for (a,b,c,d) exists [see Fig. 4(a)],
a drawing respecting the ordering (b,c,d,a) will contain some
crossings involving reticulate edges and thus fail to be optimal [see
Fig. 4(b)]. However, if all optimal solutions of Neighbor—Net given
H can be considered, then the NN—tanglegram approach will ﬁnd the
solution with cost zero. In such a case, our algorithm can be used to
solve the planar layout (Lozano et al., 2008) or drawability problem
(Fernau et al., 2010) for two networks [solved in linear time for two
binary trees in Fernau et al. (2010)].

 

i251

112 /§.IO'SIBUJHOIPJOJXO'SOIlBIIIJOJUIOIQ/ﬁ(1111] 111011 pop1201um0q

9IOZ ‘09 lsnﬁnv uo ::

C.Scornavacca et al.

 

(a) 26... g

0000 Q
£0006!

ems

a me
“emg

0 000G

yQ 000?.

Fig. 4. A pair of networks for which our approach may fail to ﬁnd the Optimal
solution. (a) An optimal ordering and (b) an ordering that needs to be drawn
with at least one crossing.

3.3 Minimizing the reticulation crossing number and
drawing the tanglegram

The previous section describes a heuristic for computing an optimal
tanglegram. This heuristic aims at minimizing the crossings among
connectors but it does not try to minimize the reticulation crossing
numbers for N1 and N2. For example, if X17EX2 then multiple
choices of 711 and 712 can exist that minimize the number of
crossing among connectors. In such a case, one of them is chosen
at random, whether or not it happens to minimize the sum of
reticulation crossing numbers for N1 and N2 (see Deﬁnition 3.3).
In a forthcoming paper (Scornavacca and Huson, 2011), we will
describe a heuristic for minimizing this value and a method
for computing a concrete drawing of the optimized tanglegram
that tries to minimize the crossing involving reticulation edges
(as implemented in Dendroscope 3).

4 ALIGNMENT OF PHYLOGENETIC NETWORKS

The heuristic for calculating an optimal tanglegram for rooted
phylogenetic networks that we describe in Section 3.2 is easily
extended to a set of more than two rooted phylogenetic networks
or trees, simply by computing the matrix H based on splits from all
the networks or trees under consideration. This is implemented in
our program Dendroscope 3 and can be used to ‘align’ the taxa when
viewing a whole collection of networks or trees simultaneously.

5 VALIDATION

To validate the approach, we ﬁrst report on a simulation study that
we have undertaken and then apply the algorithm to a published
dataset to illustrate how the algorithm may be used in practice.

5.1 Simulation study

In the ﬁrst part of the simulation study, we compared our
implementation with the best available software for computing
tanglegrams of trees. In more detail, we compared against the
bb-Ist-sol algorithm, as it is the best performing algorithm of the ﬁve
presented in NOllenburg et al. (2009), and against the lh algorithm,
as it has similar performance to the other algorithms described in

Bansal et al. (2009), while being faster. Since these algorithms
only accept binary trees, we ﬁrst restricted our attention to binary
trees. We compared these two published methods against our NN-
tanglegram heuristic and two variants of it, which we will refer to
as NN-tanglegram+] S and NN-tanglegram+5S. These two variants
ﬁrst compute 711 and 712 as described in Section 3.2, then deﬁne 71'
as the order in restricted to the common taxa and ﬁnally use 71' to
compute the new orders :11 and 712 as described in Section 3.2. NN-
tanglegram+5S executes this step 5 times, alternating 711 and 712
to compute the new 71'. Since the NN-tanglegram heuristic performs
similarly on trees when using the splits—based distance H or the
shortest path distance matrix H’, we will present the results only for
the former variant. All runs were executed on a 2.53 GHz processor
with 4 GB of RAM.

For the ﬁrst dataset, which we will refer to as D1, we created 6
random binary trees on the same taxon set for ﬁve different sizes,
namely on 20, 60, 100, 140 and 180 taxa. This dataset contains 15
instances to solve for each taxon set. Each instance was formulated
as an ILP (integer linear program) as described in NOllenburg
et al. (2009) and then solved using lpSolve (freely available from
lpsolve.sourceforge.net/5.5/). The number of replicates considered
for each parameter setting was limited by the long running time of
the ILP solver. In the second dataset, D2, we created 10 random
binary trees for each of the 5 sizes listed above, ensuring in each
case that a tanglegram with zero crossings among connectors exists.
This dataset contains 45 instances to solve for each taxon set.

For each tanglegram and each method, we computed the
performance ratio (PR), that is, the ratio (cn+ 1) / (cnopt —l— 1), where
cn and cnopt are the computed and the optimum number of crossings
among connectors, respectively. The performance ratio values and
the average running time for each method are shown in Figure 5.

For both datasets, the best—performing method is bb-Ist-sol,
having the lowest PR values and the lowest average running
time. Note that this method is guaranteed to ﬁnd a solution
with zero crossings, if one exists (NOllenburg et al., 2009), just
like our NN-tanglegram heuristic [see Fig. 5(d)]. However, the
method is restricted to binary trees, unlike our method, which
also applies to multifurcating trees. On the ﬁrst dataset lh appears
to perform well and its PR values are comparable with those of
bb-Ist—sol. However, when the number of instances per taxon set
is increased (as in dataset D2), this method can perform very
badly for some instances [see Fig. 5(d)], although the average PR
values remain low. Moreover, the average running time of lh is
unacceptably high for use in an interactive visualization tool [on
average >100 s when the cardinality of the taxon set is 180, see
Fig. 5(a,c)].

Our new method, although designed for the general case of
networks, also performs well for binary trees, while the average
running time is low. Comparing the performance of NN-tanglegram
with NN-tanglegram+] S and NN-tanglegram+5S, we can see
that the swapping step, as expected, improves the PR values but
increases the average running time. However, swapping one time
(as done in NN-tanglegram+1S) is highly recommended because
the achieved improvement of the PR values is worth the small
increase in running time. In our implementation, the user can choose
how many times to swap or can abort the swapping procedure after
a given amount of time.

In the second part of the simulation, we studied the performance
of our methods on two different network datasets. For both

 

i252

112 /§JO'sieumoprOJIXO'soneumOJIuIOIq/ﬁdnq 111011 pop1201um0q

9IOZ ‘09 lsnﬁnv uo ::

Tanglegrams for rooted phylogenetic networks

 

 

   
    

 

 

 

 

   
    

 

 

 

(a) 1000 _ I I I I I I I
100 - 1h
bb—lst—sol ---x_-.
NN_tanglegram 
NN_tanglegram+ls .... 
NN_tanglegram+SS ---I-.-
A 10 _
m - .
E4 .
En ,,,,,,, -.4I
a) 1 - ....... -.AI- """"""""" I— I?
a ................... 
H ' r ‘ ’ ' I ' I I I I . . . . . . . gtﬂrztt' -------- --

(I) ’’’’’ -’   _ _ _ _ _ _ .

,w”! IIIIIII...I.-I-‘I"_".": — ‘ ' ' ' — — — _ _ - - _ -—-E

,w”  ' - - ' ‘ ‘ I (x _____________________ ___x_ _________ __

r’. IIIIIIIIIIIIIIIIIIIIII:._.::'. . . . ’ I I I ‘ ‘ x
o 01'?" IIIIIII x _I
-e‘Tx/
{'I_,.
0.001 I I . I I I I
20 40 60 80 100 120 140 160 130
number of leaves
(C) 1000 _ I I I I I I I
100 - 1h
bb—lst—sol -ux_m
NN_tanglegram 
,—~
1 _
U) 0 - I
‘5
E4
n:
o 1. I
{)1 ...... --n
(U _ _ _ _ _ _ . . . . - - - - "
H I I I I I I I I _ _ . ..
g ............ .- _
cu 0-1 — IIIII M _ . . . . I I I I I I I I I I I I III
I I I _ _ _ . . - - ' ' ‘ ' I ”;e_______________________e‘_____
 - ‘ ' ' I I g , . r
0.01 — I I I _ I _ . . — - - - . . . . — —’ _
z ' ‘ I g ,.x’ I
{I",.

0.001 I . . I I I I
20 4O 60 80 100 120 140 160 180

number of leaves

 

 

 

 

 

 2 I I I I I I I I I I
lh I:I
bb—lst—sol BECK]
NN_tanglegram m
NN_tanglegram+ls _
1 NN_tanglegram+5$ IE _
m 1_ _ _
a) 6
:3
H
«S
>
$3 1.4 - -
1.2 - -
1 III g I -..Ill I III I  I “Mill I
20 40 60 80 100 120 140 160 180 200
number of leaves
  I I I I I I I I I I

lh l=l
bb—lst-sol xxx:
NN_tanglegram m

PR values
3
O
I
I

 

 

 

 

 



20 40 60 80 100 120 140 160 180 200
number of leaves

 

Fig. 5. (3) Average running time (RT) and (b) performance ratio values (PR) for dataset D1. (c) Average running time (RT) and ((1) performance ratio values

(PR) for dataset D2.

datasets (D3 and D4), we created 15 random binary networks (not
necessarily bicombining) on the same taxon set for 5 different sizes,
namely on 20, 60, 100, 140 and 180 taxa, ensuring in each case that
a tanglegram with zero crossings among connectors exists. This
leads to 105 instances to solve for each taxon set. The two datasets
differ by the probability to add a reticulate edge between two nodes,
which is higher for D4. (This implies that D4 on average contains
more reticulations than D3 and thus is a more complicated dataset
than the latter.)

For both datasets, we compared the performance of NN-
tanglegram with NN-tanglegram+ IS and NN-tanglegram+5S. Since
the NN-tanglegram heuristic performs a lot better on networks
when using the shortest path distance matrix H ’ rather than the
splits—based distance H [see Figure 6(b), NN-tanglegram+IS vs
NN-tanglegram_C+IS], we will discuss the results only for the
former variant.

As expected, the PR values and average running times are higher
than for the binary tree datasets but still acceptably low for use in
an interactive visualization tool [see Fig. 6]. The PR values increase
both with the number of leaves and the number of reticulations
in the networks [see Fig. 6(b,d)]. The pattern of relations among
NN-tanglegram, NN-tanglegram+] S and NN-tanglegram+5S is the

same than for the tree datasets (i.e. the swapping step improves the
PR values but increases the average running time).

In general, although the average PR values remain low, the
methods can produce tanglegrams with high numbers of crossings
among connectors for some instances. Note that, when the number
of leaves in the networks is large, the crossing number can easily
be very high. For example, if the two networks under consideration
have 180 leaves each and if only one taxon is incorrectly placed at
the two different ends of the networks, then the crossing number
will be at least 179. Nevertheless, in this case the tanglegram may
still be useful for visualizing similarities and differences among the
two networks.

5.2 Application to published data

Persicaria is a genus of plants in the family Polygonaceae. In
(Kim and Donoghue, 2008), the authors present evidence of hybrid
speciations within this genus using chNA regions and nuclear ITS
sequences. The strict consensus tree from the most parsimonious
(MP) trees and the maximum likelihood (ML) tree were computed
and drawn superposed on each other for both the chNA and nuclear
ITS datasets. A tanglegram between the two superposed drawings

 

i253

112 /B.IO'SIBUJHOIPJOJXO'SOIlBIIIJOJUIOIQ/ﬁ(1111] 11101; pop1201um0q

9IOZ ‘09 lsnﬁnv uo ::

C.Scornavacca et al.

 

 

 

 

 

 

 

 

(a) 1000 I I I I I I I
100 _ NNtanglegram+so —I— _
NNtanglegram+Sl ---x__.
NNtanglegram+s5 
NNtanglegram_c+sl .... "Em"
A
(D
B
m
(D
0‘
«S
5.4
(D
>
(6
0.001 ' I I I I I I
20 40 60 80 100 120 140 160 130
number of leaves
(C) 1000 I I I I I I I
100 _ NNtanglegram+SO —I— _
NNtanglegram+Sl ---x__.
NNtanglegram+S5 
A
U)
v
El
m
(D
O1
(5
H
(D
>
«I
0.01 — _
0.001 ' I I I . I

 

 

 

number of leaves

I
20 40 60 80 100 120 140 160 180

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 5000 I I I I I I I I I I
4500 _ NNtanglegram+SO l:l _
NNtanglegram+Sl [ZZZ
NNtanglegram+SS m
4000 - NNtanglegram_C+Sl — '
3500 - -
m 3000 — —
(I)
I3 __
as 2500 - -
>
M 2000 - -
Cl-I
1500 - _
1000 - __ _
500 — I —
0 .I. ,1 I  I I I I I
20 40 60 80 100 120 140 160 180 200
number of leaves
 5000 I I I I I I I I I I
4500 _ NNtanglegram+SO i:l _
NNtanglegram+Sl Em
NNtanglegram+S5 m
4000 - _
3500 - -
m 3000 — —
(1)
3.
I6 2500 - -
>
M 2000 — —
ill
1500 - _
1000 - _
500 —  —
0 -.L.‘ I I I I I  I

 

 

 

20 40 60 80 100 120 140 160 180 200
number of leaves

Fig. 6. (3) Average running time (RT) and (b) performance ratio values (PR) for datasets D3. (c) Average running time (RT) and ((1) performance ratio values

(PR) for datasets D4.

(one for the chNA dataset and nuclear ITS dataset, respectively)
with crossing number among connectors 244 was shown. Here,
instead of superposing the drawing of the strict consensus MP tree
and the ML tree, we show both trees embedded in a network. The
tanglegram between the network obtained by combining the strict
consensus MP tree and the ML tree for the chNA dataset and
the one obtained by the nuclear ITS dataset is shown in Figure 7.
This tanglegram is much clearer than the original representation (see
Fig. 1 of Kim and Donoghue, 2008).

6 CONCLUSIONS

Tanglegrams are a useful tool for comparing rooted phylogenetic
trees. In this article, we have extended them to rooted phylogenetic
networks and have described a practical approach to their
computation. The simulation study proves that our new method,
although designed for the general case of networks, also performs
well for binary trees, while the average running time stays
low. Moreover, the performance of our method on networks is
good enough for use in an interactive visualization tool. Our
implementation in the popular tree—drawing program Dendroscope

will make tanglegrams for trees and networks easily accessible to
biologists and other users.

ACKNOWLEDGEMENTS

The authors would like to thank Mukul S. Bansal and Martin
NOllenburg for providing them with an implementation Of their
methods.

Conﬂict of Interest: none declared.

REFERENCES

Bansal,M.S. et al. (2009) Generalized binary tanglegrams: Algorithms and applications.
In BICoB ’09: Proceedings of the 1 st International Conference on Bioinformatics
and Computational Biology. Springer, Berlin, Heidelberg, pp. 114—125.

BOcker,S. et al. (2009) Afaster ﬁxed-parameter approach to drawing binary tanglegrams.
In 4th International Workshop of Parameterized and Exact Computation, V01. 5917
of LNSC, Springer, pp. 38419.

Bryant,D. and M0ult0n,V. (2004) Neighbor-net: an agglomerative method for the
construction of phylogenetic networks. Mol. Biol. Evol, 21, 255—265.

Bryant,D. et al. (2007) Consistency of the Neighbor-Net algorithm. Algorithms Mol.
Biol, 2, 8.

 

i254

112 /810'SIBurnOprOJIXO'soneumOJIuIOIq/ﬁdnq 111011 pop1201um0q

9IOZ ‘09 lsnﬁnv uo ::

Tanglegrams for rooted phylogenetic networks

 

P. arifolia
maackiana
meisneriana
sagittata
filiformis
Virginiana
amphibia.P2
amphibia.P1
careyi
accuminata
limbata
orientalis I
paraguayensns
hispida
glabra.P2
viscosa
nodosa

. Iapathilolia.P2
. Iapathifolia.P1
. Iapathifolia.P3
. senegalensis
. glabra.P1
ferruginea
Iomentosa
viscofera
pensylvanica
bicornis
segetum
mexicana
barbata
hirsuta.P2
hirsuta.P1
setacea
robustior
densiflora
hydropiperoides.P2
puritanorum
hydropiperoides.P3
hydropiperoides.P1
opelousana
minor.P2
minor.P1
punctata.P2
punctata.PI
hydropiper.P2
hydropiper.P1
pubescens
kawagoeana
maculosa
tinctoria
longiseta.P1
longiseta.P2
posumbu
macraniha
foliosa
taquetii
japonica
nepalensis
capitata

P. runcinata

     

ii

TUTUTUTUTUTUTUTUTUTUTTTUTUTUTUTUTUTUTUTUTUTUTUTUTUT’TUTUTUTUTUTUTHJ13131311131311???“7070703337370. .'U_'U_'U_'U_'U

 

P. arifolia
P. maackiana :I—|_I
P. meisneriana I
P. sagiitaia
P. filiformis —l
P. virginiana
P. amphibia.P2 —l
P. amphibia.P1 —'
P. careyi —|
P. accuminata
P. limbata :I—l'
P. paraguayensis
P. hispida —|
P. glabra.P2 —I
P. nodosa :
P. Iapathiiolia.P2
P. Iapathifolia.P1 —
P. Iapathifolia.P3
P. orientalis
P. viscosa
P. glabra.P1
P. ferruginea
P. senegalensis
P. tomentosa
P. pensylvanica
P. segetum
P. densiflora
P. bicornis
P. mexicana
P. viscofera
P. hirsuta.P2
P. hirsuta.P1
P. setacea
P. hydropiperoides.P2
P. robustior—
P. puritanorum
P. hydropiperoides.P3 3—
P. punctata.P2
P. hydropiperoides.P1 —
P. opelousana
P. punctata.P1

P. barbata : —

P. kawagoeana

P. minor.P2
P. minor.P1
P. hydropiper.P2
P. hydropiper.P1

P. pubescens
P. maculosa
P. tinctoria
P. longiseta.P1
P. longiseta.P2
P. posumbu
P. macrantha
P. foliosa
P. taquetii
P. japonica

P. nepalensis —|

P. capitata
P. runcinata:I—l

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Fig. 7. A tanglegram between the networks obtained by analyzing the anTS dataset (left) and the chNA dataset (right). For each dataset, the edges present
only in the ML tree or in the strict consensus MP tree, are shown as bold black lines, or bold dotted gray lines, respectively. Data from (Kim and Donoghue,

2008).

Buchin,K. et al. (2009) Drawing (complete) binary tanglegrams: Hardness,
approximation, ﬁxed-parameter tractability. In Proceedings of the I 6th International
Symposium on Graph Drawing, Vol. 5417 of LNCS, Springer, pp. 324—335.

Buneman,P. (1971) The recovery of trees from measures of dissimilarity. In Hodson,F.R.
et al. (eds) Mathematics in the Archaeological and Historical Sciences. Edinburgh
University Press, Edinburgh, UK, pp. 387—395.

Burt,A. and Trivers,R. (2008) Genes in Conﬂict: The Biology of Selﬁsh Genetic
Elements. 1st edn. Belknap Press of Harvard University Press, Harvard, USA.
Charleston,M. (1998) Jungles: a new solution to the host/parasite phylogeny

reconciliation problem. Math. Biosci., 149, 191—223.

Charleston,M.A. and Perkins,S.L. (2003) Lizards, malaria, and jungles in the caribbean.
In Page,R.D.M. (ed) Tangled Trees: Phylogeny, Cospeciation, and Coevolution. The
University of Chicago Press, Chicago, USA, pp. 65—92.

Dress,A.W.M. and Huson,D.H. (2004) Constructing splits graphs. IEEE/ACM Trans.
Comput. Biol. Bioinformatics, 1, 109—115.

Dwyer,T. and Schreiber,F. (2004) Optimal leaf ordering for two and a half dimensional
phylogenetic tree visualisation. In Australasian Symposium on Information
Visualisation, Vol. 35 of CRPIT, ACS, pp. 109—115.

Fernau,H. et al. (2005) Comparing trees via crossing minimization. In The 25th
Conference on Foundations of Software Technology and Theoretical Computer
Science, Vol. 3821 of LNSC, Springer, pp. 457—469.

Fernau,H. et al. (2010) Comparing trees via crossing minimization. J. Comput. Syst.,
76, 593—608.

Huson,D.H. (2009) Drawing rooted phylogenetic networks. IEEE/ACM Trans. Comput.
Biol. Bioinformatics, 6, 103—109.

Huson,D.H. and Scornavacca,C. (2011a) A survey of combinatorial methods for
phylogenetic networks. Genome Biol. Evol, 3, 23—35.

Huson,D.H. and Scornavacca,C. (2011b) Dendroscope 3 - a program for computing and
drawing rooted phylogenetic trees and networks. In preparation, software available
from: www.dendroscope.org.

Huson,D.H. et al. (2007) Dendroscope: an interactive viewer for large phylogenetic
trees. BMC Bioinformatics, 8, 460.

Huson,D.H. et al. (2011) Phylogenetic Networks: Concepts, Algorithms and
Applications. Cambridge University Press, Cambridge, UK.

Kim,S.-T. and Donoghue,M.J. (2008) Incongruence between chNA and anTS trees
indicates extensive hybridization within eupersicaria (polygonaceae). Am. J. Bot,
95, 1122—1135.

Lee,M.-M. and Stock,S. (2010) A multilocus approach to assessing co-evolutionary
relationships between Steinernema spp. (nematoda: Steinernematidae) and their
bacterial symbionts Xenorhabdus spp. (y-proteobacteria: Enterobacteriaceae). Syst.
Parasitol, 77, 1—12.

Lozano,A. et al. (2008) Seeded tree alignment. IEEE/ACM Trans. Comput. Biol.
Bioinformatics, 5, 503—513.

Machado,C.A. et al. (2005) Critical review of host speciﬁcity and its coevolutionary
implications in the ﬁg/ﬁg-wasp mutualism. Proc. Natl Acad. Sci. USA, 102
(Suppl. 1), 6558—6565.

Merkel,V. et al. (2010) Distribution and phylogeny of immunoglobulin-binding protein
G in Shiga toxin-producing Escherichia coli and its association with adherence
phenotypes. Infect. Immun, 78, 3625—3636.

N Ollenburg,M. et al. (2009) Drawing binary tanglegrams: an experimental evaluation. In
Proceedings of the Eleventh Workshop on Algorithm Engineering and Experiments
(ALENEX), SIAM, pp. 106—119.

Scornavacca,C. and Huson,D. (2011) Drawing phylogenetic networks with constraints
on the order of taxa. In preparation.

 

i255

112 /B.IO'SIBUJHOIPJOJXO'SOIlBIIIJOIIUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

C.Scornavacca et al.

 

Venkatachalam,B. et al. (2010) Untangling tanglegrams: comparing trees by their
drawings. IEEE/ACM Trans. Comput. Biol. Bioinformatics, 7, 588—597.

APPENDIX A
A.1 Proof of Lemma 3.4

To obtain a contradiction, assume that C(N) is not interval—realizable
with respect to an order 71' and there exists a rooted outer—labeled
planar embedding 6 such that 719 2 71'. Let C be a cluster in C(N) that
is not interval—realizable with respect to 71'. Then there exist three
taxa a,b,c€X such that a,b€ C, c¢C and a<7tc<7rb. Let vbe the
target node of a tree edge in N that represents C and let p1 and p2
two paths connecting v to the leaves labeled by a and b, respectively.
By deﬁnition of a rooted phylogenetic network, there exists a direct
path p3 connecting c to the root node ,0. Since any p3 cannot include
12, the Jordan curve theorem implies that p3 has to cross p1 or p2, a
contradiction.

A.2 Proof of Theorem 3.5

For ease of exposition, assume that X1 2X2 holds. Since both N1
and N2 can be represented by rooted outer—labeled planar graphs,
it follows from Lemma 3.4 that C(Nl) and C(Nz) are interval—
realizable for some orders :11 and 712 of X, respectively. From
the deﬁnition of E(-) we have that both 2(N1) and 2(N2) fulﬁll

Deﬁnition 2.2 with respect to 711 and 712 and thus are circular split
systems. Thus, by deﬁnition, D(E(N1)), D(E(N2)) and D(E(N1))—l—
D(E(N2)) are circular. It follows, from the consistency of Neighbor—
Net (Theorem 2.3), that the split set 2(N1)U 2(N2) is circular with
respect to the circular ordering 71' computed by the Neighbor—Net
algorithm. Note that also 2(N1) and 2(N2) are circular with respect
to 71' and thus the linear ordering 71' is by deﬁnition a circular ordering
for 2(N1) and 2(N2) too. The deﬁnitions of E(-) and of 71' imply that
the sets C (N 1) and C (N2) are interval—realizable with respect to 71'.

It remains to be established that the ordering in (similar for :12)
returned by the Neighbor—Net tanglegram heuristic is such that 711 2
71'. To establish this, we have to show that, if C (N 1) is interval—
realizable with respect to 71', then there exists an embedding $1 of
.7: (N 1) such that 71' is a non—interleaving order w.r.t. :1. Note that, for
each T* e .7-"(N1) on a taxon set X *, the cluster set C (T*) is a subset if
C (N1) and thus is interval—realizable with respect to 71'; second, C (T*)
is compatible. This implies that we can construct an embedding t*
of T* with 711* (T*) =n| 96* that can be drawn in such a way that no
two tree edges cross. Thus, the set of topological embeddings for all
trees T* in .7: (N ) constitutes a topological embedding $1 for .7: (N 1)
such that 71' satisﬁes condition (1) of Deﬁnition 3.1 w.r.t. :1. But
71' also satisﬁes condition (2) of Deﬁnition 3.1 w.r.t. :1, otherwise
C(N 1) would not be interval—realizable with respect to 71'. From these
observations, it follows that we can construct an embedding $1 for
the forest .7: (N 1) such that 71' is a non—interleaving order w.r.t. II as
described in Section 3.2. This concludes the proof.

 

i256

112 /B.IO'SIBUJHOIPJOJXO'SOIlBIIIJOIIUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

