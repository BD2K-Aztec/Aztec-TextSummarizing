Bioinformatics, 31 (24), 2015, 4026—4028

doi: 10.1093/bioinformatics/btv490

Advance Access Publication Date: 26 August 2015
Applications Note

 

 

Gene expression

HiXCorr. a portable high-speed XcO" engine for
high-resolution tandem mass spectrometry

Hyunwoo Kim1, Hosung J01, Heejin Park2'* and Eunok Paek2

1Department of Electronics and Computer Engineering and 2Department of Computer Science and Engineering,

Hanyang University, Seoul, Korea

*To whom correspondence should be addressed.
Associate Editor: Ziv Bar-Joseph

Received on March 26, 2015; revised on August 12, 2015; accepted on August 14, 2015

Abstract

Summary: Peptide identification is an important problem in proteomics. One of the most popular
scoring schemes for peptide identification is X00" (cross—correlation). Since calculating X00" is
computationally intensive, a lot of efforts have been made to develop fast X00" engines. However,
the existing XCOrr engines are not suitable for high—resolution MS/MS spectrometry because they
are either slow or require a specific type of CPU. We present a portable high—speed X00" engine for
high—resolution tandem mass spectrometry by developing a novel algorithm for calculating X00".
The algorithm enables X00" calculation 1.25—49 times faster than previous algorithms for 0.01 Da
fragment tolerance. Furthermore, our engine is easily portable to any machine with different types
of CPU because it is developed in C language. Hence, our X00" engine will expedite peptide identifi—

cation by high—resolution tandem mass spectrometry.

Availability and implementation: Available at http://isa.hanyang.ac.kr/HiXCorr/HiXCorr.html.

Contact: hjpark@hanyang.ac.kr

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

Proteomics (Wilkins et 61]., 1997) is the study of proteins, particu—
larly expression, structures, functions and interactions of proteins.
Because proteins play important roles in a human body, correct pro—
tein (sequence) identification (Steen et 61]., 2004) is very important.
High-throughput protein identification is generally done by cleaving
a protein into peptides, getting tandem mass (MS/MS) spectra of the
peptides and analyzing the spectra to identify peptide sequences.

SEQUEST (Eng et 61]., 1994) is one of the most widely used
computer programs for peptide identification from MS/MS spectrum
analysis. It compares an experimental spectrum with theoretical spec—
tra computationally created from sequences in peptide database, and
finds the theoretical spectrum most similar to the experimental spec—
trum. To measure the similarity between the theoretical and experi—
mental spectra, SEQUEST uses a sophisticated scoring scheme XCOfr
(cross—correlation).

However, calculating XCOrr can be very slow and consumes most
of the running time of SEQUEST. Thus, a lot of efforts have been

made to overcome this speed issue. The original SEQUEST used fast
Fourier transform algorithm (Cormen et 61]., 2001) to make the
XCOrr calculation faster. Later, Crux (Eng et 61]., 2008) improved the
calculation speed of XCOrr by using a precomputation table, which is
also used in modern SEQUEST and TurboSEQUEST. Faster XCOrr
calculation is performed by Tide (Diament and Noble, 2011). It was
optimized for x86 machine by including the x86 assembly code.
Later, a portable Tide was developed in C language with exact
P—value computation capability. (Hobert and Noble, 2014). To dis—
tinguish these two Tide versions, we will call the earlier version with
x86 assembly code Tide-x86 and the later portable version Tide-C.
Modern processors have multicores and support multithreading.
Comet (Eng et 61]., 2013), an open—source MS/MS search tool by
Xcorr, supported multithreading for XCOfr calculation. Thus, the
more processors and cores a machine has, the faster the Comet runs.

Nowadays, more and more spectra are being acquired by high-
resolution mass spectrometers. For example, Q—Exactive Orbitrap
hybrid mass spectrometers (Thermo Scientific, Bremen, Germany)

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 4026

9mg ‘09 1sn3nv uo sopﬁuv s01 111110;th aIo Amie/xtqu 112 /§.IO'S[BU.IHO[p.IOJXO'SOUBIHJOJUIOIQ/ﬁ(1111] 11101; popeommoq

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

HiX Corr: a portable high-speed Xcorr engine 4027
la} 151 lb} {51
1330 _ Tide-C BUD _ Cornell-Sparse
- - - - - - Tide-IBIS. C “'H'
'I'EiUU — TiWHi Tmﬂ _ 0m
1400 — BUD —
1200 — 5m _
1000 a
400 —
BUD —-
EDD _ 301] —
400 — 2'3” '
EDD —' mg _
D_ _...___..._....------I--- '--- U—
l r I l l I 1 | r 1 l l I r l l
1 0.5 0 2 0.1 0.05 0.02 0.01 0.000 0.002 0.001 “333' 0.00 0.02 0.01 0.000 0.002 0.001 “333

Fig. 1. (a) Compares the total running times of Tide-C, Tide-x86 and Tide-Hi and (b) compares the total running times of Comet-Sparse and Comet-Hi. The MS/MS
data were generated by the Clinical Proteomic Tumor Analysis Consortium (NCl/NIH) and are explained in detail in the Supplementary Data

generate massive MS/MS high—resolution spectra whose fragment ion
mass accuracy is within 0.01 Da. In addition, ultra high-resolution
spectra whose fragment ion mass accuracy is <0.01 Da are expected
to be generated in the near future. For high—resolution MS/MS spec—
tra, calculating XCOfr becomes much slower and consumes most of the
running time of peptide identification program. For example, the
XCOfr engines in Tide-x86 and Tide—C run 6.6 and 20 times slower,
respectively, when the fragment tolerance is 0.01 Da than when the
tolerance of 0.1 Da (Fig. 1a and Supplementary Table S1). Comet
shows similar behavior as the resolution gets higher (Fig. 1b,
Supplementary Table S2, and Supplementary Fig. S1).

The existing Xcorr engines run slower for high—resolution spectra
because they require more memory as the resolution gets higher:
They create an O (m/f)—sized mass bin array for XCOrr calculation
where m is the precursor mass and f is the fragment ion mass accur—
acy. For example, for a low—resolution spectrum whose precursor
mass is 1000 Da and fragment tolerance is 1 Da, they create an array
whose size is around 1000. However, for a high—resolution spectrum
whose precursor mass is 1000 Da and fragment tolerance is 0.01
Da, they create an array whose size is around 100 000. Comet sug—
gested a partial solution for this. When it runs with
“use_sparse_matrix:1” in the parameter file, it first creates a huge
mass bin array and then compresses the array. We will call this
Comet-Sparse.

2 Results

In this article, we present a portable hi—speed XCOfr engine, which
does not create a mass bin array altogether, instead, calculates XCOfr
directly from the peak list. Thus, it runs in 0(1)) time where p is the
number of peaks in a spectrum, while all the previous engines are
based on XCOfr algorithms running in O(m/f) time where m is the
precursor mass and f is the fragment tolerance (pseudocodes are
available in the Supplementary Data).

We compared our XCOfr engine with previous engines on a
machine with an Intel Core i7—3770K CPU (3.50 GHz) and 32 GB
RAM under the CentOS 6.6 operating system and the GNU C
compiler 4.4.7. First, we implanted our XCOfr engine into Tide—C
and named it Tide—Hi. We compared Tide—Hi, with Tide—C, and
Tide—x86. Since Tide—x86 does not calculate the exact P—value, we
compared them without exact P—value calculation. Figure 1a and
Supplementary Table 81 show that Tide—Hi is 49 times faster than
Tide—C in XCOfr calculation and 45 times faster in total running time
when the fragment tolerance is 0.01 Da. The running time gap
between Tide—Hi and Tide—C gets bigger as the resolution gets
higher. Tide-Hi is even 1.25 times faster than Tide—x86 in both

XCOfr calculation and total running time for 0.01 Da fragment
tolerance. (Note that Tide—Hi is developed in C language and
Tide—x86 includes x86 assembly code.) Second, we implanted our
XCOrr engine into Comet—Sparse and named it Comet—Hi. (Comet
without sparse option requires much more memory to run on high-
resolution data.) Figure 1b and Supplementary Table S2 show that
Comet—Hi runs 2.4 times faster than Comet—Sparse for 0.01 Da frag—
ment tolerance when eight threads were enabled. The gap between
Comet—Hi and Comet—Sparse also gets bigger as the resolution gets
higher when eight threads were used. Supplementary Figure 81
shows similar patterns for one, two and four threads.

3 Conclusion

We present a portable high—speed XCOrr engine for high-resolution
tandem mass spectrometry by developing a novel algorithm, which
enables XCOfr calculation 1.25—49 times faster than before for 0.01
Da fragment tolerance. When the fragment tolerance is 0.001 Da,
our engine runs 1000 times faster than Tide—C’s XCOfr engine, 20
times faster than Comet—Sparse’s and 11 times faster than Tide—
x86’s XCOrr engine (Fig. 1 and Supplementary Data). Furthermore,
our engine is easily portable to almost every machine because it is
developed in C. Optimizing our engine for x86 machines by embed—
ding an x86 machine code can be a future research topic. Since
XCOfr score is widely used in peptide identification, this article may
be useful for the community. Finally, we did not trade correctness
for efficiency. Our XCOfr engine calculates the same XCOfr score as
Tide and Comet do (Supplementary Theorem 2).

Funding

This work was supported by Basic Science Research Program through the
National Research Foundation of Korea (NRF) funded by the Ministry of
Education, Science and Technology (2012-0006999) and also by the National
Research Foundation of Korea [NRF-2012M3A9B9036676, NRF-
2014R1A2A1A1 1054147, NRF-2012M3A9D1054452].

Conﬂict of Interest: none declared.

References

Cormen,T.H. et al. (2001) Introduction to Algorithms, 2nd edn. MIT Press,
Cambridge, MA.

Diament,B.J. and Noble,W.S. (2011) Faster SEQUEST searching for peptide
identiﬁcation from tandem mass spectra. ]. Proteome Res, 10, 3871—3879.

91% ‘09 1sn3nv uo sopﬁuv s01 111110;th aIo Amie/xtqu 112 /§.IO'S[BU.IHO[p.IOJXO'SOUBIHJOJUIOIQ/ﬁ(1111] 11101; popeommoq

4028

H. Kim et al.

 

Eng,].K. et al. (1994) An approach to correlate tandem mass spectral data of
peptides with amino acid sequences in a protein database. ]. Am. Soc. Mass
Spectrom., 5, 976—989.

Eng,].K. et al. (2008) A fast SEQUEST cross correlation algorithm.
]. Proteome Res., 7, 4598—4602.

Eng,].K. et al. (2013) Comet: an open-source MS/MS sequence database
search tool. ]. Proteomics, 13, 22—24.

HobertJJ. and Noble,W.S. (2014) Computing exact p-Values for a cross-correlation
shotgun proteomics score function. ]. Mol. Cell. Proteomics, 13, 2467—2479.

Steen,H. et al. (2004) The ABC’s (XYZ’s) of peptide sequencing. Nat. Rev.
Mol. Cell Biol., 5, 699—711.

Wilkins,M.R. et al. (1997) Proteome Research: New Frontiers in Functional
Genomics, 1st ed. Springer, New York.

91% ‘09 1sn3nv uo sopﬁuv s01 111110;th aIo Amie/xtqu 112 /§.IO'S[BU.IHO[p.IOJXO'SOUBIHJOJUIOIQ/ﬁ(1111] 11101; popeommoq

