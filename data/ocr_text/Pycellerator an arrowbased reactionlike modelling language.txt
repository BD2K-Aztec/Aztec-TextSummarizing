Bioinformatics, 32(4), 2016, 629—631

doi: 10.1093/bioinformatics/btv596

Advance Access Publication Date: 26 October 2015
Applications Note

 

Systems biology

Pycellerator: an arrow-based reaction-like
modelling language for biological simulations

Bruce E. Shapiro1'* and Eric Mjolsness2

1Department of Mathematics, California State University, Northridge, CA 91330, USA and 2Department of Computer
Science, University of California, Irvine, CA 92697, USA

*To whom correspondence should be addressed.
Associate Editor: Jonathan Wren

Received on July 12, 2015; revised on September 19, 2015; accepted on October 12, 2015

Abstract

Motivation: We introduce Pycellerator, a Python library for reading Cellerator arrow notation from
standard text files, conversion to differential equations, generating stand-alone Python solvers,
and optionally running and plotting the solutions. All of the original Cellerator arrows, which repre-
sent reactions ranging from mass action, Michales—Menten—Henri (MMH) and Gene-Regulation
(GRN) to Monod—Wyman—Changeaux (MWC), user defined reactions and enzymatic expansions
(KMech), were previously represented with the Mathematica extended character set. These are
now typed as reaction-like commands in ASCII text files that are read by Pycellerator, which in-
cludes a Python command line interface (CLI), a Python application programming interface (API)
and an iPython notebook interface.

Results: Cellerator reaction arrows are now input in text files. The arrows are parsed by
Pycellerator and translated into differential equations in Python, and Python code is automatically
generated to solve the system. Time courses are produced by executing the auto-generated
Python code. Users have full freedom to modify the solver and utilize the complete set of standard
Python tools. The new libraries are completely independent of the old Cellerator software and do
not require Mathematica.

Availability and implementation: All software is available (GPL) from the github repository at
https://github.com/biomathman/pycellerator/releases. Details, including installation instructions
and a glossary of acronyms and terms, are given in the Supplementary information.

Contact: bruce.e.shapiro@csun.edu

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

 

Cellerator describes biological interactions with a reaction-like
arrow-based input language. Input strings are converted into differ-
ential equations and integrated to produce numerical time-course
predictions using Mathematica (Shapiro et al., 2003). Extensions
include Cellzilla for two-dimensional tissue simulation (Shapiro
et al., 2013) and KMech for exact enzymatic expansion (Yang
et al., 2005).

There are many tools that convert reactions to differential equa-
tions and solve them, particularly in Python, but they do not use an
arrow-based language in the same manner as Cellerator. Examples

include PySCeS (Olivier et al., 2004), which has its own text model-
ing language; PyDSTool (Clewey, 2012) (for hybrid systems); and
pybrn (pybrn. sf .net, for SBML-like structures). Perhaps the
closest conceptually to Pycellerator are PySB (Lopez et al, 2013) and
SBML shorthand (Wilkinson, 2011). PySB is a rule-based system
with a collection of text language rules that are merged into Python
commands; models are built as Python programs. SBML Shorthand
is not a simulator; it is a pre-processor for converting models into
SBML, in which each reaction is represented by a single line of text.
In addition, a number of popular stochastic simulation tools are also
implemented in Python.

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 629

9mg ‘09 isnﬁnV uo seleﬁuV socl ‘erulomeg JO AirSJQAru [1 112 [3.10811211an[plOJXO'SODBIILIOJIITOTQ/ﬂ(11111 wort pepeolumoq

630

B.E.Shapiro and E.Mjolsness

 

Pycellerator also provides a simulation, modelling, programming
and analysis interface. In Pycellerator the modelling language corres-
ponds to (and extends) the arrow language introduced in Cellerator.
Each arrow corresponds to a Cellerator arrow, but it can now by
reprsented with ASCII arrow-like characters. The Pycellerator li-
brary provides a command line interface (CLI), an application pro-
gramming interface (API) and an iPython notebook interface (Perez
and Granger, 2007), so that users have a choice of Python program-
ming environments. Mathematica is not required.

2 Approach

Simulations require a model file (Supplementary Fig. S1), which is a
text file divided up into sections representing reactions, rate con-
stants, initial conditions and functions. Alternatively, models may
be generated from (or saved as) SBML (Hucka et al., 2003) or as leg-
acy Mathematica files. The model is parsed, converted to differential
equations and Python code is generated to perform the simulation.
This auto-generated code may either be run and plotted within the
notebook (Fig. 1) or from the command line, and is a completely
stand-alone program (Supplementary Fig. S4).

Within a model file arrows are enclosed in square brackets; the ca-
nonical Cellerator form becomes [x- >Y,k] where the typewriter
symbols — > replace the fancier —>. When several species are involved,
expressions like e1 x1+e2 X2 + - -- and f1 Y1+ f2 Y2 + - -- can be
used on the left and right hand side of the arrow, where e i and fj are
the before and after stoichiometries, The interpreter converts each
reactant Uj (with its stoichiometry) to a differential equation term
using mass action kinetics, e.g. U/ = 2 [(fi — e]-)kXi1 X32 - - 

reactlons
Additional text forms exist for all Cellerator arrows, e.g. catalyzed re-
actions, MMH, Hill, S-systems, GRN, user-defined arrows and all
KMech reactions (see Supplementary Tables Sl—S3).

Built-in functions allow the user to inspect the differential equa-
tions, generate simulation code and run a simulation or parameter
scan. In addition, standard Python packages (e.g. pyplot, numpy,
scipy, sympy) can be used to analyze the results of the simulation.

H:  MAP“. Lamcnechpointammanﬂa agnlauloeavadll
HI:- I: :I I 'JIIO'I'II' Inst-1 6-: Hen-cl E-rL-H.‘
 a: rat, + 4- H I a Code delTauﬂpaI-NME j
“APR with Oscillations
In [1]: fro: tellerator inpart telleratnr as c

impart mutplntlib.pypl.nt as plt
‘rmatplotlih in'Line

In [2]: t, H. 5 = 1:.Solvel"MAFlt.mode1', step=1ﬂ. duration=luﬂﬂm
ax1=:.Plnt'irarslt.v.s.I‘K3"."K2p‘. "Kpp"]. size={T.2}i
Lims=:o,moon,o,lmi, bg=”rll1it-e",
labels={"time". "val.ue"."Dsc1I.I.-:T.J.ans Due to PuLse StimuL-ﬁllnn"])

ﬂmllatluns Due to Pulse ﬁllmulatlon

 

 

 

 

 

value
aaessé

 

 

 

In [3]: :.Pr1nt|:l‘lJE5 ‘HAFK.m0I:IEL"

fnff =l.an1l:I-I:la 1: :-B.5'It - EBEE.BJ'[It - 59311.31"? + 11"I'9-5II + B.

fen = Lambda t :lEI.5*t - 3?4.51*llt - ?5EI.EI**2 — li“{-E.5]- * 9.5
K2p_it3p' - ﬂp‘lﬂp‘aB - K2p_I{3p*I:E-I - K2p_I{EIp*ltI-Iu

KPD' = .KJPl-l‘ltII'EHaS -I III? K3n‘l-cT-J . K?n*l£.‘-ln*a3 + Inn HPPH'IdEI + Inn Hﬁn'

Fig. 1. Sample output (cutoff) for simulating oscillations in a MAP kinase cas-
cade. This model is structurally identical to (Huang and Ferrell, 1996) with
two modifications: time-dependent input and a competitive feedback reac-
tion. A similar model was proposed by (Kholodenko, 2000), and oscillations
have been observed in yeast by (Hilioti et al., 2008). The model file and output
code are shown in Supplementary Figures 81 and S4

3 Methods

The work ﬂow is summarized in Supplementary Figure 52. Input
files are parsed using the pyparsing package, which allows the
grammar to be specified in BNF. Reactions are converted into a
Python reaction class that is used for all subsequent data process-
ing. Conversion into differential equations utilizes the sympy sym-
bolic processing package. Flux models use pulp, the Python linear
programming toolkit. Simulation code is generated and saved as a
Python program using the odeint solver in scipy. This solver is a
wrapper for LSODA (Hindmarsh, 1983) and automatically switches
between stiff (BDF) and non-stiff (Adams) methods, depending on
the nature of the problem. The user has full access to the code and
can change any desired parameter of the solver. This stand-alone
code can be run as a separate program from the command line,
wrapped within another program, or run automatically using eval.
Default is to output a numpy array.

4 Discussion

Pycellerator variables may be specified using an array index notation
to represent multiple compartments or multi-stage cascades. A pos-
sible future extension to the software would be two and three di-
mensional tissue based implementations similar to Cellzilla (Shapiro
et al., 2013). Dynamical grammars can also be implemented using a
more expressive notation that makes this modelling paradigm sig-
nificantly more powerful (Mjolsness, 2013). Rule-based models,
graph grammars and hybrid systems, for example, could be
automaticallygenerated using the techniques we have described
here.

5 Conclusion

The Cellerator arrow notation for specifying biological interactions
has been implemented in a human-readable text-based language.
Parsers could be written in any language. Extensible open source
Python libraries are provided for CLI, API and notebook support.
The iPython notebook provides Pycellerator with a very convenient
front end for modelers who want to combine code, text, markup
and figures together in single documents. This is particularly useful
for training researchers. The libraries can be used either as a front-
end to produce or interact with other solvers or as end-user solvers
in of themselves.

Funding

E.M. was supported by NIH grants R01 GM086883 and R01 HD073179,
and by the United States Air Force under Contract No. FA8750-14-C-0011
under the DARPA PPAML program.

Conﬂict of Interest: none declared.

References

Clewley,R. (2012) Hybrid Models and Biological Model Reduction with
PyDSTool. PLoS Comp. Biol., 8, e1002628.

I-Iilioti,Z. et al. (2008) Oscillatory phosphorylation of yeast Fus3 MAP kinase
controls periodic gene expression and morphogenesis. Curr. Biol., 18, 1700—
1706.

Hindmarsh,A.C. (1983) ODEPACK: a systematized Collection of ODE
Solvers. IMACS Trans. Sci. Comp, 1, 55—64.

Huang,C.F. and Ferrel, ].E. (1996) Ultrasensitivity in the mitogen-activated
protein kinase cascade. Proc. Natl Acad. Sci. USA, 93, 10078—10083.

9mg ‘09 isnﬁnV uo seleﬁuV socl ‘erulomeg JO AirSJQAru [1 112 ﬂJO'sleumo[pJOJXO'soueuuogurorq/ﬁdnq wort pepeolumoq

Pycellerator

631

 

Hucka,M. et al. (2003) The systems biology markup language (SBML): a me-
dium for representation and exchange of biochemical network models.
Bioinformatics, 19, 513—523.

Kholodenko,B.N. (2000) Negative feedback and ultrasensitivity can bring
about oscillations in the mitogen-activated protein kinase cascades. Eur. ].
Biochem, 267, 1583—1588.

Lopez,C.F. et al. (2013) Programming biological models in Python using
PySB. Mol. Syst. Biol., 9. doi:10.1038/msb.2013.1

Mjolsness,E. (2013) Time-ordered product expansions for computational sto-
chastic systems biology. Phys. Biol., 10, 035009.

Olivier,B.G. et al. (2004) Modelling cellular systems with PySCeS.
Bioinformatics, 21, d5 60—d5 6 1.

Pérez,F. and Granger,B. (2007) IPython: a system for interactive
scientiﬁc computing. Comput. Sci. Eng, 9, 21—29. doi:10.1109/MCSE.
2007.53.

Shapiro,B.E. et al. (2003) Cellerator: extending a computer algebra system to
include biochemical arrows for signal transduction simulations.
Bioinformatics, 19, 677—678. doi: 10.1093/bioinformatics/btg042.

Shapiro,B.E. et al. (2013) Using cellzilla for plant growth simulations at the
cellular level. Front. Plant Sci., 4. doi: 10.3389/fpls.2013.00408

Wilkinson,D. (2011) Stochastic Modeling for Systems Biology. CRC Press,
Boca Raton.

Yang,C.-R. et al. (2005) An enzyme mechanism language for the
mathematical modeling of metabolic pathways. B ioinformatics, 21, 774—780.

9mg ‘09 1sn8nV uo seleﬁuV socl ‘121u10111123 10 A11819Aruf1 112 /810'S{12umo[p101x0'831112u1101urorq/ﬁd11q 111011 pepeolumoq

