ORIGINAL PAPER

Vol. 26 no. 13 2010, pages 1637-1643
doi: 10. 1093/bioinformatics/btq240

 

Systems biology

Advance Access publication May 6, 2010

Polynomial algebra of discrete models in systems biology

Alan Veliz-Cuba‘, Abdul Salam .Jarrahlr2 and Reinhard LaubenbacherW

1Virginia Bioinformatics Institute, Department of Mathematics, Virginia Polytechnic Institute and State University,
Blacksburg, VA, USA and 2Department of Mathematics and Statistics, American University of Sharjah,

Sharjah, UAE

Associate Editor: John Quackenbush

 

ABSTRACT

Motivation: An increasing number of discrete mathematical models
are being published in Systems Biology, ranging from Boolean
network models to logical models and Petri nets. They are used
to model a variety of biochemical networks, such as metabolic
networks, gene regulatory networks and signal transduction
networks. There is increasing evidence that such models can capture
key dynamic features of biological networks and can be used
successfully for hypothesis generation.

Results: This article provides a unified framework that can aid the
mathematical analysis of Boolean network models, logical models
and Petri nets. They can be represented as polynomial dynamical
systems, which allows the use of a variety of mathematical tools
from computer algebra for their analysis. Algorithms are presented
for the translation into polynomial dynamical systems. Examples are
given of how polynomial algebra can be used for the model analysis.
Contact: alanavc@vt.edu

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on January 29, 2010; revised on April 25, 2010; accepted
on April 28, 2010

1 INTRODUCTION

Finite dynamical systems, that is, discrete dynamical systems with a
ﬁnite state space, have been used extensively in systems biology
to model a variety of biochemical networks, such as metabolic
networks, gene regulatory networks and signal transduction
networks. For many such networks, the available data quantity
and quality is not sufﬁcient to build detailed quantitative models
such as systems of ordinary differential equations, which require
many parameters that are frequently unknown. In addition, discrete
models tend to be more intuitive and easily accessible to life
scientists. There is ample evidence that such models can capture
key dynamic features of biological networks and can be used
successfully for hypothesis generation (G.Bhardwaj et al., submitted
for publication; Saez—Rodriguez et al., 2009). Boolean networks
and their generalization, the so—called multistate logical models
(Thomas, 1973; Thomas and D’Ari, 1989), are the main types
of ﬁnite dynamical systems that have been used successfully in
modeling biological networks (e. g. Albert and Othmer, 2003; Barrett
et al., 2005; Espinosa—Soto et al., 2004; Faure et al., 2006; Li et al.,
2004; Mendoza et al., 1999; Saez—Rodriguez et al., 2009; Samal and
Jain, 2008). Petri nets have also been shown to be a good modeling

 

*To whom correspondence should be addressed.

paradigm for this ﬁeld (e.g. Chaouiya et al., 2008; Formanowicz
et al., 2007; Grunwald et al., 2008; Kielbassa et al., 2009). Together,
these model types represent a large class of discrete models in
systems biology, which are capable of simulating deterministic as
well as stochastic processes.

Several tools and techniques have been developed to simulate
and analyze discrete models. For logical models, the open—source
software GINsim (http://gin.uniV—mrs.fr) is available, and for Petri
nets, the user has access to a wide variety of software. The
laboratory of M. Heiner provides software with a particular focus
on applications to systems biology (http://www—dssz.informatik.tu—
cottbus.del). Analysis tools for logical models, including Boolean
networks, are described in Naldi et al. (2007). In addition to a variety
of simulation and Visualization tools, other graph theoretic analysis
tools are available for the identiﬁcation of steady states and strongly
connected components of the regulatory graph. There are algorithms
to compute dead states (steady states), as well as T— and P—invariants,
which can be computed Via linear algebra methods. A survey of the
use of Petri nets in systems biology is given by Peleg et al. (2005).

The purpose of this article is to describe a mathematical
framework that encompasses both types of models and makes
accessible a broad range of mathematical tools for model analysis,
in order to complement existing tools in these domain areas. The
fundamental observation underlying this framework is that logical
models and k—bounded Petri nets are particular instantiations of
what we shall call ‘algebraic models,’ i.e. time—discrete dynamical
systems

f=(f1,...,fn):IF”—>IF”

where each coordinate function f,- is a function of the n variables
x1,...,xn, each of which takes on values in a ﬁnite set IF with
algebraic structure, and each f,- is a polynomial. Aside from the
mathematical simplicity of their deﬁnition, an important feature of
polynomial dynamical systems is that one can employ a number of
mathematical tools for their analysis. For our purposes, the principle
tool is the capability to symbolically solve systems of nonlinear
polynomial equations quite efﬁciently. This can be used, for instance,
to compute the steady states and other features of an algebraic model.

We give algorithms that translate both logical models and Petri
nets into this framework. Our algorithms are compatible with the
algorithm in Chaouiya et al. (2008), which translates logical models
into Petri nets. We furthermore provide several examples, using
models from the literature, of how this translation can be used to
analyze their dynamic properties.

The article is organized as follows. In Section 2, we brieﬂy
describe polynomial dynamical systems (PDSs). We then show how
to use the algebraic framework in the analysis of logical models and

 

© The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org 1637

112 /B.IO'SIBUJHOIPJOJXO'SOIlBIHJOJUIOIQ/ﬁdnq 11101; popeoprmoq

9IOZ ‘Ig lsnﬁnv uo ::

A. VeIiz-Cuba et aI.

 

k—bounded Petri nets in Sections 3 and 4, respectively; furthermore,
we present concrete examples for each. We close with a discussion
in Section 5.

2 METHOD

We consider models of biological systems, such as biochemical networks
with n interacting molecular species, whose states can be described by an
n—tuple with entries from a ﬁnite set IF. The model consists of a set of rules
that allow the system to evolve from one state to the next, so that it can be
represented as a time—discrete dynamical system f : IF” —> IF”. Both logical
models and k—bounded Petri nets are of this form. For example, in a model
of a gene regulatory network, the set IF is {0,1}, representing the state of a
gene as either ON (1) or OFF (0).

If we consider f only as a set function, then there are few mathematical
tools that can help to analyze f . One way to introduce mathematical structure,
and thereby mathematical tools to study f, is by imposing the structure of a
number system on IF, akin to the introduction of a coordinate system in afﬁne
space, which gives access to analytical methods in geometry. It can be shown
that this can be done whenever the cardinality of IF is a power of a prime
number, and we will show in this article that it can always be accomplished
in the cases of interest here (we will consider |IF| to be a prime number to
simplify the notations).

It is worth pointing out that this algebraic structure is used heavily in the
case of Boolean networks. The evaluation of Boolean functions uses the fact
that IF = {0, 1} is equipped with an addition, where 0 is the additive identity,
and with a multiplication, where 1 is the multiplicative identity. The two are
connected through the rule 1+1 = 0.

Once IF carries such a structure, we can make use of a fundamental
property of ﬁnite ﬁelds: Let h:IF”—>IF be a function. Then, there exists
a polynomial g:IF” —> IF such that h(x)= g(x) for all xe IF”. One can
ﬁnd g using the formula g(x)=zcdnnh(c)nj’;1(1—(xj—cj)P-1), where
the right—hand side is computed modulo p. We will write h, h(x) or
ZCGFnh(c)HJ'7:1(I —(xj—cj)p_1), depending whether or not there is the
need to specify x or the polynomial form of h.

Thus, we can represent f via its coordinate functions: f 261,...,fn):
IF” —> IF”, where each f,- is a polynomial function, so that evaluation and
analysis off can be done using polynomial arithmetic over IF. We shall call f
a PDS over IF of dimension n. In the next sections, we will show that logical
models and bounded Petri nets can be represented as PDSs. One can then
use powerful symbolic computation software, from open source specialty
packages such as COCOA (http://cocoa.dima.unige.it/), Singular (http://www
.singular.uni—kl.de) and Macaulay2 (http://www.math.uiuc.edu/Macaulay2)
to general commercial packages such as Mathematica and Maple. In this
article, we will use Macaulay2 for all computations.

3 ALGORITHM FOR LOGICAL MODELS

Logical models have been used for modeling biological phenomena
and have been useful for obtaining valuable insight and qualitative
information (Thomas and D’Ari, 1989). Such analysis is based
on the topology of the network and the type of regulation of the
different interactions in the network, which are believed to be the key
features that determine dynamical properties (Albert and Othmer,
2003; Thomas and D’Ari, 1989). Logical models have the advantage
of being intuitive and relatively simple to construct, even with no
information about reaction rates or functionality, and still keeping
qualitative information (Albert and Othmer, 2003). However, their
analysis is not a trivial task. For example, the problem of ﬁnding the
steady states of a logical model is NP—complete, that is, it is one of
the hardest problems in the nondeterministic polynomial—time class
(even to determine the existence of steady states is NP—complete;
Zhao, 2005).

3.1 Deﬁnition of logical models

There are several ways to deﬁne logical models (Chaouiya et al.,
2008; Comet et al., 2005; Naldi et al., 2007), and here we use the
deﬁnition given in Naldi et al. (2007).

DEFINITION 3.1. A logical model is a triple (V, EJC), where:

(1) V={v1,...,vn} is the set of vertices or nodes. Each vi has
a maximum expression level, mi. The set S =[0,m1] X  ><
[0,mn] (Cartesian product) is called the state space of the
logical model and its elements are called states.

(2) 5 is the set of arcs. The elements of 5 have the form (vi,vj,6),
where 1 56 gm,- is called a threshold for (vi,vj). Let 1(1):
{v : (v,vj,6) E 5}, called input of vj, be the set of vertices
that have an edge ending in vj. Notice that an arc (vi,vj)
is allowed to have multiplicity corresponding to diﬁ‘erent
thresholds; the number of thresholds is denoted by mi,j. The
thresholds are indexed in increasing order, 15613131 <  <
6i,j,mi,j 5 mi; 6,313;C is the k-th threshold for the arc (vi,vj). By
convention, we deﬁne 6i,j,mi,j+1 =mi —l—1 (actually, 6i,j,mi,j+1
can be deﬁned as any number greater than mi) and 6,3130 =0.
Let x =(x1, ...,x,,) be a state; we say that the k-th interaction
for input v,- of vj is active if 6,313;C 5x,- <6i,j,k+1; we denote
this by @i’j(xi) =k.

(3) IC={K,' :nvjEI(I-)[0,mj,i]—> [0,mi],i=1,...n} is the set of
parameters.

Consider a state x=(x1...,xn). The future value for node
vi, with I(i)={v,-l,...,v,-r}, is determined as follows: compute
@‘(xl-l,...,xir)=(®i1’i(xil),...,®i“i(xir))=(k1,...,kr), indicating
that the kj—th interaction for input vi]. of v,- is active; then compute
fi(x)=Ki(k1,---,kr)-

This last value determines whether the value of v,- tends to
increase, decrease or remain the same. To be precise, the future
value of v,- is given by
5700 = p(xi' ,fi(x)), where

t—l—l, ifu>t
,o(t,u)= t, ifu=t
t—l, ifu<t

With this notation, g=(g1, ...,gn):S—>S is a ﬁnite dynamical
system, and so is f =(fl , ...,fn):S —> 8. Notice that g ensures that
each variable changes at most one unit (continuity), whereas f does
not.

The dynamics of a logical model is given by the phase space,
deﬁned as the graph 8 with an edge from x to y if {i :xi #yj} = {i}
for some j and yj = gj (x) (asynchronous dynamics) or as the graph 8
with an edge from x to y if y = g(x) (synchronous dynamics). Notice
that g may be replaced by f if we do not require continuity.

An edge i—> j is called positive (negative) if increasing the i—th
entry of x causes g, (x) to increase (decrease) using the natural order
on the integer sets [0,mi]. If changing the i—th entry of x does not
cause any change in g, (x), we say that the edge is nonfunctional.

3.2 Polynomial form of logical models

Let (V, 5 , IC) be a logical model as above. Choose a prime number
p such that pZmi—l—l for all 1 fifn ([0,m,-] has mi—l—l elements)

 

1 638

112 /B.IO'SIBUJHOIPJOJXO'SOIIBIHJOJUIOIQ/ﬁdnq 11101; popeoIII/noq

9IOZ ‘lg lsnﬁnv uo ::

Polynomial algebra of discrete models

 

Weel
Q A
MPF String
0 v
Fizzy

Fig. 1. A network for the Drosophila cell cycle (Chaouiya et al., 2004).

Table 1. Nonzero parameters for the Drosophila cell—cycle model

 

 

Target Parameter

MPF KMaKM,WSaKM,SaKM,W
Fizzy KF,M

Weel K W

String Ks,M

 

and let IF=IFp ={0, 1, ...,p— 1} be the ﬁeld with p elements. Note
that we may consider 8 g IF”.

Consider a vertex v,- and let gl- (or f,- if we do not require continuity)
be its coordinate function. Our goal is to represent g, as a polynomial
in terms of its inputs, say xi1,...,x,-r. That is, we need a polynomial
function deﬁned on IFr with values in IF. Denote a/\b=min{a,b},
using the natural order on the set IF, viewed as integers. To extend the
domain of g,- from NW 610-) [0, mjj] to IFr, we deﬁne gi(x,-1,...,xir)=
gl-(xl-1 Ami1,...,xir Amt-r) for (xi1,...,x,-r)€ IFr. The polynomial form
of g, :IFr—> IF is then

give): 2 gi(ci,,...,c.-,> H (1—(xj—cjr—1),
(c,1,...,c,-,)€IFr Vj 61(1)

where the right—hand side is computed modulo p.

REMARK 3.2. Many published logical models are Boolean, i.e.
m,- = 1 for all i. In this case, we can write gl- 2f,- nicely and explicitly
in terms of the parameters:

give): 2 Kimij H (l—xj).

nga) we vjEI(i)\J

EXAMPLE 3.3. Consider a Boolean logical model where
x2,x3,x4 regulate x1, i.e. I(1)={2,3,4}. Suppose that K1({})=
K1({3})=K1({4})=K1({3,4})=1 and K1(J)=0 in all other
cases. Using Remark 3.2, the polynomial form of g1 is g1(x)=
(1—X2)(1—x3)(1—X4)+(1—X2)X3(1—X4)+(1—X2)(1—x3)X4+
x3(1—x2)x4, which simpliﬁes to g1 =1—l—x2.

3.3 Example

This example is based on a simpliﬁed model for the Drosophila cell
cycle ﬁrst presented in Chaouiya et al. (2004). The Boolean logical
model is given in Figure 1 and Table 1.

Let x1 =MPF, x2 =Fizzy, x3 =Wee1, x4 = String. Notice that
according to the network, g1 depends on x2, x3 and x4; i.e. g1(x)=
g1(x2,x3,x4). The polynomial functions are: g1 (x) = 1—l—x2, g2 (x) =
x1,83(x)=1+xr, and 8400:961-

It follows that Wee1 —> MPF and String —> MPF are nonfunctional
edges; i.e. changes in Weel or String do not affect MPF. Hence
the network has only one functional (negative) circuit (see the

Table 2. Nonzero and unknown parameters for the Drosophila cell cycle

 

 

Target Parameter
MPF KM, KM, s
Fizzy KF,M
W661 K W

String KS, M

unknown parameters K1 =KMaW,K2 =KMaWS and K3 =KM,FS

 

Supplementary Material for a formal deﬁnition of functional circuit),
rather than the three assumed in Chaouiya et al. (2004). In the
transition from the complete model to the simpliﬁed model, some
functionality may be lost and the algebraic framework can easily
detect this. This is important because in order to deduce dynamical
properties from the network structure it is necessary to have the
correct wiring diagram.

In Property 10 in Chaouiya et al. (2004), it is shown that the
logical model has no steady states (this was done by proving that an
equivalent Petri net is deadlock free). Algebraically, however, this
corresponds to solving the system of equations

l—l—x2=x1,x1=x2, l—l—x1=x3,x1=x4,

which has no solution, as the ﬁrst two equations imply that x2 =
x2 —l— 1, showing that there are no steady states.

3.4 Algebra and parameters

An important feature of the algebraic framework is the ability to treat
the parameters as variables and study all corresponding models at
the same time, which we illustrate with a small logical model. (The
same analysis can be done for Petri nets.)

Suppose, for example, that in the model for the Drosophila cell
cycle (Section 3.3) some parameters are unknown.

The polynomial form of the logical model is: g1 =1—l—x2—l—x3 —l—
KIX3 +XZX3 +KIXZX3 +K3X2X4 +K1X3X4 +KZX3X4 +K1XZX3X4
+KZXZX3X4 +K3XZX3X4, g2 =x1, g3=1+x1, and g4 =x1. FOI‘ the
derivation of these equations, see the Supplementary Material.

Now, let us focus on ﬁnding steady states of this logical model.
This model has three unknown parameters, and if we were to analyze
each model, we would have to analyze 23 =8 logical models, as
the complexity grows exponentially with respect to the number of
unknown parameters. However, using the algebraic framework we
can treat the parameters K1 ,K2 , K3 as variables and analyze the eight
models at the same time.

Using polynomial algebra (see Supplementary Material), we ﬁnd
that an equivalent system is

K1(K3—1)=0, X4(K3—1)=0, K1(X4—1)=0,
x3 +x4—1=0, x2+x4=0, x1 +x4=0.

From this system, we can obtain valuable information. For
example, if x is a steady state, then x1=x2=x4=x3 — 1; that is,
the only possible steady states are (0,0, 1,0) and (1, 1,0, 1). This is
true no matter what the parameters K1,K2 and K3 are.

We can also easily solve this system and see the steady states
for any choice of parameters. For example, consider K1 2 1,K3 = 0.
Since they do not satisfy the ﬁrst equation, there are no steady states.

 

1 639

112 /B.IO'SIBUJHOIPJOJXO'SOllBIIIJOJUIOIQ/ﬁdnq 111011 pop1201umoq

9IOZ ‘lg lsnﬁnv uo ::

A. Veliz-Cuba et al.

 

Table 3. Timing for the Grbbner basis computations

 

 

 

N T1 T2 T3 T4 T5

10 0.002 0.001 0.001 0.001 0.001

12 0.003 0.041 0.526 1.539 0.342

12 0.001 0.003 0.002 0.004 0.009

17 0.004 0.006 0.007 0.155 4.95

23 0.002 0.008 0.008 0.179 30.276

40 0.011 0.023 0.029 0.023 0.047

N =number of nodes, Tr=timings (s) for f1’(x)—x1 =---=fnr(x)—xn =0, where r:

1, . . . ,5. The networks used were: ﬁssion yeast (Davidich and Bornholdt, 2007), budding
yeast (Li et al., 2004), Th cell differentiation (Remy et al., 2006), Th cell differentiation
(Mendoza, 2006), Th cell differentiation (Mendoza and Xenarios, 2006), T—cell receptor
(Klamt et al., 2006), respectively. All networks were Boolean except the fourth one
which had some nodes with three states.

Consider K1 2K2 =K3 :0; we have the system
X4 =0,)C3 =1 —x4,x2 =x4,x1=x4,

which has the unique steady state x = (0, 0, 1,0).

We can also use the system above to determine for which
choice of parameters a given state is a steady state of the system.
For example, suppose we are interested in ﬁnding the parameters
for which (0,0,1,0) is a steady state, then we have the system
K1 (K3 —1)=0,0(K3 — 1)=0,K1 :0; therefore, K1 :0 and the other
parameters are ‘free.’ Hence, (0,0,1,0) is a steady state for K:
(0,K2,K3).

Suppose now we are interested in ﬁnding the parameters for
which (1, 1,0, 1) is a steady state. In this case, we have the system
K1(K3 —1)=0,K3 —1=0,K1=0;i.e.K1=0,K3 =1 and K2 is free.
Hence, (1, 1,0, 1) is a steady state for K = (0,K2, 1) (note that in this
case (0,0, 1,0) is a steady state as well).

3.5 Performance

We tested our algorithm to compute steady states of several
published models, that is, we recorded the required time for
computing a lexicographic Grdbner basis (which then allows
backward substitution to solve the system of equationst (x) —x1 = 0,
..., fn(x)—xn :0.) The results are shown in Table 3. Furthermore,
to compute limit cycles (using a parallel update) of length r,
one can compute the lexicographic Grdbner basis for the system
ff(x)—x1=0, ...,fé(x)—xn :0, where t: 1, ..., r. It is clear that the
solution set for t=1 is the set of steady states; the states in the
solution set for t: 2, which are not steady states, are periodic states
with period two and so on.

Notice that in Table 3, the size of the network does not seem
to be correlated to the computation time. This is due to the fact
that polynomial algebra computations depend more strongly on the
complexity of the polynomial equations and not as much on the
size or complexity of the logical model. This means that the method
can scale well to large networks and that it can complement other
methods very well. (Typically, the more terms the polynomial form
of the model has the more complex the Grdbner basis calculation. In
the Boolean case, for instance, a conjunction leads to a polynomial
with one term, whereas a disjunction results in three terms.)

4 ALGORITHM FOR K-BOUNDED PETRI NETS

4.1 Deﬁnition of Petri nets
A k—bounded Petri net is a 4—tuple (S, T,F, W), where:

(1) S={s1,...,sn} is the set of places.
(2) T: {t1 , ...,tm} is the set of transitions.

(3) F g (S X T)U(T X S) is the set of ‘regular’ arcs. F‘ g (S X T)
is the set of inhibitory arcs.

(4) W:F —>N gives the arc weights of the regular arcs. W‘:
F _ —> N gives the arc weights of the inhibitory arcs.

For a transition t, deﬁne

ot={s€S:(s,t)€F}, to={s€S:(t,s)€F}, t={s€S:(s,t)€F_}.

The incidence matrix A=(ats)teT,Seg (or A=(aij):.7]?:1) is an
m X n matrix given by as; = W(t, s) — W(s, t) (we consider W(e) = 0
when e ¢F). We denote by At the column of AT (or the row of A)
corresponding to a transition t E T. Notice that At =AT U I, where the
entry of U; corresponding to t is 1 and all others are 0.

An assignment x = (xs)seg E N” [or x=(x1, ...,xn)] for all places
is called a marking. Let x be a marking; a transition t is said to be
enabled if W(s, t) 5xS for all s 6 ct and xs 5 W_ (s, t) —1 for all s E I.
Consider the function C; (x), deﬁned by

1,if W(s,t) 5xS for SE ot and xs < W_(s,t) for set,
CtOC):

0, otherwise.

Thus, a transition t is enabled for x if C; (x) = 1.

The evolution of the Petri net is given by ﬁring transitions; by
ﬁring an enabled transition t, we update the value of the places with
regular arcs from/to t. The phase space of the Petri net is obtained
by ﬁring transitions in an asynchronous manner. Let x be a marking:
if a transition t is enabled, then ﬁring t results in the marking x—l—At.
This implies that for any marking x and any transition t, the Petri
net can always evolve from x to ft(x)=x—l—Ct(x)At =x—l—CtAT U;
(If Ct(x)=0, then ﬁ(x) =x; but if Ct(x) = 1, then ft(x)=x+At =
x—l—AT Ur). In the case where x #y=ﬁ(x) we write xi> y. Denote
by f7~ the function obtained by composing ftl o - - - oftl, where t1 , . . . , t1

. . t t
are the elements of T. A trajectory is a path x —1> y —2> -- - and denoted

by x1» For any trajectory x1>y we have y=x+AT ZtETUt.
The reachability graph for a marking x is the graph made up of all
trajectories starting at x. The reachability graph of a set of markings
S is the graph made up of all reachability graphs of all the elements
of S.

We say that (X1,...,Xm)>0 if X,- 20 and at least for one i we
have X,- > 0. A P—invariant is an integer solution, X > 0, of AX :0.
A T—invariant is an integer solution, Y >0, of ATY :0. A marking
x is dead if no transition is enabled, that is, if C; (x) :0 for all t6 T;
this is equivalent to ﬁ(x) =x for all t6 T.

A marking is k-bounded if the value of each place is at most k.
The Petri net is k-bounded if any reachable marking (obtained by
ﬁring some sequence of transitions) from any k—bounded marking is
also a k—bounded marking, that is, if {x :xi 5 k} contains the vertices
of its reachability graph, which is equivalent to ﬁ([0,k]”) g [0,k]”
for all transitions t. Examples of 1—bounded Petri nets are Boolean
regulatory Petri nets, presented in Chaouiya et al. (2004); Remy et al.
(2006); Steggles et al. (2007, 2006). When each place has its own
‘k’, we have a more general deﬁnition: for K 2 (k1 , . . . , kn), a Petri net

 

1 640

112 /B.IO'SIBUJHOIPJOJXO'SOIlBIHJOJUIOIQ/ﬁdnq 111011 pop1201umoq

9IOZ ‘lg lsnﬁnv uo ::

Polynomial algebra of discrete models

 

is K—bounded ifﬁ([0,k1] X  X [0,kn]) g [0,k1] X  X [0,kn] for all
transitions t. Examples of such Petri nets are multi—level regulatory
Petri nets, presented in (Chaouiya et al., 2008; Comet et al., 2005).
Our framework is applicable to K —bounded Petri nets (including
k—bounded Petri nets).

For a given Petri net, the analysis of its dynamics, checking
for dead markings and the type of liveness are some of the
typical questions that can be viewed as algebraically as we will
see next. Also, when modeling biological systems, there is not a
unique marking that is of interest, but a whole family of markings
corresponding to different initial states of the biological system. By
looking at a Petri net as a polynomial dynamical system, we can
study all those markings at the same time.

4.2 Polynomial form of K -bounded Petri nets

Since the algebraic framework relies on ﬁnite ﬁelds, we consider
K —bounded Petri nets and focus on the analysis of markings in S =
[0, k1] X --- X [0, kn]. Letp be a prime number such that kl- —l— 1 5p for
all i and let IF=IFp. Then, for all t6 T,ﬁ :8 g IF” —> IF”.

We need to extend the functions f; to all of IF” and determine

their polynomial form. It sufﬁces to give algebraic structure to
the function C; :8 —> [0, 1] (since ft (x) =x —l— C t (x)At, the polynomial
form of C; will automatically give the polynomial form of ft). To do
this, consider the function c[a,b](z) :1 if a 5 z 5 b and c[a,b](z) :0
otherwise (i.e. chub] is the characteristic function of [a,b]). Since
Ct(x) = USE”c[W(S,t),kS](xS)]_[SE;c[0,W(S,t)_1](xs), we only need 110
give algebraic structure to chub] (the polynomial form of C; will be
given by the product of the polynomial forms of its factors). It is not
difﬁcult to see that the polynomial function Za<r<b(1 — (z — r)p_1)
is equal to 1 if a 5 z 5 b and 0 otherwise. Hehce, the polynomial
form of cm] is CW] (z) = Za<r<b(1—(z — r)P—1). This gives the
polynomial form of C t (x), which, in turn, gives the polynomial form
ofﬁ(x) =x—l—Ct(x)At, whereﬁ :IF” —> IF”.
EXAMPLE 4.1. Consider a transition t of a l—bounded Petri net such
that ot={x1,x2} and I: {x3,x4} (with weights equal to 1). Then
Ct(x)=C[1,1](X1)C[1,1](X2)C[0,0](X3)C[0,0](X4)- Since C[0,0](Z)=
1—z and c[1,1](z) =z, it follows that Ct(x) =x1x2(1 —x3)(1 —x4).
Hence the polynomial form of ft is given by ﬁ(x)=x—l—x1x2(l —x3)
(1 —X4)At.

Now, we can state and solve algebraically some Petri net
problems. For example, the problem of ﬁnding dead markings
becomes the problem of solving polynomial equations, which can
be easily addressed within the algebraic framework, as was the case
for logical models. More precisely, we have the following remark.
REMARK 4.2. A marking x of a K —bounded Petri net is dead if and
only if x68 and ﬁ(x)=x for all t6 T. Let g0(x)=]_[;’=1c[0,ki](xi).
Note that g0(x)=1 if x 68 and g0(x)=0 otherwise. Then the set of
dead markings is given by the solutions of the system of polynomial
equations

ftl(x)=x, ..., ﬁm(x)=x, gp(x)=1,

REMARK 4.3. If the polynomial form of f; for all transitions t is
known, then we can easily recover A using the equation Ct(x)At =
ﬁ(x) —x and hence ﬁnd the P— and T—invariants.

4.3 Example

Consider the Petri net model in Chaouiya et al. (2008) for the core
lambda switch

S={CI, Cro}.

T: {112%, tZZtCI,{(CI,l),(Cro,l)}’ 132130, t4:tCro,{(Cro,2)}’
15 :tCro,{(CI, 1)}, t6 :tCro,{(CI,l),(Cro,2)}}'

F={(t1,CI), (Cro,tl), (CI,t2), (Cro,t2), (t2,Cro), (t3,Cro),
(Cro,t4), (t4,Cro), (CI,t5), (Cro,t5), (CI,t6), (Cro,t6), (t6,Cro)}.
F‘ ={(CI,t1), (CI,t3), (Cro,t3), (CI,t4), (Cro,t5)}.

W(e)=2 for e€{(Cro,t4),(Cro,t6)} and W(e)=1 for the other
arcs in F. Also, W_(e)=2 for e E {(Cro, t3), (Cro,t5)} and W(e)=1
for the other arcs in F _.

It follows that AT is given by

l1 l2 l3 l4 l5 l6
CI 1 —1 0 0 0 0
Cro 0 0 1 —1—1—1

This Petri net is (1,2)—bounded (Chaouiya et al., 2008) and,
therefore, we can use the algebraic framework. Notice that g(x) =
c[0,1](x1)c[0,2](x2)= (x1 —l— 1)2. Let us compute the polynomial form
of ftS. First, notice that c[0,0](z)=(1—z)(1—l—z), c[1,1](z)=z(2—
z). cn,2t(z>=z(1—z>. cn,2](z)=z2 and C[0,1](Z)=(1+Z)2. Then.
Ct5(x)=c[1,1](x1)c[1,2](x2)c[0,1](x2) which reduces to CtS (x) =
x1(2—x1)x2(2—x2). Since AIS =(0, —1), it follows that ﬁ5(x)=
X+X1(2—x1)x2(2—X2)(0, —1)=(x1,X2 —X1(2—x1)x2(2—X2))- The
polynomial forms for all the transitions are

f1(x) = (x1+(1—x1)(1+x1)(1—X2)(1+X2),X2),
1300 = (x1 —X1(2—x1)x§,x2),
no) = (xi,x2+(1—xi)(1+xi>(1+x2>2>.
f4(x) = (961,962 —(1—x1)(1+xi)x2(1—X2)),
f5(X) = (X1ixz—X1(2—X1)X2(2—X2)),
f6(x) = (Xiixz—X1(2—x1)x2(1—X2))-
To ﬁnd the dead markings, we have to solve the system
(1—X1)(1+X1)(1—X2)(1+X2) = 0,
Xi(2—X1)x§ = 0,
(l—xi)(1+xi)(1+x2)2 = 0.

(1 —X1)(1+X1)X2(1 —X2) = 0,
x1(2—x1)x2(2—X2) = 0,
x1(2—x1)x2(1—X2) = 0,

(x1-l—1)2—1= 0.

The last equation corresponds to the requirement that x E 8. Using
Macaulay2, we obtain the marking (1,0) as the only dead marking.

5 DISCUSSION

The problem of giving mathematical structure to logical models has
been studied by several authors (e. g. Egri—Nagy and Nehaniv, 2008).
For the purpose of computation and analysis, the structure proposed
here provides a class of simple and easily deﬁned mathematical
objects that can model both logical models and bounded Petri nets.
It has the advantage that it makes accessible the theoretical concepts,
algorithms and software from polynomial algebra, such as Grdbner

 

1641

112 /B.IO'SIBUJHOIPJOJXO'SOIlBIIIJOJUlOlCI/ﬁdnq 111011 pop1201umoq

9IOZ ‘lg lsnﬁnv uo ::

A. Veliz-Cuba et al.

 

basis theory, which underlies many of the algorithms for solving
systems of polynomial equations.

It is important to mention that in this article we focus on ﬁnding
steady states and dead markings, not because that is the only
application of our framework, but because it can be translated
directly into the algebraic problem of solving polynomial equations
without much difﬁculty; the framework we propose can be also
used to answer other questions. For instance, theory, algorithms
and software were used in Laubenbacher and Stigler (2004) and
subsequent papers to give a solution to the problem of reverse—
engineering of gene regulatory networks from experimental time
course data. This allows us to ﬁnd all logical models that satisfy
certain properties as done by SMBioNet (http://smbionet.lami.univ—
evry.fr) with the additional advantage of allowing a systematic
study and classiﬁcation of such models. One can also solve the
reverse problem, that is, given a family of models, by using our
framework, we ﬁnd properties that they all satisfy (see Section 3.4).
Furthermore, the theory inherent in the algebraic framework can
give rise to theorems. For example, the algebraic structure was used
to give an exact formula for the structure of the phase space of
linear systems (Elspas, 1959; Hemandez—Toledo, 2005) and lower
and upper bounds for the number of limit cycles of conjunctive
and disjunctive Boolean networks (Jarrah et al., 2010). Also, the
family of nested canalizing functions has been shown to have an
algebraic structure (toric variety) that allows their characterization
(J arrah et al., 2007). These functions appear frequently in Boolean
models of regulatory networks and their dynamics have desirable
properties. Functionality of circuits can also be studied within this
framework (see Supplementary Material).

Polynomial algebra can, therefore, complement the existing
analysis tools for logical models and Petri nets, and we have shown
several examples of its use. It is also worth mentioning that Petri
nets are a special case of bipartite models, consisting of two sets
of nodes, representing ‘places’ and ‘events,’ respectively, connected
by directed edges. More general bipartite models are quite common
in systems biology (e.g. Warren et al., 2009), and they might
be amenable to analysis with similar methods. It is also worth
mentioning that, while the examples used here are all gene regulatory
networks, there are examples of logical/Petri net models of other
kinds of molecular networks (e.g. Simao et al., 2005), so that the
analysis framework described here is more widely applicable.

A potential disadvantage of the algebraic framework is that it is
less intuitive than either logical models or Petri nets. Even in the
Boolean case it is often difﬁcult to give a biological interpretation
to a Boolean function in polynomial form, even if the equivalent
Boolean expression is quite meaningful. However, with appropriate
software, the typical user wanting to analyze a logical model or Petri
net does not need to explicitly manipulate polynomial functions or
even be aware that they are used in the analysis. On the other hand,
some questions or aspects of logical models and Petri nets may
not currently have a direct counterpart in the algebraic framework;
for example, the asynchronous update commonly used in logical
models does not currently have a direct counterpart in the polynomial
algebra framework. This deserves further investigation.

ACKNOWLEDGEMENTS

The authors are grateful to the anonymous referees for many
insightful comments and suggestions.

Conﬂict of Interest: none declared.

REFERENCES

Albert,R. and Othmer,H. (2003) The topology of the regulatory interactions predicts
the expression pattern of the segment polarity genes in Drosophila melanogaster.
J. Theor. Bio., 223,1—18.

Barrett,C. et al. (2005) The global transcriptional regulatory network for metabolism
in Escherichia coli exhibits few dominant functional states. Proc. Natl Acad. Sci.
USA, 102,19103—19108.

Chaouiya,C. et al. (2004) Qualitative modelling of genetic networks: from logical
regulatory graphs to standard Petri nets. In ICATPN ’04, Springer, Berlin, Germany,
pp. 137—156.

Chaouiya,C. et al. (2008) Petri net modelling of biological regulatory networks.
J. Discrete Algorithms, 6, 165—177.

Comet,J.-P. et al. (2005) Modeling multi-valued genetic regulatory networks using high-
level Petri nets. In Ciardo,G and Darondeau,P. (eds) Proceedings of the International
Conference on the Application and Theory of Petri Nets, Springer, Berlin, Germany,
pp. 208—227.

Davidich,M. and Bornholdt,S. (2007) Boolean network model predicts cell cycle
sequence of ﬁssion yeast. PLoS One, 3, e1672.

Elspas,B. (1959) The theory of autonomous linear sequential networks. IRE Trans.
Circuit Theory, CT-6, 45—60.

Egri-Nagy,A. and Nehaniv,C. (2008) Algebraic properties of automata associated to
Petri nets and applications to computation in biological systems. Biosystems, 94,
297—307.

Espinosa—Soto,C. et al. (2004) A gene regulatory network model for cell-fate
determination during Arabidopsis thaliana ﬂower development that is robust and
recovers experimental gene expression proﬁles. Plant Cell, 16, 2923—2939.

Faure,A. et al. (2006) Dynamical analysis of a generic Boolean model for the control
of the mammalian cell cycle. Bioinformatics, 22, 124—131.

Formanowicz,D. et al. (2007) Petri net based model of the body iron homeostasis.
J. Biomed. Inform, 40, 476—485.

Grunwald,S. et al. (2008) Petri net modelling of gene regulation of the duchenne
muscular dystrophy. Biosystems, 92, 189—205.

Hernandez-Toledo,A. (2005) Linear ﬁnite dynamical systems. Communications in
Algebra, 33, 2977—2989.

J arrah,A. et al. (2010) The Dynamics of Conjunctive and Disjunctive Boolean Network
Models. Bull Math. Bio., [Epub ahead of print, doi: 10.1007/s11538-010-9501-z,
January 20, 2010].

Jarrah,A. et al. (2007) Nested canalyzing, unate cascade, and polynomial functions.
Physica D, 233, 167—174.

Kielbassa,J. et al. (2009) Modeling the U1 snRNP assembly pathway in alternative
splicing in human cells using Petri nets. Comput. Biol. Chem, 33, 46—61.

Klamt,S. et al. (2006) A methodology for the structural and functional analysis of
signaling and regulatory networks. BMC Bioinformatics, 7, 56.

Laubenbacher,R. and Stigler,B. (2004) A computational algebra approach to the reverse-
engineering of gene regulatory networks. J. Theor. Biol, 229, 523—537.

Li,F. et al. (2004) The yeast cell-cycle network is robustly designed. Proc. Natl Acad.
Sci. USA, 101, 478141786.

Mendoza,L. (2006) A network model for the control of the differentiation process in
Th cells. Biosystems, 84, 101—114.

Mendoza,L. and Xenarios,I. (2006) A method for the generation of standardized
qualitative dynamical systems of regulatory networks. Theor. Biol. Med. Model,
3, Article no. 13.

Mendoza,L. et al. (1999) Genetic control of ﬂower morphogenesis in arabidopsis
thaliana: a logical analysis. Bioinformatics, 15, 593—606.

N aldi,A. et al. (2007) Decision diagrams for the representation and analysis of logical
models of genetic networks. InCMSB ’07, Vol. 4695 of LNCS/LNBI, Springer, Berlin,
Germany, pp. 233—247.

Peleg,M. et al. (2005) Using Petri net tools to study properties and dynamics of
biological systems. J. Am. Med. Informatics Assoc, 12, 181—199.

Remy,E. et al. (2006) From logical regulatory graphs to standard Petri nets: dynamical
roles and functionality of feedback circuits. In Transactions on Computation Systems
Biology VII (TCSB), Springer, Berlin, Germany, pp. 55—72.

Saez-Rodriguez,J. et al. (2009) Discrete logic modelling as a means to link protein
signalling networks with functional analysis of mammalian signal transduction.
Mol. Syst. Biol, 5, 331.

Samal,A. and J ain,S. (2008) The regulatory network of E. coli metabolism as a Boolean
dynamical system exhibits both homeostasis and ﬂexibility of response. BMC Syst.
Biol, 2, Article 21.

 

1 642

112 /B.IO'SIBUJHOIPJOJXO'SOIlBIIIJOJUIOICI/ﬁdnq 111011 pop1201umoq

9IOZ ‘Ig lsnﬁnv uo ::

Polynomial algebra of discrete models

 

Simao,E. et al. (2005) Qualitative modelling of regulated metabolic pathways:
application to the tryptophan biosynthesis in E. coli. Bioinformatics, 21, 190—196.

Steggles,L. et al. (2007) Qualitativer modelling and analysing genetic regulatory
networks: a Petri net approach. Bioinformatics, 23, 336—343.

Steggles,L. et al. (2006) Modelling and analysing genetic networks: From Boolean
networks to Petri nets. In Computational Methods in Systems Biology. International
Conference, Springer, Berlin, Germany, pp. 127—141.

Thomas,R. (1973) Boolean formalisation of genetic control circuits. J. Theor. Biol, 42,
565—583.

Thomas,R. and D’Ari,R. (1989) Biological Feedback. CRC Press, Boca Raton, FL.

Warren,P. et al. (2009) Flux networks in metabolic graphs. Phys. Biol, 6, 46006.

Zhao,Q. (2005) A remark on “Scalar Equations for Synchronous Boolean Networks
with Biological Applications” by C. Farrow, J. Heidel, J. Maloney, and J. Rogers.
IEEE Trans. Neural Netw., 16, 1715—1716.

 

1 643

112 /B.IO'SIBUJHOIPJOJXO'SOIlBIIIJOJUIOICI/ﬁdnq 111011 pop1201umoq

9IOZ ‘Ig lsnﬁnv uo ::

