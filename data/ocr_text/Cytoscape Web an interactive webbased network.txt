Vol. 26 no. 18 2010, pages 234 7—2348
APPS NO  doi:10.1093/bioinformatics/btq430

 

Systems biology

Advance Access publication July 23, 2010

Cytoscape Web: an interactive web-based network browser
Christian T. Lopes, Max Franz, Farzana Kazi, Sylva L. Donaldson, Quaid Morris

and Gary D. Bader*

Banting and Best Department of Medical Research, Donnelly Centre for Cellular and Biomolecular Research,
University of Toronto, 160 College Street, Toronto, ON M58 3E1, Canada

Associate Editor: Joaquin Dopazo

 

ABSTRACT

Summary: Cytoscape Web is a web-based network visualization
tool—modeled after Cytoscape—which is open source, interactive,
customizable and easily integrated into web sites. Multiple file
exchange formats can be used to load data into Cytoscape Web,
including GraphML, XGMML and SIF.

Availability and Implementation: Cytoscape Web is implemented
in Flex/ActionScript with a JavaScript API and is freely available at
http://cytoscapeweb.cytoscape.org/

Contact: gary.bader@utoronto.ca

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on May 3, 2010; revised on July 1, 2010; accepted on July
20, 2010

1 INTRODUCTION

Increasing amounts of high-throughput data are being collected,
stored, shared and analyzed on the web, highlighting the need
for effective web-based data Visualization. Network Visualization
components are especially valuable to help researchers interpret
their data as part of data analysis tools. However, current web-
based network Visualization components lack many useful features
of their desktop counterparts. Medusa (Hooper and Bork, 2005)
is a Java applet originally used in the STRING database (Jensen
et al., 2009) and by many other web sites for network Visualization,
but lacks advanced features, such as detailed customization of the
network View. quuid (Klammer et al., 2008) expands Medusa’s
functionality, but does not provide an easy way for the client web
site to change and interact with the network View after it has
been rendered. TouchGraph (http://www.touchgraph.com/navigator
.html) is another Java applet for network Visualization, but provides
only one mode of network interaction designed for exploration and
is not easily customizable. yFiles Flex (http://www.yworks.com/
en/products_yﬁlesﬁex_about.html) is a rich Internet application
with a feature-rich user interface, an architecture that balances
client/server work and supports efﬁcient data communication. This
commercial software is customizable within the bounds of the
code already written, but is not open source. Cytoscape (http://
www.cytoscape.orgl) is an open source Java network Visualization
and analysis tool that provides a large array of useful features
(Shannon et al., 2003), but is not speciﬁcally designed for use on
the web except Via Java WebStart or as a library to generate static
network images for web display. The ﬁeld of network Visualization is

 

*To whom correspondence should be addressed.

 

 

Fig. 1. A Cytoscape Web network with a customized Visual style.

lacking an interactive, easily customizable, open source, web-based
Visualization component.

Cytoscape Web is an interactive, web-based network Visualization
tool, modeled after the popular Cytoscape software (Fig. 1). Using
basic programming skills, Cytoscape Web can be customized and
incorporated into any web site. Cytoscape Web is not intended as a
replacement for the Cytoscape desktop application, for example, it
contains none of the plugin architecture functionality of Cytoscape;
instead it is intended as a low overhead tool to add network
Visualization to a web application.

2 IMPLEMENTATION

Cytoscape Web is a client-side component that requires no server-
side implementation, and allows developers to choose any server-
side technology, if necessary. The main network display component
of Cytoscape Web is implemented in Flex/ActionScript, but a
J avaScript application programming interface (API) is provided so
all the customization and interaction with the network View can be
easily built in J avaScript without needing to change and compile the
Flash code. This architecture has the advantage of using the Flash

 

© The Author(s) 2010. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/
by-nc/2.5), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.

112 Bio'sleulnofplogxo'sopeuuogutotq/ﬁd11q IIIOJJ pepeolumoq

910E ‘ISlsnﬁnV uo ::

C.1ZLopes et al.

 

platform to implement complex and interactive vector images that
behave consistently across major browsers, but without requiring
the web site to be entirely built with this technology. In other words,
the web site itself can rely on web standards (HTML, CSS and
J avaScript) for embedding and interacting with Cytoscape Web. This
design also offers the possibility of migrating the implementation to
other technologies—such as scalable vector graphics (SVG) and
HTMLS—in the future without making major API changes. The
choice of Flash rather than Java is motivated by the fact that Java
applets can be slow to launch, require the download of the large
Java runtime and make it difﬁcult to create custom (non-Swing)
user interfaces without writing low-level graphics code.

3 AVAILABLE FEATURES

3.1 Features

Similarly to Cytoscape, Cytoscape Web allows the client application
to deﬁne a network of nodes and edges and customize their attributes.
Data can be loaded into Cytoscape Web through one of the supported
XML-based exchange formats (GraphML or XGMML) or a simple
tab-delimited text (Cytoscape’s SIF format). The network data can
also be exported to any of the above-mentioned formats. The client
can dynamically change node and edge Visual styles (e. g. color, size
and opacity), using any of the following methods: (i) specifying
default Visual properties for all elements; (ii) mapping node and
edge attributes (e. g. name, interaction type and weight) to Visual
styles; and (iii) overriding default or mapped styles by setting a
bypass style. For instance, different types of interactions can be
mapped to edge colors (e. g. protein—protein to blue, protein—DNA
to green), and the edge width can be used to represent interaction
weight. Then the developer can use the bypass mechanism to
create a ﬁrst neighbors highlight feature, for example, by setting
the nodes and edges that belong to the neighbor set to the color
red. When the ﬁrst neighbors’ bypass is removed, the colors are
automatically restored to their default or mapped values. These
three options, combined with more than 20 Visual properties for
nodes and edges, provide ﬂexibility and enable each Cytoscape Web-
based application to deﬁne its own semantics, styles and features.
For example, iRefWeb (http://wodaklab.org/iRefWeb/), an interface
to the interaction Reference Index (iRefIndex) database (Razick
et al., 2008), uses a basic implementation of Cytoscape Web to
display all interactions in which a single query gene participates.
Alternatively, GeneMANIA (http://www.genemania.org; Warde-
Farley et al., 2010), a gene function prediction tool, uses a more
complex implementation of Cytoscape Web to extend a user’s input
gene list and display interactions among the genes. Cytoscape Web
communicates with the GeneMANIA server, mediated by client-
side J avaScript, to display gene or network-speciﬁc highlights and
associated information interactively.

Cytoscape Web’s API can be used to implement the following
features: a ﬁlter for nodes and edges, which temporarily removes the
ﬁltered out elements based on attribute data; functions for adding
and deleting nodes and edges at runtime; the ability to export the
whole network as an image, either to a PNG (Portable Network
Graphics) ﬁle or to a publication quality vector format (PDF).
Cytoscape Web provides the ability to pan and zoom the network
and choose different network layouts, including force directed. The
layout parameters can be customized, but if none of the available
layouts produces the desired results, the web application can run an
external layout algorithm—in J avaScript or on the server-side, for

instance—and pass the results, Via node positions, back to Cytoscape
Web for Visualization.

3.2 Performance

Cytoscape Web works best with small- to medium-sized networks,
generally with up to a few hundred nodes and edges. Larger networks
can be Visualized, but the user interaction can become sluggish
around 2000 elements (nodes or edges)—800 nodes and 1200 edges,
for example (tested on an Apple laptop computer with 2 GHz dual
core CPU and 4 GB RAM). Use of the force-directed layout is
the major bottleneck in the initial rendering of a typical network.
However, faster layouts are available and overall performance is
dependent upon the client web site implementation and the end user
conﬁguration. Additional performance statistics for Cytoscape Web
are available in the Supplementary Material.

3.3 Documentation

Cytoscape Web is actively developed as an open source project
and is freely available at http://cytoscapeweb.cytoscape.org/. This
web site includes a tutorial, with ready to use sample code, the API
documentation and a showcase of major Cytoscape Web features.
The online examples can be freely used as a template for building
web sites containing Cytoscape Web.

3.4 Future directions

Future plans include the implementation of custom graphics
for nodes and edges, additional network layouts and support
for importing and closer integration with Cytoscape [e.g.
importing/exporting networks in Cytoscape (.cys) ﬁle format].

ACKNOWLEDGEMENTS

Cytoscape is developed through an ongoing collaboration between
the University of California at San Diego, the Institute for Systems
Biology, Memorial Sloan-Kettering Cancer Center, Institut Pasteur,
Agilent Technologies, Unilever, the University of Michigan, the
University of California at San Francisco and the University of
Toronto. We gratefully acknowledge the contributions of many
Cytoscape developers who developed software that Cytoscape Web
was based on. We thank the entire GeneMANIA team for support
during the development of Cytoscape Web.

Funding: Genome Canada through the Ontario Genomics Institute
(grant number 2007-OGI-TD-05); the US. National Institute of
General Medical Sciences of the National Institutes of Health (grant
number 2R01GM070743-06).

Conﬂict of Interest: none declared.

REFERENCES

Hooper,S.D. and Bork,P. (2005) Medusa: a simple tool for interaction graph analysis.
Bioinformatics, 21, 4432—4433.

Jensen,L.J. et al. (2009) STRING 8—a global View on proteins and their functional
interactions in 630 organisms. Nucleic Acids Res., 37, D412—D416.

Klammer,M. et al. (2008) quuid: a Java applet for graphical on-line network
exploration. Bioinformatics, 24, 1467—1468.

Razick,S. et al. (2008) iRefIndex: a consolidated protein interactions database with
provenance. BMC Bioinformatics, 9, 405.

Shannon,P. et al. (2003) Cytoscape: a software environment for integrated models of
biomolecular interaction networks. Genome Res., 13, 2498—2504.

Warde-Farley,D. et al. (2010) The GeneMANIA prediction server: biological network
integration for gene prioritization and predicting gene function Nucleic Acids Res.,
38, W214—W220.

 

2348

112 Bio'SIanoprOJxo'sot1eu110jutotq//:d11q IIIOJJ papeolumoq

910E ‘ISlsnﬁnV uo ::

