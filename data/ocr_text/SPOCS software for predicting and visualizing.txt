APPLICA TIONS NOTE V0"23011?bi‘iléé’iﬁsﬁifﬁﬁiiigﬁéi

 

Genome analysis

Advance Access publication August 16, 2013

SPOCS: software for predicting and visualizing orthology/paralogy

relationships among genomes

Darren S. Curtis”, Aaron R. Phillips1 ’1, Stephen J. Callister2, Sean Conlan3 and

Lee Ann McCue4’*

1Computational & Statistical Analytics Division, Pacific Northwest National Laboratory, 2Biological Sciences Division,
Pacific Northwest National Laboratory, Bichland, WA 99352, USA, 8Genetics and Molecular Biology Branch,
National Human Genome Research Institute, NIH, Bethesda, MD 20892, USA and 4Computational Sciences &
Mathematics Division, Pacific Northwest National Laboratory, Bichland, WA 99352, USA

Associate Editor: John Hancock

 

ABSTRACT

Summary: At the rate that prokaryotic genomes can now be gener-
ated, comparative genomics studies require a flexible method for
quickly and accurately predicting orthologs among the rapidly chan-
ging set of genomes available. SPOCS implements a graph-based
ortholog prediction method to generate a simple tab-delimited table
of orthologs and in addition, html files that provide a visualization of the
predicted ortholog/paralog relationships to which gene/protein ex-
pression metadata may be overlaid.

Availability and Implementation: A SPOCS web application is freely
available at http://cbb.pnnl.gov/portal/tools/spocs.html. Source code
for Linux systems is also freely available under an open source license
at http://cbb.pnnl.gov/portal/software/spocs.html; the Boost C++
libraries and BLAST are required.

Contact: leeann.mccue@pnnl.gov

Received on April 15, 2013; revised on July 10, 2013; accepted on
August 2, 2013

1 INTRODUCTION

The prediction of orthologs and paralogs is a fundamental step
in many comparative genomics studies. For example, orthology
and paralogy relationships are used to identify the core and aux-
iliary genes among related organisms, assign protein function
annotation to genes in a new genome and predict gene expansion
events, such as those that give rise to protein families. Though
the concepts of orthology and paralogy were deﬁned many years
ago, the advent of whole genome sequencing and the wide avail-
ability of these genomic data has been the catalyst for the devel-
opment of numerous ortholog prediction programs [see
Kristensen et al. (2011) for a recent review]. In large parts,
these programs rely on the identiﬁcation of homologous genes/
proteins, and frequently employ BLAST (Basic Local Alignment
Search Tool; Altschul et al., 1997) to identify these.

Many methods have focused on eukaryotic genomes, in which
widespread gene duplication and domain rearrangement have
made predicting orthologs particularly challenging (Sjolander
et al., 201 1). In prokaryotes, however, the challenge lies in keeping

 

*To whom correspondence should be addressed.
TThe authors wish it to be known that, in their opinion, the ﬁrst two
authors should be regarded as joint First Authors

up with the rate of genomic data generation. As a bacterial genome
can now be sequenced in a day or two, and many are often left in
“high quality draft’ stage, comparative genomics studies on these
data require the ﬂexibility to quickly and accurately predict ortho-
logs on—the-ﬁy, when the genome data are updated frequently.

We have previously employed a graph-based ortholog/paralog
prediction method (Callister et al., 2008; Konstantinidis et al.,
2009), that combines the pairwise (two species) predictions from
InParanoid (Remm et al., 2001), using custom Perl scripts to
produce orthologs for groups of species. Here, we present a
robust software tool called SPOCS (Species Paralogy and
Orthology Clique Solver) that implements this approach, provid-
ing ﬂexible and readily extensible ortholog predictions for groups
of species deﬁned by the user.

2 APPROACH

For every pair of species (i.e. pair of protein fasta ﬁles provided
by the user), we use the ortholog/paralog deﬁnitions as described
by Remm et al. (2001) and combine the pairwise predictions
using a graph-based method to identify complete or near-com-
plete cliques. SPOCS will generate a simple tab-delimited table of
orthologs, and in addition, html ﬁles that provide a visualization
of the predicted orthology/paralogy relationships. The html ﬁles
link back to the protein sequence data and gene/protein expres-
sion metadata may be overlaid onto the visualization.

2.1 Implementation

SPOCS is written in C++ using the Boost libraries (http://www.
boost.org/). For the identiﬁcation of orthologs and paralogs be-
tween pairs of species, the InParanoid Perl code (Remm et al.,
2001) was redesigned and implemented in C++. We used the
MaxCliqueDyn algorithm (Konc and Janezic, 2007) to identify
ortholog cliques, and the D3 Javascript library (http://d3js.org/)
to generate SVG images of the ortholog graphs.

SPOCS is available both as source code and in a web applica-
tion. For local installation on Unix/ Linux machines, instructions
are provided in a readme ﬁle within the downloadable source tar
ﬁle. To run SPOCS locally, the BLAST executables must be in
the user PATH. At the command line, SPOCS requires only a list
of fasta formatted protein sequence ﬁles, a scratch output direc-
tory in which SPOCS will store intermediate ﬁles and a results
directory for the ﬁnal output ﬁles.

 

© The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e—mail: journals.permissions@oup.com 2641

112 /§JO'S{Bumo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

D.S. Curtis et aI.

 

1mm '

 

Jul: ml:- a.
ImII-Addresa' .
a “TUMI'I Fish FIIu' Him- in rule “Inna. '
{.rlpLlej - _. a
g Qlﬂqluuu lggtﬂ HE Seaw- N: 'IIE “land.
a ﬁltiadata F-II Emmi. H: I"! saluted
. - I- In :
w on“ a I. II HTH. :- Flir-Te-t‘l
=1 H10 1-
" I Required Held
.‘: ﬂf‘v r mmmﬂ-Mtlmbood
m J’-
_ A a c. :- E - t: H
 _ Cqu-G‘I'D I: IIILQID ClIanT-rp? KEEG‘S Edges B M53 IIEELﬁ EISBE ICE-IA
SEiE 3DB? 1 C 'I‘ 2'. RPE_333'_- HPC_11'§B 4FD_3EIJ! “PAY-'11
32‘?! 333-5- ] D5 6 ES HPC_3]'!E 3“D_3|¥J‘5 “PAL-TI]!
3213 305-5 2 US In 15 HPE_3322 4FD_3DO-I- “DAIMD
3'! 3'15? 1 C i' ". RPE_332! “PC_2]5.' Split}!!!- Emma
HAT JD!“ 1 L D i! RFEIJBﬂ ' RFD M30." “Pill-'11?
ll 301'] 1 C 'u‘ " RDEJSES III-(31% MIDJEIJ'Q ran-nuns

 

Fig. 1. Screen shots of the SPOCS web application home page, a sample
of the text output (viewed in Excel) and an html page for a Degenerate
group that will resolve two cliques (orange and green)

The web application requires only the protein fasta ﬁles, a job
title and an email address (Fig. 1, upper left). The user is notiﬁed by
email when results are available, because jobs may require hours to
run, depending on the number of species involved. The stand-alone
Linux implementation and the web application generate the same
outputs: a tab-delimited report ﬁle in which each line represents a
predicted set of orthologs (Fig. 1, lower right), and optionally, self-
contained html output with visualizations of the ortholog relation-
ships (Fig. 1, upper right). SPOCS also offers several options to
control parameters associated with utilization of an outgroup spe-
cies, identiﬁcation of the reciprocal BLAST hits, generation of
html ﬁles for visualization, and incorporation of metadata on
gene/protein expression that can be overlaid on the html images.

2.2 Application

Provided a set of n proteomes (fasta-formatted ﬁles of the predicted
proteins from a species) and an optional proteome to serve as the
outgroup, SPOCS proceeds through three main stages. First,
SPOCS executes a series of BLAST (Altschul et al., 1997) runs
between every pair of species to identify reciprocal best hits; this
is the most compute-intensive stage, requiring n2 independent
BLAST runs. When SPOCS is run locally, the BLAST results are
stored in the scratch directory, allowing subsequent SPOCS runs
that include some of the same n species to avoid performing BLAST
runs if they already exist. In the second stage, SPOCS uses the
BLAST results to generate an orthology/paralogy relationship
graph based on merging the pairwise ortholog and in-paralog re-
lationships [as deﬁned by Remm et al., (2001)]. Finally, SPOCS
identiﬁes cliques in each graph by breaking it into subgraphs and
using the branch and bound clique-ﬁnding algorithm (Konc and
J anezic, 2007) to iteratively ﬁnd all cliques in each subgraph.

We classify the graphs into four subjective categories: Complete,
SemiComplete, Incomplete and Degenerate. The Complete graphs
include no more than one protein per species and every protein
(node in the graph) is connected to every other protein by a recip-
rocal best hit (edge), i.e., a maximum clique. SemiComplete graphs
may be reported in which no more than one protein per species is
present but with less than the maximal number of edges (this is a
tunable parameter for which the default is 5 %). By deﬁnition, these
Complete and SemiComplete cliques are the result of single unique
graphs that resolve to single unique cliques. The Incomplete graphs
have no more than one protein per species, and less than the max-
imal number of edges (more missing edges than speciﬁed for

SemiComplete). The Degenerate graphs have more than one pro-
tein (node) from one or more of the species. For the Incomplete
and Degenerate graphs, the clique-ﬁnding algorithm will identify
as many maximum cliques as possible.

2.3 Visualization

Using the —H ﬂag with the stand-alone software, or the html
radio button on the web application will generate self-contained
html output, which allows the user to navigate through the graph
space and view gene relationships. The graph structure is ren-
dered using a force-directed layout engine, which uses charged
particles to place related genes closer together in the graph; the
html output provides this graph image as well as a link to the
fasta ﬁle of those proteins and a table providing their functional
annotation. Generation of the html output does not appreciably
affect run-time, but will dramatically increase the number of ﬁles
generated. Though no upper limit has been imposed on the
number of genomes that SPOCS can process, the visualization
functions were designed to facilitate the analysis of targeted data-
sets chosen to explore speciﬁc hypotheses, and can become dif-
ﬁcult to interpret as the number of genomes increases.

3 CONCLUSION

SPOCS provides a ﬂexible and extensible software tool for the
prediction of orthologs and paralogs among closely related gen-
omes. In addition to a standard table of orthologs, the html
output presents a visualization of the predicted orthology/paral-
ogy relationships, provides hooks back to the protein sequence
data and allows the overlay of gene/protein expression metadata.

ACKNOWLEDGEMENTS

The authors thank Elena Peterson for assistance setting up the
web application. Web application jobs are executed on the
PNNL Institutional Computing system at PNNL.

Funding: This work was supported by US. Department of
Energy, Ofﬁce of Biological and Environmental Research
(DOE-BER) Genome Science Program, and performed at the
Paciﬁc Northwest National Laboratory, a multiprogram na-
tional laboratory operated by Battelle for the DOE under
Contract DE-AC06-76RL01830.

Conﬂict of Interest: none declared.

REFERENCES

Altschul,S.F. et al. (1997) Gapped BLAST and PSI-BLAST: a new generation of
protein database search programs. Nucleic Acids Res., 25, 3389—3402.

Callister,S.J. et al. (2008) Comparative bacterial proteomics: analysis of the core
genome concept. PLoS One, 3, e1542.

Konc,J. and J anezic,D. (2007) An improved branch and bound algorithm for the
maximum clique problem. Match-Commun. Math C0., 58, 569—590.

Konstantinidis,K.T. et al. (2009) Comparative systems biology across an evolution-
ary gradient within the Shewanella genus. Proc. Natl Acad. Sci. USA, 106,
15909—15914.

Kristensen,D.M. et al. (2011) Computational methods for gene orthology inference.
Brief Bioinform., 12, 379—391.

Remm,M. et al. (2001) Automatic clustering of orthologs and in-paralogs from
pairwise species comparisons. J. Mol. Biol., 314, 1041—1052.

Sjolander,K. et al. (2011) Ortholog identiﬁcation in the presence of domain archi-
tecture rearrangement. Brief. Bioinform., 12, 413—422.

 

2642

112 /310's113umo [pJOJXO'SOIlBIHJOJUIOIQ/ﬁdllq 11101; popeoIII/noq

9IOZ ‘09 lsnﬁnv uo ::

