APPLICA TIONS NOTE V0" 2,52,?it)?Sé‘iéiaﬁéiifaifiﬁiii

 

Structural bioinformatics

Advance Access publication August 9, 2012

BioJava: an open-source framework for bioinformatics in 2012

Andreas Prlic1’*, Andrew Yates2, Spencer E. Bliven3, Peter W. Rose‘, Julius Jacobsen2,
Peter V. Troshin4, Mark Chapman5, Jianjiong Gao6, Chuan Hock Koh7, Sylvain Foisy8,
Richard Hollandg, Gediminas Rimsam, Michael L. Heuer”, H. Brandstatter—MUIIerm,

Philip E. Bourne13 and Scooter Willis14

1San Diego Supercomputer Center, University of California San Diego, La Jolla, CA 92093, USA, 2European
Bioinformatics Institute, Wellcome Trust Genome Campus, Hinxton, Cambridge CB10 1SD, UK, 8Bioinformatics
Program, University of California San Diego, La Jolla, CA 92093, USA, 4College of Life Sciences, University of Dundee,
Dundee DD1 5EH, UK, 5Department of Computer Science, University of Wisconsin—Madison, WI 53706, USA,
6Computational Biology Center, Memorial Sloan—Kettering Cancer Center, New York, NY 10065, USA, 7NUS Graduate
School for Integrative Sciences and Engineering, Singapore 117597, Singapore, 8Genetics and Genomics Medicine of
Inflammation, Montreal Heart Institute, Montreal, Quebec, Canada H1T 1C8, 9Eagle Genomics Ltd, Babraham Research
Campus, Cambridge CB22 3AT, UK, 10Faculty of Mathematics and Informatics, Vilnius University, LT—03225 Vilnius,
Lithuania, 11Harbinger Partners, Inc., St Paul, MN 55127, USA, 12University of Applied Sciences Upper Austria, 4232
Hagenberg, Austria, 18Skaggs School of Pharmacy and Pharmaceutical Sciences, University of California San Diego,
La Jolla, CA 92093, USA and 14Genomics Core, Scripps Florida, Jupiter, FL 33458, USA

Associate Editor: Alex Bateman

 

ABSTRACT

Motivation: BioJava is an open-source project for processing of bio-
logical data in the Java programming language. We have recently
released a new version (3.0.5), which is a major update to the code
base that greatly extends its functionality.

Results: BioJava now consists of several independent modules that
provide state-of-the-art tools for protein structure comparison, pair-
wise and multiple sequence alignments, working with DNA and protein
sequences, analysis of amino acid properties, detection of protein
modifications and prediction of disordered regions in proteins as
well as parsers for common file formats using a biologically meaningful
data model.

Availability: BioJava is an open-source project distributed under the
Lesser GPL (LGPL). BioJava can be downloaded from the BioJava
website (http://www.biojava.org). BioJava requires Java 1.6 or
higher. All inquiries should be directed to the BioJava mailing lists.
Details are available at http://biojava.org/wiki/BioJava:MailingLists
Contact: andreas.prlic@gmail.com

Received on May 28, 2012; revised on July 30, 2012; accepted on
August 2, 2012

1 INTRODUCTION

BioJava is an established open-source project driven by an active
developer community (Holland et al., 2008). It provides a frame-
work for processing commonly used biological data and has seen
contributions from >60 developers in the 12 years since its cre-
ation. The supported data range in scope from DNA and protein
sequence information up to the level of 3D protein structures.
BioJava provides various file parsers, data models and

 

*To whom correspondence should be addressed.

algorithms to facilitate working with the standard data formats
and enables rapid application development and analysis.

The project is hosted by the Open Bioinformatics Foundation
(OBF, http://www.open-bio.org), which provides the source code
repository, bug tracking database and email mailing lists. It also
supports projects SUCH AS BioPerl (Stajich et al., 2002),
BioPython (Cock et al., 2009), BioRuby (Goto et al., 2010),
EMBOSS (Rice et al., 2000) and others.

2 METHODS

Over the last 2 years, large parts of the original code base have been
rewritten. BioJava 3 is a clear departure from the version 1 series. It
now consists of several independent modules built using Maven (http://
maven.apache.org). The original code has been moved into a separate
biojava-legacy project, which is still available for backwards compatibil-
ity. In the following, we describe several of the new modules and highlight
some of the new features that are included in the latest version of
BioJava.

2.1 Core module

The core module provides classes to model nucleotide and amino acid
sequences and their inherent relationships. Emphasis was placed on using
Java classes and method names to describe sequences that would be fa-
miliar to the biologist and provide a concrete representation of the steps
in going from a gene sequence to a protein sequence to the computer
scientist.

BioJava 3 leverages recent innovations in Java. A sequence is deﬁned
as a generic interface, allowing the framework to build a collection of
utilities which can be applied to any sequence such as multiple ways of
storing data. In order to improve the framework’s usability to biologists,
we also deﬁne specific classes for common types of sequences, such as
DNA and proteins. One area that highlights this work is the translation
engine, which allows the interconversion of DNA, RNA and amino acid
sequences. The engine can handle details such as choosing the codon

 

© The Author 2012. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0), which
permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /310's113umo [p.IOJXO'SOTlBIHJOJUTOTCI/ﬁdllq U101} pepBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

A.Prlic' et aI.

 

table, converting start codons to a methionine, trimming stop codons,
specifying the reading frame and handling ambiguous sequences (‘R’ for
purines, for example). Alternatively, the user can manually override de-
faults for any of these.

The storage of sequences is designed to minimize memory usage for
large collections using a ‘proxy’ storage concept. Various proxy imple-
mentations are provided which can store sequences in memory, fetch
sequences on demand from a web service such as UniProt or read
sequences from a FASTA ﬁle as needed. The latter two approaches
save memory by not loading sequence data until it is referenced in the
application. This concept can be extended to handle very large genomic
datasets, such as NCBI GenBank or a proprietary database.

2.2 Protein structure modules

The protein structure modules provide tools for representing and manip-
ulating 3D biomolecular structures, with the particular focus on protein
structure comparison. It contains Java ports of the FATCAT algorithm
(Ye and Godzik, 2003) for ﬂexible and rigid body alignment, a version of
the standard Combinatorial Extension (CE) algorithm (Shindyalov and
Bourne, 1998) as well as a new version of CE that can detect circular
permutations in proteins (Bliven and Prlic, 2012). These algorithms are
used to provide the RCSB Protein Data Bank (PDB) (Rose et al., 2011)
Protein Comparison Tool as well as systematic comparisons of all pro-
teins in the PDB on a weekly basis (Prlié et al., 2010).

Parsers for PDB and mmCIF ﬁle formats (Bernstein et al., 1977;
Fitzgerald 61 al., 2006) allow the loading of structure data into a reusable
data model. Notably, this feature is used by the SIFTS project to map
between UniProt sequences and PDB structures (Velankar et al., 2005).
Information from the RCSB PDB can be dynamically fetched without the
need to manually download data. For visualization, an interface to the
3D viewer Jmol (Hanson, 2010) http://www.jmol.org/ is provided. Work
is underway for better interaction with the RCSB PDB viewers
(Moreland et al., 2005).

2.3 Genome and sequencing modules

The genome module is focused on the creation of gene sequence objects
from the core module by supporting the parsing of GTF ﬁles generated
by GeneMark (Besemer and Borodovsky, 2005), GFF2 ﬁles generated by
GeneID (Blanco and Abril, 2009) and GFF3 ﬁles generated by Glimmer
(Kelley et al., 2011). The gene sequences can then be written out as a
GFF3 format for importing into GMOD (Stein et al., 2002). A separate
sequencing module provides memory efﬁcient, low level and streaming
I/O support for several common variants of the FASTQ ﬁle format from
next generation sequencers (Cock 61 al., 2010).

2.4 Alignment module

The alignment module supplies standard algorithms for sequence align-
ment and establishes a foundation to perform progressive multiple se-
quence alignments. For pairwise alignments, an implementation of the
Needleman—Wunsch algorithm computes the optimal global alignment
(Needleman and Wunsch, 1970) and the Smith—Waterman algorithm cal-
culates local alignments (Smith and Waterman, 1981). In addition to
these standard pairwise algorithms, the module includes the Guan—
Uberbacher algorithm to perform global sequence alignment efﬁciently
using only linear memory (Guan and Uberbacher, 1996). This routine
also allows predeﬁned anchors to be manually speciﬁed that will be
included in the alignment produced. Any of the pairwise routines can
also be used to perform progressive multiple sequence alignment. Both
pairwise and multiple sequence alignments output to standard alignment
formats for further processing or visualization.

I' I-I-II I -||':'r'l'
|-|--'l-'-|I I- [IniI-Irulll’iz'

  F"

 

 

 

“HI—J

lnquMluH-L

Edi-nut” Irhﬂn-l-rril‘rﬂtrh-HIHI-l-Iﬂ-I—ﬂ r-I-Iﬂlu' 
g...---.-11|. 5.:— _-1uu. [39: i" "E "' "-"' " 1' l'r'" -' - "' '=- "
|I...I.-| :n-l- ..-. . .-| "' "J'- ' ‘ _ L'
"-f'l..!ul I Fl'r'. urn-Fru'II-ln ﬂ'l '_ ~.‘--' . "  '.-"';. .' :-- :u- e - - _,"-_-;- _-_.-- -.--J ._;;_.._--.-.-.
Mammalian 3.3-; M, I ._ ;.:-_ ,, ;
||.|-lr|'.-r|--r|-r_l  ll, _ _ .I. . ,
II'.-l.-|.-.|”-| __II II“ _P "I _:-__ .._ hall _I_ I I

u L-
,..__ __., J. A H ..—‘
" . - ‘v' H - v .
-- -1.I 'L'h'EIJ'H'E Myth} TIEILH'lHEf'LD'E [\lLF‘M-I L'- IHPDE'E ID{ -'luI.'E [PEEP-“3H | IEEIJE'L'
' I' II 3| 1'" "" 5" "r
.._ _ﬁﬁﬁﬁ_I\_\—fl.h_.ﬁ_ _
' "-.r U u u' u r -.-' v

 

| FIDWIF IQI‘QKEI KF'FHYHI TEhLDH ’nﬁFMLKLEll'QHI. Fl
II'II II II III IIIII III-

 

Fig. 1. An example application using the ModFinder module and the
protein structure module. Protein modiﬁcations are mapped onto the
sequence and structure of ferredoxin I (PDB ID 1GAO; Chen et al.,
2002). Two possible iron—sulfur clusters are shown on the protein se-
quence (3Fe—4S (F3S): orange triangles/lines; 4Fe—4S (SF4): purple dia-
monds/lines). The 4Fe—4S cluster is displayed in the Jmol structure
window above the sequence display

2.5 ModFinder module

The ModFinder module provides new methods to identify and classify
protein modiﬁcations in protein 3D structures. More than 400 different
types of protein modiﬁcations (phosphorylation, glycosylation, disulﬁde
bonds metal chelation, etc.) were collected and curated based on anno-
tations in PSI-MOD (Montecchi-Palazzi et al., 2008), RESID (Garavelli,
2004) and RCSB PDB (Berman et al., 2000). The module provides
an API for detecting protein modiﬁcations within protein structures.
Figure 1 shows a web-based interface for displaying modiﬁcations
which was created using the ModFinder module. Future developments
are planned to include additional protein modiﬁcations by integrating
other resources such as UniProt (Farriol-Mathis et al., 2004).

2.6 Amino acid properties module

The goal of the amino acid properties module is to provide a range of
accurate physicochemical properties for proteins. The following peptide
properties can currently be calculated: molecular weight, extinction coef-
ﬁcient, instability index, aliphatic index, grand average of hydropathy,
isoelectric point and amino acid composition.

To aid proteomic studies, the module includes precise molecular
weights for common isotopically labeled or post-translationally modiﬁed
amino acids. Additional types of PTMs can be deﬁned using simple XML
conﬁguration ﬁles. This ﬂexibility is especially valuable in situations
where the exact mass of the peptide is important, such as mass spectrom-
etry experiments.

2.7 Protein disorder module

BioJava now includes a port of the Regional Order Neural Network
(RONN) predictor (Yang et al., 2005) for predicting disordered regions
of proteins. BioJava’s implementation supports multiple threads, making
it ~3.2—times faster than the original C implementation on a modern
quad-core machine.

The protein disorder module is distributed both as part of the BioJava
library and as a standalone command line executable. The executable is
optimized for use in automated analysis pipelines to predict disorder in

 

2694

112 /810's113umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq U101} prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

BioJava 2012

 

multiple proteins. It can produce output optimized for either human
readers or machine parsing.

2.8 Web service access module

More and more bioinformatics tools are becoming accessible through the
web. As such, BioJava now contains a web services module that allows
bioinformatics services to be accessed using REST protocols. Currently,
two services are implemented: NCBI Blast through the Blast URLAPI
(previously known as QBlast) and the HMMER web service at hmmer.-
janelia.org (Finn et al., 2011).

3 CONCLUSION

The BioJava 3 library provides a powerful API for analyzing
DNA, RNA and proteins. It contains state-of—the-art algorithms
to perform various calculations and provides a ﬂexible frame-
work for rapid application development in bioinformatics. The
library also provides lightweight interfaces to other projects that
specialize in visualization tools. The transition to Maven made
managing external dependencies much easier, allowing the use of
external libraries without overly complicating the installation
procedure for users.

The BioJava project site provides an online cookbook which
demonstrates the use of all modules through short recipes of
common tasks. We are looking forward to extending the
BioJava 3 library with more functionality over the coming
years and welcome contributions of novel components by the
community.

ACKNOWLEDGEMENTS

The authors thank everybody who contributed code, documen-
tation or ideas, in particular A. Al-Hossary, R. Thornton, J.
Warren, A. Draeger, G. Waldon and G. Barton. Each contribu-
tion is appreciated, although the total list of contributors is too
long to be reproduced here. They also thank the Open
Bioinformatics Foundation for project hosting.

Funding: The RCSB PDB (NSF DBI 0829586 to AP, P.W.R.
and P.E.B.); Google Summer of Code in 2010 and 2011 (to J.G.,
MC. and C.H.K.) and Scottish Universities Life Sciences
Alliance (SULSA) (to RT).

Conﬂict of Interest: None declared.

REFERENCES

Berman,H.M. et al. (2000) The Protein Data Bank. Nucleic Acids Res, 28, 235—242.

Bernstein,F.C. et al. (1977) The Protein Data Bank: a computer-based archival ﬁle
for macromolecular structures. J. Mol. Biol., 112, 535—542.

Besemer,J. and Borodovsky,M. (2005) GeneMark: web software for gene ﬁnding in
prokaryotes, eukaryotes and viruses. Nucleic Acids Res, 33 (Web Server issue),
W451—W454.

Blanco,E. and Abril,J.F. (2009) Computational gene annotation in new genome
assemblies using GeneID. Methods Mol. Biol., 537, 243—261.

Bliven,S. and Prlic,A. (2012) Circular permutation in proteins. PLoS Comput. Biol.,
8, 61002445.

Chen,K. et al. (2002) Azotobacter vinelandii ferredoxin I: a sequence and structure
comparison approach to alteration of [4Fe-4S]2+/+ reduction potential. J. Biol.
Chem, 277, 5603—5610.

Cock,P.J.A. et al. (2009) Biopython: freely available Python tools for computational
molecular biology and bioinformatics. Bioinformatics, 25, 1422—1423.

Cock,P.J.A. et al. (2010) The Sanger FASTQ ﬁle format for sequences with quality
scores, and the Solexa/Illumina FASTQ variants. Nucleic Acids Res, 38,
1767—1771.

Farriol-Mathis,N. et al. (2004) Annotation of post-translational modiﬁcations in
the Swiss-Prot knowledge base. Proteomics, 4, 1537—1550.

Finn,R.D. et al. (2011) HMMER web server: interactive sequence similarity search-
ing. Nucleic Acids Res, 39 Web Server issue), W29—W37.

Fitzgerald,P.M.D. et al. (2006) Macromolecular dictionary (mmCIF). In Hall,S.R.
and McMahon,B. (eds) Online. Vol. G. Springer, pp. 295—443. http://www.
springerlink.com/content/v4r60un4575p5234/.

Garavelli,J.S. (2004) The RESID Database of Protein Modiﬁcations as a resource
and annotation tool. Proteomics, 4, 1527—1533.

Goto,N. et al. (2010) BioRuby: bioinformatics software for the Ruby programming
language. Bioinformatics, 26, 2617—2619.

Guan,X. and Uberbacher,E.C. (1996) Alignments of DNA and protein sequences
containing frameshift errors. Comput. Appl. Biosci. 12, 31—40.

Hanson,R.M. (2010) Jmol a paradigm shift in crystallographic visualization.
J. Appl. Crystallogr., 43, 1250—1260.

Holland,R.C.G. et al. (2008) BioJava: an open-source framework for bioinfor-
matics. Bioinformatics, 24, 2096—2097.

Kelley,D.R. et al. (2011) Gene prediction with Glimmer for metagenomic sequences
augmented by classiﬁcation and clustering. Nucleic Acids Res, 40, 1—12.

Montecchi-Palazzi,L. et al. (2008) The PSI-MOD community standard for repre-
sentation of protein modiﬁcation data. http://www.ncbi.nlm.nih.gov/
pubmed/ l 868 8235.

Moreland,J.L. et al. (2005) The Molecular Biology Toolkit (MBT): a modular plat-
form for developing molecular visualization applications. BM C Bioinformatics,
6, 21.

Needleman,S.B. and Wunsch,C.D. (1970) A general method applicable to the
search for similarities in the amino acid sequences of two proteins. J. Mol.
Biol., 48, 443—453.

Prlic,A. et al. (2010) Pre-calculated protein structure alignments at the RCSB PDB
website. Bioinformatics, 26, 2983—2985.

Rice,P. et al. (2000) EMBOSS: the European Molecular Biology Open Software
Suite. Trends Genet., 16, 276—277.

Rose,P.W. et al. (2011) The RCSB Protein Data Bank: redesigned web site and web
services. Nucleic Acids Res, 39 (Database issue), D392—D401.

Shindyalov,I.N. and Bourne,P.E. (1998) Protein structure alignment by incremental
combinatorial extension {(CE)} of the optimal path. Protein Eng, 11, 739—747.

Smith,T.F. and Waterman,M.S. (1981) Identiﬁcation of common molecular subse-
quences. J. Mol. Biol., 147, 195—197.

Stajich,J.E. et al. (2002) The Bioperl toolkit: Perl modules for the life sciences.
Genome Res, 12, 1611—1618.

Stein,L.D. et al. (2002) The Generic Genome Browser: a building block for a model
organism system database. Genome Res, 12, 1599—1610.

Velankar,S. et al. (2005) E-MSD: an integrated data resource for bioinformatics.
Nucleic Acids Res, 33 (Database issue), D262—D265.

Yang,Z.R. et al. (2005) RONN: the bio-basis function neural network technique
applied to the detection of natively disordered regions in proteins.
Bioinformatics, 21, 3369—3376.

Ye,Y. and Godzik,A. (2003) Flexible structure alignment by chaining aligned frag-
ment pairs allowing twists. Bioinformatics, 19 (Suppl. 2), II246—II255.

 

2695

112 /810's112umo [progxo'sor1nu1101urorq//:d11q U101} pep1201umoq

9IOZ ‘09 lsnﬁnv uo ::

