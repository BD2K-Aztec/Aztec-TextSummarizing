ORIGINAL PAPER

Vol. 30 no. 21 2014, pages 3101-3108
doi: 10. 1 093/bioinformatics/btu498

 

Systems biology

Advance Access publication July 28, 2014

Biocellion: accelerating computer simulation of multicellular

biological system models

Seunghwa Kang”, Simon Kahan2, Jason McDermottl, Nicholas Flann3 and

llya Shmulevich4

1Computational Biology and Bioinformatics Group, 2High—performance Computing Group, Pacific Northwest National
Laboratory, Richland, WA 99854, USA, 8Department of Computer Science, Utah State University, Logan, UT 84822,
USA and 4lnstitute for Systems Biology, Seattle, WA 98109, USA

Associate Editor: Jonathan Wren

 

ABSTRACT

Motivation: Biological system behaviors are often the outcome of
complex interactions among a large number of cells and their biotic
and abiotic environment. Computational biologists attempt to under-
stand, predict and manipulate biological system behavior through
mathematical modeling and computer simulation. Discrete agent-
based modeling (in combination with high-resolution grids to model
the extracellular environment) is a popular approach for building
biological system models. However, the computational complexity of
this approach forces computational biologists to resort to coarser
resolution approaches to simulate large biological systems. High-
performance parallel computers have the potential to address the
computing challenge, but writing efficient software for parallel com-
puters is difficult and time-consuming.

Results: We have developed Biocellion, a high-performance software
framework, to solve this computing challenge using parallel com-
puters. To support a wide range of multicellular biological system
models, Biocellion asks users to provide their model specifics by filling
the function body of pre-defined model routines. Using Biocellion,
modelers without parallel computing expertise can efficiently exploit
parallel computers with less effort than writing sequential programs
from scratch. We simulate cell sorting, microbial patterning and a
bacterial system in soil aggregate as case studies.

Availability and implementation: Biocellion runs on x86 compatible
systems with the 64 bit Linux operating system and is freely available
for academic use. Visit http://biocellion.com for additional information.
Contact: seunghwa.kang@pnnl.gov

Received on April 2, 2014; revised on June 28, 2014; accepted on
July 17, 2014

1 INTRODUCTION

Cells interact with other cells by moving, adhering, dividing and
secreting and receiving diffusible molecules. As a result, unicel-
lular organisms are able to form communities with complex
macroscopic structure and behavior (e.g. biofilm), while multi-
cellular organisms, where cells can differentiate to perform dif-
ferent functions, form tissues. Multicellular biological systems
respond to external stimuli and reshape the surrounding envir-
onment. Complex interactions among cells and their biotic and

 

*To whom correspondence should be addressed.

abiotic environment drive multicellular system behavior.
Understanding the impact of such interactions is a critical step
in our ability to predict and manipulate important biological
system behaviors in the areas of energy (Melnicki et al., 2013),
environment (Daly, 2000) and health care Weinberg, 2007).

Computational biologists have started to investigate multicel-
lular biological systems via modeling and simulation. Cells and
their biotic and abiotic environment constitute a biological
system. Computational biologists commonly model the environ-
ment by imposing a grid on the extracellular space. There are
two principal approaches in modeling cells: population-based
modeling and discrete agent-based modeling. Population-based
modeling (Anderson and Chaplain, 1998; Xavier et al., 2009)
approximates the cells within any grid box by a set of variables
associated with the grid box. Discrete agent-based modeling
(Anderson and Chaplain, 1998; Ferrer et al., 2008; Jeannin-
Girardon et al., 2013) maps each cell (or subcellular element)
to a discrete simulation entity.

Biologists have accumulated a significant amount of know-
ledge about cell and subcellular organelle behaviors. Discrete
agent-based modeling naturally translates the accumulated
knowledge to a mathematical model. However, the computa-
tional complexity of discrete agent-based modeling increases pro-
portional to the number of discrete agents. Many biological
systems contain 1 million to 100 billion cells (Byrne and
Drasdo, 2009). Researchers have acknowledged the necessity of
supercomputers and a proper parallel implementation to simulate
millions to billions of cells within a reasonable time (Jiao and
Torquato, 2011). The lack of ‘a proper parallel implementation’
forces computational biologists to simply use a small number of
cells (which does not reﬂect the reality), resort to population-
based modeling or develop a hybrid approach that uses discrete
agent-based modeling for a fraction of the cells [e.g. invading
cancer cells (Frieboes et al., 2010)] and adopts population-
based modeling for the remaining cells.

The most practical approach to build a high fidelity model of
important biological systems is starting from a relatively simple
model and incrementally improving the model fidelity, which
typically results in increases in the complexity and scale of the
model. For this approach to be successful, we believe that an
incremental increase in model complexity and scale should re-
quire only an incremental amount of additional programming
effort. Population-based modeling and the hybrid approach are

 

© The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 3101

112 /310's113u1no [p.IOJXO'SOllBIIHOJUIOIQ/ﬁdllq 11101} pepeoIII/noq

9IOZ ‘09 lsnﬁnv uo ::

S.Kang et aI.

 

inherently limited in this regard. Averaging a heterogeneous
population of cells to a few variables associated with a grid
box cannot model cell granularity events in the required level
of detail (McDougall et al., 2002). Adopting the hybrid ap-
proach, fewer and fewer cells can be modeled using the popula-
tion-based approach as modelers adopt more complex
mathematics to describe individual cell behaviors.

We designed Biocellion to allow computational biologists to
use discrete agent-based modeling—in combination with high-
resolution grids to model the extracellular environment—from
simple small-scale models to highly complex large-scale models
with millions to billions of cells. We aim to address the increase
in computational complexity exploiting high-performance com-
puting (HPC): adoption of efﬁcient algorithms, careful perform-
ance tuning and exploitation of parallel computers ranging from
multicore PCs to Cloud computers and supercomputers.

Parallel computers are abundant but developing efﬁcient soft-
ware for large parallel computers is a highly demanding task
(Bernholdt, 2007) and becoming even more so with new multi-
core processors and manycore accelerators such as Intel Xeon
Phi and NVIDIA graphics processing units (Kang et al., 2011).
Biological system models are diverse and even a model from a
single research group changes signiﬁcantly over a relatively short
period. This imposes a challenge in software reusability, which is
problematic considering the high development cost of parallel
software. Biocellion asks users to express their model speciﬁcs
by ﬁlling the function body of pre—deﬁned model routines.
Biocellion executes and evaluates the user-provided model rou-
tines in parallel using efﬁcient solvers. This approach provides
Biocellion users having no HPC expertise with the ﬂexibility
needed to support a variety of models and the performance
required to simulate large systems.

1.1 Related work

VirtualCell (Loew and Schaff, 2001) and Smoldyn (Andrews,
2012) simulates one or a small number of cells in detail—model-
ing cell membrane and subcellular structures in high spatial reso-
lution or individually modeling every molecule. CompuCe113D
(Izaguirre et al., 2004) and Morpheus (StarruB et al., 2014) adopt
the Cellular Potts model (Graner and Glazier, 1992) and target
biological systems with up to millions of cells. The Cellular Potts
Model partitions the simulation domain into equally sized cubic
boxes and maps a set of boxes to each cell. The Cellular Potts
Model evaluates the overall biological system energy based on
mathematical constraints derived from cell behavioral rules and
dynamically updates the mapping between boxes and cells to
minimize the overall system energy. However, Voss—Bohme
(2012) claims that modeling biological system behaviors using
the contrived energy term complicates interpreting simulation
output. Discrete agent-based modeling maps a cell to an agent
(or multiple agents). Discrete agents can be placed anywhere in
the simulation domain to within the limits of ﬂoating point pre-
cision. Discrete agents move and change sizes to model cell
movement and growth. There are multiple general-purpose soft-
ware frameworks supporting agent-based modeling—e.g.
FLAME (Chin et al., 2012) and SWARM (Minar et al., 1996).
These tools are highly ﬂexible in modeling agent behaviors but
require more programming efforts than software frameworks

speciﬁcally designed for biological system modeling; modelers
need to implement partial differential equation (PDE) solvers
from scratch to update molecular concentrations by solving
PDEs. iDynoMiCS (Lardon et al., 2011) is an agent-based simu-
lation framework designed for bioﬁlm modeling targeting non-
programmers. iDynoMiCS does not support parallel computing.
To the best of our knowledge, Biocellion is the only software
framework that is speciﬁcally designed for discrete agent-based
simulation of general multiscale multicellular biological system
models and exploits high-performance parallel computing to
simulate millions to billions of cells.

2 METHODS

2.1 Biocellion design motivation

Mathematical models of biological systems are diverse, but at the same
time, many of the models share common programming and computa-
tional challenges. For example, enumerating cell pairs close enough to
interact via direct contact is a recurring task. PDE is commonly used to
model spatio-temporal variation of molecular concentrations in the extra-
cellular environment. Efﬁcient PDE solvers can be reused. Every parallel
simulation of multicellular models must distribute the work of simulating
(i) cells, (ii) cell—cell interactions and (iii) different subregions of the extra-
cellular space across compute cores on multiple compute nodes. These are
recurring tasks.

A biological system model needs to integrate multiple biological pro-
cesses occurring in different timescales to simulate the system in its entir-
ety. This requires multiple time step sizes. Solving PDEs to model
molecular diffusion often requires a much smaller time step size than
simulating cell movement due to cell growth and cell—cell shoving and
adhesion. Biological processes are interrelated. The required coupling
interval—the maximum time step size to simulate one biological process,
ignoring the changes due to another biological process, without introdu-
cing a signiﬁcant simulation artifact—varies widely for different pairs of
biological processes. Multiple time step sizes and coupling intervals com-
plicate data exchange patterns in parallel computing.

The HPC community has developed efﬁcient (but complex to imple-
ment) algorithms for many of these recurring issues [e.g. developing efﬁ-
cient PDE solvers (Colella et al., 2012)] or at least have identiﬁed them as
future research challenges (Bernholdt, 2007). Biocellion’s design goal is to
integrate various algorithms developed by the HPC community to over-
come the challenges in concurrently simulating multiple coupled biolo-
gical processes. This allows computational biologists to focus on building
high-ﬁdelity mathematical models (instead of introducing crude approxi-
mations to reduce the programming and simulation time or wasting time
on implementing complex software).

There are two challenges to overcome: (i) designing the Biocellion ap-
plication programming interface (API) to accommodate the modeling
requirements of a spectrum of multicellular biological system models
and (ii) providing a high-performance implementation. We focus on the
API design issue in this article. The full details of the Biocellion API are
also available in the Biocellion user manual (Kang and Kahan, 2014).

2.2 HPC algorithm overview

We brieﬂy describe our HPC approach here for readers interested in
Biocellion internals; the full details will appear in another paper targeting
HPC experts. Multiscale models are composed of coupled computational
modules. There are two approaches to simulating multiscale models on
parallel computers with multiple compute nodes. One approach is to
functionally decompose the simulation into multiple computational mod-
ules, running each module on a dedicated partition of the compute nodes
(Borgdorff et al., 2014). Modules communicate with each other via

 

3102

112 /310's113u1no [p.IOJXO'SOllBIIHOJUIOIQ/ﬁdllq 1110.1} pepeoIII/noq

9IOZ ‘09 lsnﬁnv uo ::

Biocellion

 

explicit internode messages. One can easily build multiscale simulation
software by composing existing programs and modifying the program
interfaces (Borgdorff et al., 2014), but the internode communication
network becomes a performance bottleneck if modules communicate fre-
quently or voluminously.

Biocellion takes a second approach, spatially partitioning the simula-
tion domain. Partitions are assigned to the compute nodes, each execut-
ing the entire set of modules for its allotment of partitions. Different
modules communicate using memory copy operations, and internode
communication occurs only at partition boundaries. This reduces the
internode communication volume but complicates programming.
Another challenge is balancing the computational load presented by
modules with diverse characteristics, including those deﬁned by the user
provided model routine code, across compute cores. Biocellion addresses
these challenges by using Intel Thread Building Block (TBB) to coordin-
ate the concurrent execution of the computational modules—TBB is de-
signed to support nested irregular parallelism and ﬁts well in our context.

For internode communication, Biocellion uses MP1 to communicate
data at partition boundaries and PNNL Global Arrays (http://hpc.pnl.
gov/globalarrays) to share dynamically collected computational charac-
teristics data for different partitions (which are used to map partitions to
compute nodes). Different computational modules communicate at dif-
ferent time intervals to exchange data at partition boundaries. Different
partitions also have varying computational costs (e. g. some partitions are
more densely populated with cells). Assigning neighboring partitions to a
single compute node reduces the internode communication volume.
Biocellion uses a newly designed algorithm to map partitions to compute
nodes considering the above issues and using the dynamically collected
characteristics data.

Biocellion adopts efﬁcient (but complex) algorithms. Biocellion uses the
octree partitioning (Meagher, 1982) to efﬁciently enumerate neighboring
agent pairs even when there are different types of agents with varying
direct physical interaction ranges. Biocellion solves PDEs using an
L-stable multi-step semi-implicit method based on adaptive mesh reﬁne-
ment (AMR) and multigrid via customizing CHOMBO (Colella et al.,
2012). An L-stable semi-implicit method allows users to use a much larger
time step size than explicit methods on solving stiff problems on a ﬁne
grid (Iserles, 2009). AMR allows users to impose multiple grids with
different grid spacings based on the spatial resolution requirements of
the simulation subdomains. The multigrid method improves the conver-
gence rate of a numerical method for large problems (Briggs et al., 2000).

Biocellion users do not need to understand our HPC approaches. Users
need to ﬁll the model routines to describe biological system behaviors.
Efﬁciently evaluating the model routines using parallel computers is
Biocellion’s responsibility.

2.3 Simulation components

Biocellion has three computational modules to (i) update individual dis-
crete agent states, (ii) evaluate direct physico-mechanical interactions
between discrete agent pairs in close proximity and (iii) track changes
in the extracellular space to model indirect interactions among cells via
diffusible molecules and interactions between cells and their environment.

2.3.] Updating individual agent states This module modiﬁes the
state variables associated with discrete agents. Discrete agent state
changes include, but are not limited to, discrete agent growth and
shape transformation, increases or decreases in concentrations of various
intracellular and cell membrane-bound molecules, cell differentiation and
mutation and up- or down-regulation of various molecule consumption
and production rates. Biocellion asks users to set the number of discrete
agent types and the number of state variables for each discrete agent type.
This allows modelers to assign an arbitrary shape (Fig. 1a) or an arbitrary
set of attributes to a discrete agent based on the model requirements—
different models require different sets of state variables. Biocellion

provides model routines to update discrete agent state variables based
on the state of the discrete agent, direct physico-mechanical interactions
with neighboring cells and the state of the microenvironment. This
module also simulates cell division and death and secretion of new dis-
crete agents—cg. to model white blood cells moving out from blood
vessels (diapedesis) or secretion of extracellular polymeric substances or
extracellular matrix.

2.3.2 Evaluating direct interactions This module evaluates inter-
actions between discrete agent pairs via direct contact. Direct interactions
include cell—cell shoving and adhesion, immune cells engulﬁng pathogens
(phagocytosis), blood vessel tip cells connecting to an existing blood vessel
segment (anastomosis), horizontal gene transfer by bacterial conjugation
or any other interactions via direct contact between discrete agents.
Biocellion users set the maximum direct interaction distance for each
discrete agent type. For direct interactions between two discrete agents
with different types, Biocellion sets the maximum direct interaction dis-
tance by averaging the maximum direct interaction distances of the two
types. Biocellion’s role is to enumerate every agent pair within the max-
imum direct interaction distances, and model routines evaluate direct
interactions between an agent pair.

Cell—cell interactions often depend on previous interactions. For ex-
ample, if two cells form an adherens junction, pulling the two cells apart
requires greater force. Biocellion supports users to explicitly form and
break a junction between two discrete agent pairs (Fig. 1b). Two discrete
agents forming a junction have a set of variables associated with the
junction end in each cell’s boundary. Users set the number of variables
for each junction end type. For example, a modeler can add a variable to
store the molecular concentration of adhesion molecules if the model
requires the variable to evaluate the strength of cell adhesion. A junction
automatically breaks if the distance between the discrete agent pair form-
ing the junction exceeds the maximum direct interaction distance.

Direct interactions are evaluated in parallel. If a discrete agent directly
interacts with more than one agent, discrete agent variables representing
the changes due to direct interactions can be updated by multiple user
routine calls. This requires a coordination method if a single variable is
concurrently updated by multiple user routine calls. Biocellion supports
two different mechanisms to resolve conﬂicts—users select the conﬂict
resolution scheme. The overwrite scheme reﬂects only one of the multiple
updates from multiple user routine invocations. The delta scheme sums
the differences from the initial value. Changes are reﬂected only after
interactions between every pair within the interaction ranges are evalu-
ated. Say a modeler wishes to evaluate the mechanical stress on a cell by
summing the overlap distances between the cell and its neighboring cells.
The delta scheme is appropriate to sum the overlap distances. If multiple
immune cells are trying to engulf a pathogen agent, a modeler may expect
only one immune cell to succeed. Assume the modeler added a state
variable to the pathogen agent type to store the identiﬁer of an engulﬁng
cell. If multiple model routine calls attempt to update the variable, only
one attempt will succeed with the overwrite scheme. In the next time step,
the model routine compares the variable value and the interacting
immune cell’s identiﬁer, and if the two values coincide, the routine up-
dates relevant state variables to complete phagocytosis (e.g. add the
pathogen agent’s mass to the mass of the engulﬁng cell). This requires
two time steps. We propose to add the third transactional scheme to
simulate phagocytosis in a single time step in a more natural way. Two
model routine calls will be serialized if they update variables associated
with the same discrete agent, and the changes will be reﬂected
immediately.

2.3.3 Updating the extracellular environment The environment
update module modiﬁes variables representing the extracellular space
by either following model-speciﬁc rules or solving PDEs. The extracellu-
lar space is partitioned into a set of cubical grid boxes. Biocellion invokes
a model routine updating state variables associated with grid boxes based

 

3103

112 /310's113u1no [p.IOJXO'SOllBIIHOJUIOIQ/ﬁdllq uIOJj popeommoq

9IOZ ‘09 lsnﬁnv uo ::

S.Kang et aI.

 

(a) (dwdwdz, (b) (c)

(d) ii: = V . (305,31, z)l7X) + a(x,y,z)X + sofa/.2)

 

r .
Junction

11 X: molecular concentration

 

 

a: decay rate
,8: diffusion coefﬁcient

 

   

height=h

radius=r . ,
direction=(dx, dy, dz)

 

 

  

5: net production rate

I:
H (consumption rate if negative)

 

 

 

a(x, y, z), 5(x, y, Z) 306, y, 2) h: interface grid spacing

Fig. 1. Biocellion API illustrations. (a) Biocellion, by default, maps a cell to a sphere (left). Users can add additional state variables to map an agent to a
different shape—cg. cylinder (right). Cell shape affects cell—cell shoving and adhesion, and providing mathematics to model mechanical interactions
between agents is users’ task. 0)) A junction between a discrete agent pair. A junction end holds a set of variables to represent the junction state in each
discrete agent’s boundary. (c) A single grid box (black) and its 26 neighboring boxes (white). Each grid box covers a subregion of the simulation domain.
(d) PDE parameters are set for each interface grid box based on the states of the grid box, and the discrete agents in the box. ,8 are set for the face between

two adjacent grid boxes

on model-speciﬁc rules for each grid box. In a single invocation, the
model routine can read and update variables associated with one grid
box and its 26 neighboring grid boxes (Fig. 1c). Variables associated with
a single grid box can be updated by up to 27 model routine invocations,
and Biocellion supports conﬂict resolution schemes similar to the above
case, evaluating direct interactions between discrete agents.

Biocellion provides PDE solvers for steady-state linear reaction-
diffusion PDE, time-dependent linear reaction-diffusion PDE and time-
dependent reaction-diffusion PDE adopting the splitting scheme (Strang,
1968). The third method is added to model non-linear reactions among
different molecular species in the extracellular space—cg. enzymatic
hydrolysis breaks macro molecules into smaller molecules suitable for
cell consumption.

2.4 Simulation domain

Biocellion partitions the simulation domain into a set of cubical grid
boxes. This interface grid is imposed on the simulation domain to
model the environment. Different simulation modules interface through
this grid (Fig. 1d).

The interface grid spacing becomes the ﬁnest grid spacing in AMR.
Users set the number of AMR levels, the reﬁnement ratio between
two consecutive AMR levels, and tag each grid box with a desired
AMR level. Biocellion generates an AMR grid hierarchy based on this
information.

Biocellion allows users to set subregions of the simulation domain as
PDE buffers—these regions are relevant only in solving PDEs. To model
yeast cells growing on top of a thick agarose cylinder, modelers need to
include the agarose cylinder to track molecular concentration changes by
solving PDEs. However, maintaining data structures to simulate all three
computational modules at the granularity of the interface grid spacing is a
signiﬁcant waste in both computing and memory if no cells reside in the
agarose cylinder. If a subregion of the simulation domain is marked as a
PDE buffer, Biocellion maintains only data structures necessary to solve
PDEs. Biocellion also automatically tags the PDE buffer regions with the
coarsest AMR level.

The environmental structure often limits cell movement—e. g. bacterial
cells can be assumed to reside only in pore regions in soil structure (Resat
et al., 2011). Updating cell displacements considering the soil structure
can be a cumbersome programming task. Biocellion users can mark
subregions of the simulation domain as uninhabitable, and Biocellion
automatically adjusts cell displacements (set by users) to prevent cells
from penetrating into an uninhabitable region.

2.5 Time steps

Biocellion asks users to set multiple time step sizes representing multiple
timescales. The baseline time step is the largest time step to simulate direct

Start baseline time step
Duplicate agent 8: grid data

   
     
     

 

Executed in parallel
based on computer
system resources

 

 

 

 

 

 

 

 

For the grid

data, duplicate

molecular

concentration iter < at state- No “
data only and-grid time

(which are steps

update by d

solving PDEs) Y Base on

 

/ model speciﬁc
rules

    
 

 

Executed in parallel

es
Update grid values (pre)
V
Duplicate agent & grid data based on computer v
Evaluate direct interactions
4!

System YESOU FCES

I Update agent states I I Solve PDEs I I iter++
I l A

Based on
models eciﬁc
V Update grid values (post) / rules p

End baseline time step

 

 

 

 

 

 

 

 

 

Fig. 2. The integration strategy for coupling simulation components.
Duplicating data allows parallel execution of simulation components
based on system resources. For example, direct interactions are evaluated
using the agent state and grid data duplicated at the beginning of the
baseline time step. (note that agent and grid data are concurrently
updated by other simulation components)

interactions between discrete agents and discrete agent movement, div-
ision, death and secretion. The direct interaction module reﬂects the
changes from the other two modules in every baseline time step.
Biocellion users can tightly couple the discrete agent state update
module and the environment update module by splitting a single baseline
time step into multiple state-and—grid time steps. A single state-and—grid
time step can be further partitioned into multiple PDE time steps. Figure
2 summarizes the integration strategy for coupling multiple simulation
components.

2.6 API highlights

Biocellion users provide model speciﬁcs in a predeﬁned set of functions
spread in ﬁve ﬁles. model_routine_config.cpp initializes the model—cg.
sets the interface grid spacing. model_routine_agent.cpp updates the dis-
crete agent state. model_routine_grid.cpp updates the extracellular envir-
onment. model_routine_mech.cpp evaluates direct interactions between
discrete agents. model_routine_output.cpp updates simulation output
data—we use Paraview (http://paraview.org) for visualization.

Code 1 presents the syntax of the model routine updating the discrete
agent state. Code 2 depicts the syntax of the model routine updating the

 

3104

112 /810's113u1no [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁdllq uIOJj popeommoq

9IOZ ‘09 lsnﬁnv uo ::

Biocellion

 

net molecule production rate (PDE parameter) for a grid box. Users ﬁll
the function body to provide model speciﬁcs.

void ModelRoutine::updateSpAgentState( const VIdx& vIdx, const

AgentJunctionInfo& junctionInfo, const VReal& vOffset, const Vector<
Nerox<REAL> >& v_gridPhiNerox, const Vector<Nerox<REAL> >&
v_gridModelRealerBox, const Vector<Nerox<S32> >&
v_gridModelInthrBox, SpAgentState& state/* INOUT */ ) {

/* MODEL START */

.../* update state based on the input arguments and model specific rules */

/* MODEL END */

return;

i

 

Code 1 Model routine template to update the state of a discrete agent.
vIdx points to the interface grid box this discrete agent resides in.
junctionInfo stores the junctions between this discrete agent and neigh-
boring discrete agents. vOffset is the offset within the interface grid box.
v _gridPhiNerox, v _gridModelRealerBox and v _gridModelInthrBox
provide the molecular concentrations and other model-speciﬁc attribute
values for this interface grid box and the 26 neighboring boxes. This
model routine updates state, which holds the state variables of this dis-
crete agent. Users ﬁll the function body (surrounded by/* MODEL
START */and/* MODEL END */) to provide model speciﬁc rules to
update agent state variables.

void ModelRoutine::updateIfGridRHSLinear( const S32 elemIdx, const VIdx& vIdx
, const UBAgentData& ubAgentData, const Vector<REAL>& v_gridPhi, const
Vector<REAL>& v_gridModelReals, const Vector<S32>& v_gridModelInt,
REAL& gridRHS/* uptake(—) and secretion (+) */ ) {
/* MODEL START */
.../* set gridRHS based on the input arguments and model specific rules */
/* MODEL END */

return;

i

 

Code 2 Model routine template to set the net molecule production rate (s
in Fig. 1d) for an interface grid box based on the state of the box and the
states of the discrete agents residing in the box.

3 RESULTS

We implement three different models using Biocellion as case
studies. The following presents cell sorting (Graner and
Glazier, 1992), microbial patterning in communities of different
yeast strains engaging in metabolic interactions (Momeni et al.,
2013) and a bacterial system in complex soil structures (Resat
et al., 2011). Full source code for the presented model implemen-
tations is included in the Biocellion release, and steps to port the
microbial patterning model to Biocellion are described in (Kang
et al., 2014).

3.1 Cell sorting

Many multicellular patterns formed during morphogenesis and
embryonic development arise because of differential adhesion
among distinct types of disassociated cells (Steinberg, 1963).
Simulations of this process have demonstrated how changes in
homotypic and heterotypic adhesion can result in many distinct
macroscopic cellular arrangements including clumping, where
homotypic cells aggregate, or mosaics, where heterotypic cells
alternate forming checkerboard-like patterns (Graner and
Glazier, 1992). In our model, two different cell types are deﬁned
with each cell mapped to a sphere of 8 ,um diameter. If there is an
overlap between two neighboring spheres, the two cells push each

other to remove the overlap. If two non-overlapping cells of a
same type are within 10 ,um, they pull toward each other, mod-
eling stronger adhesion. If they are of different types, there is no
adhesion. The simulations demonstrate that such differential ad-
hesion leads to cell sorting into homotypic aggregations from an
initial random distribution (Fig. 3a).

void ModelRoutine::computeForceSpAgent( const VIdx& vIde, const SpAgent&
spAgentO, const Vector<REAL>& v_gridPhiO, const Vector<REAL>&
V_gridModelRealO, const Vector<S32>& v_gridModelIntO, const VIdx&
VIdxl, const SpAgent& spAgentl, const Vector<REAL>& v_gridPhil, const
Vector<REAL>& v_gridModelReall, const Vector<S32>& v_gridModelIntl,
const VReal& dir, const REAL& dist, VReal& force ) {
/* MODEL START */

REAL R = spAgentO.state.getRadius() + spAgentl.state.getRadius();
REAL mag;/* + for repulsive force, — for adhesive force */

if( dist <= R ) {/* shoving */
mag = 0.5 * ( R — dist );
1

else {/* adhesion */

if( spAgentO.state.getType() == spAgentl.state.getType() ) {
REALx=dist /R;
mag=70.5*(dist*R)*exp(*l-0*(X’l-O)*(X’1-0)/

ADHESION_S );/* ADHESION_S: model parameter controlling the
strength of adhesion */
}
else {
mag = 0.0;/* no adhesion between different types */
}
}

for( S32 dim = O ; dim < DIMENSION ; dim++ ) {
force[dim] = mag * dir[dim];
}

/* MODEL END */

return;

 

Code 3 The model routine simulating shoving and differential
adhesion between two cells. A modeler focuses on describing
mathematical rules to evaluate shoving and differential adhesion.
Concurrently executing this model routine using parallel com-
puters for different sets of agent pairs is Biocellion’s responsibility.

The model code implemented using Biocellion has 854 lines—
the empty template has 723 lines. Code 3 shows the model
routine evaluating cell—cell shoving and differential adhesion.
Biocellion users can simulate cell sorting using a cluster computer
with little more than 100 lines of coding—the Biocellion frame-
work code has nearly 100 thousand lines to simulate the model
using efﬁcient algorithms (briefed in Section 2.2) and parallel
computers.

Figure 3b summarizes the performance results. Our results sort
up to 1.72 billion cells. In comparison, Chen et al. (2007) adopted
the Cellular Potts model and sorted 4 million cells placed on a
2D 10 0002 lattice using 25 compute nodes (each node has two
AMD Opteron 248 sockets) taking 5.3 s per Monte Carlo step.
Tapia and D’Souza also adopted the Cellular Potts model and
sorted 1.46 million cells placed on a 3D 2563 lattice using a
NVIDIA Tesla C1060 GPU taking 0.26s per Monte Carlo
step (Tapia and D’Souza, 2011). Jeannin—Girardon et al. (2013)
adopted an agent-based model mapping a cell to seven particles
and sorted 1 million cells using a NVIDIA GTX 690 GPU taking
little longer than 0.4s per step. Even though we are comparing
results from running different models on a variety of different
computers, and perform varying amounts of work per step, our
work signiﬁcantly advances the state of the art by scaling to the

 

3105

112 /810's113u1no [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁdllq uIOJj popeommoq

9IOZ ‘09 lsnﬁnv uo ::

S.Kang et al.

 

Seconds
120

100
80
60
40
20

O
1 2

 

( Strong Scaling - 26.8 million cells,
within an Intel node

4

Strong scaling — 26.8 million cells, Weak scaling — 13.4 million cells
up to 16 Intel nodes per AMD node
Seconds Seconds

W

Ot-INw-hu-Imwoo
or—INw-hm

8 16 1 2 4 8 16 1 2 4 8 16 32 64 128

it cores # nodes it nodes

Fig. 3. Cell sorting on Biocellion. (a) Biocellion simulation output for cell sorting. Different types of cells have different colors (red and green). (b) We
present strong scaling results (solving a ﬁxed size problem using a larger computer) and weak scaling results (solving a larger problem using a larger
computer increasing the problem size proportional to the computer size). For the strong scaling results (left and center), we used up to 16 Intel nodes
(each node has two Intel Xeon E-5 2670 2.6 GHz sockets). For the weak scaling results (right), we used up to 128 AMD nodes (each node has two AMD
Opteron 6272 Interlago 2.1 GHz sockets) in a larger cluster. We measured the execution time per step (evaluating pairwise interactions between every cell
pair within 10 um, cell packing density: 1.6 cells/(10 um)3). Biocellion reduces the execution time by 15.1 times using 16 cores in an Intel node (left) and
by additional 15.8 times using 16 Intel nodes. This reduces the execution time per step to sort 26.8 million cells from 113 to 0.474 s. Biocellion sorts a
larger system of cells with little increase in time, so long as we increase the number of nodes proportional to the cell system size. Biocellion sorts 1.72
billion cells in 4.46 s per step using 128 AMD nodes (right). No model code change is necessary to achieve this speedup

largest parallel computers and sorting billions of cells, three
orders of magnitude more than prior work.

3.2 Microbial patterning

Momeni et al. (2013) have studied pattern formation in commu-
nities of yeast strains based on their ecological interaction types,
comparing the MATLAB simulation output and actual patterns
observed in laboratory experiments. We implemented one test
casein their work using Biocellion (Fig. 4 visualizes the simulation
output). One strain (say the R strain) produces adenine and con-
sumes lysine. Another strain (say the G strain) produces lysine and
consumes adenine. The two strains grow on top of a 24 mm thick
agarose cylinder—the height of the simulated colony growth
region in the original paper is 300 ,um in comparison. Momeni
et al. demonstrated that the cooperative relationship between the
two strains promotes the intermixing of the two yeast strains.

Momeni et al.’s original implementation sets the PDE grid
spacing to 50 ,um for the entire simulation domain (to track ad-
enine and lysine concentrations, the maximum cell diameter is
5 ,um in comparison). Adenine concentration has high spatial
variation near adenine-producing cells. A grid of 50 ,um spacing
might be sufﬁcient to model intermixing patterns (especially
when diffusion is fast), but 5 ,um grid spacing is required to cap-
ture the high spatial variation—this might be necessary to inves-
tigate more complex problems with high ﬁdelity. Momeni et al.’s
original implementation adopts the explicit Euler method—redu-
cing grid spacing by a factor of 10 requires reducing the time step
size by 102 times for stability. The original implementation takes
about a week to simulate yeast growth for 500 h with 50 ,um grid
spacing. Simulating with 5 ,um grid spacing will take 105 weeks
(~1917 years) using the original implementation—103 times
more grid boxes and 102 times more time steps. Using
Biocellion, a simulation with 5 ,um grid spacing ﬁnishes in little
more than a week using 8 Intel nodes owing to AMR (using
5 ,um grid spacing only for the yeast colony growth region and
the top 40 ,um of the agarose cylinder where adenine concentra-
tion is highly localized), L—stable semi-implicit method for time-
stepping, and parallel computing (exploiting multiple cores in a
node and up to eight nodes, Biocellion reduces the execution time
per baseline time step by 64.9 times).

 

Fig. 4. Microbial patterns produced using Biocellion. The cooperative
relationship between R (black) and G (green) strain cells promote the
intermixing of the two strains. Black spheres are dead cells

The original MATLAB code has 449 lines (the Matlab code is
available at the publisher’s site) while the Biocellion model code
has 1817 lines—again, the empty template has 723 lines. The
increase in the model code size is due to the increase in the
model ﬁdelity. The original MATLAB implementation partitions
the simulation domain into ﬁxed size cubical boxes and maps a
cell to a box. On cell division, the daughter cell occupies one of
the nearest boxes, instantly pushing surrounding cells outward.
This models neither cell size changes nor cell movement due to
cell—cell shoving (cells move only because of cell division). Cells
divide always vertically when surrounded by other cells, and this
simpliﬁcation ends up underestimating the degree of intermixing
in the vertical direction (Momeni et al., 2013). The Biocellion
model code maps cells to spheres and more faithfully models
cell growth (by increasing the radius of a cell) and cell—cell shov-
ing (by removing the overlap between two spheres). Cells divide
in a random direction instead of always dividing vertically. The
model improvements result in more accurate reproduction of the
intermixing patterns seen in laboratory experiments (Kang et al.,
2014). The Matlab code includes many large matrix operations.
This reduces the code size and improves the performance using
Matlab’s optimized matrix operation libraries but does not pro-
vide sufﬁcient ﬂexibility to implement complex cell behavioral
rules.

3.3 Bacterial system in soil aggregate

Resat et al. (2011) have investigated enzymatic macro-molecule
(cellulose) hydrolysis by a heterogeneous population of bacteria
in complex soil structure. A soil structure has blocked regions

 

3106

112 /3.IO'S[BUJHOIpJOJXO'SOIlBUlJOJUIOIQ/ﬂC1111] uIOJj popeommoq

9IOZ ‘09 lsnﬁnv uo ::

Biocellion

 

and pore regions. No cells reside in the blocked regions and
molecules cannot diffuse into the blocked regions—modelers
can easily introduce these constraints into Biocellion by marking
the blocked regions as uninhabitable and setting diffusion coefﬁ-
cients of the blocked grid box faces to 0. They consider three
bacterial strains. One strain secretes a hydrolysis enzyme. The
second strain expresses a hydrolysis enzyme on the cell surface.
The third strain neither secretes nor expresses a hydrolysis
enzyme and does not contribute to macro-molecule hydrolysis.
Macro-molecules are located in blocked regions, and the original
model updates the concentrations of macro-molecules and se-
creted enzymes bound to macro-molecules (which cannot dif-
fuse) based on model-speciﬁc rules (instead of solving PDEs)
considering the concentrations of the secreted enzyme and the
cell membrane-bound enzyme in the pore boxes adjacent to the
blocked boxes containing macro-molecules. The original model
updates secreted enzyme and glucose (output of the enzymatic
hydrolysis) concentrations by solving PDEs. Biocellion users can
update state variables associated with grid boxes based on
model-speciﬁc rules (in addition to solving PDEs) to serve this
modeling requirement.

The original model studied the efﬁciency of enzymatic hydroly-
sis and cell growth dynamics for micro-pores and small porous soil
aggregates. A single simulation of a 111,um >< 111,um x 111 ,um
soil aggregate takes 2—4 days on a workstation using the original
Fortran implementation (8457 lines). Using Biocellion (the model
code has 2466 lines), simulating a soil structure composed of mul-
tiple aggregates (384 ,um x 384 ,um x 384 ,um) takes a comparable
amount of time using four Intel nodes (exploiting multiple cores in
a node and up to four nodes, Biocellion reduces the execution time
per baseline time step by 47.5 times). Biocellion users can increase
the simulation size using a bigger computer without additional
programming if it is necessary to study more complex and
larger scale phenomena.

4 DISCUSSION AND FUTURE WORK

The Biocellion API does not assume a speciﬁc parallel computer
architecture. Biocellion users can test their initial implementa-
tions on a desktop PC ﬁrst and scale-up their simulations on
Cloud computers or supercomputers with no code change—the
complexity of the model code depends only on the complexity of
the mathematical model and is irrelevant to the underlying com-
puter system.

Biocellion already simulates millions to billions of cells in the
3D environment using multicore workstations to moderate sized
cluster computers. Model code conforming to the Biocellion API
will seamlessly beneﬁt from Biocellion updates on improving
scalability and performance—eg. tuning for accelerator architec-
tures such as Intel Xeon Phi. We maintain that the computa-
tional complexity of high ﬁdelity models and the difﬁculty of
parallel programming for current and future computers should
not be a major bottleneck in building highly practical biological
system models.

4.1 Limitations and future work

Representing a cell by multiple agents allows modeling cell shapes
and physical interactions in greater detail (J eannin—Girardon

et al., 2013; Newman, 2005). Mapping a cell to multiple agents
is also necessary to separately model subcellular compartments
and to represent the spatial variation of molecular concentrations
within a cell. However, Biocellion does not yet support this. This
limits the maximum resolution used to represent the environment
because the interface grid spacing cannot be less than the max-
imum direct interaction distance between two agents—which
often coincides with the maximum cell diameter if a cell is
mapped to an agent. Mapping a cell to multiple smaller agents
will allow modeling the environment at higher resolution. We plan
to extend Biocellion to support multi-agent representation of a cell
to lift these limitations.

Biocellion provides deterministic ODE system solvers, but there
are many other approaches (Shmulevich and Aitchison, 2009) or
even a combination of various approaches (Karr et al., 2012) to
model cell regulatory networks. Users need to implement solvers
on their own to use those approaches. This increases the program-
ming burden and lowers the performance, as modelers are likely to
write less efﬁcient code than HPC experts. We plan to add solvers
for widely used modeling approaches to further reduce the pro-
gramming burden in simulating cell regulatory networks.

Biocellion asks users to represent a model using a predeﬁned
set of model routines describing how a cell behaves, how a cell
directly interacts with neighboring cells and how cells in a small
region interact with their microenvironment. The Biocellion
model routines provide local behavioral rules. Global processes,
such as water or blood ﬂow, cannot be modeled using the local
rules unless Biocellion provides solvers to simulate global pro-
cesses using locally determined parameter values. We plan to add
solvers for Navier-Stokes equations (to compute ﬂow rates) and
advection—reaction-diffusion equations (to update molecular con-
centrations considering ﬂow) to support water and blood ﬂow
modeling.

Flexibility, performance, and usability often conﬂict in soft-
ware design. We designed Biocellion to allow a modeler with
strong mathematical modeling background (but without HPC
expertise) to build high ﬁdelity models—we focus on providing
high ﬂexibility to support various modeling requirements even
though we do not ignore usability. To reach a broader range of
users, we envision adding productivity layers on top of Biocellion
once mathematical modeling of biological systems matures.
Biocellion will serve as an acceleration layer for higher product-
ivity tools in such cases.

ACKNOWLEDGEMENT

We acknowledge Wenying Shou, Babak Momeni and Haluk
Resat for providing their model details, and Ryan Tasseff for
valuable feedback on improving Biocellion.

Funding: Support for this research was provided by the Extreme
Scale Computing Initiative, the Fundamental and
Computational Sciences Directorate and the Technology
Investment Program, as part of the Laboratory Directed
Research and Development Program at Paciﬁc Northwest
National Laboratory (PNNL). Portions of this work were con-
ducted using PNNL Institutional Computing at PNNL. PNNL
is operated by Battelle for DOE under contract DE-ACOS-
76RLO 1830.

 

3107

112 /810's113u1no [p.IOJXO'SOllBIIHOJUIOICI/ﬁdllq uIOJj popeommoq

9IOZ ‘09 lsnﬁnv uo ::

S.Kang et al.

 

Conﬂict of interest: Si.K. has founded Biocellion SPC, a WA
state Social Purpose Corporation, to commercialize the
Biocellion software framework.

REFERENCES

Anderson,A.R.A. and Chaplain,M.A.J. (1998) Continuous and discrete mathemat-
ical models of tumor-induced angiogenesis. Bull Math. Biol, 60, 857—899.
Andrews,S.S. (2012) Spatial and stochastic cellular modeling with the smoldyn

simulator. Methods Mol Biol, 804, 519—542.

Bernholdt,D.E. (2007) Component architectures in the next generation of ultrascale
scientiﬁc computing: challenges and opportunities. In: Proceedings Symposium
on Component and Framework technology in high-performance and scientific
computing (CompFrame). Montreal, Canada.

Borgdorff,J. et al. (2014) Distributed multiscale computing with MUSCLE 2, the
multiscale coupling library and environment. J. Comput. Sci, 5, 719—731.

Briggs,W.L. et al. (2000) A Multigrid Tutorial. SIAM, Philadelphia, PA, USA.

Byrne,H. and Drasdo,D. (2009) Individual-based and continuum models of growing
cell populations: a comparison. J. Math. Biol, 58, 657—687.

Chen,N. et al. (2007) A parallel implementation of the cellular potts model for
simulation of cell-based morphogenesis. Comput. Phys. Commun, 176, 670—681.

Chin,L.S. et al. (2012) Flame-ii: a redesign of the ﬂexible large-scale agent-based
modelling environment. In: Technical report. STFC Rutherford Appleton
Laboratory.

Colella,P. et al. (2012) Chombo Software Package for AMR Applications Design
Document. Lawrence Berkeley National Laboratory, Berkeley, CA, USA.
Daly,M.J. (2000) Engineering radiation-resistant bacteria for environmental bio-

technology. Curr. 0pin.Biotechnol, 11, 280—285.

Ferrer,J. et al. (2008) Individual-based modelling: an essential tool for microbiology.
J. Biol. Phys., 34, 19—37.

Frieboes,H.B. et al. (2010) Three-dimensional multispecies nonlinear tumor
growthII: tumor invasion and angiogenesis. J. T heor. Biol, 264, 1254—1278.
Graner,F. and G1azier,J. (1992) Simulation of biological cell sorting using a two-

dimensional extended Potts model. Phys. Rev. Lett., 69, 2013—2016.

Iserles,A. (2009) Numerical Analysis of Differential Equations. Cambridge University
Press, Cambridge, UK.

Izaguirre,J .A. et al. (2004) COMPUCELL, a multi-model framework for simulation
of morphogenesis. Bioinformatics, 20, 1129—1137.

J eannin-Girardon,A. et al. (2013) An efﬁcient biomechanical cell model to simulate
large multi-cellular tissue morphogenesis: application to cell sorting simulation
on GPU. Lect. Notes Comput. Sci, 8273, 96—107.

Jiao,Y. and Torquato,S. (2011) Emergent behaviors from a cellular automaton
model for invasive tumor growth in heterogeneous microenvironments. PLoS
Comput. Biol, 7, 61002314.

Kang,S. and Kahan,S. (2014) Biocellion 1.1 User Manual. Paciﬁc Northwest
National Laboratory, Richland, WA, USA.

Kang,S. et al. (2011) Algorithm engineering challenges in multicore and manycore
systems. Inf T echnol, 53, 266—273.

Kang,S. et al. (2014) Simulating microbial community patterning using biocellion.
Methods Mol Biol, 1151, 233—253.

Karr,J.R. et al. (2012) A whole-cell computational model predicts phenotype from
genotype. Cell, 150, 389—401.

Lardon,L.A. et al. (2011) iDynoMiCS: next-generation individual-based modelling
of bioﬁlms. Environ. Microbiol, 13, 2416—2434.

Loew,L.M. and Schaff,J.C. (2001) The virtual cell: a software environment for
computational cell biology. TRENDS Biotechnol, 19, 401—406.

McDouga11,S.R. et al. (2002) Mathematical modelling of ﬂow through vascular
networks: implications for tumour-induced angiogenesis and chemotherapy
strategies. Bull Math. Biol, 64, 673—702.

Meagher,D. (1982) Geometric modeling using octree encoding. Comput. Graph.
Image Process, 19, 129—147.

Melnicki,M.R. et al. (2013) Feedback-controlled LED photobioreactor
for photophysiological studies of cyanobacteria. Bioresour. T echnol, 134,
127—133.

Minar,N. et al. (1996) The SWARM simulation system: a toolkit for building multi-
agent simulations. In: Technical report. Santa Fe Institute.

Momeni,B. et al. (2013) Strong inter-population cooperation leads to partner inter-
mixing in microbial communities. eLife, 2, 600230.

Newman,T.J. (2005) Modeling multicellular systems using subcellular elements.
Math. Biosci. Eng., 2, 611—622.

Resat,H. et al. (2011) Modeling microbial dynamics in heterogeneous environments:
growth on soil carbon sources. M icrob. Ecol, 63, 883—897.

Shmulevich,I. and Aitchison,J.D. (2009) Deterministic and stochastic models of
genetic regulatory networks. Methods Enzymol, 467, 335—356.

StarruB,J. et al. (2014) Morpheus: a user-friendly modeling environment for multi-
scale and multicellular systems biology. Bioinformatics, 30, 1331—1332.

Steinberg,M.S. (1963) Reconstruction of tissues by dissociated cells. Some morpho-
genetic tissue movements and the sorting out of embryonic cells may have a
common explanation. Science, 141, 401—408.

Strang,G. (1968) On the construction and comparison of difference schemes. SIAM
J. Numer. Anal, 5, 506—517.

Tapia,J.J. and D’Souza,R.M. (2011) Parallelizing the cellular potts model on graph-
ics processing units. Comput. Phys.Commun., 182, 857—865.

Voss-Bbhme,A. (2012) Multi-scale modeling in morphogenesis: a critical analysis of
the cellular potts model. PLoS One, 7, 1—14.

Weinberg,R.A. (2007) The Biology of Cancer. Garland Science, New York, NY,
USA.

Xavier,J.B. et al. (2009) Social evolution of spatial patterns in bacterial bioﬁlms:
when conﬂict drives disorder. Am. Nat., 174, 1—12.

 

3108

112 /810's113u1no [p.IOJXO'SOllBIIHOJUIOICI/ﬁdllq uIOJj popeommoq

9IOZ ‘09 lsnﬁnv uo ::

