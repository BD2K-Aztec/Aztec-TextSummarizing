REVIEW

Vol. 28 no. 24 2012, pages 3169-3177

doi: 10. 1093/bioinformatics/bts605

 

Sequence analysis

Advance Access publication October 11, 2012

Tools for mapping high-throughput sequencing data

Nuno A. Fonseca*, Johan Rung, Alvis Brazma and John C. Marioni
EMBL Outstation, European Bioinformatics Institute (EBI), Hinxton, Cambridge 0810 ISD, UK

Associate Editor: Jonathan Wren

 

ABSTRACT

Motivation: A ubiquitous and fundamental step in high-throughput
sequencing analysis is the alignment (mapping) of the generated
reads to a reference sequence. To accomplish this task, numerous
software tools have been proposed. Determining the mappers that are
most suitable for a specific application is not trivial.

Results: This survey focuses on classifying mappers through a wide
number of characteristics. The goal is to allow practitioners to com-
pare the mappers more easily and find those that are most suitable for
their specific problem.

Availability: A regularly updated compendium of mappers can be
found at http://wwwdev.ebi.ac.uk/fg/hts_mappers/.

Contact: nf@ebi.ac.uk

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on May 2, 2012; revised on October 4, 2012; accepted on
October 8, 2012

1 INTRODUCTION

In the past decade, high-throughput sequencing (HTS) has chan-
ged the way life sciences research is done. The decreasing costs
have made HTS technology more mainstream, and it is now
exploited in a growing number of biological applications, the
so-called -seq experiments: DNA-seq (Mardis, 2008), ChIP-seq
(Park, 2009), RNA-seq (Marioni et al., 2008; Ozsolak and Milos,
2010; Wang et al., 2009), BS-seq (Cokus et al., 2008; Meissner
et al., 2008) and numerous other applications, such as investigat-
ing the spatial organization of the genome inside the cell nucleus
(Lieberman-Aiden et al., 2009). We refer to Metzker (2009) for
an overview of sequencing technologies and related applications.

A common feature of all HTS technologies and applications is
the generation of relatively short reads (fragments of DNA se-
quences), which have to be aligned (mapped) to a reference se-
quence. The primary challenge is to efﬁciently ﬁnd the true
location of each read from a potentially large quantity of refer-
ence data while distinguishing between technical sequencing
errors and true genetic variation within the sample.

Presently, more than 60 mappers are available (see Table l for
a list of mappers and Fig. l for a timeline), most of them pro-
posed after 2008, concurrent with developments in sequencing
technologies. Mappers have had to adapt to: (i) handle growing
quantities of data generated by HTS; (ii) exploit technological
developments (Langmead and Salzberg, 2012; Li and Durbin,
2010; Weese et al., 2009); and (iii) tackle protocol developments.
For instance, paired-end library protocols motivated the

 

*To whom correspondence should be addressed.

development of mappers that exploit read pairing information
(Langmead et al., 2009; Li et al., 2008a; Ning et al., 2001).
Furthermore, the appearance of novel protocols may result in
speciﬁc biases (Li et al., 2008a; Malhis and Jones, 2010; Ondov
et al., 2008). One consequence of the increasing number of map-
pers is that making a suitable choice for a speciﬁc application is
not easy. Resources such as the Squnswers forum Wiki pages
(Li et al., 2012) have collated information about different map-
pers, such as the operating system supported and different tech-
nologies that the mappers have been designed to handle.
However, information about other equally important features/
characteristics of the mappers is difﬁcult to ﬁnd, being still scat-
tered through publications, source code (when available), man-
uals and other documentation.

This survey aims to help overcome these challenges by allow-
ing practitioners to compare mappers more easily and, thus, ﬁnd
those that are most suitable for their speciﬁc problem. It does not
evaluate mappers in terms of their accuracy, but instead it pre-
sents an overview of their characteristics. It complements previ-
ous studies that focused mainly on a reduced subset of mappers
and/ or empirically compared the performance of a small number
of mappers (Flicek and Birney, 2009; Li and Homer, 2010;
Trapnell and Salzberg, 2009).

2 OVERVIEW

The HTS data mapping problem can be generally stated as fol-
lows: given a set of sequences Q (produced by an HTS technol-
ogy), a set of reference sequences R, a possible set of constraints
and a distance threshold k, ﬁnd all substrings m of R that respect
the constraints and that are within a distance k to a sequence q in
Q, i.e. d(q, m) g k, where d() is some distance function. The
occurrences m in R are called matches. The constraints imposed
can vary depending on the HTS application and data type (e. g.
whether the data generated are single- or paired-end reads).

The main goal of a mapper is to ﬁnd the true location of each
sequence q from a potentially large quantity of reference data
while allowing for errors and structural variation. To allow for
these errors/variants, the matching has to be approximate.

The distance measures typically used account for the number
of mismatches and indels to allow for errors and structural vari-
ation, but they may also incorporate gap sizes or probabilities
associated with the reads.

Table 1 provides a brief overview of the mappers considered
herein. The information presented in the tables of this manu-
script was collected mainly from the publications, manuals and
other documentation, by direct inspection of the source code,
and, in some cases, by contacting the developers. When we
could not collect information, the cells in the table were left

 

© The Author 2012. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0/),
which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /§.IO'S[BU.ITIO[p.IOJXO'SOTmIHJOJUTOTQﬂI(1111] 11101; prBOIIIAAOG

9IOZ ‘09 lsnﬁnv uo ::

N.A.Fonseca et aI.

UoéEommoQ $05 58“35056555305.0565:0:555.on\ m: x 0: >555 mo. N05

 

 

 

8255503
$083 .3 a. 85 83 0 mo 5255 <55 5.5 <75 53685
5083 .3 a. 85 5.2 8 33 mo 5e 2<m 655553 95 <75 25
5583 .3 e 55 8a 8 8.8.5 mo 5e <55 2 <73:a 7365
583 .3 3 WHEN 86 0.8.5 mo 55 6\<55 5.5.5 <75 8&5
583 .3 a. 25888 5.2 we 83 am 555 550 2<m 655553 v.05 <75 55
035335 8.5 5 3.5.9 5 5e 2<m 252: 655553 5.85.505 <75 8:882
@083 8 a. 555 5.5 50 85 mo 5e <55 2 <75 m 588:2
5:83 8 s :05 m3: 5 5.8 we 2<m 6\<55 om; <73:a 552a
$083 .8 s Se=< 5.5 52 58 mo 2<m 6\<55 5 <73:a 5<%a
582335 5: e 8 mo 25 655553 anewsmaﬁqu <75 55502
5083 one 9:». 835 5.5 M: 9o 5 5e <55 5 <75 202
5:83 .3 e 85 8.8 e 3 mo 5e 2<m <55 2 <73:a $85822
@5083 .3 s 5 858 5a 5.0 we 5e 655553 05.5 <75 6<2
5:83 .3 s was,» :8 8 8.2.5 mo 55 2<m 6\<55 5 <75 855%:
035535 86 :8 mo 5e 6\<55 om <75 @8582
5:83 :92 we». 35 8.5 8 8.3.88 mo 2<m 6\<55 5835.55 <75 m<75©
5:83 8 a. “8820 m5 2 8.5 we 5e 2<m 252: 6\<55 5 <75 53575
5083 32%? we». :3 5.8 :8 8.3.88 mo 50 .255 6\<55 55035.55 <75 520
583 .3 s 558885 8.: a 23 mo 5e 55 6\<55 5 <75 38208950
335335 5.5 e i am 5:8 .255 6\<55 om .5 <75 25
5083 5&5 9a 5:5 5.5 58 8.8 we 5e <55 2 <75 33255
522335 5: e 8 88 5e <55 5 <75 5255
5 83 .3 e E5 86 8.o.o mo 5e <55 2 <75 8285
583 5205 5.8 o: 2 mo 5e <55 2 <75 55256
5583 .8 a. 83 8:: me 8888 we 5e <55 2 <75 >555
5:83 :55 9:». 5 55 5 Ned mo 2<m 6\<55 5.5.55.5 <75 >555
$083 :55 9:». 5 8.88 58 8.0.0 mo 2<m 6\<55 5.5.55.5 <75 55
583 5 9a an 8.: a 8.8 we 5e 2<m 6\<55 5 35335 5355
8583 .3 a. 85 8a a mo 2<m 6\<55 5 35335 385 mm
583 5585 9a @8853 86 325.8 mo 5e 2<m 6\<55 85.5 <75 82:65
583 .3 s @8853 $58 we: 83 mo 5e 2<m 655553 5.5.55.5 <75 2E5
@083 E35 $.58 38 5 mo 555 5e <55 2 <75 55
5 83 $222 9a 58:5 8e 8 mg mo 2<m 6\<55 5 35335 585
583 .3 3 been :5 8 53 mo 5e 2<m 655553 55 <95 <75 555
855.6% Emmmwp $0 5058/ .=w>< 58:0 :53 553.com SwQ 55532

 

 

52555 (5 55 A «5ng

 

3170

Mapping hi h-throughput sequencing data

 

U0€:_0m909 000:: 0:000“0090300030500.0000009:0330:0003 0: x 0: 00:00:00 mo. N05

.90000392 0:30:m:0-§m00:0::0:>: H1032?

.::00.0,:0:00>0:23>:D

.:000::0:3000 0.: 0000920

8003900 0:390:0 8:03:80 0:000 0m:0: 00:00:> 0::9Lo

.9009L w::990:>: 809m :0:00 0:036 QEOm “0000990920

.0000 0000093: 90 0:03:30 9000: 30:009m: “9700150

.93 .0: 0:9< :0 :09000m 0%000 0:0:9 00::030 00>: 3:00 0:00.000 90 :000::: 0:00 .:0000:039 000080000 0:0 90 :00» :09 0:00.000 90 00:3: 0:0 00020:: 00:0 030: 0:00 00:00

000 :: 00:00:38 :0990:: 0:0 90 :0:0:0> 0:0 0000003 3:28 :0:0:0> 00H 0033000 0:ox0\00:0m 0: 009900: 0000: 90 03:3: .3900 03:09 030009 0:300 90 0:0:0:0> 30:09.00 .03:09 009 Qmm 5/er 00::0>-00:0:0900-009L
A0003 .3 :0 :1: §<m “0:03:09 3930 000::09 .0009 3050089 0:0 8:03:80 030:2: 0:0 OHm<mU $354090 .OHm<n: .<9Lm<n: “0:03:09 39:: .0:09900: 0:0 :3 08:00:9 0:0 0009800 0:03:09 009 0:0 .098000900:
00020:: 0:33:00 3930 0:0 39:: 0:00 03000 3908:0300 :0 0:50 3:09 30:5 :: AmOV 8300 :090 00 03000>0 0:0 0:0990:: 00H A70 :0: :0 005009 0:0 38:0: :0: 000003 .:0m:0m :90 .090 0:039 .000m :90 03325
3:00.099 m::0:0::000 008090 0 30:9 0000: 00:09930 30300: :0990:: 0:0 8:00:05 00:00:03 ::3900 0099.:00m 00H 08:03:80 0399305 :0 407093: $0709 .<ZQ :09 00:09:00 0: :0990:: 0:0 8:00:05 00:00:03 ::3900 0:09 0:00

 

 

:00000 .0 0 a: 00.00 00: 0.: :000 ::0 00:0: 2% 6230360 0.00.: <2: 2000

0:00 .0 0 08% 00.0 : : 00 3550 00:0: 2% 6230360 0.00.: <2: 002-00
0:00 .0 0 2 00.0 0 0.:.0 00 2% 030%: 7: <2: 2<::>>
00000000000: 00.0 00 0:0: >3 30$: 7: <2: ::3<2>

:00000 .0 0 02:00.3 00.:0: 000 :.0.: 00 2%: ::0 @330: : <70: 0:03
0:00 .0 0 :: 0000: 00.0 :0 0.: 00 >3 30$: 7: <70: 0020000
0 :000 08080 0:0 0003 0:0: 00 0:0: 0:0: >3 2% 0030.0”: : <2: 008000
00000 .0 0 00:7: 00.00 000 0.0.0 0:0: 2% 0:30.00: 00.0.: <2: 0<:%0
00000 .0 0 00:7: 00.00 000 :.0 00 >3 0:30.00: 7: <2: <::%0
0:00 .0 0 0< 0.00 00 0.0.0.0 00 00:0: 2% 0030.0”: : <70: 0028000

:00000 .0 0 >0000 0:0: 00 :.:.0 00 >3 6230360 om <20 0000

0: :000 .0 0 0000:: 00.0 0 0.: 0:0: >3 0:30.00: 0.: <70: 80030000
300000 .0 0 2 00.00 000 :0.0 00 >3 2% Q3000”: : <20 00.000
300000 .0 0 2 :0.00: :00 ::.: 00 >3 0:330: : <2: 0000
0022:0005 00.0 :.00 00 2% 0:30.00 08:000.: <2: 0:080

0:000 025: 0:0 0:002 000 0: :.: 00 >3 0H002:: : <2: :: 0000
:00000 .0 0 0:002 00.0: 00 0.0 00 >3 0H002:: : <2: 00:00
0:00 .0 0 0000: 00:: 0: 0.0.0 00 2% 0:30.00: 0.00.: <2: 0 :2:m:0
:00000 .0 0 0:083: :000 00: 0.0.: 00 >3 6230360 3.0.0.0.: <2: 022:0
:00000 0:53 0:0. 000:: 0000 00: 0:0: 00 072:0: 30%: : <2: 002000
0 :000 .0 0 00:0 00.0 0 ::.: 00 00:0: >3 2% 0030.0”: 0.: <70: 23:
$0000 .0 0 0008:0 00.0: 00 :.: 00 30:50 00:0: 33:0 om <70: 002-0070:
0000 .0 0 0:80 00.00 00: 00.0 00 00:: 6230360 0.00.: <2: :<2m
0:00 .0 0 8:008: 00.0 00.0.0 00 >3 0030.0”: : <2: 20::
:00000 .0 0 0083 :00 00 :.: 00 07:50: >3 030%: 0.: <2: 0003:
:00000 .0 0 0000: 0: ::.:0 00 0.0.0 00 >3 2.0800 0.: <70: <2:<:0
8:0:090m  .00 :0:0:0> .00>< 3930 39:9 0099.00m 0:0Q :09902

 

00:00:50 .: 0:03

3171

 

N.A.Fonseca et al.

 

  

E 5 T
I_'.i'JI,Jf.i.I'I.|:
l'E-:I-:' I'r:f.‘|::::r:I‘-'
|:-_ll L1

ﬁ'u‘. |-|:-... II: Hal--

:  I ::
-"':-'.III' '-.-'.'I:-' ': 'a‘a nil-1

HMAP
xii-“J:
3'23." !'-.'-."'.'
:_:.'.-:n.I-' cam-w
L.:-.:II:: .slI-I
HI ': 'l ::: 2':
EFL-1| |.|'-\.

| | | I 1 | | | |
2UU1 EDGE EDUS 20B? 2909 EUII 2D13

 

Years

Fig. 1. Mappers timeline (since 2001). DNA mappers are plotted in blue,
RNA mappers in red, miRNA mappers in green and bisulphite mappers
in purple. Grey dotted lines connect related mappers (extensions or new
versions). The timeline only includes mappers with peer-reviewed publi-
cations, and the date corresponds to the earliest date of publication (e.g.
advanced publication date as opposed to the date of publication)

blank. We collected, and included in the table, the number of
citations of the bibliographic reference (when available) asso-
ciated with each mapper, and the number of citations normalized
by the lifetime (in years) of the publication in an attempt to
provide an idea of the popularity of the mappers. However, we
emphasize that one cannot infer that mapper A is better than
mapper B simply because it is cited more often.

One obvious issue when considering the choice of a mapper is
the type of data that it was designed for or is suitable to align
(DNA, RNA, miRNA or bisulphite). Another dimension to con-
sider is the sequencing platform that generated the HTS data.
General mappers such as BLAT, SSAHA, Exonerate and
Mummer were designed for aligning any sequences (DNA,
RNA or Protein), and the source of data is irrelevant.
However, as can be observed in Table l, a considerable
number of mappers support HTS data generated from a subset
of technologies. For instance, Slider was designed speciﬁcally for
Illumina data and exploits the base call probabilities in Illumina’s
probability output ﬁles. In contrast, SOCS, RNA-Mate and
MapReads are tailored for aligning SOLiD reads, which are
encoded in colour space. Some mappers also try to exploit spe-
ciﬁc biases associated with a sequencing platform. For instance,
for the Illumina platform, sequencing accuracy decreases with
increasing number of read cycles; therefore, less reliable base
calls are produced towards the 3’-end of each read. Some map-
pers like SOAP, Bowtie or Novoalign can therefore trim several
bases off the 3’-end of reads in an attempt to overcome this
problem.

Most eukaryotic genes are composed of multiple exons, which
can be spliced together in distinct combinations to generate dif-
ferent transcripts. Thus, when RNA-seq reads are mapped to a
reference genome, reads that span multiple exons will have

potentially large gaps in the alignment corresponding to intronic
sequence. The Splicing column in Table 2 indicates for the RNA
mappers whether the detection of splice junctions is made de novo
or via user-provided libraries of junction locations. De novo de-
tection of splice junctions means that the mappers are able to
detect splice junctions without relying on existing annotation. An
alternative is to build exon junction libraries that include
sequences around known or predicted splicing junctions. Some
mappers construct these libraries during execution using splice
junction information provided by the user, whereas others re-
quire that the user provides the library. Finally, hybrid
approaches that couple de novo with prior information are also
possible. For example, QPALMA starts by aligning the reads to
the genome to identify putative exons from clusters of mapped
reads. Next potential junctions are enumerated within a certain
distance around putative exons. Finally, the unmapped reads are
aligned against the sequences ﬂanking possible junctions, thus
making it possible to ﬁnd novel junctions. QPALMA, although
similar to TopHat, differs by training a support vector machine-
like algorithm using known splice junctions from the genome of
interest (thus also requiring a set of known junctions from the
reference).

3 FEATURE-LEVEL COMPARISON

Table 2 enables a comparison of mappers based on data-centric
features (e. g. read length limits, utilization of read pairing infor-
mation, parallel processing) and alignment sensitivity and report-
ing (e.g. errors allowed, support for gaps, alignments reported,
type of alignment performed and the role of read quality infor-
mation during alignment).

3.1 Input data features

The read length supported by a mapper is a particularly import-
ant characteristic. For instance, aligning miRNA data, which
typically comprises short reads ranging between 16 and 30
bases in length after trimming the adapters, requires mappers
that support rather short reads. Naturally, the miRNA-speciﬁc
mappers support reads of the mentioned length, but some more
general purpose mappers, such as Bowtie, BWA, GNUMAP,
MapReads, Maq, Novoalign, SHRiMP, Stampy and SOAP,
may also be used for this purpose. In contrast, advances in
sequencing technologies have enabled reads longer than 1000
bases to be generated (up to 10000 bases have been reported
using PacBio sequencing). The trend of increasing read length
has motivated the development of novel mappers (e.g. RazerS,
BWA-SW, SOAP2, RUM, RMAP, SOAPSplice and Bowtie2)
that efﬁciently handle the longer reads.

Sequencing platforms can produce reads in pairs, which can
help to detect alignment errors and to improve sensitivity and
speciﬁcity compared with using single-end reads (Li and Homer,
2010). The majority of the mappers exploit read pairing infor-
mation (see PE column in Table 2). To align paired reads, a
strategy often followed is to independently align the two reads
belonging to a pair before searching for the pair of hits with the
correct orientation relationship and proper distance.

HTS data can consist of hundreds of millions of reads. There-
fore, it is useful when the mappers can (natively) be executed in

 

3172

112 /310's113umo [p.IOJXO'SSUBIHJOJUIOIQ/ﬁdllq 11101; popeoIII/noq

9IOZ ‘09 lsnﬁnv uo ::

Mapping high-throughput sequencing data

 

Table 2. Features comparison

 

 

Mapper Min. RL Max. RL Mismatches Indels Gaps Align. reported Alignment Parallel QA PE Splicing Data
BFAST * Y Y Y B,R,U G SM N Y N DNA
Bismark 16 10 K Score Score N U — SM Y Y N Bisulphite
BLAT 11 5000K Score Score Y B L N N N de novo DNA
Bowtie 4 1K Score Score N A,B,R,S G L SM Y Y N DNA
Bowtie2 4 5000K Score Score Y A,B,R,S G L SM Y Y N DNA
BS Seeker — — 3 0 N U — SM Y N N Bisulphite
BSMAP 8 144 15 0 N B,S,U SM N Y N Bisulphite
BWA 4 200 Y 8 Y R,S G SM Y Y N DNA
BWA-SW 4 1000K 0.1 0.1 Y R,S L SM Y N N DNA
BWT-SW 1 K Score Score Y A N N N N DNA
CloudBurst 1 K Y Y Y A,B G Cloud N N N DNA
DynMap 18 8 K 5 0 N B L N N N N DNA
ELAND 32 2 0 N B N N N N DNA
Exonerate 20 * Score Score Y B,S G L N N N de novo DNA
GEM 0 4294M 1.0 1.0 Y A, S G SM Y Y Lib and de novo DNA
GenomeMapper 12 2 K 10 10 Y A,B,R G SM N N N DNA
GMAP 8 * Y Y Y B G L SM N N de novo DNA
GNUMAP 16 1 K Score Score Y B G SM/DM Y N N DNA
GSNAP 8 250 Y Y Y A,B,U,S G L SM N Y Lib and de novo DNA
MapReads 10 120 Score 0 N S N Y N N DNA
MapSplice — — 3 Y B — SM N Y de novo RNA
MAQ 63 Y Y N N Y Y N DNA
MicroRazerS 10 * Score 0 N S G N N N N miRNA
MOM Y 0 N A L SM N Y N DNA
MOSAIK 15 1000 Y Y Y A,B G SM Y Y N DNA
mrFAST 25 300 Score 6 N A,B G N N Y N miRNA
mrsFAST 25 200 Y 0 N A G N N Y N miRNA
Mummer 3 10 * Y Y Y A,B G N N N N DNA
Novoalign 30 300 8 2 N A, B, R, U, S G SM/DM/Cloud Y Y Lib DNA
PASS 23 1K Y Y Y A,B G SM Y Y de novo DNA
Passion — — Y Y Y U — SM Y Y de novo RNA
PatMaN 1 * Y Y N A G N N N N miRNA
PerM 20 128 9 0 Y A,U G DM Y Y N DNA
ProbeMatch 36 50 3 Y N A,B N N N N DNA
QPALMA — — Y Y Y B L N Y N Lib and de novo RNA
RazerS 1 1 * Score Score Y A,B,S G N N Y N DNA
REAL 4 * Score N N B, U G SM Y N N DNA
RMAP 1 1 10 K Y 0 N B,S N Y Y N DNA
RNA-Mate — — Y 0 N S — DM Y N Lib RNA
RUM — — Y Y Y B — SM N Y de novo RNA
SeqMap 15 500 5 3 N A SM N N N DNA
SHRiMP 14 1 K Score Score Y B,S G SM N Y N DNA
SHRiMP 2 30 1K Y Score N B,U,S G SM Y Y N DNA
Slider 62 3 0 N B,S N Y Y N DNA
Slider II 93 Y N B,S N N Y N DNA
Smalt 4 2048M Score Score N A,B,R,U,S L SM Y Y N DNA
SOAP 7 60 5 3 N B,R S SM N Y N DNA
SOAP2 27 1 K 2 0 Y A,B,R L SM N Y N DNA
SOAPSplice l3 3 K 5 2 Y U — SM Y Y de novo RNA
SOCS 64 Y 0 N A,B SM Y N N DNA
SpliceMap — — 0.1 Y A — SM N Y Lib and/or de novo RNA
SSAHA 15 * Y Y Y B,S G L N N N N DNA
SSAHA2 15 48 K Score Score N B,S L N N Y N DNA
Stampy 4 4 K 0.15 30 N B,R,S G N Y Y N DNA
Supersplat 0 0 Y A,U G N N N de novo RNA
TopHat — — 2 0 N B,S — SM Y Y de novo RNA
VMATCH Score Score Y A,B,S G L N N N N DNA
WHAM 5 128 5 3 N A,B,R,U,S G N Y Y de novo DNA
X-Mate — — Y 0 N S — DM Y N Lib DNA
ZOOM 12 240 Y Y N B,S,U G SM/DM Y Y N DNA

 

Read length limits are shown in the first two data columns: minimum read length (Min. RL) and maximum read length (Max. RL). Unless otherwise stated the unit is base
pairs, K denotes kilobases (1000 bases), M denotes megabases (1000K bases), and * denotes a (unknown) large number. The support for mismatches and short indels is
presented in the fourth and ﬁfth columns, respectively, including when possible the maximum number of allowed mismatches and indels: by default the value is in bases; in
some cases, the value is presented as a proportion of the read size; or as score, meaning that mapper uses a score function. The Gaps column indicates whether consecutive
insertions or deletions are allowed during alignment. The Alignments reported column indicates the alignments reported when a read maps to multiple locations: A-all, B-best,
R-random, U-unique alignments only (no multi-maps), and S-user defined number of matches. The Alignment column indicates whether the reads are aligned end-to-end
(Globally) or not (Locally). The Parallel column indicates whether the mapper can be run in parallel and, if yes, how: using an SM or/and a DM computer. The QA (Quality
awareness) column indicates whether the mapper uses read quality information during the mapping. The support for paired reads is indicated in the PE column. The Splicing
column indicates, for the RNA mappers, whether the detection of splice junctions is made de nova or through user provided libraries (Lib). Yes is abbreviated as Y, and No is
abbreviated as N. A cell in the table is filled with ‘7’ when a third-party mapper is used to perform the alignment.

 

3173

112 /310's113umo [p.IOJXO'SODBIHJOJUIOICWZdllq 11101; popeoIII/noq

9IOZ ‘09 lsnﬁnv uo ::

N.A.Fonseca et al.

 

parallel in distributed-memory (DM) computers (i.e. a cluster
composed of multiple computers) or/and using shared-memory
(SM) computers (available in computers with modern
shared-memory multi-core processors). Given the large number
of reads that need to be mapped, it is not surprising that the
majority of the methods have been developed to exploit multiple
processors/computers to speed up the mapping. A different ap-
proach is followed by CloudBurst (Schatz, 2009), a cloud aware
mapper designed to run in computer clouds and in local com-
puter clusters. Implementation details for each mapper are pro-
vided in the Supplementary ﬁle.

The Quality aware column in Table 2 indicates whether a
mapper exploits the base quality scores (generated by the sequen-
cer) during the alignment. It has been shown (Li and Homer,
2010) that using accurate quality scores can reduce alignment
errors by giving a lower penalty for a mismatch in a position
with a low quality score. Several mappers, such as Bowtie, BWA,
GEM-Mapper, PASS, SHRiMP2, ZOOM, SOCS, RMAP
and GNUMAP, exploit quality scores during the alignment
but differ in the way that they do it. For instance, RMAP does
not penalize mismatches for bases with a quality score below a
pre-determined cut-off value, whereas Novoalign uses base qua-
lities to calculate base penalties for the Needleman—Wunsch
algorithm. GNUMAP goes a step further and uses the Solexa/
Illumina probability output ﬁles to construct a position weight
matrix for each read, before a modiﬁed Needleman—Wunsch
alignment algorithm exploits these matrices to score and align
a read against the reference sequence.

3.2 Variation and errors

To cope with errors and variation, mappers must allow the
matching of the reads to the reference sequences to be approxi-
mate. For instance, in a project to detect genome variation, the
mapper should allow a small number of errors but enough to
cope with the expected variation. However, more errors should
be allowed when aligning reads against reference sequences from
different species or when longer reads are used, e. g. 5 mismatches
in a read with 36 bases (14%) is quantitatively different from 5
mismatches in a read with 150 bases (3%). The Mismatches and
Indels columns in Table 2 indicate whether a mapper aligns reads
while allowing for errors (mutations and short indels), whereas
the Gaps column indicates whether consecutive insertions or de-
letions are allowed during alignment. The challenge is to distin-
guish between nucleotide variation caused by true genetic
variation and differences from the reference due to inaccuracy
in sequencing.

In an attempt to improve computational efﬁciency, many
mappers impose constraints on the number of mismatches/gaps
allowed. Some mappers allow a small number of mismatches
(e.g. ELAND supports up to 2 mismatches, VMATCH and
WHAM support up to 5 mismatches and BSMAP supports up
to 15 mismatches), whereas others accept an arbitrary number of
mismatches and no indels (e.g. MapReads, MicroRazerS and
mrsFast). Some mappers support indels but, again, often with
some constraints: e.g. SOAP and SOAP2 support up to 3 and 2
indels, respectively, MrFast up to 6 indels and BWA up to 8
indels. Finally, some mappers impose no constraint on the
number of mismatches and indels (e.g. Bowtie, Bowtie2,

GNUMAP, Mosaik, RazerS, SSAHA2, VMATCH, SHRiMP
and SHRiMP2). In this ﬁnal case, a threshold on the score func-
tion value is often used to determine whether a read is mapped to
a particular location.

Support for gaps (long indels) comes at the cost of computa-
tional efﬁciency but is a feature required in several contexts,
namely, to map longer reads (because they have a greater prob-
ability of containing gaps) or to map RNA-seq data. Li and
Homer (2010) showed that gapped alignment increases the per-
centage of reads mapped but that it did not reduce the percentage
of reads incorrectly aligned. In an attempt to minimize the com-
putational cost incurred from allowing gaps, many mappers
impose constraints: e.g. SOAPSplice, SpliceMap and WHAM
allow for a single gap with different gap size constraints;
SOAP2 and QPALMA allow a single gap with no constraint
on size and BLAT allows multiple gaps with a maximum size
of 23 kb.

The alignment phase in RNA-seq experiments presents many
challenges that arise, in general, from splicing events. These can
be handled easily if reads are mapped to a pre—deﬁned transcrip-
tome at the cost of missing novel transcripts. Alternatively, the
reads can be mapped to the genome. However, reads that span
multiple exons will have potentially large gaps in the alignment
corresponding to intronic sequence. Hence, RNA-seq mappers
should be able to support large gaps, as is the case for
MapSplice, TopHat, Supersplat, SOAPSplice, SpliceMap,
RNA-mate, RUM, PASS, QPALMA or MapSplice. These map-
pers are also termed spliced aligners (Garber et al., 2011) owing
to their ability to align a read to multiple exons. Some of these
mappers are, in fact, wrappers to other mappers (e.g. TopHat
uses Bowtie; RUM uses Bowtie or BLAT; RNA-Mate uses
MapReads and SpliceMap can use Bowtie, Eland or SeqMap).
Some wrappers (e. g. MapSplice or SpliceMap) use an exon-ﬁrst
approach that involves two main steps: (i) map reads to the
genome using unspliced read aligners; (ii) unmapped reads are
then split into shorter segments and aligned independently. The
genomic regions surrounding the mapped read segments are then
searched for spliced connections. This approach is efﬁcient be-
cause a smaller proportion of the reads are used in the more
computationally demanding second step. Alternative approaches
are seed-and-extend variations, as exempliﬁed by TopHat when
used to align RNA-seq reads to a genome. Brieﬂy, TopHat starts
by mapping the reads using Bowtie against the whole genome,
and then aggregates the reads into islands of candidate exons,
before generating potential donor/acceptor splice sites using
neighbouring exons. Finally, unmapped reads are mapped
(using Bowtie) to these splice junction sequences.

3.3 Alignments

The task at hand will determine whether the exact alignments or
locations are of interest. Mappers can report (semi-) global or
local alignments with respect to the reads (see Alignment column
in Table 2). A mapper performs a (semi-) global (or end-to-end)
alignment with respect to the reads when it produces an align-
ment that involves all of the bases in the read. A local alignment
considers only bases in part of the read (bases at the ends of
the read are usually omitted in the alignment). Local alignment
of the reads is often faster than global (or end-to-end)

 

3174

112 /310's113umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; popeoIII/noq

9IOZ ‘09 lsnﬁnv uo ::

Mapping high-throughput sequencing data

 

alignment because the mappers can stop the alignment process
when a good quality unique match is found. This is useful for
cases where the number of hits is of interest, as opposed to the
alignments per se.

Multi-map reads (also known as multi—reads) are those that
align to multiple locations with similar alignment scores, due to
the reads originating from repetitive regions and/or due to the
short length of the reads. Having identiﬁed a multi-map read, a
mapper has several reporting options. For instance, in RNA-seq
data analysis when the reference is a transcriptome, one may
want to consider reads with many possible alignments (and
then perform some post-processing). TopHat, on the other
hand, uses Bowtie to map and report reads with up to 10 possible
locations and excludes the reads that have more than this
number of alignments: the aim is to include multi—map reads
from paralogous genes but to exclude reads aligned to
low-complexity sequences. Although several mappers have an
option to report all possible mapping locations of a read, they
are less efﬁcient than mappers speciﬁcally designed for this pur-
pose, such as mrFast, mrsFAST and PatMaN.

4 EXECUTION TIME AND MEMORY
REQUIREMENTS

The computational time required by a mapper to align a given
set of sequences and the computer memory required are critical
characteristics. If a mapper is extremely fast but the computer
hardware available for performing a given analysis does not have
enough memory to run it, then the mapper is not very useful. A
mapper is also not useful if it has a very low memory requirement
but is very slow. Hence, ideally, a mapper should be able to
balance speed and memory usage while reporting the desired
mappings.

We measured the computational speed and memory require-
ments of the mappers empirically. The human genome (Homo
sapiens, assembly GRCh37), obtained from Ensembl (build 66),
was used as a reference. Two further reference sets (subsets of
chromosomes of the human genome, with a size of 130 Mb and
le) were used to assess the impact of reference size on com-
putational speed and memory usage. Samples of 1 million
high-quality reads were mapped against each reference. Table 3
presents the total time (in minutes), maximum memory usage,
time spent in pre—processing/preparing the data (which includes
indexing), time spent on mapping and number of reads aligned.
Because of space constraints, we only show, for each type of
data, the ﬁve mappers with lowest mapping time, total time,
memory usage or highest number of reads mapped when aligning
to the whole human genome. It should be stressed that the focus
of the evaluation is on the speed and memory of the mappers,
and the accuracy of the mappings produced was not evaluated.
All the values presented are averaged across multiple runs. The
default parameter values of the mappers were used whenever
possible, and no parameter optimization was attempted. The
mappers were conﬁgured to use a single processor and up to a
maximum of 32 GB of RAM. Further information about the
data, methods and more results are presented in Section 2 in the
Supplementary ﬁle.

Table 3. The ﬁve mappers with lowest average mapping time
(Map.Time), total time (Time), memory usage (Mem) or higher
number of reads aligned when mapping 1 million (BS/DNA, miRNA,
RNA)-seq single-end reads against the whole human genome

 

 

Mapper Time Pre.Time Map.Time Mem R.Aligned
BS (30 bp)
Bismark 88 :I: 13 164 :I: 12 23 :I:1 10.2 713 938
BS_Seeker 1151:I:110 1137:I:110 14:I:1 26 71050
BSMAP 9:I:1 0:I:0 9:I:1 8.2 855 086
GSNAP 477 :I: 83 26 :I: 1 451 :I: 82 15 998 005
Novoalign 45 :I: 8 17 :I: 2 28 :I: 7 7.8 531944
RMAP 158:I:14 0:I:0 158:I:14 3.3 691414
DNA (100 bp)
BFAST 39 :I: 0 20 :I: 0 20 :I: 0 21.4 561 348
BLAT 93 :I:7 2:I:0 90:I:7 3.8 950 220
Bowtie 169 :I: 39 166 :I: 38 3 :I: 1 5 798 566
Bowtie2 176 :I: 40 168 :I: 39 8 :I:1 5.1 991880
BSMAP 25 :I: 5 0 :I: 0 25 :I: 5 8.3 802 430
BWA 97:I:6 83:I: 5 13:I:1 7.6 928093
GEM 380:I:65 373:I:64 6:I:1 5.5 855313
GMAP 2887 :I: 95 17 :I: 2 2870 :I: 94 7.6 998 454
GSNAP 40:I:6 22:I:6 18:I:1 7.6 926 371
MicroRazerS 453 :I: 22 0 :I: 0 453 :I: 22 1.8 989 089
MOSAIK 22:I:2 4:I:1 18:I:1 15.6 267173
Novoalign 48 :I: 4 12 :I: 1 36 :I: 3 7.8 940 428
SOAP2 82 :I: 7 78 :I: 7 4 :I: 0 5.3 798 565
SSAHA2 207:I:27 13:I:2 194:I:25 9.5 1e+06
Stampy 189 :I: 19 33 :I: 6 156 :I: 14 4 986 593
miRNA (20 bp)
Bowtie 119:I:2 118:I:2 1:I:0 5 983951
Bowtie2 124:I:1 123:I:1 1:I:0 5.1 983951
BWA 91 :I:4 87:I:4 4:I:1 7.4 996470
GEM 228:I:4 226:I:4 3 :I:0 5.6 980071
GSNAP 19:I:1 17:I:1 3:I:0 7.6 966802
MicroRazerS 49 :I: 1 0 :I: 0 49 :I: 1 1.6 979 464
mrFAST 48 :I: 3 33 :I: 2 15 :I: 1 0.8 982 049
mrsFAST 42 :I:1 33 :I: 1 9 :I: 0 0.5 979 389
PASS 28:I:2 0:I:0 28:I:2 15.8 999989
PERM 57 :I:1 0 :I: 0 57 :I:1 13.4 982 545
SHRiMP 137 :I: 22 7 :I: 1 130 :I: 22 2.2 962 980
RNA (75 bp)
BFAST 35:I:2 17:I:1 17:I:1 21.4 726 601
BLAT 1,741:I:131 3:I:1 1738:I:131 3.8 974710
GMAP 931:I:43 18:I:1 913:I:43 7.6 992079
GSNAP 68:I:5 20:I:1 48:I:4 7.6 924216
Novoalign 90 :I: 3 13 :I: 1 77 :I: 3 7.8 795 480
Smalt 48 :I: 2 5 :I: 0 43 :I: 2 5.2 996 443
SOAPSplice 104 :I: 7 76 :I: 5 29 :I: 3 5.4 877 911
SSAHA2 91 :I:5 16:I:1 76:I:4 9.5 999945
TopHat 99:I:13 71:I:13 28:I:0 5.1 807811

 

Time unit is minutes, and memory unit is GB. The Pre.Time column presents the
pre-processing time (includes indexing), and the R.Aligned column presents the
number of reported aligned reads.

5 DISCUSSION

The development of numerous mappers for HTS data is moti-
vated not only by novel developments of HTS technology but
also by the growing number of biological applications. The var-
iety of applications has led to the appearance of speciﬁc types of

 

3175

112 /§JO'S{12umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬂdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

N.A.Fonseca et al.

 

data (e. g. miRNA, RNA, ChIP and bisulphite). Previously exist-
ing mappers have been adapted whereas others were developed
from scratch to deal with these developments. The increasing
number of resequencing projects has also motivated the develop-
ment of mappers optimized to align reads to multiple reference
genomes (e. g. DynMap and GenomeMapper). It is expected that
further improvements in efﬁciency, multi-reference alignment
and support for longer read lengths will be topics of future
research.

One commonly asked question is what is the best mapper for a
given application. Although the ‘best mapper’ criterion involves
application-speciﬁc requirements such as how well it work in
conjunction with downstream analysis tools (e. g. variant callers),
it often also includes speed and, in particular, accuracy. Despite
some recent evaluation studies (Bock et al., 2010; Chatterjee
et al., 2012; Li and Homer, 2010), determining the most accurate
and fastest mappers for a particular application is still difﬁcult.
The primary challenge in assessing mappers is the lack of gold
standard datasets for different applications and sequencing tech-
nologies. These datasets would not only include the reads but
also their true locations and could be based on true data or data
generated in silico, using novel or existing simulators such as
ART (Huang et al., 2011b), BEERS (Grant et al., 2011) or
FluxSimulator (Griebel et al., 2012). The research community
has started to address these issues in the context of different
projects, such as the RGASP (http://www.gencodegenes.org/
rgasp/) and the Alignathon (http://compbio.soe.ucsc.edu/aligna-
thon/) projects, which aim, respectively, to assess the status of
computational methods to map human RNA-seq data and
DNA-seq data to whole genomes. However, no results are pub-
licly available at this time. More generally, a common approach
for comparing mappers has been to count the number of reads
aligned. However, increasing the number of reads is not useful if
the probability of the reads being correctly mapped decreases, i.e.
if the increase in mapped reads is done at the expense of increas-
ing the proportion of incorrectly mapped reads. One way to ad-
dress this problem would be to compute the likelihood of a read
being correctly mapped (e.g. as available in RMap or ZOOM)
and allow the users to choose only the alignments above some
threshold.

Users may want to consider several mappers in their HTS
analysis and to incorporate them in pipelines, such as in
ArrayExpressHTS (Goncalves et al., 2011). This raises the
issue of mapper interoperability. To achieve interoperability,
input and output formats need to be standardized. Currently,
the majority of the mappers accept input ﬁles in FASTQ or
CFASTQ format and generate SAM/BAM ﬁles as output.
Hence, the level of interoperability is high. However, there is
still room to improve because FASTQ ﬁles include quality
values encoded in different formats and BAM ﬁles can also
come in different ‘ﬂavours’ (their standardization should be
encouraged). Moreover, in the future, mappers may also include
the option to output ﬁles in the CRAM format (Fritz et al.,
2011), which may prove useful for efﬁciently compressing
DNA sequences. The input parameters of the mappers are far
from being normalized, which makes it more difﬁcult for a prac-
titioner to switch between mappers. Hence, it would be useful if
there was an effort to standardize the most commonly used

parameters (e.g. for deﬁning seed lengths, input/output ﬁles
and formats).

Finally, the great ﬂexibility and conﬁgurability of most map-
pers comes with a price: a considerable number of parameters
that have to be set. Determining the best parameter values to
achieve some pre-deﬁned level of mapping speciﬁcity/sensitivity
is far from being trivial. Mappers with the ability to automatic-
ally tune their parameters to achieve some user-deﬁned speciﬁ-
city/sensitivity may be a solution to this problem.

ACKNOWLEDGEMENTS

We would like to thank the anonymous reviewers for their help-
ful and constructive comments, all developers who answered our
survey and our colleagues Jose Afonso, Mat Davis, Angela
Goncalves and Mar Gonzalez Porta for their helpful comments
and discussion.

Funding: The research leading to these results has received fund-
ing from the European Community’s FP7 HEALTH grants
CAGEKID (grant agreement 241669), ENGAGE (grant agree-
ment 201413), EurocanPlatform (grant agreement 260791) and
GEUVADIS (grant agreement 261123).

Conflict of Interest: none declared.

REFERENCES

Alkan,C. et al. (2009) Personalized copy number and segmental duplication maps
using next-generation sequencing. Nat. Genet, 41, 1061—1067.

Au,K. et al. (2010) Detection of splice junctions from paired-end RNA-seq data by
SpliceMap. Nucleic Acids Res., 38, 4570—4578.

Bock,C. et al. (2010) Quantitative comparison of genome-wide DNA methylation
mapping technologies. Nat. Biotechnol, 28, 1106—1114.

Bryant,D.W., Jr et al. (2010) Supersplat-spliced RNA-seq alignment.
Bioinformatics, 26, 1500—1505.

Campagna,D. et al. (2009) PASS: a program to align short sequences.
Bioinformatics, 25, 967—968.

Chatterjee,A. et al. (2012) Comparison of alignment software for genome-wide
bisulphite sequence data. Nucleic Acids Res., 40, e79.

Chen,P. et al. (2010) BS Seeker: precise mapping for bisulﬁte sequencing. BM C
Bioinformatics, 11, 203.

Chen,Y. et al. (2009) PerM: efﬁcient mapping of short sequencing reads with peri-
odic full sensitive spaced seeds. Bioinformatics, 25, 2514—2521.

Clement,N. et al. (2010) The GNUMAP algorithm: unbiased probabilistic mapping
of oligonucleotides from next-generation sequencing. Bioinformatics, 26, 38—45.

Cloonan,N. et al. (2009) RNA-MATE: a recursive mapping strategy for
high-throughput RNA-sequencing data. Bioinformatics, 25, 2615—2616.

Cokus,S. et al. (2008) Shotgun bisulphite sequencing of the Arabidopsis genome
reveals DNA methylation patterning. Nature, 452, 215—219.

David,M. et al. (2011) SHRiMP2: sensitive yet practical short read mapping.
Bioinformatics, 27, 1011.

De Bona,F. et al. (2008) Optimal spliced alignments of short sequence reads.
Bioinformatics, 24, i174—i180.

Eaves,H. and Gao,Y. (2009) MOM: maximum oligonucleotide mapping.
Bioinformatics, 25, 969—970.

Emde,A. et al. (2010) MicroRazerS: rapid alignment of small RNA reads.
Bioinformatics, 26, 123—124.

Flicek,P. and Birney,E. (2009) Sense from sequence reads: methods for alignment
and assembly. Nat. Methods, 6, 86—812.

Flouri,T. et al. (2011) DynMap: mapping short reads to multiple related genomes.
In: Proceedings of the 2nd ACM Conference on Bioinformatics, Computational
Biology and Biamedicine. ACM, Chicago, Illinois, USA, pp. 330—334.

Fritz,M. et al. (2011) Efﬁcient storage of high throughput DNA sequencing data
using reference-based compression. Genome Res., 21, 734—740.

 

3176

112 /§JO'S{12umo [p.IOJXO'SOIlBIHJOJUIOIQ/ﬁ(1111] 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

Mapping high-throughput sequencing data

 

Frousios,K. et al. (2010) Real: an efﬁcient read aligner for next generation
sequencing reads. In: Proceedings of the First ACM International Conference
on Bioinformatics and Computational Biology. BCB ’10, pp. 154—159, ACM,
New York, NY, USA.

Garber,M. et al. (2011) Computational methods for transcriptome annotation and
quantiﬁcation using RNA-seq. Nat Methods, 8, 469—477.

Goncalves,A. et al. (2011) A pipeline for RNA-seq data processing and quality
assessment. Bioinformatics, 27, 867—869.

Grant,G. et al. (2011) Comparative analysis of RNA-Seq alignment algorithms and
the RNA-Seq uniﬁed mapper (RUM). Bioinformatics, 27, 2518—2528.

Griebel,T. et al. (2012) Modelling and simulating generic RNA-Seq experiments
with the ﬂux simulator. Nucleic Acids Res., [Epub ahead of print, doi:10.1093/
nar/gks666, September 7, 2012].

Hach,F. et al. (2010) mrsFAST: a cache-oblivious algorithm for short-read map-
ping. Nat. Methods, 7, 576—577.

Homer,N. et al. (2009) BFAST: an alignment tool for large scale genome resequen-
cing. PLaS One, 4, 67767.

Huang,S. et al. (2011a) SOAPSplice: genome-wide ab initio detection of splice junc-
tions from RNA-Seq data. Front. Genet, 2, 46.

Huang,W. et al. (2011b) ART: a next-generation sequencing read simulator.
Bioinformatics, 28, 593—594.

Jiang,H. and Wong,W. (2008) SeqMap: mapping massive amount of oligonucleo-
tides to the genome. Bioinformatics, 24, 2395.

Kent,W. (2002) BLATithe BLAST-like alignment tool. Genome Res., 12, 656—664.

Kim,Y. et al. (2009) ProbeMatch: rapid alignment of oligonucleotides to genome
allowing both gaps and mismatches. Bioinformatics, 25, 1424.

Krueger,F. and Andrews,S. (2011) Bismark: a ﬂexible aligner and methylation caller
for Bisulﬁte-Seq applications. Bioinformatics, 27, 1571—1572.

Kurtz,S. et al. (2004) Versatile and open software for comparing large genomes.
Genome Biol, 5, R12.

Lam,T. et al. (2008) Compressed indexing and local alignment of DNA.
Bioinformatics, 24, 791.

Langmead,B. and Salzberg,S. (2012) Fast gapped-read alignment with Bowtie 2.
Nat Methods, 9, 357—359.

Langmead,B. et al. (2009) Ultrafast and memory-efﬁcient alignment of short DNA
sequences to the human genome. Genome Biol, 10, R25.

Li,H. and Durbin,R. (2009) Fast and accurate short read alignment with
Burrows-Wheeler transform. Bioinformatics, 25, 1754—1760.

Li,H. and Durbin,R. (2010) Fast and accurate long-read alignment with Burrows—
Wheeler transform. Bioinformatics, 26, 589—595.

Li,H. and Homer,N. (2010) A survey of sequence alignment algorithms for
next-generation sequencing. Brief. Bioinformatics, 11, 473.

Li,H. et al. (2008a) Mapping short DNA sequencing reads and calling variants
using mapping quality scores. Genome Res., 18, 1851—1858.

Li,H. et al. (2009a) The sequence alignment/map format and SAMtools.
Bioinformatics, 25, 2078.

Li,J. et al. (2012) Seqanswers: an open access community for collaboratively decod-
ing genomes. Bioinformatics, 28, 1272—1273.

Li,R. et al. (2008b) SOAP: short oligonucleotide alignment program. Bioinformatics,
24, 713—714.

Li,R. et al. (2009b) SOAP2: an improved ultrafast tool for short read alignment.
Bioinformatics, 25, 1966—1967.

Li,Y. et al. (2011) WHAM: a high-throughput sequence alignment method. In:
Proceedings of the 2011 International Conference on Management of Data.
ACM, Athens, Greece, pp. 445—456.

Lieberman-Aiden,E. et al. (2009) Comprehensive mapping of long-range
interactions reveals folding principles of the human genome. Science, 326,
289.

Lin,H. et al. (2008) ZOOM! Zillions of oligos mapped. Bioinformatics, 24,
2431—2437.

Lunter,G. and Goodson,M. (2011) Stampy: a statistical algorithm for sensitive and
fast mapping of Illumina sequence reads. Genome Res., 21, 936—939.

Malhis,N. and J ones,S. (2010) High quality snp calling using illumina data at shal-
low coverage. Biainfarmatics, 26, 1029—1035.
Malhis,N. et al. (2009) Slider-maximum use of probability information for align-
ment of short sequence reads and SNP detection. Bioinformatics, 25, 6—13.
Mardis,E. (2008) Next-generation DNA sequencing methods. Annu. Rev. Genamics
Hum. Genet, 9, 387—402.

Marioni,J. et al. (2008) RNA-seq: an assessment of technical reproducibility and
comparison with gene expression arrays. Genome Res., 18, 1509—1517.

Meissner,A. et al. (2008) Genome-scale DNA methylation maps of pluripotent and
differentiated cells. Nature, 454, 766—770.

Metzker,M. (2009) Sequencing technologies: the next generation. Nat Rev. Genet,
11, 31—46.

Ning,Z. et al. (2001) SSAHA: a fast search method for large DNA databases.
Genome Res., 11, 1725—1729.

Ondov,B. et al. (2008) Efﬁcient mapping of Applied Biosystems SOLiD sequence
data to a reference genome for functional genomic applications. Bioinformatics,
24, 2776—2777.

Ozsolak,F. and Milos,P. (2010) RNA sequencing: advances, challenges and oppor-
tunities. Nat Rev. Genet, 12, 87—98.

Park,P. (2009) Chip-seq: advantages and challenges of a maturing technology. Nat
Rev. Genet, 10, 669—680.

Priifer,K. et al. (2008) PatMaN: rapid alignment of short sequences to large data-
bases. Biainfarmatics, 24, 1530—1531.

Rumble,S. et al. (2009) SHRiMP: accurate mapping of short color-space reads.
PLaS Camput Biol., 5, 61000386.

Schatz,M. (2009) CloudBurst: highly sensitive read mapping with MapReduce.
Bioinformatics, 25, 1363—1369.

Schneeberger,K. et al. (2009) Simultaneous alignment of short reads against mul-
tiple genomes. Genome Biol, 10, R98.

Slater,G. and Birney,E. (2005) Automated generation of heuristics for biological
sequence comparison. BM C Bioinformatics, 6, 31.

Smith,A. et al. (2008) Using quality scores and longer reads improves accuracy of
Solexa read mapping. BM C Bioinformatics, 9, 128.

Trapnell,C. and Salzberg,S.L. (2009) How to map billions of short reads onto gen-
omes. Nat Biotechnol, 27, 455—457.

Trapnell,C. et al. (2009) TopHat: discovering splice junctions with RNA-Seq.
Bioinformatics, 25, 1105—1111.

Wang,K. et al. (2010) MapSplice: accurate mapping of RNA-seq reads for splice
junction discovery. Nucleic Acids Res., 38, e178.

Wang,Z., Gerstein,M. and Snyder,M. (2009) RNA-Seq: a revolutionary tool for
transcriptomics. Nat Rev. Genetics, 10, 57—63.

Weese,D. et al. (2009) RazerS - fast read mapping with sensitivity control. Genome
Res., 19, 1646—1654.

Wood,D. et al. (2011) X-MATE: a ﬂexible system for mapping short read data.
Bioinformatics, 27, 580.

Wu,T. and Nacu,S. (2010) Fast and SNP-tolerant detection of complex variants and
splicing in short reads. Bioinformatics, 26, 873—881.

Wu,T. and Watanabe,C. (2005) GMAP: a genomic mapping and alignment pro-
gram for mRNA and EST sequences. Bioinformatics, 21, 1859.

Xi,Y. and Li,W. (2009) BSMAP: whole genome bisulﬁte sequence MAPping pro-
gram. BM C Bioinformatics, 10, 232.

Zhang,Y. et al. (2012) PASSion: a pattern growth algorithm-based pipeline for
splice junction detection in paired-end RNA-Seq data. Bioinformatics, 28,
479—486.

 

3177

112 /810's112umo [p.IOJXO'SOIlBIHJOJUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

