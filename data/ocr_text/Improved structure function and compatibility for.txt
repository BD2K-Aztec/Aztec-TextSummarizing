APPLICATIONS NOTE

Vol. 27 no. 8 2011, pages 1179-1180
doi: 1 0. 1 093/bioinforma tics/btr095

 

Systems biology

Advance Access publication February 23, 2011

Improved structure, function and compatibility for CellProfiler:
modular high-throughput image analysis software

Lee Kamentsky‘, Thouis R. Jones‘, Adam Fraser‘, Mark-Anthony Bray‘,
David J. Logan‘, Katherine L. Madden‘, Vebjorn Ljosa‘, Curtis Rueden2, Kevin W. Eliceiri2

and Anne E. Carpenter“

1Imaging Platform, Broad Institute of Harvard and MIT, Cambridge, MA 02142 and 2Laboratory for Optical and
Computational Instrumentation, University of Wisconsin, Madison, WI 53706, USA

Associate Editor: Alfonso Valencia

 

ABSTRACT

Summary: There is a strong and growing need in the biology
research community for accurate, automated image analysis. Here,
we describe CellProfiler 2.0, which has been engineered to meet the
needs of its growing user base. It is more robust and user friendly,
with new algorithms and features to facilitate high-throughput work.
ImageJ plugins can now be run within a CellProfiler pipeline.
Availability and Implementation: CellProfiler 2.0 is free and open
source, available at http://www.cellprofiler.org under the GPL v. 2
license. It is available as a packaged application for Macintosh OS X
and Microsoft Windows and can be compiled for Linux.

Contact: anne@broadinstitute.org

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on November 2, 2010; revised on January 31, 2011;
accepted on February 14, 2011

1 INTRODUCTION

CellProﬁler is freely available, open—source software that enables
researchers without training in computer programming to measure
biological phenotypes quantitatively and automatically from
thousands of images. With an interface designed by biologists
and underlying algorithms developed by computer scientists,
CellProﬁler bridges the gap between advanced image analysis
algorithms and scientists who lack computational expertise. In the 4
years since its publication (Carpenter et al., 2006; Lamprecht et al.,
2007), it has been rapidly adopted by the worldwide biological
community and cited in more than 250 articles. Roughly half of
its users are outside the USA. CellProﬁler was initially designed
for high—throughput image analysis but is often used for small—scale
projects. This highlights the trend toward quantifying information
in images regardless of experiment size.

CellProﬁler’s interface lets researchers build customized chains
of interoperable image analysis modules to identify and measure
biological objects and features in images. These modular pipelines
can be saved and shared with colleagues. CellProﬁler has been
used to measure individual cells, colonies of cells and whole
organisms in a wide range of assays (e. g. counting cells, measuring
staining intensities and scoring complex phenotypes with machine

 

*To whom correspondence should be addressed.

learning) and at many experimental scales (from a few to hundreds
of thousands of images). A variety of cell types have been
analyzed, including budding yeast, Drosophila, mouse, rat and
dozens of human cell types. The diverse measurements generated by
CellProﬁler provide raw material for machine—learning algorithms
that can identify challenging phenotypes (Jones et al., 2009;
Misselwitz et al., 2010; Ramo et al., 2009).

CellProﬁler ﬁlls a unique role in the software landscape. It is
a modular, high—throughput, open—source biological image analysis
package, and it won the 2009 Bio—IT World Best Practices Award
in IT & Informatics. CellProﬁler 2.0 improves upon the design of
the original version, resulting in professionally engineered software
with improved usability and functionality, as well as integration with
other open—source image—related software.

2 IMPROVEMENTS IN CELLPROFILER 2.0

Robust infrastructure and interoperability: we redesigned the
software’s infrastructure while porting it from the proprietary
MATLAB language to the open—source Python language, making
use of the high—performance scientiﬁc libraries NumPy and SciPy
(Oliphant, 2007). While retaining the successful attributes of
CellProﬁler 1.0 (Supplementary Fig. l and Table l), CellProﬁler 2.0
compares favorably to CellProﬁler 1.0 in terms of performance
(Supplementary Fig. 2) and features (Supplementary Table S2).
Object—oriented design and professional software practices were
integral to the porting effort, including version control, a continuous
build process and the development of an extensive validation suite.

CellProﬁler 2.0 is designed to be extensible and interoperable; its
plug—in interface allows outside developers to write and distribute
new CellProﬁler modules. We use Cython (http://www.cython.org)
to implement computationally intensive algorithms, as well as
bridge to precompiled libraries including Java via the Java
Native Interface. The J ava/Python bridge allows CellProﬁler 2.0
to load nearly 100 image formats via the Open Microscopy
Environment Consortium’s Bio—formats library (http://www.loci
.wisc.edu/software/bio—formats). Because 5% of CellProﬁler—citing
papers also used ImageJ (http://rsbweb.nih.gov/ij), we built a bridge
to run ImageJ macros in the context of a CellProﬁler pipeline. In
our own research, we have used third—party ImageJ plug—ins via
CellProﬁler to enhance neurites in images (Supplementary Fig. 1A)
and detect focal planes in three—dimensional images.

 

© The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 1179

112 /§JO'SIBUJHO[pJOJXO'SOIlBIHJOJUIOIQ/ﬁdnq mm; popeommoq

9IOZ ‘09 lsnﬁ'nv uo ::

L.Kamentsky et al.

 

 

 

 

“a u u

 

mlmw. --. mummy _ h E_ .b

-- hull-1*? “.m- my.

 

Fig. 1. User interface for CellProﬁler 2.0.

User-oriented improvements: CellProﬁler 2.0 has a much—
enhanced user interface for editing pipelines (Fig. 1), including drag—
and—drop operations, context—sensitive menus, undo capabilities,
user—friendly error reporting and context—dependent warnings for
mistakes in a pipeline’s settings (Supplementary Fig. 1B). A newly
designed test mode allows a researcher to step through a pipeline
and repeatedly adjust settings (Supplementary Fig. 1C) to optimize
image analysis. Within each module, CellProﬁler shows only those
settings relevant to the user’s existing choices, resulting in a
concise and comprehensible display. Extensive context—dependent
help guides users in choosing settings for their assay (Supplementary
Fig. 1D). Pipelines are now saved in a human—readable text format
(Supplementary Material: Example CellProﬁler 2.0 pipeline ﬁle).

New and improved algorithms: for neuron image analysis,
CellProﬁler 2.0 includes operations to enhance neurites and to
measure their branching, and algorithms for neuron—speciﬁc metrics
are in development. An updated time—lapse object—tracking module
implements a recently developed algorithm based on a linear
assignment approach (Jaqaman et al., 2008). New morphological
operations can ﬁnd the convex hull of foreground objects and
enhance dark holes in images. Illumination correction options
now include spline ﬁtting (Lindblad and Bengtsson, 2001), and
thresholding options have been extended to partition intensities into
three classes instead of the typical two. Other changes include
an algorithm for more accurate operations on masked images
(Knutsson and Westin, 1993), faster measurement of Zernike—based
shape features (Supplementary Fig. 2) and improved measurement
of Gabor (Supplementary Fig. 3) and Haralick texture features
(Supplementary Table 3).

Enhancements for high-throughput use: CellProﬁler can be run
in batch mode: sets of images are partitioned between CellProﬁler
instances running on separate computing cores or cluster nodes in a
distributed environment. In CellProﬁler 2.0, images can be loaded
via HTTP or located based on a comma—delimited text ﬁle containing
image ﬁle locations, which might be generated by automated
microscopes or laboratory information systems. Metadata about the
images can also be loaded similarly. CellProﬁler 2.0 has enhanced
database capabilities and is now able to upload directly to MySQL
or SQLite databases during image processing. CellProﬁler 2.0’s
FlagImage module can exclude images from analysis based on

measurements of image quality, such as blurriness and presence of
debris. Images can be grouped for aggregate operations, such as
illumination correction of images on a per—plate basis or analysis of
multiple time—lapse movies or three—dimensional image stacks. More
detailed information on CellProﬁler and high—throughput screening
is available at http://www.cellproﬁler.org/hcs.html.

Future directions: we will use the improved infrastructure and
design of CellProﬁler 2.0 as the basis for our future work. Where
feasible, we will continue to leverage existing open—source projects
to add functionality, such as software for workﬂow management
(e.g. OMERO and KNIME) and classiﬁcation of pixels or whole
images by machine learning (e. g. Wndchrm and Ilastik). While
supporting contributions from other developers, we will also develop
novel algorithms for CellProﬁler based on our ongoing research,
including time—lapse and three—dimensional image analysis, metrics
and corrections for assay quality control and performance evaluation
and algorithms for Caenorhabditis elegans image—based screens
(Riklin—Raviv et al., 2010; W'ahlby et al., 2010).

ACKNOWLEDGEMENTS

The authors thank the members of their laboratories for contributing
to the development of the software and this article, especially
Shravas Rao and Emily Schloff.

Funding: National Institutes of Health (R01 GM089652—01 to
A.E.C., RC2 GM092519—01 to K.W.E. and NIH RL1 HG004671,
which is administratively linked to RL1 CA133834, RL1
GM084437 and UL1 RR024924).

Conﬂict of Interest: none declared.

REFERENCES

Carpenter,A.E. et al. (2006) CellProﬁler: image analysis software for identifying and
quantifying cell phenotypes. Genome Biol, 7, R100.

Jaqaman,K. et al. (2008) Robust single-particle tracking in live-cell time-lapse
sequences. Nat. Methods, 5, 695—702.

J0nes,T.R. et al. (2009) Scoring diverse cellular morphologies in image-based screens
with iterative feedback and machine learning. Proc. Natl Acad. Sci. USA, 106,
1826—1831.

Knutsson,H. and Westin,C.-F. ( 1993) Normalized and differential convolution: methods
for interpolation and ﬁltering of incomplete and uncertain data. Proc. IEEE Conf.
Comput. st. Pattern Recognit, 515—523.

Lamprecht,M.R. et al. (2007) CellProﬁler: free, versatile software for automated
biological image analysis. Biotechniques, 42, 71—75.

Lindblad,J. and Bengtsson,E. (2001) A comparison of methods for estimation of
intensity nonuniformities in 2D and 3D microscope images of ﬂuorescence stained
cells.In Proceedings of the 12th Scandinavian Conference on Image Analysis
(SCIA). Norwegian Society for Image Processing and Pattern Recognition, Bergen,
Norway, pp. 264—271.

Misselwitz,B. et al. (2010) Enhanced CellClassiﬁer: a multi-class classiﬁcation tool for
microscopy images. BMC Bioinformatics, 11, 30.

Oliphant,T.E. (2007) Python for scientiﬁc computing. Comput. Sci. Eng, 9, 10—20.

Ram0,P. et al. (2009) CellClassiﬁer: supervised learning of cellular phenotypes.
Bioinformatics, 25, 3028—3030.

Riklin-Raviv,T. et al. (2010) Morphology-guided graph search for untangling objects:
C. elegans analysis. In Conference on Medical Image Computing and Computer
Assisted Intervention (MICCAI). Springer, Beijing, China.

W'ahlby,C. et al. (2010) Resolving clustered worms via probabilistic shape models.
In IEEE International Symposium on Biomedical Imaging (ISBI): From Nano to
Macro. Rotterdam, The Netherlands.

 

1180

112 /B.IO'S[BU.IT10[p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdnq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

