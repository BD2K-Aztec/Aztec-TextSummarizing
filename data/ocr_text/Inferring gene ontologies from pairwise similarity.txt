Vol. 30 ISMB 2014, pages i34—i42
doi:10. 1093/bioinformatics/btu282

 

Inferring gene ontologies from pairwise similarity data

Michael Kramer‘, Janusz Dutkowski‘, Michael Yul, Vineet Bafna2 and Trey Ideker1’*
1Department of Medicine and 2Department of Computer Science and Engineering, University of California San Diego,

La Jolla, CA 92093, USA

 

ABSTRACT

Motivation: While the manually curated Gene Ontology (GO) is widely
used, inferring a GO directly from -omics data is a compelling new
problem. Recognizing that ontologies are a directed acyclic graph
(DAG) of terms and hierarchical relations, algorithms are needed that:

(1) analyze a full matrix of gene—gene pain/vise similarities from
-omics data;

(2) infer true hierarchical structure in these data rather than enfor-
cing hierarchy as a computational artifact; and

(3) respect biological pleiotropy, by which a term in the hierarchy
can relate to multiple higher level terms.

Methods addressing these requirements are just beginning to
emerge—none has been evaluated for GO inference.

Methods: We consider two algorithms [Clique Extracted Ontology
(CliXO), LocalFitness] that uniquely satisfy these requirements, com-
pared with methods including standard clustering. CliXO is a new ap-
proach that finds maximal cliques in a network induced by progressive
thresholding of a similarity matrix. We evaluate each method’s ability
to reconstruct the GO biological process ontology from a similarity
matrix based on (a) semantic similarities for GO itself or (b) three
-omics datasets for yeast.

Results: For task (a) using semantic similarity, CliXO accurately recon-
structs GO (>99% precision, recall) and outperforms other approaches
(<20% precision, <20% recall). For task (b) using -omics data, CliXO
outperforms other methods using two -omics datasets and achieves
~30% precision and recall using YeastNet v3, similar to an earlier ap-
proach (Network Extracted Ontology) and better than LocalFitness or
standard clustering (20—25% precision, recall).

Conclusion: This study provides algorithmic foundation for building
gene ontologies by capturing hierarchical and pleiotropic structure
embedded in biomolecular data.

Contact: tideker@ucsd.edu

1 INTRODUCTION

Ontologies have proven very useful for capturing and organizing
knowledge as a hierarchical set of terms and their interrelation-
ships. In biology, one of the most successful and Widely used
ontologies is from the Gene Ontology (GO) project, a major
effort to represent gene functions in cellular level processes
across organisms (Ashbumer et al., 2000; Gene Ontology
Consortium, 2001). G0 is ‘the default source of functional an-
notations for Virtually every experimental system and the gold
standard for measuring the success of bioinformatic methods’
(Dolinski and Botstein, 2013). It is extensively used by re-
searchers in a Wide variety of situations, such as understanding

 

*To Whom correspondence should be addressed.

the function of genes discovered in a Genome Wide Association
Study (Holmans et al., 2009; Wang et al., 2010) or computation-
ally predicting functions for uncharacterized genes (Pena-Castillo
et al., 2008; Yan et al., 2010).

An important feature of G0 is that the ontology structure is
constructed by a diverse team of scientists according to their best
abilities to curate the published scientiﬁc literature. As the
amount of cell biological literature increases, however, curating
the ontology structure has become a painstaking effort that is
proving difﬁcult to scale up and systematize (Alterovitz et al.,
2010). Moreover, human curation necessarily favors biological
entities that have been well studied and misses the large propor-
tion of cell biology that is not yet known or has not yet been
curated. For these reasons, it is not possible to directly learn
about an uncharacterized gene or discover a new function
using GO, and one cannot quickly assemble an ontology
model for a new organism, let alone a speciﬁc cell type or disease
state.

Recently, it has been shown by some of us that a G0 can be
inferred directly from molecular data as a complement to further
curation efforts (www.nexontology.org) (Dutkowski et al., 2013).
For ontology curators, this approach ‘is extremely valuable in
three ways. First. . .it ﬁnds connections missed by curators.
Second, it will save huge amounts of curation time by pointing
curators to the data that matter. Third, it provides a quality-
control check on the GO that is unbiased by the vagaries of
publication policies, as it is based only on the data themselves’
(Dolinski and Botstein, 2013). Furthermore, the ability to rapidly
generate ontologies from data opens up new possibilities for the
use of ontologies in general. ‘For example, data-driven ontolo-
gies generated from diseased and normal samples could be com-
pared. This would be a novel way to look at what goes awry in
particular disease states, providing the context and perspective of
complex, interrelated biological processes’ (Dolinski and
Botstein, 2013). Such an ontology model may also serve as the
basis for an intelligent, predictive agent, as one of us has
described elsewhere (Carvunis and Ideker, 2014). Despite these
possibilities inspired by an initial attempt (Dutkowski et al.,
2013) it remains an open question as to how best algorithmically
to infer an ontology from molecular data.

To understand the challenges involved in inferring an ontology
from data, we ﬁrst must recognize that ontologies contain both
syntactic information (terms and their structural relations) as
well as semantic information (relations between terms have
deﬁned meanings—in GO these include ‘is a’, ‘part of’ and ‘regu-
lates’ relations). Both our previous work and this work will focus
on inferring the syntactic information—the ontology terms, their
relations and the annotations of genes to terms. This syntactic
information is the most commonly used information by biolo-
gists using GO as a gold standard.

 

© The Author 2014. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/
by-nc/3.0/), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial

re-use, please contact journals.permissions@oup.com

112 ﬁhO'smumo[pJOJXO'sopemJogurorq/ﬁd11q IIIOJJ pepeolumoq

910K ‘09 isnﬁnV no :2

Inferring gene ontologies

 

G0 is structured as a rooted, directed acyclic graph (DAG),
where gene annotations propagate up the hierarchy from child
terms to parent terms through ‘is a’ and ‘part of’ relations. For
example, in the biological process (BP) branch, ‘M phase of
mitotic cell cycle’ and ‘interphase of mitotic cell cycle’ are
child terms beneath ‘mitotic cell cycle’. Since G0 is a DAG,
any term can have multiple parents and/or multiple children.
Allowing for multiple children per term is necessary to capture
the biological truth that many molecular machines have more
than two subunits, or that a BP such as the interphase of cell
cycle can be split into more than two phases (G1, S, G2).
Multiple parents are necessary to capture the biological prin-
ciple of pleiotropy—the reuse of genes and/or subunits, or the
classiﬁcation of a BP into multiple higher categories of process
(e.g. ‘Sulfur Amino Acid Metabolic Process’ is a child of both
‘Cellular Amino Acid Metabolic Process’ and ‘Sulfur
Compound Metabolic Process’). In order to faithfully infer an
ontology of genes like GO, we need an algorithm able to infer a
DAG.

In previous work, we developed a multistep algorithm for con-
structing a Network Extracted Ontology (NeXO), which infers a
DAG structure from data summarized in the form of a molecular
interaction or gene similarity network (Dutkowski et al., 2013).
This algorithm ﬁrst infers a binary tree using the HAC-ML al-
gorithm (Park and Bader, 2011). Then, splits without network
support are collapsed, creating nodes with more than 2 children.
Finally, a post-processing step searches for additional parent—
child relationships between existing nodes, allowing for a single
node to have multiple parents.

The NeXO algorithm does not use quantitative information
about gene interaction or similarity, i.e. it assumes an input net-
work for which the edges are unweighted. However, typical
genome-scale data such as gene expression correlation populate
a full matrix of similarity scores between pairs of genes where all
of the information is contained in the weights. While threshold-
ing these data is one way to interpret them as unweighted net-
works, this results in information loss not only below but also
above the threshold, as hierarchical structure embedded in the
weights is collapsed. Furthermore, when combining multiple
types of data (as will be undoubtedly required for construction
of a complete ontology of gene function), it is useful to give
greater weight to gene pairs which have evidence of similarity
in multiple datasets (Kim et al., 2014). Since the NeXO algorithm
is unable to use valuable information contained in the weights of
edges in an input network, it is instead forced to rely on setting a
proper threshold below which all information is ignored and
above which relative weights are lost.

The essence of the DAG inference problem is to detect com-
munities of genes that span a wide range of sizes/scales and can
nest hierarchically as well as share arbitrary subsets of members.
Furthermore, the algorithm should be able to construct a DAG
using the information contained in weighted networks, and it
should be capable of operating on a nearly complete, weighted
graph with a genome-scale number of nodes (thousands) and
edges (millions). A number of existing clustering algorithms ad-
dress parts of this challenge. For example, there are many com-
monly used hierarchical clustering algorithms which use
similarity or distance scores as input and infer a nested hierarchy
of clusters (Florek et al., 1951; Sneath and Sokal, 1973; Sokal

and Michener, 1958; Sorensen, 1948; Ward, 1963). These meth-
ods, however, rely on iterative joining of pairs of terms, resulting
in forced construction of a binary tree. Clusters cannot overlap
(i.e. have multiple parents for a single node) or have >2 children,
and the number of clusters inferred is ﬁxed at n —1 where n is the
number of terminal nodes.

There have recently been a handful of algorithms which con-
struct hierarchies with overlapping clusters, by creating a ﬁrst
level of overlapping clusters with terminal nodes and then com-
bining these base clusters into higher level clusters (Becker et al.,
2012; Kovacs et al., 2010; Kumpula et al., 2008; Sales-Pardo
et al., 2007). These algorithms all present solutions that allow
multiple parents and multiple children at the initial level of clus-
ters, and some operate on weighted networks. However, these
methods restrict each higher level cluster to having a single
parent. This aspect inherently limits the types of relations that
can be discovered by these methods.

Another relevant method has been proposed that hierarchic-
ally clusters links in a graph rather than edges (Ahn et al., 2010).
This method is quite ﬂexible and allows for each node in the
graph to appear in multiple clusters via participation in multiple
edges. Such a method still restricts the types of clusters it creates,
however. First, an edge can only participate in a single cluster at
each level of the hierarchy (although a pair of nodes may inci-
dentally participate in multiple clusters via other edges).
Secondly, the hierarchical clustering of the edges allows only
for binary joins between edges and therefore each lower level
cluster will be joined with exactly one other cluster at each
step. This process creates e —1 clusters, where e is the number
of edges in the input graph. While the original paper proposes a
method for determining a single optimal cut in the hierarchy for
determining clusters, how to determine all levels of the hierarchy
that are meaningful and not an artifact of construction remains
an open question.

The LocalFitness algorithm, which has recently been proposed
in the physics community, is to our knowledge the only previous
approach that constructs a DAG from an unweighted or
weighted network and has a principled way of determining
which clusters are robust (Lancichinetti et al., 2009). This
method constructs clusters at a given level in the hierarchy by
optimizing a ﬁtness function for each of many potentially over-
lapping clusters built out from multiple seed nodes. The ﬁtness
function includes a parameter that is tuned to ﬁnd clusters at
multiple levels of the hierarchy. Graph partitionings that are
stable across comparatively wide ranges of this parameter are
used.

Here we present a basic formulation of the ontology inference
problem followed by a description of a new method, called
Clique Extracted Ontology (CliXO), for ontology inference
based on progressive identiﬁcation of maximal cliques. We evalu-
ate CliXO in comparison with LocalFitness as well as several
other methods such as the NeXO algorithm and standard clus-
tering. Methods are evaluated based on their ability to recon-
struct the GO from two starting datasets: (a) pairwise semantic
similarities, which are derived directly from GO itself, and
(b) three different -omics datasets (genetic interaction proﬁle cor-
relation, gene expression correlation and an integrated -omics
dataset for yeast).

 

i35

112 ﬁhO'smumo[pJOJXO'sor1BmJOJurorw/2d11q IIIOJJ papeolumoq

910K ‘09 isnﬁnV uo ::

M.Kramer et al.

 

 

 
   
    

 

  

 

B H
A 0.6250625 0.25 0.25 0.25 0
B 0.625 0.25 0.25 0.25 0
C 0.75 0.25 0.25 0
0
C] Ontology Term
0 Gene (Terminal Node)
DO Has Multiple Parents
I Has >2 Children G 0-75
C
Threshold = 1 t = 0.75 t = 0.625

 

Q) 1319
CA) ®®® 6/

©® @(H) @(w

 

 

 

 

 

 

®©®®®©®®

 

 

 

 

 

Fig. 1. CliXO method. (A) An example ontology with genes A—H and terms 0—6. (B) Semantic similarity scores calculated from the ontology in (A).
(C) Example showing reconstruction of the ontology in (A) from the similarity scores in (B). As the threshold is decreased, edges that equal or exceed the
threshold are added to the graph. At each new threshold, maximal cliques in the graph, corresponding to terms are found and added to the inferred

ontology

2 METHODS

2.1 Basics

Deﬁne an ontology-graph as a weighted DAG G = [T , N, E, w, r] with the
following properties:

0 The nodes in G are terminal (set T; no outgoing edges), or non-
terminal (set N). Non-terminal nodes in the ontology are also
called terms. G has a single root r e N from which all nodes can
be reached.

0 Ultrametric property: a non-terminal node u in G has constant dis-
tance, denoted w(u), to all its terminal descendants, denoted by L(u).

0 Witness property: for non-terminal node u, and all terminal nodes
a ¢ L(u), there exists b E L(u) such that w(a, b)>2w(u).

o |G| is the total number of non-terminal nodes in G.

o For any pair of terminal nodes a, b, let w(a, b) denote the shortest
path between a, b in G.

0 Deﬁne a Least Common Ancestor lca(a, b) such that
w(a, b) = 2w(lca(a, b)).

Figure 1A shows an example of an ontology graph, with non-terminal
nodes 0,. . . , 6 and terminal nodes A, . . . , H. This model of an ontology
allows for the grouping of elements (terminal nodes) into coherent clus-
ters of elements (i.e. non-terminal nodes) that are closer to each other
than to other nodes based on pairwise distances between elements.

2.1.] The Ontology DAG reconstruction problem (perfect case)

INPUT: A set of terminal nodes (i.e. genes) T, and a distance matrix M
between all pairs in M (as shown in Figure 1B).

OUTPUT: An ontology-graph G with T as the set of terminal vertices and
for all a, b E T, w(a, b) = M(a, b).

The input distances M rarely satisfy the ontology distances perfectly
and therefore, in the imperfect case, we must compute the ontology DAG
that best represents M.

2.1.2 The Ontology DAG reconstruction problem (imperfect
case)

INPUT: A set of terminal nodes (i.e. genes) T, a distance matrix M be-
tween all pairs and a user-provided noise parameter or.

OUTPUT: An ontology-graph G with T as the set of terminal vertices, and
which maximizes |G| while satisfying the following:
(1) For all a, b E T, w(a, b): M(a, b).

(2) For non-terminal node u, and all terminal nodes a ¢ L(u), there
exists b e L(u) such that M(a, b)>2w(u) + or.

(3) For each non-terminal node u, there must be at least one pair of
terminal nodes a, b e L(u) for which 2w(u) + a<2w(v) for all v
with a, b E L(v), V75 u.

(4) For all u E N, w(u) = 2 maxal, E L(u) M(a, b)

 

i36

112 ﬁrosleumo[pJOJXO'soriemJOJurorw/2dnq Incl; papeolumoq

910K ‘09 isnﬁnV no 22

Inferring gene ontologies

 

2.1.3 Distance versus similarity scores We note that in many cases,
the relationship between terms is presented in the form of a similarity
matrix, rather than a distance matrix. The two are interchangeable for the
algorithms proposed below. For example, subtract the similarity scores
from a large constant to get a valid distance function between two terms.

2.2 CliXO algorithm

We consider a simple heuristic as described in Figure 1C. Consider an
undirected graph U with nodes 6 T and no edges. Let S be a stack of all
pairs (a, b) sorted by distances M (a, b), with the smallest value at the top.

 

Algorithm CLIXO (S)

 

Input: Stack S of sorted distances

Output: Non—terminal nodes in the ontology—graph
. CG = {}

. while (875 {})

. (a, b) = top(S); t = M(a, b)

. while (M(a, b) == t)

(a, b) = Pop(S)

Add edge (a, b) to U

. Ccur = Set of maximal cliques in U

. CG = CG U Ccur

. (CG forms the set of non—terminal nodes in G)

tomQONU'li-PUONH

 

Note that each maximal clique in U corresponds to a node of the
ontology graph, with an obvious hierarchy. We use an algorithm pro-
posed by Chiba and Nishizeki (1985) to compute all maximal cliques in
time O(m,u a(U)) where m is the number of edges in U, ,u is the number of
maximal cliques in U and a(U) is the arboricity of U (a(U)<n where
n = |T|). While output-efﬁcient, the number of cliques can be large.
Moreover, the algorithm may output the same cliques repeatedly.

We modify the algorithm above to maintain only informative maximal
cliques deﬁned as follows. At any time in the algorithm, a pair of terminal
nodes a, b is explained if a and b are both elements of a single clique which
is already in Cg. A clique is necessary if it contains a pair of terminal
nodes c, d which is not contained in any other single clique in Cour.
A clique C e Ccur is informative if it is both necessary and contains at
least one pair of non-explained terms. Only informative cliques are added
to C0.

Next, we check cliques dynamically for maximality and informative-
ness. Deﬁne N(a) as the set of vertices adjacent to a in U. Let C, represent
the set of maximal cliques in Ccur containing a. Consider Steps 5 and 6,
where (a, b) is popped off S and edge (a, b) is added to U. For each clique
C’ 6 Ca, we create a new clique C’ O N(b) U {b}. Similarly, for each clique
C’ e Cb, we will create a new clique C’ O N(a) U {a}. These are the only
new cliques. Each new clique Cnew is checked for maximality. If maximal,
add each Cnew to C611,, and remove from Ccur all cliques in C, or in Cb
that are contained in (i.e. a subset of) a Cnew. Finally, when we are ready
to increase the threshold [all (a, b) matching the current threshold have
been popped], we check all cliques in Ccur and retain only the informative
ones. CliXO with dynamic checking for maximality and informativeness
can compute all informative maximal cliques in O(Mny) where M is the
number of non-zero edges in M, n = |T| and y is the number of inform-
ative cliques in the ﬁnal output G. Practically, y << ,u, where ,u is the total
number of all maximal cliques at each unique t in U, and this results in
signiﬁcant performance increase.

2.2.] Imperfect case In the imperfect case, the only change is in Step 8
of the CliXO algorithm. Instead of adding all informative cliques in Ccur
to CG each time a new threshold is reached, we add to CG only those
informative cliques C in Ccur for which maxa’b e C M(a, b) < t — or.

This algorithm can perfectly distinguish between signal and noise when
a is smaller than s, the smallest distance between any child—parent node
pair in the ontology and larger than a noise value n(G), determined by the
following procedure. For each term u e G, order by value all M(a, b)
where a, b e u. n(u) for a non-terminal node u is the maximum difference
between adjacent values in this ordered list and n( G ) = maxue N n( u ). It
is not possible to directly determine n(G) without knowing the true ontol-
ogy structure, but it is a useful concept for understanding or. On a con-
ceptual and practical level, n(G) can be estimated as roughly 2x the
standard error of measured pairwise distances (6. g. when the experiments
used to measure distance are replicated both technically and biologically).
a can be set to this estimated n(G).

It may not always be possible to set a so that n(G)<or<s because
sometimes n(G) >s. In this case, if or<n(G), it will result in the creation
of extraneous terms that are a subset of a ‘real’ term. If or>s then any
‘real’ child node c that is close to its parent node p, i.e. 2(w(p) — w(c)) <or,
will not be included in the ontology. One practical strategy for dealing
with this case is for the user to focus on a particular small, well-known
section of the ontology (e.g. a molecular machine like the proteasome)
and observe it over various levels of or. If many extraneous terms seem to
be being created, then or is likely too low. If known levels of the hierarchy
are being collapsed, then a is likely too high.

2.2.2 Missing edges (false negatives) We expect that in real mo-
lecular data, there will be a number of missing edges—i.e. measurements
for a, b e Twhere M (a, b) >> w(a, b) in the ‘true’ ontology. These missing
edges will cause splitting of maximal cliques into highly overlapping
smaller cliques. For example, a ‘true’ term of size k with just one missing
edge in the measured distances M will result in two smaller terms of size
k + 1 in the DAG inferred from M.

2.2.3 Algorithm: Missing Edges We maintain the properties of the
noisy measurements case. However, we now add a user-defmed param-
eter ,8 and the ability to edit M, the input distance matrix, when we infer
that an edge is likely missing (i.e. is a false negative). ,8 is a parameter
where 0 < ,8 5 1. Two cliques C, and  are considered highly overlapping
by the algorithm if for all a e C, U C],

WM) 0 (Ci U Cj)|

> .
|C,UCj|—1 4’

We modify the CliXO algorithm, again in Step 8. Before an informative,
maximal clique C, e Ccur is added to C0, we check all other  E Ccur for
high overlap with C,. For any  found to be highly overlapping with C,,
we also check for any Ck e Ccur that are highly overlapping with C].
Recall w(C) = maxabec M(a, b). For all such highly overlapping pairs
of cliques C, and C], we then set M(a, b) = max(w(C,), w(C,)) for all a, b e
(C, U C,) with M(a, b)>max(w(C,), w(C,)). We add all edges adjusted in
M to U and update C611,.

2.2.4 Other algorithms considered We evaluate ontologies inferred
using the NeXO algorithm (Dutkowski et al., 2013), the Local Fitness
Algorithm (Lancichinetti et al., 2009), and several standard hierarchical
clustering algorithms including the Unweighted Pairwise Group Method
(UPGMA; Sokal and Michener, 1958), the Weighted Pairwise Group
Method WVPGMA; Sneath and Sokal, 1973), Ward’s minimum variance
method Ward, 1963), Complete Linkage (Scrensen 1948), and Single
Linkage (Florek et al., 1951).

2.3 Evaluation of reconstructed ontologies

2.3.1 Ontology alignment Ontologies were aligned as in Dutkowski
et al. (2013). Brieﬂy, given two ontologies 01 with n1 terms and 02 with n2
terms, an ontology alignment A is a mapping of terms between ontologies
such that each term in 01 maps to at most one term in 02 and vice versa.
Term mapping in our alignment procedure is evaluated using a score

 

i37

112 /810's112umo[pJOJXO'soiiemJOJuioiw/2dnq Incl; popcorn/hog

910K ‘09 isnﬁnV no 22

M.Kramer et al.

 

function that considers the similarity of the sets of genes assigned to terms
(intrinsic similarity) and the similarity of the ontology hierarchy sur-
rounding each term (relational similarity). Each pair of terms which is
aligned receives an alignment score ranging from 0 to 1 where 1 represents
identity in both intrinsic and relational similarity.

To calculate false discovery rate (FDR) of term alignment, we ﬁrst
create n ontologies with the same structure as the inferred ontology 0, but
with all gene labels randomly permuted. The FDR of a term alignment at
a given score t is then:

n
h 2 N Ri (t)
_ i=1
FDR(t) — T0
Where N R,(t) is the number of terms in the random permutation i that
have an alignment score 2t, and N(t) is the number of terms in the
ontology O, that have an alignment score 2t. Terms are binned by size
for the FDR computation, and we set a minimum score threshold value
t 3 0.1 for large terms and higher threshold values for small terms so as to
maintain an FDR <5% within each size group.

The alignment procedure also respects the preservation of structural
relationships across ontologies being aligned. It does this by ensuring that
there are no conﬂicts between individual mappings in the ﬁnal alignment.
There are two versions of the alignment—in the permissive version, a
conﬂict exists between mappings (e1, e2) and (e1’, e2’) where e1, e1’ 6 01
and e2, e2’ 6 02 if there is a parent—child criss-cross—that is, either e1 is a
descendant of e1’ in 01 and e2 is an ancestor of ez’ in 02, or e1’ is a
descendant of e1 in 01 and ez’ is an ancestor of e2 in 02. In the strict
version, there is a conﬂict if e1 is a descendent of e1’ in 01 and e2 is not a
descendent of ez’ in Oz. The permissive version places most value on the
alignment between individual nodes, whereas the strict version also re-
quires that the relations between nodes are preserved.

2.3.2 Precision and recall of inferred ontologies For evaluating
inferred ontologies, we ﬁrst align the inferred ontology I to the gold
standard ontology G, in our case GO. This gives us an alignment A.
We then determine precision and recall as

precision= ﬂ, recall = Ill
III |G|

where |A| is the number of terms aligned with t2 0.1 and FDR <5%.

3 RESULTS AND DISCUSSION

3.1 Ontology inference from semantic similarity

We began by testing performance using input similarity data
that are perfectly consistent with the target ontology. For this
task, we calculated the Resnik semantic similarity (Resnik, 1995)
of all gene pairs in the BP branch of GO to form a complete,
weighted graph. Using these data, CliXO was able to nearly
identically infer the original ontology, with >98% of BP terms
identically reconstructed (Fig. 2A) and 100% of inferred terms
aligned to a term in BP (Fig. 2B). The other algorithms tested,
including several common hierarchical clustering methods which
build trees and a method for directly creating a DAG (Local
Fitness), struggled with this task by comparison. The Local
Fitness algorithm, while capable of operating on a complete,
weighted graph, struggles to distinguish the borders of terms,
instead joining true terms into larger groups which do not recap-
itulate the true ontology (recall <5 %, precision <30% by align-
ment). The hierarchical clustering methods behave similarly to
each other (with the exception of single linkage which performs

worse). While these methods often reconstruct BP terms (recall
of ~20% terms identical, ~70% terms aligned), these methods
suffer from the creation of numerous extra terms. Since they
create a binary tree, they are forced by construction to create
terms even if they are not supported by the data. This greatly
damages the precision of these methods. The ontologies created
by these methods contain roughly 3x as many terms as the true
ontology. CliXO, on the other hand, ﬁnds the borders of each
term from the data—it is not forced to create terms where they
do not exist.

The NeXO algorithm, while not able to operate on a complete
graph, can be run on these data by applying a threshold at a
semantic similarity value and keeping only edges above this
threshold. While this results in information loss, especially
about larger ontology terms and substructure of smaller terms,
NeXO is capable of at least approximating many terms (~40%
recall, ~70% precision by alignment) when using a network with
edges consisting of the top 10000 semantic similarity scores
(these top scores actually perfectly specify the terms of size 10
genes or fewer, as the vast majority of edges in the semantic
similarity network are due to larger terms). Still, the terms pro-
duced by the NeXO algorithm are only an approximation of the
true terms (precision, recall <10% by identity). Furthermore, the
precision slips dramatically with almost no gain in recall as
the threshold is lowered and NeXO uses more edges (recall
42%, precision 62% by alignment using the top 20 000 edges;
recall 43%, precision 49% by alignment using the top 100 000
edges).

The 83 GO BP terms not identically reconstructed by CliXO
are those where information loss occurs in the conversion to
semantic similarities. There are two such possible cases. First,
two highly overlapping terms are indistinguishable from one
larger term if the genes in the overlap already belong to a term
with higher similarity. For example, if {a, b, c, d} = T1,
{a, b, c, e} = T 2, {d, e} e T 3, then CliXO cannot distinguish T,
from T2. Therefore, one term with {a, b, c, d, e} will be created.
Second, a term is ‘invisible’ in the semantic similarity data if all
gene pairs in that term also belong to higher similarity terms.
CliXO cannot discover these ‘invisible’ terms.

3.2 Accounting for noise

Of course, we cannot expect to have experimental data that
exactly model a semantic similarity measure. We expect three
types of noise in experimental data—false positives, false nega-
tives and Gaussian noise.

The simplest of these cases is false positives (cases where a gene
pair is falsely assigned a high similarity). Assuming that false
positives are randomly scattered throughout the network, we
can expect that these false positives are unlikely to form and/ or
complete a clique. Rather, these will lead to the creation of small
maximal cliques, usually containing only the two genes with the
false positive measurement between them. In some cases, a par-
ticularly well-placed false positive may create an extraneous
clique of size 3. For this reason, we choose to ignore terms of
size 2 and 3 when our algorithm is run on experimental data.

Gaussian noise in measurement will cause gene pairs that all
belong to the same ontology term to have slightly different mea-
sured similarities. To simulate this, we added Gaussian noise
centered at 0 with varying SDs to the calculated Resnik semantic

 

i38

112 /810's112umo[pJOJXO'soi112u1101uioiq//2d11q moxj popcorumoq

910K ‘09 isnﬁnV uo 22

Inferring gene ontologies

 

 

 

A 1.0- O B 1.0
0.8- 0.8
506— _§06
.‘2 - .‘2
§O.4- §o_4
D. — D.
0.2— 0.2
_ I m
O'O—IV I I I I I I I I I I 0'0
0.0 0.2 0.4 0.6 0.8 1.0

Recall

 

’ o CliXO
l NeXO Alg
I oUPGMA
n WPGMA

ASingle
x Id-

V +Complete

A x Ward

 

v LocalFitness

|||||||||||
0.0 0.2 0.4 0.6 0.81.0

Recall

Fig. 2. Inferring an ontology from semantic similarity. Precision—recall plots for ontologies inferred from GO BP Resnik semantic similarities. True
positive inferred terms are identical (A) or aligned O3) to a G0 BP term using permissive alignment

similarities and then inferred the ontology. Without the or par-
ameter (or = 0), CliXO incorrectly infers many intermediate
terms (leading to low precision, Fig. 3A) in addition to the cor-
rect terms (leading to high recall, Fig. 3B). When the or parameter
is included and optimized (Section 2.2.1), then the CliXO algo-
rithm is able to distinguish signal from noise. This allows for
stable performance of CliXO even in the presence of noise. It
should be noted that the median signal in this ontology is actu-
ally two orders of magnitude above the minimum signal, so even
at a relative noise of 0.1, some terms in the ontology are already
completely washed out due to noise. For all values where noise is
less than minimum signal, CliXO with the or parameter is able to
perfectly reconstruct the input ontology.

False negatives are cases where two genes belong to the same
term but the edge between them either does not exist or has an
extremely small similarity. The effect of a missing edge from a
clique of size k genes is to split that clique into two smaller
cliques of size k—l genes that share k— 2 genes. To account
for these missing edges, our method incorporates the parameter
,3 which causes the algorithm to ﬁnd and merge highly overlap-
ping cliques (Section 2.2.3). Without this parameter (equivalent
to ,3 = 1), CliXO immediately infers far too many terms, result-
ing in very low precision even with only 1—10% of edges missing
(Fig. 3C). With ,3 = 0.5, CliXO is able to maintain very high
precision and recall even with large percentages of edges removed
(precision and recall remain >80% with half of all edges removed
and >50% with 80% of all edges removed, Fig. 3C, D). It should
be noted that there is a slight hit in recall by using ,3 = 0.5 when
no edges are removed—this is because there are a small number
of real terms in the ontology which qualify as highly overlapping,
and these terms are erroneously merged. Still, recall remains
~90% with precision near 100%.

A thought experiment may reveal why the algorithm is robust
with a ﬁxed ,3 over a wide range of missing edges. The operation
to infer missing edges is based on ﬁnding pairs of highly over-
lapping cliques and ﬁlling in missing edges between them. If a
single edge is missing from an otherwise complete clique C, this
will create two highly overlapping cliques C1, C2 C C which will
each contain one unique element. C1 and C2 will be merged by
the algorithm to create C. If a second edge is removed which does

 

' I

 

 

 

 

 

 

0'.0 ' 0:2 ' o'.4' 016' 0'.8' 1'.0
Fraction of Edges Removed

-o- cnxo, B = 0.5
-o- cnxo, B = 0

1.04103 102 101 i 10
Relative Noise

IO- CliXO, d optimized
I.- CliXO, 01 = 0

1.0'
0.9-
0.8-

U

 
 
 

1.0
0.9

0.8

0.7- 0.7
a 0.6- a 0.6
8 0.5- 8 0.5
'1 0.4- '1 0.4
0.3- 0.3
0.2- 0.2
0.1- 0.1
0- - 0

 

 

 

 

0:0 ' 0.'2 ' 0'.4 ' 0:6. 018' 1:0
Fraction of Edges Removed

104103 102 101 1 10
Relative Noise

Fig. 3. CliXO with Noise. Precision (A, C) and recall (B, D) for ontology
inferred from Resnik semantic similarities beneath and including CC
Biogenesis BP term (GO:0044085). True positives by strict alignment.
Varying levels of Gaussian noise added to (A, B) or edges removed
from (C, D) semantic similarity measure. Relative noise = l/Median
Signal to Noise ratio. Error bars represent standard error over 10
tested networks with random noise or edges removed per point

not share a vertex with the ﬁrst, then these two cliques will now
each split into two cliques (for a total of four cliques—C11, C12 C
C, and C21, C22 C C2). Even if ,3 is set so that C11 is not con-
sidered highly overlapping with C21 or C22, still C11 will ﬁrst be
joined with C12 to form C, while C21 and C22 are joined to form
C2. C1 and C2 will then be found to be highly overlapping and

 

i39

112 /810's112umo[pJOJXO'soI112u1101quIq//2d11q moxj popcorumoq

910K ‘09 isnﬁnV uo 22

M.Kramer et al.

 

are therefore joined to make C. As more edges are removed from
the original clique C this will simply lead to extra rounds of
clique merging before C is recovered (this breaks down a bit as
missing edges share vertices, but with a ,3 set appropriately low
this can be overcome). Because of this thought experiment and
the experimental results in Figure 3C and D where the algorithm
displays robustness to a wide range of missing edges with
,3 = 0.5, we have set ,3 = 0.5 for all experiments using -omics
data. We recommend this setting for all use cases where missing
edges are expected.

3.3 Ontology inference from -omics data for yeast

With CliXO performing well even in the presence of noise and
signiﬁcant levels of false negatives, we turned to the problem of
inferring an ontology directly from experimental data. For this
purpose, we used three -omics datasets—genetic interaction (GI)
proﬁle Pearson correlations as provided by Costanzo et al.
(2010), gene expression (GE) proﬁle correlations across all
arrays in the Stanford Microarray Database (Hubble et al.,
2009) and YeastNet v3 (Kim et al., 2014), a recently released
functional gene network which combines evidence from multiple
experimental sources to provide a weighted functional relation-
ship between genes. All three of these datasets provide quantita-
tive weights that correlate with the semantic similarities
calculated from GO BP (Fig. 4A, C and E).

We noted that in all three of these datasets, there is a tight and
strong correlation with the GO BP semantic similarity values at
the very highest end. However, this tight correlation loosens as
the edge weights in the -omics data decrease, as seen by wider
ranges of scores and also several consecutive levels of scores in-
distinguishable from the lowest scores. This indicates increasing
levels of false positives as the edge weights decrease. At this point
we note that the CliXO algorithm outputs terms in order of
decreasing weight, where a term weight is equal to the lowest
similarity edge between any two genes in that term. This, com-
bined with the decreasing reliability of the -omics data as the
edge weights decrease, means that a single run of CliXO with a
ﬁxed or outputs terms in order of reliability, with the most reliable
ﬁrst. As such, a precision—recall curve can be calculated for a
single CliXO ontology where a single point represents the align-
ment to GO of a CliXO ontology containing all terms above a
given term weight. These precision—recall curves for CliXO at a
ﬁxed or are shown in Figure 4B, D and F, with the top left points
representing a term weight equivalent to the top 10 000 edges and
the bottom right point representing all terms for GI and
YeastNet v3 and a term weight equivalent to the top 100 000
edges in the GE network.

We applied CliXO and several other algorithms to the prob-
lem of inferring the ontology from each of these three -omics
datasets and aligned the resulting ontologies to GO BP. We
report precision—recall curves for a range of or values, where
lower or creates more terms and results in higher recall but at
the cost of lower precision. For genetic interaction proﬁle cor-
relations, CliXO was the clear winner, with all or values resulting
in precision—recall curves with higher precision—recall (50—10%,
3—8% by strict alignment) than competing methods including
LocalFitness (15% precision, 5% recall), UPGMA (8%, 6.4%)
and NeXO (10%, 5% at threshold of top 10000 edges).

 

 

 

 

 

A B
£438 06 .0 = 0.05
'EE 6
3g 80.4 d = 0.03
mm E q = 0.02
0.2 4 8 Ow = 0.015
“3E 0:02 ‘01 = 0.01
022
o a, I 0a = 0.005
“)0 0'0 I I I I I I
0.0 0.2 0.4 0.6 1.0 0.00 0.02 0.04 0.06 0.08 0.10
GI Profile Correlation Recall
c be 1- D 0.6
ﬂ : T i
gs 6 T T . I 50.4 «I = 0.01
m54 TTTTT;:; I a
-- o =
$53 I I I : : I II? . $0.2 0‘ 0'015 .q=0.005
Om J. 0":
0.22 IIIIII' M1
I
030 I I I I I I I I 0.0
0.74 0.80 0.86 0.92 0.98 0.00 0.01 0.02 0.03
E GE Profile Correlation F Recall
3.8 T 'r 'r 'r 'r 0,5
-: T I I I
‘a‘s6 TT:TI- I! 0.4
"’E T ' ' I ' ' J. C
$27) T I ' I | I I I .903
04 1. : I ' I I I I 
 I | I ' I I : J. 90.2
 'llll -~ 
0% I . . :1;
U) 0 I-L'J-I-L'J-IL'J-IJI' I ' I ' I  I I I I I I
0 1 2 3 4 5 6 0.0 0.1 0.2 0.3 0.4 0.5

YeastNet v3 Similarity Score Recall
OOOCIiXO o UPGMA I:I WPGMA +Complete
I NeXO Alg V LocalFitness ASingle x Ward

Fig. 4. Inferring an Ontology from -omics data. (A, C, E) Pairwise simi-
larity scores from data versus BP Resnik Semantic Similarity.
A = Genetic Interaction (GI) proﬁle Pearson correlation as provided
by Costanzo et al. (2010); C = Gene expression (GE) Pearson correlation
from Stanford Microarray Database (SMD); E = YeastNet v3. (B, D, F)
Precision—recall plot for ontologies reconstructed using various methods
and evaluated by strict alignment to GO BP. Data from GI proﬁle cor-
relation (B), GE proﬁle correlation (D) or YeastNet v3 similarity (F).
CliXO with varying or is shown by color change. At a given or parameter,
the precision—recall curve for the CliXO ontology (terms ordered by
weight at which they are inferred) is shown. NeXO results are shown
with varying threshold edge weights for generating an unweighted input
network

Next, several algorithms were run on the Pearson correlations
of gene expression proﬁles across all arrays in the Stanford
Microarray Database. All methods scored relatively poorly for
the recall of GO BP terms (<3 %). This is likely because these
proﬁles were calculated across all arrays, causing information
from individual experiments (which each represent relatively
few arrays of the total) to be lost. The CliXO algorithm, how-
ever, was the only algorithm capable of separating the informa-
tion present from noise, producing precision as high as >50%
(Fig. 4D) for some parameter settings, greatly outperforming
other algorithms (<10% precision).

We next applied all algorithms to YeastNet v3. In this test, all
versions of CliXO (precision 17—41%, recall 31—21% by strict
alignment) and the NeXO algorithm with an optimized threshold
of the top 20 000 edges (precision ~24%, recall ~28% by strict
alignment) outperformed other methods tested (Fig. 4F).

 

MO

112 /810's112umo[pJOJXO'soI112u1101quIq//2d11q moxj papeolumoq

910K ‘09 isnﬁnV uo 22

Inferring gene ontologies

 

 

 

A B

> >

:I: :I: 10

L a, L

g 8 .c—E g °~o% \9’0

 E  E ./O 60 0—0

(0.9 (I) an

-I—- H—

OJm mm 20

9.9 8 g

a: a: I I I I I
.001 .005 .01 .015 .02

-20k -10k Ref 10k 20k
Edges Relative
to Reference
OCIiXO, Identical to Reference OCIIXO, Identical to Reference
I NeXO, Aligned to Reference OCliXO, Aligned to Reference
I NeXO, Identical to Reference

Alpha

Fig. 5. Stability of NeXO and CliXO with respect to parameters.
(A) Both NeXO and CliXO algorithms run with varying numbers of
edges from YeastNet v3. Reference is best performing result (20k for
NeXO, 30k, or = 0.01 for CliXO). Percent similarity deﬁned as number
of terms either identical or aligned strictly divided by the number of terms
in the smaller of the two ontologies produced. (B) CliXO run with vary-
ing levels of or. Reference is or = 0.01

We note that while NeXO with an optimized threshold par-
ameter is capable of matching CliXO in precision and recall, the
performance of the NeXO algorithm is much more sensitive to
this parameter choice than CliXO is to the choice of either or or a
term weight threshold. In fact, the performance of the NeXO
algorithm degrades quite rapidly as its threshold is loosened
(Fig. 4F). Furthermore, the NeXO algorithm is quite inconsist-
ent in its output as the threshold is varied. When compared with
the best NeXO using the top 20 000 edges in YeastNet v3, no
other versions of NeXO reproduced >4% of the terms exactly,
and less than half of the terms aligned strictly (Fig. 5A). Without
a reliable gold standard, it would be quite difﬁcult to set this
threshold for NeXO reliably.

CliXO, on the other hand, simply offers the user a tradeoff
between precision and recall with its parameters. As or increases,
so does precision at the cost of decreased recall. Furthermore, the
CliXO algorithm is quite consistent as its parameters are varied,
in contrast to the NeXO algorithm. As more terms are con-
sidered (lower edge weight threshold), all previously created
terms are unaffected (Fig. 5A). Varying or also preserves the ma-
jority of terms, with >60% identical and >80% aligned strictly to
CliXO with or = 0.01 (Fig. 5B). This behavior allows the user to
have conﬁdence that CliXO is producing reliable output over a
range of parameter settings. Furthermore, the effect of tuning
these parameters is predictable.

The CliXO inferred ontology with or = 0.01 infers 1833 terms
from the top 30 000 edges in YeastNet v3 with a precision of
30% and a recall of 25% by strict alignment. The resulting struc-
ture is in fact a DAG and not a tree, as many nodes have mul-
tiple parents (Fig. 6A) and multiple children (Fig. 6B). Genes are
more likely to be annotated directly to multiple parents (range
1—12, median 2) than internal nodes (range 1—3, 32 have multiple
parents). Created terms range is size, roughly following a power
law distribution as expected (Fig. 6C). The inferred ontology
aligns not only to terms in the BP branch of GO, but also to
the cellular component (CC) and Molecular Function (MF)

 

 

 

B
.lnternal Node
3000 ,_.
E g 500-
:5
o
8 2000 o
1000 I 100'
0 '--____ if 10. -
125215éiéé101'11'2 1 51020 5'0 100
Num Parents Num Children
C D
1000-
E’ 500-
:5
o
O
100-
10-

 

 

1'0 2'0010'002'000 4'000
Term Size

 

Fig. 6. CliXO Ontology from YeastNet v3. (A—C) Statistics about CliXO
inferred ontology with or = 0.01, including number of parents (A) and
number of children per non-terminal node (B) and distribution of term
sizes inferred (C). (D) Number of terms in CliXO inferred ontology with
a = 0.01 aligned strictly with FDR <5% against all three branches of GO
(CC, MF, BP). Unaligned terms in outer circle

branches. Overall, 44% of the 1833 terms in this inferred ontol-
ogy align to at least one of the branches in G0 at an FDR of
<5% using strict alignment (Fig. 6D).

It should be noted that YeastNet v3 learns functional relation-
ships from data in a supervised fashion, with G0 BP term
comembership serving as the gold standard for training.
Therefore, there is some circularity in reconstructing GO BP
from this network. However, comparisons between reconstruc-
tion methods are still valid. Furthermore, the training takes place
only at the level of the weight for each experiment type, so there
is ample opportunity for a gene pair to score highly despite no
known relationship in GO.

3.4 Further applications of CliXO algorithm

Here we have explored the de novo construction of ontologies
from pairwise similarity data and compared several potential
algorithms to do so. We have also introduced a new algorithm,
CliXO, which performs well at this task and also may have fur-
ther applications. First, CliXO may be useful as a way to com-
bine manually curated ontologies with -omics data to create an
updated ontology. For example, semantic similarities calculated
from a manually curated ontology could be adjusted based on
support in -omics data, followed by reconstruction of the ontol-
ogy using CliXO. The updated ontology could then be aligned to
and compared with the original ontology, revealing areas where -
omics data supports changes to the original ontology.
Furthermore, CliXO can be viewed as a generic algorithm to
convert pairwise similarity measurements between individual

 

M1

112 /810's112umo[pJOJXO'soI112u1101quIq//2d11q moxj papeolumoq

910K ‘09 isnﬁnV uo 22

M.Kramer et al.

 

entities into a hierarchical DAG where terms represent groups of
entities which are similar to each other and a single entity may
belong to more than one term. The exact meaning of the result-
ing structure will change depending on the similarity measure-
ment used, but in general there will be an intuitive understanding
of the result. For example, one could take a similarity measure-
ment between cancer patients’ genomes and then use the CliXO
algorithm to construct a hierarchical DAG where each term rep-
resents a group of patients that are genetically similar to each
other—i.e. genetic subtypes of cancer. As another example, one
could take measurements of connection similarity in a social
network and use CliXO to discover social groups in this network.
We leave these applications for future work.

4 CONCLUSION

Here we have explored the requirements for inferring an ontol-
ogy from a similarity matrix and available methods for doing so,
as well as proposed a new method, CliXO. We found that CliXO
outperforms other methods when a reliable similarity matrix is
available. When using -omics data, we found that CliXO outper-
forms other methods on two of three datasets tested and ties the
NeXO algorithm on the third, where both were able to success-
fully infer an ontology similar to GO BP. Furthermore, CliXO
proved signiﬁcantly more stable than NeXO to changes in par-
ameters. This study provides the algorithmic foundation for
building gene ontologies by capturing hierarchical and pleio-
tropic structure embedded in biomolecular data.

Funding: National Resource for Network Biology and the
Cytoscape Project (National Institutes of Health grants
P41GM103504 and R01GM070743); Department of Defense
(DoD) through the National Defense Science & Engineering
Graduate Fellowship (NDSEG) Program (to M.K.). VB was
supported in parts by grants from the National Science
Foundation (CCF-1115206 and IIS-1318386), and from the
NIH (U54 HL108460, 1P01HD070494).

Conflict of Interest: none declared.

REFERENCES

Ahn,Y.Y. et al. (2010) Link communities reveal multiscale complexity in networks.
Nature, 466, 761—764.
Alterovitz,G. et al. (2010) Ontology engineering. Nat Biotechnol, 28, 128—130.

Ashbumer,M. et al. (2000) Gene ontology: tool for the uniﬁcation of biology. The
Gene Ontology Consortium. Nat Genet, 25, 25—29.

Becker,E. et al. (2012) Multifunctional proteins revealed by overlapping clustering
in protein interaction network. Bioinformatics, 28, 84—90.

Carvunis,A. and Ideker,T. (2014) Siri of the cell: what biology could learn from the
iPhone. Cell, 157, 534—538.

Chiba,N. and Nishizeki,T. (1985) Arboricity and subgraph listing algorithms.
SIAM J. Comput, 14, 210—223.

Costanzo,M. et al. (2010) The genetic landscape of a cell. Science, 327, 425—431.

Dolinski,K. and Botstein,D. (2013) Automating the construction of gene ontologies.
Nat Biotechnol, 31, 34—35.

Dutkowski,J. et al. (2013) A gene ontology inferred from molecular networks. Nat
Biotechnol, 31, 38—45.

Florek,K. et al. (1951) Sur la liaison et la division des points d’un ensemble ﬁni.
Colloq. Math, 2, 282—285.

Gene Ontology Consortium. (2001) Creating the gene ontology resource: design and
implementation. Genome Res, 11, 1425—1433.

Holmans,P. et al. (2009) Gene ontology analysis of GWA study data sets provides
insights into the biology of bipolar disorder. Am. J. Hum. Genet, 85, 13—24.

Hubble,J. et al. (2009) Implementation of GenePattern within the Stanford
Microarray Database. Nucleic Acids Res, 37, D898—D901.

Kim,H. et al. (2014) YeastNet v3: a public database of data-speciﬁc and integrated
functional gene networks for Saccharomyces cerevisiae. Nucleic Acids Res, 42,
D731—D736.

Kovacs,I.A. et al. (2010) Community landscapes: an integrative approach to deter-
mine overlapping network module hierarchy, identify key nodes and predict
network dynamics. PLoS One, 5, el2528+.

Kumpula,J.M. et al. (2008) Sequential algorithm for fast clique percolation. Phys.
Rev. E Stat. Nonlin. Soft Matter Phys, 78, 026109.

Lancichinetti,A. et al. (2009) Detecting the overlapping and hierarchical community
structure in complex networks. New J. Phys, 11, 033015.

Park,Y. and Bader,J.S. (2011) Resolving the structure of interactomes with hier-
archical agglomerative clustering. BM C Bioinformatics, 12 (Suppl. 1), S44.
Pena-Castillo,L. et al. (2008) A critical assessment of Mus musculus gene function

prediction using integrated genomic evidence. Genome Biol, 9 (Suppl. 1), S2.

Resnik,P. (1995) Using information content to evaluate semantic similarity in a
taxonomy. Int Joint Conf. Artif., 1, 448—453.

Sales-Pardo,M. et al. (2007) Extracting the hierarchical organization of complex
systems. Proc. Natl Acad. Sci. USA, 104, 15224—15229.

Sneath,P.H. and Sokal,R.R. (1973) Numerical Taxonomy. The Principles and
Practice of Numerical Classification. W. H. Freeman, San Francisco, USA.
Sokal,R.R. and Michener,C.D. (1958) A statistical method for evaluating
systematic relationships. The University of Kansas Scientific Bulletin, 38,

1409—1438.

Sorensen,T. (1948) A method of establishing groups of equal amplitude in plant
sociology based on similarity of species and its application to analyses of the
vegetation on Danish commons. Biol. Skr., 5, 1—34.

Wang,K. et al. (2010) Analysing biological pathways in genome-wide association
studies. Nat Rev. Genet, 11, 843—854.

Ward,J.H. (1963) Hierarchical grouping to optimize an objective function. J. Am.
Stat. Assoc, 58, 236—244.

Yan,H. et al. (2010) A genome-wide gene function prediction resource for
Drosophila melanogaster. PLoS One, 5, 612139.

 

i42

112 /810's112umo[pJOJXO'soI112u1101quIq//2d11q moxj papeolumoq

910K ‘09 isnﬁnV uo 22

