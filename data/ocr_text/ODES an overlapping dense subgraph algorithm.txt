Vol. 26 no. 21 2010, pages 2788-2789
APPS NO  doi: 10. 1093/bioinformatics/btq514

 

Gene expression

Advance Access publication September 9, 2010

ODES: an overlapping dense sub-graph algorithm

James Long” and Chris Hartman2

1International Arctic Research Center and 2Department of Computer Science, University of Alaska Fairbanks,

Fairbanks, AK 99775, USA
Associate Editor: Trey Ideker

 

ABSTRACT

Summary: Enumeration of the dense sub-graphs of a graph is
of interest in community discovery and membership problems,
including dense sub-graphs that overlap each other. Described
herein is ODES (Overlapping DEnse Sub-graphs), pthreads
parallelized software to extract all overlapping maximal sub-graphs
whose densities are greater than or equal to a specified cutoff density
of at least 1/2.

Availability and Implementation: http://dense.sf.net

Contact: jlong@alaska.edu

Received on July 6, 2010; revised on August 23, 2010; accepted on
August 31, 2010

1 INTRODUCTION

Algorithms that infer community membership are important in a
number of network problems (Adamcsek et al., 2006; Hu et al.,
2005; Palla et al., 2005). In an algorithm like CODENSE (Hu
et al., 2005), mRNA interaction maps are generated from microarray
data and represented as graphs, where vertices are mRNAs and
edges are expression correlations. One is interested in enumerating
those groups of mRNAs that have high—correlated expression over
different conditions, suggesting that proteins produced from such
mRNAs interact with one another in biological modules. Modules
have high connectivity between members, and thus would form
dense sub— graphs within a map. mRNAs belonging to more than one
module lie in the intersection of dense sub—graphs, and algorithms
that delineate the modules must be able to distinguish overlapping
dense sub—graphs.

We describe herein an exact algorithm to ﬁnd, within some large
graph, overlapping maximal dense sub—graphs whose densities are
greater than or equal to a speciﬁed cutoff density of at least l/2,
where ‘density’ of a graph with e edges and n vertices is deﬁned as
the number of edges divided by the total number of possible edges,
i.e. 2e/n(n— l), and where ‘maximal’ denotes that the inclusion
of an additional vertex would lower the density below the cutoff.
The algorithm constrains the brute force search—space, yielding
acceptable performance on dense subgraphs of 20 vertices.

2 METHODS
2.1 Theory

We prove a theorem that any connected graph with three or more vertices and
density at least l/2 contains a vertex whose removal neither disconnects the
graph, nor diminishes its density. Since the resulting graph will be connected

 

*To whom correspondence should be addressed.

graph G

Fig. 1. Cut vertex v.

and have density at least as large, it qualiﬁes for inductive rounds of vertex
removal consistent with the theorem, which may continue until there is a
single—edge graph remaining, which has density 1. The algorithm to discover
dense sub—graphs in some larger graph is based upon reversing this procedure
to build up the dense subgraphs from single—edge sub—graphs of the larger
graph.

THEOREM A connected graph G, with den(G) Z l/ 2, and n 3 3, has at least
one non—cut vertex w, with degree d(w) 5 dave, the average degree. Removal
of w from G does not decrease the density of G.

PROOF. Given a connected graph G, with e edges, n vertices and den(G) Z
l / 2, pick some vertex v where d(v) 5 dave. If v is not a cut vertex, then we
are done, and w = v. If v is a cut vertex, then let S be the smallest component
of G—v, and let A=S+v and B=G\A. Setting x: |V(S)| and y: |V(B)|,
we have x 5y, n=x+y+ l, and |V(A)| =x+l (Fig. 1).

It is well known that there exist at least two non—cut vertices in any
connected graph with more than one vertex, and thus there must be at least
one such vertex win A that is different from v. Since w is not a cut vertex in
A, it is not a cut vertex in G. To show that d(w) gdave =2e/n, we note that
den(G) Z l/2=> 2e/n(n — 1) 3 1/2, or dave Z (n — l)/2= (x+y)/2.

Now

«maven—hm”?swam.

Removal of w from G does not decrease the density of G:

d(W)S %=>nd (w)§2e => nd (w)_nesze_ne
awe—d(w)):em—z):—(e;£%”2%

2(6—d(W)) 2
:> (n—l)(n—2) Z —n(n:1)=>den(G—W)Zden(G). Q.E.D.

2.2 Algorithm

Within a large graph G, any maximal sub—graph with density above a speciﬁed
minimum D 3 U2 may be found in the following manner.

Initialize a list S with all single—edge sub—graphs S,- of G. Then, for each
S,- in S, successively examine every vertex v adjacent to S,- whose degree
in Si+v is less than or equal to the average degree of S,- + v, and whose
addition to S,- maintains the density of S,- +v above D, i.e. search for every v
that satisfy den(Si) Z den(Sl- +v) 3 D Z l/2.

For each v that qualiﬁes, insert S,- +v into a sorted list L, provided that
Si+v is not already in L, determined by a binary search. When no other

 

2788 © The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org

112 /§JO'SIBUJn0[pJOJXO'SOTlBIHJOJUlOTQ/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘Ig lsnﬁnv uo ::

An overlapping dense sub-graph algorithm

 

entries can be added to L, the contents of L become the new S, and another
iteration with an initially empty L commences. If no entries have been made
into L, the process terminates.

The list of dense sub—graphs to return is built by appending any S,- that
is not extended within an iteration, assuming its order (number of vertices)
exceeds some speciﬁed minimum.

Implementing the algorithm in the above manner, however, has the
drawback that the current density of each S,- must be tracked in order to
ensure that den(Si) Z den(Sl- +v). But any S,- +v that increases the density of
Si, and is not already in L, is really a pre—computation of some other sub—
graph Sk with a different adjacent vertex w added consistent with the theorem,
i.e. S,- +v can be reordered as Sk +w, v 75 w, by our theorem, and may thus be
added to L early. Thus it is sufﬁcient to insure only that den(Sl- + v) 3 D Z l / 2,
eliminating the need to track current densities.

Each round of extending candidate sub—graphs S,- by one vertex is
independent of previous rounds, and can thus be handled by a separate thread
of execution. Candidate sub—graphs from one thread are passed to the next
thread ‘mod NUM_THREADS’, and handled asynchronously. In the place
of L, each thread maintains a sorted list of sub—graphs it has passed to the
next thread, which is cleared when the order of sub— graphs being handled is
incremented.

2.3 Complexity

Worst—case performance is when G is a clique. For a clique of n vertices,
a vertex is either in a sub—graph, or it is not, resulting in 0(2”) sub—graphs
to examine. This worst case is ameliorated when G is not a clique by the
ordering property of the theorem, which forces initial seed graphs to be of
high density, e.g. searching for sub—graphs of density 0.7 forces all initial
seed graphs with three vertices to be a clique, and subsequent four vertex
seed graphs to have ﬁve of six possible edges, etc. In practice, this works
well for biological networks that typically exhibit a power law distribution
of vertex degree.

2.4 Implementation

ODES is implemented with pthreads in the C programming language as a
function call, returning a list of maximal dense sub—graphs. The function
signature is composed of the input graph, the minimum desired density of a
subgraph, and the minimum number of vertices that a dense sub—graph must
contain.

3 RESULTS

Figure 2 records timings using four threads on graphs Giof 20
vertices each, whose density varies over values that range from a
minimum cutoff density D to l, and where Gl- is not embedded in
any larger graph. Six plots are shown, corresponding to each of
six values for D, and the time shown is how long it takes for the
algorithm to return G.

We observe that the ordering property of the theorem has the
greatest effect on reducing the search time when the actual density of
G is close to the cutoff D, rather than being appreciably denser than
D, showing a 3—fold speedup for densities close to D and exhibiting
roughly constant running time for densities of Gl- close to D as D
increases.

Embedding Gl- within a 10 000—vertex graph, where the average
degree of a vertex is 4, increases the runtime ~10%.

4 FUTURE WORK

(i) Density bins: Figure 2 suggests that as the number of threads
available on modern multi—core processors increases, the algorithm

Running Time [seal-1:3 Density

 

 
 
 
   

 

 

 

an I _ I I 'l I
am density UFO —P—
am density 0.?5 ---JIl---
outqu density CLEO  __ . ............... __
cubulf derﬁity (155 ----EI--- --------- " . '
nutuﬂ density E1130 —--I--— " .
mtulfdarﬁity E195 v-rﬂ-r I  ,-
,.. J" a“ r
15 .r -'  -‘
.e’ 
. ,r
I" _.I
.: .1'
I :'
m r _:
E I!
§ 11] ,-" _,
m y! a"
F
El .1“
5 I-
D I I I
[LT 0.?5 EH3 0.35 [LEI I195 1
density

Fig. 2. Running times for various cutoff densities.

should be restructured to run over a collection of density bins, where
a set of threads is dedicated to each density bin that handles only
those sub—graphs whose density has decreased below the cutoff for
the bin above it, thus ﬁnding all maximal dense sub—graphs of the
same order in roughly constant running time. All single—edge sub—
graphs would start off in the bin that handles the highest density
range.

(ii) Hash function: proﬁling reveals a large percentage of time
spent in binary searches of the sorted list of sub—graphs passed to
the next thread; a suitable hash function may increase performance.

(iii) Overlap indication: some indication of which graphs overlap,
and where, is desired.

(iv) Edge exclusion from the initial single—edge sub—graph list:
due to its high complexity, ODES does not scale well to large—
dense sub—graphs. The guarantee of ﬁnding all overlapping dense
sub—graphs, however, makes its use attractive in conjunction with
heuristic methods, where heuristically determined edges from large
dense sub—graphs would be excluded from the initial single—edge
sub—graph list for ODES, but still retained in the subsequent search
space, thus allowing overlaps with the large dense sub—graphs.

ACKNOWLEDGEMENTS

The authors would like to thank Dr Glenn Chappell and Dr Jill
Faudree for suggestions, and Dr Thomas Marr for direction.

Conﬂict of Interest: none declared.

REFERENCES

Adamcsek,B. et al. (2006) CFinder: locating cliques and overlapping modules in
biological networks. Bioinformatics, 22, 1021—1023.

Hu,H. et al. (2005) Mining coherent dense subgraphs across massive biological
networks for functional discovery. Bioinformatics (ISMB 2005), 21 (Suppl. 1),
213—221

Palla,G. et al. (2005) Uncovering the overlapping community structure of complex
networks in nature and society. Nature, 435, 814—418

 

2789

112 /§.IO'S[BU.IHO[p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘Ig lsnﬁnv uo ::

