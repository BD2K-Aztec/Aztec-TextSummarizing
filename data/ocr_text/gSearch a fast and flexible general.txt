Vol. 28 no. 16 2012, pages 2176—2177
APP S N O  doi: 10. 1093/bioinformatics/bts358

 

Genome analysis

Advance Access publication June 23, 2012

gSearch: a fast and flexible general search tool for whole-genome

sequencing

Taemin Songl, Kyu-Baek Hwang1’*, Michael Hsing2, Kyungjoon Lee3, Justin Bohn2 and

Sek Won Kong2’*

1School of Computer Science and Engineering, Soongsil University, Seoul 156—743, South Korea, 2Informatics
Program, Boston Children’s Hospital and 3Center for Biomedical Informatics, Harvard Medical School, Boston,

MA 02115, USA

Associate Editor: Michael Brudno

 

ABSTRACT

Background: Various processes such as annotation and filtering of
variants or comparison of variants in different genomes are required
in whole-genome or exome analysis pipelines. However, processing
different databases and searching among millions of genomic loci is
not trivial.

Results: gSearch compares sequence variants in the Genome
Variation Format (GVF) or Variant Call Format (VCF) with a pre-
compiled annotation or with variants in other genomes. lts search
algorithms are subsequently optimized and implemented in a multi-
threaded manner. The proposed method is not a stand-alone
annotation tool with its own reference databases. Rather, it is a
search utility that readily accepts public or user-prepared reference
files in various formats including GVF, Generic Feature Format version
3 (GFF3), Gene Transfer Format (GTF), VCF and Browser Extensible
Data (BED) format. Compared to existing tools such as ANNOVAR,
gSearch runs more than 10 times faster. For example, it is capable
of annotating 52.8 million variants with allele frequencies in 6 min.
Availability: gSearch is available at http://ml.ssu.ac.kr/gSearch.
It can be used as an independent search tool or can easily
be integrated to existing pipelines through various programming
environments such as Perl, Ruby and Python.

Contacts:

Received on March 27, 2012; revised on May 29, 2012; accepted on
June 16, 2012

1 INTRODUCTION

Recent technological advances in next-generation sequencing have
made it possible to sequence whole genomes at unprecedented
speeds and low costs (Shendure and Ji, 2008). One of the crucial
goals of whole-genome sequencing (WGS) is to seek a small
number of variants related to a phenotype. To this end, millions
of variants are heuristically ﬁltered according to allele frequencies,
conservation, gene models and predicted impact on protein function
as described in Stitziel et al. (2011). There exist several tools
for such analysis (San Lucas et al., 2012; Wang et al., 2010).
Additionally, selected variants can be analyzed further or visualized
for biological or clinical insights (Teer et al., 2012; Yandell et al.,
2011). Even though many annotation and ﬁltering methods for WGS

 

*To whom correspondence should be addressed.

have been proposed, challenges still remain, such as processing
sequence variants from many genomes and working with customized
reference data. Current methods require a signiﬁcant amount of time
for processing one genome and are hardly scalable to thousands of
genomes. Additionally, many tools adopt their own data formats and
the use of customized annotation data is supported in a limited way.

We address these issues by providing a search tool that enables
ﬂexible annotation and ﬁltering of WGS data from an individual
in seconds on normal desktop computers. To this end, we focus on
locus comparison, as it is the root functionality of any annotation
or ﬁltering tool. Furthermore, locus comparison can be utilized for
other tasks, e.g. ﬁnding de novo mutation from a family dataset.
We developed efﬁcient algorithms for searching variants against a
large dataset and implemented multi-threaded versions of them using
the C language. It should be noted that our tool is not bound to a
speciﬁc set of annotation databases. Instead, it facilitates the use of
custom and public reference ﬁles from UCSC, NCBI and Ensembl
by supporting a wide range of formats for genome annotation.

2 METHODS

The proposed tool, gSearch, identiﬁes matching or overlapping in two
input ﬁles based on genomic region. We deﬁne a genomic region as
a speciﬁc DNA segment, represented by its chromosome and start/end
positions on that chromosome. A variant is a speciﬁc example of a
genomic region with additional sequence information, i.e. reference and
variant sequences. The basic gSearch workﬂow is as follows (refer to
Fig. 1 for a schematic overview): a query ﬁle consisting of variants
in a genome is obtained and compared with a reference ﬁle drawn
from public annotation databases, user-prepared annotations or variants in
other genomes. Query ﬁles for gSearch should be in Genome Variation
Format (GVF) (Reese et al., 2010), which is an extension of the widely
used Generic Feature Format version 3 (GFF3) standard for describing
genome data or Variant Call Format (VCF), which was developed for the
1000 Genomes Project. For reference ﬁles, GVF, GFF3, Gene Transfer
Format (GTF), VCF and Browser Extensible Data (BED) format are
supported. Users can also specify a tab-delimited reference ﬁle having
the following seven ﬁelds: chromosome, start position, end position,
reference sequence (default = .), variant sequence (default = .), annotation
(default = .) and numerical value (default = 0).

Two search modes are provided in gSearch: exact search and range search.
In the exact search mode, gSearch ﬁnds reference variants on the same
genomic region with the same variant sequence as a query variant. This
function is useful when annotating query variants based on a previously
reported variant database such as dbSNP and the 1000 Genomes Project. In

 

2176 © The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com

112 [3.10'$1120anfplOJXO'SOpBIIIJOJIITOlCI/ﬂ(11111 IIIOJJ pepeolumoq

910K ‘09 lsnﬁnV uo ::

General search tool for whole-genome sequencing

 

Reference files

Query Variants File (GVF, VCF)
(BED, GVF, GFF3, GTF, VCF)

 

     
 

 

. Public annotation

 

 

 

gSearch
l Exact | Range | ‘- databases
Search Seam“ 2. User prepared
annotations

‘ Oth
Output File (GVF, VCF): - er genomes

Annotated or filtered variants

 

Fig. 1. Schematic overview of gSearch

the range search mode, gSearch ﬁnds annotations in a region of a reference
ﬁle that overlaps a region of a query ﬁle. In this mode, sequence information
is not considered for search. This function can also be utilized for various
purposes such as transcription factor binding site (TFBS) annotation and
microRNA host gene annotation.

gSearch provides diverse search options for effective variant annotation
and ﬁltering or comparison of variants in different genomes. The usage of
gSearch is as follows:

gsearch [mandatory arguments] [optional
arguments]
[mandatory arguments]

—i input file

—r reference file

—0 output file

—m search mode (exact or range search)

—t annotation type

—a report annotation

—1 report overlap

—v report average value

—s separate matched and unmatched variants
[optional arguments]

—if input file type (default = GVF)

—rf reference file type (default = GVF)

—tg annotation tag (default value 2 tag)

—nt number of threads (default value = l)

—b big data

—h show help

We implemented the classic binary search algorithm for exact search. The
computational complexity of this algorithm is bounded by 0(m - logn), where
m is the number of query variants and n is the number of entries in a reference
ﬁle. For the range search, we developed a novel algorithm. Let us assume
that there are m query and n reference regions on the same chromosome.
Two genomic regions, [qstam qend] and [rstam rend], overlap if and only if
qstaﬁ é rend and rstart <qend. Because any reference genomic region [rstam
rend] is possible to satisfy the above inequalities for a query region [qstam
qend] regardless of the order based on rstart and rend, all reference regions
should be checked against the query region. Thus, the time complexity of
this operation for all query regions is bounded by 0(m - n). A general solution
for reducing such complexity is to rely on special data structures such as
k-dimensional trees. With gSearch, however, this is not necessary as the
length of genomic variants has a maximum size for each chromosome. Fast
performance with gSearch’s range search algorithm is achieved by selecting
a small number of reference regions that potentially overlap with a query
region based on its length and the length of the longest reference region, as
well as by utilizing multi-threading.

3 DISCUSSION

We compared the performance and accuracy of our method with
the region-based and ﬁlter-based functionalities of ANN OVAR

(version March 8, 2012) using the dataset of 52 million
variants from the Known VARiants (KAVIAR) (Glusman et al.,
2011). The KAVIAR ﬁles (hg18 and hg19) were converted to
GVF format for gSearch and to the standard input format for
ANN OVAR. Each query ﬁle (hg18 or hg19) contained ~52 million
variants. All analyses were performed on a desktop PC equipped
with an Intel Core i5 processor (4 cores at 2.66 GHz) and
4 GB of RAM. To compare exact search, the hg19 Kaviar variant
ﬁle was annotated with allele frequencies from the 1000 Genomes
Project (ftp://ftp-trace.ncbi.nih.g0v/1000gen0mes/ftp/release/201 10
521/) that covered over 39 millions of loci. gSearch was run in
its exact search mode and ANNOVAR was run in its ﬁlter-based
mode. gSearch completed the annotation process in ~347 s while
ANN OVAR took ~4001 s. The annotation results from both tools
were the same. To compare range search, the hg 18 Kaviar variant
ﬁle was annotated with their overlap with 3.8 million TFBSs
prepared with the tfbsConsSites table from the UCSC Table browser.
ANN OVAR was run in its region-based mode and gSearch was run
in its range search mode. It took 148 s for gSearch to annotate the
query ﬁle, whereas ANN OVAR took 1276 s. Two methods produced
exactly the same result.

Although a majority of previously published WGS analysis tools
include novel data formats in their pipelines, our proposed method
can be used with diverse annotation resources in standard genome
annotation ﬁle formats. With notable improvements in search speed
and ﬂexibility for multiple annotation ﬁle formats, gSearch can be
used as a stand-alone genomic search tool or integrated into existing
analysis pipelines. Using gSearch, users can expeditiously annotate
and ﬁlter variants in many genomes with various resources on their
desktop computers.

Funding: S.W.K. and M.H. are supported, in part, by NIH/NHGRI
U01HG006500. S.W.K. and KL. are supported by NIH/NIMH
P50MH094267. S.W.K. is supported, in part, by NIH/NIMH
R01MH085143. K.-B.H. is supported by the Soongsil University
Research Fund. TS. and K.-B.H. are supported, in part, by the
Proteogenomic Research Program through the National Research
Foundation of Korea funded by the Ministry of Education, Science,
and Technology.

Conﬂict of Interest: none declared.

REFERENCES

Glusman,G et al. (2011) KAVIAR: an accessible system for testing SNV novelty.
Bioinformatics, 27, 3216—3217.

Reese,M.G et al. (2010) A standard variation ﬁle format for human genome sequences.
Genome Biol., 11, R88.

San Lucas,F.A. et al. (2012) Integrated annotation and analysis of genetic variants
from next-generation sequencing studies with variant tools. Bioinformatics, 28,
421—422.

Shendure,J. and Ji,H. (2008) Next-generation DNA sequencing. Nat. Biotechnol., 26,
1135—1145.

Stitziel,N.O. et al. (2011) Computational and statistical approaches to analyzing variants
identiﬁed by exome sequencing. Genome Biol., 12, 227.

Teer,J.K. et al. (2012) VarSifter: visualizing and analyzing exome-scale sequence
variation data on a desktop computer. Bioinformatics, 28, 599—600.

Wang,K. et al. (2010) ANN OVAR: functional annotation of genetic variants from high-
throughput sequencing data. Nucleic Acids Res., 38, e164.

Yandell,M. et al. (2011) A probabilistic disease-gene ﬁnder for personal genomes.
Genome Res., 21, 1529—1542.

 

2177

112 [3.10'S1120an[plOJXO'SODBIIIJOJIIIOIQ/[i(11111 IIIOJJ pepeolumoq

910K ‘09 isnﬁnV uo ::

