APPLICATIONS NOTE

Vol. 29 no. 9 2013, pages 1215—1217
doi:10. 1093/bioinformatics/btt129

 

Sequence analysis

Advance Access publication March 16, 2013

pfsearchV3: a code acceleration and heuristic to search PROSITE

profiles

Thierry Schuepbachl, Marco Pagnil, Alan Bridge2, Lydie Bougueleretz, Ioannis Xenarios1 ’2

and Lorenzo Cerutti2’*

1Vital—IT Group, SIB Swiss Institute of Bioinformatics, Genopode, UNIL—Sorge, 1015 Lausanne and 2Swiss—F’rot Group,
SIB Swiss Institute of Bioinformatics, CMU, 1 rue Michel—Servet, CH—1211 Geneva 4, Switzerland

Associate Editor: Alfonso Valencia

 

ABSTRACT

Summary: The PROSITE resource provides a rich and well annotated
source of signatures in the form of generalized profiles that allow pro-
tein domain detection and functional annotation. One of the major
limiting factors in the application of PROSITE in genome and meta-
genome annotation pipelines is the time required to search protein
sequence databases for putative matches. We describe an improved
and optimized implementation of the PROSITE search tool pfsearch
that, combined with a newly developed heuristic, addresses this limi-
tation. On a modern x86_64 hyper-threaded quad-core desktop com-
puter, the new pfsearchV3 is two orders of magnitude faster than the
original algorithm.

Availability and implementation: Source code and binaries of
pfsearchV3 are freely available for download at http://web.expasy.
org/pftools/#pfsearchV3, implemented in C and supported on Linux.
PROSITE generalized profiles including the heuristic cut-off scores are
available at the same address.

Contact: pftools@isb-sib.ch

Received on January 14, 2013; revised on February 21, 2013;
accepted on March 1, 2013

1 INTRODUCTION

Falling costs and continuing technological developments have led
to a dramatic increase in the rate of sequencing of individual
species genomes (Lindblad-Toh et al., 2011) and the diversity of
the ecological niches sampled by metagenomic sequencing
(Teeling and Gléckner, 2012). The identiﬁcation, classiﬁcation
and functional annotation of the putative protein sequences
encoded by these samples is essential to understand the diversity
of the underlying biological systems, and will ultimately allow the
construction of biological models that simulate and make testable
predictions about their behaviour (Faust and Raes, 2012).

Most functional annotation is predicted using sequence hom-
ology-based methods that infer the function of uncharacterized
protein sequences based on their similarity to characterized tem-
plates. These methods include generalized proﬁles and Hidden
Markov Models (HMMs), which can detect more subtle homo-
logies than pairwise sequence alignments (Park et al., 1998). The
application of these computationally expensive methods on large
datasets has been made feasible by the development of heuristics

 

*To whom correspondence should be addressed.

for sequence database search and faster more efﬁcient code (e.g.
Eddy, 2011).

Our PROSITE method combines manually constructed gen-
eralized proﬁles for efﬁcient domain detection with rules for
precise functional annotation (Sigrist et al., 2013). Here, we
describe a new heuristic method and code optimization and par-
allelization for the PROSITE proﬁle-sequence database search
tool pfsearch. These developments increase the speed of pfsearch
by two orders of magnitude using a modern x86_64 hyper-
threaded quad-core computer (see Table 1 legend for speciﬁca-
tions of the computer used in our tests), making the annotation
of large sequence datasets using PROSITE feasible.

2 RESULTS AND DISCUSSION

2.1 Heuristics for generalized proﬁles

A major reduction in the execution time of sequence database
searches can be achieved by an heuristic ﬁlter that selects se-
quences for the next CPU-expensive alignment step of the core
algorithm. One such heuristic is the MSV algorithm of
HMMER3, which computes the sum of multiple optimal un-
gapped local alignment segments (Eddy, 2011). Although ex-
tremely fast and convenient, the MSV heuristic ﬁlter cannot be
directly transposed to generalized proﬁles that have a different
model topology and are not bound to the probabilistic model
restrictions of HMMs. We therefore developed a variant that is
directly applicable to generalized proﬁles.

Our pfsearch heuristic, named prfh, sums the maximal match-
ing diagonals between the proﬁle and the sequence, ignoring
both gaps and the order of the matching diagonals. First, for
each position i of the proﬁle and j of the sequence, we deﬁne a
score S(i, j):

690' — 1, j — 1) + M(z', a,) (I)

S(z', j) = max{
where M (i, aj) is the match score read at position i of the proﬁle
matrix table for residue aj observed at position j of the sequence.
Boundary scores S(z', 0) and S(0, j) are set to 0. Second, only the
maximal scoring diagonal S(z', j) is kept for every position j of the
sequence [the maximization part of Equation (2)]. All maxima
are then summed to form the ﬁnal heuristic score (Hscore).

Hscore =    

J

 

© The Author 2013. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0/), which
permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

112 ﬂJO'slcumo[pJOJXO'sopchogurorq/ﬁd11q IIIOJJ popcolumoq

910K ‘09 lsnﬁnV no :2

T.Schuepbach et al.

 

Table 1. Execution times to search the PROSITE proﬁle PS50255
(CYTOCHROME_B5_2) against 16 544 936 UniProtKB sequences
(5 358 014649 residues)

 

 

 

—heuristic +heuristic

SSE2 SSE4.1 SSE2 SSE4.1
pfsearch (v2.4) 51m32s n.a. n.a. n.a.
pfsearchV3 (1 core*) 33m02s 20m17s 1m55s 1m44s
pfsearchV3 (2 cores*) 16m54s 10m23s 0m58s 0m53s
pfsearchV3 (4 cores*) 9m14s 5m4OS 0m3ls 0m28s
pfsearchV3 (8 cores+) 9m04s 5m28s 0m28s 0m27s

 

The pfsearch and pfsearchV3 programs have been compiled on a Gentoo Linux
(-mtune=corei7 -march=corei7 -fomit-frame-pointer -O2) with gcc (4.6.3) and
glibc (2.15) using the following compilation options: -03 —enable-mmap —enable-
thread-afﬁnity, CFLAGS = ‘-mtune = corei7 -march = corei7 -ffast-math
-mfpmath= sse’, FFLAGS: ‘-mtune=corei7 -march=corei7 -ffast-math
-mfpmath= sse’. The static executable is available at the provided WEB address.
All run times have been measured on a quad-core Intel® CoreTM i7-3770 CPU @
3.40 GHz with 8 Gb RAM running on Linux 3.2.0-4-amd64. The number of cores,
the selection of the SSE and the selection or otherwise of the heuristic where spe-
ciﬁed at runtime with options -t, -s and -C, respectively, of pfsearchV3. Both
pfsearch and pfsearchV3 have been run to produce the same output alignment,
options -fle and —o 2 respectively. (*) physical cores obtained with option -k
and -t of pfsearchV3. (+) the default mode of pfsearchV3, which uses all available
cores with hyper-threading for a total of eight cores in our testing machine (no
options -t and -k are used). NB: pfsearchV3 was run using an indexed sequence
database (option -i); selecting this option reduces the execution time by 7s in all
experiments using the speciﬁed set of protein sequences.

The Hscore distribution measured using PROSITE proﬁles on
UniProtKB linearly correlates with the raw score distribution
obtained using the standard pfsearch (R2 w 0.9 on average).
To determine the appropriate Hscore cut-offs with respect to
the normalized score cut-offs of each calibrated proﬁle (Sigrist
et al., 2002), we apply the following procedure. We randomly
sample 200 sequences belonging to the original seed alignment
for each proﬁle (re-sampling if their number is <200), and gen-
erate a set of artiﬁcially mutated sequences from these, includ-
ing indels, at various PAM distances. These artiﬁcial sequences
(sharing from 40—85% sequence identity with their source) are
then scored with both the standard proﬁle scoring method and
the heuristic (Fig. 1). We calculate the regression line on the
lower 5% quantile of the heuristic score distribution using the
quanteg R package (http://cran.r-project.org/web/packages/
quantreg/), and use it to obtain the heuristic cut-offs corres-
ponding to the standard proﬁle cut-offs (Fig. 1). The regression
on a low quantile ensures a minimal loss of true-positive
sequences.

This method to ﬁx the Hscore cut-offs was automatically
applied on the PROSITE proﬁles. Manual inspection showed
that this method was appropriate for the majority of the proﬁles,
although in some cases, the Hscore cut-off could be manually
increased to further accelerate the search. A minority of very
short or ‘exotic’ proﬁles cannot be used with the heuristic. For
these, no Hscore cut-off is deﬁned in the proﬁle, and the pfsearch
software skips the heuristic search step.

The heuristic reduces the mean search database size by 96.7%
(median 99.1%). The recovery of true positives is 298%

 

= 520
I

    

Raw score cutoff

heuristic score

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . HWri?tl°.°Pt9ﬁ T .1?6.6.8.
" - Random DB reduction (%): 99.2

 

 

 

0 500 1000 1 500 2000

profile score

Fig. 1. Estimation of the heuristic score cut-off for the PROSITE proﬁle
PS50255 (CYTOCHROME_B5_2). The proﬁle scores and heuristic
scores are plotted for the matched sequence: (closed circle) sequences
from the seed alignment; (multi symbol) shufﬂed UniProtKB/Swiss-
Prot sequences; (open circle) simulated sequences derived from the seed
alignment mutated at various PAM distances (see text for explanatory
notes). The heuristic search scores and proﬁle search scores of the simu-
lated sequences (open circle) exhibit a strong positive correlation
(R2209). These scores are used to estimate the linear regression for
the lower 5% quantile (black line) used to map the proﬁle search
scores to heuristic search scores. The standard linear regression is also
plotted (dashed line)

for >99% of the PROSITE proﬁles with an associated Hscore
cut-off (the lowest measured recovery is 92.6%). The majority
of the missing true positives correspond to fragmentary
sequences in UniProtKB.

2.2 Software optimization and performance of the
new pfsearch

Pfsearch has been rewritten and optimized in C from the original
F ortran. The code will run on any x86_64 POSIX compliant
architecture and beneﬁts from the SSE 4.1 instruction set when
available. However with the current source code, only Linux
operating systems may beneﬁt from CPU core afﬁnity and ﬁle
to memory mapping optimization, detected at compile time. The
optimization process entirely reformatted the memory structure
to allow vectorization. High level assembly code (intrinsic func-
tions) was used to enforce the SSE2 and SSE4.1 instruction sets,
leading to a 2-fold acceleration of the original F ortran (Table 1).
SSE4.1 is particularly effective in reducing the execution time of
the core pfsearch algorithm, while both SSE4.1 and SSE2 show
similar performance on the heuristic ﬁlter (Table 1). This accel-
eration scales up with multithreading: on a dual hyper-threaded
quad-core machine, we measured an average 10-fold improve-
ment. The scaling is clearly related to the number of physical
cores, with hyper-threading having only a minimal effect on
performance (Table 1).

 

1216

112 [3.10811211an[plOJXO'SODBIILIOJIIlOlQ/ﬂ(11111 IIIOJJ popcolumoq

910K ‘09 lsnﬁnV no :2

pfsearch next generation

 

Multithreading implementation is straightforward because
proﬁle alignment versus a database is in itself an embarrassingly
parallel task. For pfsearchV3, we implemented a master—slave
mechanism to analyse and adapt the load before each phase of
the algorithm (heuristic, ﬁlter, alignment), thus providing more
equitable shares between threads. This has some constraints:
sequences are read several times, but above all, they are no
longer accessed sequentially, so an index of the sequences has
to be either computed or loaded at start.

By combining the heuristic with our code optimization,
we achieved a 100x increase in the speed of pfsearch on average.
To search 16 544 936 UniProtKB sequences (5 358 014 649
residues) required a mean of 98 s/proﬁle (median of 73 s/proﬁle).
A typical example of the runtime acceleration achieved is shown
in Table 1.

The heuristic version of pfsearch can be used to annotate large
sets of complete sequences in a reasonable amount of time on a
modern workstation. For example, the human proteome can
be searched with the totality of the PROSITE proﬁle models in
<4 hours, and this time can be drastically reduced on machines
with a large number of CPU cores and/or computer clusters.
For fragmented sequences, users may inactivate the heuristic
to minimize loss of true-positive matches, in which case the
speed of execution will be determined by the number of
available CPU cores. We also plan to implement our heuristic
search method in the HAMAP pipeline that provides high
quality functional annotation for protein families (Pedruzzi
et al., 2013).

ACKNOWLEDGEMENTS

We would like to thank Philip Bucher (ISREC, EPF L) and
Nicolas Hulo (Geneva University) for helpful discussion.

Funding: This work was funded by a Swiss National Science
Foundation (SNSF) project grant (315230—116864) and the
Swiss Federal Government through the State Secretariat for
Education, Research and Innovation (SERI).

Conﬂict of Interest: none declared.

REFERENCES

Eddy,S.R. (2011) Accelerated proﬁle HMM searches. PLoS Comput. Biol., 7,
e1002195.

Faust,K. and Raes,J. (2012) Microbial interactions: from networks to models.
Nat. Rev. Microbiol., 10, 538—550.

Lindblad-Toh,K. et al. (2011) A high-resolution map of human evolutionary
constraint using 29 mammals. Nature, 478, 476—482.

Park,J. et al. (1998) Sequence comparisons using multiple sequences detect three
times as many remote homologues as pairwise methods. J. Mol. Biol., 284,
1201—1210.

Pedruzzi,I. et al. (2013) HAMAP in 2013, new developments in the protein family
classiﬁcation and annotation system. Nucleic Acids Res., 41, D584—D589.

Sigrist,C.J. et al. (2002) PROSITE: a documented database using patterns and
proﬁles as motif descriptors. Brief Bioinform., 3, 265—274.

Sigrist,C.J. et al. (2013) New and continuing developments at PROSITE. Nucleic
Acids Res., 41, D344—D347.

Teeling,H. and Gléckner,F.O. (2012) Current opportunities and challenges in
microbial metagenome analysis—a bioinforrnatic perspective. Brief Bioinform.,
13, 728—742.

 

1217

112 /810's112umo[pJOJXO'sor1chOJurorw/2d11q IIIOJJ pepcolumoq

910K ‘09 lsnﬁnV no 22

