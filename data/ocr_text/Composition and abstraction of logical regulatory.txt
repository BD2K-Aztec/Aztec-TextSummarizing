ORIGINAL PAPER

Vol. 29 no. 6 2013, pages 749-757
doi:10. 1093/bioinformatics/btt033

 

Systems biology

Advance Access publication January 22, 2013

Composition and abstraction of logical regulatory modules:
application to multicellular systems
Nuno D. Mendesl, Frederic Lang2, Yves-Stan Le Cornec3, Radu Mateescu2, Gregory Batt4

and Claudine Chaouiya1’5’*

1IGC, lnstituto Gulbenkian de Ciéncia, Rua da Quinta Grande 6, P—2780—156 Oeiras, Portugal, 2lnria Grenoble —
Rhone—Alpes and LIG, 655 av de l’Europe, Montbonnot, 38 334 St lsmier Cedex, France, 8IBISC, Université d’Evry Val
d’Essonne, 40, Rue du Pelvoux, 91020 Evry Cedex, France, 4lnria Paris — Rocquencourt, Domaine de Voluceau, 78153
Le Chesnay, France and 5TAGC, INSERM U1090 AMU, 163 avenue de Luminy, 13288 Marseille Cedex 9, France

Associate Editor: Martin Bishop

 

ABSTRACT

Motivation: Logical (Boolean or multi-valued) modelling is widely used
to study regulatory or signalling networks. Even though these discrete
models constitute a coarse, yet useful, abstraction of reality, the ana-
lysis of large networks faces a classical combinatorial problem. Here,
we propose to take advantage of the intrinsic modularity of
inter-cellular networks to set up a compositional procedure that en-
ables a significant reduction of the dynamics, yet preserving the reach-
ability of stable states. To that end, we rely on process algebras, a
well-established computational technique for the specification and
verification of interacting systems.

Results: We develop a novel compositional approach to support the
logical modelling of interconnected cellular networks. First, we forma-
lize the concept of logical regulatory modules and their composition.
Then, we make this framework operational by transposing the com-
position of logical modules into a process algebra framework.
Importantly, the combination of incremental composition, abstraction
and minimization using an appropriate equivalence relation (here the
safety equivalence) yields huge reductions of the dynamics. We illus-
trate the potential of this approach with two case-studies: the
Segment-Polarity and the Delta-Notch modules.

Availability and implementation: Gleim (http://ginsim.org) and
CADP (http://cadp.inria.fr) are freely available for academic users.
Files needed to reproduce our results are provided at http://comp
bio.igc.gulbenkian.pt/nmd/node/45.

Contact: chaouiya@igc.gulbenkian.pt

Supplementary information: Supplementary data are available at
Bioinformatics online

Received on October 22, 2012; revised on January 11, 2013; accepted
on January 14, 2013

1 INTRODUCTION

The growing number of published models shows the suitability
of qualitative logical modelling to study regulatory and signalling
networks (e.g. Calzone et al., 2010; Faure et al., 2009; Naldi
et al., 2010; Saez-Rodriguez et al., 2009). However, when dealing
with large networks, a classical combinatorial explosion arises,
hampering efﬁcient analyses of the dynamical properties of these

 

*To whom correspondence should be addressed.

systems, in particular, reachability properties. Although efﬁcient
algorithms have been proposed to identify all stable states via
static analysis (e.g. de Jong and Page, 2008; Dubrova and
Teslenko, 2011; Naldi et al., 2007), reachability analysis is hard
to perform because it requires exploring the dynamics. To ad-
dress this issue, we propose to rely on the concepts of modularity
and compositionality, focusing on the multi-valued logical for-
malism, initially deﬁned by Thomas and co-workers (Thomas,
1991).

Modularity has emerged as a key feature of molecular net-
works (e.g. Wagner et al., 2007), but a precise deﬁnition of func-
tional regulatory modules is still lacking, let alone a method to
decompose large intricate networks into such functional mod-
ules. Nevertheless, when cellular patterns are governed by both
inter-cellular signals and intra-cellular regulatory networks, it is
natural to consider each cellular network as a module. Moreover,
based on previous knowledge, sub-networks are often attributed
speciﬁc functions within complex cellular processes. This is the
case of the cell cycle control for which speciﬁc modules are asso-
ciated to check-points, entry or exit control of speciﬁc phases,
etc. In Faure et a]. (2009), a logical model was deﬁned by com-
bining three modules involved in the control of the budding yeast
cell cycle. Logical modelling was also applied to multi-cellular
networks controlling early embryonic developmental processes in
Drosophila (Chaves et al., 2005; Gonzalez et al., 2008; sanchez
et al., 2008).

The composed models cited above were manually deﬁned
from smaller modules. Indeed, little work on model compos-
ition has been carried out, although it has been identiﬁed as a
major goal in systems biology (Stelling et al., 2011). Generally,
existing composition procedures are not automatic and aim
at properly deﬁning a composed model, while little attention is
paid to the analysis of the (potentially very large) associated
dynamics (Randhawa et al., 2010; Schulz et al., 2006; Snoep
et al., 2006). In any case, these studies mainly focus on bio-
chemical reaction networks. Concerning the composition of
logical regulatory modules (LRMs), a framework based on
high-level Petri nets has been developed, providing a formal
and systematic procedure (Chaouiya et al., 2011). However, it
does not solve the scalability issue of the analysis since the re-
sulting composed models have still to be analysed in a monolithic
manner.

 

© The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e—mail: journals.permissions@oup.com 749

112 /§.IO'S[BU.IHO[p.IOJXO'SODBIHJOJUIOIQ/ﬁ(1111] 11101; pepBOIUAAOG

9IOZ ‘091sn3nv uo ::

N.D.Mendes et aI.

 

Randhawa et al. (2010) consider models in the form of sets of
non-linear differential equations and propose three different
ways of combining sub-models: composition, fusion and aggre-
gation. Model composition and fusion, respectively, keep or
eliminate references to the original sub-models, while model ag-
gregation requires that individual sub-models come with their
input and output ports (similar to our deﬁnition of LRMs).
These notions are important to distinguish different types of
model combination, but, again, they do not address the issue
of analysing the resulting models. In this article, we simply
refer to the combination of models as model composition.

Process algebras aim at representing and analysing complex
interacting (discrete) systems. This framework has led to the de-
velopment of compositional approaches that mitigate the com-
binatorial explosion problem through the minimization of the
individual dynamics while preserving properties of interest, and
then by incrementally composing and minimizing intermediate
dynamics, until a description of the global behaviour is obtained.

Process algebras have already been considered for biological
processes (see, e.g. Ciocchetta and Hillston, 2009 and references
therein), adopting different modelling approaches.

Recently, a compositional algorithm was proposed for gene
regulatory networks modelled as piecewise-linear ODE systems
to check the reachability of a speciﬁc steady state from an initial
condition (Gossler, 2011). In contrast, we determine all stable
states reachable from a given initial condition (see Section 4
for a comparison of the two approaches).

In this article, we propose a new computational approach to
cope with the combinatorial explosion that hampers proper ana-
lyses of models deﬁned as compositions of LRMs. For simpli-
city, we restrict ourselves to the composition of identical
modules, which is often the case of multi-cellular systems. In
any case, this constitutes an important class of applications
that notably includes most of the patterning problems in devel-
opmental biology. Furthermore, we are concerned with the
reachability of stable states that is a property of real interest
for differentiation regulatory networks.

We thus deﬁne a framework to compose logical modules by
means of logical integration functions describing how modules
interact with their neighbours. We establish a constructive
method to determine the dynamics of the composition from
the dynamics of the individual modules and their interactions.
Then, we rely on process algebra techniques to generate, abstract
and minimize the behaviours of the modules, yet preserving
reachability properties. These dynamics are iteratively combined
and minimized, to obtain a ﬁnal reduced description of the dy-
namics of the composed model. Minimization relies on an
equivalence relation, which is chosen depending on the property
to be preserved. Here, we rely on the safety equivalence that
preserves the reachability of the stable states, while ensuring sig-
niﬁcant reductions of the dynamics.

For the implementation, we use the CADP toolbox
[Construction and Analysis of Distributed Processes (Garavel
et al., 2011)] to specify the dynamics of the logical modules
and to implement operations of abstraction, minimization and
incremental composition.

The article is organized as follows. First, in Section 2, we
introduce the modelling framework with formal deﬁnitions of
LRM, logical integration function, composition rules, as well

as the corresponding dynamics. Section 3 presents the principles
of abstraction and minimization, relying on classical process al-
gebra operations; other implementation aspects are also brieﬂy
discussed. Section 4 includes the application of our procedure to
the Segment-Polarity and the Delta-Notch modules. These case
studies illustrate the potential of our approach to analyse crucial
properties of composed LRMs dynamics that are far too large to
be comprehensively tackled with currently available tools.

2 METHODS

This section introduces LRMs and their composition, which results in a
unique LRM. Furthermore, it presents the dynamics of LRMs repre-
sented as State Transition Graphs (STGs). Importantly, we prove that
composing the individual dynamics is equivalent to constructing the dy-
namics of the composed model (formal deﬁnitions and proof of the the-
orem are provided in the Supplementary Materials).

2.1 Logical regulatory modules and their dynamics

A schematic representation of a four-component LRM is displayed in
Figure 1A. In this view, an LRM is an open system with two kinds of
components. Proper components and their regulatory interactions deﬁne
the internal dynamics of the system, while input components represent
external stimuli. Proper components are subject to regulatory effects of
other components, whereas input components are unconstrained (their
values may be set by the environment or by other modules during the
composition).

DEFINITION 1. An LRM is deﬁned by a triplet N = (G, U, K),
where:

o G = {gi}i€LG is the indexed set of the proper components (LG is the
corresponding set of indices); U = {u,-},-€LU is the indexed set of the
input components (LU is the corresponding set of indices);
C = G U U = {c,-},-€LC is the set of all the components.

0 Each component c,- E C is associated with a domain
D,- = {0, ...,M,-}§;N and the variable v,- E D,- denotes its level. The
state space S is given by HieLC D,- and v E S denotes a state.

0 K = (K,)ieLG are the logical regulatory functions of the proper compo-
nents; Vg, E G, K,- : S —> D,-, and K,(v) is the target value ofg, in state
v, i.e. the value towards which it evolves.

Brieﬂy, the variable associated to a component of an LRM (gene,
protein, etc.) represents its functional level (e. g. activity or concentration).
Generally, this variable is Boolean, but some situations require additional
values (see Thomas and D’Ari, 1990). The logical regulatory functions
deﬁne the evolution of the corresponding proper components depending
on the levels of their regulators. Hence, given a state (current levels of all
the components), some components may remain stable, while others may
be called to change their values, giving rise to state transitions.

The asynchronous dynamics of an LRM is represented by an STG (see
Deﬁnition S1 in the Supplementary Materials and Fig. 1B for an illus-
tration). The successors of a state v are deﬁned by all transitions going
out of v: input transitions (towards states that differ from v only by the
value of an input component) and proper transitions over components
g,- e G such that K,(v) — v,- 75 0 (i.e. called to update in state v). In this
discrete framework, stable states are those with no outgoing transitions.
Because input components freely vary, there are no such states for an
LRM with inputs: each state is connected to all states that differ only by
the value of an input variable. This leads to the deﬁnition of strong and
weak stable states with respect to the proper components (see Fig. 1B and

 

750

112 /§IO'sreumo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; pepBOIUAAOG

9IOZ ‘091sn3nv uo ::

Compositional analysis of gene networks

 

A G={gi,g2,93}7U={go}, B
0,: ,1 '
K1(’U)=1 <2} 02:1
K2(’U)=1 <:> 113:1
K3(U)=1<=>'U1=1/\Uo=0

} 2:0,...,3 1011

 

 

 

I - 1010

_ _ _ _ _ _ _ _ _ _ _ _ -4

 

1001 :

 

 

 

 

 

 

 

11020121122032 (2)
...>
902 1 0 1 0 1)0

véz)v§2)

 

9” 1110 2112)

   

 

 

01111211131002711211221132
1 1 0 1 0 1 0

v0 = 125” gm; v82)

 

 

v1 = v51) ®M v52)

 

 

 
 
  

 

1000010

 

 

 

 

’
|1001000| |1111000|

 

Fig. 1. (A) A simple, toy LRM, where each proper component has one activator, g3 being further inhibited by the input component g0. (B) The
corresponding STG; each node is a state (v0, v1, v2, v3); dotted arrows depict input transitions over g0; plain arrows depict proper transitions; black nodes
denote states in which proper components are stable (the sole outgoing transition refers to the input). The pair of states deﬁned by v1 2 v2 2 v3 = 0
(respectively v1 2 v2 2 v3 = 1) deﬁne a strong (respectively weak) stable state with respect to the proper components. (C—F) Composition of two
instances of this LRM. A relabelling of the components ensures their uniqueness: component g,- of module M]- (j—th instance of the LRM) becomes
gij. In panel (C), the input gm of M1 is mapped to the proper component gzz of module M2: M(u01) = (Z01, hm), with Z01 = {gzz} and hm the identity.
For the sake of brevity, the dynamics are truncated at depth 2 from the initial states. Panel (D) (respectively B) displays the (truncated) STG of M1
(respectively M2) from the initial state v81) 2 (1, 1, 1, 0) [respectively v82) 2 (1, 0, 1, 0)]. These states are compatible: v01 2 v22 2 h01(v22) = 1. Panel (F)
displays the composed STG: transitions over gm are lost (gm is a mapped input), while transitions over gm are preserved. The (double) transition that sets
glz to 1 from the initial state v82) in panel (B) gives rise to two transitions in panel (F), the ﬁrst leaving the initial state v0, the second leaving v3. Likewise,

the (double dashed) transition that sets g21 to 0 from the initial state v81) has four counterparts: transitions from v0, v1, v2 and v4

Naldi et al., 2012): in strong stable states, proper components remain
stable whatever the variation of the inputs, while in weak stable states,
proper components are stable only for speciﬁc values of the inputs.

In practice, since we are interested in reachability properties from an
initial condition so, instead of the full STG, we consider only the
sub-graph that is reachable from so (Deﬁnition S2 in the Supplementary
Materials).

2.2 Module composition

To compose LRMs, one needs to specify how they inﬂuence each other.
This is done by ﬁrst specifying a neighbourhood relation for each input
component, which is then mapped to proper components of its neigh-
bouring modules. This mapping, along with the speciﬁcation of a logical
integration function, determines how signals are combined. Thus, the

evolution of mapped inputs depends on the evolution of the arguments
of their integration function, whereas unmapped (free) inputs remain
unconstrained. Finally, regulatory effects of mapped inputs are replaced
by the (integrated) regulatory effects from the components they are
mapped to. This amounts to adequately redeﬁning the logical functions
of proper components regulated by mapped inputs, which are removed
(reduced) following the reduction method introduced in Naldi et al.
(2011).

Deﬁnition 2 below formalizes the composition of r LRMs
(NUQLCZIWJ. For simplicity, we assume that for all distinct k,k’ (in
{1, ..., r}) LCa.) ﬂ LC(k’) = 0 (in other words, all indices are distinct). As
a consequence, indices uniquely correspond to components. Hence all
objects associated to a component g,- will be indexed by i without any
confusion. We also introduce an additional notation: VXC; C, S | X é H D,-
and le is such that (le),. é v,-, Vi e X. 16X

 

751

112 /§IO'S{eumo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(11111 111011 pepBOIUAAOG

9IOZ ‘091sn3nv uo ::

N.D.Mendes et al.

 

DEFINITION 2. Consider r LRMs NU‘) = (G(k), Ulk), K”),
k = l, ...,r and the composition rule M defined over the set of
all the input components such that, for any input gj e UU‘),
M(gj) = (Zj,hj) with Zj g Uk, 71k GU"), the set of proper compo-
nents mapped to g]; hj : Hgiesz, —> D], the logical integration
function deﬁning the behaviour of g { if Zj = 0, g remains free
and hj is the empty function ).

Then the composition of the r LRMs, denoted (®M{N(k)}k:1  r, is an
LRM N = (G, U,K) with:

o G = Ukzlwﬂ GU‘), the set of proper components, and
U: Ukzlwﬂ (UU‘) \ U(k)), the set of input components (where
Uk) 2 {gj e U(k)| Zj 75 0} is the set of mapped input components),
C = G U U and LC the corresponding set of indices;

0 S = HieLCD, the state space;

0 The logical regulatory functions (Ki),.€LG are defined adequately for
any proper component g,- E GU‘): Vv E S, K,(v) = ng)(w), w 6 S0“),
$1.ng E C(k) \ UU‘), wj = vj and ng E UU‘), wj = hJ-(vlzj).

Note that nothing in our deﬁnition of LRM composition requires the
individual modules to be identical; they can be different LRMs provided
that they do not overlap (i.e. do not share identical proper components).
Therefore, even if our applications involve only identical networks, the
proposed framework is generic.

2.3 Dynamics of composed modules

We now proceed with the characterization of the dynamics of composed
models, as our aim is to check reachability properties over these
dynamics.

The composition of STGs can be formally deﬁned and the dynamics of
the LRM, composed from r modules, equals the composition of the in-
dividual dynamics of the modules (see Theorem 1 below). In other words,
to study the dynamics of a composed model, we can either compose the
modules and then construct and analyse the (large) STG or analyse the
modules dynamics in a compositional manner. Deﬁnitions and proof of
the theorem are provided in the Supplementary Materials. Here, we give
an intuitive introduction to STG composition and include our main result
ensuring the compositionality of our approach.

Composing STGs leads to a new STG, where the states result from all
the combinations of compatible states of the original STGs. States are
said compatible if the values of the mapped inputs equal the results of
their integration functions, considering the values of the relevant proper
components (see formal Deﬁnition S3 in the Supplementary Materials).
Transitions going out of a composed state involve only proper compo-
nents and free inputs, if any free input remains after the composition.
Hence, considering a particular state s in the STG of one module, the
transitions leaving s have their counterparts in the composed dynamics in
all states resulting from the composition of s with compatible states of the
others STGs. Moreover, any transition going out of s that involves a
mapped input is accounted for by (or synchronized with) transitions
over proper components involved in the integration function of this
input. Panels D—F in Figure 1 illustrate the composition of two STGs
reachable from two compatible initial states.

The following theorem asserts that the dynamics of the composition of
LRMs matches the composition of their individual dynamics.
Importantly, this also applies to the composition of STGs reachable
from (compatible) initial conditions.

THEOREM 1. Consider N = ®M {N(k)}k:1 my the LRM defined
as the composition of r LRMs. The ST G EN of N is equal to the

composition of the r STGs: EN = ®M {HULK1  r.

So far, we have deﬁned the framework for LRM composition and
shown that one can equivalently generate the dynamics of the composed
model or generate the individual dynamics and compose them in any
order. The next section is devoted to the implementation of this frame-
work. Because compositional analysis has been well studied in the frame-
work of process algebras, and efﬁcient tools have been developed, we
recast our original problem in the realm of process algebras.

3 IMPLEMENTATION

To alleviate the combinatorial explosion of the dynamics asso-
ciated with LRMs, we rely on classical abstraction and minimiza-
tion techniques. Here, we describe the key features of the
implementation. More details can be found in the Supplementary
Materials.

3.1 LTS abstraction and minimization

Process algebra techniques apply to Labelled Transition Systems
(LTSs) representing the dynamics to be analysed. Basically, in
contrast to STGs where all the information is stored in the states,
in an LTS the information is put onto transition labels. These
refer to actions performed by the transitions (here, component
updates). Converting an STG into an LTS is thus quite direct.

The addition of a speciﬁc self-loop transition on (weak and
strong) stable states (in which proper components are stable) is a
technicality that will ensure the preservation of all paths leading
to these states. This transition translates into a speciﬁc action
denoted J. in the LTS representation. Recall that all stable states
can be efﬁciently identiﬁed using static analysis tools and that
our goal is to determine which of those stable states are reachable
from an initial condition.

Abstraction is obtained by deﬁning a set of components as
non-visible: their evolution is not observable. All transitions
involving such components, termed non-visible transitions, can
simply be labelled by a special action denoted ‘L’. Then, minimiza-
tion consists in building a new LTS equivalent, in some sense, to
the original LTS. Equivalence is deﬁned with respect to one of
the various equivalence relations described in the literature, each
of them preserving certain properties of the original LTS
(Bouajjani et al., 1991; Milner, 1989; van Glabbeek and Weij-
land, 1989). Some of these relations are implemented in publicly
available tools (in particular, CADP).

The choice of an equivalence relation depends on the property
to be checked. Here, we aim at identifying all the stable states
reachable from an initial condition. We thus opt for the safety
equivalence that elicits the elimination of all ‘17 transitions and
redundant paths, while preserving reachability properties.

We deﬁne key components as those allowing the distinction
between the potential stable states. They are deﬁned as the visible
components for the abstraction operation (the remaining com-
ponents are thus non-visible). After the minimization step, the
states in the reduced LTS that correspond to stable states in the
original dynamics are recovered thanks to the 1. action.

From the onset, the dynamics of each module can be ab-
stracted and minimized in terms of the key components before
the composition. Only visible components and components that
are involved in the composition need to be preserved. The main
advantage of this approach is that, by successively performing

 

752

112 /§IO'S{eumo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(11111 111011 pepeOIHAAOQ

9IOZ ‘091sn3nv uo ::

Compositional analysis of gene networks

 

composition followed by abstraction and minimization, the full
dynamics of the composed model are never generated.

However, this incremental composition requires some adapta-
tion described in Section 3.2.

The aforementioned abstraction, minimization and compos-
ition operations are performed using the CADP toolbox (Gar-
avel et al., 2011), which provides several tools to produce,
transform and analyse LTSs from process speciﬁcations.

LRM behaviours are expressed using the LOTOS NT speciﬁca-
tion language (Champelovier et al., 2011), in terms of a process
with as many associated gates as components (input and proper
components), and with state variables representing the values of
the components. Each gate can issue actions with labels denoting
updates of component values. The process evolution is driven by
the logical rules that elicit updates of the state variables. When
the conditions associated to a component update are met, an
action associated to the gate of the component is issued, the
corresponding state variable is updated accordingly and
the main process loops back. When, for the current values of
the state variables, the logical rules do not permit any further
evolution of the proper components, a 1. action is issued.

Then, the reachability of each potential stable state is veriﬁed
on the minimized LTS, checking whether there is a path from the
initial state towards a 1. action and leading to a ﬁnal value of the
key components corresponding to that stable state. In our im-
plemented workﬂow, this reachability analysis is performed by
using the model checker of CADP.

3.2 Incremental composition of LTSs

In this section, we discuss the main implementation aspects of the
incremental composition of LTSs (see Supplementary Materials
and the code documentation for further details). The compos-
ition is speciﬁed by providing:

(i) The LRMs to be composed and a neighbourhood relation;

(ii) The integration functions of the mapped inputs;

(iii) The list of key components—having the potential stable
states of the composed model (obtained via static analysis),
we can specify the minimal set of components that should
remain visible;

(iv) The (global) initial state—which indicates the initial value
of the components in each individual LRM.

The integration of the regulatory signals originating from
neighbouring modules is speciﬁed by the integration function
associated with each mapped input. The values of these functions
are partially constrained in the course of an incremental compos-
ition, as the values of each argument become bound to an actual
proper component—the corresponding actions are to be syn-
chronized (i.e. an update of the function must correspond to
an update of one of its arguments). This is why we propose to
model integration functions as independent processes with their
own dynamics. More precisely, an LTS is generated for each
integration function h,- (associated to an input component g,-).
Actions in this LTS reﬂect the updates of both the function
arguments and the function value. The values of the function
arguments are allowed to vary freely. More precisely, from a
given state, if the update of a proper component gk inﬂuencing
the value of g,- (i.e. gk e Z,) has no impact on the value of the

integration function h,-, the LTS contains an action correspond-
ing solely to the update of gk. If, on the other hand, this update
does change the value of h,-, the action refers to both g,- and gk
updates. In subsequent composition operations, all these actions
must be synchronized with the appropriate actions in the LTSs
accounting for the evolution of the relevant components (the
arguments of h,-), and with the actions over g,.

Most importantly, to ensure a correct composition, actions
over mapped input components and arguments of integration
functions must be kept visible during the incremental compos-
ition until they are no longer required.

Reduced LTSs of individual modules are incrementally com-
posed following the speciﬁed rules. At each step, components
that are no longer needed are made non-visible (new abstraction
step) and the LTS of the intermediate composition is minimized.

Upon the last composition step, a ﬁnal abstraction and mini-
mization step is undertaken, where only key components are
kept visible thus obtaining a minimal description of the dynamics
of the whole composition.

Given the LOTOS NT speciﬁcations of the module and of the
integration functions, the synchronization (composition) of the
whole is speciﬁed by way of synchronization vectors (Lang,
2005). A high-level language provided by CADP called SVL
(Garavel and Lang, 2001) is used to specify the generation of
the LTSs for each individual LRM, their preliminary minimiza-
tion step, subsequent synchronization steps, as well as the ﬁnal
abstraction and minimization operations. The intermediate com-
position steps are automatically produced by CADP. The SVL
script as well as the EXP (Lang, 2005) ﬁle, which speciﬁes the
synchronization vectors, are automatically generated from a
symbolic representation of the LRM exported from GINsim
and processed using Perl scripts.

Note that, for simplicity, our current implementation performs
composition for multi-cellular systems such as the ones presented
in Section 4: modules are identical (r instances of a unique
LRM), the neighbourhood relation is deﬁned as an r x r adja-
cency matrix and the (same) inputs in distinct modules are uni-
formly mapped to proper components from neighbouring
modules. Hence, it is enough to specify the integration functions
of the mapped inputs, with the proper components that are to be
taken as arguments.

3.3 Note on composition order

The order followed to compose the modules affects the perform-
ance of our method. Here, our implementation relies on the
smart reduction (Crouzen and Lang, 2011), which is an operator
of SVL that determines the order of the composition, including
the synchronization, abstraction and minimization operations.
The underlying heuristic aims at controlling the size of the inter-
mediate LTSs. However, it performs poorly in the case of LRM
composition, because it preferentially synchronizes all LTSs
related to the integration functions (which are usually smaller),
then composes the LTSs associated to the modules and ﬁnally
combines all these intermediate LTSs. As a consequence, all the
restrictions on the dynamics of a module (imposed by its neigh-
bours via the integration functions) are put in place later rather
than sooner, giving rise to large intermediate LTSs. We further

 

753

112 /§IO'S{eumo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(11111 111011 pepeOIHAAOQ

9IOZ ‘091snﬁnv uo ::

N.D.Mendes et al.

 

discuss and illustrate this issue of the composition order in
Section 4.1.

4 APPLICATIONS

To evaluate our method, we consider the Segment-Polarity and
the Delta-Notch modules (various compositions of four in-
stances of the toy LRM introduced in Figure l are presented
in the Supplementary Materials).

4.1 The Segment-Polarity module

The Segment-Polarity (SP) module is involved in the fruit ﬂy
embryo segmentation, which has been extensively studied by gen-
eticists as a model system for development. Early embryo orga-
nization into a series of segments along the antero-posterior axis
is initiated by maternal morphogens, which control a few dozens
of genes. These genes have been split into several classes. The
ﬁrst classes, gap, pair-rule and segment-polarity modules, consti-
tute a temporal hierarchical genetic system. Segment-polarity
genes are under the control of the pair-rule genes. Their patterns
of expression deﬁne the anterior and posterior parts of the em-
bryonic segments, and they are responsible for the consolidation
of these borders (Sétnchez et al., 2006). The SP module has been
modelled using continuous (Ingolia, 2004) and logical
approaches (Chaves et al., 2005; Sénchez et al., 2008). Here,
we rely on the model deﬁned in Sanchez et al. (2008), with an
intracellular network of a dozen of components, submitted to
two external inputs [the Wingless (\Ng) and Hedgehog (Hh)
signals].

We compose two modules, accounting for the cells ﬂanking
the segmental border. Figure 2 illustrates this model and the
results contrasting the STG size with the minimized LTS size
for a full version of the model and a reduced one. The initial
condition accounts for the outcome of the activity of the
pair-rule system (Sénchez et al., 2006, 2008): signiﬁcant amounts
of Wg and Slp in the anterior cell, a signiﬁcant amount of En in
the posterior cell. The three stable states reachable from this
initial condition combine three cellular patterns: a Wg-expressing
state (denoted W), an En-expressing state (E) and a trivial state
(T) with neither Wg nor En. They correspond to the expected

 

Linn:

@ size {states} 9 FIJI

' mom are
"u "

wild-type pattern WE in addition to the TT and EW patterns
(Sétnchez et al., 2008). We also consider a reduced (intra-cellular)
regulatory graph with 9 components and 31 regulatory inter-
actions. It has been obtained by applying the reduction
method available in GINsim and described in Naldi et al.
(2010). Note that with GINsim, it was impossible to construct
the STG for the full model, and for the reduced model, the re-
sulting LTS structure is much smaller and thus more amenable to
further analysis (see Fig. 2C and D). In Sénchez et al. (2008), the
construction of the STG was interrupted as soon as the WT and
TT stable states were reached.

To investigate the impact of the composition order, we now
consider six instances of a further reduced SP module (with three
proper components: Wg, En, Hh). These modules are organized
along a line, each having two neighbours, except for the two
extreme ones. For each instance i (i = l, ...,6), our method
generates three LTSs: (i) M,, LTS of the i-th module; (ii)
H,(Hh), LTS of the integration function of the input Hh in the
i-th module; (iii) H,(VV g), LTS of the integration function of the
input Wg in the i-th module.

Table 1 illustrates the impact of the composition order. It ﬁrst
includes the composition steps as performed by the smart reduc-
tion implemented in CADP. The intermediate LTSs grow very
fast. Indeed, we can observe that composition operations are
performed over LTSs that have no synchronization restrictions
[because they are not related, such as, e.g. H2(Wg) and H5(VVg)].
In this speciﬁc case, the smart reduction heuristic performs
poorly. Even the monolithic composition of all the LTSs (in a
single step) leads to a much better performance. A better com-
position order, drawn from the knowledge of how each LTS
restricts its neighbours, consists in ﬁrst composing the LTSs of
each regulatory module with the LTSs of the integration func-
tions of their input components, and then to iteratively compose
these LTSs along the line of the six modules (see Table l).

4.2 The Delta-Notch module

The Delta-Notch (DN) module is involved in cell differentiation
in crucial steps of embryonic development of several species
(GOssler, 2011; Marnellos et al., 2000). In each cell, when
active, the Notch protein inhibits the production of Delta. The

Full :rnodel [12 components per cell)

STU [111115151111]
{1.52 1111.345.

LTS LEIADP}
II .1111 he uni

 

 

 

 

out. of memory [::~5[I CIR} 21155 CIR

 

 

 

 

 

 

 

 

 

I - I
"l  l  'l  l——1

.-'" ' "-
—.—. g-Llren a)

 

1 [ : C Reduced model [9 components per cell}
STG [GINeinﬂ LTES. [CAD-P]
,t—  I-Ime: HT? :1' 35 H
-.Hh_‘.'x' size {states} 1160 5311 1 ﬁ-iﬁ
I memon 2.53 GB [ITE- GU

 

 

 

 

 

 

I: I

 

 

 

 

 

 

Fig. 2. (A) Composition of two instances of the Segment-Polarity module, accounting for the two cells ﬂanking the segmental border. Each module
contains 12 components among which 7 are associated to Boolean variables (oval nodes) and 5 to ternary variables (rectangular nodes); sufﬁx ‘a’
(respectively ‘p’) denotes components of the cell anterior (respectively posterior) to the border; regulatory interactions are denoted by arrows (activation)
or ﬂat-end edges (repression); inter-cellular interactions are denoted by thick edges. Additionally, grey nodes are reduced to obtain the nine-component
version of the model. (B—C) Measures for the construction of the dynamics, in terms of size (number of states), time and memory use, for the full (panel

B) and reduced (panel C) models

 

754

112 /§.IO'S[BU.ITIOIpJOJXO'SOIlBIIIJOJUIOIQ/ﬁ(11111 U101} pepeOIHAAOQ

9IOZ ‘091snﬁnv uo ::

Compositional analysis of gene networks

 

Table 1. Impact of the composition order illustrated with six instances of
a reduced version of the SP module (three proper components), intercon-
nected along a line; the ﬁrst and the sixth modules have one neighbour
(the second and the ﬁfth), all other modules have two neighbours

 

 

Composition Resulting Minimized
LTS size LTS size

Incremental composition, smart reduction

£1 = H3(Wg) ® H5(Wg) 27 27

£2 = 112(ng ® 114ng 27 27

£3 = H3(Hh) ® H5(Hh) 27 27

[,4 = H2(Hh) ® H4(Hh) 27 27

£5 2 M18) M2 729 729

£6 = M5 (3) M6 747 747

£7 2 £2 (8) H6(Wg) 27 27

[,8 = [,1 ® H1(Wg) 27 27

[,9 = [,4 ®  27 27

£10 2 £3 (3) H1(Hh) 27 27

£11: M3 (3) M4 8019 8019

1764 450 1 130157
25 999 469 Out of memory

£12 = £11 £8 £9 £8 £5
£13 = £12 (8) £10 (8) £6

Monolithic composition, in one step

@121, ...,6(Mi ® H1(Hh) ® H1(Wg)) 548 208 864
Incremental composition, speciﬁc order

C1 =M1®H1(Hh)®H1(Wg) 81 81

C2 = M2 (3) H2(Hh) ® H2(Wg) 729 729

C3 = M3 (3) H3(Hh) ® H3(Wg) 729 729

C4 = M4 ® H4(Hh) ® H4(Wg) 891 891

C6 =M6®H6(Hh)®H6(Wg) 81 81

£1 = C1 18 C2 729 585

£2 2 £1 (8) C3 5265 2691

£3 2 £2 18 C4 27 027 7101

£4 2 £3 (8) C5 75 852 32 409

£5 2 £4 (8) C6 19 829 864

 

The left column indicates the LTSs that are synchronized, each step deﬁning a new
LTS; the middle column contains the size of the resulting LTS, while the right
column gives the size of the minimized LTS. First, the results relate to the order
performed by the smart reduction available in CADP. Then, the composition is
performed in one step and, ﬁnally, incremental composition is performed following
an order based on the structure of the model (see text).

production of Notch is stimulated by the presence of Delta in
neighbouring cells. These regulatory interactions, for a single cell,
can be represented by the logical module shown in Figure 3,
where the Delta_ext component accounts for Delta in the adja-
cent cells. This simpliﬁed model is the Boolean counterpart of the
model used as a case study for the compositional veriﬁcation
approach described in GOssler (2011). Similarly to GOssler
(2011), cells are hexagonal (i.e. they can have up to six neigh-
bours), and the integration function of the input component
Delta_ext is a logical OR between all the Delta components in
neighbouring modules. We illustrate our approach by consider-
ing three compositions: DN7, DN10 and DN12 depicted in
Figure 3.

In GOssler’s article, the reachability of a speciﬁc stable state
from an initial condition was checked in models encompassing
up to 343 modules. In contrast, we could only deal with models

encompassing up to a dozen of modules. However, we answer a
different problem, as our procedure accounts for all the trajec-
tories from a given initial condition to any reachable stable state,
which is certainly different from verifying the existence of one
trajectory leading to one speciﬁc stable state (note that the
number of stable states grows rapidly with the number of inter-
connected modules and depends on the neighbouring relations).

An isolated open module has two stable states: when
Delta_ext is active, Notch eventually becomes active and Delta
inactive, otherwise Notch remains inactive and Delta becomes
active. Either stable state can be univocally identiﬁed by the
value of e.g. Delta, hence there is a single key component in
each module.

In the case of DN7 as depicted in Figure 3, if all modules start
with both Delta and Notch inactive, then the six stable expres-
sion patterns are reachable. The pattern of Delta expression that
ultimately emerges depends on which cells express Delta sooner.
The STG generated with GINsim shows that from this initial
condition, almost the entire state space is explored (there are
16024 reachable states for a total state space of size 16384).
The minimized LTS (retaining only Delta as a visible compo-
nent) contains 2290 states, which is a signiﬁcant reduction (it is
then possible to check on this reduced LTS that the six stable
expression patterns are reachable). The reduction is even more
signiﬁcant in the case of DN10. For DN12, only the compos-
itional framework we propose here can solve the problem.

5 CONCLUSIONS

Pattern formation notably relies on inter-cellular communica-
tion, while involving intra-cellular regulatory processes. Several
logical models dealing with such developmental processes have
been published (Azpeitia et al., 2010; Chaves et al., 2005;
Gonzalez et al., 2008; Sétnchez et al., 2008). However, current
monolithic approaches are not appropriate to answer questions
that require searching the (generally huge) state space. In par-
ticular, the study of inter-cellular networks involved in differen-
tiation processes focuses on the reachability of stable expression
patterns from given initial conditions. Here, we have introduced
a framework to address the combinatorial explosion of logical
models that can be speciﬁed as module compositions. Our ap-
proach is made operational by recasting LRM composition in
terms of process algebra operations. We rely on GINsim for the
deﬁnition of the LRMs and on CADP for the composition, ab-
straction and minimization operations. The procedure has been
applied to the Segment-Polarity and the Delta-Notch modules,
showing that huge reductions can be obtained.

With the study of the SP module, we could discuss the prob-
lem of the composition order. At present, CADP provides the
smart reduction heuristic, which deﬁnes a built-in composition
order, and it also offers the proﬁcient user the possibility of
manually deﬁning a speciﬁc composition order. In general, it is
not trivial to determine the optimal composition order.
However, considering the application we are dealing with, we
propose an alternative heuristic that should lead to reasonable
performances. It consists in composing the LTSs of individual
LRMs with the integration functions of their inputs and progres-
sively proceeding according to the speciﬁed neighbourhood
relation.

 

755

112 /§.IO'S[BU.ITIOIpJOJXO'SOIlBIIIJOJUIOIQ/ﬁ(11111 U101} pepeOIHAAOQ

9IOZ ‘091snﬁnv uo ::

N.D.Mendes et al.

 

 

Delta—Notch module

 

 

DN7 85 stable patterns DN10 DN12

cease»
ceases

 

 

 

 

DN7 topology

DN10 topology

DN12 topology

 

STG (GINsim) LTS (CADP) STG (GINsim) LTS (CADP) STG (GINsim) LTS (CADP)
time < 1 s 2.25 minutes time 3.82 minutes 6.52 minutes time i 1.54 hours
size 16 024 2 290 size 1 022 890 63 179 size 7 523 611
memory 7.36 MB 2.46 GB memory 555 MB 18.98 GB memory out of memory 45.69 GB

 

 

 

 

 

 

 

 

 

 

Fig. 3. Composition of the Delta-Notch (DN) module. Top left panel displays the DN LRM (all components are Boolean). Delta and Notch are proper
components, and Delta_ext is an input component integrating the Delta signal from neighbouring modules (the integration function being a disjunction).
In the initial state, all variables are set to 0. Three cases are analysed: DN7 referring to the composition of seven instances (cells) of the module, following
the neighbouring relations as illustrated (the cell at the centre receives a Delta signal from its six neighbouring cells, all the other cells have three
neighbours), DN10 and DN12. For DN7, there are six (reachable) stable expression patterns as depicted (a black dot indicates a Delta-expressing cell);
DN10 gives rise to 14 stable patterns and DN12 to 22 stable patterns, all being reachable from the speciﬁed initial state. Performance results are given for

each case

Our results indicate that while our compositional framework
leads to a signiﬁcant decrease of the size of the behaviour, there is
still room for improvement. In the case of the reduced SP model,
the number of states in the dynamics is reduced by two orders of
magnitude. Nevertheless, the asynchronous dynamics are often
huge, as they include all possible behaviours from a given initial
condition, resulting in dynamics that explore a large portion of
the state space. Most of the trajectories represented in these dy-
namics are generally not relevant from the biological point of
view. Several methods aim to avoid non-realistic trajectories in
asynchronous dynamics, among them the consideration of pri-
ority classes (Faure et al., 2006). Importantly, such modiﬁcations
of update methods would invalidate the safety equivalence guar-
antee, thus requiring the deﬁnition of tailored minimization
approaches.

In this article, we have used minimization modulo safety
equivalence, which provides a good compromise between algo-
rithmic complexity and compression of the state space. Most
importantly, the safety equivalence preserves the reachability of
stable states, a crucial property when studying differentiation
processes. This property could be enriched to verify additional
features along the trajectories leading to the states of interest,
such as whether a given component is always required to change.
Other veriﬁcation techniques could prove efﬁcient in our context,
including the consideration of on-the-ﬂy veriﬁcation directed by
a property to be checked (Lang, 2005; Mateescu and Thivolle,
2008). Another possibility to exploit compositionality when
checking the potential reachability of a given stable state is to
use the partial model-checking approach (Lang and Mateescu,
2012). The compositional framework presented here constitutes a
novel and systematic method to compose LRMs and to efﬁ-
ciently perform comprehensive analyses of their behaviours.
This will greatly facilitate the deﬁnition and analysis of network
models involved in various multicellular patterning systems.

ACKNOWLEDGEMENTS

We are most grateful to H. Klaudel and F. Pommereau for in-
sightful discussions.

Funding: This work was supported by Agence Nationale de la
Recherche [ANR-08-SYSC-003, ANR-lO-COSINUS-007];
Fundacao para a Ciéncia e a Tecnologia [PTDC/EIA-CCO/
099229/2008].

Conﬂict of Interest: none declared

REFERENCES

Azpeitia,E. et al. (2010) Single-cell and coupled GRN models of cell patterning in
the Arabidopsis thaliana root stem cell niche. BM C Syst. Biol, 4, 134.

Bouajjani,A. et al. (1991) Safety for branching time semantics. In: Albert,J.L. et al.
(ed.) ICALP. Vol. 510 of LNCS. Springer, Heidelberg, Germany, pp. 76—92.

Calzone,L. et al. (2010) Mathematical modelling of cell-fate decision in response to
death receptor engagement. PLoS Comput. Biol, 6, e1000702.

Champelovier,D. et al. (2011) Reference manual of the LOTOS NT to LOTOS
translator (version 5.5). Technical report. Inria, Grenoble, France.

Chaouiya,C. et al. (2011) A modular, qualitative modeling of regulatory networks
using Petri nets. In: Modeling in Systems Biology, The Petri Net Approach.
Vol. 16, Chap. 12. Springer, Heidelberg, Germany, pp. 253—279.

Chaves,M. et al. (2005) Robustness and fragility of Boolean models for genetic
regulatory networks. J. T heor. Biol, 235, 431—49.

Ciocchetta,F. and Hillston,J. (2009) Bio-PEPA: a framework for the modelling and
analysis of biological systems. T heor. Comput. Sci, 410, 3065—3084.

Crouzen,P. and Lang,F. (2011) Smart reduction. In: Proceedings of FASE’2011.
Vol. 6603 of LNCS, Saarbriicken, Germany, pp. 111—126.

de J ong,H. and Page,M. (2008) Search for steady states of piecewise-linear differ-
ential equation models of genetic regulatory networks. IEEE/A CM Trans.
Comput. Biol. Bioinform, 5, 208—222.

Dubrova,E. and Teslenko,M. (2011) A sat-based algorithm for ﬁnding attractors in
synchronous boolean networks. IEEE/A CM Trans. Comput. Biol. Bioinform, 8,
1393—1399.

Fauré,A. et al. (2006) Dynamical analysis of a generic Boolean model for the control
of the mammalian cell cycle. Bioinformatics, 22, 124—131.

Fauré,A. et al. (2009) Modular logical modelling of the budding yeast cell cycle.
Mol Biosyst., 5, 1787—1796.

Garavel,H. and Lang,F. (2001) SVL: a scripting language for compositional veriﬁ-
cation. In: Proceedings of IFIP WG 6 .1 , FORT E’2001 . Kluwer Academic
Publishers, pp. 377—92.

Garavel,H. et al. (2011) CADP 2010: A toolbox for the construction and analysis of
distributed processes. In: Proceedings of T ACAS’201 1. Vol. 6605 of LNCS,
Springer, Heidelberg, Germany, pp. 372—87.

Gonzalez,A. et al. (2008) Logical modelling of the role of the Hh pathway in the
patterning of the Drosophila wing disc. Bioinformatics, 24, i234—i240.

GOssler,G. (2011) Component-based modeling and reachability analysis of genetic
networks. IEEE/ACM Trans. Comput. Biol. Bioinform, 8, 672—682.

 

756

112 /310's113u1no [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq U101} pepeOIHAAOQ

9IOZ ‘091sn3nv uo ::

Compositional analysis of gene networks

 

Ingolia,N.T. (2004) Topology and robustness in the Drosophila segment polarity
network. PLoS Biol, 2, e123.

Lang,F. (2005) EXP.OPEN 2.0: a ﬂexible tool integrating partial order, compos-
itional, and on—the-ﬂy veriﬁcation methods. In: Proceedings of IFM’2005. Vol.
3771 of LNCS, pp. 70—88.

Lang,F. and Mateescu,R. (2012) Partial model checking using networks of
labelled transition systems and boolean equation systems. In: Flanagan,C.
and KOnig,B. (eds.) T ACAS. Vol. 7214 of LNCS. Springer, Heidelberg,
Germany, pp. 141—156.

Marnellos,G. et al. (2000) Delta-Notch lateral inhibitory patterning in the emer-
gence of ciliated cells in Xenopus: experimental observations and a gene network
model. Pac. Symp. Biocomput., 329—340.

Mateescu,R. and Thivolle,D. (2008) A model checking language for concurrent
value-passing systems. In: Cuellar,J. et al. (ed.) Proceedings of the 15th
International Symposium on Formal Methods FM ’08. Vol. 5014 in LNCS, pp.
148—64.

Milner,R. (1989) Communication and Concurrency. Prentice-Hall, Upper Saddle
River, NJ, USA.

Naldi,A. et al. (2010) Diversity and plasticity of Th cell types predicted from regu-
latory network modelling. PLoS Comput. Biol, 6, e10009l2.

Naldi,A. et al. (2012) Efﬁcient handling of large signalling-regulatory networks by
focusing on their core control. In: CMSB’12. Vol. 7605 of LNCS, pp. 288—306.

Naldi,A. et al. (2011) Dynamically consistent reduction of logical regulatory graphs.
T heor. Comput. Sci, 412, 2207—2218.

Naldi,A. et al. (2007) Decision diagrams for the representation of logical models of
regulatory networks. In: CMSB’07. Vol. 4695 of Lecture Notes in Bioinformatics
(LNBI), pp. 233—247.

Randhawa,R. et al. (2010) Model composition for macromolecular regulatory net-
works. IEEE/ACM Trans. Comput. Biol. Bioinform, 7, 278—287.

Saez-Rodriguez,J. et al. (2009) Discrete logic modelling as a means to link protein
signalling networks with functional analysis of mammalian signal transduction.
Mol Syst. Biol, 5, 331.

Sétnchez,L. et al. (2006) From gradients to segments: a logical analysis of the genetic
network controlling early Drosophila. In: Bioinformatics of Genome Regulation
and Structure II. Springer-Kluwer, Heidelberg, Germany, pp. 379—390.

Sénchez,L. et al. (2008) Segmenting the ﬂy embryo: a logical analysis of the segment
polarity cross-regulatory module. Int. J. Dev. Biol, 52, 1059—1075.

Schulz,M. et al. (2006) SBMLmerge, a system for combining biochemical network
models. Genome Inform, 17, 62—71.

Snoep,J.L. et al. (2006) Towards building the silicon cell: a modular approach.
Biosystems, 83, 207—216.

Stelling,J. et al. (2011) Deﬁning modeling strategies for Systems Biology. In:
Technical report, FutureSysBio Workshop. Report for the European Union
Commission.

Thomas,R. (1991) Regulatory networks seen as asynchronous automata: a logical
description. J. T heor. Biol, 153, 1—23.

Thomas,R. and D’Ari,R. (1990) Biological Feedback. CRC Press, Boca Raton, FL,
USA.

van Glabbeek,R.J. and Weijland,W.P. (1989) Branching-Time and Abstraction in
Bisimulation Semantics ( Extended Abstract ). CWI, Amsterdam. CS R8911.

Wagner,G. et al. (2007) The road to modularity. Nat. Rev. Genet, 8, 921—931.

 

757

112 /310's113u1no [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq U101} pepeOIHAAOQ

910Z ‘091sn3nv uo ::

