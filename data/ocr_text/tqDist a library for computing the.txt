APPLICATIONS NOTE V°" $33533.iégi‘ili‘aiﬁiﬁiiﬁgﬁf‘igg

 

Phylogenetics

Advance Access publication March 20, 2014

tqust: a library for computing the quartet and triplet distances

between binary or general trees

Andreas Sand”, Morten K. Holt2, Jens Johansenz, Gerth Stolting Brodal2’3,
Thomas Mailund1 and Christian N. S. Pedersen1’2’*

1Bioinformatics Research Centre, 2Department of Computer Science and 3MADALGO, Center for Massive
Data Algorithms, a Center of the Danish National Research Foundation, Aarhus University, DK—8000

Aarhus C, Denmark
Associate Editor: David Posada

 

ABSTRACT

Summary: tqust is a software package for computing the triplet and
quartet distances between general rooted or unrooted trees, respect-
ively. The program is based on algorithms with running time 0(n log n)
for the triplet distance calculation and 0(d- n log n) for the quartet dis-
tance calculation, where n is the number of leaves in the trees and d is
the degree of the tree with minimum degree. These are currently the
fastest algorithms both in theory and in practice.

Availability and implementation: tqust can be installed on Windows,
Linux and Mac OS X. Doing this will install a set of command-line tools
together with a Python module and an R package for scripting in
Python or R. The software package is freely available under the
GNU LGPL licence at http://birc.au.dk/software/tqust.

Contact: cstorm@birc.au.dk

Supplementary information: Supplementary data are available at
Bioinformatics online

Received on December 11, 2013; revised on February 21, 2014;
accepted on March 17, 2014

1 INTRODUCTION

Using trees to represent evolutionary relationships is a wide-
spread technique in many scientiﬁc ﬁelds, in particular in biology,
where trees are used to represent relationships between species or
between genes in a gene family (Semple and Steel, 2003). But trees
are also used, for example, in linguistics, where trees may be used
to describe the evolution of related languages (Gray et al., 2009;
Walker et al., 2012), and in archaeology, where trees have been
used to represent how copies of ancient manuscripts have chan-
ged over time (Buneman, 1971). A common goal in all of these
ﬁelds is to reconstruct the true tree from observed data. However,
depending on both the available data and the reconstruction
method, the inferred trees may differ.

In such cases, tree distances are often used as a formal way to
quantify the differences and to determine whether two trees are
more similar than would be expected by chance. The triplet dis-
tance [introduced as the triples distance in Critchlow et al.,
(1996)] and quartet distance (Estabrook et al., 1985) enumerate
all subsets of leaves of size three and four, respectively, and count
how often the topologies induced by the three or four leaves

 

*To whom correspondence should be addressed.

agree in the two trees. The triplet distance is intended for
rooted trees, where the triplet topology is the smallest inform-
ative subtree (for unrooted trees all subtrees with three leaves
have the same topology), whereas the quartet distance is intended
for unrooted trees, where the quartet topology is the smallest
informative subtree. The fastest known algorithms for comput-
ing the triplet and quartet distances have time complexity
0(n log n) for both distances on binary trees with 11 leaves and
complexity 0(n log n) for the triplet distance and 0(d - nlog n)
for the quartet distance on general trees, where dis the minimum
degree of the two trees, and the degree of a tree is the maximum
degree of a node in the tree (Brodal et al., 2013; Holt et al., 2014).

In this applications note, we present an efﬁcient and easy-to-use
implementation of these algorithms and show that this is the fast-
est implementation available for computing the triplet and quartet
distances. A detailed description of the algorithms and their im-
plementation is given in Brodal et al. (2013) and Holt et al. (2014).

2 ALGORITHM

In this section, we brieﬂy describe the triplet distance algorithm.
The quartet distance algorithm is somewhat more involved, but
it also builds on the ideas presented here.

For general trees, a triplet can be either resolved (the induced
topology of the triplet is a binary tree) or unresolved (the induced
topology is a trifurcation). Thus, given a triplet and two trees, T1
and T 2, the triplet can be resolved in both trees, unresolved in
both trees or resolved in one and unresolved in the other. If it is
resolved in both trees, the induced topologies may agree or dis-
agree in the two trees. In the unresolved—unresolved case they
always agree, and in the resolved—unresolved case they always
disagree. For binary trees, the induced topologies are always
resolved.

Our algorithm computes the number of triplet topology differ-
ences implicitly by computing the number of shared triplet topol-

ogies and subtracting it from the total number of triplets, 

The number of shared triplet topologies can, according to the
classiﬁcation above, be computed as the number of triplets that
are unresolved in both trees plus the number of triplets that are
both resolved and induce the same topology in both trees. The
ﬁrst of these numbers can be computed in 0(n) time using a
simple dynamic programming algorithm. To compute the

 

© The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 2079

112 ﬂJO'slcumo[pJOJXO'sopchogurorq/ﬁd11q IIIOJJ popcolumoq

910K ‘09 lsnﬁnV no :2

A.Sand et al.

 

number of triplets that are resolved and induce the same topology
in both trees, we associate every triplet to a unique node in T1 and
then, in a recursive traversal of T1, count how many of the triplets
associated with each node in T1 induce the same topology in T 2.
Using the smaller-half trick to traverse T1 and a balanced binary
tree data structure called a hierarchical decomposition tree to
count in T 2 (Brodal et al., 2013), this is done in O(n log n) time.
Hence, in total our algorithm runs in O(n log n) time.

3 IMPLEMENTATION

tqust is an implementation of the algorithm described above
together with the corresponding quartet distance algorithm. The
software package is carefully implemented in C++, and inter-
faces for scripting in Python (via the module pyTQDist) and in
R (via the package rtqdist) are also provided. The software
package can be installed easily using precompiled installers or
using CMake on Windows, OS X and Linux, and the source is
furthermore freely available for installation on any platform
supporting CMake, make and any standard C++ compiler.
The software package includes four executables: triplet_
distance, quartet_distance, pairs_trip1et_dis
tance and pairs_quartet_distance. The ﬁrst two both

(a) ,

 

 

.1
1o2 - — tqust — 0(nlogn) ,. M”:

I
[1'

qust 2004 - 0(nlog2n) ,
- — qust 2011 - 0012-688) ,

 

 

 

Running time in seconds

 

 

 

 

102 103 104
Number of leaves

 

 

101 - . ,_
— tqDlst - 0(d ~n ~logn) , ’

- — qust 2011 - 009-688) ,’

 

 

 

100

10-1

Running time in seconds

10-2

 

 

 

 

102 103 104
Number of leaves

Fig. 1. Running time results for the quartet distance calculations on

binary and non-binary unrooted trees. (a) Quartet distance running time

on binary trees. (b) Quartet distance running time for trees of degree 128

take two ﬁles, each containing a single tree in the Newick format,
as input and outputs the distance between the two trees. The last
two executables take two ﬁles, each containing the same number
of trees in the Newick format, as input and outputs a list of num-
bers where the ith number is the distance between the two trees
on line i in the two ﬁles. Similar functions (tripl etDistanc e,
quartetDistance, pairsTripletDistance and
pairsQuartetDistance) are provided in pyTQDist and
rtqdist. The following short code snippet shows how the
python module may be used:

from pyTQDi s t import *

td= tripletDistance (" treel.new" , "tree2 .new")
print " triplet distance: " , td

ptd = pairsTripletDistance ( " trees .new")
print "list of distances: " , ptd

4 PERFORMANCE

Figure 1 illustrates how the running time of our implementation
of the new O(d log n) time quartet distance algorithm compares
with the running times of the previously fastest algorithms: the
O(n2'688) time algorithm by Nielsen et al. (2011) for general trees
and the O(nlog2 n) time algorithm by Brodal et al. (2004) for
binary trees and implemented in qust (Mailund and Pedersen,
2004). It is evident that our new implementation is fastest for
almost all practical purposes, being up to 80 times faster for
binary trees with up to 10 000 species and up to 25 times faster
for trees with degree d = 128 and up to 10 000 species.

Funding: TM receives funding from The Danish Council for
Independent Research, grant no. 12-125062.

Conflict of interest: none declared.

REFERENCES

Brodal,G.S. et al. (2004) Computing the quartet distance between evolutionary trees
in time 0( n log n ). Algorithmica, 38, 377—395.

Brodal,G.S. et al. (2013) Efﬁcient algorithms for computing the triplet and quartet
distance between trees of arbitrary degree. In: ACM-SIAM Symposium on
Discrete Algorithms (SODA )New Orleans, Louisiana, USA. Society for
Industrial and Applied Mathematics (SIAM), Philadelphia, USA, pp. 1814—1832.

Buneman,O.P. (1971) The recovery of trees from measures of dissimilarity. In:
Hodson,F.R. et al. (eds) Mathematics in the Archaeological and Historical
Sciences. Edinburgh University Press, Edinburgh.

Critchlow,D.E. et al. (1996) The triples distance for rooted bifurcating phylogenetic
trees. Syst. Biol, 45, 323—334.

Estabrook,G.F. et al. (1985) Comparison of undirected phylogenetic trees based on
subtrees of four evolutionary units. Syst. Biol, 34, 193—200.

Gray,R.D. et al. (2009) Language phylogenies reveal expansion pulses and pauses in
paciﬁc settlement. Science, 323, 479—483.

Holt,M.K. et al. (2014) On the scalability of computing triplet and quartet distances.
In: Proceedings of 16th Workshop on Algorithm Engineering and Experiments
(ALENEX) Portland, Oregon, USA. Society for Industrial and Applied
Mathematics (SLAM), Philadelphia, USA.

Mailund,T. and Pedersen,C.N.S. (2004) QDist—quartet distance between evolution-
ary trees. Bioinformatics, 20, 1636—1637.

Nielsen,J. et al. (2011) A sub-cubic time algorithm for computing the quartet dis-
tance between two general trees. Algorithms Mol. Biol, 6, 15.

Semple,C. and Steel,M. (2003) Phylogenetics. Vol. 24, Oxford University Press, New
York.

Walker,R.S. et al. (2012) Cultural phylogenetics of the Tupi language family in
Lowland South America. PLoS One, 7, e35025.

 

2080

112 [BJO'SIBILIHO[p.IOJXO'SODBIIIJOJIIIOIQ/ﬂ(11111 won popeolumoq

910K ‘09 isnﬁnV no :2

