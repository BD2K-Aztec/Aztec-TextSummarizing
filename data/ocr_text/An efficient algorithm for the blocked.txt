ORIGINAL PAPER

Vol. 31 no. 4 2015, pages 532-538
doi:10. 1 093/bioinformatics/btu6 78

 

Sequence analysis

Advance Access publication October 15, 2014

An efficient algorithm for the blocked pattern matching problem

Fei Dengl, Lusheng Wang” and Xiaowen Liu

2,3,*

1Department of Computer Science, City University of Hong Kong, Kowloon, Hong Kong, 2Department of BioHealth
Informatics, Indiana University— Purdue University Indianapolis and 8Center for Computational Biology and
Bioinformatics, Indiana University School of Medicine, Indianapolis, IN 46202, USA

Associate Editor: John Hancock

 

ABSTRACT

Motivation: Tandem mass spectrometry (MS) has become the
method of choice for protein identification and quantification. In the
era of big data biology, tandem mass spectra are often searched
against huge protein databases generated from genomes or RNA-
Seq data for peptide identification. However, most existing tools for
MS-based peptide identification compare a tandem mass spectrum
against all peptides in a database whose molecular masses are similar
to the precursor mass of the spectrum, making mass spectral data
analysis slow for huge databases. Tag-based methods extract peptide
sequence tags from a tandem mass spectrum and use them as a filter
to reduce the number of candidate peptides, thus speeding up the
database search. Recently, gapped tags have been introduced into
mass spectral data analysis because they improve the sensitivity of
peptide identification compared with sequence tags. However, the
blocked pattern matching (BPM) problem, which is an essential step
in gapped tag-based peptide identification, has not been fully solved.
Results: In this article, we propose a fast and memory-efficient algo-
rithm for the BPM problem. Experiments on both simulated and real
datasets showed that the proposed algorithm achieved high speed
and high sensitivity for peptide filtration in peptide identification by
database search.

Contact: cswang|@cityu.edu.hk or waiu@iupui.edu

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on June 25, 2014; revised on October 1, 2014; accepted on
October 13, 2014

1 INTRODUCTION

With the developments of high-throughput genomics, tran-
scriptomics and proteomics, combining multiple omics data pro-
vides a new way for studying complex biological systems. In
multiple omics data analysis, tandem mass (MS/MS) spectra
are searched against protein databases generated from genomes
or RNA-Seq data for peptide identiﬁcation. These protein data-
bases are often huge. For example, in human microbiome stu-
dies, MS/MS spectra are searched against databases containing
protein sequences generated from hundreds, even thousands, of
genomes (Dewhirst et al., 2010; Rudney et al., 2010).

Most mass spectrometry (MS)—based peptide identification
tools match an MS/MS spectrum against all peptides in a data-
base whose molecular masses are similar to the precursor mass of
the spectrum (Craig and Beavis, 2003; Eng et al., 1994; Geer

 

*To whom correspondence should be addressed.

et al., 2004; Perkins et al., 1999). These tools become slow
when the database is large. An alternative approach is based
on peptide sequence tags: peptide sequence tags are extracted
from an MS/MS spectrum and searched against a database to
identify a small number of candidate peptides that match at least
one of the tags, then a rescoring function is applied to report the
highest scoring candidate peptide (Ma et al., 2011; Mann and
Wihn, 1994; Tabb et al., 2003; Tanner et al., 2005). The trade-off
between speed and sensitivity is an important problem in tag-
based methods. To increase the sensitivity, it is essential that the
set of sequence tags extracted from a spectrum contains a correct
one that matches the target peptide. To increase the speed, long
sequence tags (length 2 5) are preferred because they are efficient
in filtering out incorrect peptides. As a result, correct long se-
quence tags are extremely useful in tag-based methods because
they speed up database searches without losing sensitivity.
However, correct long sequence tags may not be found in MS/
MS spectra because of missing and noise peaks (Jeong et al.,
2011).

To utilize long sequence tags, Kim et al. (2009) proposed to
generate a spectral dictionary containing full-length peptide con-
structions from an MS/MS spectrum for peptide identification.
A drawback of this approach is that a spectral dictionary of an
MS/MS spectrum with a large precursor mass may contain bil-
lions of peptides. J eong et al. (2011) introduced gapped peptides
to solve this problem. Since a gapped peptide represents many
non-gapped peptides, the use of gapped peptides significantly
reduces the sizes of spectral dictionaries and speeds up peptide
identification without losing sensitivity.

Similar to the method proposed by Jeong et al. (2011), repla-
cing sequence tags with gapped tags can achieve both high speed
and high sensitivity in tag-based peptide identiﬁcation. A gapped
tag is represented by a sequence of mass values instead of amino
acids. Each mass value is the mass of one amino acid residue or
the sum of the masses of several consecutive amino acid residues.
Many MS/MS spectra do not contain long sequence tags because
of missing peaks, but contain long gapped tags.

Gapped tags and gapped peptides give rise to the blocked
pattern matching (BPM) problem in which a blocked pattern
generated from a gapped tag is searched against a text to find
matched substrings. Ng et al. (2011) proposed an 0(m) algorithm
for querying a blocked pattern of length m against a text of
length n. However, the time and space needed for the preprocess-
ing step of the algorithm is 0(2"), where k is the length of the
longest substring to identify. When k = 30, the preprocessing
step is slow and the space required by the algorithm is huge.

 

532 © The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e—mail: journals.permissions@oup.com

1e /310's113umo [p.IOJXO'SOllBIIHOJUIOIQ/ﬁdllq 11101; pepeommoq

9IOZ ‘09 lsnﬁnv uo ::

Algorithm for blocked pattern matching problem

 

In this article, we present a fast and memory-efﬁcient algorithm
for the BPM problem. The time and space complexity of the
preprocessing step of the algorithm is 0(n). In the application
of MS-based peptide identiﬁcation, the time complexity for
querying a blocked pattern is sublinear in n. Experiments on
both simulated and real MS/MS data sets showed that the pro-
posed algorithm achieved high speed and high sensitivity for
peptide ﬁltration in peptide identiﬁcation by database search.

2 METHODS

2.1 The BPM problem

Let N be the set of all natural numbers and 2 a subset of N. A string
over N is called a pattern string, and a string over 2 is called a text string.
When a pattern string is searched against a text string, the pattern string
is called a blocked pattern. Let S = s1, S2, . . . , S" be a text string. The mass
of a substring s,-, s,-+1, ...,Sj of S is the sum of all numbers in the sub-
string, i.e. s,-+s,-+1+ --- +sj. Substrings Si, s,-+1, . . . , sj and Sj+1, Sj+2, . ..
S], are called consecutive substrings of S. A partition R of S is a sequence of
consecutive substrings A1, A2, . . . , Ak of S where A1 starts from s1 and Ak
ends at s”. The mass string of the partition R is a string comprised of the
masses of the consecutive substrings of R. For example, when
2={71,113, 114,128}, S=71, 113, 114, 128, A1=71, A2=113, 114 and
A3 = 128, the substrings A1, A2, A3 is a partition of S and the correspond-
ing mass string is 71, 227, 128, where 227 is the mass of A2. A blocked
pattern matches a text string if there is a partition of the text string such
that the mass string of the partition is identical to the blocked pattern. In
the previous example, the blocked pattern 71, 227, 128 matches the text
string 71, 113, 114, 128.

2.1.] The BPM problem Given a text T = t1, t2, . . . , tn over a ﬁnite
alphabet 2 C N and a blocked pattern P =p1, p2, . . . , pm over N, ﬁnd all
substrings in T that match P.

2.2 An efﬁcient algorithm for the BPM problem

In this subsection, we present an efﬁcient algorithm for the BPM prob-
lem, in which the text T is represented by a sufﬁx tree. Although the
proposed algorithm works for sufﬁx trees in which each edge is labeled
with a text string with one or more letters, here we assume that each edge
is labeled with only one letter to simplify the following analysis. Before
discussing the new algorithm, we review the steps to search a text string
against a sufﬁx tree. To ﬁnd substrings in T matching a text string
a1, a2, ...,am, we start from the root N0 of the sufﬁx tree and ﬁnd a
list of nodes N1, N2,  , Nm such that the path from the root to N,, for
1 5 i 5 m, spells out the preﬁx a1, a2, . . . , a,. In addition, the letter a,- is
the label on the edge connecting N,-_1 and N,-.

We cannot search the blocked pattern P against the sufﬁx tree directly
since the text T is over 2 (2 C N), whereas P is over N. Alternatively, we
can ﬁrst convert P into the set S2 of all text strings matching P and then
search each text string in S2 against the sufﬁx tree. Let V,- be the set of all
text strings whose masses equal p,-. An example of V,- is shown in
Supplementary Table S1. Each text string in S2 is the concatenation of
a list of text strings v1, V2, ...,vm in which v,- e V,- for 1 5 i 5 m. The
number of text strings in S2 is H1711 | Vil, which may introduce a combina-
torial explosion when |V,| > 1 for most p,- in P. As a result, it is not fast to
search P by converting it to S2 explicitly.

Preﬁxes of P are used to speed up blocked pattern searches. A text
string S is a preﬁx text string of P if S matches a preﬁx pattern string of
P. Moreover, if a preﬁx text string of P is identical to a substring of T, we
say it is an identifiable preﬁx text string of P. For example, when
2={71,113, 114,128}, P = 71, 227, 128, and T: 87, 71, 113, 114, 128,
97, both 71, 113, 114 and 71, 114, 113 are preﬁx text strings of P. The

The BPM Algorithm
Input: A text T of length n over a ﬁnite alphabet E C N and
a blocked pattern P of length m over N.

Output: All substrings in T that match P.

1. Use a sufﬁx tree to represent T, initialize U0 as the
set containing only the root of the tree, and compute
V1, V2, . . . , Vm.

2. FOI‘i = 1tomdo

For each node to E Ui_1 and each text string S E W do

4. Search S against the sufﬁx tree starting from u. If

there exists a path from u to a node 11 that spells
out the text string S, add 1) into U i.

5. EndFor

EndFor

7. Report all substrings corresponding to Um and their
positions in T.

U.)

.0

Fig. 1. An efﬁcient algorithm for the BPM problem

string 71, 113, 114 is an identiﬁable preﬁx text string of P, but 71, 114,
113 is not. If a preﬁx text string is not identiﬁable, then all text strings in
S2 with the preﬁx are not identiﬁable, making it not necessary to generate
and search these text strings.

The idea of the BPM algorithm is to speed up blocked pattern searches
by removing non-identiﬁable preﬁx text strings (Fig. 1). Each identiﬁable
preﬁx text string corresponds to a unique node in the sufﬁx tree. Let U,- be
the set of nodes corresponding to all identiﬁable preﬁx text strings that
match the preﬁx p1, p2, . . . , p,- of P. Similar to searching a text string, we
initialize U0 as the set containing only the root of the tree and ﬁnd U1,
U2, ..., Um progressively. The set Um contains the solution to the BPM
problem because the identiﬁable preﬁx text strings that match p1, p2, .. . ,
pm are substrings in T that match P. To ﬁnd U,- from U,-_1, we start from
each node a e U,-_1 and search for each text string S 6 Vi. If there exists a
node v such that the path from u to v spells out the string S, then the node
v is added to U,-. The total number of searches in the iteration, i.e. ﬁnding
U,- from U,-_1, is |U,_1| X |V,|. After the last set Um is found, the BPM
problem is solved by reporting all substrings corresponding to Um and
their positions in T, which are stored in Um. Since the text T is represented
by a sufﬁx tree, the space complexity of the algorithm is 0(n).

2.3 Time complexity

Representing the text T as a sufﬁx tree is a preprocessing step for pattern
queries. Its time complexity is 0(n). Let G be the largest number in the
blocked pattern P, that is, G = maxi”: lpi. We denote by Wk the set of all
text strings whose masses equal k. To obtain V1, V2, . . . , Vm, we generate
a lookup table W0, W1, . . . , Wg. The number of operations for comput-
ing W0, W1, .. . , WG is an exponential function of G (see the
Supplementary Material). In peptide identiﬁcation by tandem mass spec-
tra, the value G is not extremely large and the sets W0, W1, . . . , WG can
be computed in a short time (see Section 3.2). Below we focus on the
query time complexity of the BPM algorithm (steps 2—7 of the algorithm
in Fig. 1).

When preﬁx text strings of P are long, most of them cannot be found
in the text T (i.e. they are not identiﬁable) and will be removed from
further consideration. As a result, the size of U,- is often smaller than
|U,_1| X |V,|. That is the reason why pattern queries in the BPM algo-
rithm are fast.

Let N = maxT=1|V,|. The running time of searching P against the sufﬁx

tree is determined by  1 |U,-| -N. Let L be the length of the longest
preﬁx text string of P. We deﬁne X l as the set of all length l preﬁx text

strings of P and Y, as the set of all length [identiﬁable preﬁx strings of P,
for 1 5 l 5 L. Since each node in UT: 1 U,- corresponds to an identiﬁable

 

533

112 /810's113umo [p.IOJXO'SSUBUHOJUIOIQ/ﬁdllq 11101; pepeommoq

9IOZ ‘09 lsnﬁnv uo ::

F.Deng et al.

 

preﬁx text string in UZL=1 Y,, we have  1 |U,-| = Z: 1 |Y,|. The expect-
ation of |Y,| is determined by the size of X, and the probability that a
length 1 text string is found in T. As a result, the running time of the
pattern query is related to the sizes of Y, and X ,.

Each length l preﬁx text string in X, has only one partition A1, A2, ...
, Ak such that the mass string of the partition, which is a length k pattern
string, is the same to a preﬁx of P. Let 1,-be the length of A,- for 1 5 i 5 k.
We say [1, l2, . . . , [k is the conﬁguration of the preﬁx text string.
For example, when 2 = {2, 3} and P = 3, 6, 4, we have V1 = {(3)}, V2 =
{(3, 3), (2, 2, 2)} and V3 = {(2, 2)}. The conﬁguration of the length 4 preﬁx
text string 3, 2, 2, 2 is 1, 3 because it has only one partition A1: 3 and
A2 = 2, 2, 2 such that the mass string of the partition matches the preﬁx 3,
6 of P. The total number of different conﬁgurations of length l preﬁx text
strings of P is bounded by 2].

Let X? be the set of all preﬁxC text strings in X, with a conﬁguration
C=11, l2, ... , [k satisfying 1: 21.21 1,. Each preﬁx text string in XZC is the
concatenation of k text strings v1, V2, ...,vk such that v, e V,- and the
length of v,- is l,- for 1 5 i 5 k. We divide V,- into subsets
V21, V22, . . ., Vid, where d is the length of the longest text string in V,.
The subset V,”- contains all length j text strings in V,. The size of XZC is
1'15; 1 | V1,, |. Because the probability that a preﬁx text string in XZC is found
in T is a function of l, we want to represent the upper bound of lel as a
function of I. To this end, we introduce an expansion factor r2, = le-ll/j
for each set V1,. The largest expansion factor is denoted as r= max Ur”.
Since |V,-,,,| g rll' for 1 g is k,

k
IXfI=Hi=IIVuI : H521”: =rZi=1 [Er].

Because the number of conﬁgurations of preﬁx text strings in X, is
bounded by 2], we can prove that (2r)Z is an upper bound of |X,| and
further give the average-case time complexity of a pattern query in the
BPM algorithm.

THEOREM 1. When the size of 2 is a constant and 1 < 2r< IEI, the average-
case time complexity of a pattern query in the BPM algorithm is
0(nlog IEI2VN+ 114), where M is the number of matched substrings in T.

A proof of the above theorem is given in the Supplementary Material.
The average-case time complexity is obtained by analyzing the expect-
ation of the size of Y,. In the worst case, the size of Y, is bounded by the
length of the text. Consequently, the worst-case time complexity of a
pattern query in the BPM algorithm is 0(mnN).

2.4 Peptide identiﬁcation by BPM

In peptide identiﬁcation, blocked patterns are often obtained from
gapped tags. A gapped tag of a spectrum is represented by a list of
masses, each of which is the distance between two peaks in the spectrum,
which may correspond to one or more amino acids. Figure 2 gives an
example spectrum for the peptide FTALNQVR from which we can gen-
erate a gapped tag 71.04, 227.13, 128.06 rather than a sequence tag
ALNQ because the peak for the fragment FTAL is missing. A gapped
tag is converted into a blocked pattern by rounding each mass in the
gapped tag into an integer. Although rounding masses to integers has
been successfully applied to analyzing low accuracy mass spectra (Kim
et al., 2008), it may introduce large errors in analyzing high accuracy mass
spectra. For example, a large error 0.23 is introduced by rounding the
mass 426.23 (with an accuracy of 0.01) of the fragment ion ALNQ in
Figure 2 to 426. To avoid this problem, mass values are multiplied by a
scale factor before rounded to integers (Liu et al., 2013). For example,
when the scale factor is 100, the mass of the amino acid residue A is
converted into 7 104. High-accuracy fragment ion peaks and a large scale
factor are important in reducing the number of text strings matched to a
blocked pattern and speeding up pattern queries. Since the BPM algo-
rithm is designed for high-accuracy MS/MS spectra with high-accuracy

 

 

 

 

 

 

 

100

g

>.

4.:

‘a

C

3 50 -

E

(U

.2

4.:

r_u

Q)

06 A 227.13 Q

0 200 400 600 800
m/z

Fig. 2. An example spectrum for the peptide FTALNQVR. A gapped tag
71.04, 227.13, 128.08 is extracted from the spectrum based on the dis-
tances between peak pairs, where 71.04 is the mass of the amino acid
residue A, 227.13 is the sum of the masses of the amino acid residues L
and N and 128.08 is the mass of the amino acid residue Q. A blocked
pattern 71, 227, 128 is generated by rounding each mass in the gapped tag
to an integer

precursors, it may fail to efﬁciently search blocked patterns generated
from low-accuracy MS/MS spectra.

Blocked patterns can also be generated from sequence tags when local
conﬁdence scores of amino acids in the sequence tags are available
(Ma et al., 2003; Tabb et al., 2003). In general, amino acids with low
conﬁdence scores tend to be incorrect. A sequence tag is converted into a
gapped tag by replacing neighboring amino acids that have low conﬁ-
dence scores with the sum of their masses and substituting an amino acid
that has a high conﬁdence score with its single mass. The gapped tag is
further converted into a blocked pattern by rounding its masses to
integers. In practice, gaps in gapped tags are no larger than 500 Da
(Ng et al., 2011). When a sequence tag contains several consecutive
amino acids with low conﬁdence scores such that the sum of their
masses is larger than 500 Da, the sequence tag is broken into two short
sequence tags by the large gap from which gapped tags are generated. The
threshold for conﬁdence scores determines which amino acids in a se-
quence tag are combined. When the threshold is lower than the smallest
conﬁdence score in a sequence tag, every amino acid in the sequence tag is
converted to a mass in the gapped tag. When the threshold is extremely
high, all amino acids in a sequence tag is combined to a large mass and
the search of the blocked pattern is equivalent to peptide identiﬁcation by
using its precursor mass.

In peptide identiﬁcation, the residue mass values of the 20 standard
amino acid are converted into integers by using a scale factor. The al-
phabet 2 of text strings is the set of the resulting integers. Since leucine
(L) and isoleucine (I) have the same mass, they are treated as the same in
blocked pattern searches. As a result, the size of 2 is 19. A protein data-
base is converted to a text over 2 by replacing each amino acid in the
database by its corresponding integer in 2.

Blocked patterns are generated from a tandem mass spectrum and
searched against the text translated from a protein database to ﬁnd can-
didate peptides. After the candidate peptides are identiﬁed, they are ﬁl-
tered by the precursor mass of the spectrum. The resulting peptide-
spectrum—matches (PSMs) are further rescored to ﬁnd the highest scoring
one (Supplementary Fig. S2). Any scoring function can be utilized in the
rescoring step to improve the sensitivity of peptide identiﬁcation.
Searching blocked patterns against the text generated from a database
is an essential step that determines the speed and sensitivity of peptide
identiﬁcation.

In peptide identiﬁcation by tandem mass spectra, the numbers (letters)
in P are usually not extremely large. When the largest gap in gapped tags

 

534

112 /310's113umo [p.IOJXO'S311BIIIJOJUIOIQ/ﬁdllq 11101; pepeommoq

9IOZ ‘09 lsnﬁnv uo ::

Algorithm for blocked pattern matching problem

 

is 500 Da and the scale factor is 100, the largest number in P is 50 000. In
this case, the number N in Theorem 1 can be treated as a constant value.
In addition, log|2|2r in Theoreml is usually smaller than 1. In this ap-
plication, the average-case time complexity for a pattern query is sub-
linear in the size of the database.

The numbers in a blocked pattern may have small errors that are
introduced in measuring the m/z values of fragment ions. To account
for these errors, an error tolerance is allowed when blocked patterns
are searched against a text. In the BPM algorithm, a text string is
included into the set V,- if the difference between p,- and the sum of all
the numbers in the text string is within a predeﬁned error tolerance.

3 RESULTS

We implemented the BPM algorithm in Java and tested it on
both simulated and real datasets. All the tests were performed on
a Linux (64-bit) desktop PC with a 1.4 GHz CPU and 32 GB
RAM. We were not able to compare the BPM algorithm with
that described in Ng et al. (2011) because it is not available.

3.1 Dataset

A dataset generated from human cell lysate (Frese et al., 201 l) was
used to test the BPM algorithm. In the preparation of the dataset,
the protein mixture was analyzed on an Orbitrap Velos (Thermo
Fisher Scientiﬁc) coupled with a hi gh-performance liquid chroma-
tography system. High-accuracy MS and MS/MS spectra were
collected at a resolution of 30 000 and 7500, respectively.
Triplicate higher energy collisionally activated dissociation
datasets were then acquired, of which only one with 37 810
tandem mass spectra was selected to evaluate the BPM algorithm.
Details of the experiment can be found in Frese et al. (2011).

3.2 Running time analysis

The human proteome database (about 12 MB) was downloaded
from the Swiss-Prot database. We constructed a sufﬁx tree from
the human proteome database using the Ukkonen’s algorithm
(Ukkonen, 1995) implemented by Nelson and ported to Java by
Havsiyevych (The source code of the implementation can be
found at http://illya-keeplearning.blogspot.com/2009/04/sufﬁx-
trees-java-ukkonens-algorithm.html). The running time for the
sufﬁx tree construction was about 30 s.

In the implementation of the BPM algorithm, the scale factor is
100. Let 2 be the alphabet generated from the 19 amino acids (the
amino acids I and J are treated as the same). In practice, gaps
typically do not exceed 500 Da (Ng et al., 2011), and the largest
number in blocked patterns is 50 000. For each number k between
0 and 50 000, we generated the set Wk of all text strings on 2 such
that the sum of the numbers in the text string is the same to k with
an error tolerance of 5. The size of the lookup table

W1, W2,  W50000, that is,  kal, is about 3.34 x 106.

The running time for generating the lookup table was about 1 s.
In the following analyses, we will ignore the preprocessing time for
generating the sufﬁx tree and the lookup table and only consider
spectral query time unless otherwise stated.

The value log1212r deﬁned in Section 2 is the exponent that
determines the time complexity of the BPM algorithm. We
estimated the value of r when the largest number in a blocked
pattern is 50 000. We divided Wk into subsets WM, Wk,2, 

WkJ', . . ., where1 W,“- contains all length j text strings in Wk. Let
rk =max jl WkJ-li. The histogram of rk shows that rk g 5.7
(Supplementary Fig. S3). Since log19(2 x 5.7) w 0.83, the aver-
age-case time complexity of the BPM algorithm is sublinear in
the size of the database in this application.

When a blocked pattern of length m is generated from a se-
quence tag with n amino acids, we deﬁne n/m as the gap ratio of
the pattern. For example, the blocked pattern 71, 227, 128 can be
generated from a sequence tag ALNQ (71, 113, 114, 128), and
the gap ratio is 4/3. We tested the BPM algorithm on simulated
data to ﬁnd the relationship between the running time and the
gap ratio. Blocked patterns were generated directly from peptides
in the human proteome database: A total of 1 million peptides of
length 20 were randomly selected from the database. Given a
peptide A=a1, a2, ...,a20, a block A[i,]](l g igj g 20) de-
notes the substring of a,, a,+1, . . . , a,. To construct a blocked
pattern from A, we ﬁrst partition it into blocks of length k (pos-
sibly except for the last block), i.e. A[1, k], A[k+ 1, 2k],
.. . , A[lk+ 1, 20] (l= 1%] — l), and then sum up the rounded
scaled masses (the scale factor is 100) of the amino acids in
each block. The resulting list of 1%] numbers is a blocked pattern
with a gap ratio about k. Four patterns were constructed for
each peptide for k = l, 2, 3 and 4. When the gap ratio increases
from 2 to 4, the range of the largest extension factors r for the
blocked patterns changes from [1,43] to [2. 1,57] (Supplementary
Fig. S4). The blocked patterns were then searched against the
sufﬁx tree constructed from the human proteome database. The
average query time for blocked patterns was fast for all four gap
ratios (Supplementary Fig. S5). When the gap ratio was 4, the
average query time was less than 0.003 s per pattern. In addition,
the average query time signiﬁcantly increased as the gap ratio
increased, so large gaps should be avoided to guarantee that the
query time is fast in practice.

3.3 Evaluation on the real dataset

To evaluate the performance of the BPM algorithm, we generated
a set of PSMs from the human lysate dataset. MS-GF+ (Kim
et al., 2008) was employed to search each spectrum in the dataset
against a target-decoy concatenated human proteome database.
With 1% spectrum level false discovery rate (FDR), MS-GF+
identiﬁed 13135 spectra (in about 18min), which are assumed
correct and used as a gold standard for the following evaluation.
The 13 135 spectra are called identifiable spectra. For brevity, the
set of 13 135 spectra is referred to as the HUMAN dataset.

3.3.] Evaluation criteria In peptide identiﬁcation, a set of
blocked patterns are extracted from a spectrum and searched
against a protein database to ﬁnd candidate peptides that con-
tain at least one blocked pattern. If one of the extracted blocked
patterns is correct (in the target peptide) and the ﬁltration based
on the blocked patterns reports a set of candidate peptides that
contains the target one, then the spectrum is said to be efﬁciently
ﬁltered. The ﬁltration efﬁciency is deﬁned as follows:

filtration efficiency

 

= Number of identiﬁable spectra that can be efﬁciently filtered
Number of identiﬁable spectra '

 

535

112 /310's113umo [p.IOJXO'S311BIIIJOJUIOIQ/ﬁdllq 11101; pepeommoq

9IOZ ‘091sn3nv uo ::

F.Deng et al.

 

A
H
_L-I—r

 

 

MU
1:51}
5'1: r .— .___ -- MED
_ - E .-_T____ {I =?
n am. "a: 1:1. c a
3?, _1 “ex “33% (2:31}
H_i- q' -I.._‘_ - .'_"_--t _
3" m "it "a “fin, ” LEE}
3  tat-s.
ID ' 'n' 4?"
'5 an e H “a. '"b ..h
E “H- Rﬁ nah.
H "-. H!- "'-I _
E 5'] EH HK‘H- 
I- at. ‘-.‘_:-t.1_
E in H m“- 
H 53am 
LL 3::- '-  -
“$5”
at: ..1

 

 

i '5 i i is
Pattern length

 

 

 

 

4:
35
iii
13 31}
C
8
m- 125
e a
m ‘1.
E 2“"~._Ikk_‘_
.5 k 
G15 ' ' ._ EE-
  "H.514.
I:  13.- ""--.~ﬁ'"- —___
:1 1D “x, '“- __'-- . '~— _
a: e-__ _ e2,“  _____
"--+}__  ' ' ' - ---'.'_'--—-_
 ..B__  I-.___
5  i __'EL——_Lg_--7'.'T--—_
"T——__{’___ __'JI———_'_._|_ﬂ
I _‘— --i

E- 7‘ II! 1|}
Pattern length

Fig. 3. Performance of the BPM algorithm with various settings of the pattern length and the conﬁdence score threshold c on the HUMAN dataset: (a)

the ﬁltration efﬁciency and (b) the running time

The second evaluation criterion is the query speed of blocked
patterns. The speed of peptide identiﬁcation is also related to the
number of the candidate peptides reported by blocked pattern-
based ﬁltration, which is the third evaluation criterion.

3.3.2 Pattern generation We performed de novo sequencing on
the HUMAN dataset using PEAKS 6.0 (Ma et al., 2003) and
reported 10 peptides with the highest scores for each spectrum.
Each peptide was converted into a blocked pattern as follows.
Consecutive amino acids were replaced by the sum of their
masses if they all had a local conﬁdence score < c (a predeﬁned
threshold), whereas an amino acid with a local conﬁdence score
2 c was replaced by its single mass. The masses were multiplied
by the scale factor 100 and rounded to integers.

3.3.3 Pattern length and confidence score thresholds We tested
the ﬁltration efﬁciency and speed of the BPM algorithm by vary-
ing the two parameters, i.e. the length of blocked patterns and
the threshold c for conﬁdence scores, on the HUMAN dataset.
To obtain length l blocked patterns, we enumerated all length l
substrings of the blocked patterns generated from the dataset.
The ﬁltration efﬁciency of the algorithm decreases and the speed
of the algorithm improves with the increase of the length of
blocked patterns (Fig. 3). As the patterns become longer, the
average number of candidate peptides for each spectrum de-
creases (Table l). Particularly, when the pattern length :7,
most spectra contain only 0 or 1 candidate peptide. When the
pattern length is 5 or 6, the BPM algorithm achieves a good
balance between the speed and ﬁltration efﬁciency. Moreover,
when the pattern length is ﬁxed, the ﬁltration efﬁciency decreases
as the parameter c increases, while the running time is almost the
same (Fig. 3). Therefore, a relative low cutoff value c should be
used in practice.

There are three parameters: the pattern length, the conﬁdence
score threshold and the number of blocked patterns, which affect
the ﬁltration efﬁciency of the BPM algorithm. When the conﬁ-
dence score threshold is ﬁxed, the number of blocked patterns
extracted from a spectrum decreases when the pattern length
increases and more shorter blocked patterns can be extracted
from a spectrum than longer ones. The high-ﬁltration efﬁciency
of short blocked patterns has two possible reasons: the large
number of short patterns and the short pattern length. To ﬁnd
which is the main reason, we tested the ﬁltration efﬁciency of the
BPM algorithm by ﬁxing the conﬁdence score threshold and the

Table 1. The average number of candidate peptides reported by the ﬁl-
tration based on blocked patterns for the spectra in the HUMAN dataset

 

Pattern length 4 5 6 7 8 9 10

 

Number ofcandidate peptides 4.18 1.15 0.84 0.74 0.60 0.47 0.36

 

Note: The local conﬁdence score cutoff c is ﬁxed as 60.

number of patterns and varying the pattern length. The experi-
ment results show that the main reason that short gapped tags
have high-ﬁltration efﬁciency is the short pattern length, not the
large number of short patterns (see the Supplementary Material).

3.3.4 Comparison with a baseline algorithm We compared the
running time of the BPM algorithm with a trivial baseline algo-
rithm. Given a blocked pattern P=p1,p2,  pm and a text
T = t1, t2, .. . , tn, the baseline algorithm simply examines, for
each position i, l f if n, if there is a preﬁx of t,, t,+1, ...,t,,
that matches P and outputs matched preﬁxes. The time complex-
ity of the algorithm is 0(nL), where L is the length of the longest
text string that matches P. By setting the pattern length as 4 and
the conﬁdence score threshold as 60, a total of 170 149 blocked
patterns were extracted from the HUMAN dataset using the
described method. Although the baseline algorithm took about
9 h to search all the patterns against the human proteome data-
base, the BPM algorithm took only less than 1min, which is a
signiﬁcant 540 times speedup.

3.3.5 Comparison with sequence tags For each spectrum in the
HUMAN dataset, we generated both ordinary patterns (se-
quence tags) and blocked patterns from the 10 peptides reported
by PEAKS. When ordinary patterns were generated, the conﬁ-
dence score threshold was set as 0, and all amino acids in a
peptide were replaced by their single masses. Note that the
length of a blocked pattern may not be the same to its corres-
ponding sequence tag. For example, the length of the sequence
tag ALNQ (71, 113, 114, 128) is 4, and the length of the blocked
pattern 71, 227, 128 is 3. To compare blocked patterns with or-
dinary patterns, we redeﬁne the length of a blocked pattern as
the length of the sequence tag (i.e. number of amino acids) from
which the blocked pattern is generated.

 

536

112 /310's113umo [p.IOJXO'S311BIIIJOJUIOIQ/ﬁdllq 11101; pepeommoq

9IOZ ‘091sn3nv uo ::

Algorithm for blocked pattern matching problem

 

 

+ [limited pattern 
+ |:lrt:liner'1iI pellern!

    

Filtratinn ellII::IerItI.':_III Ht}
[2.

 

 

7
Pattern length

'Iﬂlil- - --- .. E _ _I
|

+ talented pattern
+ ordinary pattern .

   

5
_-
In
D

Running lime [sewn-:1 ]

 

Ill-“5 '
REL-1".— .. _
5 E:

1‘
Pattern length

Fig. 4. Comparisons between blocked patterns and ordinary patterns: (a) the ﬁltration efﬁciency and (b) the running time

Both the blocked patterns and ordinary patterns were searched
against the sufﬁx tree. The parameter c was ﬁxed as 60 for gen-
erating blocked patterns. The BPM algorithm with blocked pat-
terns achieved a higher ﬁltration efﬁciency than that with
ordinary patterns (Fig. 4a). The difference in the ﬁltration efﬁ-
ciency increases as the pattern length increases (Fig. 4a). By con-
trast, the running time of the BPM algorithm with blocked
patterns is longer than that with ordinary patterns (Fig. 4b),
especially when pattern length is 4. However, the difference in
the running time becomes smaller when the pattern length in-
creases. Particularly, when the pattern length : 6, the running
time is within 20s for both methods. The experiments demon-
strated that replacing sequence tags with blocked patterns im-
proved the ﬁltration efﬁciency without signiﬁcant increase of the
running time.

3.3.6 Comparison with MASCOT To further investigate the
ﬁltration efﬁciency of the BPM algorithm, we ran MASCOT
(Perkins et al., 1999) on the whole human cell lysate dataset
with 37 810 tandem mass spectra. The error tolerances for pre-
cursor masses and fragment ion masses were set as 20 ppm and
0.05 Da, respectively. Using the target-decoy approach,
MASCOT identiﬁed 10953 spectra and 9284 distinct peptides
with 1% spectrum level FDR in 6.1 min. Without any ﬁltering
algorithm, MS-GF+ identiﬁed 13135 spectra and 10800 pep-
tides with the same FDR. It identiﬁed 2141 peptides missed by
MASCOT and missed 625 peptide identiﬁed by MASCOT.
When the BPM algorithm (pattern length = 4, conﬁdence
score threshold = 60) was used as a ﬁltering step for MS-
GF+, a total of 982 peptides were missed because of the ﬁltra-
tion, and MS-GF+ identiﬁed 11 845 spectra and 9818 peptides.
MS-GF + with the BPM ﬁltering algorithm identiﬁed 1456 pep-
tides missed by MASCOT and missed 922 peptides identiﬁed by
MASCOT. When coupled with the BPM algorithm, the sensitiv-
ity of MS-GF + is still comparable to MASCOT because of the
high-ﬁltration efﬁciency of the BPM algorithm.

3.3.7 Searching spectra against the human genome Most existing
software tools for peptide identiﬁcation by database search are
slow when the protein database is huge. We evaluated the speed
of the BPM algorithm by searching the HUMAN dataset against
the six-frame translation of the human genome. This approach
has found many important applications in proteogenomics

studies (Andersen and Mann, 2001; Bitton et al., 2010; Yates
et al., 1995).

The complete human genome (Homo_sapiens.GRCh37.74)
was downloaded from Ensembl. The translation of each chromo-
some starts from the ﬁrst, second and third nucleotide on each
strand according to the standard genetic code regardless of the
position of the start codon. The HUMAN dataset was searched
against the translated putative protein sequences using both MS-
GF + and the BPM algorithm. The translated protein database
was split into parts of about 100 MB to reduce the memory usage
of MS—GF + and the BPM algorithm. The largest memory usage
of the BPM algorithm for searching a 100 MB database was
about 12 GB. The average running time for MS-GF+ was 3 s
per spectrum while it was 0.3 s for the BPM algorithm when the
pattern length was 4 (Supplementary Fig. S7). The running time
of the BPM algorithm decreased with the increase of the pattern
length. When the pattern length was 6, the running time was
about 0.08 s per spectrum.

4 CONCLUSIONS

Peptide identiﬁcation of MS/MS spectra by database search has
been dominated by the approach of comparing a spectrum
against all peptides in the protein database whose molecular
masses are similar to the precursor mass of the spectrum.
However, in the era of big data biology, this approach may
become slow with the rapid growth of the sizes of protein data-
bases. An alternative approach based on sequence tags or
blocked patterns (gapped tags) is fast for identifying peptides
when the database is huge. In this article, we proposed an efﬁ-
cient BPM algorithm for ﬁltering peptides using blocked patterns
and tested it on simulated and real datasets. The experiments
showed that the BPM algorithm achieved high speed in ﬁltration
of peptides, even when the database is huge, e.g. the six frame
translation of the human genome. We also compared blocked
patterns with sequence tags for peptide ﬁltration and found that
blocked patterns outperformed sequence tags in terms of the
sensitivity of peptide ﬁltration. Because the BPM algorithm is
fast and sensitive, it is a promising tool for searching MS/MS
spectra against huge protein databases. In practice, the length of
blocked patterns plays an important role in the performance of
the BPM algorithm. The experiments on the length of blocked

 

537

112 /310's113umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; pepeommoq

9IOZ ‘091sn3nv uo ::

F.Deng et al.

 

patterns showed that the BPM algorithm achieved a good bal-
ance between the ﬁltration efﬁciency and the running time when
the length was 5 or 6.

Funding: This work was supported by National Science
Foundation of China (NSFC 61373048 to L.W. and ED), a
grant from the Research Grants Council of the Hong Kong
Special Administrative Region, China (CityU 122511 to L.W.
and ED), and a startup fund provided by Indiana University-
Purdue University Indianapolis (to X.L.).

Conﬂict of interest: none declared.

REFERENCES

Andersen,J.S. and Mann,M. (2001) Mass spectrometry allows direct identiﬁcation
of proteins in large genomes. Proteomics, 1, 641—650.

Bitton,D.A. et al. (2010) An integrated mass-spectrometry pipeline identiﬁes novel
protein coding-regions in the human genome. PLoS One, 5, 68949.

Craig,R. and Beavis,R.C. (2003) A method for reducing the time required to match
protein sequences with tandem mass spectra. Rapid Commun. Mass Spectrom,
17, 2310—2316.

Dewhirst,F.E. et al. (2010) The human oral microbiome. J. Bacteriol, 192,
5002—5017.

Eng,J.K. et al. (1994) An approach to correlate tandem mass spectral data of pep-
tides with amino acid sequences in a protein database. J. Am. Soc. Mass
Spectrom, 5, 976—989.

Frese,C.K. et al. (2011) Improved peptide identiﬁcation by targeted fragmentation
using CID, HCD and ETD on an LTQ-Orbitrap Velos. J. Proteome Res., 10,
2377—2388.

Geer,L.Y. et al. (2004) Open mass spectrometry search algorithm. J. Proteome Res.,
3, 958—964.

J eong,K. et al. (2011) Gapped spectral dictionaries and their applications for data-
base searches of tandem mass spectra. Mol. Cell. Proteomics, 10, M110.002220.

Kim,S. et al. (2008) Spectral probabilities and generating functions of tandem mass
spectra: a strike against decoy databases. J. Proteome Res., 7, 3354—3363.

Kim,S. et al. (2009) Spectral dictionaries: integrating de novo peptide sequencing
with database search of tandem mass spectra. Mol. Cell. Proteomics, 8, 53—69.

Liu,X. et al. (2013) Identiﬁcation of ultramodiﬁed proteins using top-down tandem
mass spectra. J. Proteome Res., 12, 5830—5838.

Ma,B. et al. (2003) PEAKS: powerful software for peptide de novo sequencing by
tandem mass spectrometry. Rapid Commun. Mass Spectrom, 17, 2337—2342.

Ma,Z.Q. et al. (2011) ScanRanker: quality assessment of tandem mass spectra via
sequence tagging. J. Proteome Res., 10, 2896—2904.

Mann,M. and Wilm,M. (1994) Error-tolerant identiﬁcation of peptides in sequence
databases by peptide sequence tags. Anal. Chem, 66, 4390—4399.

Ng,J. et al. (2011) Blocked pattern matching problem and its applications in prote-
omics. In: Proceedings of 15th Annual International Conference on Research in
Computational Molecular Biology (RECOMB 2011). Vancouver, BC, Canada:
Springer-Verlag Berlin Heidelberg. pp. 298—319.

Perkins,D.N. et al. (1999) Probability-based protein identiﬁcation by searching
sequence databases using mass spectrometry data. Electrophoresis, 20,
3551—3567.

Rudney,J. et al. (2010) A metaproteomic analysis of the human salivary microbiota
by three-dimensional peptide fractionation and tandem mass spectrometry. M ol.
Oral M icrobiol., 25, 38—49.

Tabb,D.L. et al. (2003) GutenTag: high-throughput sequence tagging via an empir-
ically derived fragmentation model. Anal. Chem, 75, 6415—6421.

Tanner,S. et al. (2005) InsPecT: identiﬁcation of posttranslationally modiﬁed pep-
tides from tandem mass spectra. Anal. Chem, 77, 4626—4639.

Ukkonen,E. (1995) On-line construction of sufﬁx trees. Algorithmica, 14, 249—260.

Yates,J.R. et al. (1995) Mining genomes: correlating tandem mass spectra of mod-
iﬁed and unmodiﬁed peptides to sequences in nucleotide databases. Anal.
Chem, 67, 3202—3210.

 

538

112 /§.IO'S[BU.IHO[p.IOJXO'8311BIIIJOJU101q/ﬁ(11111 11101; pepeommoq

9IOZ ‘091sn3nv uo ::

