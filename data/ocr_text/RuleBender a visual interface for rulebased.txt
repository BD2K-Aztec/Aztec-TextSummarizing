Vol. 27 no. 12 2011, pages 1721-1722
APPS NO  doi: 10. 1093/bioinformatics/btr197

 

Systems biology

Advance Access publication April 14, 2011

RULEBENDER: a visual interface for rule-based modeling
Wen Xu‘, Adam M. Smith‘, James R. Faedeer and G. Elisabeta Marailﬁk

1Department of Computer Science, University of Pittsburgh and 2Department of Computational and Systems
Biology, University of Pittsburgh School of Medicine, Pittsburgh, PA 15260, USA

Associate Editor: Trey Ideker

 

ABSTRACT

Summary: Rule-based modeling (RBM) is a powerful and
increasingly popular approach to modeling intracellular biochemistry.
Current interfaces for RBM are predominantly text-based and
command-line driven. Better visual tools are needed to make RBM
accessible to a broad range of users, to make specification of models
less error prone and to improve workflows. We present RULEBENDER,
an open-source visual interface that facilitates interactive debugging,
simulation and analysis of RBMs.

Availability: RULEBENDER is freely available for Mac, Windows and
Linux at http://rulebender.org.

Contact: faeder@pitt.edu; marai@cs.pitt.edu

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received and revised on February 25, 2011; accepted on April 5,
2011

1 INTRODUCTION

Rule—based modeling (RBM) enables precise and concise
speciﬁcation of biochemical models by representing molecules
as structured objects and molecular interactions as rules for
transforming the attributes of these objects. The two most common
languages for specifying RBMs, K (Feret et al., 2009) and the
BIONETGEN language (Faeder et al., 2009), have nearly identical
syntax and semantics based on graphs and graph rewriting. Each
language and associated modeling framework has been used to
construct a wide variety of models of biochemical processes. In
this article, we focus on the BIONETGEN framework.

While the potential beneﬁts of RBM to biology are outstanding,
building an RBM and detecting and correcting modeling errors
(i.e. debugging) can be tedious and frustrating. RBMs are typically
deﬁned by the user Via a text ﬁle. The user deﬁnes a set of molecules
and proceeds to write rules governing their interactions derived from
speciﬁc knowledge about the system. Although individual rules are
easy to write, it is often difﬁcult to fully grasp the implications
of a set of rules; the challenge in grasping the global perspective
is particularly acute when trying to understand models written
by different researchers. This problem complicates debugging and
reduces the accessibility of RBM, especially for users with limited
programming experience.

Simulating and analyzing RBMs pose additional challenges.
Once a working model has been deﬁned, an RBM can be
simulated using a number of different approaches including ordinary
differential equations, stochastic simulations or particle—based
stochastic simulations (ColVin et al., 2010; Danos et al., 2007;

 

*To whom correspondence should be addressed.

Sneddon et al., 2011). The typical workﬂow relies on an external
plain text editor, command console and external plotting tools
for displaying simulation results, which is inconvenient because it
requires modelers to switch between different tools over repeated
cycles of model editing and simulation. The process gets further
complicated when exploring alternative simulations and models.

Here we present RULEBENDER, an integrated development
environment that aims to facilitate the construction, simulation and
analysis of RBMs through interactive editing, syntax checking,
Visualization and integrated execution.

2 RULEBENDER

RULEBENDER provides a complete development environment
for RBM. RULEBENDER is freely available and open source
[Java with SWT, PREFUSE (http://prefuse.org) and JFREECHART
(http://www.jfree.org/jfreechart) libraries] RULEBENDER’s main
features include syntax checking, syntax highlighting, Visual global
model exploration, integrated execution of simulations, support
for multiple simulation modules, simulation joumaling, interactive
plotting including comparison of multiple datasets and parameter
scanning. The three main interface windows provide support for
RBM construction and simulation through interactive editing, Visual
model exploration and results analysis capabilities, respectively, as
shown in Figure 1.

Model browsing and editing: the Model Editor window (Fig. 1,
left panel) in RULEBENDER consists of a toolbar, a tabbed editor
pane and a console that displays output of simulations and other
tasks performed on the model. In addition to standard text editor
capabilities, the editor provides a number of useful features for
creating and editing RBMs in the BIONETGEN Language (BNGL)
format. These features include syntax highlighting, code folding,
error highlighting and tabbing to allow multiple ﬁles to be open at
the same time. The editor also provides a BNGL model template that
expedites model construction. A detailed description of the BNGL
language is given in Faeder et al. (2009); an example rule is shown
in Supplementary Figure 81. The editor window could easily be
adapted to support other RBM languages.

Model exploration and debugging: to further support model
understanding and debugging, the Visualization Viewer window
(Fig. 1, middle panel) provides both global and local Views of the
model currently loaded in the Model Editor window. The Views are
automatically generated from models.

The ﬁrst global View is the Contact Map, which is a graph
representation of the molecules and rules in the model. Molecules
(gray shapes in Fig. l) are the basic units of a BIONETGEN model and
may contain components (yellow and purple rectangles in Fig. l),
which represent internal and binding states of the molecule. Edges
in the map show that two components may be bound through the

 

© The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 1721

112 /§.IO'SIBUJHOprOJXO'SOTlBIIIJOJUTOTQ/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

W.Xu et aI.

 

Model Editor _' visualization viewer

NH!- UD-E" HIV! HI“! 1'! Il'ﬂ 'II'IIIJIJIIIE

eq'r_rI-:I :mul .3

Pin. .'II_| Lulllaql Marl ll'ﬁlIQ-
Lonun Han rm-clIe- FIJI-Id tart-cm. '-
FL-i -n:| He fa: Inllutnu L-anl' . ,. I'-
lllrmmI-I rum-'1 "Ind-II mun: :IIII-IIIII-II '

$49.ngth I IﬂﬂlJH-Ie Lragh EFHIESE-“Dﬂ-H'f imam

 

Simulation REEults Viewer
EDAT ml: MLmIal P".
!|:l"_"|ﬂ'|:‘=e
Hr.- lll'
.'l|-I.'I|r|'-J'.I IJ-ﬁl -'3-FI E'f'hna-l-Edat
Mr cqlu_*¢l_:-'u I'n: “BEL?
U31: qul_'¢l_tﬂﬁiCII '
NIT eq|r_'-¢I.net gym-s
E-D-‘IT l-l'ILﬂeleﬂl".
I_I_II'|I nl-Ij"_rll'<l'IJ' 'I-“I'I:
Hhhl rl|" m". '.III;I

II III“ Imlir 'I'J'ul‘i "Mil

 

UuI-nr 5
'If him-II.  “'5'?
I? 533:: 2 vi..-
Fir“ In? E "
w“ smurf: .'.‘£|."~
'4 5’II:_'L-fh_5-tll-
Hu' l._l.rl|..' 3"“
'i' IIIII: “an;
-3 Libel?
ii 5-“! run I
lam I-TH
fllllvﬁlllll h||| kIIII 1". III-E ' Fr . . _.
up“ l_!-_L,_'; * : I. 1* s. u 'h' H.- I' s p :: II- It-
In} w 1' III'II
Emit-s Sol-Jun: H.“ 5-hli_|:'I: El'ucjrhjas 'ljrh: LEI-c

 

“HF IMP-Rhe. i.-:L:. Ilq'lul 'm-aul may.
[run Imi- th.‘_:u:

 

DIE—mid IIII CID-IT NJII “91.911”

Fig. 1. The RULEBENDER interface with Model Editor window including Console for simulation (left), a Visualization Viewer window (middle) and a
Simulation Results Viewer window (right). RULEBENDER’s main features include syntax checking, syntax highlighting, visual global model exploration,
integrated execution, support for multiple simulation modules, simulation journaling, interactive plotting including comparison of multiple datasets and

parameter scanning.

action of a rule. Selecting an edge brings up a list of all rules that
create or destroy bonds between the linked components. Selecting
one of these rules brings up bubble sets (Collins et al., 2009) that
highlight separately the components modiﬁed by the rule (called the
reaction center) and the components whose states are required to
have speciﬁed values for the rule to be applied (called the reaction
context), as shown in Figure 1 and Supplementary Figure S2. The
Contact Map provides global organization for a rule set and enables
the user to browse the rules in a systematic fashion.

An alternative global view is the Inﬂuence Graph, which shows
interactions between the rules. A rule can activate (inhibit) another
rule by producing (consuming) a reactant required by the other
rule. Selecting a rule node displays the rule text in the lower
right information pane of the visualization window (Supplementary
Fig. S3). Both visualizations enable quick identiﬁcation of ‘orphan’
molecules or rules that do not interact with other molecules/rules,
thus further supporting understanding and debugging of the models.

Simulation and results analysis: BIONETGEN simulator commands
can be performed on the model currently loaded in the Editor
window. If the model is valid, simulation results are displayed in
the Simulation Results Viewer. Otherwise, syntax errors and other
output are reported via the console in the lower section of the editor
window. Parameter scanning (Supplementary Fig. S4), which allows
the researcher to interactively see the effects of varying the value of
a single model parameter, is also supported.

The simulation results, along with the model ﬁles, parameters
scan results, etc. are stored and managed by RULEBENDER through a
journaling system that allows users to distinguish simulation results.
The Simulation Results Viewer contains an explorer in the upper left
quadrant of the window (Fig. 1, right panel), which makes it easy to
retrieve the exact version of the model that produced a speciﬁc set
of results.

Network ﬁles generated from a model may be displayed with
syntax highlighting (Supplementary Fig. S5). Charts in linear or log
scale show the time series for concentrations of chemical species
and observables as seen in the far right window of Figure 1. Any
number of species and observables can be compared in the same
chart (Supplementary Fig. S6). Furthermore, multiple simulation
runs can be compared in order to analyze the effects of changing the
model (Supplementary Fig. S7).

A species and observables browser is also provided (lower left
of the results viewer in Fig. 1). Graph—based models of species and
observables, similar to the Contact Map, are displayed by selecting
an observable in the Simulation Results Viewer (Supplementary
Fig. S8).

3 CONCLUSION

RULEBENDER is a powerful tool for the development of RBMs that
makes RBM accessible to users with a wide range of computational
experience, while providing a uniform interface across computing
platforms. The support of RBM creation, debugging and interactive
visualization expedites the RBM learning process and reduces model
construction time; while built—in model simulation and analysis with
multiple linked views streamline the execution and analysis of newly
created models and generated networks. A development cycle that
includes close interaction with expert users allows RULEBENDER to
better serve the needs of the systems biology community.

ACKNOWLEDGEMENTS
Thanks are also due to Yao Sun, John Sekar and Bill Hlavacek.

Funding: National Science Foundation (grant numbers CCF—
0829788, IIS—0952720); National Institutes of Health (grant
numbers GM—076570, ULl—RR024153).

Conﬂict of Interest: none declared.

REFERENCES

Collins,C. et al. (2009) Bubble sets: revealing set relations with isocontours over
existing visualizations. IEEE Trans. st. CG, 15, 1009—1016.

Colvin,J. et al. (2010) RuleMonkey: software for stochastic simulation of rule-based
models. BMC Bioinformatics, 11, 404.

Danos,V. et al. (2007) Scalable simulation of cellular signaling networks. Lect. Notes
Comput. Sci, 4807, 139—157.

Faeder,J.R. et al. (2009) Rule-based modeling of biochemical systems with BioNetGen.
Methods Mol. Biol, 500, 113—168.

Feret,J. et al. (2009) Internal coarse-graining of molecular systems. Proc. Natl Acad.
Sci. USA, 106, 6453—6458.

Sneddon,M.W. et al. (2011) Efﬁcient modeling, simulation and coarse-graining of
biological complexity with NFsim. Nat. Methods, 8, 177—183.

 

1 722

112 /§JO'S{BUJHOIp.IOJXO'SOIlBIHJOJUIOIQ/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

