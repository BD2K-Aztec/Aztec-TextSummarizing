Vol. 29 no. 8 2013, pages 996-1003
doi: 1 0. 1093/bioinformatics/btt098

ORIGINAL PAPER

 

Sequence analysis Advance Access publication February 23, 2013

Improvements on bicriteria pairwise sequence alignment:
algorithms and applications

Maryam Abbasil, LuI’s Paquete”, Arnaud Liefooghe2, Miguel Pinheiro3 and Pedro Matias1

1CISUC, Department of Informatics Engineering, University of Coimbra, Pelo ll, 3030—290 Coimbra, Portugal, 2LIFL, UMR
CNRS 8022, Bat. M3, Universite Lille 1, 59655 Villeneuve d’Ascq, France and 8Bioinformatics Unit, Biocant, 8060—197

Cantanhede, Portugal
Associate Editor: Martin Bishop

 

ABSTRACT

Motivation: In this article, we consider the bicriteria painNise se-
quence alignment problem and propose extensions of dynamic pro-
gramming algorithms for several problem variants with a novel pruning
technique that efficiently reduces the number of states to be pro-
cessed. Moreover, we present a method for the construction of phylo-
genetic trees based on this bicriteria framework. Two exemplary cases
are discussed.

Results: Numerical results on a real dataset show that this approach
is very fast in practice. The pruning technique saves up to 90% in
memory usage and 80% in CPU time. Based on this method, phylo-
genetic trees are constructed from real-life data. In addition of provid-
ing complementary information, some of these trees match those
obtained by the Maximum Likelihood method.

Availability and implementation: Source code is freely available
for download at URL http://eden.dei.uc.pt/~paquete/MOSAL, imple-
mented in C and supported on Linux, MAC OS and MS Windows.
Contact: paquete@dei.uc.pt

Received on October 15, 2012; revised on January 31, 2013; accepted
on February 20, 2013

1 INTRODUCTION

Recently, there has been a growing interest on the multi-criteria
formulation of optimization problems that arise in computa-
tional biology (see an extensive review in Handl et al., 2007).
However, exact solution approaches for most of these new for-
mulations have not been thoroughly investigated, with the ex-
ception of the work of Roytberg et al. (1999) for bicriteria
pairwise sequence alignment.

For an alignment go of sequences A := (a1, ...,a,,,) and
B :2 (b1, ...,b,,2), we denote by s(g0) the substitution score of
alignment g0 according to a substitution matrix M, and by d(g0)
and g(g0), the number of indels and gaps (maximal consecutive
run of indels) of go. The two following score vector functions are
considered:

VSD(§0) 2: (SW), — d(<0))

VSGW) 2: (SW), — g(<0))

 

*To whom correspondence should be addressed.

Two bicriteria problems that consist of finding the alignments
that are ‘maximal’ with respect to the score vector functions
above are as follows:

arg vmax{g0 : VSD(g0), go 6 £15} (VSDP)

arg vmax{g0 : VSG(g0), go 6 d5} (VSGP)

where 45 denotes the set of all feasible alignments. The image of
set 45 in the score function space is called feasible score set. To
give a proper meaning to the operator vmax, we introduce the
following dominance relation between score vectors in Problem
(VSDP): Given two alignments g0 and go’, VSD(g0) >VSD(g0’)
(g0 dominates go’) if and only if it holds that s(g0) Z s(g0’),
d(g0) g d(g0’) and VSD(g0) 75 VSD(g0’). An alignment go is Pareto
optimal if there exists no other alignment g0* such that
VSD(g0*)>VSD(g0). The set of all Pareto optimal alignments is
called Pareto optimal alignment set. The image of a Pareto opti-
mal alignment in the score function space is a non-dominated
score, and the set of all non-dominated scores is called non-domi-
nated score set. The dominance relation and the above notation
also apply to Problem (VSGP) with the necessary changes.
Computing the Pareto optimal alignment set can be an intract-

able task: consider the sequences A := G” and B :2 T(GT)2" and
the substitution matrix M[i, i] := l and M[i,j] :2 0, i 751'; then,

there exist (2: ) Pareto optimal alignments that match G” in

both sequences, as there exists no other alignment with larger
substitution score and lesser number of indels (3n +1 indels).
The aforementioned example also applies to the number of
gaps (n +1 gaps). However, the size of the non-dominated
score set is bounded by min(£, n1 + n2 — 25), where E is the size
of longest common subsequence of A and B (Roytberg et al.,
1999).

Interesting properties of this formulation in relation to para-
metric sequence alignment (see Gusﬁeld et al., 1992) are dis-
cussed in Roytberg et al., 1999: an optimal alignment for the
parametric score function with positive parameters is a Pareto
optimal alignment. However, there may exist Pareto optimal
alignments that are not optimal for any parameter setting.
These alignments, and corresponding scores, are called supported
and non-supported, respectively (Ehrgott, 2005). From a geomet-
rical point of view, supported scores are those that lie in the
convex-hull boundary of the non-dominated score set.

 

996 © The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com

112 /§JO'S{eumo [p.IOJXO'SOTlBIHJOJUTOTQ/ﬁdllq 11101; popeoIII/noq

9IOZ ‘09 lsnﬁnv uo ::

Bicriteria pairwise sequence alignment

 

Furthermore, it is common to distinguish between extreme
and non-extreme supported scores (Ehrgott, 2005). A score is
extreme supported if it is a vertex of the convex hull boundary
of the feasible score set; otherwise it is a non-extreme supported
score. Although it is relatively easy to find all extreme supported
scores (Gusﬁeld et al., 1992), it is more challenging to find all
those that are non-extreme. Finding the whole non-dominated
score set would allow identifying both extreme and non-extreme
supported non-dominated scores, as well as non-supported non-
dominated scores.

Therefore, multicriteria sequence alignment brings advantages
to the practitioner, as it allows to get rid of parameters and to
explore a tractable set of alignments that are not reachable by
any other methods. However, to the best of our knowledge, few
work has been done on multi-criteria sequence alignment
(Paquete and Almeida, 2009; Roytberg et al., 1999; Taneda,
2010). In this article, we propose extensions of dynamic program-
ming algorithms for several bicriteria problem variants with a
pruning technique that is based on the comparison of lower
and upper bounds, as performed in branch-and-bound proced-
ures. Moreover, we describe an experimental analysis on a real
dataset and discuss the use of bicriteria pairwise sequence align-
ment in the context of phylogenetic tree construction.

2 ALGORITHMS

In the following sections, we describe dynamic programming
techniques for solving several formulations of the bicriteria pair-
wise sequence alignment as well as a novel pruning technique
that reduces the number of states in practice.

2.1 Multicriteria dynamic programming

For the sake of clarity, we introduce the dynamic programming
algorithm for Problem (VSDP) as proposed in Roytberg et al.
(1999) but with a different formulation. For a given alignment (,0,
we define a state p :2 VSD(g0). To compute the non-dominated
scores, a matrix P is constructed where each entry P[i,]], for

(i,j) e {1, ...,n1} x {1, ...,n2}, will store the set of states corres-
ponding to the Pareto optimal alignments of subsequences
(a1, ...,a,-) and (b1, ...,bj). The recurrence for P[i,]] is as
follows:

P[i, ] := vmax {p—I—(O, — 1) :p e P[i—1,]]}
{p-I—(O, — 1):p€P[i,j— 1]}

where ,u(i, j) is the substitution score for (a,, bj). The bases cases
are P[090] 1= {(0,0)}, P[i90]1={(0, — 1)}, P[09f] 1= {(0, —J')},
for l g i 3 n1 and l g j 3 n2. Operator vmax keeps only
the non-dominated states at entry P[i,f_|. Roytberg et al. (1999)
suggested the use of a log-linear algorithm for this operation.
However, this can be performed in linear time by extending
the MERGE algorithm in Beier and Vocking (2011) for
three sorted lists of non-dominated scores. The overall time
and space-complexity of the algorithm above is
0("1 '712 ' ("1 +772»-

The dynamic programming algorithm for Problem (VSGP) is
brieﬂy discussed in Roytberg et al. (1999). We give a more

detailed explanation of this approach, which extends the
algorithm in Gusﬁeld (1997, pp. 244). For a given alignment
(,0 :2 (A’,B’), we define a state q :2 VSG(g0). For computing
the set of non-dominated scores, we keep four dynamic program-
ming matrices: Q, R, S and T. For a given
(i,j) e {1, ...,n1} x {1, ...,n2}, entry R[i,f_|, S[i,]] and T[i,f_|
will store the set of states corresponding to Pareto optimal align-
ments of subsequences (a1, . . . , a,) and (b1, . . . , bj) that end with
(a,,bj), (/—/,bj) and (a,,’—’), respectively, where ’—’ is a gap
character. The entry Q[i,j] will store the states corresponding

to Pareto optimal alignments of subsequences (a1, ...,a,-) and
(b1,  ,bj). Then, the recursion is as follows:
Rizal
QILJ] = vmax Siiul
Tliul
RILJ] = {q + (MAJ), 0) I q E Qii — 1,} — 1]}
. _ Sliu' — 1]
S[laj] — vmaX{  + (09 _  z q E  
TIM] — Vmax{ {q + (0, —1)=q E Qii — 1,11}

The base cases of the matrices are as follows:
Q[0, 0] == {(0, 0)}, Q[i, 0] == S[i, 0] I= Q[0,f_| I= T[0,f_| == {(0, — 1)},
for l g i 3 n1 and l g j 3 n2. Operation vmax takes also linear
amount of time by using the same technique as for Problem
(VSDP). As the number of gaps is bounded from above by the
number of indels in an alignment, the time and space-complexity
is also 0(n1 -n2 - (n1 —I— n2)).

2.2 Bounds in problem (VSDP)

We describe a pruning technique for the dynamic programming
algorithm for Problem (VSDP) that is able to reduce the number
of states by comparing their upper bounds with a pre—computed
lower bound set. Upper and lower bounds have also been used
within scalarized score functions (Roytberg, 1992).

2.2.1 Lower bound set For the deﬁnition of lower bounds on
the non-dominated score set for Problem (VSDP), we introduce
the notions of lexicographic and scalarized score functions.

We say that a vector x e [R2 is lexicographically larger than or
equal to a vector y e R2(x>1exy) if x1>y1 or if x1 =y1 and
x2 Z 322. In this article, we consider two problems that consist
of finding an alignment that is lexicographic maximal (lexmax)
according to a given order of priority on the optimization of the
two score function components:

arglexmax{<p : (s(<p), —d(<p)), (p 6 d5} (LexSDP)

arglexmax{<p : (—d(g0), s(<p)), (p 6 d5} (LexDSP)

The order of the function components indicates the priority
that is considered among the criteria.

Let (p, and god be the lexicographic maximal alignments
for Problems (LexSDP) and (LexDSP), respectively. Let
MAX := VSD(<pS) and MIN := VSD((pd). By the definition of
optimality for Problem (VSDP), it holds that MAX and MIN
belong to the non-dominated score set (Ehrgott, 2005).
Moreover, they indicate that there cannot exist a Pareto optimal

 

997

112 /310's113u1no [p.IOJXO'SOllBIIHOJUIOIQ/ﬁdllq 11101; popeoIII/noq

9IOZ ‘09 lsnﬁnv uo ::

M.Abassi et al.

 

alignment with larger (smaller) substitution score value and
more (less) indels than given by the components of MAX
(MIN). Hence, the two score vectors give a bound on the
possible ranges of the non-dominated score set. In fact, if
MAX = MIN, then the non-dominated score set contains only
a single element and no further computation is required.

Another lower bound is given by the solution to a scalarized
version of the bicriteria alignment problem. We consider the
weighted sum scalarization approach:

WSD(<p) I: W. - ska) — Wd - d(<p)

where w, and wd are positive real weighting coefﬁcients. The goal
is to find the alignment that maximizes the scalarized score func-
tion as follows:

arg max{<p : WSD(g0), (p 6 d5} (WSDP)

Other scalarized functions are also possible (Ehrgott, 2005).
In the particular case of the weighted sum function, the align-
ment that is optimal to Problem (WSDP) is also Pareto optimal
to Problem (VSDP), although the opposite does not hold in
general (Ehrgott, 2005). Let (pw denote the optimal alignment
for Problem (W SDP) for a given ws and wd and let
MID := VSD((pw). It is also important to highlight that the sca-
larized problem can be solved several times for different coefﬁ-
cients to get a tighter lower bound set.

The score vectors MAX, MID and MIN allow to deﬁne a
lower bound set on the non-dominated score set of Problem
(VSDP). Let R denote the region

R = {r e [R x [1123 :b>r,b e {MAX,MID,MIN}}.

Figure 1 illustrates the location of MAX, MID and MIN and
definition of R (shaded area). There may exist further Pareto
optimal alignments whose score vectors are located in the com-
plement of R. However, any alignment whose score vector is in
the interior of R cannot be Pareto optimal, as it would be domi-
nated by an alignment with a score vector equals to MIN, MID
or MAX.

The computation of the three score vectors can be performed
with the algorithm of Needleman and Wunsch (1970) by keeping
the components separately in the dynamic programming matrix

S ((P)

V

 

MIN

MID

MAX

i\\\\\\\\\\\\l

 

—d((P)
ll

Fig. 1. Illustration of the lower bound set for problem (V SDP)

and choosing the state at each entry that maximizes the scalar-
ized score function WSD, for the case of MID, or according to
the lexicographic ordering for the case of MAX and MIN, re-
spectively. Therefore, the three score vectors can be found in
0(7’21 - n2)-time.

In the following, we only introduce the recurrence relation
required for computing the lexicographic maximal alignment
for Problem (LexSDP), which gives the score vector MAX. We
consider a dynamic programming matrix L, where the entry
L[i,]], for (i,j) e {1, ...,n1} x {1, ...,n2}, will store the state cor-
responding to the lexicographic maximal alignment of subse-
quences (a1, ...,a,) and (b1, ...,bj). The elements of matrix L
are calculated recursively by

L[i,j] := lexmax L[i,j— l] —I—(0, — l)
L[i— l, ]—I—(0, — l)

with basis cases L[O, 0] := (0,0), L[i, 0] := (0, — i) and L[0,]]: =
(0, —j), for l f if n1 and l gj 3 n2. The operator lexmax
keeps only the lexicographic maximum of the three states in
the recursive step.

2.2.2 Upper bound The pruning technique proposed in this art-
icle follows a branch-and-bound principle. Let t := (s, — d) be a
state at entry P[i,f_|. Let u be the maximum substitution score and
v the minimum number of indels that can be achieved from entry
P[i,f_| to entry P[n1,n2]. Then, for either 1 g i<n1 or 1 §j<n2,
we consider the following upper bound for t:
ub(t) := (s+u, — d — v). If ub(t) is located in the interior of
R, then state t will not lead to any state that corresponds to a
score vector of a Pareto optimal alignment and can be discarded
from entry P[i,f_|.

The value of u can be computed with the algorithm of
Needleman and Wunsch (1970) with a null indel penalty for
the sequences (a,+1, .. . , am) and (bj+1, .. . , bnz). This can be
easily obtained for every entry in matrix P in a pre-processing
step. The minimum number of indels v is computed by the ab-
solute difference between the sizes of two subsequences
(a,, ...,a,,,) and (b, ...,b,,2), i.e. v := |(n2 —j)—(n1—i)|.
Therefore, ub(s) := (s + u, — d — v) is a valid upper bound for
state t. This bound may not correspond to a feasible alignment.

Matrix L as well as the algorithm of Needleman and Wunsch
(1970) can be computed in a pre—processing phase in 0(n1 - n2)-
time. Hence, the upper bound at each matrix entry can be com-
puted in a constant amount of time during the main phase of the
algorithm.

2.3 Bounds in problem (VSGP)

For Problem (VSGP), the computation of lower and upper
bounds follow the same reasoning as for Problem (VSDP). In
the following, we will only give a brief explanation and highlight
the main differences.

2.3.1 Lower bound set The lexicographic and scalarized prob-
lems described in Section 2.2.1 can also be formalized in terms of
gaps. In this case, MAX and MIN correspond to the score vec-
tors of the Pareto optimal alignments that maximize the substi-
tution score and minimize the number of gaps, respectively. Also,
MID corresponds to the score vector of the Pareto optimal

 

998

112 /§JO'S{12umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

Bicriteria pairwise sequence alignment

 

alignment that maximizes a scalarized score function by taking
into account the number of gaps (we use wg instead of wd).

Score vectors MAX and MID can be computed in 0(n1 - n2)-
time by using the algorithm described in Gusﬁeld (1997) with the
necessary changes (see Section 2.2.1). However, score vector
MIN can be computed faster. The minimum number of gaps
can only be zero or one, the latter case arising when n1 75 n2.
Assume w.l.o.g. that n1 <n2. Then, the computation of the max-
imum substitution score that is possible for one gap can be per-
formed by comparing the substitution score for each of the
n1 +1 possible locations of a gap. This can be performed in
0(n1)-time in an incremental manner.

2.3.2 Upper bound In this problem, the computation of the
maximum substitution score that can be achieved in entry
Q[n1,n2] by a state t at entry Q[i, j] follows the same procedure
as explained in Section 2.2.2.

For the computation of the minimum number of gaps, we
consider a partition of matrix Q into three sections; w.l.o.g.,
we assume that n1<n2. Let QD := Q[i—n2 +n1,i], for
n2 — n1 3 i 3 n2, which corresponds to the diagonal in Q start-
ing at Q[0,n2 —n1] and ending at Q[n1,n2]. Let QA and QB
denote the entries in matrix Q that are located above and
below QD, respectively. From this partitioning of Q, we can
derive the following results for v, the minimum number of
gaps, that is achieved at Q[n1, n2] by a state t (we relate state t
with a partial alignment (,0 := (A’, B’)):

(i) If state t e QD, then v := 0;
(ii) If state t 6 QA (QB) and alignment (,0 ends with a gap in
A’ (B’), then v := 0;
(iii) If state t 6 QA (QB) and alignment (,0 ends with two char-
acters or a gap character in B’ (A’), then v := 1.

Conditions (ii) and (iii) can be determined by keeping an add-
itional variable that stores whether state t was obtained from
matrix R, S, or T in the recursion. Therefore, the upper bound
for the case of gaps can also be computed in a constant amount
of time.

2.4 Performance of the pruning technique

We performed an experimental analysis for comparing the per-
formance of the algorithms described in the previous sections,
with and without the pruning technique (Prune and NoPrune,
respectively) and for both problem variants with substitution
matrix PAM250 (Dayhoff et al., 1978). The implementations
were coded in C and compiled with gcc version 4.6.1 with the -
O3 compiler option, in a computer with 2 processors Intel Xeon
5620, 2.4GHz, 4 core and 16 GB RAM, with operating system
Ubuntu 11.10. Except of the compiler option, no other code
optimization technique was used in the experiments.

We considered the sequences available from the benchmark
BAliBase version 3.0 (Thompson et al., 2005) reference set 9.
The subsets RV911, RV912 and RV913 were chosen, as they
are organized into three different groups according to the se-
quence variability: <20%, 20—40% and 40—80% identity, respect-
ively. From the datasets, we extracted the sequences from
the following groups: RV911-BOX096 (12 sequences),
RV911-BOX115 (7 sequences), RV911-BOX010 (18 sequences),

RV912-BOX075 (13 sequences), RV912-BOX258 (16 sequences),
RV912-BOX154 (5 sequences), RV9l3-BOX158 (55 sequences),
RV913—BOX222 (7 sequences) and RV9l3-BOX063 (8 se-
quences). Our implementations were run on all pairs of se-
quences of the same group.

Preliminary experiments indicated that only three bounds
(MAX, MID and MIN) were insufﬁcient for obtaining
good performance. For this reason, several weighted sum
problems were solved for different weight combinations to
obtain a tighter lower bound set: 5, 10, 15 and 20. For each
bound w, the weights were varying in the following manner:
w, := i, wd := w — i, ie {1, ...,w — 1}. Other experiments that
we performed indicated that no improvement in terms of pruning
can be obtained for w values larger than 20. In a second set of
experiments for Problem (VSGP), we observed that the pruning
technique was only being effective for entries Q[i, j], i 2 n1 / 2 and
j 2 n2 / 2. Therefore, to reduce the overall CPU time, we switched
off the pruning technique for lower indices.

Tables 1 and 2 give the results obtained for both problem
variants, where size is the average sequence length, #nd corres-
ponds to the average number of non-dominated states, CPU time
gives the average and standard deviation of CPU times in se-
conds to terminate and %prun gives the percentage of states that
were pruned in the Prune(w) version. A bold value indicates the
best average CPU time; in case of a tie, the value with the largest
pruning percentage was chosen, as it suggests less memory usage.

The results show that the Prune version is able to prune from
31 to 92% of the states that are generated by the NoPrune ver-
sion for Problem (VSDP). The improvement in terms of CPU
time can go up to 80% in the set RV913—BOX063. However, no
improvement can be found for RV912-BOX075 and RV912-
BOX154, although all versions were extremely fast in those
cases (3 0.5 s). For Problem (VSGP), the pruning can reach
83% and CPU time improved up to 60% in RV913-BOX222.
In both problems, it is possible to observe that the increase of
parameter w does not translate directly into faster CPU time; for
instance, in the sets RV911 for Problem (VSGP), the best CPU
time was obtained with w = 10, although better pruning percent-
age was obtained with w = 20(: 20%). Clearly, the larger the
lower bound set, the higher the required time for comparison.
Moreover, the pruning seems to be more effective for large levels
of residue identity.

It is also noteworthy to mention that the number of non-
dominated states is a small fraction of the average size of the
genes. We also observed that both algorithms on Problem
(VSGP) take roughly 4—5 times more CPU time than on
Problem (VSDP).

3 PHYLOGENETIC TREE CONSTRUCTION

Phylogenetic trees are diagrams that illustrate historical relation-
ships among the species. They have a valuable application in
evolutionary and population biology [we refer to Schuh and
Brower (2009) for more details]. In the context of our bicriteria
framework, it is important to understand whether the non-domi-
nated score set can provide further information than that pro-
vided by existing methods. In this section, we describe a method
for constructing phylogenetic trees from the non-dominated
score set and discuss its application for deriving further

 

999

112 /810's112u1no [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

M.Abassi et al.

 

Table 1. Experimental results for the pruning technique for problem (V SDP)

 

 

Prune (5)

Prune (10)

Prune (1 5)

Prune (20)

 

Datasets Size #nd CPU-time (%prun)
noPrune Prune (l)

RV911-BOX115 750 190 0.5 :I: 0.2 0.4 :I: 0.2 (45%)
RV911-BOX096 795 189 0.6 :I: 0.3 0.5 :I: 0.2 (38%)
RV911-BOX010 1134 269 2.1 :I: 1.3 1.5 :I: 1.2 (31%)
RV912-BOX075 457 114 0.1 :I: 0.0 0.1 :I: 0.0 (53%)
RV912-BOX258 607 106 0.3 :I: 0.1 0.1 :I: 0.1 (67%)
RV912-BOX154 1076 164 0.8 :I: 0.4 0.5 :I: 0.3 (59%)
RV913-BOX158 664 74 0.2 :I: 0.1 0.1 :I: 0.0 (83%)
RV913-BOX222 983 149 0.8 :I: 0.2 0.3 :I: 0.2 (72%)
RV913-BOX063 1374 206 2.0 :I: 0.4 0.7 :I: 0.3 (76%)

0.4 d: 0.2 (53%)
0.4 d: 0.2 (55%)
1.4 :I: 1.1 (35%)

0.1 d: 0.0 (71%)
0.1 d: 0.1 (84%)
0.4 d: 0.2 (71%)

0.0 d: 0.0 (91%)
0.2 d: 0.1 (86%)
0.4 d: 0.2 (88%)

0.4 d: 0.2 (58%)
0.4 d: 0.2 (60%)
1.3 :I: 1.1 (62%)

0.1 d: 0.0 (75%)
0.1 d: 0.1 (86%)
0.4 d: 0.2 (74%)

0.0 d: 0.0 (92%)
0.2 d: 0.1 (88%)
0.4 d: 0.2 (90%)

0.4 d: 0.2 (59%)
0.4 d: 0.2 (62%)
1.4 :I: 1.2 (63%)

0.1 d: 0.0 (76%)
0.1 d: 0.1 (87%)
0.4 d: 0.2 (75%)

0.0 d: 0.0 (92%)
0.2 d: 0.1 (89%)
0.4 d: 0.2 (91%)

0.4 d: 0.2 (60%)
0.4 d: 0.2 (63%)
1.4 :I: 1.2 (65%)

0.1 d: 0.0 (77%)
0.1 d: 0.1 (87%)
0.4 d: 0.2 (76%)

0.0 d: 0.0 (92%)
0.2 d: 0.1 (89%)
0.4 d: 0.2 (91%)

 

Table 2. Experimental results for the pruning technique for problem (V SGP)

 

 

Prune (5)

Prune (10) Prune (15) Prune (20)

 

Datasets Size #nd CPU-time (%prun)
noPrune Prune (l)

RV911-BOX115 750 239 3.8 :I: 0.9 3.5 :I: 1.4 (1%)
RV911-BOX096 793 264 4.9 :I: 2.2 4.6 :I: 3.5 (0%)
RV911-BOX010 1133 382 13.7 :I: 5.6 13.6 :I: 9.1 (0%)
RV912-BOX075 458 139 0.8 :I: 0.1 0.8 :I: 0.1 (1%)
RV912-BOX258 608 153 1.8 :I: 0.5 1.8 :I: 0.8 (3%)
RV912-BOX154 1076 243 5.3 :I: 1.2 5.3 :I: 2.0 (1%)
RV913-BOX158 671 69 1.1 :I: 0.2 1.3 :I: 0.3 (2%)
RV913-BOX222 983 180 5.1 :I: 0.8 4.9 :I: 1.3 (5%)
RV913-BOX063 1374 275 10.4 :I: 1.5 10.6 :I: 2.6 (5%)

3.3 d: 1.4 (10%)
4.5 d: 3.6 (9%)
12.8 d: 8.8 (10%)
0.6 d: 0.1 (30%)
1.2 d: 0.5 (43%)
4.7 d: 1.6 (14%)
0.5 d: 0.2 (66%)
2.7 d: 0.7 (47%)
7.3 d: 2.1 (54%)

3.3 d: 1.4 (16%)
4.5 d: 3.7 (15%)
12.6 d: 8.9 (14%)
0.5 d: 0.1 (46%)
0.9 d: 0.4 (59%)
4.3 :I: 1.4 (26%)
0.3 d: 0.1 (79%)
1.9 d: 0.6 (65%)
5.0 d: 1.7 (70%)

3.4 d: 1.5 (19%)
4.6 d: 3.8 (18%)
12.8 :I: 9.1 (18%)
0.5 d: 0.1 (52%)
0.8 d: 0.4 (65%)
4.2 :I: 1.3 (31%)
0.3 d: 0.1 (82%)
1.7 d: 0.6 (71%)
4.3 d: 1.5 (75%)

3.5 d: 1.5 (21%)
4.8 d: 3.9 (19%)
13.1 :I: 3.4 (22%)
0.5 d: 0.1 (54%)
0.8 d: 0.4 (69%)
4.2 :I: 1.3 (34%)
0.3 d: 0.1 (83%)
1.6 d: 0.6 (74%)
4.1 :I: 1.4 (77%)

 

information about the reliability of the tree branches. Two
datasets are used for illustration purpose, and the resulting
trees are compared with those obtained with the well-known
technique of Maximum Likelihood (ML).

3.1 The bicriteria method

Given a collection of non-dominated score sets, each one ob-
tained for each pair of sequences, our approach consists of build-
ing a phylogenetic tree for each gap/indel value that arises from
the union of all non-dominated scores sets. First, for each gap/
indel value found, we collect the set of substitution score values,
one for each pair of species under study. The substitution score
value from the resulting score vector is normalized between zero
and one. Then, the distance between two species for a given gap/
indel value is computed as one minus the normalized substitution
score value. In our experiments, we used the resulting distance
matrix to build each phylogenetic tree by the Neighbor-Joining
method (Saitou and Nei, 2007) using PHYLIP package
(Felsenstein, 1985).

An important aspect of the analysis is to understand how often
certain phylogenetic tree topologies exist. A less frequent top-
ology, or tree branch, may indicate a less reliable relation be-
tween the corresponding species. Therefore, we count how many
times each branch arises in all phylogenetic trees and add the

corresponding relative frequency to each branch. This informa-
tion is analogous to the bootstrap values introduced by
Felsenstein (1985); instead of the sampling process, we use the
non-dominated score sets. In the following, we describe two ex-
periments with real-life data.

3.2 First experiment

The first dataset consists of Candida genes, Candida albicans
PAPa, C.albicans PAPalpha, Candida tropicalis PAPalpha,
C.tropicalis PAPa and Candida dubliniensis PAPa, as well as
the genes Pichia stipitis PAPa, and Saccharomyces cerevisiae
PAP. [See Butler et al. (2009) for a more detailed description
of these genes.] For each pair of genes, we computed the non-
dominated score set with respect to Problem (VSGP) with sub-
stitution matrix M[i, i] := l and M[i, j] := —l, i #j; see the com-
plete non-dominated score sets with staircase line representation
in Figure 2. It is possible to observe that there exists a large
number of non-extreme supported score vectors, as indicated
by the straight lines, which cannot be found by a parametric
sequence alignment (see Steuer, 1986, Chapter 14).

We constructed 567 phylogenetic trees by using our method,
but only two different tree topologies were obtained. One of two
tree topologies was discarded from the analysis, as it arose only
once of the 576 trees. Figure 3a shows the remaining tree

 

1000

112 /810'spaumo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(1111] 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

Bicriteria pairwise sequence alignment

 

Similarity score

1001: 12013 1400

 

 

—1C|I] -

A
I

C.albicans. F'ﬂF'alpha : C.dubliniensis PAPa

— C.albicans PAPalpl'ia : I: tropicalis PAPaIpha

- - - C.albicans PAPA : C.tropicalis PAPa

-—‘- C.dubliniensis F’AF'a : ﬁJrc-picalis PAPalpha
C.albicans PAPa : C.albicans PAPaIpha
C.tropicalis PAPa : C.dubliniensis PAPa
C.tropicalis PAPa : C.tropicalis PAFaipha
C.tropicalis PAPa : C.albicans PAPaIpha

— P.stipitis PAP : C.tropicalis PAPalpha

— — - C.albicans F'IAF'a : C.dutﬂiniensis PAPa

~- ~ - C.albicans PAPa : C.tropicalis PAPalpha

— P.stipitis PAP : C.dubliniensis PAPa

- - - P.stipitis RAP : C.albicans PAPalpha

-— ~ - P.siipitis PAP : C.tropicalis PAPa

 P.stipitis PAP : C.albicans PAPa
Secreuisiac PAP : C.tropicalis PAPalpha
Seereuisiae PAP C.albicans PAPa
Searevisiae PAP : C.tropicalis PAPa

— Seer-aruisiae PAP. C.albicans PAPalpha

— — - Seereuiaiae PAP : C.dublinieneis PAPa

-— - - Scereuisiae F'AF' : P.stipitis F'AF'

| g 
A
|

—1 x Number of

|
A
|

_ﬁc|ﬂ _

 

        

 

 

Fig. 2. Staircase line representation of the non-dominated score sets for the ﬁrst experiment

obtained for a gap value of 283, the median of all gap values
found; the value close to each branch indicates the relative fre-
quency of that branch. For comparison, we computed the evo-
lutionary tree using the ML method based on the model from
Jukes and Cantor (1969) obtained by MEGA5 (Tamura et al.,
2011); see Figure 3b. The bootstrap consensus tree inferred from
1000 replicates (Felsenstein, 1985) was taken to represent the
evolutionary history of the taxonomic analysis. There were a
total of 1613 positions in the ﬁnal dataset with all of them
having <90% site coverage removed. The percentage of trees
in which the associated taxa clustered together is shown next
to the branches. Initial tree(s) for the heuristic search were ob-
tained automatically as follows: when the number of common
sites was <100 or less than one-fourth of the total number of
sites, the maximum parsimony method was used; otherwise
BIONJ method with MCL distance matrix was used. The tree
is drawn to scale, with branch lengths measured in the number of
substitutions per site.

By comparing both trees, it is possible to infer that they have a
similar topology and similar relative branch frequency. This con-
clusion can also be understood by the regularity of the lines of
Figure 2. The nearest genes are C.albicans PAPalpha and
C.dubliniensis PAPa, which corresponds to the black line in
Figure 2, with the largest substitution score. In the same ﬁgure,
the three pink lines allow us to infer the positioning of C. tropicalis
PAPalpha with respect to C.albicans PAPalpl/za and C. dublinien-
sis PAPa, as well as the branch (C .albicansPAPa, C. dubliniensis
PAPa). As expected, P.stipitis PAP and S.cerevisiae PAP are the
most distant species, as seen by the green dot-dash line in Figure 2.

Finally, both phylogenetic trees indicate a lower value for the
branch that contains P.stipitis PAP gene. We relate this value to

 

 

 

(a) in” '— camicansPAFaiph-a
:nn I—C duhllnieneisPAPa
5'“ C.trupiualiBF‘Al'alpha
P .stipitisPAP

C.albicansPAPa
E .tropi cal isPAPa

 

JEIEI

 

 

Search 5 iaePAP

 

 

 

 

 

 

 

 

 

 

 

 

I—I
I] I1?
 100 C.albicans PAPalpha
100 C.dubliniensis PAPa
98 c.: -,.'-.." PAPalpha
P.stipitis PAP
I C.albicans PAPa
100' C.tropicalis PAPa
S ' ' PAP
0.05

 

Fig. 3. Phylogenetic trees for the ﬁrst experiment: Bicriteria model for a
gap value of 283 (a) and ML model (b)

the crossed lines between the pairs formed by P.stipitis PAP and
others genes (see blue lines in Fig. 2).

3.3 Second experiment

The second dataset is a classic example of comparison between
primates: Homo sapiens haplogroup J1c3, Homo sapiens nean-
dertbalensis, Gorilla gorilla graueri, Pan troglodytes troglodytes
and Pongo abelii species. We performed the same analysis as

 

1001

112 /810'spaumo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(1111] 1110131 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

M.Abassi et al.

 

Similarity score

 

 

 

 

 

 

     

 

50 100 150 200 250 300 350
| I | I | | I
0 - 7 7 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
—20 -
(I) _
Q —40
(U
C)
q—
0
a" 1
_Q —60 - ‘\
E \
3 ‘1
Z \
x — H. sapiens neandert. : H.3apiens ‘\
1_ — H. sapiens : P. troglodytes I.
I —80 - -- H. sapiens neandert. : P. troglodytes
H. sapiens neandert. : P.abelii
H. sapiens : P.abelii
— H. sapiens neandert. : G.gorilla
-—8- H. sapiens : Ggorilla
- - - Ggorilla : Pabelii
"100 T  P.1roglodytes : Pabelii ,
— G.gorilla : P. troglodytes .
\\


I

.\
-120 — 3‘

l

 

Fig. 4. Staircase line representation of the non-dominated score sets for the second experiment

described in the previous section. Figure 4 shows the non-domi-
nated score sets with staircase line representation. The ﬁgure
shows a large number of non-extreme supported score vectors
and some intersecting lines. This last point indicates that the
relationship between those species, in the context of evolutionary
studies, may depend of the score vectors chosen (or the scalarized
score function used). We conjecture that the existence of inter-
sections may indicate a less reliable conclusion about the evolu-
tionary relationship.

By using our bicriteria method, a total of 144 phylogenetic
trees were obtained, which gave rise to two different tree topol-
ogies. Plots (a) and (b) of Figure 5 show the two trees topologies
obtained for a gap value of 22 and 54, respectively; these gaps
values correspond to the median of all gap values found in the
phylogenetic trees with the same topology. The evolutionary tree
using the ML method was also computed using the same method
described in the previous section. The tree with the highest log
likelihood (—1351.1512) is shown in Figure 5c. All positions with
<60% site coverage were eliminated. That is, <40% alignment
gaps, missing data and ambiguous bases were allowed at any
position. There were a total of 376 positions in the ﬁnal dataset.

The two trees obtained with our method differ slightly in re-
lationship to the Pan traglodytes traglodytes with the remaining
species: in plot (a), this species arose in the top of the branch
(Homo sapiens neanderthalensis, Homo sapiens haplogrop J] 03),
whereas in plot (b), it arises in a different clade, paired
with Gorilla gorilla graueri. The relative branch frequencies
suggest that the tree of plot (b) may be more reliable.
Interestingly, this is also conﬁrmed by the tree obtained with
the ML method.

(8) 99,1 Homo sapiens neanderthalensis

Homo sapiens haplogroup .1103

20.5 205 Pan troglodytes troglodytes

 

Gorilla gorilla graueri

 

 

 

Pongo abelii

0.02

 99.1

Homo sapiens neanderthalensis

Homo sapiens haplogroup J1c3

 

Pan troglodytes troglodytes

 

Gorilla gorilla graueri

 

 

Pongo abelii
0.02

Homo sapiens neanclerthalensis

(c) EIEI

 
 
 
 
 

Homo sapiens haplogroup J1c3

Pan troglodytes troglodytes

 

Gorilla gorilla graueri

Pongo abelii

 

I—I
005

Fig. 5. Phylogenetic trees for the second experiment: Bicriteria model for
a gap value of 22 (a) and 54 (b) and ML model (c)

4 CONCLUSION

In this article, a pruning technique is introduced to improve the
performance of dynamic programming algorithms for bicriteria
pairwise sequence alignment, which uses lower and upper bounds
to discard states in early stages of the process. This technique can
easily be extended for the case of afﬁne gap by performing the
necessary changes in the recurrence relation of matrices S and T

 

112 /810'sreumo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(1111] 1110131 popcorn/1mg

9IOZ ‘09 lsnﬁnv uo ::

Bicriteria pairwise sequence alignment

 

(see Section 2.1). They can also be extended for the three criteria
case, where the substitution score, the number of indels and the
number of gaps are simultaneously considered in the score vector
function. In addition, this pruning technique can also be used
in multi-criteria multiple sequence alignment, for instance, in
the context of progressive alignment with sum-of—pairs score
function.

In the second part of this article, we showed for the ﬁrst time a
successful link between non-dominated score sets and phylogen-
etic tree construction. We present a simple method based on our
bicriteria framework that allows to construct phylogenetic trees
as well as to give information about the reliability of the tree
branches. The advantage of this method is that no assumption
about a priori knowledge on users preferences is required, there-
fore, being less unbiased. The two real-life test cases showed that
few phylogenetic trees can be obtained and are matched with
those obtained with the ML method. Further research is
needed to derive theoretical relation between ML estimations
and the information provided by the non-dominated score set
for tree branch reliability.

ACKNOWLEDGEMENTS

The authors would like to acknowledge the anonymous referees
for their valuable comments and suggestions on the paper.

Funding: Portuguese Foundation for Science and Technology
and FEDER, Programa Operacional Factores de
Competitividade - COMPETE, FEDER - FCOMP-01-0124-
FEDER-010024, under the project ‘Multiobjective Sequence
Alignment’ (PTDC/EIA-CCO/098674/2008).

Conﬂict of Interest: none declared.

REFERENCES

Beier,R. and V6cking,B. (2011) The knapsack problem. In: Algorithms Unplugged.
Springer-Verlag, Berlin, Heidelberg, pp. 375—381.

Butler,G. et al. (2009) Evolution of pathogenicity and sexual reproduction in eight
candida genomes. Nature, 459, 657—662.

Dayhoff,M. et al. (1978) A model of evolutionary change in proteins. In:
Dayhoff,M. (ed.) Atlas of Protein Sequence and Structure, Vol. 5. National
Biomedical Research, Washington, DC, pp. 345—358.

Ehrgott,M. (2005) Multicriteria Optimization. Springer-Verlag, Berlin, Heidelberg.

Felsenstein,J. (1985) Conﬁdence limits on phylogenies: an approach using the boot-
strap. Evolution, 39, 783—791.

Gusﬁeld,D. et al. (1992) Parametric optimization of sequence alignment. In:
Proceedings of the Third Annual ACM—Siam Symposium on Discrete
Algorithms. pp. 432—439.

Gusﬁeld,D. (1997) Algorithms on Strings, Trees, and Sequences: Computer
Science and Computational Biology. Cambridge University Press, New York,
NY, USA.

Handl,J. et al. (2007) Multiobjective optimization in bioinformatics and computa-
tional biology. IEEE/ACM Trans. Comput. Biol. Bioinform, 4, 279—292.

J ukes,T.H. and Cantor,C.R. (1969) Evolution of Protein Molecules. Academy Press,
New York.

Needleman,S.B. and Wunsch,C.D. (1970) A general method applicable to the
search for similarities in the amino acid sequence of two proteins. J. Mol.
Biol., 48, 443—453.

Paquete,L. and Almeida,J. (2009) Experiments with bicriteria sequence alignment.
In: Cutting-Edge Research Topics on Multiple Criteria Decision Making. Vol. 35
of CCIS. Springer-Verlag, Berlin, Heidelberg, pp. 45—51.

Roytberg,M. (1992) Fast algorithm for optimal aligning of symbol sequences. In:
Mathematical Methods of the Analysis of Biopolymer Sequences. Vol. 8 of
DIMACS Series in Discrete Mathematics and Theoretical Computer Science
AMS, Providence, RI, pp. 113—127.

Roytberg,M. et al. (1999) Pareto-optimal alignment of biological sequences.
Biophysics, 44, 565—577.

Saitou,N. and Nei,M. (2007) The neighbor-joining method: a new method for
reconstructing phylogenetic trees. Mol. Biol. Evol., 4, 406—425.

Schuh,R. and Brower,A. (2009) Biological Systematics: Principles and Applications.
Cornell University Press, Ithaca, NY.

Steuer,R.E. (1986) Multiple Criteria Optimization: Theory, Computation, and
Application. Wiley & Sons, New York, NY.

Tamura,K. et al. (2011) Mega5: molecular evolutionary genetics analysis using
maximum likelihood, evolutionary distance, and maximum parsimony methods.
Mol. Biol. Evol., 28, 2731—2739.

Taneda,A. (2010) Multi-objective pairwise RNA sequence alignment.
Bioinformatics, 26, 2383—2390.

Thompson,J. et al. (2005) Balibase 3.0: latest developments of the multiple sequence
alignment benchmark. Proteins, 61, 127—136.

 

112 /810'sreumo [p.IOJXO'SOIlBIIlJOJUIOIQ/ﬁ(1111] 1110131 prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

