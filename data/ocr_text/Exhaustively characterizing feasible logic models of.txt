ORIGINAL PAPER

Vol. 29 no. 18 2013, pages 2320—2326
doi: 1 0. 1093/bioinformatics/btt393

 

Systems biology

Advance Access publication July 12, 2013

Exhaustiver characterizing feasible logic models of a signaling
network using Answer Set Programming
Carito Guziolowskil’l, Santiago Videla2’3’4’l, Federica Eduati5, Sven Thiele2’3,

Thomas Cokelaer5, Anne Siegel2’3’*

and Julio Saez-Flodriguez5’*

1Ecole Centrale de Nantes, IRCCyN UMR CNRS 6597, 44321, Nantes, France, 2CNFlS, UMR 6074 IRISA, Campus de
Beaulieu, 35042 Rennes, France, 8INFllA, Dyliss project, Campus de Beaulieu, 35042 Rennes, France, 4Universitat
Potsdam, Institut fUr Informatik, D—14482 Potsdam, Germany and 5European Molecular Biology Laboratory, European

Bioinformatics Institute, Hinxton CB1O 1SD, UK
Associate Editor: Martin Bishop

 

ABSTRACT

Motivation: Logic modeling is a useful tool to study signal transduc-
tion across multiple pathways. Logic models can be generated by
training a network containing the prior knowledge to phospho-prote-
omics data. The training can be performed using stochastic optimiza-
tion procedures, but these are unable to guarantee a global optima or
to report the complete family of feasible models. This, however, is
essential to provide precise insight in the mechanisms underlaying
signal transduction and generate reliable predictions.

Results: We propose the use of Answer Set Programming to explore
exhaustively the space of feasible logic models. Toward this end, we
have developed caspo, an open-source Python package that provides
a powerful platform to learn and characterize logic models by lever-
aging the rich modeling language and solving technologies of Answer
Set Programming. We illustrate the usefulness of caspo by revisiting a
model of pro-growth and inflammatory pathways in liver cells. We
show that, if experimental error is taken into account, there are thou-
sands (11 700) of models compatible with the data. Despite the large
number, we can extract structural features from the models, such as
links that are always (or never) present or modules that appear in a
mutual exclusive fashion. To further characterize this family of models,
we investigate the input—output behavior of the models. We find 91
behaviors across the 1 1 700 models and we suggest new experiments
to discriminate among them. Our results underscore the importance of
characterizing in a global and exhaustive manner the family of feasible
models, with important implications for experimental design.
Availability: caspo is freely available for download (license GPLv3)
and as a web service at http://caspo.genouest.org/.

Supplementary information: Supplementary materials are available
at Bioinformatics online.

Contact: anne.siegel@irisa.fr or saezrodriguez@ebi.ac.uk

Received on March 20, 2013; revised on June 17, 2013; accepted on
July 4, 2013

1 INTRODUCTION

Predictive models of biological networks are a main component
of systems biology. For a certain system of interest, if enough

 

*To whom correspondence should be addressed.
TThe authors wish it to be known that, in their opinion, the ﬁrst two
authors should be regarded as joint First Authors.

information is available about the biomolecules that constitute it
and their interactions, one can convert this prior knowledge into
a mathematical model (e. g. a set of differential equations or logic
rules) that can be simulated. If experimental data are available,
the model can be ﬁtted (trained) to the data. That is, one deter-
mines the model parameters (for example, kinetic constants in a
biochemical model) to obtain the most plausible model given the
data. This is normally achieved by deﬁning an objective function
that describes the goodness of the model based on the data that is
subsequently optimized (Banga, 2008).

This training process is not a trivial task owing to factors
including experimental error, limitations in the amount of data
available, incompleteness of our prior knowledge and inherent
mathematical properties of the models. Thus, in general, there is
no single solution but rather multiple models that describe the
data equally (or similarly) well. In those cases, the model is said
to be non-identiﬁable (Kreutz and Timmer, 2009; Walter and
Pronzato, 1996).

In some cases, deterministic methods that guarantee the iden-
tiﬁcation of the optimal models can be applied, but these meth-
ods are often limited by the exponential growth of the search
space. Thus, usually one needs to use stochastic methods that
may identify the optimum or at least exhibit suboptimal models
(Banga, 2008). However, an incomplete characterization of the
set of plausible models limits signiﬁcantly the insight that can be
gained about the underlying molecular mechanisms.

In this article, we investigate this issue in the context of logic
modeling of signaling networks. These models have been applied
recently to analyze signal transduction in a variety of contexts
(Calzone et al., 2010; Wang et al., 2012). In particular, given a
network encoding our knowledge of signal transduction and a
dataset measuring the activation of proteins in this network on
various perturbations, one can derive from the network
(Boolean) logic models ﬁtted to the data. Models are simulated
assuming that the network reaches a pseudo steady state at a
certain time on stimulation, and the identiﬁcation of the network
that best ﬁts the data is posed as an optimization problem. This
problem can be solved using meta-heuristics (e.g. a genetic algo-
rithm), and their application suggests that there are multiple al-
ternative models that explain the data (Saez-Rodriguez et al.,
2009). However, stochastic search methods cannot characterize
the models precisely: they are intrinsically unable not just to

 

© The Author 2013. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0/), which
permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /310's113umo [p.IOJXO'SOllBIHJOJUIOIQ/ﬁdllq U101} prBOIIIAAOG

9IOZ ‘091sn3nv uo ::

Exhaustiver characterizing feasible logic models using ASP

 

provide a complete set of solutions, but also to guarantee that an
optimal solution is found. To overcome this limitation,
approaches based on Integer Linear Programming (ILP)
(Mitsos et al., 2009; Sharan and Karp, 2012) and Answer Set
Programming (ASP) (Videla et al., 2012) have been applied,
providing a proof of concept that a global optimum can be
identiﬁed.

Here we present caspo, a free open-source tool to learn
(Boolean) logic models of signal transduction in a complete
and global fashion. caspo uses CellNOpt pre— and post-process-
ing routines [Terfve et al. (2012)]. It can handle feedback loops in
the prior knowledge network (PKN), numerical datasets and
tolerance in the score owing to experimental uncertainty. We
use caspo to exhaustively explore the space of optimal and
suboptimal models for a real case describing pro-growth and
inﬂammatory pathways in a liver cancer cell. We ﬁnd that,
even with small tolerance, thousands of models can be compat-
ible with the data and use ASP’s flexibility to further analyze
them: we categorize them according to their input—output behav-
ior and identify subsets of modules that are interchangeable with
respect to the score. The multiple possible combinations of these
modules are responsible for the large number of models found.

2 METHODS

2.1 Learning Boolean logic models

Our prior knowledge about signal transduction can be described as a set
of causal interactions among the biomolecules involved (mostly proteins)
that can be mathematically formulated as a signed and directed graph.
We call this graph the PKN. In such a graph, one can denote as input
nodes those that can be stimulated or inhibited experimentally. When the
system is perturbed by ﬁxing the state of such nodes, one can measure the
activity of each output node being observed. Such measurements are typ-
ically given by phospho—proteomics datasets consisting of measurements
over m proteins under n experimental conditions. With 6,]- 6 [0,1], we
denote the activity of a protein j under the experimental condition i,
where 0 5 i 5 n and 0 5 j 5 m. In agreement with experimental errors,
we used a discretization procedure so that 6,]- e {0, ﬁ, ..., %, l}.

The state of nodes after a perturbation of the system cannot be pre-
dicted using only graph theory. However, a simple framework is given by
Boolean logic models (Klamt et al., 2006). In a logic model, activation of
nodes is deﬁned by a set of operators. We use the representation known
as sum of products (SOP; also called disjunctive normal form), which uses
only AND (A), OR (V) and NOT (-) operators. A simple form to encode
logic models based on the SOP formalism is using hypergraphs (Klamt
et al., 2006). A directed and signed hypergraph H = (V,E) is a general-
ization of a directed and signed graph G = (V, A), where V is the set of
nodes and E the set of hyperedges. While edges in A connect pairs of
nodes a,b e V, hyperedges in E connect pairs of sets of nodes S, T g V.
To describe a logic model as a hypergraph, each SOP expression is
mapped to a set of hyperedges.

The PKN is ﬁrst compressed to simplify the structure (Saez-Rodriguez
et al., 2009). Then, because the exact logic gates are often not known, we
perform an expansion to generate all possible gates compatible with the
PKN. Mathematically, we derive a hypergraph H = (V, E) from a graph
G = (V, A), so that for every signed hyperedge (S,{t}) e E and every
s e S, there exists an edge (s, t) e A having the corresponding sign.

Let H be a hypergraph describing a logic model and (6y)i5n,j5m be a
phospho-proteomics dataset. For each experimental condition i, we can
compute the Boolean prediction pi]- e {0, l} of the state of a protein j by
using the logic formulas described by H. This corresponds to computing

the (quasi) steady state of the system. These simulated values at a quasi
steady state are considered an approximation of the state of the cell im-
mediately after a perturbation and can be thus compared with experi-
mental values obtained at early times after stimulation (Klamt et al.,
2006).

Then, the ﬁtness of the logic model to the experimental dataset is ob-
tained by comparing experimental observations, normalized between 0
and l, with Boolean predictions based on the mean square error (MSE)
as follows: #22721 1 (py- — Gil-)2.

Combinatorial optimization problem. The problem of learning Boolean
logic models that we address in this work consists of ﬁnding minimal
hypergraphs derived from the PKN that minimize the MSE where the
size of a hypergraph H is the sum of cardinalities of each hyperedge
source (i.e. the sum of the number of inputs): 26,7361? lSl. Thus, the
problem can be formulated as a lexicographic multi—objective optimiza-
tion where the ﬁrst objective is to minimize MSE, and the second object-
ive is to minimize size. Our prior assumption that 6,]- belongs to a ﬁnite set
of values implies that this problem is of discrete nature. Further, the
optimization can be relaxed by using different degrees of tolerance over
the optimum for each objective, i.e. MSE and size.

Global Truth Tables. Inspired by truth tables in propositional logics,
we introduce the concept of Global Truth Tables (GTTs) as a way of
describing the input—output behavior of a Boolean logic model. For a
given logic model, we can compute its predictions on observable output
nodes in response to every possible experimental condition on input
nodes. Comparing GTTs allows one to decide whether two logic
models, regardless of their structures, are experimentally distinguishable.
Furthermore, GTTs provide a way of grouping a large number of logic
models according to their input—output behavior to facilitate the analysis.

2.2 Learning Boolean logic models with ASP

ASP is a declarative problem-solving paradigm from the ﬁeld of
Logic Programming combining several computer science areas (Baral,
2003; Gebser et al., 2013). As a full declarative paradigm, instead
of telling a computer how to solve the problem, with ASP one deﬁnes
what the problem is and leaves its solution to the solver. These solvers
are based on Boolean constraint solving technology, and they can solve
hard discrete combinatorial search problems, with comparable results
with ILP.

The distinct feature of ASP is its rich modeling language, making it
popular as a tool for declarative problem solving. Sophisticated pre—pro-
cessing techniques (grounding) are required for dealing with this rich lan-
guage. Thanks to the development of an ASP language standard, its
expressiveness and powerful solvers, ASP has been widely used in
many ﬁelds of computer science for a decade. Recently, the capability
of solvers has increased such that ASP started to be applied to solve hard
combinatorial problems arising in bioinforrnatics and systems biology.
Applications include expanding metabolic networks (Schaub and Thiele,
2009), repairing inconsistencies in gene regulatory networks (Gebser
et al., 2010), modeling the dynamics of regulatory networks (Fayruzov
et al., 2009), inferring functional dependencies from time-series data,
(Durzinsky et al., 2011), integrating gene expression with pathway infor-
mation (Papatheodorou et al., 2012) and analyzing the dynamics of
reactions networks (Ray and Sch, 2012).

We used the freely available ASP grounder gringo and solver clasp,
both included in the Potsdam Answer Set Solving Collection (http://
potasscosourceforge.net/). Importantly, we relied on the capability
of the solvers to handle multi-criteria optimization to guarantee the
global optimum by reasoning over the complete space of solutions.
Several reasoning modes (enumeration, union and intersection) were
also necessary to complete the combinatorial study of the family of feas-
ible solutions. We refer the reader to the Supplementary Material for
more details.

 

2321

112 /310's113umo [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁdllq U101} popeommoq

9IOZ ‘091sn3nv uo ::

C. Guziolowski et al.

 

2.3 Software: caspo

We have implemented caspo: Cell ASP Optimizer, a Python package that
combines PyASP (http://pypi.python.org/pypi/pyasp) and CellNOpt
(http://www.cellnopt.org/) to provide an easy -to-use software for learn-
ing Boolean logic models (Fig. l). The software is freely available for
download and also as a web service through the Mobyle framework
(Néron et al., 2009). PyASP encapsulates the main ASP tools, gringo
and clasp, into Python objects. These objects can be fed with logic pro-
grams describing different tasks, be launched with dedicated parameter
settings and return the ASP results for further processing. CellNOpt
[Terfve et al. (2012)] is a software for training logic models using different
formalisms (Boolean, Fuzzy or Ordinary Differential Equations). The
software allows us to import and pre—process a PKN, normalize experi-
mental data, train logic models to data using heuristic methods and post-
process and visualize the resulting models. CellNOpt is written as a set of
R packages available on Bioconductor and as a Cytoscape plugin
(CytoCopter), and it can used within Python using the package
cellnopt.wrapper.

3 RESULTS

To illustrate the use of caspo, we use a model of pro-growth and
pro-inﬂammatory model in liver cells. The model is trained to
phospho-proteomics data generated in the liver cancer cell line
HepG2. Data are generated on perturbation with combination of
ligands and small-molecule inhibitors blocking the activities of
speciﬁc kinases (Alexopoulos et al., 2010). The dataset contains
measurements using the Luminex technology of 15 species under
64 experimental conditions. This model was introduced in (Saez-
Rodriguez et al., 2009) and here we use a variation from (Morris
et al., 2011). In this case, there are 130 possible hyperedges and
thus, the number of possible logic models (i.e. search space of the
combinatorial optimization) is given by 2130.

3.1 Family of optimal models

We ﬁrst used caspo to compute all global optimum solutions to
the optimization over our case study. We found 16 Boolean logic
models (Supplementary Fig. S1) with minimal score (0.36 s), all
models having the same ﬁtness to data (MSE = 0.0499) and size
(28). Moreover, the same 16 logic models were found (0.5 s) using
an extended PKN with feedback loops from Terfve et al. (2012).
Cross validation analysis showed no signiﬁcant difference in

S|F+ MIDAS If}? (53
Logic models

 

 

 

cellnoptwrapper PyASP

@U

Fig. 1. High-level design of caspo. (1) Input ﬁles are a PKN in
Cytoscape’s SIF format, and a dataset as a CSV ﬁle in the MIDAS
format (Supplementary Material). (2) Pre—processing routines by
CellNOpt. (3) Finds an optimum model. (4) Finds all models within
the tolerance. (5) Outputs all models found

 

 

 

the optimum MSE with respect to the complete dataset
(Supplementary Fig. S2).

The 16 different models arise owing to four pairs of submodels
(modules) equivalent in terms of score. These modules represent
alternative ways to activate speciﬁc nodes and are independent
from each other. For each pair, only one of the modules appears
in a given model; that is, they are mutually exclusive. Thus, se-
lecting either member of each pair provides an optimal model
and all possible combinations give rise to the 24: 16 models. To
elucidate the differences between the 16 models from their re-
sponses to all possible experimental conditions, we computed
and compared their GTTs (Section 2.1). Interestingly, they all
have the same GTT. That is, for any combination of input nodes
(stimuli and inhibitors), the same values are predicted for all the
readouts by the 16 models. Therefore, the optimization reports a
single solution in terms of input—output behavior, despite the fact
that this solution can take the form of any of the 16 models. To
distinguish among these models (and thus determine which of the
mutually exclusive modules are functional), we would require a
different experimental setup, i.e. new species have to be either
perturbed or measured.

3.2 Suboptimal Models: Enumeration and Structure

Experimental error is inherent in biochemical data. Therefore,
one needs to consider models whose predictions deviate from
those of the optimal one by an amount within the experimental
error (Saez-Rodriguez et al., 2009). Considering that the opti-
mization minimize MSE and size, we deﬁned as suboptimal
models those solutions having MSE within a 10% of tolerance
with respect to the MSE of optimal models (a conservative ap-
proximation to the real experimental error), and maximal size of
28 (the size of the optimal models; Section 3.1). From these
settings, caspo found 11700 suboptimal models (Fig. 2) with
sizes 28, 27, 26 and 25 whose MSE spanned from 0.0499 to
0.0546. We observed that the number of models decreases expo-
nentially with the tolerance over the MSE (e.g. 8%—7378
models, 6%—6048 models, 2%—l92 models). Allowing also a
tolerance over the size would generate a much larger number of
models by the addition of spurious links to those of size 28 (e.g.
size 29—51480 models, size 30—189 364 models). We therefore
limited, for simplicity of this study, the size to 28.

The complete computation of suboptimal models allows a pre-
cise characterization of the distribution of hyperedges, and,
therefore, of logical gates in the potential models. When we
evaluated the distribution of the 130 possible hyperedges (i.e.
those that are included in the hypergraph derived from the ori-
ginal PKN) across the 11700 models, we found that 14 hyper-
edges are present in all suboptimal models, and we thus expect
them to be functional in HepG2 cells. Fifty-nine hyperedges are
absent from all models, thus suggesting that they are not func-
tional in these cells. Finally, 57 hyperedges are present in only a
subset of the models; their frequency ranges from 0.99 to 0.0003,
showing a large variability (Fig. 3). Therefore, for the given ex-
perimental data, these hyperedges are not identiﬁable, as it is not
possible to determine whether they are functional in HepG2 cells.

Analogously to the set of optimal models, we investigated the
combinatorics within the family of suboptimal models. We found
four mutually exclusive pairs of modules (Fig. 2B). Replacing a

 

2322

112 /810's113umo [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁdllq U101} popeommoq

9IOZ ‘091sn8nv uo ::

Exhaustiver characterizing feasible logic models using ASP

 

 

 

B ﬂ.ﬂl% 99.99%

#

 

 

 

 

2

 

34%
 .--:.:Il.  " f' ]
33%

 

 

 

 

3 AF

E33

10% 90%

bird l'ifiﬂ m
4 'w'
 m

 

 

 

 

 

 

 

 

 

 

Fig. 2. Suboptimal models generated with caspo with 10% error tolerance. (A) Network of the union of 11700 suboptimal models. Green nodes
represent ligands that are experimentally stimulated. Red (or red-bordered) nodes represent those species that are inhibited with a small molecule
inhibitor (drug). Blue nodes represent species that were measured using the Luminex technology. White nodes are neither measured nor perturbed. AND
gates in the models are represented by empty boxes. The thickness of the hyperedges correspond to their frequencies among the 11700 submodels.
(B) Four pairs of mutually exclusive modules (blue hyperedges in A) and their corresponding frequencies on top. These modules determine the behavior

of three nodes in the network: mekl2, mkk4 and p38

14 57 59

I Certainty
‘1 Uncertainty

 

1 Hyperedges 13“

Fig. 3. Frequencies of hyperedges over 11700 suboptimal models within
10% tolerance. Among the 130 possible hyperedges, 14 were always pre-
sent, 59 were always absent and 57 were present in some but not all
models

module of each pair by the other has no effect on the MSE for
two of the pairs (1, 2 in Fig. 2B). However, for the pairs 3 and 4
there is a difference; 32 and 26.8%, respectively, of the subopti-
mal models differ in the output for a range from 8 to 15% of the
experimental conditions. All modules were constituted by a
single hyperedge, except 1A, which is set by two hyperedges:
{(ras /\ -akt —> mek), (ras /\ pi3k —> mek)} (Fig. 2, module 1A).
These two hyperedges were therefore always either both present
or both absent (mutually inclusive). As expected, there is a clear
difference between the frequencies in each pair of exclusive pat-
terns where smaller or simpler hyperedges are always more abun-
dant. Importantly, the mutually exclusive modules for the family
of suboptimal models are not the same as those present when
only optimal models are considered. This indicates that the

combinatorics exhibited within optimal models are not so im-
portant when considering experimental error, probably owing to
the larger variability among suboptimal models.

3.3 Input—output behavior

To further characterize the family of suboptimal models, we next
studied its input—output behavior as expressed by its GTTs.
Using caspo, we found that the 11700 suboptimal models cor-
respond to 91 different GTTs. In these 91 GTTs, the predicted
values are the same for 30% (4915 out of 16 384) of all the pos-
sible experimental conditions (i.e. 214 combinations of the 14
inputs of the model). Therefore, such predictions can be seen
as the ‘core’ predictions of the system behavior independently
from experimental noise. Considering the remaining 70% of ex-
perimental conditions, we found that at least seven experiments
are needed to discriminate among all GTTs (Table S4). By per-
forming such experiments, one would be able to generate at least
one different output prediction between every pair of GTTs.
Among the 11700 suboptimal models, there are only 13 dif-
ferent MSEs. The distribution of such MSEs is inhomogeneous,
and two MSEs (0.0519 and 0.0542) gather 71% of suboptimal
models (Fig. 4). For both most frequent MSEs, a GTT is much
more common than all the others: the ﬁrst GTT, at MSE 0.0519,
is shared by 3126 (27%) suboptimal models, while the second
most common GTT, at MSE 0.0542, is shared by 2090 (18%)
models. In contrast, the minimal GTT, at MSE 0.0499, was
shared by only the 16 minimal models. This analysis suggests
that the single optimal GTT at MSE 0.0499 is far from being
representative over the 11700 suboptimal models (0.1%). The
two most common GTTs are arguably much more relevant.
Interestingly, a hierarchical clustering reveals that these two

 

2323

112 /810's113umo [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁdllq U101} popeommoq

9IOZ ‘091sn8nv uo ::

C. Guziolowski et al.

 

most common GTTs cluster separately and that the GTT repre-
senting 27% of all suboptimal models is close to the optimal one
(Fig. 5).

Finally, we have investigated the space of experiments to iden-
tify the simplest ones (i.e. minimal number of stimulations and
inhibitions), which maximize the pairwise differences between the
optimal and the two most common GTTs. These three GTTs
differ pairwise in either one or two readouts among
p70s6, creb, p53, and only 192 experiments generate two differ-
ences. Out of these 192 experiments, we identiﬁed eight experi-
ments with minimal number of stimulations, and among them,
we selected the ones with minimal number of inhibitions (Fig. 6).
We noted that the two experiments found generate the same
output over the readouts. Thus, in contrast to the seven experi-
ments needed to discriminate among all GTTs, only one experi-
ment is required to discriminate between the optimal and the two
most common GTTs.

 

3300
F15: most common
3.000
ITIII IllEIE-IE
loos-13
1am DDS-II
—
4‘ 2nd most common r 0.053:-
m 1100
0.0534
1300 = 0.0531
“a lo 053
E 15m IUEIEH-
3 12m loan:
2 I0.0519
9'50 ID.EI51
O timal loose-r
Em  loo-199
300 l
I i: In... I I II. :-

 

 

 

 

0 iiim- — [ll'l-E-I'I in

Fig. 4. Distribution of suboptimal models. The suboptimal models are
ordered (from left to right) ﬁrst according to their MSEs, and then ac-
cording to their 91 GTTs. The number of different models leading to the
same GTT is plotted in vertical bars. GTTs are ordered and colored by
their MSE. The 16 optimal models correspond to MSE 0.0499. The two
most common GTTs describe the response of 3126 and 2090 models

 

 

3.4 Comparison with an stochastic optimization

We compared caspo with CellNOpt (Terfve et al., 2012), the
existing tool to solve the same problem, but using a genetic al-
gorithm. Stochastic search methods, such as genetic algorithms,
are intrinsically unable not just to provide a complete set of so-
lutions, but also to guarantee that an optimal solution is found.
Typically, one needs to combine solutions from multiple runs to
increase the conﬁdence. Thus, to illustrate the value of caspo in
comparison with CellNOpt, we have performed multiple runs of
it over the same case study.

From multiple independent runs of CellNOpt (1000 runs with
an average of 1000 s per run), we found 4706 suboptimal models
out of the 11 700 models found using caspo (70 s). The MSEs of
models found with CellNOpt spanned from 0.0499 to 0.0543
(Supplementary Fig. S3). This family of models was found com-
bining 20% of the runs, whereas in the other 80% all models
found were out of the allowed tolerance range. Notably, the 16
optimal models (MSE: 0.0499) were found by CellNOpt.
Concerning GTTs, the 4706 models exhibit 51 input—output be-
haviors out of the 91 we found with caspo (Supplementary
Fig. S4). The genetic algorithm retrieved all the GTTs in both
extremes of the hierarchical cluster, while the rest of the cluster
was not completely explored (Supplementary Fig. S5). Thus,
plausible behaviors away from the most common ones appear
less likely to be found. These results show the relevance of a
software tool like caspo, which allows us to explore exhaustively
the space of feasible solutions in short time.

4 CONCLUSION

A useful approach to model large-scale signaling networks con-
sists on training Boolean logic models from prior knowledge and
dedicated experimental data. The problem of training these
models is an optimization task that can be solved with stochastic
search methods (Saez-Rodriguez et al., 2009), which have the
important limitation that they do not guarantee global optimal-
ity nor an exhaustive solution. In this article, we show how re-
casting this problem in a highly declarative language allows us to

 

 

 

 

 

 

 

 

MSEvalues
8 — E00546 0.0523
°° - 0.0543 0.0522
0.0542 -0.0519
8 _ -0.0539 -0.051
LO 0.0534 -o.0507
0.0531 -o.0499
o -o.053
o _
<l'
O
o _
N ﬁg;
0 _ FEB; @5375 :71. H Elfin . 1 o

35
36

 

— 53 o—l
— 34
— 59
— 33
— 58
—
—
—

28

57

66

6

3

47

‘..........

 2nd most common G'l'l'
L*2090 models

 

 

lst most common G‘l'l' V
3126 models Optimal

Fig. 5. Hierarchical clustering of GTTs. Hierarchical clustering of the 91 GTTs based on their predictions for the readouts across all experimental
conditions. Bars length on the leafs represents the corresponding MSE value for each GTT. The optimal GTT (61) is highlighted, as well as the two most
common ones (85 and 77). The most common GTT is close to the optimal one, whereas the second most common GTT has a different behavior

 

2324

112 /310'spaumo [p.IOJXO'SOllBIIHOJUIOIQ/ﬁdllq U101} popeommoq

9IOZ ‘091sn8nv uo ::

Exhaustiver characterizing feasible logic models using ASP

 

 

Fig. 6. Experiments to discriminate more relevant GTTs. Both experi-
ments generate the same output in each GTT. Stimuli not shown are
inactive, inhibitors not shown are absent and readouts not shown have
the same value inthree GTTs

identify the complete family of feasible models and query them to
obtain insight into model degeneracy.

In a real-case study, we have seen that there is a family of
feasible models with a deep combinatorial structure: several com-
binations of internal submodules, with equal or similar scores,
can equivalently explain the observed behavior of the system.
This leads to a rapid growth of the family of suboptimal
models. Taking into account the inherent noise in data, we
showed that 11 700 different models can be considered as plaus-
ible representations of the PKN and an experimental phospho-
proteomics dataset. Thanks to our exhaustive characterization of
these models, we could determine unambiguously which hyper-
edges (biological links) are functional, based on their distribu-
tions across the models and determine whether groups of
hyperedges are exclusive from each other.

To further characterize this family of models, we introduced
the concept of GTTs and used it to explore their input—output
behavior. Compared with the model topologies, the variability is
much lower; the 11 700 models can be grouped in 91 GTTs, and
for 30% of the 16 384 possible perturbations, all models gave the
same predictions. Interestingly, the distribution of models among
GTTs is far from being equidistributed, and two GTTs comprise
almost half of the models, while the GTT corresponding to the
optimal score is speciﬁc (0.1% of the models). While the most
common GTT is similar to the GTT with optimal score, the
second most common GTT is different. However, a single
experiment is able to discriminate these models.

These results underscore the importance of exploring exhaust-
ively the family of models and take into account experimental
error to obtain an adequate picture of the feasible model solu-
tions. Our formal approach based on ASP allows a precise char-
acterization of the information that can be inferred from the
confrontation of prior knowledge with experimental observa-
tions over protein signaling networks. It also permits the study
of the internal combinatorics leading to the variability of the
system functioning and provides a tool toward experimental
design. Owing to the complexity of signaling networks and the
limitations of existing experimental technologies (in terms of
which nodes can be measures and/or perturbed), models typically
show an important lack of identiﬁability. This is a general limi-
tation of models in systems biology (Kreutz and Timmer, 2009).
In the context of Boolean models, we expect that further devel-
opment of experimental design (Sharan and Karp, 2012), in in-
timate coordination with advances in experimental techniques
will allow us to tackle this issue.

This work opens the way to several prospective tracks. First, it
would be useful to evaluate our ASP formulation and those
based on ILP from (Mitsos et al., 2009) and (Sharan and
Karp, 2012) to understand their strengths and complementary
features. In contrast to ILP, ASP is a relatively new tool for

problem solving in biology. ASP, having its roots in knowledge
representation and reasoning, has proven to be well suited to
address highly combinatorial search and discrete optimization
problems, with at least comparable performance with well estab-
lished ILP solvers. On the other hand, ILP as a mathematical
programming framework may be more suitable to study prob-
lems based on calculus over large domains of integer or rational
numbers. Therefore, combining the expressiveness and power of
several solving technologies instead of selecting one of them
seems a promising option for the future (Liu et al., 2012;
Ostrowski and Schaub, 2012).

Second, we plan to study the extension of our approach to
time-series data, although switching from a steady state to a dy-
namical viewpoint implies a growth of the search space. Fitting
models whose steady states evolve between clearly separated
time-scales (Terfve et al., 2012) should be of similar complexity
to the problem studied in this article. Fitting to the actual time-
courses of a Boolean model has a higher level of complexity, as it
requires to adjust the time-step of the Boolean model to the real
time of the measurements.

More generally, we need to develop a rigorous framework to
study models of biological networks as a family of plausible
realizations, not of single networks. A ﬁrst approximation
could be to compare experimental data (ideally a distribution
across individual cells) with a distribution of simulated results
across a family of single logical models. The comparison of the
distribution of feasible models with single cell data emerges as
longer-term follow-up of this work that should provide deep in-
sight into the cell-to-cell heterogeneity of signal transduction
(Kolitz and Lauffenburger, 2012).

Altogether, we have implemented an open-source tool based
on ASP providing a powerful framework to analyze networks
models in systems biology. Further, several prospective tracks
will certainly lead to future developments to extend and improve
the functionalities of caspo.

ACKNOWLEDGEMENTS

Thanks to E. Goncalves for help plotting the networks and
A. MacNamara and C. Chancellor for reading the manuscript.

Funding: EU through project ‘BioPreDyn’ (ECFP7-KBBE-2011-
5 Grant number 289434); French National Agency for Research
(ANR-lO-BLANC-0218); Federal Ministry of Education and
Research (BMBF ‘MEDSYS’ project 0315401B).

Conflict of Interest: none declared.

REFERENCES

Alexopoulos,L.G. et al. (2010) Networks inferred from biochemical data reveal
profound differences in toll-like receptor and inﬂammatory signaling between
normal and transformed hepatocytes. Mol. Cell Proteomics, 9, 1849—1865.

Banga,J.R. (2008) Optimization in computational systems biology. BM C Syst. Biol,
2, 47.

Baral,C. (2003) Knowledge Representation, Reasoning and Declarative Problem
Solving. Cambridge University Press, Cambridge, UK.

Calzone,L. et al. (2010) Mathematical modelling of cell-fate decision in response to
death receptor engagement. PLoS Comput. Biol, 6, 61000702.

Durzinsky,M. et al. (2011) Automatic network reconstruction using ASP. Theory
Pract. Logic Program, 11, 749—766.

 

2325

112 /310'spaumo [p.IOJXO'SOllBIIHOJUIOIQ/ﬁdllq U101} popeommoq

9IOZ ‘091sn8nv uo ::

C. Guziolowski et al.

 

Fayruzov,T. et al. (2009) Modeling Protein Interaction Networks with Answer Set
Programming. In: International Conference on Bioinformatics and Biomedicine,
2009. pp. 99—104.

Gebser,M. et al. (2010) Repair and prediction (under inconsistency) in large biolo-
gical networks with answer set programming. In: 12th International Conference
on Principles of Knowledge Representation and Reasoning. AAAI Press,
pp. 497—507.

Gebser,M. et al. (2013) Answer Set Solving in Practice. volume 19 of Synthesis
Lectures on Artificial Intelligence and Machine Learning. Morgan and
Claypool Publishers.

Klamt,S. et al. (2006) A methodology for the structural and functional analysis of
signaling and regulatory networks. BM C Bioinformatics, 7, 56.

Kolitz,S.E. and Lauffenburger,D.A. (2012) Measurement and Modeling of
Signaling at a Single-C611 Level. Biochemistry, 51, 7433—7443.

Kreutz,C. and Timmer,J. (2009) Systems biology: experimental design. FEBS J.,
276, 923—942.

Liu,G. et al. (2012) Answer set programming via mixed integer programming. In: 13th
Int. Conf on Principles of Knowledge Representation and Reasoning. AAAI Press.

Mitsos,A. et al. (2009) Identifying drug effects via pathway alterations using an
integer linear programming optimization formulation on phosphoproteomic
data. PLoS Comp. Biol, 5, 61000591.

Morris,M.K. et al. (2011) Training signaling pathway maps to biochemical data
with constrained fuzzy logic: quantitative analysis of liver cell responses to in-
ﬂammatory stimuli. PLoS Comp. Biol, 7, 61001099.

N6ron,B. et al. (2009) Mobyle: a new full web bioinformatics framework.
Bioinformatics, 25, 3005—3011.

Ostrowski,M. and Schaub,T. (2012) ASP modulo CSP: Th6 clingcon system. Theory
Pract. Logic Program, 12, 485—503.

Papatheodorou,I. et al. (2012) Using Answer Set Programming to Integrate RNA
Expression with Signalling Pathway Information to Inf6r How Mutations
Affect Ageing. PLoS One, 7, 650881.

Ray,O. and Soh,T. (2012) Analyzing pathways using ASP-based approaches.
Algebr. Numeric Biol, 6479, 167—183.

Saez-Rodriguez,J. et al. (2009) Discrete logic modelling as a means to link protein
signalling networks with functional analysis of mammalian signal transduction.
Mol Syst. Biol, 5, 331.

Schaub,T. and Thi616,S. (2009) Metabolic network expansion with answer set pro-
gramming. In: 25th International Conference on Logic Programming. volume
5649 of LNCS. Springer.

Sharan,R. and Karp,R.M. (2012) Reconstructing Boolean models of signaling. In:
Research in Computational Molecular Biology. Springer Berlin Heidelberg,
pp. 261—271.

Teer6,C.D. et al. (2012) CellNOptR: a ﬂexible toolkit to train protein
signaling networks to data using multiple logic formalisms. BMC Syst. Biol,
6, 133.

Videla,S. et al. (2012) Revisiting the Training of Logic Models of Protein Signaling
Networks with ASP. In: 10th International Conference on Computational
Methods in Systems Biology. LNCS. Springer, pp. 342—361.

Walter,E. and Pronzato,L. (1996) On the identiﬁability and distinguishability of
nonlinear parametric models. Math. Comput. Simul, 42, 125—134.

Wang,R.S. et al. (2012) Boolean modeling in systems biology: an overview of meth-
odology and applications. Phys. Biol, 9, 055001.

 

2326

112 /310'spaumo [p.IOJXO'SOIlBIHJOJUIOIQ/ﬁdllq U101} popeommoq

9IOZ ‘091sn8nv uo ::

