APPLICA TIONS NOTE V"" 53.3%: liég/Esﬁiiﬁal’c‘ifgllgé

 

Bioimage informatics Advance Access publication February 23, 2013

BioJS: an open source JavaScript framework for biological
data visualization

John Gomezl, Leyla J. Garcia‘, Gustavo A. Salazar2, Jose VillaveceSS, Swanand Gorel,
Alexander Garcia4, Maria J. Martin‘, Guillaume Launay5, Rafael Alcantaral, Noemi del-Toro‘,
Marine Dumousseau‘, Sandra Crchard‘, Sameer Velankarl, Henning Hermjakobl,
Chenggong Zong6, Peipei Ping6, Manuel Corpas7 and Rafael C. Jimenez”

1European Bioinformatics Institute, Hinxton, Cambridge, CB10 1SD, UK, 2Computational Biology Group, Department of
Clinical Laboratory Sciences, University of Cape Town, Cape Town, 7925, South Africa, 8Max Planck Institute for Biology
of Ageing, Cologne, D—50931, Germany, 4Institute for Digital Information and Scientific Communication, Florida State
University, Tallahassee, FL, 32306—2100, USA, 5Institut de Biologie et Chimie des Proteines, UMR 5086 CNRS—Universite
Lyon 1, IFR 128 Biosciences Gerland—Lyon Sud, 7 passage du Vercors 69367, Lyon Cedex 07, France, 6Cardiovascular
Research Laboratory, Division of Cardiology, Departments of Physiology and Medicine, UCLA David Geffen School of
Medicine, Los Angeles, CA, 90095—1760, USA and 7The Genome Analysis Centre, Norwich Research Park, Non/vich,

NR4 7UH, UK

Associate Editor: Jonathan Wren

 

ABSTRACT

Summary: BioJS is an open-source project whose main objective is
the visualization of biological data in JavaScript. BioJS provides an
easy-to-use consistent framework for bioinformatics application pro-
grammers. It follows a community-driven standard specification that
includes a collection of components purposely designed to require a
very simple configuration and installation. In addition to the program-
ming framework, BioJS provides a centralized repository of compo-
nents available for reutilization by the bioinformatics community.
Availability and implementation: http://code.google.com/p/biojs/.
Contact: rafael@ebi.ac.uk

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on October 25, 2012; revised on February 14, 2013;
accepted on February 20, 2013

1 INTRODUCTION

Numerous web applications exist for the visualization and inte-
gration of biological data. Biological data can be complex and
heterogeneous, making it challenging to integrate and visualize
results in web applications. JavaScript is a popular language for
developing Rich Internet Applications (RIA); most RIA rely on
JavaScript libraries for deployment of functionality. Despite its
widespread use in bioinformatics, J avaScript applications are usu-
ally implemented to satisfy a particular utility, ignoring its poten-
tial for reutilization by other applications with similar purposes.

Here, we present BioJ S, an open source community-driven
JavaScript framework of reusable graphical components. BioJ S
offers a set of standard guidelines on how to develop components
for JavaScript modules in the Life Sciences. These guidelines
make installation and addition of new code the same for

 

*To whom correspondence should be addressed.

all new components, minimizing effort and encouraging good
programming practice.

BioJS provides a catalogue of open source modules
in JavaScript for Life Sciences. These modules include many
commonly used functionalities, available there for developers
or scientists to download. BioJ S embraces a similar philosophy to
previously successful biologically oriented open source projects,
such as BioPerl (Stajich et al., 2002), BioJava (Prlic et al., 2012),
BioPython (Cook et al., 2009) or BioRuby (Goto et al., 2010),
advocating that any functional component or module should be
developed only once and reused whenever possible. Our ap-
proach offers a standard and scalable set of speciﬁcations to
produce custom applications; it also facilitates the integration
of components into more comprehensive web applications. To
our knowledge, no community efforts have so far achieved a
coordinated development of JavaScript applications for the
visual representation of biological data.

2 BIOJS COMPONENTS

At the time of writing, there are 29 components available and 18
registered contributors to the project. Table 1 lists a few example
components considered important and representative. BioJ S
components follow a standard speciﬁcation facilitating their in-
tegration in third party web applications. The BioJ S architecture
defines common events that make components capable of com-
municating and exchanging data (Fig. l). The project is serviced
by a registry that enables users to interact and discover existing
components. The registry periodically delivers documentation,
providing search functionalities for component discovery. When
a component is accessed from the registry (Fig. 2), its description
includes a functional example, a sample code of how to install it
and documentation on how to use dependencies, methods and
events. The development of a Bio] S component might initially
take longer than developing the same module using an

 

© The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 1103

112 /310's113umo [p.IOJXO'SOTlBIHJOJUTOTQ/ﬁdllq 11101; pepBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

J.Go'mez et al.

 

Table 1. A selection of BioJ S components and their functionalities

 

Component Functionality

 

Das Protein Feature Viewer
Gene Expression Summary

with its overall mean expression levels
Interactions Table

Uses a web service to retrieve and display protein features from DAS sources
Queries Gene Expression Atlas database to show published studies where a gene is over/under—expressed compared

Shows binary molecular interactions in table format

Protein3D Renders a Protein Data Bank (PDB) ﬁle in 3D using Jmol (http://jmol.sourceforge.net/)

Protein Portfolio
Chromosome

Shows protein description and PDB alignments if available.
Visualizes a chromosome and its bands, which can be recovered from a DAS source or a J avaScript model

 

Crass-hummer w   @

Welt Scr‘rit‘ufﬂli‘ix

I:
l
I:

 

 

 

Lun- I 1.5:".- n '
“1 n n u 3
I — — — — _- EE 3 If
1 a E E x
— I = E '1 '
—
1 m g: t  -
— “ =' I'm“
. — E 9: ILIIEHI
_ _ _ _ _ ___. - llultn'm
_ _ m. _ - 

Fig. 1. Architectural representation of a typical BioJ S application. BioJ S
core includes event and event handler classes

BIOJS

 

I'lﬂl'l'lE} 1::EI'IW'4ET'IIE-
'BiojsﬁeneExpressionSummary showcase
-llﬁti'ﬂﬂm, ._EEL"=.=P_S._-  “Errata.

i ASFH {Hﬂarm'rﬂal exprauiun ammry Events

' DHMHISH PART am, a onD-t-Er'cl
bane r'Ij-arrn'n 1h'p'l'l‘lll5
Ems" "HE'S-L”:— _ I'M'H'“ ‘ a mReuuestErmr
manner amt: f" "“ I.”
giohlastorna. El'lllldl BLITHIII'S II ﬁlial I
ii'rmhmna. rnhn carom-nan I: ,I -- I 1 "*'
I Hunyosarcnma a  If I ., *Fiw?‘ I.:...-.-.....-:--- :-I-1'|:-u-|Irl ' Methods
LELLT‘r‘FL I" I a. . .
embrynritslemcelll 511ml U h 'w m""”"”'"*'-‘-“" D   .
{an c034: Toell  = j, 1 “W... 3
CELL Lqu I. I ' “um-a. »
' nuns. al.—at: H.562. J: L: l' J , .-. _
I  “J rm}. "h. lwI-I-al-m 1., n ________”___

EDHPEIEJHD TREATMENT 'I.';I"I:I|:‘ car M-ni'itd :tud'cs slicer: .'.‘nc yer:
|'||:ll'IE Ilpﬂplﬂffjaclzhande 5' Dﬂ'fuﬂll'ﬁf-mﬁ'ﬁﬁm campa'un' :5 .‘.':: germ:
'n'E'l'lEIE'. chlmrnezanune 2E0 cue-r Hue mend:- -'¢-¢' r- me that.

i Fl'llElmElr-i'i'r. -'.

|
Dependencies

Fig. 2. Illustration of the BioJS registry displaying the
GeneExpressionSummary component (http: / / goo. gl/pwtv3)

independent J avaScript application, but this is only for as long as
the user familiarizes him/herself with the framework.

BioJS is framework agnostic, only requiring the code to be
written in JavaScript. The developer of a new component is
thus free to use any framework (e.g. JQuery, http://jquery.
com/; YUI, http://yuilibrary.com/) and to include any other li-
brary (Raphael, http://raphaeljs.com/; D3, http://d3js.org/). The
look and feel of a component can be easily conﬁgured using
Cascade Style Sheet (CSS) to enable its integration via different
web applications. Any component by deﬁnition extends the
BioJ S reference implementation incorporating the rules provided
by the BioJ S speciﬁcation: (i) the component architecture,
(ii) a protocol to handle events that allows communication
between components, (iii) the component extension through
Object-Oriented Inheritance, (iv) the code documentation
format and (v) documentation on how to include examples to

test the component functionality. We are aware of several bio-
informatics projects already using BioJS to visualize data. For
instance, the CATH (Cuff et al., 2011) and the IntAct (Kerrien
et al., 2012) databases both use the Protein3D viewer, an example
of the reutilization of an existing component. The Biotea Project
(Garcia-Castro et al., 2012) reuses and extends BioJ S components
to visualize the biological data of PubMed Central articles.

3 CONCLUSIONS

BioJS provides a framework for development and sharing of
graphical components, implemented in J avaScript. Availability
of a central registry and a common set of guidelines facilitates
component discovery while reducing development time. We have
presented here some of BioJ S’s visualization capabilities for sev-
eral biological applications, making use of existing components.
We anticipate BioJ S’s available functionality to grow steadily in
the near future. Our project will be successful in the measure in
which it reduces overall development time for new web applica-
tions requiring visualization of biological data.

ACKNOWLEDGEMENTS

We are grateful to Lee Katz for his early contributions to this
project.

Funding: NHLBI Proteomics Center Award
(HHSN268201000035C); the UK’s Biotechnology and
Biological Sciences Research Council (BBSRC); European
Commission grant PSIMEx (FP7-HEALTH-2007-22341l).

Conﬂict of Interest: none declared.

REFERENCES

Cock,P.J. et al. (2009) Biopython: freely available Python tools for computational
molecular biology and bioinformatics. Bioinformatics, 25, 1422—1423.

Cuff,A.L. et al. (2011) Extending CATH: increasing coverage of the protein struc-
ture universe and linking structure with function. Nucleic Acids Res, 39,
D420—D426.

Garcia-Castro,L.J. et al. (2012) Conceptual Exploration of Documents and Digital
Libraries in the Biomedical Domain. International Workshop on Semantic Web
Applications and Tools for Life Sciences. CEUR-WS.org., Paris, France.

Goto,N. et al. (2010) BioRuby: bioinformatics software for the Ruby programming
language. Bioinformatics, 26, 2617—2619.

Kerrien,S. et al. (2012) The IntAct molecular interaction database in 2012. Nucleic
Acids Res, 40, D84l—D846.

Prlié,A. et al. (2012) BioJava: an open-source framework for bioinformatics in 2012.
Bioinformatics, 28, 2693—2695.

Stajich,J.E. et al. (2002) The Bioperl toolkit: Perl modules for the life sciences.
Genome Res, 12, 1611—1618.

 

1104

112 /310's113umo [p.IOJXO'SOIlBIHJOJUIOICI/ﬁdllq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

