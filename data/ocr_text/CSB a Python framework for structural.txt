APPLICA TIONS NOTE V°" iaiiﬁa‘iéiaiﬁgﬁiii/ﬁiiié

 

Structural bioinformatics

Advance Access publication August 31, 2012

CSB: a Python framework for structural bioinformatics
Ivan Kalev1 ’*, Martin Mechelke‘, Klaus O. Kopec‘, Thomas Holder‘, Simeon Carstens1 and

Michael Habeck1’2’*

1Department of Protein Evolution, Max Planck Institute for Developmental Biology, Spemannstrasse 35 and 2Department
of Empirical Inference, Max Planck Institute for Intelligent Systems, Spemannstrasse 38, 72076 Tiibingen, Germany

Associate Editor: Anna Tramontano

 

ABSTRACT

Summary: Computational Structural Biology Toolbox (CSB) is a cross-
platform Python class library for reading, storing and analyzing biomo-
lecular structures with rich support for statistical analyses. CSB is
designed for reusability and extensibility and comes with a clean,
well-documented API following good object-oriented engineering
practice.

Availability: Stable release packages are available for download from
the Python Package Index (PyPl) as well as from the project’s website
http://csb.codeplex.com.

Contacts: ivan.kalev@gmail.com or michael.habeck@tuebingen
.mpg.de

Received on July 10, 2012; revised on August 6, 2012; accepted on
August 24, 2012

1 INTRODUCTION

The Python programming language is becoming an increasingly
popular choice in research. With its comprehensive numerical
libraries and dynamic type system, Python facilitates rapid ap-
plication development. But although rapid prototyping is very
practical for experimenting with new techniques or features, sys-
tematic use of ad hoc scripting often turns into a burden prevent-
ing efﬁcient code reuse. This problem is solved with the use of
continuously developed, well-abstracted and tested software
libraries. Productivity in building solid, reliable and extensible
bioinformatics applications could therefore signiﬁcantly beneﬁt
from the practice of using library code.

Here, we introduce the public release of CSB, a Python library
designed for solving problems in the ﬁeld of computational struc-
tural biology. CSB improves over existing libraries such as
Biopython (Cock et al., 2009) with its granular, consistent and
extensible object model and also provides new features like a
comprehensive statistical API and support for new abstractions
and ﬁle formats. This project is a quickly growing class library
for structural bioinformatics, providing clean object-oriented
APIs for working with biological macromolecular structures,
sequences, sequence proﬁles and fragment libraries, and also a
signiﬁcant amount of statistical modules, including many prob-
ability distributions and samplers. We put a strong emphasis on
quality and reliability achieved through continuous attention to
good software design and best practices in test engineering.

 

*To whom correspondence should be addressed.

2 CORE LIBRARY

CSB consists of several highly branched, hierarchical Python
packages. The core library is roughly divided into bioinformatics
(csb.bi0.*) and statistics (csb.statistics.*).

The csb.bi0 namespace hosts a number of packages that de-
ﬁne all fundamental biological abstractions of the library. For
example, csb.bi0.sequence deﬁnes the AbstractSequence and
AbstractAlignment objects and also provides some standard
implementations of these abstractions, such as Sequence,
SequenceAlignment and StructureAlignment. As suggested by
its name, csb.bi0.hmm deals with HHpred and its proﬁle
HMMs (deing, 2005), while csb.bi0.fragments contains objects
describing protein structure fragment libraries. The package
csb.bi0.structure implements essential CSB objects like
Structure, Chain, Residue and Atom.

The Structure class illustrates examples of CSB’s design phil-
osophy. Structure instances are hierarchical objects, implement-
ing the composite pattern. Each level in this hierarchy is
represented by a class, derived from the base AbstractEntity.
Every entity thus exposes a standard set of operations such as
AbstractEntity.transf0rm U, which automatically propagate
down the tree when invoked at arbitrary level. Users are free
to deﬁne their own, pluggable AbstractEntity implementations.

Another aspect of the core library is our I/O API for a broad
variety of biological ﬁle formats (csb.bi0.io). For example,
csb.bi0.i0.hhpred is the ﬁrst publicly available Python module
to date for working with HHpred’s HMM and result ﬁles
(deing, 2005). Another module, csb.bi0.i0.mrc, implements ob-
jects for processing cryo-electron microscopy maps, while
csb.bi0.i0.clans provides 1/0 for CLANS (Frickey and Lupas,
2004). Reading and writing PDB ﬁles is done using our PDB
API, which is part of csb.bi0.i0.wwpdb. It is worth mentioning
that the default PDB parser in CSB differs signiﬁcantly from
existing solutions such as Biopython. StructureParser reads and
initializes all residues from SEQRES (if available), rather than
the ATOM ﬁelds in the ﬁle. ATOM records are subsequently
mapped to the residue objects using a simple and fast alignment
algorithm. Therefore, Chain objects in CSB always contain
the complete primary structure of the PDB chain, as deﬁned
by the SEQRES ﬁelds. This feature eliminates the need to
relate the PDB atoms back to the real sequence of the protein
in question—a process which is often difﬁcult and error-prone.
When benchmarked over the complete PDB database, our
SEQRES mapping algorithm fails for about 250 structures.
This is frequently an indication of a PDB format issue. In this

 

2996 © The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com

112 /810'S{12umo[pJOJXO'sot1emJOJutotw/2d11q mot; pepeolumoq

910K ‘09 lsnﬁnV no :2

Python framework

 

case, the parser would raise a characteristic exception upon
which the client can switch to an ATOM-based parsing mode.

We compared the performance of RegularStructureParser
with PDB I/O modules from alternative libraries: Biopython,
PyCogent (Cielik et al., 2011) and the C++ based Open
Structure (Biasini et al., 2010). As expected, OpenStructure was
the fastest and parsed 4000 PDB entries with 0.09 s per structure.
CSB is positioned between Biopython (0.19s) and PyCogent
(0.43 s) with 0.32s per structure, which suggests that the
SEQRES mapping feature comes with an acceptable perform-
ance overhead.

Our library also hosts a collection of statistical models in the
csb.statistics namespace. Among these models are standard uni-
and multivariate probability distributions such as the Normal
and the Gamma distribution and also more exotic distributions
such as the multivariate normal inverse Gaussian distribution
used to model multivariate heavy-tailed data. Several estimators
based on maximum likelihood and Gibbs sampling are imple-
mented. Moreover, we provide a general framework for Markov
chain Monte Carlo simulation and implementation of standard
schemes such as random walk Metropolis Hastings, Hamiltonian
Monte Carlo (Duane et al., 1987) and replica-exchange
Monte Carlo (Swendsen and Wang, 1986). Methods to analyze
Monte Carlo output are also provided such as, for example, a
non-parametric histogram reweighting scheme for the estimation
of free energy differences (Habeck, 2012).

3 CSB APPLICATIONS

CSB comes with a simple framework for writing console appli-
cations (csb.apps). These applications could be seen as short
protocols built on top of the core library and consuming its
APIs. Each release is bundled with a number of pre-installed,
open-source applications. For example, csb.apps.hhfrag provides
HHfrag, a CSB application for building dynamic fragment
libraries (Kalev and Habeck, 2011). BFit is another app, which
performs robust superposition of protein structures (Mechelke
and Habeck, 2010). Every release package also contains
EMBD, an application for sharpening of cryo-electron micros-
copy maps (Hirsch et al., 2011) using non-negative deconvolu-
tion and Promix, an application implementing Gaussian mixture
models for identifying rigid domains in structure ensembles
(Hirsch and Habeck, 2008).

4 DEVELOPMENT

One of the key design goals of CSB is providing clean, extensible,
object-oriented APIs with accompanying API documentation.
This project puts a strong emphasis on quality, achieved through
systematic use of abstraction, strong encapsulation, separation of
responsibilities and refactoring with classic design patterns.

Our development team has adopted a continuous integration
model. The reliability of the production code is controlled by
CSB’s built-in high-coverage unit test framework. Stable builds
will be gradually released to the public domain, and nightly
builds can be obtained upon request. Portability is also a
design goal, so CSB works without modiﬁcation on every
major platform (Windows, Linux and Mac) and any modern
Python interpreter (version 2.6 or higher, including Python 3).

Funding: Contract research ‘Methoden in den Lebenswis-
senschaften’ of the Baden-Wﬁrttemberg Stiftung, by Deutsche
F orschungsgemeinschaft (DFG) grant HA 5918/ 1-1 and by the
Max Planck Society.

Conflict of Interest: none declared.

REFERENCES

Biasini,M. et al. (2010) OpenStructure: a ﬂexible software framework for computa-
tional structural biology. Bioinformatics, 26, 2626—2628.

Cielik,M. et al. (2011) Abstractions, algorithms and data structures for structural
bioinformatics in PyCogent. J. Appl. Crystallogr., 44 (Pt 2), 424—428.

Cock,P.J. et al. (2009) Biopython: freely available Python tools for computational
molecular biology and bioinformatics. Bioinformatics, 25, 1422—1423.

Duane,S. et al. (1987) Hybrid Monte Carlo. Phys. Lett. B, 195, 216—222.

Frickey,T. and Lupas,A. (2004) CLANS: a Java application for visualizing protein
families based on pairwise similarity. Bioinformatics, 20, 3702—3704.

Habeck,M. (2012) Evaluation of marginal likelihoods using the density of states.
In Lawrence,N. and Girolami,M. (eds.) Proceedings of the Fifteenth
International Conference on Artiﬁcial Intelligence and Statistics ( AIST AT S )
2012. Vol. 22, La Palrna, Canary Islands. JMLR:W&CP 22.

Hirsch,M. and Habeck,M. (2008) Mixture models for protein structure ensembles.
Bioinformatics, 24, 2184—2192.

Hirsch,M. et al. (2011) A blind deconvolution approach for improving the reso-
lution of cryo-EM density maps. J. Comput. Biol, 18, 335—346.

Kalev,I. and Habeck,M. (2011) HHfrag: HMM-based fragment detection using
HHpred. Bioinformatics, 27, 3110—3116.

Mechelke,M. and Habeck,M. (2010) Robust probabilistic superposition and com-
parison of protein structures. BM C Bioinformatics, 11, 363.

deingJ. (2005) Protein homology detection by HMM—HIVIM comparison.
Bioinformatics, 21, 951—960.

Swendsen,R.H. and Wang,J.-S. (1986) Replica Monte Carlo simulation of spin
glasses. Phys. Rev. Lett., 57, 2607—2609.

 

2997

112 /810'S{12umo[pJOJXO'sottchOJutotw/zd11q IIIOJJ pepcolumoq

910K ‘09 isnﬁnV no :2

