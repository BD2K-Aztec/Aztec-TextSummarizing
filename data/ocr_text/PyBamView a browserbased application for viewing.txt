APPLICA TIONS NOTE V0" 32.7%.iﬁgi‘iéi’giﬁéiiiié’é’iﬁé‘éé

 

Sequence analysis

Advance Access publication August 21, 2014

PyBamView: a browser-based application for viewing short read

alignments

Melissa Clymrek1 ’2’3

1Whitehead Institute for Biomedical Research, 9 Cambridge Center, Cambridge, MA 02142, 2Harvard—MIT Division of
Health Sciences and Technology, MIT, Cambridge, MA 02139 and 8Program in Medical and Population Genetics, Broad

Institute of MIT and Harvard, Cambridge, MA 02142, USA

Associate Editor: Gunnar Ratsch

 

ABSTRACT

Summary: Current sequence alignment browsers allow visualization
of large and complex next-generation sequencing datasets. However,
most of these tools provide inadequate display of insertions and can
be cumbersome to use on large datasets. | implemented PyBamView,
a lightweight Web application for visualizing short read alignments. It
provides an easy-to-use Web interface for viewing alignments across
multiple samples, with a focus on accurate visualization of insertions.
Availability and Implementation: PyBamView is available as a stand-
ard python package. The source code is freely available under the MIT
license at https://mgymrek.github.io/pybamview.

Contact: mgymrek@mit.edu

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on May 26, 2014; revised on July 27, 2014; accepted on
August 14, 2014

1 INTRODUCTION

The rapid growth of next-generation sequencing (NGS) technol-
ogies has led to a wide variety of short read DNA datasets.
Manual inspection of sequence alignments is an important
aspect of quality control. While the majority of NGS analyses
have focused on single nucleotide polymorphisms (SNPs), recent
bioinformatics advances allow analysis of more complicated vari-
ants, such as small insertions or deletions (Montgomery et al.,
2013), larger structural variants (Ye et al., 2009) and short
tandem repeats (Gymrek et al., 2012; Highnam et al., 2013).
Furthermore, widely used genome engineering techniques, such
as the CRISPR—Cas9 system (Cong et al., 2013) can often
produce a wide range of complex variants. In these cases, visu-
alization of insertion and deletion events is a particularly critical
analysis step.

Current genome browsers, such as the UCSC Genome
Browser (Kent at al., 2002) and the Integrative Genomics
Viewer (IGV) (Robinson et al., 2011), offer visualization of align-
ments from SAM/BAM files across multiple samples and inte-
gration of many layers of genomics datasets. However, most
existing tools have two important limitations. First, most are
based on alignments to an ungapped reference sequence, which
provides inadequate visualization of insertions. The SAM speci-
ﬁcation supports a padded reference, which captures multiple

sequence alignment information and results in accurate insertion
display by most browsers. However, most BAM files consist of
pairwise alignments of short reads to a reference and do not use
this feature. As a result, insertions are represented by an icon
such as a vertical bar, which does not provide any visual infor-
mation about the size or sequence of the inserted nucleotides.
Second, the majority of alignment browsers are cumbersome to
use, especially to visualize the large datasets typical of NGS ex-
periments. They either require that the user upload large data
files to a remote server or involve complicated installation and
large resource requirements to run locally.

Several alignment browsers, such as Bambino (Edmonson
et al., 2011), Consed (Gordon and Green, 2013) and the
text-based SAMtools (Li et al., 2009) tview, overcome these limi-
tations: they display the sequence of insertions even when using
the standard ungapped reference, and are run locally with rela-
tively low system requirements. However, tview does not allow
the user to view multiple BAM files at once, and none of these
tools allow for exporting alignments as snapshots or for sharing
alignments remotely through a Web browser.

Here, I present PyBamView, a lightweight Web application for
viewing alignments from BAM files. PyBamView provides align-
ment visualizations that accurately represent SNP, insertion and
deletion events that can easily be exported to create publication-
ready ﬁgures. It runs locally from the command line with
minimal resource requirements and displays alignments in a
Web browser. This interface allows users to quickly view align-
ments locally and to easily share alignments with local or remote
collaborators.

2 BASIC USAGE AND FEATURES

PyBamView is a Python-based Web application that is run from
the command line. Users provide PyBamView with a directory
containing indexed BAM files and an optional reference genome
in fasta format:

pybamview ——bamdir DIRECTORY/WITH/BAMS ——ref
REF . fa

PyBamView will start a small Web server that can be accessed
locally in a Web browser. Optional arguments can serve the
application over a different address, for instance, for sharing

 

© The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e—mail: journals.permissions@oup.com 3405

112 /§.IO'S[BU.IHO[p.IOJXO'SOTmIHJOJUTOTQﬂI(1111] U101} pepBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

M. Gymrek

 

IEE'J'IEEEIE EDEEDEEEIEEI DEIEE BEE! l3 EEEEIEIDI

Samplel

BAIT-EC FFEGACI‘IFI‘IE J'IGHC EDI."- h Chﬂﬂﬁﬁn
page: ggcqncagag agar.- cc'q a cagggaa
cage-t: IJQE-QJEJI'JJQ agar: Ctr] .1 tug-39.1.1
cage-c I'JII'E'IJL‘I-C 1r_| It; .anc ccqg 1 :41 r. qty-iq

{b} EH Ell] EB llllllllll HE! E! DEE!

Sample 2
1:: 4: 4] a- c I: L] g a c n g :3 l] £1 a a u
C C It'. 11. C. (I f: I: II. I: h :1 ti. I: h n. n n
I: I: q .1. I: nc . . . _ . _ . _ . _ q [1' n :I. .‘I :I.
E I: G JI. E C _ _ . _ . _ . _ . _ G I] P. A. P. A.

Fig. 1. PyBamView display of sequence variants. In each ﬁgure, the
reference sequence is shown at the top followed by alignments of each
read. Alignments were generated by PyBamView’s PDF export feature.
(a) Mismatches from the reference sequence, due to either SNPs or
sequencing errors, are shown as highlighted bases. (b) Insertions are
shown as gaps in the reference, which allows the length and sequence
of the insertion to be easily visualized

the URL with remote collaborators or as a public resource. For
instance, adding the options --ip 0.0.0.0 --port 5000 will serve
PyBamView over port 5000 via http. The Supplementary Text
and program Web site contain a complete description of this
feature.

The Web browser displays a list of all samples contained in the
BAM ﬁles provided. Users can select one or more samples to
open in the genome-browser view. This consists of a reference
track, followed by collapsible alignment tracks containing reads
for each sample. While there is theoretically no limit to the
number of samples analyzed, PyBamView can reasonably display
ﬁve low to moderate coverage samples at once.

Users can navigate to the genomic region of interest by enter-
ing the genomic coordinate into the search bar (e. g. chr1:10000).
In the default view, base pair differences from the reference
genome are highlighted, allowing easy identiﬁcation of SNPs
and potential sequencing errors (Fig. la). A deleted base pair
is indicated by a ‘.’ in the alignment, and an insertion as a ‘.’
in the reference sequence (Fig. lb). This allows easy visualization
of the sequence and size of inserted bases, which is not currently
possible with most alignment browsers (Supplementary Fig. S1).
Users can zoom out up to 100x to easily visualize large inser-
tions or deletions spanning hundreds or thousands of bases.
Additional features are described in the Supplementary Text.

3 EXAMPLE USE CASES

Alignment visualization is a critical step of any sequencing ex-
periment. Here, I show three examples where PyBamView pro-
vides useful visualization of sequence variants. Use cases are not
limited to these examples and can theoretically include any ‘-seq’
experiment that can be represented by a BAM ﬁle.

First, it provides accurate visualizations of different length
insertions, such as different alleles of a tandem repeat
(Supplementary Fig. S2a). Furthermore, zooming out allows
for visualization of large repeat expansions, such as a 60bp
CAG expansion in Huntington’s Disease (Supplementary Fig.
S2b, simulated 250bp reads).

Second, it can be used to analyze variation across samples.
This is useful in such analyses as comparing matched tumor
versus normal samples or looking for mutations in affected ver-
sus non-affected individuals in disease genetic studies.
Supplementary Figure S3 shows example comparisons of indi-
viduals at a SNP, small insertion and a large deletion spanning
several kb.

Third, it can visualize complex mutations generated by
genome engineering technologies such as CRISPR-Cas9 (Cong
et al., 2013). Dissecting these mutations requires adequate visu-
alization of indels. An example alignment from a CRISPR li-
brary is shown in Supplementary Figure S4.

4 IMPLEMENTATION

PyBamView is implemented as a Python-based Web application
using the Flask library. Alignments are processed using a Python
backend, which then generates HTML, Cascading Style Sheets
(CSS) and J avaScript ﬁles that are displayed in the Web browser.
PyBamView takes advantage of BAM and fasta indexing to
avoid loading large ﬁles into memory. It uses the pysam and
pyfasta libraries for parsing BAM and fasta ﬁles, respectively.
Both libraries use efﬁcient index data structures, which allow
them to quickly fetch data from speciﬁc genomic regions of inter-
est. Read alignments are parsed from the CIGAR strings in the
BAM ﬁle and are displayed as simple HTML tables as Scalable
Vector Graphics (SVG) elements using Javascript. All CIGAR
options reported in the SAM speciﬁcation, including the padded
reference option, are supported (Supplementary Fig. S5).

5 CONCLUSION

As the use of NGS to analyze complex genomic events grows,
there is a critical need for accurate and easy-to-use visualization
tools. PyBamView provides a simple, yet powerful, interface for
alignment visualization that facilitates collaborative data
analysis.

ACKNOWLEDGEMENTS

The author would like to acknowledge members of the Erlich
lab, Alon Goren, and Roy Ronen for helpful feedback, and
Assaf Gordon for valuable programming guidance.

Funding: This work was supported by a National Defense
Science and Engineering Graduate Fellowship (32 CFR 168a).

Conﬂict of interest: none declared.

REFERENCES

Cong,L. et al. (2013) Multiplex genome engineering using CRISPR/Cas systems.
Science, 339, 819—823.

Edmonson,M.N. et al. (2011) Bambino: a variant detector and alignment viewer for
next-generation sequencing data in the SAM/BAM format. Bioinformatics, 27,
865—866.

Gordon,D. and Green,P. (2013) Consed: a graphical editor for next-generation
sequencing. Bioinformatics, 29, 2936—2937.

Gymrek,M. et al. (2012) lobSTR: a short tandem repeat proﬁler for personal
genomes. Genome Res., 22, 1154—1162.

 

3406

112 /310's113u1no [p.IOJXO'SOIlBIHJOJUIOIQ/ﬁdllq U101} pepBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

PyBam View

 

Highnam,G. et al. (2013) Accurate human microsatellite genotypes from high-
throughput resequencing data using informed error proﬁles. Nucleic Acids
Res., 41, 632.

Kent,W.J. et al. (2002) The human genome browser at UCSC. Genome Res, 12,
996—1006.

Li,H. et al. (2009) The sequence alignment/map format and SAMtools.
Bioinformatics, 25, 2078—2079.

Montgomery,S.B. et al. (2013) The origin, evolution, and functional impact of short
insertion-deletion variants identiﬁed in 179 human genomes. Genome Res., 23,
749—761.

Robinson,J.T. et al. (2011) Integrative genomics viewer. Nat. Biotechnol., 29, 24—26.

Ye,K. et al. (2009) Pindel: a pattern growth approach to detect break points of large
deletions and medium sized insertions from paired-end short reads.
Bioinformatics, 25, 2865—2871.

 

3407

112 /§JO'S{12umo [p.IOJXO'SOIlBIIlJOJUIOIQ/ﬁdllq 1110.1} pep1201umoq

9IOZ ‘09 lsnﬁnv uo ::

