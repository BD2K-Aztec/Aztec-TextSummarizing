ORIGINAL PAPER

Vol. 28 no. 1 2012, pages 76-83
doi: 1 0. 1 093/bioinformatics/btr620

 

Systems biology

Advance Access publication November 9, 2011

Decompositions of large-scale biological systems based on

dynamical properties

Nicola Soranzo‘, Fahimeh RamezaniZ, Giovanni lacono3 and Claudio Altafini3”k

1CRS4 Bioinformatica, Loc. Piscina Manna, 09010 Pula (CA), Italy, 2Max—PIanck—Institutf r Informatik,
Stuhlsatzenhausweg 85, 66123 Saarbr cken, Germany and 3SISSA, via Bonomea 265, 34136 Trieste, Italy

Associate Editor: Martin Bishop

 

ABSTRACT

Motivation: Given a large-scale biological network represented
as an influence graph, in this article we investigate possible
decompositions of the network aimed at highlighting specific
dynamical properties.

Results: The first decomposition we study consists in finding a
maximal directed acyclic subgraph of the network, which dynamically
corresponds to searching for a maximal open-loop subsystem of
the given system. Another dynamical property investigated is strong
monotonicity. We propose two methods to deal with this property,
both aimed at decomposing the system into strongly monotone
subsystems, but with different structural characteristics: one method
tends to produce a single large strongly monotone component,
while the other typically generates a set of smaller disjoint strongly
monotone subsystems.

Availability: Original heuristics for the methods investigated are
described in the article.

Contact: altafini@sissa.it

Received on September 5, 2011; revised on October 20, 2011;
accepted on November 5, 2011

1 INTRODUCTION

One of the outstanding challenges that Systems Biology is currently
facing is to provide the right tools for the investigation of the
dynamical behavior of the large—scale networks used to represent
complex biological systems, such as gene regulatory networks,
signaling pathways and chains of metabolic reactions. Even if
our knowledge of the interactions among the molecular species
involved in these systems is growing at a fast pace, the details
of the dynamics that they describe are seldom available and often
unlikely to be obtainable in a near future. What is often more
plausible to assume is that only an inﬂuence graph is available for
these networks (Fages and Soliman, 2008; Klamt et al., 2006). An
inﬂuence graph is a signed graph where an edge represents the action
of a variable on another variable, and the signs may have the meaning
of activatory/inhibitory action, or may simply represent the signature
of the J acobian linearization of a non—linear vector ﬁeld which is
unknown but sign constant over the entire state space (common
forms of the kinetics, such as mass action and Michaelis—Menten,
normally obey to this condition). In choosing this level of detail for
our networks, we are guided by an abundant literature, see e. g. Fages
and Soliman (2008); Huber et al. (2007); Klamt et al. (2006); Milo

 

*To whom correspondence should be addressed.

et al. (2002); Papin et al. (2005); Shen—Orr et al. (2002); Thieffry
(2007). Important dynamical problems that can be investigated on
an inﬂuence graph include:

(1) compute the equilibria of the system (Soule, 2003);

(2) investigate the stability properties of the dynamics (Deangelis
et al., 1986; Quirk and Ruppert, 1965);

(3) identify the largest open—loop subsystem of a given system
(Ispolatov and Maslov, 2008);

(4) study the monotonicity and strong monotonicity properties of
the dynamics (Sontag, 2007); and

(5) select a minimal intervention set for medical treatment (Klamt
et al., 2006).

In this article, we are interested in the problems (3) and (4) of the
list above.

In graph theoretical terms, ﬁnding the largest open—loop
subsystem corresponds to identifying a maximum—size directed
acyclic graph (DAG) within a network by dropping all feedback
loops. In the computer science literature, this is called the minimum
feedback arc set problem, and it is well known to be NP—hard (Karp,
1972). Although several heuristic methods are already available for it
(Festa et al., 1999; Ispolatov and Maslov, 2008), the novel algorithm
we propose in this article has the advantage that available a priori
knowledge on the open—loop part of the system can be easily taken
into account when computing a maximal DAG. We will show in
the large—scale examples of Section 6 that the performances of our
algorithm are comparable to those of the best heuristics.

In a series of papers by E. Sontag and colleagues (DasGupta
et al., 2007; Ma’ayan et al., 2008; Sontag, 2007), it was shown
that inﬂuence graphs can be used to study an important property
of dynamical systems, namely monotonicity (Kunze and Siegel,
1994, 1999; Smith, 1988, 1995; Sontag, 2007). Monotone systems
have nice properties of ‘order’ in their dynamical behavior. For
example, they neither admit stable periodic orbits nor chaotic
behavior. Moreover, for strongly monotone systems [i.e. monotone
systems whose graph is irreducible, see Smith (1995); Sontag
(2007)], Hirsch theorem states that almost all bounded solutions
converge to the set of equilibria (Hirsch, 1983). The concept
is particularly attracting for biological networks, because it is
well known that these systems, though complex, have indeed
outstanding stability properties, are largely devoid of spurious
sustained oscillations and are deﬁnitively not chaotic. Hence, the
paradigm of monotonicity has gained some momentum in recent
years and there is by now a consistent literature on using these

 

76 © The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com

112 /§.IO'SIBUJHOprOJXO'SOIlBIHJOJUIOICI/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

Strong monotonicity

 

properties to study biological networks (DasGupta et al., 2007;
Iacono and Altaﬁni, 2010; Iacono et al., 2010; Ma’ayan et al., 2008;
Sontag, 2007).

Both monotonicity and strong monotonicity admit a graphical
characterization: a system is monotone when all undirected cycles
of its inﬂuence graph have positive sign (i.e. have an even number of
negative edges); an irreducible system is strongly monotone when
the same property holds for directed cycles (Sontag, 2007). While
strong monotonicity implies monotonicity, the opposite implication
is usually not true. For the stricter notion of strong monotonicity,
the only study on large—scale biological networks we are aware of
is Aswani et al. (2009).

In this article we propose two different methods aimed at
extracting strongly monotone subsystems from large—scale inﬂuence
graphs. The ﬁrst method is based on the minimization of the total
number of negative signs on the edges by means of ‘switching
equivalences’ (Zaslavsky, 1982), i.e. changes in the direction of
some of the axes of IR” in order to align the system as much as
possible with the positive orthant of IR”. This idea was developed in
Iacono et al. (2010) for the monotonicity property and is extended
here to the strong monotonicity properties.

The second method to decompose a network into strongly
monotone subsystems relies instead on the notion of DAG
introduced above. When on an open—loop subsystem represented as a
DAG we start reinserting back the edges of the original network (i.e.
the feedback loops for the original system), then strongly connected
subgraphs begin to form. As long as all directed cycles of one
of the strongly connected subgraphs have positive sign, then the
corresponding subsystem will be strongly monotone.

In order to test the efﬁcacy of the proposed algorithms, a number
of large— scale biological networks are decomposed and their strongly
monotone subsystems are identiﬁed. On these examples, the two
methods we are proposing tend to highlight different features: a
single large strongly monotone subnetwork is obtained in one case,
and several medium— size strongly monotone subsystems in the other.
Depending on the context, each of these approaches may be of help
in better understanding the global structure of large systems and in
investigating more properly their dynamical properties.

The organization of this article is as follows: the necessary
background material is introduced in Section 2, and the construction
of a maximal DAG is discussed in Section 3. The two methods for
strong monotonicity decomposition are presented in Section 4. A
small example [a yeast cell—cycle model from Li et al. (2004)] is
studied in detail in Section 5 and ﬁnally, in Section 6, the algorithms
are applied to large—scale biological networks.

2 BACKGROUND MATERIAL

2.1 Signed graphs

A basic reference for this Section is Deo (1974). A signed directed
graph is an ordered pair G=(V,E) where V is a set of vertices
of cardinality n=|V|, and E is a set of signed edges EU- €{:l:1}
of cardinality m: |E|. A pair of edges EU- and EN- connecting the
same vertices but of opposite direction is called a digon. When
for all digons sign(£i,j)=sign(£j,i), then we say that G admits an
undirected graph (obtained by dropping all arrows in the edges).
The sign of a path/cycle of G is positive (respectively negative) if it
has an even (respectively odd) number of negative edges. We will

denote 73(1),) E V the set of vertices reachable from vi. An undirected
(respectively directed) graph G is connected (respectively strongly
connected) if any vertex is reachable from any vertex of G. In an
undirected (respectively directed) graph G, a connected component
(respectively strongly connected component, henceforth SCC) of G
is a maximal connected (respectively strongly connected) subgraph
of G. Given an undirected graph G: (V,E), a spanning forest
T=(V,ET) is a maximal acyclic subgraph of G. The number of
edges of every spanning forest of G is equal to |V| minus the number
of connected components of G.

DAGs: a DAG is a directed graph without any directed cycle. When
a DAG lacks also undirected cycles then it is called a polytree.
Polytrees are typically obtained by considering a spanning forest T
on the undirected graph of G and then restoring the original direction
of the edges of T (dropping one of the arrows of each digon). For
a directed graph G, a feedback are set is a subset of edges whose
removal from G leaves a DAG A feedback are set of G is minimal
if no proper subset of it is a feedback are set. A subgraph of G is a
maximal DAG of G if it is the complement to a minimal feedback
are set of G.

Irredacible adjacency matrices and SCCs: denote A the signed
adjacency matrix of a signed graph G. For simplicity of notation,
we shall indicate G(A) the graph obtained in correspondence of A,
while B gA will denote the adjacency matrix of the subgraph G(B)
of a graph G(A). An n X n matrix A is reducible if El a permutation

. A1 A2
matrix P s.t. PAP: 0 A3
said irreducible if it is not reducible. A is irreducible if and only if the
associated graph is strongly connected. For a non—strongly connected
graph, ﬁnding the irreducible diagonal blocks of the matrix is equal
to determining all the SCCs of the graph. Such operation can be
carried out efﬁciently by e.g. the Tarj an algorithm (Tarj an, 1972). A
directed graph G(B), B gA, is a DAG if and only if El a permutation
matrix P such that PBP is upper triangular, see Deo (1974), Theorem
9.16. In other words, the adjacency matrix of a DAG is completely
reducible.

, with A1, A3 square submatrices. A is

2.2 Monotone dynamical systems

Dynamical systems and their signed inﬂuence graphs: consider the
autonomous dynamical system

56 =f(x),

and its linearization around an equilibrium point x0, 2: Az, where

A: aﬂx)

8x
x0 (signed, i.e.0 whose components zi can assume both positive and
negative values). In the context of large—scale biological networks, it
is very difﬁcult to have a precise knowledge of the functional form of
the vector ﬁeld f (-) or even of the J acobian matrix A. It is often more
reasonable to assume that only the sign pattern is known of A, i.e.
A=sign(A) has non—zero entries of unit amplitude Ag G {:l:1,0}. A
is the signed adjacency matrix of the so—called inﬂuence graph G(A)
of the network (Fages and Soliman, 2008; Klamt et al., 2006), i.e. of
the directed graph representing the effect of the j —th variable on the
i—th variable, which can be activatory, Aij > 0, inhibitory, Alj < 0, or

non—existent, Ag 2 0. In general, in a system like (1), 81;?)

xeng”, feC1(X), (1)

 

, and z=x —x0 is the vector of perturbations around

 

 

X=X0 lj
can change of sign with the operating point x0, but we shall not

 

77

112 /§.IO'SIBUJHOprOJXO'SOIlBIHJOJUIOIQ/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

N.Soranzo et al.

 

consider this scenario here. In other words, we assume that the partial
3f(x)
W and

x=x0

derivatives are sign constants, i.e. the sign patterns of

81;?) are the same for all x0,x1 in X. Conventionally, the self
X X

 

edges of the inﬂuence graph G(A), i.e. the diagonal elements of A
are disregarded when looking at monotonicity properties (Sontag,
2007). We shall tacitly assume this henceforth. The system (1) is said
irreducible if A is irreducible. When G(A) is a DAG then the system
is completely reducible, i.e. A is triangular up to a permutation.

Monotonicity, strong monotonicity, and their graphical
characterization: for a thorough introduction to the theory
of monotone systems, the reader is referred to Kunze and Siegel
(1999); Smith (1988, 1995); Sontag (2007). In IR”, consider the cone
K representing one of its orthants: K: {x 6 IR” such that Dx 2 0}
where D is a diagonal matrix D=diag(o) of diagonal elements
O'=(O'1,...,O'n), o,- e {:l:1}, and denote by qbt(x1) the integral curve
of (1) at time t in correspondence of the initial condition x1. The
system (1) is said monotone with respect to the partial order a if
Vx1,x2 EX such that x2 —x1 6 K one has ¢t(x2) —q§t(x1) E K Vt 2 0.
Likewise, the system (1) is said strongly monotone with respect to
the partial order a if Vx1,x2 EX such that x2 —x1 GK, x2 #x1, one
has ¢t(x2) — ¢t(x1)€int(K) Vt > 0 (int(-) is the interior of the cone).
Monotonicity can be formulated in terms of the adjacency matrix
A by means of the so—called Kamke condition, which states that the
system (1) is monotone in X with respect to the orthant order a if
and only if

O'iO'jAljZO Vi,j=1,...,n S. t.  (2)

The starting point of our investigation is a graphical condition
for orthant monotonicity. Assume that G(A) admits an undirected
graph, i.e. that all edge pairs of the digons of G(A) have compatible
signs, Ai-Aji 2 0. Denote A U the adjacency matrix of the undirected
graph obtained from G(A). The following Lemma can be found in
e.g. Sontag (2007).

LEMMA 1. The system (1) is monotone in X with respect to some
orthant order a if and only if any of the following conditions holds:

(1) El 0 and a matrix D = diag(o) such that all oﬁdiagonal entries
of DAUD are non-negative;

(2) all cycles of G(AU) have positive sign.

The non—strict inequality in (2) implies that monotonicity is
concerned not only with ‘true’ directed cycles and their sign, but also
for example with ‘parallel’ directed paths starting and ending on the
same nodes (and forming cycles on the undirected graph G(AU)),
see Iacono et al. (2010); Sontag (2007). The restriction to directed
cycles is necessary when we are interested in strong monotonicity
properties. A sufﬁcient condition for strong monotonicity of a
monotone system is the irreducibility of the system. From Lemma 1,
we have the following graph—theoretical condition [see Smith (1995)
and Sontag (2007)].

LEMMA 2. Assume that the system (1) is irreducible in X. The system
(1) is strongly monotone with respect to some orthant order a if and
only if any of the following conditions holds:

(1) El 0 and a matrix D = diag(o) such that all oﬁdiagonal entries
of DAD are non-negative;

(2) all directed cycles of G(A) have positive sign.

3 CONSTRUCTION OF A MAXIMAL DAG

In systems—theoretical terminology, since DAGs lack directed
cycles, any dynamical system having a DAG as its inﬂuence graph
can be considered as an open—loop system: no state variable of
the system regulates in a feedback sense any other state. Various
types of heuristics have been proposed to approximate a maximum—
size DAG, see Festa et al. (1999) for a survey and IspolatoV and
MasloV (2008) for a recent application in the context of biological
networks. The aim of this Section is to propose a heuristic algorithm
for computing a maximal DAG in which any available a priori
information on the open—loop part can be easily taken into account.
Our approach starts by choosing a spanning forest for the undirected
graph, i.e. a polytree T for the directed graph G. The polytree is
then incremented by adding edges to it, as long as these edges are
guaranteed to preserve acyclicity. For this purpose, it is convenient
to use the notion of height of a vertex. One possible way to deﬁne
the height of a vertex is as the maximum length of any path from
any source vertex to v, call it hmax (v) (this is normally called
the depth in the graph—theoretical literature). Alternatively, one can
use hmin (v), deﬁned as the minimum length of any directed path
from any source vertex to v. Similarly, the height of a DAG G is
deﬁned, respectively, as hmax(G) = maxvevhmax (v) or as hmin(G) =
maxvevhmin(v). hmin corresponds to the maximum path length
needed to reach any variable from at least one source, while hmax
corresponds to the worst case path length from a source to all of its
reachable vertices.

PROPOSITION 1. Let G=(V,E) be a DAG. If an edge EW- such that
hmax (Vi) Ehmax (vj) is added to G, then the graph remains acyclic.
In particular, if hmax (v,) < hmax (vj) in G, then after adding the new
edge the hmax of all vertices does not change. If instead hmax (vi) =
hmax (vj) in G, then after adding the new edge hmax (vj) =hmax (vi) —l—
1, and hmax(vr)=hmax(vr)—l—1 for every vr €R(vj) such that El a
path from vi to vr of length hmax (vr) —hmax(vj).

PROOF. A new cycle is created by the addition of the edge EU-
to a DAG G only if there is a path in G from vi to vi, but in this
case hmax (vi) must be at least hmax(vj)—l— 1, which contradicts the
hypothesis that hmax (Vi) E hmax (vj). Moreover, after the addition of
the new edge, the hmax can change only for the nodes vr E R(vj),
and can only increase. This happens when a longer path from a
source to vr is created, passing through the new edge. This new
path has length hmax(vi)+1+k, where kZO is the length of the
longest path from vi to vr. Since there is already a path from vi to
vr, then the original height of vr should be at least hmax (vj) +k. So,
if hmax(vi)<hmax(vj) in G, then the original height is greater or
equal than the new path length hmax(vi)+1+k, therefore the height
of vr cannot increase. If instead hmax (vi) =hmax (vj) in G, when the
edge EU- is added to the DAG then hmax of vj becomes equal to
hmax (vi)—l— 1. Also for all vertices in R(vj), the hmaX can grow as a
consequence. D

Proposition 1 allows to increment a DAG while preserving
acyclicity. Iterating the argument to all edges in the complement
of the polytree, we have a heuristic procedure for the construction
of a maximal DAG

ALGORITHM 1. Construction of a maximal DAG

Input: polytree T gA
Output: maximal DAG B gA

 

78

112 /§.IO'SIBUJHOIPJOJXO'SOIlBIHJOJUIOIQ/ﬁdnq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

Strong monotonicity

 

Procedure: B = T, L =A \B
calculate hmax for the vertices of B
for each edge Eid- EL
° l.fhmaXO’i) E hmax(Vj) the" BZBUIEij}
° l.fhmax (Vi) = hmax (Vj) the"
0 hmax (Vj) = hmax (Vi ) ‘I‘ 1
onr E R(vj) ifEI a pathfrom vi to vr of
length hmax (vr) — hmax (vj) then
hmax (Vr) = hmax (Vr) ‘I‘ 1

The heuristic steps are the initial choice of the polytree T and
the order in which the edges are examined. In Algorithm 1, any
available a priori knowledge on the open—loop part of the system
can be included in the initial polytree T.

4 INVESTIGATING STRONG MONOTONICITY
4.1 Method 1: generation of a single large SCC

When a systems like (1) is not exactly monotone, measuring how
close it is to monotonicity is a computationally intense task. This
measure (hereafter 6) consists in identifying the smallest number
of edges whose sign switch (or removal) yields a graph with only
positive undirected cycles. This problem is studied in detail in
DasGupta et al. (2007); Huffner et al. (2009); Iacono et al. (2010).
The main idea behind the heuristics described in Iacono et al. (2010)
for the computation of 6 is to minimize the number of negative
entries of DAUD, where as before AU is the symmetrized version
of A and D=diag(o). In terms of the dynamical system (1), this
operation means reversing the partial order along certain axes of
R”, in order to ‘align’ the cone K with the positive orthant R1 as
much as possible. In Iacono et al. (2010), an empirical estimate for 6
is found using a heuristic which repeatedly seeks for a vertex having
more negative than positive incident edges and switches the sign to
all its incident edges (i.e. sets to —1 the corresponding entry in the
signature 0). The algorithms of Iacono et al. (2010) enabling the
computation of the ‘best’ D are applicable also to directed graphs
with only minor adjustments. The practical effect of a pre— and post—
multiplication by D=diag(o) is in fact to change sign to all rows
and columns of the adjacency matrix in correspondence of the —1
entries in o [with the observation that sign(o,-ojA,:]-) = sign(A,:]-) when
0, =oj =—1]. The minimization of the negative entries of A can
be carried out also if A is not symmetric. Let A.7 =DAD be the
corresponding adjacency matrix.

PROPOSITION 2. Considera signed directed graph G(Ag). Denote A?
and A; the two matrices containing, respectively, the positive and
negative entries of A0, A0 2A;r +A; . Assume A? is irreducible.
Then the subsystem of (1) having A: as its inﬂuence matrix is
strongly monotone.

PROOF. Since A5; has only non—negative entries, the
corresponding system is cooperative hence monotone. Furthermore,
since A5; is irreducible so is the corresponding system. But
a cooperative irreducible system is strongly monotone, see
Theorem 4.1.1 of Smith (1988). B

When Aj; is not irreducible, then its SCCs should be considered.
Needless to say, Proposition 2 is inefﬁcient unless the number of
negative entries of A is ﬁrst minimized, as explained above. The
approach is summarized in the following Algorithm.

ALGORITHM 2. Strong monotonicity I

Input: signed adjacency matrix A
Output: set of strongly monotone subgraphs of A
Procedure: ﬁnd orthant order a so that the number of +1
entries of A0 =DAD, D = diag(o), is
maximized
split A0 =Aj; +A;
return the SCCs of DAgrD.

Since the maximization of +1 entries of A7 is heuristic, the whole
procedure is heuristic. As we will see in Sections 5 and 6, the
peculiarity of the approach outlined in Algorithm 2 is that it often
leads to a decomposition in which a single large strongly monotone
subsystem is present.

4.2 Method 11: construction of multiple small SCCs

In this Subsection we propose a different approach to the problem
of decomposing a system into strongly monotone subsystems. This
approach is more prone to building small disconnected SCCs.
Starting with an acyclic subgraph B gA, at each step the subgraph is
incremented by an edge and split into SCCs. On each SCC, strong
monotonicity can be tested Via Lemma 2. The edge is retained only
if all SCCs are strongly monotone, then the procedure is iterated.

ALGORITHM 3. Strong monotonicity II

Input: signed DAG B gA
Output: set of strongly monotone subgraphs of A
Procedure: C =B; L =A \B

for each edge EW- EL

0 obtain the SCCs ofCU{£,-,j}

o if all SCCs are strongly monotone, then

0 C = C U {KM}
return the S CCs of C

Algorithm 3 is heuristic with respect to the choice of B and the
order of the edges in L. Its performances tend to improve if the DAG
we start with is maximal.

5 EXAMPLE: YEAST CELL CYCLE MODEL

The network shown in Figure 1a represents the inﬂuence graph of an
extremely simpliﬁed model of the yeast (Saccharomyces cerevisiae)
cell cycle, in response to an ‘external’ stimulation at the only source
node cellsize. It was developed and studied in a boolean setting
in Li et al. (2004). Its main characteristic is that it can reproduce
faithfully the various phases of the yeast cell cycle, and the proper
state transitions at the checkpoints between them. The inﬂuence
graph shown in Figure 1a [with respect to the network of Li et al.
(2004), we drop self—loops for convenience] is not a DAG and it is
not monotone. Examples of frustrated cycles are the digon CIb‘I ,2
<—> Cd020 or the cycles MBF —> C|b5,6 —> C|b1,2 —> MBF and
SBF —> C|n1,2 —> Sic‘l —> C|b1,2 —> SBF. The last two cycles
encode both the propagation of the replication order from the source
cellsize and the feedback reaction of the system which concludes
the S phase of the cycle, inactivating its transcription factors MBF
and SBF, and consequently initiating mitosis. When we apply the

 

79

112 /§.IO'SIBUJHOIPJOJXO'SOIlBIHJOJUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

N.Soranzo et al.

 

(b)

O cellsize

1

C1113 _
_

+

O O

FMB

m
03

 

 

 

Fig. 1. Yeast cell cycle inﬂuence graph (Li et al., 2004). (a) The original signed network is shown. Self—loops are disregarded. (b) a DAG (edges in black)
for the graph of (a). Using the height hmX to represent the graph, all edges of the DAG are ‘descending’. Applying Algorithm 3 means adding the two green
‘ascending’ edges. In this way, we obtain two small strongly monotone SCCs (green nodes). Any of the red ‘ascending’ edges is instead forming negative
directed cycles. (c) The graph of (a) is transformed by changing sign to all edges incident to the four nodes ﬁlled in blue. Dropping the ﬁve red edges the
whole subsystem is monotone. Six nodes (circled in green) form a strongly monotone SCC.

procedure of Algorithm 1, we obtain a minimal feedback are set
of seven edges, ﬁve of which are digons. One possibility for the
resulting DAG is shown in Figure 1b (DAG is in black), where the
height hmax of the network is used to render the layout of the graph.
For this DAG hmin (DAG)=2 and hmax(DAG)=6. Notice that the
DAG has two sources, and both are needed to reach the entire DAG
In particular, for this choice of DAG the second source is C|b1,2,
which is the master regulator of the entry and successive exit from
the M phase of the cycle. The DAG breaks any path from the source
cellsize to this critical vertex.

The adjacency matrix of the directed graph of Figure 1a has 14
negative edges out of a total of 30 (disregarding self—loops). When
minimizing the number of negative edges (i.e. when computing
A7 in Algorithm 2), the sign of all incident edges is changed
ﬁrst for the vertex C|b1,2 (8 negative edges out of 12), then for
C|b5,6 (5 negative edges out of 7, after the ﬁrst round of switches),
Mcm1/SFF (3 out of 5 after the second switches) and C|n1,2 (2
out of 3). After all these sign switches, we are left with the graph
G(Ag) of Figure lc in which there are only ﬁve negative edges
left. In this case ﬁve is exactly the distance to monotonicity, and
by dropping the ﬁve edges we are guaranteed that the subsystem
is monotone. This monotone subsystem is not strongly connected
and hence not strongly monotone. It has a SCC formed by the
following six nodes: CIb‘I ,2, Mcm1/SFF, CIb5,6, th‘l , SWi5 and
Sic‘l. The remaining six nodes instead form trivial (i.e. dimension
1) SCCs. Hence, although the complete network is a ‘prototype’
for negative feedback regulation, from Proposition 2, it hides in its
structure a remarkably large strongly monotone subsystem involving
half of the nodes of the network. In terms of the functioning of
the cell cycle, the strategy behind this decomposition is far from
obvious, except for the observation that the SCC is isolated from
the source vertex cellsize, and that the inﬂuence of this last vertex
is completely disconnected from the network by the cuts of the

edges MBF —> C|b5,6 and SBF —> C|n1,2. Notice ﬁnally that
deducing strong monotonicity of this SCC directly on the original
graph (without the sign changes performed in Fig. lc) is a non—trivial
task even for this small—scale example.

When applying Algorithm 3 to the maximal DAG of Figure 1b,
of the 7 edges dropped from the maximal DAG only two can be
inserted without inducing negative directed cycles, and they both
are in admissible digons (green edges in Fig. 1b). In this case, two
small strongly monotone SCCs are created, both of dimension two
(the two vertex pairs joined by digons) as opposed to the single SCC
of dimension 6 obtained with Algorithm 2. Notice that 4 of the 5
edges that destroy strong monotonicity point to CIb‘I ,2. As already
mentioned, in this model C|b1,2 is the regulator whose activation
and consecutive deactivation governs the entry and exit from the
M phase, phase which constitutes the regulatory part of the cycle in
response to the external stimulation, and allows the cycle to progress.
In the full model, C|b1,2 rises after the S phase, due to C|b5,6
and due to the double inhibitions C|n1,2 —> th1 —> C|b1,2 and
C|n1,2 —> Sic‘l —> C|b1,2. Hence, the three edges connecting
C|b5,6, th1 and SiC‘I to C|b1,2 must be cut in order to have
a strongly monotone subsystem.

6 LARGE-SCALE EXAMPLES

Only a limited number of large—scale biological networks are readily
available as signed graphs [see e. g. DasGupta et al. (2007); Iacono
and Altaﬁni (2010); Ma’ayan et al. (2008)]. Those considered in this
study are of two different types: three are transcriptional networks
in which a directed edge represents the action of a transcription
factor on one of its target genes, and the sign means activation (+) or
inhibition (—). No stoichiometry is available for these networks. The
other three networks instead represent signaling pathways. These are
obtained from stoichiometric reactions, taking the signature of the

 

80

112 /§.IO'SIBUJHOIPJOJXO'SOIlBIHJOJUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

Strong monotonicity

 

Table 1. Networks used in this study

 

 

 

Network n m 71,-”; trad ,0 8 (Smax
Escherichia coli 1475 3320 4; 5 1452 371 1581
Yeast 690 1082 1; 0 688 41 401
Bacillus subtilis 918 1324 2; 2 912 71 415
EGFR 330 852 4; 65 138 193 376
Toll-like 679 2204 1; 413 267 468 873
Macrophage 697 1582 1; 155 359 330 704

 

n and m are the number of nodes and edges of the directed graph; Jim and had the
inadmissible/admissible digons; ,o is the number of SCCs in the original graph, 6 the
distance to monotonicity and (Smax its theoretical upper bound.

J acobian matrix, as described in Section 2.2, see also DasGupta et al.
(2007); Kunze and Siegel (1999) for more details and a similar use.
The details of the six networks are as follows:

0 transcriptional networks

0 Escherichia coli: gene regulatory network of the
E.coli, downloaded from RegulonDB database
(http://regulondb.ccg.unam.mx), version 6.3.

0 Yeast: gene regulatory network of S. cerevisiae originally
developed in Milo et al. (2002).

o Bacillus subtilis: gene regulatory network for B.subtilis,
downloaded from http://dbtbs.hgc.jp/.

- signaling networks
0 EGFR: network for the epidermal growth factor receptor
pathway, created by Oda et al. (2005);
o Toll-like: signaling network for the Toll-like—receptor.
Assembled from Oda and Kitano (2006).
o Macrophage: molecular interaction map of a macrophage
obtained from Oda et al. (2004).

In the following, we shall simply refer to the networks as
‘transcriptional’ and ‘signaling’, but one should be aware that
‘transcriptional, at functional level’ and ‘signaling, at stoichiometric
level’ is probably a more proper connotation for them. In Table 1,
we report the data for the distance to monotonicity 6 obtained in
Iacono and Altaﬁni (2010). It can already be noticed that there is a
systematic difference between the two classes: the transcriptional
networks are closer to monotonicity [6/6m3x~10—20%, where
Smax is a theoretical upper bound on 6, see Iacono et al. (2010)
for details] than the signaling networks (S/Smax ~50%).

When we use Algorithm 1 to construct a maximal DAG then
another key topological difference between the two classes emerges,
namely that the transcriptional networks are essentially free from
directed cycles, while in the signaling networks the number of edges
that need to be dropped to get a DAG varies from ~11% to ~ 20%,
see Table 2. In Table 2, the performances of our Algorithm 1 are
compared with those of other heuristics. In particular we choose a
state—of—the—art local search method (GRASP: greedy randomized
adaptive search procedure) from Festa et al. (2001), and a simulated
annealing algorithm recently used in the context of biological
networks (Ispolatov and Maslov, 2008). It can be observed that
our heuristic and the algorithm of Festa et al. (2001) have similar
performances.

If the inﬂuence graph of a system is a DAG then the system may
not be strongly monotone or not even monotone. In fact, multiple

Table 2. Maximal DAG found for the six networks

 

 

 

Network )/ 0/; V”) E 0); wtot hmin; hmax
Escherichia coli 9 (9; 376) 371 51; 65 5; 8

Yeast 1 (1;77) 41 77; 87 4; 8
Bacillus subtilis 5 (5; 99) 71 663; 759 2; 7
EGFR 104 (94; 185) 169 38; 50 5; 37
Toll-like 452 (467; 665) 450 76; 85 8; 50
Macrophage 176 (175; 335) 316 100; 115 9; 48

 

The parameters shown are the size of the minimal feedback arc set (y), the distance to
monotonicity of the maximal DAG (e), the minimal/total number of sources needed to
cover the entire DAG (w/ wtot) and min/max height of a graph. For y our results are
compared with those of Festa et al. (2001) (y’) and Ispolatov and Maslov (2008) 0/”).

E.coli Yeast B.subtilis

 

1000 1000

count
N
O
O
0

count

count

500 500

 

 

 

 

 

 

 

G 0
0 50 100 0 100 0

50 100
Frequency (%) Frequency (%)

50
Frequency (%)

EGFR Toll—like Macrophage

 

count

 

 

 

 

 

0 50 1 00 0 50 1 00 V0 50 100
Frequency (%) Frequency (%) Frequency (%)

Fig. 2. Overlap between maximal DAGs in different runs of Algorithm 1.
For each network, the histogram shows the distribution of the frequency
of selection of an edge in a large number of nearly optimal trials. For the
three transcriptional networks, there exists basically only a way to attain the
maximal DAG. For the three signaling networks, instead, there is a degree of
ambiguity in determining the ‘open—loop’ part of the dynamics, with only a
fraction of the maximal DAG unanimously determined (from 1/3 for EGFR
and Toll—like, to 1/2 of Macrophage).

paths originating in a fan—out node and ending in a fan—in node may
have opposite signs, and hence carry opposite orders at the fan—in
(activatory on one channel, inhibitory on the other), a ‘frustration’
(i.e. a negative undirected cycle) which is a trademark for lack of
monotonicity. For all networks, the restriction to the maximal DAG
still contains a large fraction of the 6 ‘frustrated’ edges (see 6 in
Table 2), meaning that the systems have a complex and potentially
incoherent open—loop dynamics. A qualitative difference between
the two classes of networks can be observed looking at hmax on
the DAGs (Table 2): the maximum length of a chain of events
in the open—loop system is always much shorter in the transcriptional
networks than in the signaling networks. On the contrary, the chain
of events of minimum length required to reach every vertex (i.e.
hmin) is almost the same in both types of networks. Notice how
the complex regulatory structure for the signaling networks implies
that only a fraction of the maximal DAG is unanimously identiﬁed
as open—loop subsystem over repeated runs of Algorithm 1, see
Figure 2.

In Tables 3 and 4, we compare the two procedures for the
construction of strongly monotone SCCs. Obviously, the difference

 

81

112 /§.IO'SIBUJHOIPJOJXO'SOIlBIHJOJUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

N.Soranzo et al.

 

Table 3. Strongly monotone subsystems 1: single large SCC

 

 

 

Network .53 A X 10
Escherichia coli 10 1457 3 1
Yeast 3 688 3 1
Bacillus subtilis 7 914 3

EGFR 163 197 111 73
Toll-like 548 398 164 329
Macrophage 236 484 38 82

 

The following parameters are shown: the distance to strong monotonicity (g), the
number of strongly monotone subsystems (A), the size of the largest strongly monotone
subsystem (X) and the number of edges dropped that belong to a strongly monotone
SCC (1h).

Table 4. Strongly monotone subsystems II: multiple independent SCCs

 

 

 

Network .53 (5’) A X 10
Escherichia coli 7 1459 2 0
Yeast 1 (1) 690 1 0
Bacillus subtilis 2 914 3 0
EGFR 64 (45) 283 5 2
Toll-like 377 633 6 90
Macrophage 84 (75) 575 10 0

 

The same parameters of Table 3 are shown. For g also a comparison with the values
reported in Aswani et al. (2009) is shown (£4).

 

 

EGFR Toll—like Macrophage
5O
30
15 4o
25
E 10 E 20 E 30
8 S 8
o o 15 o 20
5 10
10
5
0 0 0
2 3 4 5 2 4 6 2 4 6 8 10
size of SCC size of SCC size of SCC

Fig. 3. Size of the non—trivial strongly monotone SCCs created by
Algorithm 3 for the three signaling networks.

can be appreciated only on the three signaling networks, which
have a sufﬁcient amount of feedback regulations. As anticipated,
the size of the largest strongly monotone SCC detected (i.e. x) is
consistently much higher for the method of Section 4.1 than for the
one of Section 4.2. Apart from the large SCC, Algorithm 2 returns
only trivial subsystems. For Algorithm 3, instead, the distribution of
size of the non—trivial strongly monotone SCCs is shown in Figure 3.
Notice that our numbers for this last case are still higher than those
reported in Aswani et al. (2009) (and shown in Table 4), meaning
that there is probably still room for improvement in our Algorithm 3.

7 CONCLUSION

The investigation of the dynamical properties of large—scale
biological networks poses a problem and a challenge for the ﬁeld
of Systems Biology because of its complexity and lack of suitable

methodology. By using simple tools from graph theory, we have
shown in this article that nearly—optimal solutions for a couple
of important dynamical problems, such as the identiﬁcation of a
minimum set of feedback loops whose removal leave the system
without regulation, and the decomposition of the network into
dynamically ‘simple’ subsystems, may be found with heuristics
which are computationally efﬁcient also for networks of the
several hundreds / few thousands of molecular species. While not
optimal and restricted to a speciﬁc class of network representations
(inﬂuence graphs), our approach is promising and the insight it
provides on the structure of the networks already signiﬁcant.

Funding: This research was sponsored by a PRIN grant from
MIUR, Italy.

Conﬂict of Interest: none declared.

REFERENCES

Aswani,A. et al. (2009) Graph-theoretic topological control of biological genetic
networks. In Proceedings of the American Control Conference . IEEE Press,
Piscataway, NJ, USA, pp. 1700—1705.

DasGupta,B. et al. (2007) Algorithmic and complexity results for decompositions of
biological networks into monotone subsystems. Biosystems, 90, 161—178.

Deangelis,D.L. et al. ( 1986) Positive Feedback in Natural Systems. Springer, New York,
NY, USA.

Deo,N. (1974) Graph Theory with Applications to Engineering and Computer Science.
Prentice-Hall, Englewood Cliffs, NJ, USA.

Fages,F. and Soliman,S. (2008) From reaction models to inﬂuence graphs and back: A
theorem. In Fisher,J. (ed.) Formal Methods in Systems Biology. vol. 5054 of Lecture
Notes in Computer Science, Springer GmbH, Heidelberg, DEU, pp. 90—102.

Festa,P. et al. (1999) Feedback set problems. In Du,D.-Z. and Pardalos,P.M. (eds)
Handbook of Combinatorial Optimization, Suppl. Vol. A, Kluwer Academic
Publishers, Dordrecht, NLD, pp. 209—25 8.

Festa,P. et al. (2001)A1g0rithm 815: FORTRAN subroutines for computing approximate
solutions of feedback set problems using GRASP. ACM Trans. Math. Softwr, 27,
456—464.

Hirsch,M.W. (1983) Differential equations and convergence almost everywhere in
strongly monotone semiﬂows. In Smoller,J. (ed.) Nonlinear Partial Diﬁerential
Equations (Durham, NH, I 982 ). American Mathematical Society, Providence, RI,
USA, pp. 267—285.

Huber,W. et al. (2007) Graphs in molecular biology. BMC Bioinformatics, 8, S8.

Hiiffner,F. et al. (2009) Separator-based data reduction for signed graph balancing.
J. Comb. Optim., 20, 335—360.

Iacono,G. and Altaﬁni,C. (2010) Monotonicity, frustration, and ordered response: an
analysis of the energy landscape of perturbed large-scale biological networks. BM C
Syst. Biol., 4, 83.

Iacono,G. et al. (2010) Determining the distance to monotonicity of a biological
network: a graph-theoretical approach. IET Syst. Biol, 4, 223—235.

Ispolatov,l. and Maslov,S. (2008) Detection of the dominant direction of information
ﬂow and feedback links in densely interconnected regulatory networks. BMC
Bioinformatics, 9, 424.

Karp,R.M. (1972) Reducibility among combinatorial problems. In Miller,R.E. and
Thatcher,J.W. (eds) Complexity of Computer Computations. Plenum Press,
New York, NY, USA, pp. 85—103.

K1amt,S. et al. (2006) A methodology for the structural and functional analysis of
signaling and regulatory networks. BMC Bioinformatics, 7, 56.

Kunze,H. and Siegel,D. (1994) A graph theoretical approach to monotonicity with
respect to initial conditions. In Liu,X. and Siegel,D. (eds) Comparison Methods
and Stability Theory. vol. 162 of Lecture notes in Pure and Applied Mathematics.
Marcel Dekker, New York, NY, USA, pp. 207—216.

Kunze,H. and Siegel,D. (1999) A graph theoretical approach to monotonicity with
respect to initial conditions 11. Nonlinear Anal., 35, 1—20.

Li,F. et al. (2004) The yeast cell-cycle network is robustly designed. Proc. Natl Acad.
Sci. USA, 101, 478141786.

Ma’ayan,A. et al. (2008) Proximity of intracellular regulatory networks to monotone
systems. IET Syst. Biol, 2, 103—112.

Milo,R. et al. (2002) Network motifs: simple building blocks of complex networks.
Science, 298, 824—827.

 

82

112 /ﬁio'smurnofpiojxo'sonemioquoIq/ﬁdnq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

Strong monotonicity

 

Oda,K. et al. (2004) Molecular interaction map of a macrophage. AfCS Res. Reports,
2, 14 DA.

Oda,K. et al. (2005) A comprehensive pathway map of epidermal growth factor receptor
signaling. Mol. Syst. Biol, 1, 2005.0010.

Oda,K. and Kitano,H. (2006) A comprehensive map of the toll-like receptor signaling
network. Mol. Syst. Biol, 2, 2006.0015.

Papin,J.A. et al. (2005) Reconstruction of cellular signalling networks and analysis of
their properties. Nat. Rev. Mol Cell Biol, 6, 99—111.

Quirk,J. and Ruppert,R. (1965) Qualitative economics and the stability of equilibrium.
Rev. Econ. Stud, 32, 311—326.

Shen-Orr,S.S. et al. (2002) Network motifs in the transcriptional regulation network of
Escherichia coli. Nat. Genet, 31, 64—68.

Smith,H.L. (1988) Systems of ordinary differential equations which generate an order
preserving ﬂow. A survey of results. SIAM Rev., 30, 87—113.

Smith,H.L. (1995) Monotone Dynamical Systems: An Introduction to the Theory
of Competitive and Cooperative Systems. vol. 41 of Mathematical Surveys and
Monographs. American Mathematical Society, Providence, RI, USA.

Sontag,E.D. (2007) Monotone and near-monotone biochemical networks. Syst. Synth.
Biol, 1, 59—87.

Soule’,C. (2003) Graphic requirements for multistationarity. ComPlexUs, 1,
123—133.

Tarjan,R.E. (1972) Depth-ﬁrst search and linear graph algorithms. SIAM J. Comput, 1,
146—160.

Thieffry,D. (2007) Dynamical roles of biological regulatory circuits. Brief. Bioinform.,
8, 220—225.

Zaslavsky,T. (1982) Signed graphs. Discrete Appl. Math, 4, 47—74.

 

83

112 /ﬁio'smurnofpiojxo'sonemioquoIq/ﬁdnq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

