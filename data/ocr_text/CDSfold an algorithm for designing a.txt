Bioinformatics, 32(6), 2016, 828—834

doi: 10.1093/bioinformatics/btv678

Advance Access Publication Date: 20 November 2015
Original Paper

 

Sequence analysis

CDSfold: an algorithm for designing a protein-
coding sequence with the most stable
secondary structure

Goro Terai1'2'* Satoshi Kamegai1'2 and Kiyoshi Asai1'3'*

1National Institute of Advanced Industrial Science and Technology (AIST), Koto-ku, Tokyo 135-0064, Japan, 2INTEC
Inc., Koto-ku, Tokyo 136-8637, Japan and 3Graduate School of Frontier Sciences, University of Tokyo, Kashiwa
277-8562, Japan

*To whom correspondence should be addressed
Associate Editor: lvo Hofacker

Received on April 23, 2015; revised on November 3, 2015; accepted on November 12, 2015

Abstract

Motivation: An important problem in synthetic biology is to design a nucleotide sequence of an
mRNA that confers a desirable expression level of a target protein. The secondary structure of pro-
tein-coding sequences (CD53) is one potential factor that could have both positive and negative ef-
fects on protein production. To elucidate the role of secondary structure in CD53, algorithms for
manipulating secondary structure should be developed.

Results: We developed an algorithm for designing a CDS with the most stable secondary structure
among all possible ones translated into the same protein, and implemented it as the program
CDSfold. The algorithm runs the Zuker algorithm under the constraint of a given amino acid se-
quence. The time and space complexity is 0(L3) and 0(L2), respectively, where L is the length of the
CDS to be designed. Although our algorithm is slower than the original Zuker algorithm, it could
design a relatively long (2.7-kb) CDS in approximately 1 h.

Availability and implementation: The CDSfold program is freely available for non-commercial
users as stand-alone and web-based software from http://cdsfold.trahed.jp/cdsfold/.

Contacts: terai-goro@aist.go.jp or asai@k.u-tokyo.ac.jp

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

 

Protein expression levels are reportedly affected by various types of
mRNA features, such as codon usage (Sharp and Li, 1987), rare
codon clusters (Kane, 1995), secondary structures in untranslated
regions (Mignone et al., 2002) and protein-coding sequences (CDSs;
see below), Kozak motif (Kozak, 1984) and Shine-Dalgarno se-
quence (Salis et al., 2009). Among them, secondary structure is diffi-
cult to handle because of the need to consider base pair interactions
between distant nucleotides and complex energy parameters as-
signed to each part of the secondary structure. This may be one of
the reasons that some recent methods for designing CDSs do not
consider secondary structural features (Chin et al., 2014; Chung and
Lee, 2012; Gaspar et al., 2012; Raab et al., 2010). The secondary

structure of CD55, however, can have substantial effects on protein
production as described below, although the mechanisms by which
secondary structure affects protein production are not understood
fully, especially in eukaryotes.

Previous studies have found that secondary structures near the
start codon tend to be unstable in both prokaryotes and eukaryotes
(Gu et al., 2010; Kertesz et al., 2010; Robbins-Pianka et al., 2010;
Wan et al., 2014), suggesting that secondary structures have nega-
tive effects on protein expression levels. Indeed, in prokaryotes, it
was shown that a stable secondary structure around the start codon
reduced protein expression levels, possibly by blocking the access of
the ribosome to the ribosome binding site (Kudla et al., 2009). Also,
in eukaryotes, a previous study demonstrated that the secondary

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 828

9mg ‘09 isnﬁnV uo seleﬁuV socl ‘erulomeg JO AirSJQAru [1 112 ﬂJO'sleumo[pJOJXO'sopeuuogurorq/ﬁdnq wort pepeolumoq

CDSfold

829

 

structure around the start codon strongly reduced protein expression
levels (Vega Laso et al., 1993). This was confirmed by a recent study
based on the large-scale measurements of protein abundance for
over 2000 sequence variants in yeast (Dvir et al., 2013). Therefore,
it may be possible to decrease protein expression levels by artificially
inserting a stable secondary structure near the start codon in both
prokaryotes and eukaryotes.

Secondary structures far downstream of the start codon may also
have effects on protein production. It is commonly believed that the
secondary structures in CD55 impede translation elongation, result-
ing in a reduction of protein production. It has, however, been
pointed out that slow elongation may not result in decreased protein
production as long as there is sufficient space between elongating
ribosomes (Plotkin and Kudla, 2011). Moreover, it has been sug-
gested that slow elongation can assist in proper co-translational pro-
tein folding (Kramer et al., 2009). Therefore, slow elongation does
not necessarily decrease protein expression levels. Moreover, it can-
not be ruled out that the secondary structures in CD55 have positive,
rather than negative, effects on protein production by protecting
mRNAs from various types of negative factors such as RNase diges-
tion, down-regulation by microRNAs, and unintended interactions
with other mRNA molecules. Interestingly, recent studies based on
genome-wide measurements of RNA secondary structure in yeast
(Kertesz et al., 2010), found a high correlation between secondary
structure and protein expression levels (Park et al., 2013; Zur and
Tuller, 2012); mRNAs of strongly expressed genes tend to form a
more stable secondary structure. Although still arguable, these stud-
ies suggest a causal relationship between protein expression levels
and the stability of the secondary structures of CD55. Therefore, it is
worth investigating whether (and to what degree) artificially stabi-
lized secondary structures in CD55 decrease or enhance protein ex-
pression levels.

To elucidate the effect of secondary structures in CD55 as well as
utilize the features of secondary structures to control protein expres-
sion levels, algorithms for handling the secondary structures of
CD55 should be developed. Currently, however, there are very few
tools for stabilizing the secondary structures of CD55. Gaspar et al.
recently developed the mRNA optimiser (Gaspar et al., 2013),
which is based on a simulated annealing algorithm. Although the
method was intended to remove secondary structures from CDSs, it
can also be used to stabilize the secondary structures. Here, we de-
veloped a different approach that was based on a dynamic program-
ming algorithm. It designs the CDS with the most stable secondary
structure among all possible ones translated into the same protein.
In our algorithm, the Zuker algorithm (Zuker and Stiegler, 1981) is
executed under the constraint of a given amino acid sequence.
Although our algorithm uses larger DP matrices than the original
Zuker algorithm, the fundamental procedure of both algorithms is
the same. Therefore, as with the Zuker algorithm, the time and
space complexity of our algorithm is O(L3) and 0(L2), respectively,
where L is the length of the CDS to be designed.

2 Methods

We start with a description of the simplified version of our algo-
rithm, which designs a CDS with the maximum number of base
pairs. The algorithm executes the Nussinov algorithm (Nussinov et
al., 1978) under the constraint of a given amino acid sequence. The
original Nussinov algorithm is as follows:

2.1 Nussinov algorithm

We are given a nucleotide sequence. Let L be the length of this se-
quence. Among the numerous secondary structures that can be
formed for the nucleotide sequence, the maximally base-paired
structure can be obtained by the following algorithm:

v(i+1,i)
v(i,i— 1)
v0+Lf—D+5@D
ﬁghﬂb+¢®+1ﬂl

Mi) = max

where y(i, j) is the maximum number of base pairs that can be formed
for a sub-sequence from position ito j, and 6(2', 7') takes 1 if the nucleo-
tides in positions 2' and i can form a base pair, or 0 otherwise.

The diagonal elements of the 32 matrix and their neighboring elem-
ents, y(i, i — 1), are initialized to be 0. Then, the Nussinov algorithm
recursively calculates y(i, 7') until y(1, L) is obtained. The value of y(1,
L) is the number of base pairs in the maximally base-paired structure.

The positions of the base-paired nucleotides in the maximally
base-paired secondary structure can be obtained by tracing back the
32 matrix, beginning from y(1, L) (see Durbin et al. (1998) for a con-
cise explanation).

2.2 Nussinov algorithm under amino acid constraints
We are given an amino acid sequence. Let L be the length of the CDS
to be designed. Let N,- be the set of possible nucleotides at the i th pos-
ition of the CDS. Let n,- be the realization of a nucleotide at position i.
The size of N,- varies from 1 to 4 depending on the amino acid residue
and its codon position. Specifically, 1 or 2 nucleotides are allowed in
the first and second codon positions of all amino acid residues, whereas
2 or 4 nucleotides are allowed in the third position in most cases.

For some amino acid residues, there is a ‘dependency’ in their
codons. For example, serine is coded for by 6 codons: AGU, AGC,
UCU, UCC, UCA and UCG. If the first codon position of serine is A,
then the second position must be G. To cope with such dependen-
cies, let Ni|n be the set of allowable nucleotides at position 2' after
nucleotide 11. Similarly, let N,- /\ n be the set of allowable nucleotides
at position 2' before nucleotide 11.

For leucine and arginine, there are nucleotide dependencies between
the first and third codon positions. As described later in this section, we
can convert the non-adjacent nucleotide dependencies in leucine and
arginine into adjacent ones. Here, we temporarily assume that there
are no such nucleotide dependencies in leucine and arginine.

The algorithm for designing a CDS with the maximum number
of base pairs is as follows:

Algorithm 1: the Nussinov algorithm under amino acid con-
straints, fill stage

 

W” (231') =

f  [Vni-Plani  + 

ni+1 GNi+1 lni

max yniW-l i,j — 1
n/_1EN,~_1/\n,~[ (  
max<
max "i+1’"i-1 i+ 1, '— 1 + 5' n-,n-
ni+1 GNi+1|ni,nj—1 ENj—1An/[V ( I ) < 1 I”
max "ﬁnk i,/z + "k+1’"i k+1,'

t i<k<ia’1lele:"}<+1ENk+1Inkb2 ( ) V ( 1)]

where yni’”i(i, j) retains the maximum number of base pairs among
the maximally base-paired secondary structures of the sub-sequences

9mg ‘09 isnﬁnV uo seleﬁuV socl ‘erulomeg JO AirSJQAru [1 112 ﬂJO'sleumo[pJOJXO'soueuuogurorq/ﬁdnq wort pepeolumoq

830

G. Terai et al.

 

in which the first and last nucleotide is 11,- and 11,-, respectively, and 6'
(11,-,11,-) takes 1 if 11,- and 11,- can form a base pair, or 0 otherwise.

Similar to the original Nussinov algorithm, the diagonal elem-
ents and their neighboring elements, 31’“ 1”“ (i, i — 1), are initialized to
be 0 for all allowable 11,- and 11,-_1. In addition, ynirni (i, 7') elements for
all unallowable 11,- and 11,- under amino acid constraints are initialized
and fixed to be -oo.

Then, Algorithm 1 recursively calculates y”i1”i(i, 7') until y”1’”L(1,
L) is obtained for all possible 111 and 11L. The maximum value of
31’“ “(1,L) over all possible 111 and 11L is the maximum number of
base pairs among the maximally base-paired secondary structures of
all possible CDSs translated into the given amino acid sequence.

Note that multiple )1 elements in each i, 7' position, which are
indexed by 11,- and 11,-, are not needed for the amino acid residues
other than serine, leucine and arginine. If a given amino acid se-
quence does not contain serine, leucine, or arginine (in other words,
all codon positions are independent), a single )1 element in each i, j is
sufficient to calculate the maximum number of base pairs over all
possible CDSs. The use of multiple )1 elements, however, is relevant
when we extend Algorithm 1 to energy minimization based on the
energy model obtained by the Turner group (Mathews et al., 1999),
in which various types of energetic contributions are determined ac-
cording to the adjacent nucleotides.

2.2.1 Obtaining the nucleotide sequence of a CDS by backtracking
In the original Nussinov algorithm, the maximally based-paired sec-
ondary structure can be obtained by tracing back the 31 matrix. In
the Nussinov algorithm under amino acid constraints, the nucleotide
sequence of a CDS with the maximum number of base pairs, as well
as its maximally based-paired secondary structure, can be obtained
by a similar backtracking algorithm. Let yﬂI’”L(1,L) be the max-
imum value of y”1’”L(1,L) for all possible 111 and 11L. The pseudo-
code of the backtracking algorithm is described as Algorithm 2.

 

Algorithm 2

 

Initialization:
Push(1, L, 111, 11L) onto stack.
cds(1) <— 111 [> Record 111 and 11Las the ﬁrst and
cds(L) <— 11L [> last nucleotide, respectively.

1

2

3

4

5: while stack is not empty do
6 P0131137} 111,111)

7

8

9

if i 2 i then
continue;

for all 11,-+1 E Ni+1|11i do
10: if y”“”i (i, j) = y”i+1’”i (i + 1,7') then
11: cds(i + 1) <— 11,-+1
12: push (i + 1,7', 11,-+1,11,-)
13: continue;
14: for all 11,-_1 E Ni_1 /\ 11,- do
15: if y”“”i(i,j) = ynirni-1(i,j — 1) then
16: cds(j — 1) <— 11,-_1
17: push (i,j — 1,11,-,11,-_1)
18: continue;
19: for all 11,-+1 E Ni+1|11,- and 11,-_1 E Ni_1 /\ 11,- do
20: if we (i, j) =
21: 71114111114 (i + 1,7' — 1) + 5'(11,-,11,-) then
22: cds(i + 1) <— 11,-+1
23: cds(j — 1) <— 11,-_1
24: if 5'(11,-,11,-) = 1 then

25: Record i, j as base-paired position

26: push (i+ 1,7' — 1,11,-+1,11,-_1)

27: continue;

28: for all k such that i< k <i do

29: for all 11k 6 Nk and 11k+1 E Nk+1|11k do
30: if y”i1”i(i,j) =

31: ynirnk (i, k) + y”k+1’”i(k + 1,7') then
32: cds(k) <— 11k

33: cd$(k + 1) <— 11k+1

34: push (i, k,11,-,11k)

35: push (k + 1,j,11k+1,11,-)

36: continue;

 

Starting from 31’3le (1,L) element, the algorithm finds 1 or 2
elements from which yﬁlr’iL (1, L) is derived. We use the word derived
when the equality in line 10, 15, 20, or 30 holds. For example, if the
equality in line 10 holds, ynirni (i, j) is derived from y”i+1’”i (i + 1, 7').
Then, the algorithm recursively finds 1 or 2 elements from which
each of the newly found elements is derived. As 2 elements at most
are derived in each recursion (see line 30), the stack data structure is
used to store them.

The nucleotide sequence of a CDS is obtained by recording 1 or
2 nucleotides in each recursion. For example, in line 10, if y”i1”i(i, j)
is derived from y”i+1’”i (i + 1,7'), the algorithm records 11,-+1 as the
i + 1th nucleotide in line 11. The position of a base pair in the max-
imally base-paired secondary structure is obtained by recording
base-paired positions in line 25 if 6'(11,-,11,~) = 1 and yniini (i, j) is
derived from y”i+1’”i-1 (i + 1, j — 1) in line 20.

2.2.2 Introducing extended nucleotides

For leucine and arginine, there are nucleotide dependencies between
the first and third codon positions. For example, leucine is coded for
by 6 codons: UUA, UUG, CUU, CUC, CUA and CUG. If the first
position is U, the third position is restricted to A or G. Algorithms 1
and 2 can cope with the dependency between adjacent nucleotides,
but cannot consider the dependencies between the first and third
positions. Fortunately, by introducing extended nucleotides, we can
convert the non-adjacent nucleotide dependencies in leucine and ar-
ginine into adjacent ones. For leucine, we classified the nucleotide U
in the second codon position into 2 different Us based on the nucleo-
tide in the third position (Fig. 1). The second position is denoted by
UAG and UCU if the third position is G or A and C or U, respectively.
If the first position is C, then the second position can be both UAG
and UCU. The extended nucleotides we used here and their depend-
encies are summarized in Figure 1.

2.3 Zuker algorithm under amino acid constraints

In the Zuker algorithm (Zuker and Stiegler, 1981), the most stable
secondary structure in terms of the Turner energy model can be cal-
culated for a given nucleotide sequence. Although the Zuker algo-
rithm is more complex than the Nussinov algorithm, the

Leucine Arginine
C C
CU c GCU
c U < U < U
A A
AG AG
U U <1 G A G < G

Fig. 1. Extended nucleotide representations for the second codon position of
leucine and arginine. Arrows indicate the dependencies of the adjacent nu-
cleotides. For example, UCU in leucine can be followed by C or U

9mg ‘09 isnﬁnV uo sejeﬁuV SO’I ‘erulomeg JO AirSJQAru [1 1e ﬁlO'Sjeumo[pJOJXO'soriemJOJurorq/ﬁdnq wort pepeolumoq

CDSfold

831

 

fundamental procedure of both algorithms is the same; namely, the
optimal secondary structure is obtained from that of shorter sub-se-
quences. We extended the Nussinov algorithm under amino acid
constraints so it can execute the Zuker algorithm under amino acid
constraints. It is the Zuker version of the algorithm that was imple-
mented in the CDSfold program.

Algorithm 3: the Zuker algorithm under amino acid constraints,

fill stage
Fni’niaai) 2
mm wmwa+rm
"1+1 ENi+1|ni
. PnhnH . ._ 1
.  0” )I <3)
mm
C”"’”"(i,i)

i<k<j,nkENI:1nr:+1ENk+1 (11,, [P 1, k0, k) + F k“, ’(k + 1’0]
where Fnirni (i, j) retains the smallest minimum free energy (MFE)
over a set of sub-sequences in which the first and last nucleotide is 11,-
and 11,-, respectively. The recursion equations of Algorithm 3 are al-
most the same as those of Algorithm 1; the only difference is that
the third equation is replaced by Cnirni (i, i), which retains the small-
est MFE provided that 11,- and 11,- form a base pair.

When calculating C”i1”i(i,j), we must consider the following 5
cases: nucleotides 11,- and 11,- form a base pair that

1 immediately follows another base pair,
2. encloses a hairpin loop,

3. encloses a bulge loop,

4 encloses internal loops,

5. encloses a multi-loop.

2.3.1 Case 1: Two consecutive base pairs
In the first case, C”“”i (i, j) is obtained by considering the energy of 2
consecutive base pairs; this energy is commonly called stacking e11-
ergy. For a particular base pair between 11,- and 11,-, we must consider
all possible base pairs between Ni+1 and N,_1. Therefore, the small-
est MFE when a base pair 11,- and 11,- immediately follows another
base pair is obtained as follows:
min [Cni+1,ni_1  +  _  + Estacking ("ii "I" ni+1 7 nj—1> ]
ni+1 E Ni+1|ni
11,_1 E N,-_1 /\ 11,-
(4)

where Esmck,ng is a function that calculates the stacking energy depending
on a base pair between 11,- and 11,- that immediately follows a base pair be-
tween 11,-+1 and 11,-_1. For example, a G:C base pair that follows C:G is
far more stable (—3.4 kcal/mol) than A:U following U:A (—0.9 kcal/
mol). The stacking energy is assumed to be +00 if a base pair cannot be
formed either between 11,- and 11,- or between 11,-+1 and 11,-_1.

2.3.2 Case 2: Hairpin loop

In the second case, nucleotides 11,- and 11,- enclose a hairpin loop. An
example of a hairpin loop is shown in Figure 2a. In the Turner en-
ergy model, the energy of a hairpin loop depends on the nucleotides
in the 4 positions indicated in Figure 2a. The smallest MFE when 11,-
and 11,- enclose a hairpin loop is as follows:

. 11
mln [Ehairpin ("1,nj,"i+1,nj—1,U )] (5)
"1+1 6 Ni+1|ni
11,-_1 E N,‘_1 /\ 11,-

where Ehairpin is a function that calculates the energy of a hairpin
loop depending on the 4 nucleotides and the length of the hairpin

   

Fig. 2. Nucleotides affecting the energy of 4 types of loop structures. (a)
Hairpin loop, (b) bulge loop, (0) internal loops and (d) multi-Ioop. A circle rep-
resents a nucleotide. A base pair is denoted by the 2 nucleotides connected
with a bold line. Filled circles are the nucleotides that affect the energy of the
loops. Letters associated with the circles indicate positions on a nucleotide
sequence

loop 12" (= j — i — 1). The energy of the hairpin loop is assumed to be
+00 if a base pair cannot be formed between 11,- and 11,-.

In the Turner energy model, there is a special table specifying the
energy parameters for small hairpin loops of sizes 5, 6 and 8-nt
(including a closing base-pair). For those hairpins, all nucleotides in
the hairpin loop influence the free energy. To take this into account,
we enumerate all possible 5, 6, 8-mers starting from each position of
a CDS before running the recursion, and check whether there can be
the special hairpin loops between position i and i when i — i + 1 = 5
,6 or 8.

2.3.3 Case 3: Bulge loop

In the third case, 11,- and 11,- enclose a bulge loop. Figure 2b is an ex-
ample of a bulge loop that is located between position i and p. The
smallest MFE when 11,- and 11,- enclose a bulge loop is:

min [Cnpmi—l  —  + Ebulge ("i7 "177 ni—l 7 "1" v1) ]
i+1<p<i—1
11,-_1 E N,"_1 /\ 11,-

(6)

where Ebnge is a function that calculates the energy of a bulge loop
depending on the 4 nucleotides indicated in Figure 2b and the length
of the bulge loop 121(2 p — i — 1). The energy of the bulge loop is
assumed to be +00 if a base pair cannot be formed either between 11,-
and 11,- or 11,, and 11,-_1.

The smallest MFE when a bulge loop is located on the right side
of the stem can be calculated similarly (see Supplementary
Methods).

2.3.4 Case 4: Internal loops

In the fourth case, 11,- and 11,- enclose internal loops (Fig. 2c). In the
Turner energy model, the energy of the internal loops depends on
the 8 positions indicated in Figure 2c. The smallest MFE when a
base pair formed by 11,- and 11,- encloses internal loops is as follows:

I min I [Cnp’nq (p1  + Eintloop<¢1 1’17 yr) 1 
1+ 1 < p < q </— 1

11,, E Np,nq E Nq

1P E \P("i1n171nq’ni)

where ‘I’(11,-,11,,,11q,11,-) is a set of possible nucleotides in the 8 pos-
itions, provided that 11,-, 11,-, 11,, and 11,, are given. Eindoop is a function
that calculates the energy of the internal loops depending on if, as
well as 12] and 12’, which are the length of the left and right side of the
internal loops, respectively. The energy of the internal loops is
assumed to be +00 if a base pair cannot be formed either between 11,-
and 11,- or 11,, and 11,,.

9mg ‘09 isnﬁnV uo sejeﬁuV SO’I ‘erulomeg JO AirSJQAru [1 1e ﬁlO'Sjeumo[pJOJXO'soriemJOJurorq/ﬁdnq wort pepeolumoq

832

G. Terai et al.

 

2.3.5 Case 5: Multi-loop

In the last case, 11,- and 11,- enclose a multi-loop. A multi-loop is a loop
structure enclosed by 3 or more base pairs. An example of a multi-
loop enclosed by 3 base pairs is shown in Figure 2d. The smallest
MFE when 11,- and 11,- enclose a multi-loop is as follows:

min [Mni+1’ni_1  +  —  + MLclosing ("i1  
"1+1 6 Ni+1lni
11,-_1 E N,‘_1 /\ 11,-

where M”i+1’”i-1 (i + 1,7' — 1) is the smallest MFE of sub-sequences
from 11,-+1 to 11,-_1 that are a part of a multi-loop. MLclosing is the en-
ergetic penalty imposed when a base pair between 11,- and 11,- encloses
a multi-loop. The calculation of M”"+1’”i-1 is slightly complicated and
involves yet another DP matrix (for details, see Supplementary
Methods).

Once all values in the DP matrices are calculated, a traceback al-
gorithm similar to Algorithm 2 can be used to obtain the nucleotide
sequence of a CDS with the most stable secondary structure. For
conciseness, the traceback algorithm and the complete details of
Algorithm 3 are described in the Supplementary Methods.

In Algorithm 3, the energy of dangling ends is not taken into
account, because considering it makes our algorithm much more
complicated and slower. Therefore, the current version of CDSfold
does not consider dangling energy. However, we show the algo-
rithm that can consider dangling energy in the Supplementary
Methods.

2.4 Comparison with simulated annealing

As a baseline method for comparison, we consider a more straight-
forward approach based on the simulated annealing algorithm. It it-
eratively optimizes the secondary structure of a CDS by successive
mutations under amino acid constraints. The procedure is as
follows:

1. An initial CDS is generated randomly that is used as a template.
In addition, the number of iterations, denoted by i, is set to 0.

2. The MFE of the template is calculated in kcal/mol (denoted by
e).

3. A single nucleotide in the template is randomly mutated under
the amino acid constraints. i is increased by 1.

4. The MFE of the mutated CDS is calculated in kcal/mol (denoted
by e’).

5. If eZe’, the template is updated to the mutated CDS and e is also
updated to e’. Otherwise, the template and e are updated with
the following probability:

 

e — eI
Pupdate = exp( CT, ) 

where T is a temperature parameter that takes 0 < T < 1. The Ti
value (T with exponent i) approaches 0 as the number of iterations i
increases, which means that Pupdate is also close to 0 as i increases.
Thus, the larger i becomes, the more unlikely the template is
updated. c is another parameter that is set to c = 1000 in this study
to make Pupdate close to 1 when i is small.

Processes 3—5 are repeated until a predefined criterion is satis-
fied. In this study, we terminated the algorithm if the MFE (e value)
is the same during 1000 successive iterations or the running time ex-
ceeds 100 h. For the calculation of MFE, we used the RNAfold pro-
gram in Vienna RNA Package version 2.1.1 (Lorenz et al., 2011).
We used RNAfold with the -d 0 option to use the ‘no-dangle model’.
The difference between our simulated annealing approach and

mRNA optimiser is an objective function to be optimized. The
mRNA optimiser uses a ‘pseudo-MFE’ as an objective function of
simulated annealing, which is proposed to have a good correlation
with the real MFE (Gaspar et al., 2013).

2.5 Computational environment

All computational experiments were performed on the Chimera
cluster system at AIST, which had 176 Intel Xeon E5550 CPUs
(2.53 GHz).

3 Results and discussion

3.1 Running time for real biological sequences

The running time of our algorithm is affected by the amino acid
composition of the input sequence, as well as the length of the CDS
to be designed. If an input sequence contains more residues coded
for by more codons, our algorithm spends more time assessing all
nucleotide combinations that affect the energy of the secondary
structure.

To estimate empirically the influence of different amino acid
compositions and evaluate the applicability of our method to real
biological data, we measured the running time of CDSfold using
proteins in the UniProt database (UniProt Consertium, 2015). We
obtained amino acid sequence segments of the same length from
the start codon of 100 randomly selected proteins. Here, we ob-
tained sequence segments with lengths of 100, 300, 500, 700, 900,
1100, 1300 and 1500 amino acids, separately. Figure 3 shows the
mean and standard deviation (SD) of the running time for each
length. On average, it takes less than 1 h to design a CDS of length
2.7 kbp. As more than 95% of the sequences in the UniProt data-
base are shorter than this length, our algorithm can design a CDS
within 1 h for the majority of proteins. The figure also shows the
SD of the running time is approximately 10—20% of the mean,
indicating that amino acid composition has a modest effect on run-
ning time.

 

Time (h)

T

I
:0):
O_Aégééﬁéﬁ

| | | |
1000 2000 3000 4000

Length of CD8 (bp)

 

 

 

Fig. 3. Running time of CDSfold. Circles represent mean running times.
Triangles represent mean running times when W: 500 bp. The error bars
represent standard deviation

9mg ‘09 isnﬁnV uo sejeﬁuV SO’I ‘erulomeg JO AirSJQAru [1 1e ﬁlO'Sjeumo[pJOJXO'soriemJOJurorq/ﬁdnq wort pepeolumoq

CDSfold

833

 

If an exceptionally long CDS must be designed, we can reduce
the running time by limiting the maximum distance between base-
paired nucleotides (denoted by W). If W is limited, time complexity
becomes O(W2L), indicating that the running time increases only
linearly on L. Figure 3 also shows the running time when
W: 500 bp.

3.2 Comparison with simulated annealing

As a baseline method for comparison, we developed a more straight-
forward approach based on simulated annealing (see Section 2). We
randomly selected 100 human proteins from the UniProt database
(UniProt Consertium, 2015) and stabilized the secondary structure
of their CD55 by both CDSfold and simulated annealing. The tem-
perature parameter T of simulated annealing was set to 0.99. The
MFE obtained by CDSfold was lower than that of simulated anneal-
ing, as expected (Fig. 4). The difference of the MFE becomes larger
as the length of the CDS becomes longer (note that long CDSs gener-
ally have lower MFEs, and see also Supplementary Figure 51 that
shows the MFE of even longer CDSs). It should also be noted that
the running time of CDSfold was much shorter than that of simu-
lated annealing; in most cases, CDSfold was 10—100 times faster
than simulated annealing. Table 51 shows a list of the 100 genes
examined and the running time for each gene.

The optimization result of simulated annealing may vary de-
pending on the temperature parameter T. However, when we used
different parameter values (T: 0.9 and 0.999), the same overall ten-
dency was observed, although a slightly improved MFE of short
CD55 was seen with T: 0.999 (Supplementary Fig. 52). Therefore,
using straightforward simulated annealing, it may be difficult to ob-
tain the optimum solution, especially for long CDSs.

3.3 Software

CDSfold is available as standalone software written in C++ as well
as a web-based application. As an example, we designed the CDS of
enhanced green fluorescent protein, EGFP (GenBank KM042177.1),
which is often used to evaluate protein expression levels. Figure 5
shows the result page when the maximum distance between base-

 

 

 

 

 

 

o _ II
a”
D 4ft"
8 — 43¢ -’
' it" 
LC? 0 
g 8 _ ﬁll,
a T of“ 
i  ””
.E Q Q') 1’
e 8 — o °
C ‘— w
c I
cu o a
E: o 0 0°
(U
a 8 - °
'U—J “I. 00 O
O
0
Lo _
“I‘
8 + 2000 bp or less
8 — o more than 2000 bp
' I I I I I I I
—3000 —2500 —2000 —1 500 —1 000 —500 0
CDSfold (kcal/mol)

Fig. 4. Comparison of the MFE of CDSs designed by CDSfold and a simulated
annealing algorithm

paired nucleotides W is limited to 50 bp. Under this limitation, the
designed CDS forms the most stable secondary structure among all
possible CDSs translated into the same EGFP. The MFE of the opti-
mized CDS sequence is lower (—363.7kcal/mol) than that of the ori-
ginal CDS obtained from GenBank (—238.90 kcal/mol).

3.4 Practical use of CDSfold

3.4.1 Avoidance of certain codons

In practical gene design, rare codons are often avoided because they
are suspected to reduce translation elongation. Our software can be
used to design an optimal CDS without rare codons. Users can indi-
cate a set of codons that should be avoided.

3.4.2 CDSfold sequence as a starting point for heuristic
optimizations

A CDS designed by CDSfold may be effectively used as a starting
point for heuristic optimizations. As an example, we designed a
CDS having high Codon Adaptation Index (CAI) (Sharp and Li,
1987) as well as stable secondary structure, using simulated anneal-
ing described in the Section 2. For this purpose, we defined a new
energy score in which both CAI and MFE are taken into account.

e = MFE * CAI’I (10)

where 2 is a weight parameter associated with CAI. The larger 2 is,
the greater the contribution of CAI is. Supplementary Figure S3
shows the optimization results of a CDS encoding EGFP. By using
various 2 values, we could obtain a set of CD55 having different CAI
and MFE. It is interesting that, when the CDSfold sequence was
used as a starting point, we could obtain better CDSs than when a
randomly generated CDS was used as a starting point. In this ex-
ample, CAI was calculated using top 1000 highly expressed genes in
S. cerevisiae (Holstege et al., 1998) as a reference gene set.

WWHWHUHHIWMWAWWW CHE

II.rrI...nInnn n
Itl"”IIII‘:'-’il-il
I ..'I'I.'iE.Iri""
1......I mum: II

1.11:“:

Secondary 

shuttlreihxt]  '
{EHEHH

Still-“d!!!
Erlrllttl l1
[IIIIHEI

 

Elﬂ PEI
:OJI'I:J:I1ﬂ.-llel'1ll'ik

I-IlnllnurI-I Ill-II
lﬂllll'l'

461.? HEaIrn‘IDI

Fig. 5. An example of the result page of our web-based application. The nu-
cleotide sequence of an optimized CDS, predicted secondary structure and
MFE are displayed

9mg ‘09 isnﬁnV uo S919311V SO’I ‘erulomeg JO AirSJQAru [1 1e ﬁlO'Sjeumo[pJOJXO'soriemJOJurorq/ﬁdnq wort pepeolumoq

834

G. Terai et al.

 

3.4.3 Design of (partially) unstable structure

To evaluate the effect of secondary structure, it is important to de-
sign unstable secondary structures as well as stable ones. In this
study, we developed a fast heuristic approach for designing a CDS
with unstable structure, based on a pseudo-MFE similar to the one
developed by Gaspar et al. (2012) (see Supplementary Methods).
The web-application has radio buttons for switching between energy
minimization by the dynamic programing and energy maximization
by the heuristic approach.

The effect of the secondary structure may vary depending on the
position on a CDS. Therefore, we developed a two-step procedure
for designing a CDS with partially unstable secondary structure and
implemented it in CDSfold. In the first step, energy minimization by
the dynamic programing is performed under the assumption that nu-
cleotides in a given interval do not form base-pairs. Specifically, we
set Cnirni (i, j) in Eq. 3 to be +00 when i and/or 7' is within the interval.
Note that a CDS designed under this assumption can have base-pairs
in the interval when this assumption is removed. Therefore, in the
second step, the heuristic pseudo-MFE maximization is performed
on the interval to remove secondary structure. Users can indicate an
interval where the secondary structure should be unstable.

4 Conclusion

We developed an algorithm for designing a CDS with the most sta-
ble secondary structure in terms of the Turner energy model. It was
shown that CDSfold can design CDSs of most genes within 1 h. It
was also shown that our algorithm can design CDSs with a more
stable secondary structure than the method based on simulated an-
nealing, especially when a CDS is long. The algorithm is useful for
investigating the effect of the secondary structure of a CDS as well
as utilizing features of the secondary structure to control protein ex-
pression levels. Note that, by changing the secondary structure of a
CDS, potential binding sites for other regulatory proteins or factors
might be also changed, which might be responsible for the change in
expression level. Therefore, the effect of the secondary structure
should be investigated using at least several different proteins.

Acknowledgements

We thank the members of the Computational Biology Research Center,
National Institute of Advanced Industrial Science and Technology for useful
discussions.

Funding

This work was supported by the commission for the Development of Artiﬁcial
Gene Synthesis Technology for Creating Innovative Biomaterial from the
Ministry of Economy, Trade and Industry, Japan.

Conﬂict of Interest: none declared.

References

Chin,].X. et al. (2014) Codon Optimization OnLine (COOL): a web-based
multi-objective optimization platform for synthetic gene design.
Bioinformatics, 30, 2210—2212.

Chung,B.K. and Lee,D.Y. (2012) Computational codon optimization of syn-
thetic gene for protein expression. BMC Syst. Biol., 6, 134.

Durbin,R. et al. (1998) Biological sequence analysis: Probabilistic models of
proteins and nucleic acids, chapter RNA structure analysis. Cambridge
University Press, Cambridge, UK, pp. 260—298.

Dvir,S. et al. (2013) Deciphering the rules by which 5 ’-UTR sequences affect
protein expression in yeast. Proc. Natl. Acad. Sci. U. S. A., 110, E2792—
2801.

Gaspar,P. et al. (2012) EuGene: maximizing synthetic gene design for heterol-
ogous expression. Bioinformatics, 28, 2683—2684.

Gaspar,P. et al. (2013) mRNA secondary structure optimization using a corre-
lated stem-loop prediction. Nucleic Acids Res., 41, e73.

Gu,W. et al. (2010) A universal trend of reduced mRNA stability near the
translation-initiation site in prokaryotes and eukaryotes. PLoS Comput.
Biol., 6, e1000664.

Holstege,F.C. et al. (1998) Dissecting the regulatory circuitry of a eukaryotic
genome. Cell, 95, 717—728.

Kane,].F. (1995) Effects of rare codon clusters on high-level expression of
heterologous proteins in Escherichia coli. Curr. Opin. Biotechnol., 6, 494—
500.

Kertesz,M. et al. (2010) Genome-wide measurement of RNA secondary struc-
ture in yeast. Nature, 467, 103—107.

Kozak,M. (1984) Point mutations close to the AUG initiator codon affect
the efﬁciency of translation of rat preproinsulin in vivo. Nature, 308,
241—246.

Kramer,G. et al. (2009) The ribosome as a platform for co-translational pro-
cessing, folding and targeting of newly synthesized proteins. Nat. Struct.
Mol. Biol., 16, 589—597.

Kudla,G. et al. (2009) Coding-sequence determinants of gene expression in
Escherichia coli. Science, 324, 25 5—258.

Lorenz,R. et al. (2011) ViennaRNA Package 2.0. Algorithms Mol. Biol., 6, 26.

Mathews,D.H. et al. (1999) Expanded sequence dependence of thermo-
dynamic parameters improves prediction of RNA secondary structure.
]. Mol. Biol., 288, 911—940.

Mignone,F. et al. (2002) Untranslated regions of mRNAs. Genome Biol., 3,
REVIEWSOOO4.

Nussinov,R. et al. (1978) Algorithms for loop matchings. SIAM ]. Appl.
Math., 36, 68—82.

Park,C. et al. (2013) Differential requirements for mRNA folding partially ex-
plain why highly expressed proteins evolve slowly. Proc. Natl. Acad. Sci. U.
S. A., 110, E678—E686.

Plotkin,].B. and Kudla,G. (2011) Synonymous but not the same: the causes
and consequences of codon bias. Nat. Rev. Genet., 12, 32—42.

Raab,D. et al. (2010) The GeneOptimizer Algorithm: using a sliding window
approach to cope with the vast sequence space in multiparameter DNA se-
quence optimization. Syst. Synth. Biol., 4, 2015—2025.

Robbins-Pianka,A. et al. (2010) The mRNA landscape at yeast translation ini-
tiation sites. Bioinformatics, 26, 265 1—265 5.

Salis,H.M. et al. (2009) Automated design of synthetic ribosome binding sites
to control protein expression. Nat. Biotechnol., 27, 946—950.

Sharp,P.M. and Li,W.H. (1987) The codon adaptation Index—a measure of
directional synonymous codon usage bias, and its potential applications.
Nucleic Acids Res., 15, 1281—1295.

UniProt Consertium (2015) UniProt: a hub for protein information. Nucleic
Acids Res., 42, D204—D12.

Vega Laso,M.R. et al. (1993) Inhibition of translational initiation in the
yeast Saccharomyces cerevisiae as a function of the stability and pos-
ition of hairpin structures in the mRNA leader. ]. Biol. Chem., 268,
6453—6462.

Wan,Y. et al. (2014) Landscape and variation of RNA secondary structure
across the human transcriptome. Nature, 505, 706—709.

Zuker,M. and Stiegler,P. (1981) Optimal computer folding of large RNA se-
quences using thermodynamics and auxiliary information. Nucleic Acids
Res., 9, 133—148.

Zur,H. and Tuller,T. (2012) Strong association between mRNA folding
strength and protein abundance in S. cerevisiae. EMBO Rep, 13, 272—277.

9mg ‘09 isnﬁnV uo sejeﬁuV SO’I ‘erulomeg JO AirSJQAru [1 1e ﬁlO'Sjeumo[pJOJXO'soriemJOJurorw/zdnq wort pepeolumoq

