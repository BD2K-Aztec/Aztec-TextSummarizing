Bioinformatics, 32(4), 2016, 563—570

doi: 10.1093/bioinformatics/btv484

Advance Access Publication Date: 21 October 2015
Original Paper

 

Systems biology

An algorithm to detect and communicate the
differences in computational models describing
biological systems

Martin Scharm1'*, Olaf Wolkenhauer1'2 and Dagmar Waltemath1

1Department of Systems Biology and Bioinformatics, University of Rostock, Rostock, Germany and 2Stellenbosch
Institute for Advanced Study, Wallenberg Research Centre at Stellenbosch University, Stellenbosch, South Africa

*To whom correspondence should be addressed.
Associate Editor: Jonathan Wren

Received on February 13, 2015; revised on August 10, 2015; accepted on August 10, 2015

Abstract

Motivation: Repositories support the reuse of models and ensure transparency about results in
publications linked to those models. With thousands of models available in repositories, such as
the BioModels database or the Physiome Model Repository, a framework to track the differences
between models and their versions is essential to compare and combine models. Difference detec—
tion not only allows users to study the history of models but also helps in the detection of errors
and inconsistencies. Existing repositories lack algorithms to track a model’s development over
time.

Results: Focusing on SBML and CellML, we present an algorithm to accurately detect and describe
differences between coexisting versions of a model with respect to (i) the models’ encoding, (ii) the
structure of biological networks and (iii) mathematical expressions. This algorithm is implemented
in a comprehensive and open source library called BiVeS. BiVeS helps to identify and characterize
changes in computational models and thereby contributes to the documentation of a model’s his—
tory. Our work facilitates the reuse and extension of existing models and supports collaborative
modelling. Finally, it contributes to better reproducibility of modelling results and to the challenge
of model provenance.

Availability and implementation: The workflow described in this article is implemented in BiVeS.
BiVeS is freely available as source code and binary from sems.uni—rostock.de. The web interface
BudHat demonstrates the capabilities of BiVeS at budhat.sems.uni—rostock.de.

Contact: martin.scharm@uni—rostock.de

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

 

Modelling and simulation is a standard approach to investigate com—
pleX biological processes. A steadily increasing number of computa—
tional models are available from open repositories such as the
BioModels database (Li et 61]., 2010) or the Physiome Model
Repository (PMR2; Yu et 61]., 2011). These repositories provide the
infrastructure necessary to maintain model code and associated
metadata. The distribution of models through these repositories
accelerates collaborative research and encourages model reuse.

©The Author 2015. Published by Oxford University Press.

The reusability of models improves the modelling workﬂow, by
reducing errors and saving time. Tracking the evolution of a model,
that is providing information about changes in the model and its
encoding, plays an important role in supporting the user (Waltemath
et 61]., 2013a). The need of model version control has been empha—
sized repeatedly on several occasions (Li et 61]., 2010; Miller et 61].,
2011; Saffrey and Orton, 2009; Waltemath et 61]., 2013a).

Figure 1 visualizes the evolution of a single model. In 1993,
Novak and Tyson published the first cell cycle model describing the

563

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits
unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /310'spaumo [p.IOJXO'SSUBUHOJUTOTQ/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

564

M. Scharm et al.

 

SBML code has changed No modifications

Cdc2 Cdc2
o—  --
l I ~\
,’ Cyclin \\ ‘ Cyclin .\
r \ a
I

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

I ‘Q’ V
<SBML> ' I
 -> June 2007 —> June 2013 Latest Version -->
</SBML> '
: f
i I
/
/
/
/
I
/
/
I /
u---» differences ’/
modifications /
inserts \ /
deletes 2“» Modification

Model was corrected

Fig. 1. Sketch of a model's temporal evolution. Changes in a single reaction
of Novak and Tyson’s model with ID BIOMD0000000107 in the BioModels
database. The differences between versions from June 2007 (release number
8), June 2013 (release number 25) and February 2015 (latest available ver-
sion) are shown. The branch represents a modification. The boxes visualize
the differences between related versions

M—phase control in Xenopus oocyte extracts and intact embryos
(Novak and Tyson, 1993). The model representing these findings
was first published in the BioModels database in 2007 (release
number 8) with the identifier BIOMD0000000107 (identifiers.0rg/
biomodels.db/BIOMD0000000107). Along with 20 official releases
of the database, the model has undergone numerous changes.
Figure 1 shows the differences in one of the model’s reactions,
namely the formation of Cdc2—cyclin dimers from Cyclin subunits
and free Cdc2 monomers (Step 3 Novak and Tyson, 1993, Fig. 1).

The relation between versions of a model from different releases
can be considered the history of the model’s encoding (Fig. 1). In the
simplest case, the history follows a single line along the time axis. In
practice, however, models are subject to modifications, including
corrections, extension and other refinements. After publication,
models may be combined into larger networks (e.g. Gennari et al.,
2008; Krause et al. 2010; Smallbone et al., 2010). Also during model
development, several alternatives are tested, leading to different
paths in the history of a model. These so—called branches complexify
the study of a model’s history, especially when branches with differ-
ent modifications shall be merged back into a single version of the
model at a later time. For this reason, difference detection plays a
key role in model version control. We refer to model provenance as
the field of research that investigates the nature of differences in
model versions, seeking answers to the seven W—questions: Who,
What, Where, Why, When, Which, With (How)? (Davidson and
Freire, 2008; Goble, 2002; Moreau et al., 2008; Ram and Liu,
2010).

In this article, we present a novel algorithm for difference detec—
tion in models of biological systems. Our algorithm pre—processes
the model documents, maps the hierarchical model structures and
post—processes the resulting mappings. The mapping can then be ex-
ported in both machine and human readable formats. The algorithm
is implemented in a software library called BiVeS. It can immedi—
ately be used with existing model repositories and model manage—
ment platforms. In addition, we showcase the capabilities of BiVeS
in our web—based tool BudHat for version control of models
encoded in the Systems Biology Markup Language (SBML, Hucka
et al., 2003) or in CellML (Cuellar et al., 2003). BiVeS and BudHat
demonstrate how our work contributes to successful provenance of
model—driven research in computational biology.

In the following sections, we will describe the algorithm (Section
2) in technical detail, present the results using a representative ex—
ample (Section 3) and discuss the outcome and the impact of our
work (Section 4).

2 Methods

Our algorithm for detection and communication of differences com—
pares two versions of an XML—encoded model. It distinguishes six
major steps: (Section 2.1) Pre—processing the XML documents,
(Section 2.2) Mapping the hierarchical structures and (Section 2.3)
Post—processing the resulting mapping. Based on the identified map—
ping, the algorithm computes a delta (Section 2.4). This delta can be
converted into both machine readable (2.5) and human readable
(2.6) formats. All steps are described in full technical detail in the
following sections. Sections 2.1, 2.2 and 2.4 follow the original
ideas of the XyDiff (leo.saclay.inria.fr/software/XyDiff/cdrom/
www/xydiff/index—eng.htm) algorithm, which was developed at
INRIA and focuses on efficiency in terms of speed and memory
(Cobena et al., 2002). The Section 3 and the Supplementary
Material provide illustrative examples.

2.1 Pre—processing the XML documents

First, two versions of an XML—encoded model are translated into an
internal tree structure. For every node n in the tree, a hash sum no
and a weight no, are calculated. With length denoting the length
of the text stored in n, the weight no, is determined as in the original
XyDiff algorithm:

1 —l— log(length(n)) if n is text node,

1 if n is leaf,

1 —I— 2 co, otherwise.

6 E children(n)

nu):

The weight of a node is thus always greater than the weight of its
children. As such, the weight represents the size of the corresponding
subtree. The hash sum of a node n represents the signature of the
subtree rooted at n. In the current version of our implementation,
we determine the hash no of a node n by the SHA—2 sum of the con—
catenation of the node’s tag name, its attributes and the hash sum of
all its children. While no unambiguously defines the subtree rooted
in n, no does not need to be unique among all nodes in the tree.
Thus, if no : mo then the subtrees in n and in are identically equal.
We explain in the following section how these signatures speed up
the mapping of two hierarchical structures.

2.2 Mapping the hierarchical structures

To compare two tree structures T1 and T2, we use XyDiff’s BULD
algorithm, in which matchings are propagated bottom—up and only
lazily down. It finds matchings between common large subtrees of
the two documents and propagates these matchings (Cobena et al.,
2002). We distinguish four phases of mapping.

2.2.1 Mapping by ID

First, nodes are being mapped with respect to their identifiers. As
suggested in the original algorithm, the id attributes in the XML
documents serve as identifiers. In addition, we also evaluate biolo—
gical identifiers, specifically links into bio—ontologies. In our current
implementation, we assign a higher priority to biological identifiers
than to id attributes. In this step, nodes in both documents which
share the same identifier are mapped onto each other. If many nodes

112 /310'spaumo [p.IOJXO'SSUBUHOJUTOTQ/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

Difference detection for computation models

565

 

are labelled with an id attribute, then a large number of mappings
are already computed at this stage. Consequently, the following
mapping procedure, which is computationally harder, typically
simplifies.

2.2.2 Bottom-up propagation

Second, the initial mapping is propagated upwards into the trees.
The connections of a node’s children are evaluated in a depth—first
traversal of T2. If a node n in T2 is connected to a node m in T1 then
a mapping of parent(n) to parent(m) is suggested. The confidence
equals no, and is therefore proportional to the size of n’s subtree. If,
in contrast, n is not connected, we examine the candidates that were
previously suggested by the connections of n’s children. Candidates
which have a different tag name than n and candidates which al—
ready have a connection are neglected. Among the remaining candi-
dates, the algorithm chooses the one that received the best
suggestions and connects it to n.

2.2.3 Top-down propagation

Third, the algorithm makes use of the initially computed signatures
and maps nodes of T2 on nodes of T1 which share the same hash
value. A priority queue Q5 is maintained to sort the nodes of T2
based on their weights. Initially, Q5 only consists of the root node of
T2. Unless Q5 is empty, the algorithm repeatedly removes node
n E Q5 C T2 with the biggest weight, which represents the biggest
subtree in the queue and collects a set of mapping candidates
M C T1 with Vm E M : mo : no. If M is empty, all children of n are
added to Q5 and the loop continues with the next biggest subtree.
Otherwise, the algorithm tries to find a node m E M for which there
already exists a mapping between ancestors(m) and ancestors(n). As
proposed by Cobena et al. (2002), the number of levels to chase the
ancestry of both nodes depends on the ratio of no, to root(T2)w.
Thus, for large subtrees, we are willing to climb many levels in the
tree to find a mapping of ancestors, but we might just examine first—
hand parents to map leaf nodes. If we are able to find such an
m E M, all nodes of the subtrees in m and n are mapped onto each
other, just as the ancestors up to the discovered mapping.

2.2.4 Optimization

Fourth, the algorithm improves the quality of the mapping by exam—
ining the network structure of T1 and T2 in a top—down approach.
For every mapping n E T2 on m E T1, it compares unmatched chil-
dren of n and m to find missed mappings. A distance matrix MM is
created with Mia,- being the ratio of the number of differing attributes
to the total number of attributes between the ith child of n and the
jth child of m or 0 if both nodes do not have any attributes. We as—
sign 00 to elements MM if the corresponding nodes already have a
mapping or if they do not share the same tag name. The algorithm
evaluates the matrix greedily and adds new mappings up to a max—
imum distance of 0.9. Thus, nodes which have nothing in common
will not be connected.

2.3 Post—processing the resulting mapping
Additional mapping rules capture the domain characteristics of the pro—
cessed data. Following the current specifications for SBML and
CellML, we prohibit certain changes in the hierarchical tree of docu—
ment nodes. Specifically, we treat parts of the model as atomic con—
structs for which we define restrictions on possible network operations.
In SBML models, e.g. listOf—nodes must not change their
parents. That means, if a listOfModifiers of T1 is mapped
onto a listOfModifiers of T2 but their parents are not linked,

then we drop this mapping. Similarly, nodes with tag names

speciesReference, trigger, eventAssignment,
modifierSpeciesReference, delay and priority are glued
to their respective parents. If the parents in the corresponding tree
are not connected, which means their networks in the XML docu—
ments differ, we remove the mapping from the set of operations. In
CellML models, nodes with tag names variable and reaction
are glued to their components.

Obviously, these rules expand the set of operations in the delta
later on, but we are willing to trade some minimality to increase the
significance of produced deltas. This step is a major reason why our

algorithm outperforms standard XML diff algorithms.

2.4 Computing the delta

A delta is a set of operations on entities (nodes or attributes, respect—
ively) necessary to transform one document into another. We distin—
guish the following four types of operations which apply on entities
of the corresponding XML tree:

insert if an entity is present in T2 but absent in T1

delete if an entity is present in T1 but absent in T2

move if a node is present in both documents, but either (i) the par—
ents in the corresponding trees are not connected or (ii) the parents
are connected, but the sequence of their siblings has changed

update if the value of an attribute, a text node’s content or the tag
name of a node was modiﬁed

While the set of move operations may only contain document
nodes, the set of updates in general only consists of operations on at—
tribute values. There is a single exception: the root nodes of both
documents are always mapped onto each other. Therefore, we must
include an operation which updates the tag name of nodes.
However, we only support this operation for root nodes. Thus, in—
ternal document nodes will never occur in the set of updates and we
will neglect this special case in the following.

After the mapping, we distinguish two types of nodes: mapped
nodes and unmapped nodes. Unmapped nodes n E T1 U T2 are
nodes for which the algorithm could not find a matching node in the
opposite tree. These nodes and their attributes correspond to either
inserts or deletes, depending on their origin (T2 or T1, respectively).
In contrast, mapped nodes are nodes for which the algorithm did
find a matching node in the opposite tree. If the parents of such a
mapping of n E T2 onto m E T1 are not connected, or if the se—
quence among their siblings has changed, then these nodes are
included in the set of moves. Moreover, for each attribute
a E attributes(n) U attributes(m):

° if a E attributes(m) then a is included into the set of deletes

° if a E attributes(n) then a is included into the set of inserts

° if value(m,a) 7E value(n, a) the attribute is included into the set
of updates

All other cases (nodes are mapped and occur at the same position
in both trees; attribute values of mapped nodes are equal) do not
call for an operation to transform T1 into T2 and are therefore not
included in the delta.

2.5 Translation into machine readable XML

The resulting delta is then encoded in an XML document consisting
of the four sections deletes, inserts, moves and updates. These sec—
tions contain three types of nodes:

° Nodes with a tag name node, describing operations on nodes

112 /310'spaumo [p.IOJXO'SSUBUHOJUTOTQ/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

566

M. Scharm et al.

 

° Nodes with a tag name attribute, describing operations on at—
tribute values

° Nodes with a tag name text, describing operations on text
nodes

All these nodes have to carry a unique id attribute and, if avail—
able, must contain identifiers oldPath and newPath to unambigu—
ously point to the corresponding nodes in T1 and T2, respectively.
These identifiers are XPath (www.w3.org/TIprath/) expressions, a
language defined by the World Wide Web Consortium (W3C), to
identify nodes in an XML document. In addition, node nodes may
also contain the attributes:

° oldParent and newParent (XPath expressions), identifying
the parents of the corresponding nodes

° oldChildNo and newChildNo (Integers), deﬁning the position
among their siblings, in order to encode moves

° oldTag and newTag (Strings), specifying the tag name of the
corresponding nodes

Furthermore, attribute nodes may have three additional
attributes:

° name, deﬁning the name of the corresponding attribute
° oldValue and newValue, specifying the value of that attribute
in T1 and T2, respectively

The generated delta is complete and, thus, it is invertible. That
means, it contains all information necessary to transform T1 into T2,
but it can also be used to obtain T1 given T2. Figure 3c shows an
example.

2.6 Translation into human readable formats

To support the readability, we currently export two different for-
mats: (i) A text—based report and (ii) a graphical representation. The
text—based report is a list of differences between the corresponding
files. It contains all modified entities relevant for the biological
model, such as parameters, species and reactions, and it contains the
specific changes. The report can be generated in HTML,
ReStructuredText or Markdown. Markdown and ReStructuredText
are easy—to—read plain—text markup languages, specifically designed
to ensure a straightforward conversion to other markup languages,
such as (X)HTML, doc(x), ODF or LATEX.

Moreover, standard formats usually allow for the inclusion of in-
formation about the reaction network encoded in the computational
model. If models contain such information, we extract the reaction
network of T1 and translate it into an internal graph representation.
We then obtain the reaction network of T2 and put it as an overlay
on top of the network of T1, using the previously computed map—
ping of entities in T1 and T2. Subsequently, the graph is evaluated:
We check whether nodes and edges originate from one or both docu—
ments and analyse what has changed in the corresponding tree
nodes. To export this graph, we developed translators that convert
the internal graph representation to exchangeable graph formats,
such as GraphML (graphml.graphdrawing.orgl) or Dot (graphviz.
org/content/dot—language). These graphs can then easily be used in
end—user applications.

3 Results

Models are continuously modified. Consequently, new versions of a
model are regularly being generated. We observe three major steps
in model development that result in new versions: during the design
phase of models; later on during curation and error correction and

with updates of the format specification. Here, we present an
algorithm to detect and communicate differences between these co—
existing versions of an SBML or CellML model. We implemented
this algorithm in a software library, BiVeS. Together, our work
helps to identify and characterize the changes and thereby contrib—
utes to the documentation of a model’s history.

BiVeS detects the differences between model versions. Figure 2
exemplifies the method, showing two versions of a minimalist
model, following the SBML structure. Here, the reaction C —I— D (1* E
(left) is updated to D—I—H 2E (right). First, the model files are
transformed into internal tree representations and prepared for the
subsequent mapping procedure (row one, pre-processing). The
weights to of nodes in the tree are computed according to the size of
the corresponding subtrees. For example, the subtree rooted in B is
larger than the subtree rooted in F and, thus, B’s weight is greater
than F’s (namely a) :4 and a) :2, respectively). The mapping pro—
cedure starts in row two of Figure 2 with a mapping by id. Since the
id attribute plays a key role and many elements do carry id attri—
butes, the algorithm typically finds a large number of mappings at
this early stage. In our example, only the identifiers of the G—nodes
are identical (id: ’ reactionl ’ ) and thus only a single connection
is found (for demonstration purposes, we assume that the D—nodes
do not carry id attributes). The mapping by id phase is followed by a
bottom-up propagation (row three), which makes use of the parent—
child relation of nodes in the trees: For nodes that are mapped al—
ready, there is a good chance that their parents also stem from each
other. In the example, the mapping of the G—nodes is propagated to—
wards the roots of the trees and the A—F—G—paths in both model ver—
sions are mapped. Afterwards, the algorithm tries to map subtrees
with an equal signature (row four, top-down propagation). The sig—
natures 0', which are computed in the pre-processing step, uniquely
identify the subtrees. Here, only the signatures of the D—nodes are
equal (a = x), which is why D is the only candidate for a mapping.
Since the D—nodes originate from each other, as well as the A—nodes
do, a mapping of the B—nodes is added. Following the propagation
phases, the algorithm tries to connect unmapped children of mapped
nodes (row five, optimization). In our example, only the B—nodes
have unmapped children: Nodes C and E in version 1 and nodes E
and H in version 2 do not yet have partners. To find a mapping of
these children, a 2 X 2 distance matrix is created. The elements in
this matrix represent differences between the attributes of the corres—
ponding nodes. The E—nodes only differ in the value of the concen—
tration attribute. Changing the value of one single attribute in a
species is a minor update and, thus, the nodes’ distance is very small.
In contrast, the nodes C, E and H do not have anything in common.
Consequently, the E—nodes will be mapped, while C and H remain
unmapped. Finally, the resulting mapping is analysed (row six,
evaluation). For example, the algorithm detects that C was deleted,
D was inserted and E was modified in version 2. The difference
graph, as obtained when interpreting the results of the evaluation
step, is shown on the bottom of Figure 2. Particular means of com-
municating the differences are described with Figure 3. The
Supplementary Material contains a more detailed, real—life showcase
for difference detection with BiVeS.

BiVeS communicates the differences. BiVeS exports the difference
graph in several output formats, including computer—digestible
XML code and a graphical representation.

One type of output are XML—encoded, machine readable deltas,
which describe the difference between two versions of a model

112 /310'spaumo [p.IOJXO'SSUBUHOJUTOTQ/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

Difference detection for computation models

567

 

pre—processing

 

<

mapping by id

X7

 

 

 

bottom—up propagation <

 

top—down propagation

C
.9
4.:
m
.E
E
'43
D.
O

 

evaluation

A
<
\l

@——>E

 

 

< communication

Fig. 2. Schematic of the mapping procedure. The procedure to communicate
the differences between two versions of a model (row one) to the user (row
seven) is shown. Nodes A—H represent single entities in the model docu-
ments. Dashed lines indicate mappings between the nodes. The values of 0'
and to represent signatures and weights of nodes. They are calculated during
pre-processing. The different colours of the nodes indicate modifications: up-
dates are yellow, inserts are green and deletes are red. In the evaluation step,
moves are blue

(see Section 2.4). A remarkable feature of these deltas is their com—
pleteness. They can be inverted and composed (Marian et al., 2001).
That means, given one model version and the delta, the opposite ver—
sion can be retrieved (Saffrey and Orton, 2009).

Another major feature is the translation of the delta into human
readable formats (refer to the communication step in Fig. 2). BiVeS,
for example, summarizes the model—related changes in a text—based
report. This type of output is ideally suited to be integrated in other
tools. Specifically, the report is encoded in MarkDown,
ReStructuredText or HTML. MarkDown and ReStructuredText are
themselves already easy to read and can be converted to common
markup languages. The report in HTML format is generated for
convenience, e.g. to instantly display the changes on a web page.
Figure 3b shows a sample report. Another notable feature is the
encoding of differences between two versions of a model in standard
graph representations enabling a subsequent visualization. While
BiVeS is itself not able to produce rendered graphical output, it
exports different graphical notations, including GraphML, Dot or
JSON (json.org). Armed with this, it is effortlessly possible to pro—
duce visualizations, as implemented in the demonstrator BudHat.

BudHat demonstrates the advantages of our algorithm. As a proof
of concept, we implemented a web—based interface BudHat (bud—
hat.sems.uni—rostock.de), which uses BiVeS to compare versions of a
computational model. BudHat contains a rudimentary user manage—
ment and stores models in a database back—end. It calls BiVeS for
the comparison and displays the obtained results in the web
browser. The different visualizations that are possible in BudHat are
shown in Figure 3. All figures show the difference between versions
2007-06-05 and 2013-11-03 of model BIOMD0000000107 in the
BioModels database.

More specifically, BudHat provides access to (i) the reaction net—
work highlighting the changes, as shown in Figure 3a; (ii) the
HTML report of the changes, as shown in Figure 3b and (iii) the
delta encoded in XML, as shown in Figure 3c. Delta and report are
directly passed to the web interface. But as stated above, BiVeS ex—
ports the graph representing the reaction network in an exchange-
able format (in this case it is GraphML or JSON). Therefore,
BudHat uses either CytoscapeWeb (Lopes et al., 2010) or
CytoscapeJS (cytoscape.github.io/cytoscape.js) to display the high-
lighted reaction network. From Figure 3a, it is easy to see that the
role of Cdc2 in reaction cyclin—cdc2 dimer formation has
changed. In the former version, Cdc2 modified this reaction, but
this modification was deleted (deletion is highlighted by the red
edge). Instead, in the updated version, Cdc2 is one of the reactants
for this reaction (insertion is indicated by the blue edge). Since this
modification changed the reaction, the node representing the reac—
tion is coloured in yellow. This approach makes it much easier to
understand the differences, compared to a pure textual diff. Already
for this small example, it would be much more effort to see and
understand what happened to a model from the sources or from the
1559 lines of output reported by Unix’ diff.

4 Discussion

Reproducibility of model—based scientific results has gained increas—
ing attention (Casadevall and Fang, 2010; Gentleman, 2005; Laine
et al., 2007; Mesirov, 2010; Peng, 2011; Sandve et al., 2013;
Waltemath et al., 2011, 2013b). Indeed, the ability to reproduce re—
sults is a basic requirement for the advance of science (King et al.,
2011). However, the reuse of models requires the accessibility and

1e /310'spaumo [p.IOJXO'SSUBUHOJUTOTQ/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

568 M. Scharm et al.

(a) Highlighted Fleaotion Network

wit-lotto wee I
got-:5 [jg—.3.- t-a-mn ' '-- Jamil-3n nee Latin-anon I  _ I I I'11I".II'I'I-':ﬂ:-a_l'-..-d':.'!'.'-rl'l'|r':
It ace eaLh-atItn
:-'i-:: 'I " a
'- I
F

 

 

 

,‘L 1 'I'IE'? I- ntermedlaw Z IfITI-I- d-Z—a-ftlh'ﬂ‘lI-ZII'I
‘ f .. -': a-:iI--a‘.lon

  

Intr:-'rr-':-:l|:ir',r n;
_. i

F
‘-
5

 

. I‘ t i g- I.
.'_-‘_'i'_III-I -t.-.-]|:|dat|'irt ‘ a I i. I. ..
I ' t g a: p .- "" UIJI :ioitl'i -:-:In_uoa|r_o -i'f'IE-_.-"‘.'|-1-
'«._ r i. J I! if _ .
' '  ' " .r [uh.Ist-II-J'ylaieJ.Ir11-:-‘E'-:-Jloly eon-tr“: \
' .2 «F '“IL'IIIEII'IIW'E '5)" l' I T *- ,_ A” Huron-gating ':'l'1_'-J-'I'I'|I: de-a Lll'nllllJ-"l

  

'h
'='-J' H'Iliﬂl'J’l uLinLII'lIn {cowgirl-g r-:,‘m—. our-ration

Lit-I JL-Illll' toiljugat no ':'“:‘:."|11':'

"hr '51 Tyl lf- pimp -.I"'|at-.--J IJIrrIeI
\ l
T~.-I H r. so r.r,-Ianon

T hr I F; '. ephosz nor-{anon

  

.‘yh‘llfl Ieol :I-Jatisn
IanF;' FINE-5m r'r-Ioraon
TI'I IEI drph-Jso -_'-r'-.a|at|or1 L
Tm IEI on ispnnylatwrn 
.ty'chr. deors Jotion . -
'drli :IIm-:r I, .4 1'3'

TI." 1? I'I‘I'JE i'l'i'lffMumi—mw
I I E . . _ "'15 IT-I'Ir'lﬂtlifif'l

 

 ..:..+ .'
I" 'r' 1 1'3" "” -."1-'IZ|||'I stoma-sis

 

 

 

 

{b} Report to) XML encoded delta

Reactions
R19 tweet deattivationl

 

 

. weeLp

. Modifiers: dimerjiunltnown}: {hiveﬁ type: I I I I}

{updatefa
<de1ete5
tchS p [1 1 1]
' ' ' * - {node id= ' DldChildND='
iii? icdt25 activation} I “Miners: dlmerjmnknmm: amps-Tent- . I _ I: I
oldPath- . . -
oIdTeg=' . .
RIB itdtZS deactivation] Ir tdt 254: —- ' (attribute id' I nmﬁ' '
oldPath= - : - 5 .- : -
oldValue- I triggeredEy- 'f}
d_ d. Cfdeletee
- * IIIw IIT'IE'LP -F IIT'IE'LFI q” 3.
R13 iTyriE- dephosphorylatlonl . Modiﬁem I  I _ 
{node id=' newﬂhildﬁo=
newParent= '-== - '- "
‘ dimer—p _. p_diMEr—D ﬂQHPﬂth- . . .
- Modiﬁers: - HQVTBE' E --- i ' = 1"}
{attribute id= I name:
newPath= '5- .~ I- :
newValue= ' triggeredﬂy=" I}
oattribute id- 2- name-
neuPath- ! . I i : : .
newValuet I .' LriggeredEyﬂ i I?
. - 4 uhE_star <finsert3
- Modiﬁers: 1EJJlunIinowni: [— . .1
{Ebiveea

' triggefedEy=' '3'}

R12 iTy'rIS phosphonnatlon:
iizo iuhiquitln conjugating enzyme deactivation) - uoE_star —-

R23 iuhiquitln conjugating enzyme activation:

 

 

 

R221intermedlaryenzyme deactivation] I ]E_p _. -

II ' —|IE_p

F121 (intermediary enzyme activation} Modiﬁers, dimer pmnknmm

RED tweet attivationi u wee1_p .-

- cyclin+ 4 dimer

R3 itytlin-cdcz dimerformation) . Mudiﬁﬂs, .rl nulmhﬁmn.

 

 

Fig. 3. Outputs as generated by BiVeS and available from BudHat. All three figures show the differences between versions June 2007 and November 2013 of
model BIOMD0000000107 (cf. Fig. 1). The reaction network (a) and the report (b) present the differences in a human readable format. The XML encoded delta (c)
allows for further processing by computers. The modifications described in Figure 1 are highlighted in orange. In the highlighted reaction network (a), deletes are
coloured in red, while inserts are blue and updates are yellow

112 /310'S[eu1no prOJXO'SOilBIIlJOJUTOTQ/ﬂdllq 11101; pepeoIUAAoq

9IOZ ‘OE isnﬁnv uo ::

Difference detection for computation models

569

 

comparability of models and their versions. Model provenance and
version control enable the widespread use and application of mod—
els, saving time and efforts during development. Model repositories
have been working towards this goal for the past decade and provide
access to computational models described in scientific publications.
Support for version control, however, is still limited. Existing imple-
mentations rely on standard version control systems and do not con—
sider the specific requirements of modelling in the domain of
computational biology (Waltemath et al., 2013a). Model reposito—
ries, specifically the BioModels database and the Physiome Model
Repository, could benefit from integrating BiVeS with their solu-
tions for version control. Such a combined system stores model ver—
sions and detects the differences between them. In addition, it offers
support for understanding these changes and filtering them accord—
ing to the users’ preferences, as discussed in the following.

BiVeS improves difference detection for your model versions.
Standard formats describing computational models in biology are
based on XML. Changes in versions of these models are typically
computed with Unix’ diff, which performs badly on XML docu—
ments because it uses a line—based algorithm (Myers, 1986). BiVeS,
on the other hand, is designed to respect the characteristics of XML
documents and to produce meaningful deltas. Its major advantages
over existing solutions for biological models are as follows: (i) it rec—
ognizes the models’ hierarchical structures; (ii) it ignores white
spaces, such as indentation, which generally do not affect the mod—
el’s behaviour and (iii) it ignores the specific order of attributes in an
entity. Additional post—processing rules capture the domain charac—
teristics of the processed data and increase the significance of pro—
duced deltas. Currently, these rules are static. However, we consider
introducing adjustable rules, which can be modified and extended.
In the Supplementary Material, we compare the BiVeS diff and
standard Unix’ diff. We also discuss the dependencies of modifica—
tions, explain the concepts of direct and implicated operations and
provide statistics about model changes in the BioModels database
and in the Physiome Model Repository (see Supplementary Figs A
and B in the Supplementary Material). From the data, we assume
that we can further improve the mapping by ID step, described in
Section 2.2. Currently, we just map entities having the same identi—
fiers. In future versions, we would like to also map entities based on
their ontological similarity.

BiVeS belps grasping the changes. Our algorithm filters the identi-
fied differences and drops all but biologically and mathematically
relevant modifications. We are currently working on refining these
filters using an ontology for differences. We envision that this ontol—
ogy, together with tools for semi—automatic annotation, will help re-
duce the number of displayed changes to the ones that are
meaningful or requested by the user (Waltemath et al., 2013a).
BiVeS produces reports and graphical representations of changes
using open formats such as GraphML, HTML or Markdown and
thereby helps to communicate the changes. For example, Figure 3a
shows that the graphical representation supports users in
exploring the changes affecting the biological network.
Additionally, a comprehensive list of changes is compiled into a
human readable report, as shown in Figure 3b. Reports are particu—
larly suitable for people interested in the details of mathematical
changes. BiVeS’ outputs can of course be used by other tools for fur—
ther processing of results. Current limitations with respect to output
formats are missing support for the SBGN format and suitable
graphical representations of models that do not specify a reaction
network.

You can easily integrate Bi VeS wit/9 your tools. BiVeS can be used in
three different ways: first, the BiVeS Java library provides a smart
API for comparison of model versions. The differences can then be
obtained in various formats, as described earlier. This API is, for in-
stance, used by our open source tool BudHat, providing plenty of
example code. Second, BiVeS is available as a web service to facili—
tate the integration with non—Java applications. The corresponding
package can be installed on Java—based web servers, such as Apache
Tomcat (tomcat.apache.org). The Functional Curation (chaste.
cs.ox.ac.uk/FunctionalCuration) project of Chaste (Cooper et al.,
2011), for example, uses the BiVeS web service to track the evolu—
tion of models uploaded to their system. Third, the library is shipped
with a main class and, therefore, it can be executed on a command
line. The data management platform SEEK (Wolstencroft et al.,
2015), for example, implemented support for model version control
calling BiVeS on a separate command line. The web site at sems.
uni—rostock.de/bives offers further information about the three im-
plementations, including examples, how—tos, the source code and
binaries of our tools. BiVeS currently supports SBML and CellML,
but it could also be extended towards other XML—based model
exchange formats such as NeuroML (Gleeson et al., 2010) or
PharmML (Swat et al., 2015). Moreover, BiVeS could improve ver—
sion control of simulation descriptions [e.g. differences between two
simulation setups encoded in the Simulation Experiment
Description Markup Language (SED—ML), Waltemath et al., 2011].

In summary, BiVeS improves the detection of differences be—
tween versions of models in SBML or CellML format. Returning to
the seven W—questions from the introduction, BiVeS contributes to
the What and How as defined in (Ram and Liu, 2010). The What
refers to content—related events, such as modifications of parameter
values in the model, and non—content—related events, such as the up—
grade to a new SBML version. In addition, BiVeS tells you How the
What has changed. There is scope for further extensions to provide
hypotheses for the Wby.

Funding

This work was supported by the German Federal Ministry of Education and
Research (BMBF) as part of the ezBio program SEMS, FKZ 031 6194.

Conﬂict of Interest: none declared.

References

Casadevall,A. and Fang,F.C. (2010) Reproducible science. Infect. Immun., 78,
4972—4975.

Cobena,G. et al. (2002) Detecting changes in xml documents. In: Agrawal, R.
et al. (eds), Proceedings 18th International Conference on Data Engineering,
IEEE , San Jose, CA, pp. 41—52.

Cooper,]. et al. (2011) High-throughput functional curation of cellular elec-
trophysiology models. Prog. Biopbys. Mol. Biol, 107, 11—20.

Cuellar,A.A. et al. (2003) An overview of CellML 1.1, a biological model de-
scription language. Simulation, 79, 740—747.

Davidson,S.B. and Freire,]. (2008) Provenance and scientiﬁc workﬂows: chal-
lenges and opportunities. In: Proceedings of the 2008 ACM SI GMOD
International Conference on Management of Data, SIGMOD ’08, ACM,
New York, pp. 1345—1350, http://doi.acm.org/10.1 145/1376616.1376772.

Gennari,].H. et al. (2008) Integration of multi-scale biosimulation models Via
light-weight semantics. Pac. Symp. Biocomput., 13, 414—425.

Gentleman,R. (2005) Reproducible research: a bioinformatics case study. Stat.
Appl. Genet. Mol. Biol, 4, Article 2.

Gleeson,P. et al. (2010) Neuroml: a language for describing data driven mod-
els of neurons and networks with a high degree of biological detail. PLOS
Comput. Biol, 6, e1000815.

1e /810'spaumo [p.IOJXO'SOilBIIHOJUTOTQ/ﬁdllq 11101; prBOIUAAOG

9IOZ ‘09 isnﬁnv uo ::

570

M. Scharm et al.

 

Goble,C. (2002) Position statement: musings on provenance, workﬂow and
(semantic web) annotations for bioinformatics. In: Workshop on Data
Derivation and Provenance, Chicago, IL.

Hucka,M. et al. (2003) The systems biology markup language (SBML): a me-
dium for representation and exchange of biochemical network models.
Bioinformatics, 19, 524—531.

King,R.D. et al. (2011) On the formalization and reuse of scientiﬁc research.
]. R. Soc. Interface, 8, 1440—1448.

Krause,F. et al. (2010) Annotation and merging of SBML models with
semanticSBML. B ioinformatics, 26, 421—422.

Laine,C. et al. (2007) Reproducible research: moving toward research the pub-
lic can really trust. Ann. Intern. Med., 146, 450—453.

Li,C. et al. (2010) Biomodels database: an enhanced, curated and annotated
resource for published quantitative kinetic models. BMC Syst. Biol, 4, 92.
Lopes,C.T. et al. (2010) Cytoscape web: an interactive web-based network

browser. Bioinformatics, 26, 2347—2348.

Marian,A. et al. (2001) Change-centric management of versions in an xml
warehouse. In: Apers,P.M.G. et al. (eds), Proceedings of the 27th
International Conference on Very Large Data Bases, VLDB ’01, September
1 1—14, 2001, Roma, Italy, Morgan Kaufmann Publishers Inc., pp. 5 81—590.

Mesirov,].P. (2010) Computer science. Accessible reproducible research.
Science, 327, 415—416.

Miller,A. et al. (2011) Revision history aware repositories of computational
models of biological systems. BMC Bioinformatics, 12, 22.

Moreau,L. et al. (2008) The provenance of electronic data. In: Communications of
the ACM - The psychology of security: why do good users make bad decisions?,
ACM, New York, NY, USA, vol. 51, pp. 52—58.

Myers,E.W. (1986) An o(nd) difference algorithm and its variations.
Algorithmica, 1, 251—266.

Novak,B. and Tyson,].]. (1993) Numerical analysis of a comprehensive model
of M-phase control in Xenopus oocyte extracts and intact embryos. ]. Cell.
Sci., 106, 1153—68.

Peng,R.D. (2011) Reproducible research in computational science. Science,
334, 1226—1227.

Ram,S. and Liu,]. (2010) Provenance management in biosciences. In:
Trujillo, J. et al (eds.) Advances in Conceptual Modeling Applications
and Challenges, volume 6413 of LNCS. Springer Berlin Heidelberg,
pp. 54—64.

Saffrey,P. and Orton,R. (2009) Version control of pathway models using
XML patches. BMC Syst. Biol, 3, 34.

Sandve,G.K. et al. (2013) Ten simple rules for reproducible computational re-
search. PLoS Comp. Biol, 9, e1003285.

Smallbone,K. et al. (2010) Towards a genome-scale kinetic model of cellular
metabolism. BMC Syst. Biol, 4, 6.

Swat,M. et al. (2015) Pharmacometrics markup language (pharmml): opening
new perspectives for model exchange in drug development. CPT
Pharmacometrics Syst. Pharmacol, 4, 316—319.

Waltemath,D. et al. (2011) Reproducible computational biology experiments
with SED-ML—the simulation experiment description markup language.
BMC Syst. Biol, 5, 198.

Waltemath,D. et al. (2013a) Improving the reuse of computational models
through version control. Bioinformatics, 29, 742—748.

Waltemath,D. et al. (2013b) Reproducibility of model-based results in systems
biology. In: Prokop,A. and Csuks,B. (eds.), Systems Biology. Springer, The
Netherlands, pp. 301—320.

Wolstencroft,K. et al. (2015) SEEK: a systems biology data and model man-
agement platform. BMC Syst. Biol, 9, 33.

Yu,T. et al. (2011) The physiome model repository 2. Bioinformatics, 27,
743—744.

112 /810'spaumo [p.IOJXO'SOilBIIHOJUTOTQ/ﬁdllq 11101; prBOIUAAOG

9IOZ ‘09 isnﬁnv uo ::

