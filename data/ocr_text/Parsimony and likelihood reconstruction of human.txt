Vol. 26 E003 2010, pages i446—i452
doi: 10. 1093/bioinformatics/btq368

 

Parsimony and likelihood reconstruction of human segmental

duplications

Crystal L. Kahn1’*, Borislav H. Hristov1 and Benjamin J. Raphaell’z’f
1Department of Computer Science and 2Center for Computational Molecular Biology, Brown University, Providence,

RI, 02912, USA

 

ABSTRACT

Motivation: Segmental duplications >1 kb in length with 290%
sequence identity between copies comprise nearly 5% of the
human genome. They are frequently found in large, contiguous
regions known as duplication blocks that can contain mosaic
patterns of thousands of segmental duplications. Reconstructing
the evolutionary history of these complex genomic regions is a
non-trivial, but important task.

Results: We introduce parsimony and likelihood techniques to
analyze the evolutionary relationships between duplication blocks.
Both techniques rely on a generic model of duplication in which long,
contiguous substrings are copied and reinserted over large physical
distances, allowing for a duplication block to be constructed by
aggregating substrings of other blocks. For the likelihood method,
we give an efficient dynamic programming algorithm to compute
the weighted ensemble of all duplication scenarios that account for
the construction of a duplication block. Using this ensemble, we
derive the probabilities of various duplication scenarios. We formalize
the task of reconstructing the evolutionary history of segmental
duplications as an optimization problem on the space of directed
acyclic graphs. We use a simulated annealing heuristic to solve the
problem for a set of segmental duplications in the human genome in
both parsimony and likelihood settings.

Availability: Supplementary information is available at
http://www.cs.brown.edu/people/braphael/supplementsl.

Contact: clkahn@cs.brown.edu; braphael@cs.brown.edu.

1 INTRODUCTION

A striking feature of mammalian genomes is the prevalence of seg-
mental duplications or low-copy repeats. Approximately 5% of the
human genome consists of segmental duplications >1 kb in length
with 290% sequence identity between copies (Bailey and Eichler,
2006). Segmental duplications account for a signiﬁcant fraction of
the differences between humans and other primate genomes, and
are enriched for genes that are differentially expressed between the
species (Blekhman et al., 2009).

Segmental duplications remain an extreme challenge for evo-
lutionary reconstruction, as they are the ‘most structurally
complex and dynamic regions of the human genome’ (Alkan
et al., 2009). Human segmental duplications are frequently found
within complicated mosaics of duplicated fragments (Bailey and
Eichler, 2006). Jiang et al. (2007) produced a comprehensive
annotation of this mosaic organization; they derived an ‘alphabet’
of approximately 11000 duplicated segments, or duplicons, and
delimited 437 duplication blocks or ‘strings’ of at least 10 (and

 

*To whom correspondence should be addressed.

typically dozens) different duplicons found contiguously on a
chromosome. However, the relationships between these annotated
duplication blocks are complex and straightforward analysis does
not immediately reveal the evolutionary relationships between
blocks.

Numerous authors have considered the problem of analyzing
relationships between genome sequences that contain duplicated
segments. This work falls into roughly two categories. The ﬁrst focus
is the problem of computing genome rearrangement distances, like
reversal distance, in the presence of duplicated genes or synteny
blocks (El-Mabrouk, 2002; Marron et al., 2004; Sankoff, 1999, for
example). However, such rearrangement distances do not model the
creation of new duplicates and thus are not well-suited to describe
the evolutionary history of segmental duplications in the genome.
The second focus is to analyze regions with duplications under
‘local’ operations like tandem duplications (Chaudhuri et al., 2006;
Lajoie et al., 2007, for example). While tandem duplication is
undoubtedly important in the generation of duplication blocks, there
is strong evidence that an important characteristic of the history of
segmental duplications is the frequent duplication and transposition
of long segments over large physical distances; as many as 50—60%
of segmental duplications were transposed interchromosomally
(Bailey and Eichler, 2006). Several general models of rearrangement
that allowed for both local operations and duplication—transposition—
like operations between different strings were studied by Ergun et al.
(2003), but the generality of those models meant that the distances
were NP-hard to compute and only approximation algorithms were
given.

Here, we present a novel formulation of the problem of computing
an evolutionary history for a set of segmental duplications that
are organized in duplication blocks. We represent evolutionary
relationships between a set of duplication blocks as a directed acyclic
graph (DAG), and we formalize the evolutionary reconstruction
problem as an optimization over the space of DAGs.

We present two different methods for scoring a DAG: one
based on parsimony and one based on likelihood. The parsimony
score for a DAG is a straightforward extension of ‘duplication
distance’, a measure introduced by some of us (Kahn and Raphael,
2008, 2009) that describes the most parsimonious sequence of
duplicate operations needed to construct a given target string. The
likelihood score for a DAG is the product of the likelihood scores
for each of the duplication blocks, where a duplication block’s
likelihood is derived by computing the weighted ensemble of all
possible duplication scenarios that could have generated it. We
describe how to compute the partition function of the ensemble
efﬁciently using a dynamic program that generalizes the duplication
distance (i.e. parsimony score) recurrence. Deriving a probabilistic
model from a dynamic program this way is analogous to the

 

© The Author(s) 2010. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/
by-nc/2.5), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.

112 [3.10'811211an[p.IOJXO'SODBIIIJOJIIlOlCI/[I(11111 IIIOJJ popcolumoq

9IOZ ‘ISlsnﬁnV uo ::

Reconstruction of segmental duplications

 

approach of McCaskill (1990) who applied dynamic programming
to RNA folding to compute the partition function of all secondary
structures and to assign probabilities to certain substructures.

Finally, we solve these evolutionary reconstruction problems on
the set of duplication blocks identiﬁed by Jiang et al. (2007) using
a local search technique based on simulated annealing. We compare
these reconstructions to the analysis of Jiang et al. (2007). Our
evolutionary reconstruction recapitulates some of the properties
of earlier analysis but also reveals additional and more subtle
relationships between segmental duplications.

2 METHODS

Here, we present two methods for determining the optimality of an
evolutionary relationship between a pair of duplication blocks—one based on
a parsimony criterion and one based on a likelihood criterion. In Sections 2.1
and 2.2, we describe the parsimony-based model of segmental duplication
that is based on duplication distance, introduced in Kahn and Raphael
(2008, 2009). Next, we present a novel probabilistic model of segmental
duplication that we use to compute the likelihood score for an evolutionary
relationship between a pair of duplication blocks.

2.1 A model of segmental duplication

As noted above, an important characteristic of segmental duplications that
distinguishes them from other types of repeats is that they are frequently
transposed across large genomic distances from their respective ancestral
loci. In Kahn and Raphael (2008, 2009), we modeled the process in which a
duplication block, a composite of many duplicons, is built by copying strings
of duplicons from other duplication blocks. In particular, we deﬁne the basic
‘copy—paste’ operation as follows.

DEFINITION 2.1. A duplicate operation, 6MP (X), copies a substring X” of a
source string X and pastes it into a target string at position p.‘ Speciﬁcally,
z'fX=x1...xm and Z=zl . . .zn, then Z083,t,p(X) =zl ...zp_1xs . . .xtzp . . .zn.

DEFINITION 2.2. The duplication distance,2 d(X, Y), from a source string X
to a target string Y is the minimum number of duplicate operations needed
to construct Y by copying and pasting substrings of X into an initially empty
target string.

A subsequence is distinguished from a substring because the characters
of a subsequence need not be contiguous. Given a string X, a subsequence
S of X can be expressed as an increasing list of indices of X. For example,
for X = abcdefg, the subsequence S = (1, 3,5) is the string ace.

DEFINITION 2.3. Two subsequences S=(s1,s2, ...,sls) and T=(t1,t2,...,tlt)
of a string X overlap if either (i) there exist indices i: 1 5 i < l, and j: 1 5 j < l;
such that i=j, or (ii) there exist indices i,i’: 15i<i’<ls and aj,j’:15j<
j’<lt such thateitheri<j<i’<j’ orj<i<j’<i’.

Given a source/target pair X, Y, any sequence of duplicate operations of the
form 631,“ M (X), . . .,83 (1,, d ,p d (X) that generates Y from X uniquely partitions
the characters of Y into non-overlapping subsequences corresponding to
characters that were copied conjointly from X.

DEFINITION 2.4. Given a source string X, a generator \IJX =(Xi1,j1,...,X,-k,jk)
is a sequence of substrings of X.

 

1In (Kahn and Raphael, 2008, 2009), we also considered duplicate reversals
in which the copied substring is inverted before being inserted into the target.
We note that all of our deﬁnitions and algorithms presented here can be
similarly augmented but we omit the details.

2We note that the duplication distance between a pair of strings is not formally
a distance as it is asymmetric.

X = abode

Y0 = 0

Y1 2 YO o 61,3,1(X) 2 abc

Yg 2 Y1 o 64,5,1(X) = deabc
Y 2 Y2 o 64,5,5(X) = deabdec

Fig. 1. An example of a sequence of duplicate operations that constructs
Y =deabdec from X = abcde. The corresponding feasible generator is: \IJX =
(X45 X13 X45) = ((616), (abc), (616))-

DEFINITION 2.5. A generator \IJX =(X,-
string Y, that we denote as \IJX -| Y, 

1,j1,---,Xik,jk) is feasible for a target

(1) The elements of \IJX partition the characters of Y into mutually non-
overlapping subsequences {S1, . . . , S k}.

(2) There exists a bijective mapping f :{Xi,jE\IJX}—>{S1,...,Sk} from
substrings of X to subsequences in Y corresponding to how the
elements of \le partition Y.

(3) The order of elements in \le corresponds to the order of the leftmost
characters of the subsequencesf(X,-1,j1), ...,f(X,-k Jk) in Y.

See Figure 1.

A sequence of k duplicate operations that constructs Y from X uniquely
deﬁnes a feasible generator \IJX with length k whose elements correspond,
respectively, to substrings of X that are duplicated conjointly in a single
operation.

2.2 Parsimony

In Kahn et al. (2010), we describe a polynomial-time algorithm to compute
the duplication distance from X to Y. We use duplication distance to measure
the similarity between a pair of duplication blocks by counting the number of
operations needed to generate Y from X in a simplest or most-parsimonious
scenario.

While the parsimony assumption is attractive from a theoretical
perspective and can produce useful biological insight, it might be overly
restrictive, particularly when there are many different optimal or nearly
optimal solutions. Consider, for example, the strinng 2‘ ’, ‘b’, ‘c’, ‘d’, ‘e’,
‘f’, and ‘g’, hijkl, and Y =agdbhecifdajebkfclg. The duplication distance,
d(X , Y), is 13 and there is a single feasible generator with this optimum
length. However, there are 989 possible feasible generators for Y, 119 of
which have length 14, just slightly suboptimal.

Because the space of all possible feasible generators is very large, a
probabilistic model might give very low probability to an optimal parsimony
solution. Thus, in the next section, we present a probabilistic model of
segmental duplication that considers the weighted ensemble of all feasible
generators for a source/target string pair.

2.3 The partition function

For a given source string X and positive integer k, we consider the space of all
length-k generators \IJX. We deﬁne a probability distribution on the collection
of generators by deﬁning Pr[lllx] occo(\IJX) where a)(\IJX) is the ‘score’, or
weight, assigned to a generator, and we compute the partition function Z?)
of the weighted ensemble of all possible length-k generators \IJX. Given a
source string X and a target string Y, we deﬁne the event F to be the event of
choosing a length-k generator that is feasible for Y from the space of length-k
generators. We deﬁne a probabilistic model for segmental duplications that,
given a target string Y, assigns a probability to F: Pr[F |Y,X,k]. For a ﬁxed
target string Y, the probability, Pr[FIY,X,k], is the weighted ensemble of
all possible length-k generators that are feasible for Y, normalized by the

 

i447

1e [3.10'811211.1th[p.IOJXO'SOpBIIIJOJIIIOIQ/ﬂ(11111 wort popeolumoq

9IOZ ‘ISlsnﬁnV uo ::

C.L.Kahn et al.

 

partition function Z9. In particular, we can express the probability as:

1
Pr[F|Y,X,k]= W Z coma), <1)
ZX \llx—IYII‘lel=k

where IIIJXI denotes the length of the generator. The likelihood of a target
string Y then can be expressed as L(Y |F,X,k) =Pr(F |Y,X,k).

The score of a generator, a)(\IJX), can be deﬁned according to various
biological models. Although different functions a) may require different
algorithms for computing the value Pr[F |Y,X,k], we found that functions
of the form a)(\IJX)=o(|\IJX|,l(\IJX)) where l(\IJX)=ZXiJEq,X |X,-,j| denotes
the sum of the lengths of the elements of \IJX, admit particularly efﬁcient
algorithms for computing Equation (1). We discuss the score function further
in Supplementary Section 1.2.

Now, we give an algorithm to compute the partition function, ZS). Given
a score function of the form o(|\IJX|,l(\IJX)), each length-k generator whose
elements have lengths that sum to l are scored the same, namely o(k,l).
Therefore, in order to compute Z00, we must calculate the total number of
length-k generators whose lengths sum to l for all relevant values of l. Let
C90) equal the number of distinct length-k generators for which the sum
of the lengths of the elements equals l.3

LEMMA 2.6. Let X =x1 ...xle be a source string and let k and l be positive

integers. The function C90) satisﬁes the following recurrence.

0%): IXI—l+1,

l—1
c§f’<l)= Z c§f"’<l’)-<IXI—<l—l’)+1).
l’=l—|X|

For a source string X and integers k,l, if we are given C90), we can

compute Z?) efﬁciently by summing C90) over all relevant lengths l,
weighting each feasible generator appropriately according to the function
o(k,l).

THEOREM 2.7. LetX =x1 ...xle be a source string and k be a positive integer
The partition function Z?) satisﬁes the following.

|X|-k
2,?) = ch‘knaa, l).
l=k

Note that the elements of a length-k list of substrings of X can have lengths
that sum to at least k and at most |X| -k.

The recurrence in Lemma 2.6 can be computed in 0(|X |k) time, so Z?)
can be computed in 0(|X|2k2) time according to Theorem 2.7. We omit a
proof of correctness due to space considerations.

2.4 Restricted partition function

In this section, we present the ﬁnal ingredient necessary to compute
the probability Pr[F|Y,X,k], namely the sum in Equation (1) that we
deﬁne as Q§)(Y). We refer to the value Q$)(Y) as the restricted partition
function of feasible generators, and it is equal to the weighted ensemble

of all length-k generators \IJX that are feasible for Y. Hence Q§)(Y)=

ZqJX—iY:|\IJX|=kw(‘I’X)= ZwX—iY:|\IJX|=k‘7(k’ WI)-

In order to compute this value, we generalize the recurrence presented in
Kahn et al. (2010) for computing duplication distance from source string X
to target string Y to count the number of length-k generators that are feasible
for Y.

 

3The value C90) is related to the well-known integer partition function p(n)
and corresponding Young tableaux. If 730,k) is the set of partitions of the
integer l into k parts, we can express C90) 2 21.6730,“ ZpepﬂXl —p+ 1)-
kl.

LEMMA 2.8. Given a source string X =x1...x|X| and a target string

Y =y1, ...,y|Y|, the number N$)(Y) of distinct length-k generators \le that
are feasible for Y satisﬁes the following recurrence.

k k .
Ni’m = 2 NW»,

izxi=y1

1 ifY=Xi,i+IY|—1,

(1) .
N Y,l =
X< ) {0 otherwise,

k . k—l
N;(()(Y,l) =N;(( )(Y2,|Y|)+

k
2 ZIN§’<Y2,,-_1)-

j>11yj=xi+1l=1
k—l .
N§ )(Yj,|Y|,l+1)l.

Here, the term N$)(Y, i) represents the number of feasible generators \IJX
with length k given that the character y1 is generated by a substring of X
starting at xi.

We compute the restricted partition function Q$)(Y) efﬁciently by ﬁrst
counting the number of relevant feasible generators, namely N$)(Y), and
scoring each generator appropriately by o(k, |Y |).

THEOREM 2.9. Let X=x1...x|X|, Y=y1,...,y|Y| be a source/target string

pair and let k be a positive integer The restricted partition function Q$)(Y)
satisﬁes the following.

Q§§’(Y)=N§f’<Y)-a(k,lrl).

The recurrence given in Lemma 2.8 can be computed in time
0(|Y|2k2,u(Y),u(X)) where ,u(Y) (resp. ,u(X)) is the maximum multiplicity
of any character that appears in Y (resp. X), so computing Q$)(Y) takes the
same time. We include a proof of correctness in Supplementary Section 1.1.

3 ALGORITHM

Here, we formalize the problem of computing a segmental
duplication evolutionary history for a set of duplication blocks in
the human genome with respect to either a parsimony or likelihood
criterion.

3.1 Maximum parsimony and maximum likelihood
evolutionary histories

The input to our problem is the set of duplication blocks found
in the human genome, each represented as a signed string on
the alphabet of duplicons. Our goal is to compute a putative
duplication history that accounts for the construction of all of the
duplication blocks. We assume that the ancestral genome is devoid
of segmental duplications. A duplication history is a sequence of
duplicate events that ﬁrst builds up a set of seed duplication blocks
by duplicating and aggregating duplicons from their ancestral loci
and then successively constructs the remaining duplication blocks
by duplicating substrings of previously constructed blocks.

We observed in Kahn and Raphael (2008) strong evidence that
many of the duplication blocks identiﬁed by Jiang et al. (2007)
had been constructed through the duplication and aggregation of
substrings of duplicons from several other blocks. Therefore, a tree
cannot aptly represent an evolutionary history; a more appropriate
representation of the evolutionary relationships between duplication
blocks is a DAG in which the vertices represent duplication blocks
and an edge directed from a vertex X to a vertex Y indicates that

 

i448

112 [3.10'SIBIIJHO[p.IOJXO'SOpBIIIJOJIIIOIQ/ﬂdllq wort popeolumoq

9IOZ ‘ISlsnﬁnV uo ::

Reconstruction of segmental duplications

 

substrings of X were duplicated in the construction of Y. A vertex
with multiple incoming edges and, therefore, multiple parents, is
constructed using substrings of all of the parent blocks. Speciﬁcally,
given a DAG G=(D,E), for YED, we deﬁne Pg(Y), the parent
string of Y, by Pg(Y)=X1®X2 G - - - GXP whereXi e {D|(Xi, Y) e E}
and G indicates the concatenation of two strings with a dummy
character inserted in between.

We make two simplifying assumptions. First, we assume that only
duplicate events occur and that there are no deletions, inversions, or
other types of rearrangements within a duplication block. Second,
we assume that a duplication block is not copied and used to make
another duplication block until after it has been fully constructed,
ensuring the evolutionary relationships cannot contain cycles. We
acknowledge that our two simplifying assumptions restrict the
evolutionary history reconstruction problem signiﬁcantly, but admit
an efﬁcient and consistent method of scoring a solution. Similar
assumptions were made, for example, by Price et al. (2004) to derive
the evolutionary tree for Alu repeat elements.

We can deﬁne the optimal DAG with respect to a parsimony
criterion using duplication distance (Deﬁnition 2.2).

DEFINITION 3.1. Given a set of duplication blocks D, the maximum
parsimony evolutionary history is the DAG G: (D,E) that

minimizes f (G) = ZYED d (Pg(Y), Y).

We can also deﬁne the optimal DAG with respect to a likelihood
criterion. In phylogenetic tree reconstruction, a max likelihood
solution is a tree that maximizes the probability of generating
the characters at the leaf nodes over all possible tree topologies,
branch lengths, and assignments of ancestral states to the internal
nodes. Typically, the evolutionary process is assumed to be a
Markov process so that the probabilities along different branches
are independent. We similarly deﬁne the maximum likelihood DAG
using the probabilistic model derived in Section 2. We maximize the
likelihood of the solution over all DAG topologies and—instead of
branch lengths—the numbers of operations permitted to construct
each node.

DEFINITION 3.2. Given a set of duplication blocks D, the
maximum likelihood evolutionary history is the DAG G=(D,E)
that maximizes the likelihood:

L(G) = HYGDMY),
= HYGD (makar[F|Y,P(;(Y), k]),

_ (k) (k)

— I—IYe’D (Inan QPG(Y)(Y)/ZPG(Y)) ,
where Z1512“) and Q53“) are the partition function and restricted
partition functions, respectively.

4 IMPLEMENTATION

We analyzed a set of 391 duplication blocks identiﬁed by Jiang
et al. (2007) that were represented as signed strings on an alphabet
of N11000 duplicons. We computed the maximum parsimony
evolutionary history (Deﬁnition 3.1) for the entire set of blocks
(Fig. 2). The DAG exhibited multiple connected components.
For comparison, we then computed the maximum likelihood
evolutionary histories (Deﬁnition 3.2) for several of the subgraphs
induced by connected components of the parsimony solution. We

scored generators according to o(k, |Y|) = W (see Supplementary
Section 1.2).

We used a simulated annealing strategy to ﬁnd a maximum
parsimony DAG for the entire set of duplication blocks and
to ﬁnd maximum likelihood DAGs for several subgraphs4 (see
Supplementary Section 1.3 for details). For each input, we ran our
local search 300 times. We started the search an equal number
of times at each of three different types of initial graphs: (i) the
empty graph with no edges; (ii) the directed minimum spanning tree
(MST); and (iii) a randomly chosen DAG (chosen independently
for each trial). Finally, to focus the search on the most important
block relationships, we considered only edges between blocks whose
longest common subsequence (LCS) contained at least 20 duplicons.

4.1 Maximum parsimony reconstruction

The maximum parsimony DAG contains 391 nodes and 479
edges. There are nine connected components with at least four
duplication blocks, and nearly 40% of the blocks appear in the largest
connected component. Figure 3 shows a moderately- sized connected
component. The graph also contains a total of 105 singleton nodes
for which we did not infer any evolutionary relations with other
duplication blocks, 97 of which did not exhibit an LCS of length
20 with any other block.

The maximum parsimony DAG represents a scenario in which all
391 duplication blocks could have been constructed in a sequence
of 17431 total duplicate operations. As a baseline comparison, a
minimum spanning tree, with respect to duplication distance, on the
set of duplication blocks has a total parsimony score of 28 852 and
by deﬁnition, contains 390 edges.

4.2 Clades and core duplicons

Jiang et al. (2007) performed an initial analysis of the duplication
blocks. They deﬁned 24 clades, or groups of duplication blocks
derived from a common ancestor block, by performing hierarchical
clustering on a matrix representing the shared presence or absence
of duplicons for every pair of blocks. For a given clade they deﬁned
a core duplicon as one that appears in at least 67% of the constituent
duplication blocks. They posited that Clades represent families of
evolutionarily related duplication blocks and that core duplicons
‘may have driven the evolution of the duplication blocks’ in a
clade.

After construction, we colored the nodes of our DAG according
to the Clades described in Jiang et al. (2007). We found a
strong correspondence between J iang et al.’s Clades and connected
subgraphs in our DAG; ﬁve of the nine connected components with
at least four blocks were comprised of duplication blocks belonging
to a single clade and seven of the nine components were comprised
of blocks belonging to no more than two Clades. For example, see
Figures 4a and 5a. In larger components, nodes from a single clade
frequently induce a connected subgraph. For example, see Figure 3.

Our DAG also reveals which duplication blocks may have seeded
many other blocks (i.e. those with high out-degree). For example,
in Figure 3, block 399 exhibits eight children and is an inﬂection
point for the component. Moreover, the edge from block 399 to 405

 

4Both the max parsimony and max likelihood versions of the problem can be
shown to be NP-hard by a reduction from the problem of Learning Bayesian
Networks.

 

i449

112 Bro's112umofp101xo'sor112u1101quIq/ﬁd11q urorr popeolumoq

9IOZ ‘ISlsnﬁnV uo ::

C.L.Kahn et al.

 

UoéEommom 3.8:: :3:“\330338838.oxmo:&o:::&m.o:m\ m: n 0: >258: m r N03

202:0. 0:2e :2 338 5:3 .8 8:25:82 25 5:80:38 wow? 0:5 25 ::: ..NE. 0:20 :2 :8: .985 dmot .8 8:25:82 25 5:80:38 mow? :8 25 0:2. 0:20 :2 80m: .83 .83 .33 Koo: .womE
8:088 823:: 25 .8 8:85:82 25 5:80:38 wow? 89% 2:1 50:: 0:20 03:28 : o5 8:580 385:: 80:5: 8: 828350: 8:85:52 82? 8823:: .8 8888838 :o>:8:oo m 8.5 828350:
8:25:82 5:80:38 mow? :828 .8 28 m 2:: 80:0: 8 228 mm :23 8:: 2:2:2 95 5:5 @838 2882058 :2 :::o.: 8202: 85:23:: .8 38% .8. :8 8:3V 80:20 :N .8 58 : 2:2 882:
85:23:: 25 :o855::3 Ahoomv .3 8 w::: .5 .8 858.5880 25 :2 a .8 $2538 :38 :55 28>: 85:23:: 80:20:: 2:88 85:23:: 88288223808 25 .5 5 0:0: : 8 a 0:0: : :85
:285: 2 ow:o :: 885:8: 3:85:38 2:2:2 mow:m .8283 85:23:: 5:80:38 8:0: 2:1 888% :::::: 25 :2 882: 85:23:: am .8 58 : 8.5 O<Q 80:58:23 8:82:38 2:: .N .wwm

9
9

 

HHMHSMHHHHQQ .

 

3:5

12:: .2

92 0 Hum: . EEO

 

2::

O
O
O
O

 

 

 

 

2:: . 4-2:

8:0 . /

 

 

 

 

 

 

 

 

new

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

i450

Reconstruction of segmental duplications

 

 

 

 

 

 

 

 

 

 

 

 

 

Fig. 3. A connected component of the maximum parsimony DAG. Nodes
from clade ‘M1’ are red and nodes from clade ‘chr7_2’ are green. Node
labels correspond to duplication block IDs. The blue edges represents the
inheritance network for non-core duplicon 6970.

 

 

Fig. 4. (a) Component comprised entirely of duplication blocks from clade
‘chr16’ in the maximum parsimony DAG (b) Maximum likelihood DAG for
subgraph induced on nodes in (a).

links blocks from the the ‘M1’ and ‘chr7_2’ Clades. Even though the
blocks 399 and 405 belong to different clades, 405 is very ‘close’ to
399 in duplication distance: block 405 contains only 71 duplicons,
but it shares a subsequence of 29 duplicons with block 399. This
link suggests that the entirety of clade ‘chr7_2’ was descended from
clade ‘M1’ in an optimal duplication history.

Also implicit in the DAG is information about which duplicons
are duplicated from one block to another in an optimal duplication
history. We deﬁne the inheritance network for each duplicon as the
subgraph induced on the edges on which that duplicon is passed
from parent to child. Interestingly, a comparison of the inheritance
networks for core and non-core duplicons revealed that many non-
core duplicons exhibit larger inheritance networks within subgraphs

 

Fig. 5. (a) Component comprised entirely of duplication blocks from clade
‘chr10’ in the maximum parsimony DAG. (b) Maximum likelihood DAG for
subgraph induced on nodes in (a).

induced by a clade than core duplicons. For example, non-core
duplicon 6970 appeared on 36 of the 63 total edges in the subgraph
induced by clade ‘M1’ (shown in blue in Fig. 3) and does not appear
on any other edge in the graph. In contrast, the maximum size of
the inheritance network of a core duplicon was only 17. We propose
6970 as a new core duplicon for this clade and suggest that others
like it should also be categorized as core duplicons.

Moreover, we found inheritance networks for many conserved
subsequences of duplicons that were nearly as prominent as
those for individual core duplicons. For example, the subsequence
[6968,6967,6925,6963,6962] of duplicons appears on 23 of the
edges in the subgraph induced by ‘M1’ clade nodes (shown as green
edges in Fig. 2). Similarly, the sequence [7039, 7036, 7037] exhibits
a connected inheritance network of 7 edges within the subgraph
induced on clade ‘M2’, and [9448,9449] exhibits an inheritance
network of seven edges within the subgraph induced on clade
‘chr16’ that includes an inheritance path of length 5 (Fig. 2). By
delineating the inheritance networks of duplicon subsequences that
are conserved across duplication blocks, we can learn about which
duplicons were duplicated and transposed conjointly. This type of
analysis was impossible using only the clade annotations of Jiang
et al. (2007).

4.3 Maximum likelihood reconstruction

We computed the maximum likelihood DAGs (Deﬁnition 3.2) for
the sets of duplication blocks appearing within moderately sized
connected components of the maximum parsimony DAG in order
to compare the two methods. We chose the components comprised
of blocks from Clades ‘chr16’ and ‘chr10’, respectively (Fig. 2). The
maximum likelihood subgraphs for these subproblems are shown in
Figures 4b and 5b.

The two DAGs for the ‘chr16’ component in Figure 4 share
some characteristics. For example, node 121 is a common ancestor
of every other block and block 276 exhibits high out-degree in
both solutions. Both solutions are similarly ‘good’ with respect to
the parsimony objective: the solution in (a) exhibits an optimal
parsimony score of 397, and the one in (b) exhibits a score of 401.

 

i451

112 /810's112umofp101xo'sor112u1101quIq/ﬁd11q urorr popeolumoq

9IOZ ‘ISlsnﬁnV uo ::

C.L.Kahn et al.

 

However, the likelihood score for the parsimony solution in (a) was
nearly zero. One difference that accounts for this discrepancy is the
higher average in-degree for blocks in the parsimony solution (2.2)
as compared to the likelihood solution (1.3). Also, the parsimony
solution exhibits a path with ten edges, whereas the longest path in
the likelihood solution has six.

Some of these differences are due to the fact that the parsimony
criterion does not penalize edges that do not directly improve the
score. For example, block 291 has two parents (276 and 25) in the
parsimony DAG but only one parent (276) in the likelihood DAG
However, the duplication distance with source 276 G 25 and target
291 is the same as the duplication distance with source 276 and
target 291. Therefore, the edge from 25 to 291 does not improve
the parsimony score, underscoring that there are multiple optimal
parsimony solutions. In contrast, the likelihood of a target block
generally increases as the sum of the lengths of its parent blocks
decreases, so the max likelihood DAG will not include edges that
do not directly improve the score.

5 DISCUSSION

Our maximum parsimony and maximum likelihood reconstructions
show some differences, both from each other and from the analysis
of Jiang et al. (2007). In particular, we identify non-core duplicons
and subsequences that are arguably as promiscuous within a clade
as core duplicons.

There are several directions for future work. From a theoretical
perspective, one can incorporate other types of operations into
the probabilistic model, such as deletions and inversions which
we have described in the parsimony setting (Kahn et al., 2010),
as well as single nucleotide mutations. Also, our method could
be used to sample over the space of DAGs using a Markov
Chain Monte Carlo strategy. From the perspective of applications,
a more comprehensive analysis of genes or other elements in the
newly identiﬁed core duplicons and core subsequences from our

reconstruction is warranted, as is a further reﬁnement of the clade
annotation by analyzing the clade-induced subgraphs of the DAGs.

Funding: Career Award at the Scientiﬁc Interface from the
Burroughs Wellcome Fund (to B.J.R.).

Conﬂict of Interest: none declared.

REFERENCES

Alkan,C. et al. (2009) Personalized copy number and segmental duplication maps using
next-generation sequencing. Nat Genet, 41, 1061—1067.

Bailey,J. and Eichler,E. (2006) Primate segmental duplications: crucibles of evolution,
diversity and disease. Nat Rev. Genet, 7, 552—564.

Blekhman,R. et al. (2009) Segmental duplications contribute to gene expression
differences between humans and chimpanzees. Genetics, 182, 627—630.

Chaudhuri,K. et al. (2006) On the tandem duplication-random loss model of genome
rearrangement. In Proceedings of the Seventeenth Annual ACM-SIAM Symposium
on Discrete Algorithms (SODA), ACM, New York, NY, USA, pp. 564—570.

El-Mabrouk,N. (2002) Reconstructing an ancestral genome using minimum segments
duplications and reversals. J. Comput. Syst. Sci., 65, 442—464.

Ergun,F. et al. (2003) Comparing sequences with segment rearrangements. In
Proceedings FST TCS ’03, V01. 2914, Springer, Berlin, pp. 222—234.

Jiang,Z. et al. (2007) Ancestral reconstruction of segmental duplications reveals
punctuated cores of human genome evolution. Nat Genet, 39, 1361—1368.

Kahn,C.L. and Raphael,B.J. (2008) Analysis of segmental duplications via duplication
distance. Bioinformatics, 24, i133—i138.

Kahn,C.L. and Raphael,B.J. (2009) A parsimony approach to analysis of human
segmental duplications. Pac. Symp. Biocomput, 14, 126—137.

Kahn,C. et al. (2010) Efﬁcient algorithms for analyzing segmental duplications with
deletions and inversions in genomes. Algorithms Mol. Biol., 5, 11.

Lajoie,M. et al. (2007) Duplication and inversion history of a tandeme repeated genes
family. J. Comp. Bio., 14, 462—478.

Marron,M. et al. (2004) Genomic distances under deletions and insertions. Theor.
Comput. Sci., 325, 347—360.

McCaskill,J. (1990) The equilibrium partition function and base pair binding
probabilities for RNA secondary structure. Biopolymers, 29, 1105—1119.

Price,A. et al. (2004) Whole-genome analysis of Alu repeat elements reveals complex
evolutionary history. Genome Res., 14, 2245—2252.

Sankoff,D. (1999) Genome rearrangement with gene families. Bioinformatics, 15,
909—917.

 

i452

112 /810's112umofp101xo'sor112u1101quIq/ﬁd11q urorr popeolumoq

9IOZ ‘ISlsnﬁnV uo ::

