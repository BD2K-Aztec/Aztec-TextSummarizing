APPLICA TIONS NOTE V°" iaiéﬁa‘iéiaiﬁgﬁiffﬁiﬁ

 

Genetics and population analysis

Advance Access publication October 24, 2012

FFPopSim: an efficient forward simulation package for the

evolution of large populations
Fabio Zanini and Richard A. Neher*

Evolutionary Dynamics and Biophysics Group, Max Planck Institute for Developmental Biology, 72076 Tiibingen, Germany

Associate Editor: Jeffrey Barrett

 

ABSTRACT

Motivation: The analysis of the evolutionary dynamics of a population
with many polymorphic loci is challenging, as a large number of
possible genotypes needs to be tracked. In the absence of analytical
solutions, forward computer simulations are an important tool in
multi-Iocus population genetics. The run time of standard algorithms
to simulate sexual populations increases as 8L with the number of
loci L, or with the square of the population size N.

Results: We have developed algorithms to simulate large populations
with arbitrary genetic maps, including multiple crossovers, with a run
time that scales as 3L. If the number of crossovers is restricted to at
most one, the run time is reduced to L2L. The algorithm is based on an
analogue of the Fast Fourier Transform (FFl') and allows for arbitrary
fitness functions (i.e. any epistasis). In addition, we include a stream-
lined individuaI-based framework. The library is implemented as a col-
lection of C++ classes and a Python interface.

Availability: http://code.google.com/p/ffpopsim/.

Contact: richard.neher@tuebingen.mpg.de

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on July 20, 2012; revised on September 26, 2012; accepted
on October 17, 2012

1 INTRODUCTION

Forward simulations of population genetics track either the
number of individuals carrying each possible genotype or the
genotype of every individual in the population, as illustrated in
Figure l. The latter strategy has been implemented in a number
of ﬂexible simulation packages (Guillaume and Rougemont,
2006; Peng and Kimmel, 2005; Spencer and Coop, 2004).
In large populations with a moderate number of loci L, storing
the abundance of all possible 2L genotypes is often faster.
Simulating such large populations with a small number of loci
is for example essential when studying the evolution of drug
resistance in Viral or bacterial pathogens.

Individual-based population genetics simulations are straight-
forward and usually use a discrete generation scheme in which
processes such as mutation, selection and migration are applied
at every generation to every individual. Individuals are then
paired up Via a mating scheme and recombinant offspring are
produced. Existing toolboxes often emphasize biological realism
and allow the user to specify complex life cycles. Our emphasis
here is on efﬁcient simulation of large populations. The class

 

*To whom correspondence should be addressed.

haploid_1owd of F FPopSim tracks the distribution P(g)
of gametes across all possible 2L genotypes, denoted by
g = ($1, . . . ,sL) where s,=0/l (see Fig. 1). This genotype distri-
bution changes owing to mutation, selection and recombination.
In our implementation, selection acts on haploid gametes, pre-
cluding dominance effects. Recombination is a computationally
expensive operation, as it involves pairs of parents (up to 4L of
them) that can combine their genome in many different ways
(2L for arbitrary genetic maps, 2L when allowing single cross-
overs only). As a consequence, a naive implementation requires
(9(8L) or (9(L4L) operations to calculate the distribution of re-
combinant genotypes for arbitrary or single crossover recombin-
ation, respectively. It is intuitive that the complexity of this
algorithm can be reduced: given a recombination pattern, only
a fraction of the genome is passed on and all genotypes that
agree on that fraction contribute identically.

We show in the Supplementary Material that the distribution
of recombinants can be calculated in (9(3L) steps for arbitrary
crossover patterns and in (9(L2L) steps if only a single crossover
is allowed. This reduces the complexity of evolving sexual popu-
lations to that of asexual populations. The crucial ingredient for
the increased performance is a Fast Fourier Transform on geno-
type spaces explained in detail in the Supplementary Material.
The genotype space is an L dimensional hypercube on which
Fourier and Taylor expansions can be deﬁned.

After selection, mutation and recombination, the population
distribution P(g) contains the expected number of individuals of
genotype g in the next generation. For stochastic population gen-
etics, we still need to resample the population in a way that mimics
the randomness of reproduction. This is achieved by resampling
individuals according to a Poisson distribution with mean N P(g)
for each genotype. The resulting population has a size of approxi-
mately N :I: (Ob/N). The ﬂuctuations in the population size are
small if N is large and do not propagate since the population is
resampled de novo each generation. The user can set the expected
population size before resampling and generate any desired
time-dependent population size. For a general discussion of
multi-locus evolution see e. g. (Neher and Shraiman, 2011).

Figure 2 shows how the time required to simulate one gener-
ation increases with the number of loci, conﬁrming the expected
scaling behaviour of the computational complexity.

2 USAGE

F FPopSim is implemented in C++ with a Python2 wrapper.
From Python, FFPopSim can be imported as a module.
We provide examples that reproduce basic population genetics

 

© The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/Iicenses/by/3.0/), which
permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

112 [3.10811211an[plOJXO'SODBIILIOJIIIOIQ/ﬂ(11111 wort popcolumoq

910K ‘09 lsnﬁnV no :2

FFPopSim

 

Genotype-space based simulation: Individual based simulation:

110 111

100 | /

recombination

011

000 4—.» 001
mutation

01011001101010100. . .010010
01000101100110101. . .001010
10100010001010101. . .101001

 

01101000001010100. . .010010
01000110010111101. . .001010
I— genome oflength L —I

 

I— Nindividuals —l

 

 

Fig. 1. Strategies for forward simulations: The left panel illustrates a
scheme that tracks the abundance of each possible genotype, encoded
as a bit string. This is feasible up to LN20 and is implemented in
FFPopSim as the class haploid_lowd. Recombination requires con-
sidering all possible pairs of parental genotypes and the different ways
their genomes can be combined, which is computationally expensive. The
right panel illustrates individual-based simulations that track existing
genotypes only. FFPopSim provides individual-based simulations
through the class haploid_highd

results, such as a mutation—selection—drift equilibrium or the
decay of linkage disequilibrium. The C++ library can be
linked against custom code and modiﬁed for speciﬁc purposes.
The class itself is called haploid_l owd, as it simulates a
haploid population with a relatively small number of loci.

As an example, we discuss here the problem of ﬁtness valley
crossing, which has recently received attention in the population
genetics literature (Lynch, 2010; Weissman et al., 2010) and
requires forward simulation of large populations while tracking
the state of several loci. Consider a ﬁtness landscape where the
wild-type genotype has (Malthusian) ﬁtness 51, the quadruple
mutant has ﬁtness 51+52, and all intermediate genotypes have
the same slightly deleterious ﬁtness 0 (—51 relative to wild type).
The time required for crossing the valley can be computed by the
following routine:

import FFPopSim
L = 4 it number of loci
N = lelO it population size

it create population and set rates
p = FFPopSim.haploid_lowd (L)
p.set_recombination_rates(0.001)
p.set_mutation_rates(le—5)

# start with wildtype: ObOOOO = O

p.set_genotypes ([ObOOOO] , [N] )

it set positive relative fitness for wildtype

it and quadruple mutant: Obllll = 15

p.set_fitness_function ([ObOOOO, Obllll] ,

[0.01, 0.02] )

it evolve until the quadruple mutant spreads

whilep . get_genotype_frequency ( Obllll) < O . 5:
p.evolve(lOO)

print p .generation

The run time and memory requirements of 3L or L2L still
preclude the simulation of more than L = 20 loci. For this reason,
we also include the class hapl oid_highd to perform individual-
based simulations with the same interface. hapl oid_highd

 

 

   
  

 

 

 

 

 

 

 

 

 

 

 

 

 

100 A - ,
10—1-
C
.9
E —2
g 10 I’
go I’
5 10—3 I E
‘3- I
% _ 0 0 general
= 10 4 - -
g A A single XO
m 10—5.A X X asexuai v -
XI -- naive L2106
10-6 ‘ I .

5 1'0 15 2b 163 164 165 106

number of loci Population size

Fig. 2. Performance of FFPopSim. (A) The time required to simulate a
single generation as a function of the number of loci, using the class
haploid_lowd. The expected scalings [8L for naive implementation,
3L for general recombination and L2L for single crossovers (XO)] are
indicated by solid lines. (B) The run times of the individual-based simu-
lations as a function of the population size for different genome sizes
L using haploid_highd. Solid lines correspond to crossover and
mutations rates p: ,u 210—8 typical of the human genome, dashed
lines to outcrossing with rate r=0.01, and ,u=10_5, [0210—3 typical
for Viral evolution. Run times were determined on a 2.93 GHz Intel CPU

can simulate an arbitrarily large number of loci and has overall
run time and memory requirements (9(NL) in the worst case scen-
ario (see Fig. 2B). Identical genotypes are grouped into clones to
speed up the simulation whenever diversiﬁcation Via mutation or
recombination is rare (L(,u. + ,0) << 1, where ,u. and ,0 are mutation
and recombination rates, respectively). The population size can be
adjusted at any time by changing the carrying capacity. Overall,
haploid_highd can simulate one megabase genomes in a
population of 105 individuals in about one second per generation
on a present day desktop computer. We have written a speciﬁc
subclass hivpopulation for large Viral populations that is also
included in F FPopSim. As of now, the library does not support
dominance effects; that would require a ﬁtness function that de-
pends on pairs of haploid genomes. Such an extension to diploid
populations is planned.

ACKNOWLEDGEMENT

We would like to thank Boris Shraiman for many stimulating
discussions and pointing us toward the F FT algorithm.

Funding: This work is supported by the ERC though Stg—260686.

Conﬂict of Interest: none declared

REFERENCES

Guillaume,F. and Rougemont,J. (2006) Nemo: an evolutionary and population
genetics programming framework. Bioinformatics, 22, 2556—2557.

Lynch,M. (2010) Scaling expectations for the time to establishment of complex
adaptations. Proc. Natl Acad. Sci. USA, 107, 16577—16582.

Neher,R. and Shraiman,B. (2011) Statistical genetics and evolution of quantitative
traits. Rev. Mod. Phys., 83, 1283—1300.

Peng,B. and Kimmel,M. (2005) simupop: a forward-time population genetics simu-
lation environment. Bioinformatics, 21, 3686—3687.

Spencer,C.C.A. and Coop,G. (2004) Selsim: a program to simulate population
genetic data with natural selection and recombination. Bioinformatics, 20,
3673—3675.

Weissman,D. et a]. (2010) The rate of ﬁtness-valley crossing in sexual populations.
Genetics, 186, 1389—1410.

 

3333

112 [3.10811211an[plOJXO'SODBIILIOJIIIOIQ/ﬂ(11111 won papeoIHAAoq

910K ‘09 lsnﬁnV no :2

