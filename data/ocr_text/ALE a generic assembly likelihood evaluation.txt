ORIGINAL PAPER

Vol. 29 no. 4 2013, pages 435—443
doi: 10. 1093/bioinformatics/bts 723

 

Genome analysis

Advance Access publication January 9, 2013

ALE: a generic assembly likelihood evaluation framework for
assessing the accuracy of genome and metagenome assemblies

Scott C. Clark‘, Rob Egan2’3, Peter I. Frazier“ and Zhong Wang2’3’*

1Center for Applied Mathematics, Cornell University, Ithaca, NY 14858, USA, 2Department of Energy, Joint Genome
Institute, Walnut Creek, CA 94598, USA, 8Genomics Division, Lawrence Berkeley National Laboratory, Berkeley,
CA 94720, USA and 4School of Operations Research and Information Engineering, Cornell University, Ithaca,

NY 14853, USA

Associate Editor: Alex Bateman

 

ABSTRACT

Motivation: Researchers need general purpose methods for object-
ively evaluating the accuracy of single and metagenome assemblies
and for automatically detecting any errors they may contain. Current
methods do not fully meet this need because they require a reference,
only consider one of the many aspects of assembly quality or lack
statistical justification, and none are designed to evaluate metagen-
ome assemblies.

Results: In this article, we present an Assembly Likelihood Evaluation
(ALE) framework that overcomes these limitations, systematically eval-
uating the accuracy of an assembly in a reference-independent
manner using rigorous statistical methods. This framework is compre-
hensive, and integrates read quality, mate pair orientation and insert
length (for paired-end reads), sequencing coverage, read alignment
and k-mer frequency. ALE pinpoints synthetic errors in both single
and metagenomic assemblies, including single-base errors, inser-
tions/deletions, genome rearrangements and chimeric assemblies
presented in metagenomes. At the genome level with real-world
data, ALE identifies three large misassemblies from the Spirochaeta
smaragdinae finished genome, which were all independently validated
by Pacific Biosciences sequencing. At the single-base level with
Illumina data, ALE recovers 215 of 222 (97%) single nucleotide vari-
ants in a training set from a GC-rich Rhodobacter sphaeroides
genome. Using real Pacific Biosciences data, ALE identifies 12 of 12
synthetic errors in a Lambda Phage genome, surpassing even Pacific
Biosciences’ own variant caller, EviCons. In summary, the ALE frame-
work provides a comprehensive, reference-independent and statistic-
ally rigorous measure of single genome and metagenome assembly
accuracy, which can be used to identify misassemblies or to optimize
the assembly process.

Availability: ALE is released as open source software under the Uol/
NCSA license at http://www.alescore.org. It is implemented in C and
Python.

Contact: pf98@cornell.edu or ZhongWang@lbl.gov

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on June 22, 2012; revised on December 18, 2012; accepted
on December 21, 2012

 

*To whom correspondence should be addressed.

1 INTRODUCTION

Recent advances in next-generation, high-throughput sequencing
technologies have dramatically reduced the cost of sequencing
(Metzker, 2010). With the development of genome assemblers
able to use large volumes of sequence data, reference genomes
are now rapidly produced using the whole genome shotgun strat-
egy, from small, simple microbial genomes Wu et al., 2009) to
large, complex plant or mammalian genomes (Fujimoto et al.,
2010; Li et al., 2010; Schmutz et al., 2010; Zimin et al., 2008).
Meanwhile, genomes are also being generated directly from com-
plex communities using culture-independent approaches, includ-
ing singe-cell genome sequencing and metagenome sequencing
(Hess et al., 2011; lverson et al., 2012; Woyke et al., 2010;
Yilmaz et al., 2011). The ability to assemble a metagenome is
particularly important because resolving the genomes of individ-
ual species, or at least the most abundant, from a complex com-
munity is crucial to exploring inter-species interactions and
understanding the community’s structure, dynamics and
function.

Assembly of individual genomes from NGS datasets poses
signiﬁcant informatics challenges, including short read length,
noisy data and large data volume (Lin et al., 2011; Pop, 2009).
Owing to these challenges, errors widely exist in single genome
assemblies derived from NGS datasets, with different speciﬁc
errors commonly associated with particular datasets, genomes
and tools (Haiminen et al., 2011). Beyond the challenges faced
in assembling single genomes, metagenome assembly poses
unique additional challenges. First, although the sequence
depth of a single genome should be approximately uniform,
the sequence depth of genomes in a metagenome varies greatly.
Second, the difﬁculty of resolving repetitive regions within a
single genome is exacerbated in metagenome assembly because
conserved genomic regions and lateral gene transfer greatly in-
crease the portion of falsely identiﬁed repetitive genomic regions.
Despite these unique challenges, assemblers designed for single
genomes are being applied to metagenome data without being
signiﬁcantly modiﬁed to systematically address errors introduced
in this way (Hess et al., 2011; lverson et al., 2012; Qin et al.,
2010).

Several tools have been developed to detect errors in single
genome assemblies. If a reference genome for the targeted organ-
ism is available, or one is available from a closely related species,
erroneous insertions, deletions or large gaps can be detected by

 

© The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 435

112 /§JO'S{Bumo [p.IOJXO'SODBIHJOJUIOIQ/ﬁ(1111] 11101; pepBOIUAAOG

910Z ‘09 lsnﬁnv uo ::

S. Clark et aI.

 

comparative analysis of the reference and the genome assembly
in question (Darling et al., 2011; Earl et al., 2011; Meader, 2010;
Salzberg et al., 2012). If a reference is unavailable, the alignment
of the raw reads with their assembly provides indirect measures
of assembly quality such as coverage depth and mate pair con-
sistency. This information can then be used to detect single-base
changes, repeat condensation or expansion, false segmental du-
plications and other misassemblies (Choi et al., 2008; Narzisi and
Mishra, 2011; Phillippy et al., 2008; Vezzi et al., 2012; Zimin
et al., 2008). Despite this progress, researchers still lack a
method that integrates indirect measures of read alignment qual-
ity in a quantitative, comprehensive and statistically
well-founded manner to systematically detect errors in single
genome assemblies. Moreover, metrics suitable for evaluating
metagenome assembly accuracy, and associated quantitative
methods for detecting errors in metagenome assemblies, have
yet to be developed.

In this work, we develop a novel statistical model for evaluat-
ing assembly accuracy in a reference-independent manner. Using
Bayesian statistics, we give an expression for the probability that
an assembly is correct, and provide an automated software tool
Assembly Likelihood Evaluation (ALE) based on this expres-
sion. The provided tool may be used in three ways. First, it
allows examining the contribution to this probability of correct-
ness from each base in the assembly, which can be used to iden-
tify speciﬁc errors and their locations. This is particularly useful
for genome ﬁnishing. Second, it provides an overall score for
different assemblies of the same genome or metagenome, thereby
enabling comparison of these assemblies and optimization of the
assembly process. Third, when applying re—sequencing data to a
reference genome, ALE can detect structural variations.

2 METHODS

2.1 The ALE score and the likelihood of an assembly

The ALE framework is founded on a statistical model that de-
scribes two probabilities: a Bayesian prior probability distribu-
tion P(S) describing the likelihood of an assembly S without any
read information and a probability P(R|S) describing the likeli-
hood of a set of reads, R, being generated from an assembly, S.
The prior P(S) can be computed using the k-mer distribution of
the assembly, whereas the likelihood P(R|S) is calculated from
information about read quality, agreement between the mapped
reads and the proposed assembly, mate pair orientation, insert
length (paired-end reads) and sequencing depth. A detailed de-
scription of the likelihood and prior probability is given in the
following.

The ALE score, except for a proportionality constant that
depends on the reads but not on the assembly, is the logarithm
of the probability that the assembly is correct, P(S IR). According
to Bayes’ rule, this probability is

P(SIR) = P(RIS)P(S)/Z- (1)

where Z is a proportionality constant ensuring P(S|R) is a prob-
ability distribution. As is typical in large-scale applications of
Bayesian statistics, computing Z exactly is intractable. The
ALE score is computed by replacing Z with an approximation

described in the Supplementary Materials, and then taking the
logarithm of the resulting approximation to P(S|R).

The ALE score can be used to compare two different assem-
blies of the same genome, 51 and 52. Call A1, the ALE score of
the ﬁrst assembly, and A2, the ALE score of the second, both
generated from the same set of reads R. The difference of these
scores is then given by the equation

P(51|R))
P(52|R) '

 

A1 — A2 = log( (2)
The assembly with the higher ALE score is also the one with
the larger probability of being correct. Moreover, the difference
between two assemblies’ ALE scores describes their relative
probabilities of correctness. Below, we refer to the ALE score
more precisely as the total ALE score, to differentiate it from the
sub-scores (described later in the text) used to construct it.

Although the ALE score can be reported as a standalone
value, this is made possible only to facilitate comparisons with
other assemblies of the same genome. We emphasize that the
ALE score is a comparative measure and should not be used
to judge the quality of a single assembly in isolation, as errors
in estimating Z may cause a large difference between the ALE
score and log(P(S|R)). We also emphasize that the ALE score
should only be used to compare different assemblies of the same
genome, for which the ALE scores have been calculated using the
same set of reads.

Figure 1 shows the pipeline used to compute the total ALE
score. Given a set of reads and a proposed assembly, ALE ﬁrst
takes as input the alignments of the reads onto the assembly in the
form of a SAM or BAM ﬁle (Li et al., 2009), which can be
produced by a third-party alignment algorithm such as bowtie
(Langmead et al., 2009) or bwa (Li et al., 2009). ALE then deter-
mines the probabilistic placement of each read and a correspond-
ing placement sub-score for each mapped base, which describes
how well the read agrees with the assembly. In the case of paired-
end reads, ALE also calculates an insert sub-score for all mapped
bases of the assembly from the read pair, which describes how well
the distance between the mapped reads matches the distribution of
lengths that we would expect from the sequencing library. This
insert sub-score is similar to the compression-expansion (CE) stat-
istic of Zimin et a]. (2008) with details given in the Supplementary
Materials. ALE also calculates a depth sub-score, which measures
the evenness of the sequencing depth accounting for the GC bias
prevalent in some NGS techniques. The placement, insert and
depth sub-scores together determine P(R|S). Independently,
with only the assembly and not the reads, ALE calculates the
k-mer sub-score and the prior P(S). Each sub-score is calculated
for each scaffold or contig within an assembly independently,
allowing for genome variations commonly found in metagenomes
because each contig/scaffold is likely from a different species with
a different k-mer proﬁle. The four sub-scores are then combined
to form the total ALE score. The constituent calculations in this
pipeline are described in the Supplementary Material.

The contributions to these four sub-scores are reported by ALE
as a function of position within the assembly and can be visualized
with the included plotting package or exported to genome viewers
including the Integrative Genomics Viewer (Nicol et al., 2009) and
the UCSC genome browser (Kent et al., 2002).

 

436

112 /810's113umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(1111] 11101; pepBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

ALE

 

g u a u a u u a n a - n a n a a n a n u - h u u u a n h d n a - a a n a u n a n u u u a i a u u u n - a n a n n a n a a u a n a a h u u u a...

 

 

 

Assembly

   

 

 

(fasts)

   

 

 

 

 

   

 
  

Alignment

  

Raw Reads

 

 

 

Ham] (SAMIBAM)

   

 

 

   

 

 

 

 

K-mer Snoring ]\ ALE Plot 
undn :

Depth Scoring ]\_ 
ALE Score 

Placement Searing V ALE Table 
Insert Scoring {ﬁle} 

Fig. 1. The components of the total ALE score. ALE takes a proposed assembly and an alignment of reads as input. Four scores, the k-mer, placement,
depth and insert sub-scores are computed using the model described in Section 2. From the four scores, a total ALE score is calculated and reported as a
text ﬁle (.ale), and the text ﬁle can be used for input into the supplied plotter to generate a PDF ﬁle for visualization

2.2 Details of the probabilistic ingredients of the ALE
score

We now describe the four sub-scores (placement, insert, depth
and k-mer) and the role they play within the ALE framework.

The ﬁrst three of these sub-scores appear in the likelihood
P(R|S). ALE computes P(R|S) using a probabilistic model for
the way in which reads are generated from an assembly during
the whole genome shotgun sequencing process. This model
makes independence assumptions that decomposes this probabil-
ity into a product of three terms,

HMS) = Pplacement(R|S)Pinsert(R|S)Pdepth(R|S)- (3)

Each term is a separate sub-score and is explained later in the
text in detail.

2.2.1 Placement Pplacemem(R|S) quantiﬁes how well the
sequence of the reads agrees with the assembly. Assuming
that every paired read r, is generated independently from
the assembly, the probability of a set of reads R given an
assembly S is Pplacement(R|S) = HriER Pplacement(ri|S)a Where
Pplacemem(r,|S) is itself the product of two independent probabil-
ity diStributionS: Pplacement(r = Pmatches(riIS)Porientation(r
Here, Pmatches(r,|S) describes how well the read matches the
subsection of the assembly to which it maps, and Poriemation(r,|S)
describes whether the mate pairs have an orientation that is con-
sistent with the library. We now describe in detail how these two
probabilities are computed, beginning with Pmatches(r,|S).
Assuming that each base j of the read is correctly called by the
sequencer independently with a probability equal to the base’s
quality score Qj, we have Pmatches(r,|S) = HbasejeriP(baseJ-|S),
where P(basej|S) = Q when the base j correctly matches the
assembly and P(basej|S) = (1 — Qj)/4 when it does not. This
expression follows from our modeling assumption that all four
possible errors that the sequencer could have reported (three
different substitutions and deletion) are equally likely when the
read does not match the sequence. If the assembly has an un-
known base (denoted ‘N’), we set P(basej|S) = 1/4, modeling
the lack of information about the correct base at that location.
If an ambiguity code is reported by the sequencer, then the afore-
mentioned expression is modiﬁed to account for the distribution
over the possible bases encoded by that code. Each read may
only be ‘placed’ at a single position in the assembly. If the aligner
placed a particular read at more than one position, we choose
one position at random, weighting by Pplacement(rj|S). This allows

for repeat regions to be properly represented with the correct
number of reads in expectation.

The orientation likelihood, PoriemationUAS), is calculated by
ﬁrst counting the number of times that each orientation occurs
in each library from the mapping information. The likelihood
Porientation(ri|S) is then the empirical frequency of the observed
orientation of the read r, in the library to which r, belongs. (This
likelihood can also be overridden with user-speciﬁed values.)

We also derive per-base placement sub-scores at each position
in the assembly. The placement sub-score at a particular position

UN

is the geometric mean  Pplacemem(r,|S):| , where the product
Vi

is over all reads r, covering the given position, and N is the

number of such reads.

2.2.2 Insert Pimen(R|S) describes how well the mate pairs’
insert lengths match those we would expect and is computed as
Fingert(R|S) 2 Erie]? Pimen(r,|S). The insert likelihood,
Fingert(r,-|S), is determined by ﬁrst observing all insert lengths
from all mappings of all reads and calculating the population
mean, ,u, and variance, 02, of these lengths (the mean and vari-
ance can also be set by the user, if they are known). This step
only needs to be done once. Once completed, we calculate the
insert likelihood for each read pair r, by assuming that the
observed insert length L, is distributed normally with this
mean and variance, Fingert(r,|S) = Normal(L,; ,u, 02)

As with the placement sub-score, we calculate the insert
sub-score at a position as the geometric mean of the
Fingert(r,-|S) of all reads r, covering that position. This can identify
areas of constriction or expansion within a proposed assembly.

The insert sub-score is similar to the CE statistics of Zimin
et a]. (2008), as we now show. To describe the similarity, we ﬁrst

UN
0 I _ ._ 2
write the insert sub-score as  (27102) W exp(—  =
l

N
(me—“2 exp (— 2%,: (L. — m2),
i=1
where the products and sums over i are over all reads covering
a given position, and N is the number of such reads. We now use
the fact that g2; (L,- — M2 = $2 + (M — “)2,
M = % Z L, is the sample mean of the implied insert lengths

where

and $2 =  (L,- — M2 is the sample variance. The CE statistic

from Zimin et a]. (2008) is Cszﬁy—V, which implies

 

437

112 /810's113umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; pepeommoq

9IOZ ‘09 lsnﬁnv uo ::

S. Clark et aI.

 

N
#2 (Li — ,u.)2 = 2;: + N x CE2. As N grows large, the CE stat-
i=1

istic is asymptotically normal, owing to the central limit theorem.

The log of the insert sub-score can then be written
—%[log(27wz) + (Sz/az) + N x CE2]. The insert sub-score is
decreasing in i—: + N x CE2, and the term involving the CE stat-
istic dominates when N is large. Thus, when N is large, the pos-
itions with lowest insert sub-score are those positions whose CE
statistic is furthest from 0. This, ﬂagging those regions with low
insert-sub score is similar to the rule recommended in Zimin et al.
(2008) of ﬂagging those regions with |CE| larger than a ﬁxed
cutoff value.

2.2.3 Depth Pdepth(R|S) describes how well the depth at
each location agrees with the depth that we would expect,
given the GC content at that location. It is the product of
a depth sub-score over all positions in the assembly,
Pdepth(R|S) 2 HI. Pdepth(a’,-|S), where d,- is the depth at position i.

The depth d,- is ideally Poisson-distributed (Lander and
Waterman, 1988). However, most next-generation sequencers
and library preparation techniques can bias GC-rich areas of a
genome (Aird et al., 2011). This bias affects the observed depth in
speciﬁc areas. We model the depths as Poisson distributed about
a mean drawn from an independent Gamma distribution cen-
tered at the expected depth for that position, given its GC con-
tent. This models our uncertainty about the mean of the Poisson
distribution, arising from the dependence of the expected depth
on more than just the GC content at that position, including
‘hard stops’, and the GC content at nearby positions. It results
in an inﬁnite mixture of Poissons that is equivalent to a Negative
Binomial distribution.

We ﬁrst calculate for each of the following 100 ranges of
GC content, 0—1, 1—2, ..., 99—100%, the average observed
depth over positions in the assembly whose GC content
(calculated as the GC content within an average read length)
is within this range. Let adepthgi) be the average observed
depth for the GC content range in which X,- falls, where X,-
is the GC content percentage averaged across all reads that
map (in the placement step) to that position. If any adepthQ/i)
falls below a minimum value of 10, we use this minimum
value instead. This discounts regions of exceptionally low aver-
age depth. Then, at any given position i, the depth sub-score is
Pdepth(a'j|S, X i) = fooo Poisson(a’j; Y,)Gamma( Yi; max(10, adepthga), l)
a’Y, = NegBinom (a’j; max(10, adepth(XD),l/2).

2.2.4 k-mer Pkmer(S) oc P(S) describes the likelihood of the
assembly S, in the absence of any read information. Within
this prior probability distribution, we encode the belief that
within a single genome, each k-mer (a permutation of k base
pairs, where k is a ﬁxed user deﬁned number initially set to 4)
has a unique k-mer frequency. The 4" dimensional vector giving
this frequency for each k-mer is conserved across a genome and
can help determine if two different genomes have been mis-
takenly combined (Teeling et al., 2004; Woyke et al., 2006).
Let K be the set of all possible unique k-mers, so |K| = 4k, and
for each i in K let n,- be the number of times this k-mer appears in
a contig in the assembly. Then, the frequency f,- of a particular
k-mer i within a contig is f,- = n,/ 21.6 K nj. The k-mer score is the
product of this frequency over each k-mer appearing in each

contig of the assembly S, which can be written as
Pkme,(S) = HZ.er This is equivalent to assuming each k-mer
in the assembly is drawn independently from a common multi-
nomial distribution with probabilities empirically estimated from
the assembly.

This prior distribution does not account for horizontal gene
transfer, e.g. from phages, and thus may inappropriately ﬂag
such regions as being misassembled.

The k-mer sub-score of a base at any given position in the
assembly is the geometric average of Pkmer (S) of all k-mers
that cover that position. In calculating this average, the very
ﬁrst base in the genome only has one contributing k-mer, the
second has two, up to k contributing k-mers after h — 1 bases.

3 RESULTS

3.1 Performance on major types of misassemblies in a
genome assembly with synthetic data

Common assembly errors include single-base substitutions, inser-
tion/deletions, chimeric assemblies derived from translocations
or misjoins and copy number errors derived from repeat conden-
sation/expansions. To test ALE’s ability to detect such errors, we
generated synthetic reads from a reference genome and then
seeded the reference with each type of error. First, 400 000
pair-end synthetic reads were generated from the ﬁrst 350 Kb
at random positions of Escherichia coli K12 Substrain DH10B
(Durfee et al., 2008), with insert length normally distributed with
mean 200 b and standard deviation 7 b. Next, synthetic misas-
semblies were introduced at six locations within this reference.
The misassemblies introduced were a substitution, insertion, de-
letion, inversion, translocation and a copy number error, respect-
ively. We treated this mutated genome as the proposed assembly.

We tested ALE by aligning the aforementioned synthetic reads
to the proposed assembly using bowtie (Langmead et al., 2009)
and ran the results through the ALE software package. The ALE
plotter automatically thresholds each error and produces plots of
the sub-scores near each error (see the Supplementary Materials).
We found that ALE is able to locate each type of error in the
proposed assembly. At the genome level, as shown in Figure 2, at
least one of the four sub-scores drops dramatically in each region
containing a synthetic error and reports no false discoveries.
These results suggest that ALE systematically reports all major
types of errors with simulated data.

Furthermore, the total ALE score decreases, as more errors are
added to the assembly. As shown in Figure 3A, as the number of
substitution, insertion and deletion errors increases, the total ALE
score decreases monotonically, at a rate determined by the quality
scores of the data (see Section 2). This suggests that the total ALE
score indicates overall assembly accuracy.

3.2 Detecting chimeric assemblies in a synthetic
metagenome

One common assembly error in metagenome assemblies is a
chimeric assembly consisting of two or more genomes. To test
ALE’s ability to distinguish this type of metagenome-speciﬁc
error, we simulated a misassembled contig by joining sev-
eral pieces of two genomes in random order. This use of a

 

438

112 /810's113umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; pepeommoq

9IOZ ‘09 lsnﬁnv uo ::

ALE

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

A Average Likellhnuds {H.EU4? below threshold]
Place ,u t , -0.014ﬁ
-2|T - I | 41.03133
-4rr - « {2.052}:
-ﬁ:r - *{109401
'3 ,5, my... I... ﬁreman.“ “NW ...M MW' -0.C2{s2
E  - - lug:
"-_' -’:.r 1 Ill-Ill
IE -E.:r: II !_||.1 I
J 1
3 - _‘
u. Insert» L 2:49-"- ..4 s“ h ens-:- ~—-—=—*.::+ L-u—n * 4. ens-Is
g 12¢ - - [0.21
-4: - - {0.41)
-E|:r - - [0.51
r 4
Depth it: some?
.2.—.— {0.21
"II-n {0.41
-EIT Till-El
(I 50000 100000 150000 200000 2 5 0000 300000 350000
Pusltisn lbpl tum:-
B C
mg I E m 3 I J: Y z 5
G G U U

m. mum

 

 

1,. —n—-. ---'pr-ul- II '1 ...ur l '1'!

 

 

WWWM

 

 

 

W" WI 1W

. 1.| T.' 10.1”
rlsnnbp

 

 

 

 

 

sssunbp

 

 

 

...-.- -..,. .I I'll . ..,. .. .._.,....l.

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 1  NW;

1 .i . _ ‘
15050pr

 

 

 

 

 

 

 

ﬂail-00;: I

Fig. 2. The performance of ALE on synthetic errors in E. coli. At the genome level, at least one of the four sub-scores drops dramatically in each region
containing a synthetic error (A). A higher resolution view for each type is illustrated in (B—E). (B) Single-base substitution, deletion and insertion errors;
(C) an inversion error of length 200 b; (D) a transposition error of length 200 b; and (E) a copy number error of length 77 b. Diagrams above each plot
illustrate how each error was generated. Implementation details are within the image_maker.py script in the ALE code base

known, synthetic reference is required for testing ALE’s sensitiv-
ity to chimeric metagenomes in an unbiased way, as there are
no true metagenome references available. In these tests, the
k-mer score drops markedly at the interface of the two genomes
in the synthetic metagenome, as shown in the Supplementary
Fig. S1.

ALE relies on the k-mer sub-score (the default is k=4) to
distinguish contigs coming from different microbial species, as
tetra-nucleotide frequencies are a reliable species-speciﬁc signa-
ture (Teeling et al., 2004; Woyke et al., 2006). If a genome, or
contig, contains two or more distinct regions characterized by
different k-mer vectors, then the k-mer sub-score will be lower

 

439

112 /810'S[eumo [p.IOJXO'SOIJ‘BIHJOJUIOIQ/ﬂdllq 11101; pepeommoq

9IOZ ‘09 lsnﬁnv uo ::

S. Clark et aI.

 

ALE Score

 

— substitution
— deletion
inserﬁon

 

 

 

 

5 10
Number of Errors

Relative ALE Score

 

Staphylococcus Rhodobacter Human chr14

 

 

 

 

 

 

 

o o o a o o
e 8
8 8 ' . o 0 ABySS
3 ’ o AByssz
, . ' 0 Allpaths-LG
BambusZ
MSR-CA
. Reference
. SGA
. . SOAPdenovo
0 Velvet
o
O o o o o 3
Frag Jump Frag Jump Frag Jump

Fig. 3. ALE scores indicate overall assembly accuracy. (A) ALE scores monotonically decrease as the number of synthetic errors increase in an E. coli
genome assembly. (B) ALE scores correlate with the accuracy of assemblies of three genomes with two independent sequencing libraries. Frag: Short
fragment library. Jump: short jumping library. For each library, ALE scores from each assembly were scaled to [0, l] to get relative ALE scores

for the positions characterized by the less prevalent k-mer vector
(see Section 2). Because the other sub-scores are unaffected by
the mixture, the drop in total ALE score is owing to the lower
k-mer sub-score. This unique capability of ALE allows easy de-
tection of chimeric contig/scaffolds within a metagenome
assembly.

3.3 Discovery of real errors in a genome assembly using
real data

The aforementioned experiments used simulated reads or assem-
blies with simulated errors. Noise in real reads, and real errors in
genome/metagenome assemblies, often has a complex structure,
presenting an additional challenge to ALE. To test ALE using
real world assemblies with real reads, we chose a ﬁnished
genome, Spirochaeta smarga’inae DSM 11293, originally con-
structed from 454 and Illumina reads (Mavromatis et al., 2010)
and applied ALE to it using one lane of 2 x 76 paired-end
Illumina reads. The results are shown in the Supplementary
Fig. S2. At the genome level, ALE found ﬁve errors, including
a large 560 Kb region (3.91—4.48 Mb) in the proposed assembly
where the depth sub-score dropped below the threshold. We
found three areas producing errors that are likely due to repeat
condensation. For example, further examination of two regions
(408—415 Kb and 424141.247 Mb) by overlaying the Illumina
short read data indicates these regions have much higher se-
quence depth (2x) than neighboring regions and contain many
SNPs (two alleles of roughly equal ratio) (Supplementary Fig.
S2B and C), supporting the hypothesis that there are two copies
of these regions in this genome. The boundaries of these regions
also have abnormal placement and insert sub-scores, further sup-
porting the hypothesis that there are misassemblies at the afore-
mentioned locations.

To determine whether these errors identiﬁed by ALE are true
assembly errors or Illumina sequencing artifacts, we independ-
ently validated the results using Paciﬁc Biosciences (PacBio)
sequencing data. A total of 53 SMRT cells comprising 221 Mb
of mapped reads or 34 folds of coverage were aligned to the

assembly. Manual inspection of the resulting PacBio alignment
conﬁrms 5/5 assembly errors (Supplementary Fig. S2B and C),
suggesting the errors identiﬁed by ALE are true errors in the
assembly. The locations of these errors, and sub-score that
caused the violation, are given in the Supplementary Table S1.

3.4 Total ALE scores and genome assembly accuracy

Assemblies generated by eight different assembly protocols from
three datasets (Staphylococcus aureus, Rhodobacter sphaeroides
and Human chromosome 14) were selected from the GAGE
study (Salzberg et al., 2012) to evaluate how well ALE scores
reﬂect assembly accuracy. As a positive control, the reference
genome was evaluated in parallel with the other assemblies.
For all three genomes, Illumina sequencing data from both a
short fragment and a short jumping library were used to generate
ALE scores. Total ALE scores were generated for each assembly
and each library as described previously. Results are shown in
Figure 3B.

Although that there is no quantitative measurement of assem-
bly accuracy (other than ALE itself) for use in validation, the
GAGE study did indicate the AllPaths-LG and SOAPdenovo
usually give more accurate assemblies. In addition, the reference
genome should represent an assembly with best quality. As
shown in Figure 3B, ALE scores are consistent with these no-
tions. Among all the assemblies, ALE scores consistently indicate
the reference genomes are the best assemblies, and assemblies
from AllPaths-LG and SOAPdenovo consistently have better
ALE scores than those from other assemblers.

3.5 Sensitivity to single nucleotide variations in real data

We tested ALE’s ability to detect single base errors in real data
from a resequencing project. In this project, one lane of Illumina
36 x 2 paired reads was generated from a new strain of R. sphaer-
oides 2.4.1 (Choudhary et al., 2006) with an insert length of 200 b
covering the genome with an average coverage depth of 557. This
genome has a high GC content (68%) and contains 336 hard
stops and many more low depth regions. A hard stop is a region

 

440

112 /810's113umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; pep1201umoq

9IOZ ‘09 lsnﬁnv uo ::

ALE

 

where a bias in the sequencer causes it to report 0 depth (no
reads) without any read pairs spanning the region. Because
low-coverage regions make single nucleotide variation (SNV) de-
tection less reliable for many SNP detectors (\Nang et al., 2011),
we excluded such regions and manually compiled a reference set
of 222 possible SNVs for this strain (176 from Chromosomel,
length 3.2 Mb; 46 from Chromosome2, length 0.94 Mb). The
placement sub-score was then computed using the aligned reads.

To enumerate the positions that ALE found to detract the
most from the assembly’s probability of correctness, we sorted
the placement sub-scores for each chromosome. The 0.0001%
worst scoring positions (219 regions) on Chromosomel are
within a read length of 154 of the 176 variants (88%), and the
top 0.0005% worst positions (977 regions) are within a read
length of >97% of the variants. The same experiment for
Chromosome2 recovers 87% (40 of 46 variants from 63 regions)
and 96% (from 309 regions), respectively. This shows that the
positions at which the proposed assembly differs from the gen-
ome generating the reads are among the positions with the worst
sub-scores. The regions with poor sub-scores that do not corres-
pond to the variant list are other regions of the assembly unsup-
ported by the read evidence, such as hard stops regions of low
coverage that stem from the bias of the sequencer. This shows
that ALE can locate regions unsupported by the read evidence,
including SNVs, and that ALE accurately gauges assembly ac-
curacy at single base resolution.

3.6 ALE’s sensitivity and speciﬁcity

Six assemblies of S. aureus were selected (Salzberg et al., 2012) to
evaluate ALE’s ability to detect assembly errors Figure 4, leaving
out an assembly from SGA because it was too fragmented. To
compile a reference set of assembly errors, each assembly is
aligned to the reference genome using nucmer as described in
Salzberg et al. (2012). Misassemblies were approximated by the
alignment breaks, as most misassemblies will generate one or
more breaks in the alignment (referred as NUCMER—Break).
Gaps in the assemblies were excluded from consideration, as
they do not necessarily represent assembly errors. Scaffolds
that are smaller than 1 Kb were also excluded. Single-base dif-
ferences were obtained by the show-snps command of the
MUMmer package (referred to as NUCMER—SNV).

To obtain a list of regions identiﬁed by ALE as potentially
containing errors, ALE per-base insert and placement scores
were computed using a short fragment library against each of
the six assemblies. Depth scores were not used, as Illumina
sequencing data tends to be noisy. At each ALE score cutoff,
the top-ranked bases were selected, and adjacent bases were
merged into regions. If a region/base contained a
NUCMER—SNV, or was within +/—50 bases centered at a
NUCMER—Break, it was classiﬁed as a true positive for
NUCMER—SNV or a NUCMER-Break, respectively.
Otherwise, it was classiﬁed as ‘Novel’. ALE can capture 15—
70% of the break points at a stringent threshold (top 1000,
Fig. 4A) among the six assemblies. At the same threshold,
40—78% of the ALE calls are classiﬁed as novel. These ‘novel’
sites are not necessarily false positives. As shown in Figure 4B,
many of the ‘novel’ sites are actually SNPs, supported by the
underlying short read data (colored vertical bars in the coverage

track). Currently, ALE does not distinguish real SNPs from false
positives.

3.7 ALE’s performance with PacBio RS data

The aforementioned experiments were all performed with next
generation short read data. Currently, the PacBio sequencing
platform, also referred to as third-generation sequencing, is
becoming increasingly popular owing to its long read length
(up to several Kb) (Eid et al., 2009). These long reads are ex-
pected to greatly reduce the complexity associated with genome
assembly validation. In contrast with second-generation sequen-
cing, single-molecule—based PacBio RS sequencing has a much
higher base error rate (~15%), making it an ideal candidate for
testing the robustness of ALE against very noisy data. With this
purpose, we examined the reference genome of Lambda Phage
and corresponding PacBio reads of average depth 548x and a
randomly sampled set at 50X. To determine ALE’s performance
on this dataset, the reference genome was synthetically mutated
by adding 12 substitution, insertion and deletion errors at vari-
ous locations (Supplementary Table S2). At 548x depth, within
the top 12 worst placement sub-scores, ALE recovered all 12
errors at the mutated positions, while reporting no false positives.
At 50X depth, excluding the low coverage edges, the 12 errors
were detected in the top 14 worst placement sub-scores, with 2
false positives. In comparison, the standard Paciﬁc Biosciences
variant caller, EviCons, correctly identiﬁed only 10 of these
errors with low conﬁdence at default settings and the full 548x
depth. This shows that ALE is a robust measure of assembly
accuracy with noisy sequencing data and is a generic framework
that can be used with both short and long sequence read
technologies.

4 DISCUSSION

ALE facilitates the rapid discovery of many types of errors in
genome assemblies including metagenomes. It does this by apply-
ing a rigorous statistical model, calculating the likelihood of
observing a speciﬁc assembly, given the reads that were used to
generate it, and calculating the contribution to this likelihood
from each position in the assembly. This allows ALE to deter-
mine speciﬁc regions within a proposed assembly that are poorly
supported by the reads. By integrating several aspects of the as-
sembly and the reads, including k-mer composition, sequence
depth, insert length and how well individual bases map, ALE
is able to ﬁnd errors as small as a single substitution error or
indel, as well as large copy number errors and chimeric metagen-
ome assemblies.

This framework can serve as a guide in optimizing genome
assemblies in the following two ways. First, total ALE scores
can be used to identify the best assembly from those generated
by different assembly protocols. Second, by modifying the re-
gions in which ALE reports low sub-scores, more accurate gen-
omes can be constructed. The space of possible corrections to an
input genome is too large to allow the current implementation of
ALE to be used as an independent assembler, but it could be
used to compare and combine the results from different assem-
blers and produce an assembly that is most likely to be correct.
ALE could also be used to present an alternative method for

 

441

112 /810's113umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; pep1201umoq

9IOZ ‘09 lsnﬁnv uo ::

S. Clark et al.

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

lllll II |
I III |||| II |

A Break sensitivity Novel
100 ' ' ' 100 ' '
80 ' '
8 8
s 60 - s
C C
8 K s
a 40 < ' a
o. o.
20 -/ -
00 1000 2000 3000 4000 5000 O0 1000 2000 3000 4000 5000
ALE Top Scores ALE Top Scores
ABySS AllPaths—LG — SOAPdenovo
ABySSZ MSR-CA Velvet
B velvetﬁs
000 hp
H.000 hp I 00.000 hp I 00,100 hp I 00,200 hp I 00,300 hp I 00,400 hp I 00.000 hp I 00,000 hp I 00.3'00 hpl 00,000 hp
 I I I I IIII I Illll I II I II IIIIII I
NUCMER-Breaks ' '
 I I III III I II I IIII III II III I I I II I I Illl I IIIIIIIIIIIIIIIIIIIIEIII IIIIIEIJIIIIEIIHIII IIIIII D IIII I I
Placement - -- urm - u HIT"- n -- I ll 11 - r ---r--.----.r--.-.--------.-1----n “m "WI--
Inseri W
Depth v —“
[u - 25?]
CUVEI'EQE . .... .n I II I III“ LI_| II III I II II I I III III I   I IIIIIIIII u... .m... I mu u:
I I I II |I||| llllllI I IIII
“HIIII IIIIIHjj ‘ l j H l I I III III] I H II  IIII
IIIIII I III III  I I III jl l |||||||||  III II II
| ‘ l-llll II II I III III II I  II ‘H‘I I III II |:|: II=III:I: :II I” I I III II II |
  I Illl III I II I IIIII III I III I II I II I | l I I II II” “I l
' 'llllll I I. I. lllll I    '  'I
- I III I H  III I‘ II I i I I I ll IIHI- HI IIIIIII
I

Fig. 4. ALE identiﬁes regions with potential assembly errors. (A) Cumulative plots showing the percentage of assembly errors detected by ALE at
different sensitivity thresholds. Detected assembly break points (break sensitivity), and novel calls (novel) at different ALE insert or placement thresholds
(ALE Top Scores) for six assemblies of Staphylococcus using six different assemblers are shown. (B) A snapshot from Integrative Genomics Viewer for a
scaffold from the velvet assembly of Staphlococcus. In the track Coverage, the height represents sequencing depth, and vertical colored bars represent
potential SNPs. In the track Raw Reads, each gray horizontal bar represents a high quality aligned read, whereas horizontal color bars represent reads
that may indicate problems (e.g. insert size is too big or too small). Vertical color bars are bases different from the reference sequence. More detailed
description can be found at: http://www.broadinstitute.org/igv/AlignmentData

calculating assembly accuracy in local assembly algorithms such
as Genovo (Laserson et al., 2011).

When used with a reference genome and resequencing data,
ALE can discover structural variations. As shown in the cases of
Spirochaeta smaragdinae and R. sphaeroides, ALE readily detects
structural variations whose sizes vary from a single base to sev-
eral hundred kilobases.

ALE currently does not classify the type of assembly errors.
Future work is needed to determine the proﬁle of each type of
assembly errors in a dataset-speciﬁc manner. Once ALE has this
capability, it could guide an auto-correction algorithm to auto-
matically ﬁx problematic regions.

The effectiveness of ALE is inﬂuenced by the quality of its
input: the read data and the alignments of those reads onto the

 

442

112 /310's113umo [p.IOJXO'SOIIBIIIJOJUIOIQ/ﬁdllq 11101; pep1201umoq

9IOZ ‘09 lsnﬁnv uo ::

ALE

 

proposed assembly. Data with biased content or alignments,
while accepted by ALE, tend to produce noisy sub-scores. The
robustness of ALE, however, allows for the recovery of an ac-
curate assembly accuracy measure as long as the random noise is
consistent with the statistical model used by ALE (see Section 2).

The effectiveness of ALE is also inﬂuenced, like any Bayesian
method, by the modeling assumptions implicit in its prior and
likelihood. ALE’s prior relies on the species-speciﬁc signature
provided by tera—nucleotide frequencies (Teeling et al., 2004;
Woyke et al., 2006), which enhances ALE’s ability to detect con-
taminants from single genome assemblies and cross-assembly of
genomes from related species, but may also lead to false positives
in regions of horizontal gene transfer. Additionally, the insert
score assumes that insert lengths are normally distributed,
whereas other distributions may work better for some libraries.
Future work could use an insert length distribution estimated
non-parametrically from the data.

ALE could also be extended in future work to account for other
factors that may currently lead to false positives, like origin of
replication bias prevalent in circular genomes, horizontal gene
transfer, automatic detection of sequencer bias and other distribu-
tions for insert length and coverage depth. Biases such as hard
stops in Illumina could potentially be found by examining unlikely
distributions of read orientation at speciﬁc locations coupled with
low depth. Speciﬁc signatures within the different ALE metrics
could be used to classify and correct for speciﬁc biases, much as
ALE currently corrects for GC content (see Section 2).

ACKNOWLEDGEMENTS

The authors would like to thank Wendy Schackwitz for provid-
ing the Rhodobacter resequencing data and curated variants as
well as Alicia Clum for assisting in the Spirochaeta data analysis.
The authors would also like to thank the J GI Genome
Technology Group for the use of their sequence data and expert-
ise and Matthew Blow, Alex Copeland and Aleah Caulin for
helpful edits and suggestions.

Funding: S.C. was supported by a Computational Science Graduate
Fellowship, from the Ofﬁce of Science of the US. Department of
Energy under Contract No. DE—FG02-97ER25308. S.C. was also
supported by a Startup and Production Allocation Award from the
National Energy Research Scientiﬁc Computing Center (NERSC)
of the Ofﬁce of Science of the US. Department of Energy under
Contract No. DE-AC02-05CH11231. The work conducted by the
Department of Energy Joint Genome Institute was supported in
part by the Ofﬁce of Science of the US. Department of Energy
under Contract No. DE-AC02-05CH112 and No. DE—AC02—
05CH11231 (cow rumen metagenomics data analysis and inform-
atics). P.F. was supported by Air Force Ofﬁce of Scientiﬁc Research
FA9550-12-1-0200.

Conﬂict of Interest: none declared.

REFERENCES

Aird,D. et al. (2011) Analyzing and minimizing bias in Illumina sequencing libraries.
Genome Biol., 12, R18.

Choi,J.H. et al. (2008) A machine learning approach to combined evidence
validation of genome assemblies. BM C Bioinformatics, 24, 744—750.

Choudhary,M. et al. (2006) Genome analyses of three strains of Rhodobacter
sphaeroides: evidence of rapid evolution of chromosome II. J. Bacteriol., 189,
1914—1921.

Darling,A. et al. (2011) Mauve assembly metrics. Bioinformatics, 27, 2756—2757.

Durfee,T. et al. (2008) The complete genome sequence of Escherichia coli DH10B:
insights into the biology of a laboratory workhorse. J. Bacteriol., 190,
2597—2606.

Earl,D. et al. (2011) Assemblathon l: a competitive assessment of de novo short
read assembly methods. Genome Res., 21, 2224—2241.

Eid,J. et al. (2009) Real-time DNA sequencing from single polymerase molecules.
Science, 323, 133—138.

Fujimoto,A. et al. (2010) Whole-genome sequencing and comprehensive variant
analysis of a Japanese individual using massively parallel sequencing. Nat.
Genet., 42, 931—936.

Haiminen,N. et al. (2011) Evaluation of methods for de novo genome assembly
from high-throughput sequencing reads reveals dependencies that affect the
quality of the results. PLoS ONE, 6, e24182.

Hess,M. et al. (2011) Metagenomic discovery of biomass-degrading genes and gen-
omes from cow rumen. Science, 331, 463—467.

Iverson,V. et al. (2012) Untangling genomes from metagenomes: revealing an un-
cultured class of marine euryarchaeota. Science, 335, 587—590.

Kent,J.W. et al. (2002) The human genome browser at UCSC. Genome Res., 12,
996—1006.

Lander,E.S. and Waterman,M.S. (1988) Genomic mapping by ﬁngerprinting
random clones: a mathematical analysis. Genomics, 2, 231—239.

Langmead,B. et al. (2009) Ultrafast and memory-efﬁcient alignment of short DNA
sequences to the human genome. Genome Biol., 10, R25.

Laserson,J. et al. (2011) Genovo: de novo assembly for metagenomes. J. Comput.
Biol., 18, 429—443.

Li,H. et al. (2009) The sequence alignment/map (SAM) format and SAMtools.
Bioinformatics, 25, 2078—2079.

Li,R. et al. (2010) De novo assembly of human genomes with massively parallel
short read sequencing. Genome Res., 20, 265—272.

Lin,Y. et al. (2011) Comparative studies of de novo assembly tools for
next-generation sequencing technologies. Bioinformatics, 27, 2031—2037.

Mavromatis,K. et al. (2010) Complete genome sequence of Spirochaeta smaragdi-
nae type strain. Stand. Genomic Sci., 3, 136—144.

Meader,S. (2010) Genome assembly quality: assessment and improvement using the
neutral indel model. Genome Res., 20, 675—684.

Metzker,M.L. (2010) Sequencing technologies - the next generation. Nat. Rev.
Genet., 11, 31—46.

Narzisi,G. and Mishra,B. (2011) Comparing de novo genome assembly: the long
and short of it. PLoS One, 6, el9l75.

Nicol,J.W. et al. (2009) The integrated genome browser: free software for distribu-
tion and exploration of genome-scale datasets. Bioinformatics, 25, 2730—2731.

Phillippy,A. et al. (2008) Genome assembly forensics: ﬁnding the elusive
mis-assembly. Genome Biol., 9, R55.

Pop,M. (2009) Genome assembly reborn: recent computational challenges. Brief
Bioinform, 10, 354—366.

Qin,J. et al. (2010) A human gut microbial gene catalogue established by
metagenomic sequencing. Nature, 464, 59—65.

Salzberg,S.L. et al. (2012) GAGE: a critical evaluation of genome assemblies and
assembly algorithms. Genome Res., 22, 557—567.

Schmutz,J. et al. (2010) Genome sequence of the palaeopolyploid soybean. Nature,
463, 178—183.

Teeling,H. et al. (2004) Application of tetranucleotide frequencies for the assign-
ment of genomic fragments. Environ. M icrobiol., 6, 938—947.

Vezzi,F. et al. (2012) Feature-by-feature—evaluating de novo sequence assembly.
PloS One, 7, e31002.

Wang,W. et al. (2011) Next generation sequencing has lower sequence coverage and
poorer SNP-detection capability in the regulatory regions. Sci. Rep, 1, 55.
Woyke,T. et al. (2006) Symbiosis insights through metagenomic analysis of a

microbial consortium. Nature, 443, 950—955.

Woyke,T. et al. (2010) One bacterial cell. One complete genome. PLoS One, 5, e103l4.

Wu,D. et al. (2009) A phylogeny-driven genomic encyclopaedia of Bacteria and
Archaea. Nature, 462, 1056—1060.

Yilmaz,P. et al. (2011) Minimum information about a marker gene sequence
(MIMARKS) and minimum information about any (x) sequence (MIxS)
speciﬁcations. Nat. Biotechnol, 29, 415—420.

Zimin,A.V. et al. (2008) Assembly reconciliation. BM C Bioinformatics, 24, 42—45 .

 

443

112 /310's113umo [progxo'sor1em10}urorq//:d11q 11101; pep1201umoq

9IOZ ‘09 lsnﬁnv uo ::

