Bioinformatics Advance Access published June 26, 2016

Bioinformatics, 2016, 1—2

doi: 10.1093/bioinformatics/btw354

Advance Access Publication Date: 16 June 2016
Applications Note

 

 

Data and text mining

MultiQC: summarize analysis results for
multiple tools and samples in a single report

Philip Ewels1'*, Mans Magnussonz, Sverker Lundin3 and Max Kéailler3

1Department of Biochemistry and Biophysics, Science for Life Laboratory, Stockholm University, Stockholm 106 91,
Sweden, 2Department of Molecular Medicine and Surgery, Science for Life Laboratory, Center for Molecular
Medicine, Karolinska Institutet, Stockholm, Sweden and 3Science for Life Laboratory, School of Biotechnology,
Division of Gene Technology, Royal Institute of Technology, Stockholm, Sweden

*To whom correspondence should be addressed.
Associate Editor: Jonathan Wren

Received and revised on April 30, 2016; accepted on May 29,2016

Abstract

Motivation: Fast and accurate quality control is essential for studies involving next—generation
sequencing data. Whilst numerous tools exist to quantify QC metrics, there is no common ap—
proach to flexibly integrate these across tools and large sample sets. Assessing analysis results
across an entire project can be time consuming and error prone; batch effects and outlier samples

can easily be missed in the early stages of analysis.

Results: We present MultiQC, a tool to create a single report visualising output from multiple tools
across many samples, enabling global trends and biases to be quickly identified. MultiQC can plot
data from many common bioinformatics tools and is built to allow easy extension and customization.
Availability and implementation: MultiQC is available with an GNU GPLV3 license on GitHub, the
Python Package Index and Bioconda. Documentation and example reports are available at

http://multiqc.info
Contact: phil.ewels@scilifelab.se

 

1 Introduction

Advances in next—generation sequencing are leading to an avalanche
of data. Whilst opening doors to new analysis types and experimen—
tal designs, expanding sample numbers make studies increasingly
vulnerable to confounding batch effects (Leek et 61]., 2010; Meyer
and Liu 2014; Taub et 61]., 2010). Such biases are often subtle and
difficult to detect and require careful quality control measures.

Most bioinformatics programs produce logs detailing their
results. Dedicated QC tools such as FastQC (http://www.bioinfor
matics.babraham.ac.uk/projects/fastqc), Qualimap (Okonechnikov
et 61]., 2015) and RSeQC (Wang et 61]., 2012) are excellent at high-
lighting potential problems in data. However, nearly all of these logs
and reports are produced on a per—sample basis, requiring the
user to find and compile QC results. This process is time consuming,
repetitive and complex, making it prone to errors.

MultiQC addresses this problem by scanning given analysis
directories for log files and QC reports, creating a single summary

report visualizing results across all samples. Collecting data within a
single report provides a fast way to scan key statistics quickly and
easily (Fig. 1). Shared plots allow accurate comparison between
samples, allowing detection of subtle differences not noticeable
when switching between different files. Data visualization aids batch
effect detection and minimizes the risk of confounding factors affect—
ing the results of the study. MultiQC is the first tool of its type
within the field; it has the potential to greatly improve quality con—
trol and reporting for researchers involved in next—generation
sequencing, removing the need for custom comparative scripts.

2 Materials and methods
2.1 Running MultiQC

MultiQC is written in Python and run on the command line; speci-
fied directories are searched recursively for any recognized files.
Submodules for each supported tool are run, querying input files

©The Author 2016. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journalspermissions@oup.com 1
This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits

unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /310's113u1no [p.IOJXO'SOilBIIHOJUTOTQ/ﬁdllq 11101; prBOIIIAAOG

9IOZ ‘09 lsnﬁnv uo ::

P. Ewe/s et al.

 

MultiQC:

A modular tool to aggregate results from bioinformatics analyses across many samples into a single
report.

Toolbox

Report generated on 2015-09-24. 09:09 based on data in lUsers/philewels/DesktoleuItiQC_testing/slar/data

Report location: ' ,reporthiml

General Statistics showKey

Sample Name % Assigned M Assigned % Mapped M Mapped Trimmed % Dups % G0 Length M Seqs

SRR106750371 2.4% 0.9 63.2% 19.3 2.1% 12.9% 44% 35 30.5
SRR106750571 7.4% 1.5 79.1% 14.2 3.5% 7.8% 47% 35 18.0
SRR1067510_1 1.1% 0.6 50.6% 17.4 2.0% 11.4% 40% 35 34.3
SRR1 06751 4_1 5.7% 1.9 70.2% 23.6 3.1% 6.6% 44% 35 33.6
SRR106751971 3.2% 0.9 81.1% 19.9 2.3% 5.5% 42% 35 24.6

SRR106752271 1 .4% 0.7 61 .8% 22.0 1 5% 13.3% 40% 36 35.7

Fig. 1. Top of a typical MultiQC report. The general statistics table can be
seen with metrics from a number of different tools gathered for each sample

using configurable search settings. If any log files are found they are
parsed, otherwise the module exits silently. Once all submodules
have finished, the specified template is loaded and parsed using the
jinjaZ package to render the final report. Parsed data is saved as tab
delimited text, YAML or JSON for downstream use. Because sub—
modules only contribute to the report if they find logs, MultiQC is
run in the same way for every analysis type. At the time of writing,
MultiQC supports 22 common bioinformatics tools including align-
ers, processing tools and QC programs.

2.2 MultiQC reports

MultiQC generates a single s elf—contained HTML report which can
be shared and opened in any modern web browser. Reports render
plots using the JavaScript plotting library HighC/oarts (http://www.
highcharts.com). Plots are resizeable and interactive, some with click
and drag zooming. Samples can be renamed, hidden and highlighted
using a report toolbox. Plots can be exported in a range of
publication—ready formats.

Reports with hundreds of samples become too large for use with
HighCharts; instead MultiQC switches to rendering plots as images
at run—time using the Python plotting library MatPlotLib (Hunter,
2007). Images are embedded within the HTML, maintaining a
stand—alone file with consistent file size. These static reports are also
suitable for conversion to PDF using tools such as Pandoc (http://
pandoc.org).

Each report contains an interactive walk through of features.
Tutorial videos can be found at http://multiqc.info along with tutor—
ials and documentation describing installation, usage and
troubleshooting.

2.3 Extending MultiQC

MultiQC supports a lot of common bioinformatics tools but it is
inevitable that research groups may have their own bespoke scripts
or require other customization. To accommodate this, MultiQC is
built in such a way that custom code can be tied into its functional—
ity easily. Code hooks allow external plugins to access and modify
the internal workings of the program. The use of Python setuptools
entry points allows modules, templates and plugins to be kept
within a separate code base, whilst still executing as part of the
main MultiQC program.

Extensive documentation makes adding to MultiQC simple; four
new modules have been contributed by users to date and we are
aware of at least three plugins written by different research groups.
Adoption by the bioinformatics community has been rapid:
MultiQC has been downloaded thousands of times within the past
few months and is already integrated as standard within the popular
bcbio—nextgen analysis toolkit (http://bcb.io).

3 Typical applications

3.1 Single cell data and population studies

Single cell and population studies are perhaps the perfect examples
of large projects where accurate quality control of numerous data—
sets is critical. MultiQC is able to parse data for thousands of sam—
ples within minutes, adapting report output as required. Parsed data
saved by MultiQC can be used for post—processing and dataset filter—
ing. Reports reveal overall analysis success and make it easy to iden—
tify abnormal samples.

3.2 Sequencing facilities

MultiQC was originally developed for use in a high throughput
sequencing facility. Reports give the overview required to spot fail—
ing samples and highlighting helps to identify groups of samples
behaving in an irregular manner.

Plugins allow integration with in—house systems: we have written
the MultiQ C_N GI plugin which inserts meta data from our LIMS into
reports and stores summary results parsed by MultiQC in our data—
base. This functionality is enormously powerful, facilitating large scale
internal data collection that would otherwise require numerous custom
scripts. Templates allow report branding and reports are self—
contained, making MultiQC an ideal tool for creating delivery reports.

4 Conclusion

As the field of next—generation sequencing matures, there are
increasing numbers of bioinformatics tools producing ever more ver—
bose descriptions of data. Integrating these statistics across tools
with large sample sets is difficult and time—consuming. MultiQC can
automate the parsing of this metadata, providing powerful visual—
izations with a simple interface. Extension and data export allow
MultiQC to function as a central collection point at the terminus of
analysis pipelines. Routine use can aid quality control steps early on
in data processing, reducing risk of batch effects and other down—
stream analysis problems.

Acknowledgements

The authors would like to thank D. Klevebring, L. Pantano, G. Carrasco and
R. Andeer for contributed modules and discussion.

Funding

This work was supported by the Science for Life Laboratory and the National
Genomics Infrastructure, NGI.

Conﬂict of Interest: none declared.

References

Hunter,].D. (2007) Matplotlib: A 2D Graphics Environment. Comput. Sci.
Eng., 9, 9095.

Leek,].T. et al. (2010) Tackling the widespread and critical impact of batch ef-
fects in high-throughput data. Nat. Rev. Genet., 11, 733739.

Meyer,C.A. and Liu,X.S. (2014) Identifying and mitigating bias in next-
generation sequencing methods for chromatin biology. Nat. Rev. Genet.,
15, 709721.

Okonechnikov,K. et al. (2015) Qualimap 2: advanced multi-sample quality
control for high-throughput sequencing data. Bioinformatics, 32, 292—294.

Taub,M.A. et al. (2010) Overcoming bias and systematic errors in next gener-
ation sequencing data. Genome Med., 2, 87.

Wang,L. et al. (2012) RSeQC: quality control of RNA-seq experiments.
Bioinformatics, 28, 21845.

112 /310's113u1no [p.IOJXO'SOilBIIHOJUTOTQ/ﬁdllq 11101; pepBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

