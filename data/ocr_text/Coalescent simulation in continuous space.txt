APPLICATIONS NOTE

Vol. 29 no. 7 2013, pages 955—956
doi:10. 1093/bioinformatics/btt067

 

Genetics and population analysis

Advance Access publication February 7, 2013

Coalescent simulation in continuous space

Jerome Kelleher1 ’*, Nicholas H. Barton2 and Alison M. Etheridge3

1Institute of Evolutionary Biology, University of Edinburgh, King’s Buildings, West Mains Road, EH9 3JT, UK, 2Institute of
Science and Technology, Am Campus |, A—34OO Klosterneuberg, Austria and 3Department of Statistics, University of

Oxford, 1 South Parks Road, Oxford OX1 3TG, UK

Associate Editor: Jeffrey Barrett

 

ABSTRACT

Coalescent simulation has become an indispensable tool in population
genetics, and many complex evolutionary scenarios have been incor-
porated into the basic algorithm. Despite many years of intense interest
in spatial structure, however, there are no available methods to simu-
late the ancestry of a sample of genes that occupy a spatial continuum.
This is mainly due to the severe technical problems encountered by the
classical model of isolation by distance. A recently introduced model
solves these technical problems and provides a solid theoretical basis
for the study of populations evolving in continuous space. We present
a detailed algorithm to simulate the coalescent process in this model,
and provide an efficient implementation of a generalized version of this
algorithm as a freely available Python module.

Availability: Package available at http://pypi.python.org/pypi/ercs
Contact: jerome.kelleher@ed.ac.uk

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on November 16, 2012; revised on January 30, 2013;
accepted on February 5, 2013

1 INTRODUCTION

The extinction/recolonization model (or spatial A-Fleming-Viot
process) is a recently introduced model (Etheridge, 2008) that
captures the dynamics of populations evolving in a spatial con-
tinuum (Barton et al., 2010a,b). The model solves long-standing
problems (F elsenstein, 1975) with the classical models of isola-
tion by distance WV right, 1943; Malécot, 1948) and has the
potential to explain key biological facts that cannot be captured
by simple diffusion (Barton et al., 2010b).

In this model, each individual occupies a ﬁxed location in
continuous space and all movement and reproduction happen
as the consequence of extinction/recolonization events. Events
fall randomly throughout space, independent (crucially) of the
location of extant individuals. At an event, some fraction of the
individuals nearby die, to be replaced by the offspring of a small
number of parents chosen from the nearby population immedi-
ately before the event. Events at different scales model the effects
of life history and demography. For example, the regular repro-
duction of individuals may be modelled by means of small and
frequent events in which a few individuals in a local area die and
are replaced by the progeny of nearby parents. On the other
hand, broad-scale mortality events can affect a substantial

 

*To whom correspondence should be addressed.

fraction of the population over the entire species range. See
Barton et al. (2013) for an extensive review of the model, its
applications and background.

2 SINGLE LOCUS ALGORITHM

The coalescent process for the extinction/recolonization model at
a single locus is straightforward (Barton et al., 2010b), and we
describe a detailed algorithm to simulate this process in this sec-
tion. In the interest of simplicity, here we restrict ourselves to a
single class of event from the disc model (Barton et al., 2010a) in
which events have a ﬁxed radius r; within these discs, a single
parent is chosen uniformly and individuals die with probability u.

The algorithm is described in terms of oriented trees (Knuth,
2011, p. 461). In an oriented tree, parent—child relationships are
important but the order of children at a node is not. This infor-
mation is encoded as a sequence In . . .zrn, where m is the parent
of node j and node j is a root if 79 = 0. Oriented trees have
several advantages over more traditional approaches to encoding
genealogies such as nested parentheses or linked structures. They
provide a concise and elegant means of describing genealogies,
are trivial to store and parse, and can be annotated with add-
itional information without effort. Finally, as oriented trees are
simple lists of integers, we can describe coalescent algorithms
precisely and without ambiguity.

Let RU(A) be an element of the set A chosen uniformly at
random, and let REG.) be an exponentially distributed random
value with rate A. Also, let B(z, r, L) deﬁne a disc of radius r
centred at z on a 2D torus of diameter L, and let Q denote the
null point.

Algorithm S (Single locus coalescent). Simulate the ancestry (It, I) of indi-
viduals sampled at locations x1 ...x,, at time t: 0 under a model in
which events with radius r and impact u occur at rate A on a 2D torus
of diameter L.

S1 [Initialization] Set nj <— 0, t]- <— 0 and xj <— Q for 1 5 j < 2n. Then
set Xj <—xj for 151's n and set S <—{j|15j5 n}. Finally, set
n<—n+1andt<—0.

sz [Event] Set 1 <— x+ mo) and z <— Rqu, L)2).

S3 [Birth.] Set C <— 0. For each j E S, if Xj e B(z, r, L) and
RU([0,1))<u, set C <— CU {j}. Afterwards, if |C| = 0, go to S2;
else, if |C| = 1, go to S4; otherwise, go to SS.

S4 [One lineage jumps] Let C = {1'}, set xj <— RU(B(Z, r, L)) and go
back to S2.

S5 [Coalescence] For each j e C, set nj <— n. Then, set 1,, <— t,
X" <— RU(B(Z, r, L)), S <— (S\ C) U {n} and n <— 1; + 1. Finally, if
|S|> 1, go back to S2.

 

© The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 955

112 [3.10811211an[plOJXO'SODBIIIJOJIIIOIQ/[idllq IIIOJJ pepeolumoq

910K ‘09 lsnﬁnV no :2

J.Kelleher et al.

 

Algorithm S operates by mapping individuals in the sample to
the integers 1 5 j 5 n and those ancestral to the sample to inte-
gers greater than n. The set S contains the lineages ancestral to
the sample at time t, and we proceed backwards in time
event-by-event. Because most events will not hit any lineages,
the majority of the time spent in the algorithm is looping quickly
around steps S2 and S3. Occasionally, a single lineage will be hit,
we execute step S4 and move the lineage to a new location. Very
rarely, an event hits more than one lineage, and C is the set of
lineages born from a single parent. Thus, in step S5 we set the
parent of each lineage in C to be 17 and the location of n to a
random point within the ball deﬁning the event. We then record
that lineage 17 entered the sample at time t by setting In to t.
Finally, we remove the children born in this event from the
sample (as we are no longer interested in them) and insert 17
into the sample (as we are interested in its further history).
This process continues until there is one individual in the
sample, and (It, I) describes the full history of the sample.

3 MULTILOCUS ALGORITHM

The single locus model is extended to incorporate recombination
by letting each individual in the sample consist of multiple loci
and allowing for multiple parents in events, so that a given indi-
vidual may descend from different parents at different loci.
Speciﬁcally, we consider a model in which each individual has
m linearly arranged loci and there are 1) parents at each event.
(In sexually reproducing species, 1) = 2 in small-scale reproduc-
tion events. We must consider the possibility of more than two
parents in large-scale events, as several generations may elapse
before the local area is repopulated.) For each child in an event,
there is a probability ,Og that loci 1i and Z + 1 are inherited from
different parents. See Etheridge and Véber (2012) for more
details.

Simulating this multilocus coalescent follows the same pattern
as Algorithm S: we begin with a sample of n lineages and proceed
event-by-event until the ancestry of the sample is complete, and
we have a pair (It, I) describing the history at each locus. The
sample S is most conveniently represented as a set of (location,
ancestry) tuples (x, a1 . . . am). Each sequence a1 . . . am represents
the ancestry of a lineage such that (lg 75 0 if there is genetic ma-
terial ancestral to the sample present in this lineage at locus 1i and
(lg = 0 otherwise (Hudson, 1983). Termination of the algorithm
is controlled by maintaining the invariant

K: E 2 [(1,790].

(x, a)eS15Z5m

Thus IC 2 nm initially, and the algorithm terminates when IC = m,
indicating that all loci have coalesced.

Suppose that C is the set of lineages born in an event. We
must ﬁrst decide which children descend from which parent at
each locus. To do this, we ﬁrst set 8m <— B for 1 5 k 5 v and
1 5 1i 5 m. Then, for each child lineage a1 . . . am e C we choose a
parent for the ﬁrst locus by setting k <— RU({1, . . . , v}). We then

iterate over each locus 1 5 1i 5 m, and if (lg 75 0 (that is, there is
ancestral material at this locus), we set 8m <— (Skag U {ag}.
Then, with probability ,Og, a recombination event occurs and
we choose a new parent for the next locus by setting
k <— RU({1, ...,v} \ {k}).

Having completed the task of deciding which children have
descended from which parents, we must generate the new paren-
tal ancestry sequences and update the genealogies and node
times. This is accomplished by examining the sets of descendants
8H for each parent k at locus 1i and proceeding in the same
manner as algorithm S, updating 7t, 1' and n for each locus as
appropriate.

This algorithm is far from optimal and can be improved in
many ways to improve performance, particularly in special cases.
It does provide a useful starting point for these special cases,
however, and is easily adapted and analysed. A straightforward
implementation of the algorithm in Python is included as
Supplementary Material for reference.

4 IMPLEMENTATION

The multilocus coalescent algorithm described in the previous
section is implemented as a Python module, ercs. The implemen-
tation supports an arbitrary number of event classes, including
events from the Gaussian model (Barton et al., 2010b), and in-
corporates spatial indexing to improve performance over the
basic algorithm outlined here. The module is written primarily
in C in the interest of efﬁciency and is distributed freely under the
terms of the GNU General Public License.

Funding: N.H.B. is supported by European Research Council
grant 250152; A.M.E. is supported in part by EPSRC grant
EP/101361X/1 and J .K. is supported by EPSRC grant
EP/1013091/1.

Conflict of Interest: none declared.

REFERENCES

Barton,N.H. et al. (2010a) A new model for evolution in a spatial continuum.
Electron. J. Probab., 15, 7.

Barton,N.H. et al. (2010b) A new model for extinction and recolonisation in two
dimensions: quantifying phylogeography. Evolution, 64, 2701—2715.

Barton,N.H. et al. (2013) Modelling evolution in a spatial continuum. J. Stat.
Mech., 2013, P01002.

Etheridge,A.M. (2008) Drift, draft and structure: some mathematical models of
evolution. Banach Center Publ., 80, 121—144.

Etheridge,A.M. and Véber,A. (2012) The spatial A-Fleming-Viot process on a large
torus: genealogies in the presence of recombination. Ann. Appl. Probab., 22,
2165—2209.

Felsenstein,J. (1975) A pain in the torus: some difﬁculties with the model of isolation
by distance. Am. Nat, 109, 359—368.

Hudson,R.R. (1983) Properties of a neutral allele model with intragenic recombin-
ation. T heor. Popul. Biol, 23, 183—201.

Knuth,D.E. (2011) Combinatorial algorithms. In: The Art of Computer
Programming, Vol. 4A, Addison Wesley, Upper Saddle River, New Jersey.

Malécot,G. (1948) Les mathématiques de l’hérédité. Masson et Cie, Paris, 1948.

Wright,S. (1943) Isolation by distance. Genetics, 28, 114—138.

 

956

112 [3.10811211anIplOJXO'SODBIIIJOJIIIOIQ/[idllq IIIOJJ pepeolumoq

910K ‘09 lsnﬁnV no :2

