Bioinformatics, 31 (17), 2015, 2906—2908

doi: 10.1093/bioinformatics/btv286

Advance Access Publication Date: 7 May 2015
AppHcaﬁons Note

 

 

Systems biology

Gener: a minimal programming module for
chemical controllers based on DNA strand

displacement

Ozan Kahramanogullarl1'2'* and Luca Cardelli3'4

1Department of Mathematics, University of Trento, Trento, Italy, 2The Microsoft Research-University of Trento
Centre for Computational and Systems Biology, 3Microsoft Research Cambridge and 4Department of Computer

Science, University of Oxford

*To whom correspondence should be addressed.
Associate Editor: Jonathan Wren

Received on December 4, 2014; revised on April 10, 2015; accepted on April 30, 2015

Abstract

Summary: Gener is a development module for programming chemical controllers based on DNA
strand displacement. Gener is developed with the aim of providing a simple interface that minim—
izes the opportunities for programming errors: Gener allows the user to test the computations of
the DNA programs based on a simple two—domain strand displacement algebra, the minimal avail—
able so far. The tool allows the user to perform stepwise computations with respect to the rules of
the algebra as well as exhaustive search of the computation space with different options for explor—
ation and visualization. Gener can be used in combination with existing tools, and in particular, its
programs can be exported to Microsoft Research’s DSD tool as well as to LaTeX.

Availability and implementation: Gener is available for download at the Cosbi website at http://Www.cosbi.eu/
research/prototypes/gener as a windows executable that can be run on Mac OS X and Linux by using Mono.

Contact: ozan@cosbi.eu

 

1 Introduction

One of the goals of synthetic biology is constructing information pro-
cessing systems for controlling biochemical systems at the molecular
level. Such an achievement would pave the way for applications,
e.g. to smart therapeutic devices that are capable of sensing their
environments (Amir et 61]., 2014; Douglas et 61]., 2012). Within a
broad spectrum, various technologies are being developed to address
different aspects of this vision. Applications in DNA nanotechnology
aim at harnessing the complexity of biochemical dynamics to control
active molecular devices in vivo (Zhang and Seelig, 2011).
Technologies based on DNA strand displacement algebras, in particu—
lar, the double—stranded architecture with nicks on one strand
(Phillips and Cardelli, 2009) is proving to be effective also in wet lab
implementations of formally designed experiments (Chen
et al., 2013).

The double—stranded DNA strand displacement algebras perform
computations as a result of the interactions between single and

©The Author 2015. Published by Oxford University Press.

double—stranded DNA structures: the single—stranded structures act
as signals that are processed by double—stranded structures that act
as gates. The mechanism with which the signals are processed by the
gates is toehold—mediated branch migration and strand displacement
(Yurke and Mills, 2003; Zhang and Winfree, 2009). By using this
machinery, one can program, e.g. systems of chemical reaction net—
works that operate at the molecular level (Dalchau et 61]., 2014;
Soloveichika et 61]., 2010). In this setting, a single chemical reaction
step is emulated by a sequence of DNA—strand displacement oper—
ations. Because an increase in additional steps introduces more
opportunities for errors in design, simpler schemes for designing
these molecular programs become more favorable. In this respect,
two—domain DNA strand displacement scheme provides a good plat—
form for developing molecular programs as it is minimal in design
while being sufficiently expressive for describing chemical reaction
networks that are of interest from the point of view of molecular
programming (Cardelli, 2013; Lakin et 61]., 2013).

2906

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/by-nc/4.0/),
which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact

journals.permissions@oup.com

112 /310's113umo [p.IOJXO'SOIlBIHJOJUIOIQ/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

A minimal programming module for DNA based strand displacement 2907

 

 

 Garter - Dbl-i Strand Mutter - version 12 = I El 
Ede Earnings Enamplﬁ ﬂbnul
K.

EINASUUP- 1:.:n: '..I. -r.1: ' T'ﬂ.l"ll.'|-It'|t-' :.‘_-.-' 'T.I'1: >;..: EEULEE

wwﬁxm
1: I. 2:1..5: 3:1:

':Ll"EI1 DuLbl-I Strand:

1: ---.t.:.:’ t..I-'t.I.: .2:-r.x_t "-:..'.'l: ’ ﬂ.t.1-
Burnt-9'1

start -=- 11.3 t.:I. 3-.1: ct’ Lt *a'l: fa:- Ht -‘t.:.r"t.a’ t:-
le:l1_FDr'n 4r- t..I x.t. Lt -:t.:l: -"' t "- a 'l: " I:- u: -'l:_y' ’- t.a " t:-
Ix:h_fnrn -: Lt '11:.1' 3.1- «that -‘ t.l 1' a» an: 1:},- * t4 1:»
e:rh_back 1:- t.-! ALT. but ct.:l. " t.a.- 'I: ’ a:- :x -‘t._-.-' " t Lt:-
le:h_l:lalr_|t 1:- t..I t.:.- 1.1: -:t.:l: -"' l:_I. " 'l: " I.- -::r: -'t "' put ' Lt:-
Itft_tl.'.w -=— a t.}- it -=t.t ‘ t.I t.I=- «it t * Lat 3.1::-
r'I-al'lt_l'.m- t:- a l‘..',' x -:l'..:-. -" La LI:- dx 1‘.  5-.1: -‘- a E:-

 

 

Fig. 1. A screenshot of a reduction performed on the built-in Example 1 that
implements a transducer as in Cardelli (2013). The single strands consist of
two domains, composed by  One of the two composed domains can be a
short domain, denoted with ‘t’. Any other string consisting of letters denotes
a long domain. Complemented double strands are written in angle brackets
‘<’ and ‘>’, and they denote double strands consisting of strands and their
Watson—Crick complements. We denote nicks on double strands with W,
which are the interruptions on one side of the double strand that make the
interactions between the signals and gates possible

Gener is a programming module that implements the two—
domain DNA strand displacement algebra described in
Cardelli (2013). With Gener, the user can write a two—domain strand
displacement program, and test its stepwise computations. The pro—
grams can be analyzed by exhaustive search of the computation space,
and the computations can be visualized in a tree representation with
different options. Gener can be used in conjunction with Microsoft
Research’s DSD tool for simulation and analysis purposes as Gener
programs can be exported to DSD (Lakin et al., 2011, 2012), and com—
putation traces can be exported to LaTeX for visualization. Gener con-
tains introductory examples in its menu, which should be useful for a
quick start. A manual is also available on the web.

2 Methods

Gener programs consist of single— and double—stranded DNA struc—
tures, which are entered in the DNA Soup field at the top of the
GUI. Gener aims at designing DNA displacement systems on the
high abstract level, and uses the previously established notations
(Fig. 1). Gener can be used to observe the computations of the input
DNA program. In the default setting, the user can choose from all
the possible instances of the reduction rules by reducing the input,
and proceed by applying the rules incrementally to observe a pos—
sible computation trace of the DNA soup. At each step, the resulting
strands and the computed derivation are displayed. An example der—
ivation is shown in Figure 1. At each step during reduction, the user
can perform a ‘backtrack’ action by clicking the corresponding but—
ton of the GUI to return to the previous step.

Alternatively, the user can perform an exhaustive search of the
computation space and choose from the available traces for display—
ing it. This is done by choosing the search option from the settings
menu of the GUI. A search can be performed with further options: a
simple search (without any further options being chosen) displays an
enumeration of the available terminal computations of the strand
structures by pruning the redundancies in the search space, and
prompts a dialog window for the choice of the trace to be displayed.
Choosing the all pat/as option for the search enables the enumeration
of the computations with alternative paths, and the variations

r I
'Z- Multiple :4:th res-lulu l .1: ﬂ.

 

Plus: Wmctf-clnal nude-:1 madam-r1

1 2 _' 3 4
"I" I 1:.- It :tx'lal'ta; “WEE-1:1; .
2" I J-tt 'r-l: :txflawta; :1‘1yl'tnIls =
3" I 1y :I: :lz’lI‘Ea; :1lnyl'at:
i“ I 1:.- 1|: =l:'l-I".a= talnyl'at: '

 
 

 

5131: II :I: 1.- :t: II I .- :-i: 1:.- a I

muzd'IJJIdt '.a I in": ctJ-t'la' 'a:~ III-11" at:-

_ |

umjatk ta g.- I :uc“t.s". I 1 I g. at

3: 2|" . .

lgl1_-p-.- a gr 1: -:r:.: In :a; -::-r"1}.-‘. al:- "
1 exchange rorw.
I
2 erctmnue back

—.___
_—‘———-——______ !-'.~1'.' .--':|J:.-2
1L1    ' E-im riuhlcwerdtre
-.:.-r--“'- ' "" " 3.".2 .

3.'|'.2'.i.1 a   3.1.2.11 l1]
3.L1.i3.| 31.1.ijii 31.211
[3] [2] I4]

 

 

Fig. 2. A screenshot of a search performed on an example. For the search, ‘all
paths' option is chosen together with the display options ‘search tree' and
‘equal nodes'. The gray lines between the nodes denote equal nodes

option includes to the enumeration also those paths with the same
terminal as another path, but with an alternative trajectory.

Along with the search, the user can display the search tree, and
with this, all the intermediate computations are listed in a reserved
field. In the displayed search tree graph, different rules are denoted
with different colors, which are listed in a legend. Choosing the
equal nodes option includes a visualization of the nodes that result
in the same DNA strand structures, which are connected with
dashed gray lines in the search tree. The screenshot of a search tree
visualization with an example is depicted in Figure 2.

By using the file menu, Gener DNA strand displacement pro—
grams can be exported to Microsoft Research’s DSD language for
simulation and analysis, and computation trajectories can be ex—
ported to LaTeX for typesetting.

3 Discussion

Gener is developed for performing in silico experiments in design
and debugging of DNA strand displacement systems. Potential ap—
plications include designing DNA sequences from desired DNA
domain structures (Zadeh et al., 2011). The search feature is useful
for verification and analysis of reachable states of the designed sys—
tems. The sequences can then be ordered from Integrated DNA
Technologies (IDT) and executed in a basic wet lab with a fluorom—
eter for reading the output (Chen et al., 2013). The features of
Gener are only limited by its minimalistic design, avoiding duplica—
tion of effort, and imagination. We thus foresee extensions as they
will be required.

Conﬂict of Interest: none declared.

References

Amir,Y. et al. (2014) Universal computing by dna origami robots in a living
animal. Nat. Nanotechnol, 9, 353—35 7.

Cardelli, L. (2013) Two-domain DNA strand displacement. Mat/7. Stract.
Compat. Sci., 23, 247—271.

Chen,Y.-]. et al. (2013) Programmable chemical controllers made from DNA.
Nat. Nanotechnol, 8, 755762.

112 /310's113umo [p.IOJXO'SOTlBIHJOJUTOTQ/ﬁdllq 11101; prBOIUAAOG

9IOZ ‘09 lsnﬁnv uo ::

2908

O.Kahramanog”ullarl and L.Cardelli

 

Dalchau,N. et al. (2014) Computational design of reaction-diffusion patterns
using DNA-based chemical reaction networks. Int. Conf. DNA Compat.
Mol. Program. 8727, 84—99.

Douglas,S.M. et al. (2012) A logic-gated nanorobot for targeted transport of
molecular payloads. Science, 335, 831—834.

Lakin,M. et al. (2012). Design and analysis of DNA strand
displacement devices using probabilistic model checking. ]. R. Soc. Interface,
9, 1470—1485.

Lakin,M.R. et al. (2011) Visual DSD: a design and analysis tool for DNA
strand displacement systems. B ioinformatics, 27, 321 1—3213.

Lakin,M.R. et al. (2013) Modular veriﬁcation of DNA strand displacement
networks Via serializability analysis. Int. Conf. DNA Comput. Mol.
Program., 8141, 133—146.

Phillips,A. and Cardelli,L. (2009) A programming language for composable
dna circuits. ]. R. Soc. Interface, 6, 419—436.

Soloveichika,D. et al. (2010) DNA as a universal substrate for chemical kin-
etics. Proc. Nat. Acad. Sci., 107, 5393—5398.

Yurke, B. and Mills, AP. (2003) Using DNA to power nanostructures. Genet.
Program. Evolvahle Mach. Arch., 4, 11 1—122.

Zadeh,]. et al. (2011) Nucleic acid sequence design Via efﬁcient ensemble
defect optimization. ]. Comput. Chem., 32, 439—452.

Zhang,D.Y. and Seelig,G. (201 1) Dynamic DNA nanotechnology using strand
displacement reactions. Nat. Chem., 3, 103—113.

Zhang,D.Y. and Winfree,E. (2009) Control of DNA strand displacement
kinetics using toehold exchange. ]. Am. Chem. Soc., 131, 17303—
17314.

112 /§.IO'S[BU.IT10[p.IOJXO'SOTlBIHJOJUTOTQ/ﬁ(1111] 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

