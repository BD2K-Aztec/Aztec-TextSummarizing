Advance Access Publication Date: 14 September 2015

Bioinformatics, 32(1), 2016, 159—160
doi: 10.1093/bioinformatics/btv543

Applications Note

 

 

Databases and ontologies

PyPDB: a Python API for the Protein Data Bank

William Gilpin

Department of Applied Physics, Stanford University, Stanford, CA 94305, USA

Associate Editor: Anna Tramontano

Received on July 14, 2015; revised on August 22, 2015; accepted on September 7, 2015

Abstract

Summary: We have created a Python programming interface for the RCSB Protein Data Bank (PDB)
that allows search and data retrieval for a wide range of result types, including BLAST and
sequence motif queries. The API relies on the existing XML—based API and operates by creating
custom XML requests from native Python types, allowing extensibility and straightforward modifi—
cation. The package has the ability to perform many types of advanced search of the PDB that are

otherwise only available through the PDB website.

Availability and implementation: PyPDB is implemented exclusively in Python 3 using standard
libraries for maximal compatibility. The most up—to—date version, including iPython notebooks con—
taining usage tutorials, is available free—of—charge under an open—source MIT license via GitHub at
https://github.com/wiIIiamgilpin/pypdb, and the full API reference is at http://wiIliamgilpin.github.io/
pypdb_docs/htmll. The latest stable release is also available on PyPl.

Contact: wgilpin@stanford.edu

 

1 Introduction

The RCSB Protein Data Bank (PDB) represents one of the most com—
prehensive structural biology information databases openly avail—
able to genomics and proteomics researchers (Berman et al., 2000).
It provides an online interface for browsing amino acid and genetic
sequences, as well as crystallographic structures aggregated from a
large number of sources. It also provides sophisticated tools for visu—
alizing protein structure and sequence lineages, aligning sequences
and searching for homologies, and it provides links to relevant
entries in related databases, such as GenBank and UniProt.

The Python scripting language has demonstrated its usefulness to
the bioinformatics community as a means of unifying different data
sources and analysis tools, allowing diverse data streams to be
retrieved, analyzed, and summarized from within the same
workﬂow. This function has been complemented by new interface
tools such as the iPython notebook, as well as general—purpose ana—
lysis toolkits like Biopython and Biskit (Cock et al., 2009; Griinberg
et al., 2007).

In this article, we describe an API for the PDB that allows
advanced querying of information on PDB entries. Similar utilities
exist for programmatic querying of other large bioinformatics data—
bases (including Ensembl, PubChem and UniProt), but, to our
knowledge, no such tool currently exists for the PDB (Patient et al.,
2008; Southern and Griffin, 2011; Strozzi and Aerts, 2011). Our

tool facilitates integration of automatic PDB searches within existing
Python bioinformatics workflows, and it simplifies the process of
performing multiple searches based on the results of existing
searches.

2 Implementation

The PDB currently uses a RESTful API that allows retrieval of infor-
mation via standard HTML verbs, such as POST/GET/PUT/etc. All
advanced query types can be represented by XML. PyPDB converts
nested dict() objects into structured XML strings, performs searches
using these strings and then parses the XML search results back into
nested dict() objects. Most query and search results are represented
either as native Python dict() or list() objects depending on their
type.

PyPDB supports retrieval but not local manipulation of raw data
files (.pdb,.cif,.mcif, etc.) available in the PDB, as there are already
libraries for manipulating these files included in existing Python
toolkits, such as the Biopython module Bio.PDB (Hamelryck and
Manderick, 2003). Bio.PDB enables local.pdb analysis like second—
ary structure prediction and neighbor searching, as well as internet
retrieval of the full PDB and single files using its get_all_entries and
retrieve_pdb_file methods. However, Bio.PDB does not currently

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 159

91% ‘09 1sn3nv uo sojoﬁuv s01 ‘BTUJOJTIBD aIo Amie/xtqu 112 /§.IO'S[BU.IHO[p.IOJXO'SOTlBIHJOJUTOTQ/ﬁdllq 11101; popeommoq

160

W. Gilpin

 

Table 1. The primary PyPDB functions

 

Function Description

 

Structure a search request into a dict()
do_search Perform a search for PDB IDs

get_all Get all active PDB IDs

describe_pdb All metadata about PDB entry
get_all_info All information deposited in PDB entry

make_query

get_pdb_ﬁle Retrieve.pdb/.cif/.xml ﬁle for PDB entry
get_blast BLAST search results for PDB entry
ﬁnd_papers Find papers associated with keyword

ﬁnd_authors Find authors associated with keyword

 

N ote: Additional functions provided in the documentation.

support keyword querying or advanced search, making PyPDB com-
plementary to Bio.PDB’s extensive range of capabilities.

3 Features

PyPDB can search the PDB by keyword, author, publication date
and experimental method, as well as by specific sequence motifs.
For individual PDB IDs, retrievable information ranges from meta—
data (date of posting, authors, etc.) to the full. pdb data file stored
with an entry. Standard information such as gene ontology, ligand
information and protein family information can be accessed. PyPDB
can also perform BLAST searches.

A list of the most common functions is available in Table 1. A
full listing of the available methods is given in the documentation.
The arguments, keywords and outputs for each function are also
described in each function’s docstring, which can be accessed with
help(name_of_function)

3.1 Example usage

Figure 1 shows an example script in an iPython notebook. The
find_dates() method creates a query dict() and structures it for the
PDB format (by default, string arguments are treated as keyword
searches), and it then sends this query to the PDB by internally call-
ing PyPDB’s make_query and do_search() methods. The search re—
turns a list of strings representing four—character PDB IDs, and this
function then tabulates the deposition dates associated with each
PDB ID. The last code block plots the number of PDB IDs found for
each year, representing popularity over time of the original search
term (in this case, the CRISPIUCas9 gene—editing method).

3.2 Extensibility

PyPDB includes most of the common types of operations involved
when working with the PDB. However, the depth and range of data
represented in the PDB may require eventual support for additional
functions. Because PyPDB primarily operates by converting native
Python dict() objects into valid XML strings, such operations are
straightforward to implement. The full code is available on the
GitHub website, and forks and pull requests are encouraged.

4 Conclusion

The library described here provides direct querying of the PDB using
the Python programming language. This API complements the exist—
ing PDB GUI and XML API by introducing the ability to directly

Graph newr CHIEPH entries versus. time

In ['16]: v !:4-:'.-.-.-- -=--.e-.-r.
e11_detee - £1nd_datea{ crispr'. max_reeulte— Ac:
a11_detes - errayfall_dateel
e11_detee - erreyf[-n'{depdate[td}l tar depdete in e11_detee]}
auhe_v_time - histogramtell_dates. nnxta11_dete51—r -[u11_dates]1
eaten. num_entriee - euhe_v_time[i][:|]: sube_y_time[ll
popgreph - £111_hetueentdetea, u, num_entr1ea}

4E

 

4m

New PM Il'ltlllll
H E 1.-
U1 Ill

 

 

200$

‘I'Elr 1

Fig. 1. Example PyPDB workflow in an iPython notebook

retrieve information from the PDB from within existing Python bio-
informatics workflows. The use of native Python datatypes to repre—
sent queries simplifies conducting multiple searches with similar
queries, and it allows the individual PDB IDs returned in search re-
sults to be examined from within the same programming workﬂow
as the original search.

The latest stable release of PyPDB is available on PyPI and can
be installed with the command pip install pypdb. The source code of
all versions of PyPDB is available at https://github.com/williamgil
pin/pypdb, and full documentation is available at http://williamgil
pin.github.io/pypdb_docs/html/. iPython notebooks containing
usage examples are also available on the GitHub website.

Acknowledgement

The author thanks Sebastian Doniach for his helpful suggestions.

Funding

This work was supported by the National Science Foundation Graduate
Research Fellowship [DGE-114747]. W.G. receives additional support from
the Stanford EDGE-STEM Fellowship and the Stanford H858 Fellowship.

Conﬂict of Interest: none declared.

References

Berman,H.M. et al. (2000) The Protein Data Bank. Nucleic Acids Res, 28,
235—242.

Cock,P.]. et al. (2009) Biopython: freely available Python tools for computa-
tional molecular biology and bioinformatics. Bioinformatics, 25, 1422—
1423.

Grunberg,R. et al. (2007) Biskit—a software platform for structural bioinfor-
matics. Bioinformatics, 23, 769—770.

Hamelryck,T. and Manderick,B. (2003) PDB ﬁle parser and structure class im-
plemented in Python. B ioinformatics, 19, 2308—2310.

Patient,S. et al. (2008) UniProtJAPI: a remote API for accessing UniProt data.
Bioinformatics, 24, 1321—1322.

Southern,M.R. and Grifﬁn,P.R. (201 1) Ajava API for working with PubChem
datasets. Bioinformatics, 27, 741—742.

Strozzi,F. and Aerts,]. (2011) A Ruby API to query the Ensembl database for
genomic features. Bioinformatics, 27, 1013—1014.

91% ‘09 1sn3nv uo sojoﬁuv s01 ‘BTUJOJTIBD aIo Amie/xtqu 112 /§.IO'S[BU.IHO[p.IOJXO'SOTlBIHJOJUTOTQ/ﬁdllq 11101; popeommoq

