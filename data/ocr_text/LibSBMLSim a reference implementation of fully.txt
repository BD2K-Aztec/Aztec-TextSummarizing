APPLICA TIONS NOTE V°"2302?b.11kﬁgibiaﬁiiﬁaliiigﬁ2?

 

Systems biology

Advance Access publication April 5, 2013

LibSBMLSim: a reference implementation of fully functional

SBML simulator

Hiromu Takizawa, Kazushige Nakamura, Akito Tabira, Yoichi Ohikahara, Tatsuhiro Matsui,

Noriko Hiroi and Akira Funahashi"

Department of Biosciences and Informatics, Keio University, 3—14—1 Hiyoshi, Kouhoku—ku, Yokohama, Japan

Associate Editor: Olga Troyanskaya

 

ABSTRACT

Motivation: The Systems Biology Markup Language (SBML) is cur-
rently supported by >230 software tools, among which 160 support
numerical integration of ordinary differential equation (ODE) models.
Although SBML is a widely accepted standard within this field, there is
still no language-neutral library that supports all features of SBML for
simulating ODE models. Therefore, a demand exists for a simple port-
able implementation of a numerical integrator that supports SBML to
enhance the development of a computational platform for systems
biology.

Results: We implemented a library called libSBMLSim, which sup-
ports all the features of SBML and conﬁrmed that the library passes
all tests in the SBML test suite including those for SBML Events,
AlgebraicRules, ‘fast’ attribute on Reactions and Delay. LibSBMLSim
is implemented in the C programming language and does not depend
on any third-party library except libSBML, which is a library to handle
SBML documents. For the numerical integrator, both explicit and
implicit methods are written from scratch to support all the function-
ality of SBML features in a straightfonivard implementation. We suc-
ceeded in implementing libSBMLSim as a platform-independent
library that can run on most common operating systems (Windows,
MacOSX and Linux) and also provides several language bindings
(Java, C#, Python and Ruby).

Availability: The source code of libSBMLSim is available from http://
fun.bio.keio.ac.jp/software/libsbmlsiml. LibSBMLSim is distributed
under the terms of LGPL.

Contact: funa@bio.keio.ac.jp

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on April 4, 2012; revised on January 31, 2013; accepted on
March 31, 2013

1 INTRODUCTION

Understanding of the logic and dynamics of gene-regulatory and
biochemical networks is a major challenge in systems biology.
For this reason, there exist numerous software tools that can
simulate ordinary differential equations (ODEs), and several ef-
forts to standardize the model description of computational
models have been made. One major model description language
is the Systems Biology Markup Language (SBML), which is well
accepted in the systems biology ﬁeld (Hucka et al., 2004).

 

*To whom correspondence should be addressed.

Although there exist >230 SBML-supported software tools
(Hucka et al., 2011), there is still no language-neutral library
that supports all SBML features and has been conﬁrmed as
passing all SBML tests. For example, few simulator completely
support SBML Events, which is an element to describe a discon-
tinuous change to a model with respect to time, number of par-
ticles, parameter values, etc. Supporting Events in the simulator
requires some effort by developers if they are using one of the
existing numerical integration libraries, because most of the in-
tegrators assume that the model is continuous.

Another element that is not well supported in SBML is the
SBML AlgebraicRule element, which allows modelers to reduce
the number of variables and to add a constraint to each variable.
Therefore, supporting AlgebraicRule in the simulator involves
far more than just implementing a numerical integrator for
ODEs, because the simulator has to solve differential algebraic
equations (DAEs), which requires an implementation to solve
non-linear simultaneous equation numerically (or analytically)
to determine the value of variables described in AlgebraicRule.
This is also required when a simulator must support the ‘fast’
attribute on an SBML Reaction element.

The Delay function is a rarely supported SBML function in
existing simulators, especially with a combination of Event elem-
ents. The Delay function allows a modeler to include biological
processes having a delayed response. This function requires some
additional modiﬁcation to the ODE solver itself, to store calcu-
lated values that are used after a certain delay.

To carefully and quantitatively check the capability of each
SBML elements on the simulator, it is recommended to run the
test cases provided by the SBML test suite and validate each
simulation results. SBML test suite consists of numerous com-
binations of SBML features in separate models with the expected
results. The test results are also publicly released for existing
software (http://sbml.org/Facilities/Database), and currently,
there is still no language-neutral library that conﬁrmed to pass
all SBML tests.

2 APPROACH

To support all the functionality on SBML, we decided to imple-
ment a numerical integrator, non-linear simultaneous equation
solver, abstract syntax tree (AST) manipulator and a handler for
Events and Delays. The library is implemented in the C program-
ming language because of CS portability and performance.

 

© The Author 2013. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0/), which
permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

112 ﬁhO'smumo[pJOJXO'sot1chOJutotw/2d11q IIIOJJ papeolumoq

910K ‘09 lsnﬁnV no :2

LibSBMLSim

 

Supporting other programming languages will be achieved by
providing language bindings.

3 METHODS

3.1 Numerical integrator

LibSBMLSim provides both explicit (Runge—Kutta) and implicit
(backward Euler) methods (Hairer et al., 1993) for numerical integration.
Providing only explicit methods such as Runge—Kutta is not sufﬁcient for
biochemical simulation. Owing to the fact that there exist several reac-
tions that proceed on different time scales, the system becomes stiff and
requires implicit methods to solve the problem.

x(t + At) = x(t) + F(t, x(t)) - At (1)

x(t + At) = x(t) + F(t + At,x(t + An) - At (2)

Equations (1) and (2) are examples of explicit (Euler) and implicit (back-
ward Euler) methods, respectively. Here, x(t) is a variable which is a
function of time t, and F(t, x) is deﬁned by a differential equation. It is
obvious from equation (2) that the integrator must solve this equation to
ﬁnd x(t + At) before the integration because both the left- and right-hand
side of the equation contains the term x(t + At). For this reason, we have
developed a non-linear simultaneous equation solver. Furthermore, to
improve the accuracy of integration, variable-step integrator (Runge—
Kutta Fehlberg and Cash—Karp) and multistep methods are provided
for both explicit (Adams—Bashforth) and implicit (Adams—Moulton
and Gear) methods (Hairer et al., 1993).

3.2 Non-linear simultaneous equation solver

To implement the above implicit methods, a non-linear simultaneous
equation solver is implemented in our library. The non-linear simultan-
eous equation solver is also required to support the SBML AlgebraicRule
element and the ‘fast’ attribute in the Reaction element. We used the
k—dimensional Newton’s method to solve systems of non-linear simultan-
eous equations. Numerical differentiation is used to obtain the J acobian
matrix, and (for linear approximation) LU decomposition, Newton’s
method, forward elimination and backward substitution are also imple-
mented for this purpose.

3.3 AST manipulator

In SBML, ODEs are stored in the kineticLaw math element and can be
obtained as an AST object (Supplemental Figure S1) by using libSBML
(Bornstein et al., 2008). Our library directly uses AST to handle all the
functionality of SBML. When an SBML model is loaded, our library
parses all ASTs and its related elements, and transforms the AST to
suit with actual evaluation. Evaluation of AST is performed by convert-
ing AST to Reverse Polish notation (RPN). To improve the performance,
we applied a stack architecture to avoid recursive calls and evaluation of
each AST node. Using AST as a fundamental data structure of equations
made our implementation straightforward. For example, if a model con-
tains a FunctionDefmition element, the library will expand the AST node
that calls the function to the actual content of the deﬁned function
(Supplemental Figure S2). This transformation of AST can be applied
to support other SBML elements, such as piecewise functions. To support
piecewise functions on AST, our library adds multiplication between
each conditional expression and deﬁnition, and then combines them
using addition and logical operators (NOT and AND) (See
Supplemental Figure S3). The combination of the SBML Delay and
EventAssignment element that is used to describe an Event to take
place after a certain delay is also supported by this implementation.

3.4 Events and Delays

A SBML Event element is used to describe an instantaneous discon-
tinuous change in a set of variables of any type (species quantity, com-
partment size or parameter value) when a triggering condition is
satisﬁed (Hucka et al., 2008). When a condition speciﬁed in Trigger
changes from ‘false’ to ‘true’, an assignment described in
EventAssignment is executed. If an Event contains a Delay element,
then the assignment is executed after the delay described in the Delay
element. From SBML Level 3 Version 1, Priority element and ‘persist—
ent’ attribute on Trigger are introduced. Priority speciﬁes the priority of
Event, and ‘persistent’ attribute speciﬁes whether the trigger expression
should not have to be re—checked after it triggers. To support all func-
tions of SBML Events, we implemented an event handler as follows: (i)
Insert all Events that are related to a given Trigger to a queue. (ii)
Calculate the priority of all Events in the queue. (iii) Move the Event
that has the maximum priority value to the head of the queue and
execute its EventAssignment. (iv) Reconﬁrm the Trigger of Events
whose persistent flag is ‘false’, and remove from the queue if the
Trigger is set to ‘false’ by the previous EventAssignment. (v) Insert
any Event whose Trigger was changed from ‘false’ to ‘true’ by the
above EventAssignment to the queue. (vi) Go back to procedure (ii)
if there still exists an Event in the queue.

The Delay function is used to describe a delay differential equation
(DDE) in a model. For example, when a model contains the differential
equation % 2 k1 — k2A(t — t), the simulator must use the value of At
seconds before for the integration. A straightforward way to implement a
DDE solver is to use a continuation method; however, in SBML, the
delay variable t is not necessarily ﬁxed, and thus the actual implementa-
tion in our library stores the values of all the variables during the
simulation.

4 DISCUSSION

The aim of the current work is the development of a portable
simulation library that fully supports SBML features. For this
purpose, we at ﬁrst focused on accuracy by a straightforward
implementation, staying carefully within the speciﬁcations of
SBML. Although there already exist elaborated and efﬁcient
solvers, numerical integrators including variable-step integrator
and both explicit and implicit method are implemented from
scratch because we wanted to reduce the number of dependent
libraries as much as possible. We are planning to port this library
on tablet computers and smartphones. SBML can also describe
partial differential equations (PDEs), stochastic differential
equations (SDEs) and discrete stochastic simulation models,
which are not yet included in the SBML test suite. As yet
libSBMLSim does not provide integrators for these types of
models; a known limitation which we intended to address in
our future development of the library.

5 CONCLUSION

LibSBMLSim is a portable simulation library that supports all
the features of SBML Level 2 Version 4 and Level 3 Version 1.
We conﬁrmed that our library passed all 980 tests of the SBML
test suite (version 2.0.2, See Supplemental Figure S4). The library
does not depend on any third-party library except libSBML.
Language bindings such as Java, C#, Python and Ruby are
also included in the distribution.

 

1 475

112 ﬁhO'smumo[pJOJXO'sot1chOJutotw/2d11q IIIOJJ papeolumoq

910K ‘09 lsnﬁnV no :2

H. Takizawa et al.

 

Funding: This work was supported by a Grant-in-Aid for
Scientiﬁc Research on Innovative Areas (23136513).

Conﬂict of Interest: none declared.

REFERENCES

Bornstein,B.J. et al. (2008) LibSBML: an API library for SBML. Bioinformatics, 24,
880—881.

Hucka,M. et al. (2004) Evolving a lingua franca and associated software infrastruc-
ture for computational systems biology: the Systems Biology Markup Language
(SBML) project. Syst. Biol., 1, 41—53.

Hucka,M. et al. (2008) Systems Biology Markup Language (SBML) Level 2: struc-
tures and facilities for model deﬁnitions. Nat. Precedings, [Epub ahead of print,
doi: 10.1038/npre.2008.2715.1, November 5, 2007].

Hucka,M. et al. (2011) A Proﬁle of Today’s SBML-Compatible Software. In:
e-Science Workshops, 2011 IEEE Seventh International Conference on
e-Science. IEEE, Stockholm, Sweden, pp. 143—150.

Hairer,E. et al. (1993) Solving Ordinary Diﬂerential Equations. I: N onstiﬂ Problems.
2nd edn. Springer-Verlag, Berlin.

 

1 476

112 ﬁhO'smumo[pJOJXO'sot1emJOJutotw/2d11q IIIOJJ papeolumoq

910K ‘09 lsnﬁnV uo 22

