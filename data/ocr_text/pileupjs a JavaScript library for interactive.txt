Bioinformatics, 32(15), 2016, 2378—2379

doi: 10.1093/bioinformatics/btw167

Advance Access Publication Date: 29 March 2016
Applications Note

 

Genome analysis

pileup.js: a JavaScript library for interactive and
in-browser visualization of genomic data

Dan Vanderkam, B. Arman Aksoy, Isaac Hodes, Jaclyn Perrone and
Jeff Hammerbacher*

Department of Genetics and Genomic Sciences, Icahn School of Medicine at Mount Sinai, 1 Gustave L. Levy Pl,
New York, NY 10029, USA

*To whom correspondence should be addressed.
Associate Editor: Alfonso Valencia

Received on February 2, 2016; revised on February 2,2016; accepted on March 23, 2016

Abstract

pileup.js is a new browser—based genome viewer. It is designed to facilitate the investigation of evi—
dence for genomic variants within larger web applications. It takes advantage of recent develop—
ments in the JavaScript ecosystem to provide a modular, reliable and easily embedded library.

Availability and implementation: The code and documentation for pileup.js is publicly available at

 

https://github.com/hammerlab/pileup.js under the Apache 2.0 license.

Contact: correspondence@hammerlab.org

 

1 Introduction

As sequencing has become increasingly ubiquitous, there has been a
proliferation of variant calling programs. Before a physician or re—
searcher takes action on a variant; however, it remains essential to
inspect the evidence for it manually. Track viewer visualizations
such as those provided by UCSC (University of California Santa
Cruz), IGV (Integrative Genomics Viewer) and Dalliance have long
been the preferred way to do this (Down et al., 2011; Kent et al.,
2002; Robinson et al., 2011). As data and workflow management
systems move to the browser, it becomes increasingly appealing to
embed these visualizations directly within larger web applications.
This results in reduced latency, allows extensive customization and
avoids the cognitive overhead of conteXt switching between
applications.

Here, we describe pileup.js, a JavaScript library for interactive and
in-browser visualization of genomic data. pileup.js is extensively tested,
uses a modern code base that is oriented towards re—usability and per—
formance, and is well—documented for easier customization and usabil—
ity by other developers. The latest version, v0.6.2 (the most recent
version), supports visualization of genomic tracks for reference se—
quences, mapped reads (paired or unpaired), read depth, variants and
gene annotations. pileup.js was initially developed to be embedded
within the Cycledash variant inspector, but it can be used within any
web application. (https://github.com/hammerlab/cycledash).

©The Author 2016. Published by Oxford University Press.

2 Methods and technologies

Driven by the ubiquity of web browsers, the JavaScript development
ecosystem has seen a maelstrom of activity over the past several
years. This has resulted in major new technologies and radically dif—
ferent approaches to solving problems. Rather than adapting eXist—
ing systems to these new tools, we elected to create pileup.js, which
is built from the ground up for today’s JavaScript ecosystem. We
highlight a few of the most important tools here:

° E52015 is the latest version of the ECMAScript (JavaScript) lan—
guage (http://www.ecma—international.org/ecma—262/6.0/). It sol—
ves many long—standing issues, e.g. the difﬁculty of deﬁning class
hierarchies and the lack of a module system. We embrace these
features and use babel and browserify to make them work in cur-
rent—generation web browsers.

° We pull in third—party dependencies using the Node Package
Manager. This allows us to take advantage of “battle hardened”
code written by other developers for tasks that are not speciﬁc to
pileup.js, e.g. inﬂating gzipped data.

° We use React.js for managing state within the genome viewer. This
ensures that state changes (e.g. panning, zooming and toggling op-
tions) are consistently reﬂected throughout the user interface.

° We use the FlowType static analysis system to ensure the type safety
of our code (http://ﬂowtype.org). Static type systems clarify the

2378

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits
unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /310's113umo [p.IOJXO'SSUBUHOJUIOIQ/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

A JavaScript library for interactive and in-browser visualization of genomic data 2379

 

{a} Reference

 

 

 

 

 

Scale: 13.51rhp =
Location |— rename be
synthd an
I
 . | . I I I I I I I I I. . . .ll
synth-II 1i I - i'
I I | | :1
IE) I . I I I i:
II I I II I I II
I I | I II
| I .fl 1 | I I |
| l l | | II
{b} we .3 remeea-remeeq Ge — +
FlelereneeHannnrroerceccaeerreneeererreranti-etherereceanneennnceneeeccrrerriceneaneneeneenncI-ererencrel-Hume
Scale: IThp t
Lueetim |:—r.5m.eeebp
1Il'ariante l
Genes .:
TF‘53
Coverage—m
-39: I
‘IM
Alignments i'":
a Alignments T :A:

 

f 1I.I"ieI.I.I :15 pairs

4’ Color by insert size

 

 

Gert alignments

Fig. 1. pileup.js. This shows sequencing data at two different zoom levels (a) The order and style of the tracks (e.g. reference, variant, gene, coverage and align-
ment) can be customized. (b) The alignment and coverage tracks highlight variants and abnormal reads to draw attention to anomalous regions (Color version of

this figure is available at Bioinformatics online.)

inputs and outputs of functions, catch errors and facilitate refactor—
ing. Users of pileup.js can choose to use its type deﬁnitions as they
wish.

In addition to using contemporary web technologies, our develop—
ment process is designed to lead to higher—quality software. All code is
unit—tested and goes through a blocking review by a peer. This ensures
that previously—fixed bugs do not regress and that all code was under—
standable to at least one developer who did not write it. This leads to
better documentation and cleaner APIs (Application Programming
Interfaces) for pileup.js.

pileup.js uses the HTML5 canvas to render its visualizations. It uses
off—screen buffers to achieve faster drawing and smoother panning. We
chose canvas over other technologies (e.g. SVG (Scalable Vector
Graphics)) because it led to simpler code and better performance. We
initially used SVG but were able to gain a 5x performance improvement
by migrating to canvas.

Like dalliance and IGV, pileup.js loads data over HTTP using
Range requests, which are widely supported by popular servers such
as Apache and nginx. For some data sources, e.g. BAM files, it may re—
quire several serialized requests to load all the information for a single
genomic region (Li et al., 2009). In this case it is more efficient to situ—
ate the data loading logic closer to the data itself, to reduce the round
trip time. This can be achieved by running a GA4GH server. pileup.js
supports v0.5 of the GA4GH protocol (Terry et al., 2014). Support
for other data loading schemes can be added via user—defined sources.

3 Features

pileup.js has the standard tracks required for investigating genomic
variants (see Fig. 1):

i. Reference track for visualizing individual base pairs in a refer-
ence genome
ii. Gene track for annotating genomic regions with gene names (in-
trons, exons, coding regions)
iii. Pileup track for showing (paired or unpaired) aligned sequenc—
ing reads

iv. Coverage track to show the number of reads aligned to each
locus, as well as the frequency of variants.

v. Variant track for marking regions on the genome containing a
called variant.

Additional tracks may be defined by developers using the pileup
visualization API. Users can pan and zoom to find and drill down into
regions of interest. An options menu allows the view to be configured
on a per—track basis, e.g. to view reads individually or as pairs.

The set of tracks and their order can be configured through the
JavaScript API. Details of the layout (e.g. track heights and font
choices) are designed to be configured via CSS. pileup.js makes use of
the UMD (Universal Module Definition) pattern. This allows it to be
included in a larger application either via a global variable or as a de—
pendency via a module system such as AMD or CommonJS. It also
means that, should they choose to do so, other libraries can depend
on just a subset of pileup.js, e.g. its data loading and parsing modules.

pileup.js supports the latest versions of the major browsers at the
time of publication: Chrome 42+, Firefox 37+, Safari 9—1— and
Internet Explorer Edge (12).

We hope that, by providing an easily embedded, modern, open—
source track viewer, pileup.js will be an enabling tool for the next
generation of genomic web applications. External contributions
(code and issues) are welcome.

Conﬂict of Interest: none declared.

References

Down,T.A. et al. (2011) Dalliance: interactive genome Viewing on the web.
Bioinformatics, 27, 889—890.

Kent,W.]. et al. (2002) The human genome browser at UCSC. Genome Res.,
12, 996—1006.

Li,H. et al. (2009) The sequence alignment/map format and SAMtools.
Bioinformatics, 25, 2078—2079.

RobinsonJ.T. et a]. (201 1) Integrative genomics viewer. Nat. Biotechnol., 29, 24—26.

Terry,S.F. (2014) The global alliance for genomics and health. Genet. Test.
Mol. Biomark., 18, 375—376.

112 /§JO'Sjeumo [p.IOJXO'SOTlBIHJOJUTOTQ/ﬁdllq 11101; popeoIII/vxoq

9IOZ ‘09 lsnﬁnv uo ::

