Vol. 26 no. 10 2010, pages 1376-1377
APPS NO  doi:10.1093/bioinformatics/btq130

 

Gene expression

Advance Access publication April 5, 2010

Modular analysis of gene expression data with R

G bor Cs rdiI’Z, Zolt n KutalikI’2 and Sven Bergmannmﬁk
1Department of Medical Genetics and 2Swiss Institute of Bioinformatics, University of Lausanne, Rue de Bugnon 27,

(DH—1005 Lausanne, Switzerland

Associate Editor: David Rocke

 

ABSTRACT

Summary: Large sets of data, such as expression profiles from
many samples, require analytic tools to reduce their complexity.
The Iterative Signature Algorithm (ISA) is a biclustering algorithm.
It was designed to decompose a large set of data into so-called
‘modules’. In the context of gene expression data, these modules
consist of subsets of genes that exhibit a coherent expression profile
only over a subset of microarray experiments. Genes and arrays
may be attributed to multiple modules and the level of required
coherence can be varied resulting in different ‘resolutions’ of the
modular mapping. In this short note, we introduce two BioConductor
software packages written in GNU R: The ‘isa2’ package includes
an optimized implementation of the ISA and the ‘eisa’ package
provides a convenient interface to run the ISA, visualize its output
and put the biclusters into biological context. Potential users of these
packages are all R and BioConductor users dealing with tabular (e.g.
gene expression) data.

Availability: http://www.unil.ch/cbg/ISA

Contact: sven.bergmann@unil.ch

Received on December 14, 2009; revised on March 15, 2010;
accepted on March 20, 2010

1 INTRODUCTION

The ISA can be applied to identify coherent substructures
(i.e. modules) from any rectangular matrix of data. To be speciﬁc,
we consider here the case of transcriptomics data corresponding to
a set of gene expression proﬁles from a collection of samples. The
method has been described in detail in lhmels et al. (2004) and
Bergmann et al. (2003). Here we only give a brief summary.

The ISA identiﬁes modules by an iterative procedure. The
algorithm starts from an input seed (corresponding to some set of
genes or samples), which is reﬁned at each iteration by adding and/or
removing genes and/or samples until the process converges to a
stable set, which is referred to as a transcription module.

The output of ISA is a collection of potentially overlapping
modules. Every module contains genes that are over— and/or under
expressed, in samples that belong to the module. In every module,
each gene and each sample is attributed a score between —1 and l,
which reﬂects the strength of the association with the module.
Moreover, if the scores of two genes of a module have the same
sign, then they are correlated (across the samples of the module),
opposite signs mean anti—correlation. Similarly, if two sample scores
have the same sign, then these samples are correlated (across the
genes of the module), opposite signs indicate anti—correlation.

 

*To whom correspondence should be addressed.

For other biclustering algorithms, see e.g. Cheng and Church
(2000), Getz et al. (2000), Califano et al. (2000), Sharan et al.
(2002), Tanay et al. (2004), Barkow et al. (2006) and lhmels and
Bergmann (2004) for a review.

2 METHODS

A typical modular analysis for gene expression data includes the following
steps.

Batch correction: to study the global organization of a transcription
program including many aspects of transcriptional regulation one often
combines several microarray experiments into a single dataset. In such a
case, additional data normalization is crucial to reduce the bias due to the
constituent datasets. Several methods address this challenge, see e. g. Johnson
et al. (2007) for an algorithm that has a GNU R implementation.

Gene ﬁltering: genes that have very low expression levels in all
samples, carry little if any information and may reﬂect ineffective array
probes, etc. Since these genes are likely to contribute mostly noise to the
analysis (Hackstadt and Hess, 2009), we suggest removing them before
running the module identiﬁcation of the ISA.

ISA normalization (Step 1 in Fig. l): in each iteration the ISA computes
thresholded weighted sums of expression levels over either genes or samples.
Since different genes typically show different levels of base expression and
variance, it is important to standardize expression levels to Z —scores. The ISA
uses two sets of Z—scores, one calculated for each gene across all samples
and the other for each sample across all genes.

Random and smart seeding, ISA iteration (Step 2): the iterative procedure
of the module identiﬁcation is typically applied to a large number of
seeds. In the unsupervised approach, these seeds are chosen randomly to
sample uniformly the immense search space. We also implemented a semi—
supervised method, to which we refer as ‘smart seeding’, where the seeds are
biased to start with certain sets of genes or samples based on prior knowledge.
The ISA can be performed with random or smart seeds, depending on the
application.

Merging and ﬁltering the modules (Step 3): it is possible that several seeds
converge to the same, or very similar biclusters. This step eliminates such
duplicates. To access the signiﬁcance of a module, we designed a robustness
measure that can be used to ﬁlter out spurious modules. This is done by
applying the ISA to scrambled input data in order to obtain a reference (null)
distribution for the signiﬁcance scores.

Module trees: the ISA works with two stringency threshold parameters, the
gene threshold and the sample threshold. ISA modules can be organized into a
directed graph, to which we refer as ‘module tree’. An edge from module A to
module B indicates that the ISA converges to module B from module A, with
the same threshold parameters that were used to ﬁnd module B. A module
tree provides a hierarchical modular description of a dataset.

3 IMPLEMENTATION

The ISA and accompanying visualization tools are implemented in
two R packages. The ‘isa2’ package contains the implementation

 

1376 © The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org

112 /§JO'SIBUJHOIPJOJXO'SOIlBIHJOJUIOIQ/ﬁdnq 11101; prBOIUAAOG

9IOZ ‘Ig lsnﬁnv uo ::

Modular analysis

 

A

1 ISA normalization 2 ISA iteration

3 Filter modules 4 Enrichment calculation

(Filtered) Normalized Transcription Filtered GO, KEGG,
ExpressionSet ExpressionSet modules modules etc. enrichment

 

|
5 Visualization

 

 

 

 

 

 

 

    

 

 

 

 

 

 

 

 

B 1 1| C 2 2.5 3 3.5 4
01 ' 4s 22 ' 21 13 ' ' '
-1 I rspntv: response to virus
1 26 29 oxygnt: oxygen transport
7 26 2 24 chrmta: chromatIn assembly
3 phsp—s: phosphoinositide—mediated signaling
2 20 12 19 gstrns: gas transport
5 h 36 h $35 DNArpr: DNA repair
p s— p s — . -
m 7 DNArr 1 35 luﬂ chmtxs- Chemmax's
C phs— 2 34
o 9
.4: 13 21
__ 11 25 25 _n
U 58 25 13 17
g 13 28 21
_1s
0 15 55 15 chrmta 16 29 chrmta 13 29
_ _
17 ‘_3 25
chm x 4 22 gstrn 21 27 gstrn 1 27 oxyn 1 31 1 28
19 _34 in ﬂu in in
rspn v z 22 rspn v z 22
2‘ ,1
I I I I I
 2 2.5 3 3.5 4

Fig. 1. (A) Work ﬂow of a typical modular analysis with the ‘eisa’ package. See text for details. (B and C) were generated using the acute lymphoblastic
leukemia dataset, (Chiaretti et al., 2004) and the ‘ALL’ R package. (B) Heatmap for a single module, showing coherent expression of the genes across the
samples. The red lines are the gene and sample scores. (C) Module tree. Each module is represented by a rectangle with its numeric id in the center. See
the deﬁnition of the edges in the text. Modules are colored according to their Gene Ontology enrichment P—values, the codes of the enriched GO categories
are shown in the top—left comer of the rectangles. The top—right comer shows the number of genes and conditions in the module. The gene thresholds used

for ﬁnding the modules are shown on the horizontal axes.

of the basic ISA itself; this package can be used to analyze
any tabular data. The ‘eisa’ package builds on ‘isa2’. It adds
support to standard BioConductor data structures and contains gene
expression—speciﬁc visualization tools (see Fig. l for examples).

Both the ‘isa2’ and ‘eisa’ packages support two workﬂows.
The simple workﬂow involves a single R function call and runs all
ISA steps (Steps l—3 in Fig. l) with their default parameters.

In the detailed workﬂow every step of the modular analysis
is executed separately, possibly with non—default parameters. This
allows the users to tailor the ISA according to their needs.

The ‘ei sa’ package implements a set of visualization techniques
for modules (see Fig. l for examples).

The ‘biclust’ package, (Kaiser et al., 2009), implements a
number of biclustering algorithms in a uniﬁed framework. The
‘eisa’ package includes tools to convert between ‘biclust’ and
ISA biclusters. This allows the cross—talk of the functions in the two
packages.

Additional information and a Matlab implementation of ISA are
available on the ISA homepage.

Funding: Swiss Institute of Bioinformatics; the Swiss National
Science Foundation (3100AO—ll6323/l); European Framework
Project 6 (through the EuroDia and AnEuploidy projects).

Conﬂict of Interest: none declared.

REFERENCES

Barkow,S. et al. (2006) BicAT: a biclustering analysis toolbox. Bioinformatics, 22,
1282—1283.

Bergmann,S. et al. (2003) Iterative signature algorithm for the analysis of large-scale
gene expression data. Phys. Rev. E, 031902.

Califano,A. et al. (2000) Analysis of gene expression rnicroarays for phenotype
classiﬁcation. In Proceedings of the International Conference on Computational
Molecular Biology, pp. 75—85.

Cheng,Y. and Church,G. (2000) Biclustering of expression data. In Proceedings of
the 8th International Conference on Intelligent Systems for Molecular Biology,
pp. 93—103.

Chiaretti,S. et al. (2004) Gene expression proﬁle of adult t-cell acute lymphocytic
leukemia identiﬁes distinct subsets of patients with different response to therapy
and survival. Blood, 103.

Gentleman,R.C. et al. (2004) Bioconductor: open software development for comp-
utational biology and bioinformatics. Genome Biol, 5, R80.

Getz,G. et al. (2000) Coupled two-way clustering analysis of gene microarray data.
Proc. Natl Acad. Sci. USA, 97, 12079—12804.

Hackstadt,A. and Hess,A. (2009) Filtering for increased power for microarray data
analysis. BMC Bioinformatics, 10, 11.

Ihmels,J.H. and Bergmann,S. (2004) Challenges and prospects in the analysis of large-
scale gene expression data. Brief. Bioinform, 5, 313—327.

Ihmels,J. et al. (2004) Deﬁning transcription modules using large-scale gene expression
data. Bioinformatics, 1993—2003.

Johnson,W. et al. (2007) Adjusting batch effects in microarray expression data using
empirical bayes methods. Biostatistics, 8, 118—127.

Kaiser,S. et al. (2009) biclust: BiCluster Algorithms. R package version 0.8.1.

Sharan,R. et al. (2002) EXPANDER: EXPression AN alyzer and displayER. Technical
report, Software package, Tel-Aviv University. Available at http://www.cs.tau.ac.
il/~rshamir/expander/expanderhtml.

Tanay,A. et al. (2004) Revealing modularity and organization in the yeast molecular
network by integrated analysis of highly heterogeneous genomewide data. Proc.
Natl Acad. Sci. USA, 101, 2981—2986.

 

1377

112 /810'smumofpioarxos3112m10jurorq//zd11q 11101; prBOIUAAOG

9IOZ ‘Ig lsnﬁnv uo ::

