Advance Access Publication Date: 10 October 2015

Bioinformatics, 32(3), 2016, 398—408
doi: 10.1093/bioinformatics/btv578

Original Paper

 

 

Systems biology

FogLight: an efficient matrix-based approach
to construct metabolic pathways by search

space reduction

Mehrshad Khosraviani‘, Morteza Saheb Zamani1'* and

Gholamreza Bidkhori2'*'T

1Department of Computer Engineering & IT, Amirkabir University of Technology, Tehran, Iran and 2Bioinformatics

Section, The Lister Institute of Microbiology, Tehran, Iran

*To whom correspondence should be addressed.
THe is currently with VTT Technical Research Centre of Finland.
Associate Editor: Alfonso Valencia

Received on February 9, 2015; revised on September 15, 2015; accepted on October 2, 2015

Abstract

Motivation: A fundamental computational problem in the area of metabolic engineering is finding
metabolic pathways between a pair of source and target metabolites efficiently. We present an ap—
proach, namely FogLight, for searching metabolic networks utilizing Boolean (AND—OR) operations
represented in matrix notation to efficiently reduce the search space. This enables the enumeration
of all pathways between metabolites that are too distant for the application of brute—force methods.
Results: Benchmarking tests run with FogLight show that it can reduce the search space by up to
98%, after which the accelerated search for high accurate results is guaranteed. Using FogLight,
several pathways between eight given pairs of metabolites are found of which the pathways from
C02 to ethanol are specifically discussed. Additionally, in comparison with three path—finding tools,
namely PHT, FMM and RouteSearch, FogLight can find shorter and more pathways for attempted

source—target metabolite pairs.
Contact: szamani@aut.ac.ir, gholamreza.bidkhori@vtt.fi

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

As time passes on, our knowledge of metabolism is being developed
and metabolic databases such as KEGG (Kanehisa et 61]., 2014),
MetaCyc (Caspi et 61]., 2014), and similar databases are evolving as
this information advances. However, our insight is still incomplete
and the gaps are being filled gradually.

Metabolic engineering, emerged in the early 1990s, is defined as
the directed modulation of metabolic pathways using methods of re—
combinant technology for the purpose of (over)pr0duction or accel—
erated production of fuels, chemical and pharmaceutical products
(Bailey, 1991). Metabolic pathways are the roadmaps in which a
biomolecule, namely metabolite, undergoes possible biotransform—
ations, either under the action of enzymatic catalysis or by spontan—
eous reactions. The problem of synthesizing these roadmaps is more

complex than the one referring to a tree—structured search network.
Hypergraphs are better representations for metabolic networks.
Since finding k—shortest hyperpaths of a hypergraph is an NP—
complete problem (Ausiello et 61]., 1992), the problem should be
solved heuristically.

Research on metabolic pathways is done in two complementary
categories. The analysis of metabolic pathways is motivated by the
rapidly increasing quantity of available information on the path—
ways. Some researchers try to analyze the pathways with certain
properties, like elementary ﬂux modes (Schuster and Hilgetag,
1994) and thermodynamic feasibility (Ullah et 61]., 2009). On the
other hand, some algorithms have been proposed to find or predict
possible pathways in order to convert a given source metabolite to a
given target metabolite. Some of these algorithms are based on one

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 398

91% ‘09 1sn3nv uo sepﬁuv s01 ‘erulomeg aIo Amie/nun 112 /§.IO'S[BU.IHO[p.IOJXO'SODBIHJOJUTOTQ/ﬁdllq 11101; pepeommoq

FogLight

399

 

of the branches of artificial intelligence (such as logic programming
(Darvas, 1988), evolutionary algorithms (Gerard et 61]., 2013), ma—
chine learning (Dale et 61]., 2010; Karp and Mavrovouniotis, 1994),
etc.), some algorithms have been proposed to find or predict possible
pathways in order to convert a given source metabolite to a given
target metabolite.

Kiiffner and his coauthors in (Kuffner et 61]., 2000) applied an in—
formed searching method, which is similar to (Mavrovouniotis, 1993),
on Petri nets derived from metabolic databases to find and enumerate
all valid pathways satisfying additional user—defined constraints. Petri
nets, directed bipartite graphs and state—transition graphs are the main
tools to model metabolic networks and apply some informed and unin-
formed approaches to them (Croes et 61]., 2006; Lim and Wong, 2012;
McShan et 61]., 2003; Rahman et 61]., 2005). In addition to these
approaches, various mathematical methods have emerged in the post—
genomic era to search for metabolic pathways. In the literature
(Beasley and Planes, 2007; Burgard et 61]., 2001; Jonnalagadda and
Srinivasan, 2014; Pey et 61]., 2011; Pharkya et 61]., 2004), the authors
detailed optimization models, based upon integer linear programming
(ILP) to search for plausible metabolic pathways.

Algorithms incorporating concepts from retrosynthesis have
been developed to search in the metabolic space, represented by
hypergraphs for desired pathways (Campodonico et 61]., 2014;
Carbonell et 61]., 2012; Cho et 61]., 2010). These algorithms bor—
rowed an idea from the allied field of synthetic chemistry in which
reversed chemical transformations are iteratively applied starting
from a target product to reach precursors that are endogenous to the
chassis. In Carbonell et al. (2012), two methods, one based on elem—
entary modes and the other based on a direct enumeration algorithm
were presented. As other approaches using retrosynthesis model,
novel metabolic routes have been efficiently screened by probabilis—
tic selection of metabolic pathways in Rodrigo et al. (2008) and
Yousofshahi et al. (201 1).

A brute—force method is an exhaustive search approach which sys—
tematically enumerates all possible candidates for the exact solution.
This is an effective approach in finding pathways but it cannot be
used for large networks, as the execution time of the algorithm grows
exponentially with the size of the network. One approach to amelior—
ate the exponential—time problem of the brute—force search is often to
reduce the search space. Sometimes a heuristic method is used to
obtain dramatic reduction of the candidates to all satisficing solutions
and speedup the process of finding the proper pathway. However, on
the contrary to brute—force, the heuristic approaches do not guarantee
to find a pathway even if there is one. On the other hand, one can re—
duce the search space by first constructing a small sub—network with-
out losing all candidates, and then applying the brute force method to
find all the proper pathways. The approach proposed in this article
follows this strategy using an analytical method.

This article presents an innovative solution to find all possible
distinct sets of coherent enzyme—catalyzed biochemical reactions (i.e.
metabolic pathways) through which the source compound is turned
into the target compound. To this end, an analytical processing tech—
nique based on matrix operations helps us to provide a search space
reduction strategy and find all desired metabolic pathways.
Moreover, our proposed algorithm can even find the k—shortest
paths by setting proper parameters.

Given that our proposed approach is based on matrix oper—
ations, the operational complexity of these operations depends on
the matrix dimensions. While the use of bipartite graphs challenges
the complexity in this context, we preferred to employ a more ap—
propriate model instead of the bipartite graph. Indeed, using the dir—
ected bipartite graph causes our approach to bear large spatial and

temporal costs (i.e. size of the memory and the amount of time
required to search through it) which stem from intensive increase in
the number of vertices and edges. For these reasons, we formulate
the biochemical reactions contained in the metabolic pathway data—
bases, e.g. KEGG, MetaCyc, by an AND/OR graph model.

And-Inverter Graph, Majority—Inverter Graph, and AND/OR
Graph are three different internal network representations used to
provide a suitable environment for modeling in a wide area of prob—
lem domains, such as logic optimization and synthesis (Amaru et 61].,
2014; Farm et 61]., 2005). Among these graph models, the use of
AND/OR graph and the search through it were proposed earlier
than the others (Bagchi and Mahanti, 1983). The AND/OR graph is
a typical graph in which the types of relations between vertices,
which can be either ‘AND’, ‘OR’ or a function of them, determine
the types of searching process steps that should be followed through.
The relations, i.e. ‘AND’ and ‘OR’, has been inspired by two simple
Boolean gates (i.e. Boolean operations) with the same names, and fi—
nally, the graph can be conceived as a Boolean circuit.

Among the aforementioned models, AND/OR graphs can better
represent metabolic reactions. Since the introduction of the AND/
OR graph, it has been used in various applications and algorithms.
To this end, we visualize the network of the biochemical reactions
as the Boolean functions consisting of two—variable AND/OR oper—
ations. For example, in the metabolic reaction m1 —1— m2 —> 1413, the
metabolite M3 is produced if the metabolites m1 and 1412 are both
present. That is, the relation between the metabolites m1, m2 and
M3 is given by the Boolean function m3 : m1 AND m2.
Conversely, considering two reactions m1 —> 1413 and m2 —> 1413, the
relation between the corresponding metabolites can be interpreted
as the Boolean function M3 : m1 OR 1412, which means the produc—
tion of M3 depends on the existence of m1 or m2. Accordingly, be—
fore developing the proposed approach to find the pathways in a
given metabolic network (Section 2.2), we first describe our AND/
OR graph model and its properties against the conventional model
in Section 2.1 and the proposed matrix representation in Section
2.2.1. Section 3 is devoted to results and discussion and finally, a
conclusion is presented in Section 4.

2 Materials and Methods
2.1 Data model

All elementary biochemical reactions, in the sense that each one
takes one basic step (association, dissociation or conversion) to com—
plete, can be represented by one of the two equations of the form (1)
or (2) which are used to represent irreversible and reversible reac—
tions, respectively.

S1+Sz+---+Sm—>P1+P2+---+Pn 

In the above equations, Si’s and Pi’s represent the substrates and
the products in the biochemical reactions, respectively. Additionally,
m and 11 show the number of metabolites participating as either sub—
strates or products on both sides of the arrows in the equations.

The first and important step towards finding metabolic pathways
is modeling all biochemical reactions and their participating metab—
olites in the metabolic databases by a computational data structure
usable in algorithmic approaches. Obviously, an appropriate model
to satisfy this need is a directed graph, but conventional directed
graphs cannot represent the intrinsic properties of such a data set.
Directed hypergraphs are alternatives to standard directed graphs to

91% ‘09 1sn3nv uo sepﬁuv s01 111110;th aIo Amie/nun 112 /§.IO'S[BU.IHO[p.IOJXO'SODBIHJOJUTOTQ/ﬁdllq 11101; pepeommoq

400

M. Khosra viani et al.

 

represent the facets of the database contents. Thus a model based on
the hypergraph theory was suggested in (Pearcy et al., 2014). A
hypergraph is a generalization of a graph in which, in contrast to the
standard one, its edges called hyperedges can be attached to a set of
vertices and not only to two vertices.

Typically, the cofactors or the currency metabolites (Huss and
Holme, 2007; Ma and Zeng, 2003; Wagner and Fell, 2001) of the
reactions, i.e. the metabolites taking part into large number of reac—
tions, e.g. NADPH, ATP, COZ, play a part often in the metabolic re—
actions not as a main compound. The pathways containing the
intermediate reaction steps, in which only these molecules are either
produced or consumed, should not be considered when an algorithm
is looking for some relevant pathways. In consequence, the shortest
paths found by some previous algorithms (Latendresse et al., 2014;
Rahman et al., 2005) do not correspond to relevant metabolic path—
ways. Since these molecules are not included explicitly in some path-
way databases, we use this feature in our approach to avoid
unnecessary complications. Additionally, instead of using the dir-
ected bipartite graph (today’s conventional model which can be seen
in some papers like (Beasley and Planes, 2007; Carbonell et al.,
2012; Kuffner et al., 2000)), we formulate the directed hypergraph
representing biochemical reactions of the metabolic pathway data—
bases with a directed AND/OR graph model to reduce the
space complexity of the search space (A sample AND/OR graph and
its corresponding directed bipartite graph can be found in
Supplementary Fig. S1). In the following two subsections, we de—
scribe our model by recalling some definitions from graph theory.

2.1.1 Definitions and notations (from graph theory)
In this subsection, three basic definitions are described. We use the
first two definitions below to define directed AND/OR graphs.

Definition 1: A labeled digraph is a 4—tuple G = (V, A, LV,LA)
in which

° V and A = {(12,, 12,) : 12,-,12,- E Vand (12,, 12,) 7E (12,, 12,)} are
nonempty sets of vertices and directed edges (also called arcs), re—
spectively. The vertex 12,- E V, called initial vertex, is the source
vertex from which the arc (12,, 12,) starts while the vertex 12,- E V,
called terminal vertex, is the sink vertex to which the arc (12,, 12,)
points.

° LV and LA describe nonempty sets of the unique identiﬁers for
labeling the vertices and the arcs within G, respectively.

Definition 2: G’ : (V, A, 114V, LA) is known as a labeled multidi-
graph if it is permitted to have multiple arcs with the same source
and the same sink.

Definition 3: A directed AND/OR graph is defined as a labeled
multidigraph with no self—loops where some incoming (or outgoing)
edges of the vertex 12,- E V may have identical and non—unique labels.

The labeling technique enables us to define a specific identity for
the relationship between the set of edges directed towards/from each
of the vertices of the multidigraph G’; this identity reflects a Boolean
function using a combination of two main Boolean algebraic oper—
ations, namely the conjunction ‘AND’ and the disjunction ‘OR’ op—
erations. In other words, the set of incoming vertices to vertex 12,-
with an identical edge label ﬁe E LA in a given directed AND/OR
graph represents the members of a conjunction or the inputs to an
‘AND’ gate. On the other hand, the inputs to an ‘OR’ gate, with the
output 12,-, are provided by the set of vertices connected to the incom—
ing edges with distinct labels.

2.1.2 Metabolic AND/ OR graph

Here, we look at a modeling of metabolic networks via the directed
AND/OR graph. Several remarks follow from the above definitions
and comparison between the AND/OR graph and the bipartite
graph, both representing metabolic networks.

As stated before, the directed bipartite is a graph with two types of
vertices, namely biochemical reactions and metabolites. In contrast, the
set of vertices V in our AND/OR graph model, i.e.
G’ = (V, A, LV, LA), includes only metabolites. Additionally, the
biochemical reactions are placed in the set A of arcs of graph G’.
Regarding the structure of these two models, the number of vertices, as
well as edges, in the metabolic AND/OR graph is less than the ones in
the bipartite graph (these claims are further discussed in Supplementary
information). Furthermore, taking reversible reactions into account re—
sults in exponential growth of the total number of paths.

Finally, LA and LV are two disjoint nonempty sets of reaction
and compound identifiers, respectively, used to label the arcs and
vertices of the graph G’. In a database, for instance, each identifier is
a 6—character label (e.g. C00084 or R00746) starting with either the
letter C for compounds (i.e. metabolites) or the letter R for reactions
and ending with a unique 5—digit number. Considering the given
labels of the vertices and the arcs in Figure 1A, which start with
either the letter C or the letter R, the subscripts a, b, f, etc., denote
some particular 5 —digit numbers.

2.2 The proposed algorithmic approach

Despite the ability of being a general problem—solving technique, the
exhaustive search technique can be impractical for large—scale prob—
lems due to the combinatorial nature of some problems, in particu—
lar, the problem of finding metabolic pathways, and their large
demanding search—space. In order to control the complexity of
searching through the metabolic networks by the brute—force search
and speeding it up, we exploit a matrix—based approach to reduce
the size of the search space.

Since matrix—based computation is an indispensable prerequisite
for our algorithm, in the following, we suggest a matrix representa—
tion for an AND/OR graph used then by the algorithm described in
Section 2.2.2.

2.2.1 Matrix representation of an AND/ OR graph

In this section, we define a new matrix representation for directed
AND/OR graphs. This representation consists of two square matri—
ces as follows:

(1) An asymmetric n—by—n binary matrix Am“, corresponding to an
AND/OR graph G’ : (V, A, 114V, LA) whose entry A,,- in row i
and column j is deﬁned as:

{1 if there is an arc from vertex 12,- EV to 12,- E V for i 7E j
i] Z

0 otherwise

(2) An asymmetric n—by—n label matrix Lnxn used as a way of dis—
tinguishing between conjunction and disjunction relations as
well as two different conjunction relations. The entry L,-,- repre-
sents the type of relations, conjunction or disjunction, partici-
pating in the arcs (12,, 12,). In other words, each entry L,-,-
participating as an element of a logical conjunction is tagged
with a label ﬁe:

E, if arc e connected from 12,- EV to 12,- EV participates
L,,-: as an element of a conjunction relation
NULL otherwise

91% ‘09 1sn3nv uo sejeﬁuv s01 1111110311123 310 Amie/nun 112 /§.IO'S[BU.IHO[p.IOJXO'SODBIHJOJUTOTQ/ﬁdllq 11101; pepeommoq

FogLight

401

 

 

  

 

 

   

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

   
     

   
 

  

 

 

 

 

 

 

 

 

 

r “x
DB: KEGG P'A'I'I-I'II'II'A‘I'
I]
Illtlfrit L o
.I _. w L H
z m, l. 1 =-
p I. 1 1 a.
=- In- I..- II at
a a. M l I?!
or fl: '- n-
F" H: L -:|.
en a; {I
m p. I] -m--
-- matrit uq
—-- e: d'_1 u :- Eil- E! It] EI m It: . I-— 
(M- II
Step ii]
Input two metabolites at. a pair of
Sour-one and Target:
Step 11 U  Step 3]
Initialize row vector {39 Initialize row lrector f“
H "- D N 1- I]
r..: 2":  
 II: I .EI.|:I|...._iiI. l"! ] r1: nl=[ a Iu‘ﬂI-“IEL ] ]
it I.
Step 21 5”” '4)
f [I I:| [I] (r+|] (t' “‘21
1' I T
{H - Update ﬁllmhsing matrix I f; bi- Update film losing matrix J: T
N "- H+1 H "- N+1
“ﬂ IEHEIS or 15.11223 or “D
t'mﬂfﬁource) = 1 ?
K. .2’
direction of .-"'-.  direction of
forward-traversing  “.1:  I '  ' .
‘—_h " --" .EI'I.
. .- - .r" ._
' Emil-II _-—[ff-:- #:1-3"I oar-1" Tamil loot-ou- ——  1:] — I:e ——-. liege!
 ‘ \Eer’ .2"  ch ' _

.‘

ill]: ®—i_j“_}' 5'11”) fit“, {E}
..I | ‘1 “I‘-

 

em

if

 

 

Search through the final
reduced metabolic network
' " using a modified [IFS Algorithm

) Filter out unbalanced pathways by using the metabolic balance equation 3 -v = B

 

 

 

 

Fig. 1. Overview of FogLight approach: (A) Hypergraph representation of a
metabolic network, (B) Matrix representation of the network, (C) Logic circuit
diagram of the boxed subgraph, (D) The remaining vertices at the termination
of Step 2 (all with the Boolean value ‘1’); the green elliptical vertex is initial-
ized by the Boolean value ‘1' in Step 1. Lines 7—12 of Supplementary Figure
84 show the pseudocode of the Boolean SpMV of Step 2 using Definition 6.
(E) The remaining vertices at the termination of Step 4 (all with the Boolean
value ‘1'); the green vertex is initialized by the Boolean value ‘1' in Step 3.
Lines 20—28 of Supplementary Figure 84 show the pseudocode of the
Boolean SpMV-T of Step 4 using Definition 7. (F) The reduced appropriate
part between Source and Target through which search will proceed. All
parts of this figure can be found in Supplementary information

The entries labeled by ‘NULL’ values are either participated in
a logical disjunction or there is no arc from 12,- to 12,- in the AND/
OR graph G’.

In the metabolic AND/OR graph, the label ﬁe E ILA can be the
unique name of the reaction e in which the initial and terminal
vertices are involved or any other distinctive label.

In brief, the two above matrices specify three types of relations
(‘OR’, ‘AND’, or no relation) between vertices of the AND/OR
graph as follows:

1. If there is an OR relation between the two arcs (12,, 12,) and
(12k, 12,), then A,,- = Ak, = ‘1’ and L,,- = Lk, = ‘NULL’.

2. If there is an AND relation between the two arcs (12,, 12,) and
(12k, 12,), then A,",' = Ak, = ‘1’ and L,‘,' = Lk, I be.

3. If there is no arc from vertex 12,- to vertex 12,, then A,,- = ‘0’ and
L,,- = ‘NULL’.

Figure 1B demonstrates an overview of the whole matrix repre—
sentation of the AND/OR graph corresponding to the hypergraph of
Figure 1A. Each row and column of the two matrices of Figure 1B
corresponds to a unique metabolite. The shaded areas of the matrix
views are particularly used to display only the boxed subgraph
shown in Figure 1A. All non-specified entries in these areas of matri—
ces A and L in Figure 1B are respectively set as ‘0’ and “NULL”.

For example, in Figure 1B, there is an arc from Ci to Ct which
is represented by A[Ci][Ct] : 1 in Figure 1B. Moreover, since there
are more than one incoming arc to the terminal vertex Ct with
the label Rx (i.e. A[Ci][Ct] :AICjMCt] : 1), we store it in the
corresponding entries of the label matrix L in Figure 1B, i.e.
L[ci][ct] = L [c,-] [ct] = Rx.

2.2.2 FogLight
A reduced search space consists of a subset of vertices and edges of
the initial graph between two given vertices as the source and target
points with the aim of finding pathways. In order to do this and
speed up the pathway finding in the metabolic networks, we propose
an efficient algorithm, called FogLight, using our matrix representa—
tion of the metabolic AND/OR graph. To better understand how
FogLight reduces the graph (Fig. 1A), we exemplify its steps (Section
2.2.2.2) in Supplementary information.

Before describing our algorithm in details, it is necessary to intro—
duce some mathematical aspects of the materials used in the algo—
rithm as well as the related definitions.

2.2.2.1 Definitions and notations (from linear algebra). The
Boolean algebraic operations on binary matrices are analogous to
the real matrix operations, except we use the Boolean operators /\
(logical AND) and V (logical OR) on the binary elements instead of
multiplication and addition on real numbers, respectively.

Definition 4: Let A : [A,-,-] be an n-by-n binary matrix and
(i : (b1, b2, b3, . . . ,b,,) be an n—dimensional binary row vector. The
Boolean product of (i and A (denoted by (i (D A) is an n—dimensional
binary row vector p : (p1, p2,p3,  ,p,,) whose entries are given
by p,- : (b1 /\A,-1) v (192 /\A,-2) v (b3 /\A,-3) v - - - v (19,, /\A,-,,) for
1 g i g n.

Definition 5: Given n Boolean variables 141,142,143, . . . ,u,, of a bin-
ary vector u, Boolean function 12ector #2 (f1,f2,f3,  ,f,,) is
defined as a binary vector whose entry  represents a binary value
calculated from a Boolean function F,(u1,u2,u3,  ,u,_1,

“1+1,  .u,).

91% ‘09 1sn3nv uo sejeﬁuv s01 1111110311123 310 Amie/nun 112 /3.IO'S[‘8UJHOIpJOJXO'SOTIBIHJOJUTOTQ/ﬂClllq 11101; pepeommoq

402

M. Khosra viani et al.

 

Considering Figure 1A and its corresponding logic circuit dia—
gram made up of basic logic ‘AND’ and ‘OR’ gates in Figure 1C, the
Boolean value of f5, and f5]. are obtained by the functions F5, and F,,,
respectively, where each bi12al(Cx) represents the binary value of ver—
tex Cx.

11,, = ((bival(ci) A bival(Cj)) v (bival(Cj))
v(bz‘ual(c1) A bi12a1(Cm) A bi12a1(Cn)))

F, = ((bival(ca) A bi12a1(Cb)) v bival(Cf))

I

Definition 6: Assuming an asymmetric real sparse matrix, an effi-
cient storage format, called Compressed Sparse Row (CSR) format,
is widely used in sparse matrix-12ector multiplication (SpM V).

Let n,,z denote the number of nonzero entries of an n—by—n sparse
binary matrix A : [Ag]. CSR storage format is used to store A into
three arrays with the following characteristics:

1. The ﬁrst array is 12al, of length n,,z, and holds all nonzero entries
of A as they are traversed in a row—wise fashion.

2. An integer n,,z-ary array, namely col_idx, is the second array
which contains the column indices of nonzero entries A,,- of the
original binary matrix A. That is, if 12al[le] = A,,- = 1, then
col_idx[le] : j, for 1 g 12 g n,,z.

3. The last array is an integer array named rptr which is used to
store the indices of the beginning of each row in both arrays 12al
and col_idx; it means that if A,,- : 1, then rptr[i] 3 la <
rptr[i—I— 1], for 1 ﬁle gn —l— 1.

However, the above—mentioned format can be modified to save
binary sparse matrices efficiently. To this end, we choose not to save
the array 12al since its all elements are ‘1’ and the Boolean multiplica—
tion process of SpMV does not need it in practice. We name this
new storage as binary CSR (b-CSR) format which is defined by only
two arrays col_idx and rptr.

Definition 7: In contrast to b—CSR, another storage format,
namely binary Compressed Sparse Column (b-CS C), is defined to be
used in the transposed variant of Boolean SpMV (BSpMV—T). A
sparse binary matrix AT : (A,,-] can be stored into the following
two arrays (see Supplementary Fig. S3A (S3B) for the b—CSR (b—
CSC) storage format of the upper matrix of Fig. 1B):

1. The ﬁrst array is rou2_idx which contains the row indices of non—
zero entries a,-,- of A. That is, if 12al[le] : A,,- = 1, then
rou2_idx[le] : i, for 1 3 la 3 n,,z.

2. Column indices of the ﬁrst nonzero element in each row of ma—
trix AT are referred to by an integer value saved in array cptr.

2.2.2.2 Matrix-based algoritbm. Using the matrix modeling of the
AND/OR graph, we propose a matrix—based algorithm to prune the
unrelated off—the—path pathways between the two given vertices of
source and target (Fig. 1, Step 0). For this purpose, the graph is inde—
pendently traversed in two opposite directions, i.e. one from the ver—
tex Source and the other from the vertex Target. Since Steps 1—2
and Steps 3—4 are done independently (as shown in Fig. 1), each of
them can be implemented either sequentially or in parallel.

In the AND/OR graph, the vertices are traversed from the given
source, level by level and the entries of the vector are assigned by a
Boolean value according to its corresponding Boolean functions;
note that all vertices (except the source vertex) have been initialized
by ‘0’. A similar traversal is performed from the target. Finally, only

vertices assigned twice by the Boolean value of ‘1’ are marked as the
intermediate vertices to find the paths. Hereafter, in order to find
paths between the pair of source and target, in the second stage, we
search through the reduced space by successive Depth—First
Traversal (with ability to backtrack) considering the AND—OR rela-
tions. These processes are repeated until all valid paths are enumer—
ated. The above processes make the search for a path (or paths)
much more efficient.

Our proposed algorithm (Fig. 1, Steps 1—5) proceeds in the fol—
lowing steps (the detailed pseudocode is shown in Supplementary
Fig. S4):

(Step 1) Forward-initialization: To march in time, the initial solu—

20) must be known. That is, at t = 0, the initial

tion ﬂfwa
Boolean values of all the vertices must be speciﬁed. To
this end, by choosing a starting vertex 12,- E V, 1 3i 3 n
and assigning the Boolean values of ‘1’ to it and ‘0’ to the
other ones, the Boolean function vector ﬂfw, for forward
traversal is initially constructed from the AND/OR graph.
(Step 2) Forward-traversing: Here, The strategy is to march in

’20)) to some ﬁnal

time from the initial values (i.e. ﬂfuf
ones (i.e. ﬂfwﬂm”). Considering a Boolean value of ‘1’ as—
signed only to the given source substrate in the previous
step, the Boolean values of the other vertices in the graph
(which are all initialized to ‘0’) are re—evaluated. The re—
evaluation process formulated by Eq. 3 is done until the
maximum default depth limit N is reached or the target
vertex is met during the vertex— and edge—traversing. This
equation can simply be written as an iterative procedure
depending on two primary parameters, namely an
n-dimensional Boolean function vector if“, and an n—by—n
matrix with the binary value of ‘1’ on its main diagonal
and the values of the entries in the binary matrix Anxn
elsewhere.

ﬂwa—H) :  G (Anxn ‘l‘ IJnxn) 

where Anxn is the binary matrix representing the connec—
tions in the given AND/OR graph and 3,,X,, is a binary
identity matrix with the values of ‘1’ on its main diagonal.
Considering Eq. 3, we were able to march in time by con—
structing the vector if“, at the next time—step (denoted by
ﬂfwaﬂl) using the fact that we know its values at the previ—
ous t1me-step.

(Step 3) Backward-initialization: Next, by choosing an ending
point 12,- E V, 1 g j g n, ﬂbw is deﬁned as a Boolean vector
composed of the initial binary values to be assigned to all
the vertices.

(Step 4) Backward-traversing: In this step, the re—evaluation pro—
cess is done independent of the last Boolean values ob—
tained from Step 3. Considering ‘1’ as the Boolean value
of the given vertex corresponding to the target product,
the Boolean values of the other vertices in the graph
(which are all initialized to ‘0’) are re—evaluated. The re—
evaluation process formulated by Eq. 4 is done N times,
where N is the maximum depth limit obtained from the
ﬁrst step (value of N was chosen as 23 in our experiments
(Yousofshahi et al., 2011)).

To ﬁnd the next values of ﬂbwaﬂl from the current values
in ﬂbww, we use

ﬂbwU—H) : ﬂbwm G  + I1mm) 

9mg ‘09 1sn3nv uo sejeﬁuv s01 ‘121uJoggI123 go Amie/nun 112 /310's112umo[pJogxos311emiogugogq//:d11q uIOJg pep1201umoq

FogLight

403

 

where AT is the transpose of the binary matrix Am".

(Step 5) Boolean conjunction: The meet of the two Boolean values
obtained from Steps 2 and 4 for each vertex 12,- E V leads
to the calculation in this step, as formulated below:

ﬂﬂnal : ﬂfwﬂnal A ﬂbwﬂnal (5)

Here, using the graph representation of a given metabolic net—
work, the above five steps are briefly explained. Figure 1A shows
this graph in which all the vertices, including Source and Target,
are the metabolites and denoted by the labels of the compound iden—
tifiers. The hyperedges have also been labeled with the reaction
identifiers.

Given the two compound identifiers as Source and Target,
the algorithm attempts to find paths between them. It utilizes the
five above steps to prune off—the—path branches and mark a small
portion of the large network by the Boolean value of ‘1’. The sub—
graph consisting of the marked vertices is then used in the second
stage for searching the path exhaustively. Finally, the set of found
pathways, namely IP, are checked to see if each individual pathway p
E IP satisfies the steady—state condition subject to the stoichiometry
constraints. To this end, the following ﬂux balance equation (i.e. a
system of Nmfp metabolites involved in Nrfp reactions in the path—
way) is employed:

8-u=0 (6)

where 8 is the Nmfp >< Nrfp stoichiometry matrix, corresponding to
each pathway p E IP, and u is the Nrfp—dimensional reaction rate vec—
tor (also called flux vector), whose ith component represents the
rate (or ﬂux) of reaction i. At the end if for some of the pathways,
there is no vector a which meets the flux balance constraint, it is fil-
tered out from the final set of results.

As seen in Step 2, the Boolean value of each vertex of the net—
work is assigned in each time—step by applying the Boolean function
of the vertex—inputs of the vertex from the previous level (see Eq. 3);
this is done by employing matrices A and L. For instance, the
Boolean values of if“, at t = 1 depend on the known values of that
Boolean function vector at the previous time (denoted by ﬂfwazol)
which is initialized in Steps 1. In this step, the Boolean value of
Source in ﬂfwazol is initialized by ‘1’ and the others by ‘0’. Then,
by substituting it in Eq. 3, and then, using matrix L, the new
Boolean values of if“, at the next time—step, i.e. t = 1, are re—eval—
uated. This process is repeated in the forward direction until the
Boolean value of Target becomes ‘1’ or the depth limit is reached.
As a result of this process in forward direction, the Boolean values
of the vertices Ca, Cb, Ci, Cj, Ck, C1 and C, between two vertices
Source and Target will be ‘1’ (as shown in Fig. 1D). The same
procedure is performed from Target to Source to mark the verti—
ces in reverse direction (Fig. 1E). Finally, only the vertices with both
forward and backward marks as ‘1’ are kept which are Ca, Cb, Cj,
C1 and C, (as shown in Fig. 1F). These vertices and their correspond—
ing arcs form on—the—path pathways from Source to Target. As
seen in Figure 1F, the vertex with the label C1 is assigned twice by
the Boolean value of ‘1’ and consequently, it is kept in the subgraph
but the pathway containing this vertex is discarded in the second
stage.

3 Results and Discussion

Metabolic engineering has the potential to produce fairly large
quantities of a wide variety of chemicals from readily available
materials. To achieve this goal, many metabolic pathways or

product—specific enzymes have been created, modified and engin-
eered and then transferred and combined into the microbial hosts.

FogLight was run in two stages to search through the metabolic
network containing two different sets of organisms in order to find
the shortest and the all paths from a source to a target over a con—
stant period of time (i.e. 2000 s). The new shortest paths found can
be used to define minimal gene sets for designing artificial genomes.
The number of pathways found by FogLight between two distinct
materials is summarized in Table 1 where each row corresponds to
one pair of source—target metabolites. N/A in the table means that
no pathways were found in that period of time, e.g. rows 2 and 5
and N/I means that the metabolic network of the selected organisms
does not consist of the source or target metabolites, (e.g. row 1 in
which Enterobacteriaceae family has no Triacylglycerol).

As a result of the first stage of FogLight, a reduced space (subnet—
work) is obtained by pruning off—the—path arcs of the initial (unpro-
cessed) network. The amount of this reduction was reported in the
fourth and eighth columns of Table 1. Clearly, no space reduction is
possible when the brute—force method is only used. In this table, the
percentage of reduction in search space is calculated in terms of the
number of edges reduced in the initial network. In fact, the number
of edges to be processed in the brute force algorithm can became too
large and counting them will be impractical. For example, if the
average branching factor of the graph is 4 and the number of levels
to be searched is 20, then this number will amount 420.

In this table, minimal reaction set is the minimum number of bio-
chemical reactions (i.e. shortest paths) for production of a target me—
tabolite from a source. This minimum itself and the number of it
have been reported in columns 6 and 5, respectively. Details of the
shortest pathways found by FogLight within the reaction network
(the compound network) related to conversions from a given source
to a target (listed in Table 1) can be found in Supplementary Table
S1 (S2). Additionally, the values of reaction ﬂuxes for the steady—
state pathways have been reported in the 4th column of
Supplementary Table S1. For verification of the steady—state condi—
tion of these pathways, an Nrfp-by-Nrfp system of linear equations in
the form of Eq. 6 is solved and the vector value(s) of u that satisfy it
are obtained.

Considering the metabolic network containing all organisms,
FogLight was run to find the shortest paths and their results were
compared with the results of the brute—force method, as an optimum
global search technique with high runtime cost. The results show
that in most cases, the optimal solutions (for depth—limit Z 6) can be
found by FogLight in much less time (by one order of magnitude) in
comparison with the brute—force method. The only case where
FogLight takes more time is the last row of Table 1. This is because
the shortest path is very short in this case and brute force can find it
in a short time whereas FogLight attempts to reduce the graph in the
first stage and this has a runtime overhead.

FogLight can be highly beneficial in finding relevant non-natural
pathways when it is given a source and a target metabolite. As
shown in Table 1, we compared FogLight to PHT (Rahman et al.,
2005) (the new version released in 2011), FMM (Chou et al., 2009)
and RouteSearch (Latendresse et al., 2014), three web—based path—
finding tools. While RouteSearch uses EcoCyc/MetaCyc as the
source database, PHT and FMM have been developed to reconstruct
metabolic pathways from one metabolite to another based mainly
on KEGG database.

Among the above three tools, RouteSearch and FMM, like our
approach, can search for finding paths with different lengths all at
once without preliminary setting of their length. Their results,
including the information about the shortest paths and all paths

9mg ‘09 1sn3nv uo sejeﬁuv s01 ‘121uJoggI123 go AltSJQAtUn 112 /310's112umo[pJogxos311emiogugogq//:d11q uIOJg pep1201umoq

404 M. Khosra viani et al.

 

Table 1. Comparing FogLight with brute-force algorithm and three web-based path-finding tools

 

Shortest path—finding All path—finding

 

 

Source Target Method Space No. of Size of Total timed Space Total no. of Maximum
reduction minimal minimal (8) (><102 ) reduction pathways pathway
percentage reaction set reaction set percentage length

Triacylglycerol Fructose FogLight a’C 97.42 3 6 0.66 51.84 37 10

Brute—force Alg.a 0 3 6 4.77 0 N/ A N / A
PHT a — N /A N /A N/A — — —
FMM a — 3 6 0.08 f — 34 10
FogLight b N/I N/I N/I N/I N/I N/I N/I
RouteSearch 1’ — N/I N/I N/I — N/I N/I
Glucose NADPH FogLight a" 70.10 1 10 0.14 52.38 18 10
Brute—force Alg.a 0 N/A N/A N/A 0 N/A N/A
PHT a — N/A N/A N/A — — —
FMM a — N/A N/A N/A — N/A N/A
FogLight b 63.59 1 10 0.07 38.79 13 10
RouteSearch b — 2e 3 0.09 f — 616 5
Glucose Ethanol FogLight a’C 89.1 1 1 6 0.27 5 1.9 1 74 1 0
Brute—force Alg.a 0 1 6 1.45 0 N/A N/A
PHT a — 1 10 0.26 f — — —
FMM a — 9 8 0.08 f — 10 9
FogLight b 78.49 2 7 0.42 38.79 8 14
RouteSearch b — 2e 4 0.10 f — 736 6
Glucose Arginine FogLight a’C 82.50 3 8 0.91 51.82 33 14
Brute—force Alg.a 0 3 8 5.28 0 N/A N/A
PHT a — 3 8 0.30 f — — —
FMM a — 10 9 0.08 f — 11 10
FogLight b 67.33 1 9 0.94 38.79 20 14
RouteSearch 1’ — 1e 5 0.09 f — 38C 6
Glucose Valine FogLight a’C 90.88 1 8 0.71 51.95 9 1 1
Brute—force Alg.a 0 N/A N/A N/A 0 N/A N/A
PHT a — 1 8 0.26 f — —
FMM a — 9 0.08 f — 3 9
FogLight b 67.29 1 9 0.92 38.79 5 13
RouteSearch b — 8e 5 0.09 f — 666 6
Glucose Acetate FogLight a’C 93.36 1 5 0.08 51.67 28 9
Brute—force Alg.a 0 1 5 0.07 0 N/A N/A
PHT a — 1 5 0.26 f — — —
FMM a — 3 6 0.08 f — 42 10
FogLight b 86.12 1 6 0.13 37.50 15 7
RouteSearch b — 8e 5 0.10 f — 1 (+796) 6
Glucose Tryptophan FogLight a’C 96.31 1 6 0.09 51.80 11 9
Brute—force Alg.a 0 1 6 0.13 0 N/A N/A
PHT a — 1 6 0.29 f — — —
FMM a — 1 15 0.08 f — 6 17
FogLight b 88.73 1 7 0.05 38.79 25 13
RouteSearch 1’ — 2e 4 0.09 f — 78C 6
C02 Ethanol FogLight a’C 98.48 2 3 0.05 51.63 18 8
Brute—force Alg.a 0 2 3 0.03 0 13 7
PHT a — 1 (+36) 4 0.27 f — — —
FMM a — N/A N/A N/A — N/A N/A
FogLight b 93.60 3 5 0.38 38.79 35 9
RouteSearch b — 2 (+66) 3 0.09 f — 16 (+756) 9

 

For comparisons between our approach (FogLight) and brute-force algorithm; the metabolic search spaces were assumed as follows:

aFor the metabolic network containing all organisms.

bFor the metabolic network containing family Enterobacteriaceae.

cDetails of the connected reaction and compound networks of the shortest pathways can be found in Supplementary Tables 81 and S2, respectively.
dIn FogLight, the search space is reduced in less than 2 s on a Quad-Core 3.8 GHZ Intel Core i5-35 70 with 8 GB of physical memory.

6 The numbers indicate the number of biologically irrelevant paths from all of the found pathways.

fThese runtimes are highly dependent on their server’s hardware characteristics and Internet trafﬁc as the experiments are performed on the web.

found by those two, have are presented in Table 1. However, since the table, the final results of PHT are similar or inferior to the results
Pathway Hunter Tool (PHT) needs the user to set the path length, obtained by FogLight.

We also noticed that some of the pathways found by these PHT,
umns of the table are left empty for this tool. In some cases shown in FMM, and especially RouteSearch are biologically—irrelevant, due to

we searched for the shortest paths and therefore, the last two col—

910z ‘09 1sn8nv uo sejeﬁuv sorg ‘121uJoggI123 go [{1gSJeAgun 112 /810'8112umo[pJogxosoneunogugogq//:d11q urogg pep1201umoq

FogLight

405

 

the existence of one or more currency metabolites as the intermediate
compounds in the pathways. The number of these pathways has been
differentiated in parentheses by the superscript letter ‘e’ in Table 1.

As an illustration, let us consider the third row of Table 1 in
which the results (i.e. for the pathways found between glucose and
ethanol) of FogLight have been compared with Brute—force
Algorithm and the three above—mentioned web—based tools. In this
particular example, brute—force, as an infallible but time—consuming
technique, was employed and found one shortest biologically—rele—
vant pathway with a length of 6. For comparison, we found the
same result by using FogLight in shorter time. Our strategy is to re—
duce the large metabolic network into a sub—network according to
glucose and ethanol (i.e. the given source—target pair) and search
exhaustively, but in shorter time, through the reduced network (i.e.
nearly %11 of the original network). PHT and FMM have respect—
ively detected 1 and 9 shortest paths with lengths of 10 and 8 which
are longer than the optimum length of 6 found by FogLight.

Considering a metabolic network containing family Enterobac-
teriaceae, FogLight searched through %21.5 of the whole search—
space and detected two shortest paths of length 7 while RouteSearch
discovered two shorter paths (i.e. with length of 4). However, the
shortest paths, and even all the paths of length 5 and 6, found by
RouteSearch are biologically—irrelevant and implausible because
these paths pass through ADP and NADH, two of the currency me-
tabolites listed in Table 2.

The time complexity analysis of FogLight shows that in the
worst—case, the growth of execution time is linearly dependent on
the number of reactions. That is, it is always possible to find a con—
stant coefficient K, for which the following relation is satisfied:

TFogLigbt < K-Nbr

where TFOgL,g/,, is FogLight’s execution time and Nb, is the number
of reactions. As shown in Figure 2, the order of execution time of
FogLight is much less than that of the brute—force method in terms
of the time complexity (discussed further in Supplementary
information).

The first seven rows of this table enumerate the pathways
through which glucose is converted to the remarked metabolites by
considering two metabolic networks of all organisms versus
Enterobacteriaceae. The reason for selecting these usual metabolites
(i.e. glucose, arginine, etc.) as the inputs to FogLight is to show that
our approach can search correctly and rapidly through the meta—
bolic networks and find some new pathways which did not even
exist naturally. On the other hand, we selected a pair of source and
target metabolites between which there is no natural pathway

Table 2 Currency metabolites and their corresponding IDs

 

KEGG compound identifier Compound name

 

c00001 H20
c00002 ATP
c00003 NAD+
coooo4 NADH
coooos NADPH
coooos NADP+
c00007 OZ
c00010 CoA
c00014 NH3
coooso H+
coooos ADP

 

(shown in the last row of Table 1) and searched through the net—
works to find whether there are any pathways between them or not.

Figure 3 shows the entire metabolic network containing the
pathways of all species (Fig. 3A) and the appropriate part extracted
by our algorithm (Fig. 3B).

These two selected metabolites play key role in development of
renewable biofuels (ethanol, isobutanol, isoprenol, etc.) which have
drawn significant attention in recent years (Machado and Atsumi,
2012; Tran et al., 2014; Zheng et al., 2013). In addition to natural
biofuel—producing systems, recent advances in metabolic engineering
have made industries able to produce biofuels through several non—
native pathways. Since ethanol (labeled as C0046 9 in Fig. 3B) is cur—
rently the most widely produced and utilized biofuel of the market,
the remainder of this section focuses on the use of our approach to
find ethanol—production pathways from carbon dioxide (labeled as
C00011 in Fig. 3B). Moreover, the numbers of pathways found be—
tween COZ and ethanol and the search time have been reported in
Table 1 as the last pair of source and target.

As depicted by the black ellipses in Figure 3A along with its cor-
responding graph in Figure 3B, the entire metabolic network com—
posed of pathways of the entire set of organisms registered in the
KEGG PATHWAY database has been reduced to a fast—and—easily—
searchable space using our algorithm (Fig. 1).

Six natural carbon fixation pathways have been known so far
(Fast and Papoutsakis, 2012), of which two are seen in Figure 3B.
The first carbon fixation pathway is Calvin—Benson cycle used by
plants, algae and cyanobacteria. Cyanobacteria possess some en—
dowments for photoautotrophic conversion of C02 into the biofuel
products such as ethanol. In addition, they have relatively simple
genetic background and well—characterized tools for engineering
(Machado and Atsumi, 2012).

Figure 3B illustrates some ethanol—production pathways found
by our algorithm, one of which branched from the point of 3—phos—
phoglycerate (C00197) at the Calvin—Benson cycle to produce etha—
nol by using a set of enzymes consisting of rubisco (catalyzes
reaction R00024), phosphoglycerate mutase (catalyzes R01518),
enolase (catalyzes R00658), pyruvate kinase (catalyzes R00200),
pyruvate decarboxylase (catalyzes R00224) and alcohol dehydro—
genase (catalyzes R00754). While the first four reactions of this

in: 111T

 

4.5

—-—I Brute-force method
3.5 - FogLight (without using til-CSR 6r. b—CSC) -
—iéi— FogLight {using Iii-CSR. St h—CSC storage formata)

2.5 _

1.131592 _

1111391 _

1.1311391] _

got-in _

Execution Time

5.51: 1D _

 

 

 

.1
Elna; 1n J I l L J J J. l L J
.4

Search Depth Limit From a Source

Fig. 2. Execution time comparison between Brute-force and FogLight with/
without b-CSR and b-CSC storage formats

9mg ‘09 1sn8nv uo sejeﬁuv sorg ‘121uJoggI123 go AJTSJQATUH 112 /810'8112umo[pJogxosoneunogugogq//:d11q urogg pep1201umoq

406

M. Khosra viani et al.

 

  
  
  
        

—\
\CDDIIEQX

(1300222) / R"

near or
HOD? or
R05 1"; or RD 19
R12?
00? I or
R T11

ROEQTE

 

 

Rﬂ&353
120-0199 or
Human o encore
M
c0002: “mug '3’

9.112320

RD 25 Hi] 51

- 1119 .- ' .coeo o
R A! R 1
1315255 HM“ name
I

" 144?

R04 053

 

 

f
*—

:torer

Fig. 3. Entire metabolic network (A) containing the pathways of the entire set of organisms, and (B) the appropriate part between carbon dioxide and ethanol ex-
tracted by FogLight approach; the source/target metabolite is shown with a red single/double-lined octagon and the intermediates with blue rounded rectangles

pathway (i.e. R00024, R01518, R00658, and R00200) natur-
ally leads to the formation of pyruvate from C02 in cyanobacteria,
reactions R00224 (equally, R00014+R00755) and R00754 are
used to reduce pyruvate to ethanol in a non-native manner (Lee,
2011)

An alternative to carbon fixation by the Calvin-Benson cycle is
the Wood-Ljungdahl (WL) pathway through which carbon dioxide
is anaerobically reduced to form Acetyl-CoA. The key enzyme of
WL pathway (shown in Fig. 3B) is CO dehydrogenase/acetyl-CoA
synthase (CODH/ACS) which is used to synthesize Acetyl-CoA (i.e.

R09317 or equally, R07157 +R08433). Considering the production
of ethanol from this point (i.e. C00024), some number of pos-
sible paths and their corresponding reactions can be observed in
Figure 3B. Consequently, microbial production of ethanol can be
provided by manipulation of a suitable organism genome to encode
for appropriate metabolic enzymes of each of the observed path-
ways. Therefore, it may be possible to chemoautotrophically pro-
duce ethanol from C02 in the anaerobic bacteria containing WL
pathway by combination of the genes coding for the mentioned
enzymes.

9mg ‘Qg 1sn3nv uo sejeﬁuv s01 ‘egtuoggjeg go Ange/nun 112 Biosg12umo[pJogXO'sog112uuogugogq//:d11q 111mg pepeogumoq

FogLight

407

 

The other pathway found by our approach includes the shortest
one in which enzyme pyruvate synthase (also called ferredoxin 2—
oxidoreductase) used as a main catalyzer for CoA—acetylating (i.e.
reaction R01196). In this pathway, COZ along with another sub—
strate is converted into pyruvate and then into ethanol through ei-
ther two or three enzymatic reactions.

In addition to pyruvate synthase, another mechanism exists for
fermentative pyruvate turnover (as shown in Fig. 3B) which uses
pyruvate formate—lyase (catalyzes R00212) as a main catalyzer to
convert pyruvate to ethanol via acetyl—CoA and acetaldehyde
(Schomburg and Michal, 2012).

Some other pathways from C00011 to C00469 besides the
above mentioned pathways can be seen in Figure 3B and have been
found by our approach. The pathways differ in the number of reac—
tion steps or their enzymatic types. These differences and varieties
are due to the use of numerous enzymatic reactions of different or-
ganisms as an including component of the found pathways.
Detecting these various metabolic pathways and their participating
enzymes for the desired traits, ones are able to create genetically
modified organisms through the mutation of genes.

After obtaining the pathways, they should be verified according
to stoichiometry constraints with the aim of satisfying steady—state
condition. Some of the pathways found by our algorithm have been
illustrated in Figure 4. Two pathways which convert COZ (C00011)
to ethanol (C0046 9) through the network are as follows:

Pat/away 1 : c00011 R0596 c00022 ROD—234 c00084 ROD—Z46 COOO469

Pat/away 2: c00011 R0317 c00024 ROD—238 c00084 ROD—Z46 COOO469

The ﬂux values of reactions on Pathways 1 and 2 were calculated
to satisfy Eq. 6 (see Supplementary Table S1 for details). However
for the following pathway, there was no flux vector which can sat—
isfy this equation.

Pat/away 3: c00031 ROE>05c00198ROE>19c00257 R01—5>38c00204

R0§70C00022 R00—2>l’c00036RO§57c00049 Roi—954 c03406 ROE’>"6C00062

Nevertheless, the imbalance of this pathway was found to be due
to the involvement of currency metabolites (shown by dotted ellipses
in the figure) in the pathway. By removing these metabolites from the
stoichiometry matrix, the steady—state condition was met. The details
of matrix calculations can be found in Supplementary information.

300223

0
90:00!
uoasoa

e
e
to

b
a"
,go

c0035!-
. codes?
to

eootoa fi-umi‘} cooeoe Tang;
‘- -' o

CDDDE-ﬁ

Tut-.9) ® if??? {En-iii?- 51666:}?
_ {lee-noose} {TODD-35

 

   ﬂ

iléii’é‘i‘i/j< “ 
"""J r#- at
-   £50011ng

(it  

a, ¢_ xenootle;
‘31
d3

In the previous paragraphs, the structure of the different found
pathways from COZ to ethanol has been described. Therefore,
FogLight can efficiently find useful synthetic metabolic pathways in
order to be utilized in genetic and metabolic engineering.

4 Conclusion

In order to look for metabolic pathways through metabolic net—
works, we proposed an approach in which the search space is con—
siderably reduced and the computational cost is decreased to make
the problem complexity manageable.

It is possible to lose some admissible candidates as the search—
space is narrowed down heuristically as previous approaches sug—
gest. Therefore, our algorithm in the first stage, employs an analyt—
ical approach to prune the off—the—path branches of the AND/OR
graph of the metabolic network by a matrix—based technique. Then,
in the second, it searches for the metabolic pathways through the
final reduced network by brute—force method.

The space reduction technique proposed in this article can be
used by other techniques which search through metabolic networks,
like the heuristic approaches mentioned above, but for the reduced
network. Therefore, such approaches can take advantage of this
search space reduction to produce similar results as theirs in shorter
time. This is because our space reduction technique does not miss
any admissible pathways from the given source to target after the
graph is trimmed. However, the brute—force method used as the se—
cond stage in our algorithm gives all the pathways without the dis—
advantage of losing any of them as in other approaches. Results
demonstrate that our approach is much faster than the brute—force
search algorithm, even considering search through the metabolic
networks of all organisms.

Using FogLight, we were able to find some metabolic pathways
for production of ethanol from carbon dioxide while few of them
have been discussed. The found and discussed metabolic pathways
are verified by the enzymes, reactions and the partial pathways re—
ported in the literature (Lee, 2011; Schomburg and Michal, 2012).
We also compared the complexity of this algorithm with the brute-
force search algorithm in looking for all possible pathways leading
to a target from a source. For the pathways with the length of
greater than six, results show that our approach is much faster than
brute—force algorithm and our experiments confirmed the efficiency
of our approach.

“a?” maintain oozooa
“Ti-3' q?“-

{ileoooo'rg-  h

- I'III'FI.‘ qﬁ:
tCﬂUNI : ¢ CUDU13

  

'
C?
__ G
in
11D

BEETDH

 

coooes mung , 1.511113

Fig. 4. Pathways from carbon-dioxide and glucose to ethanol (C00469), arginine (C00062) and tryptophan (COOO78) found by FogLight

9mg ‘09 1sn8nv uo sejeﬁuv sorg ‘121uJoggI123 go AJTSJQATUH 112 /310'S[12umo[pJogXO'sopeunogugogqﬂ:d11q urogg pep1201umoq

408

M. Khosra viani et al.

 

Acknowledgements

We express our special thanks to Dr. Sayed-Amir Marashi for his useful com-
ments during the course of this article.

Conﬂict of Interest: none declared.

References

Amaru,L. et al. (2014) Majority-inverter graph: a novel data-structure and al-
gorithms for efﬁcient logic optimization. In: Proceedings of the 51 st Annual
Design Automation Conference. San Francisco, CA, USA: ACM, pp. 1—6.

Ausiello,G. et al. (1992) Optimal traversal of directed hypergraphs. In: Technical
Report TR—92—073. Berkeley, CA: International Computer Science Institute.

Bagchi,A. and Mahanti,A. (1983) Admissible heuristic search in AND/OR
graphs. Theor. Comput. Sci., 24, 207—219.

Bailey,].E. (1991) Toward a science of metabolic engineering. Science, 252,
1668—1675.

Beasley,].E. and Planes,F.]. (2007) Recovering metabolic pathways Via opti-
mization. Bioinformatics, 23, 92—98.

Burgard,A.P. et al. (2001) Minimal reaction sets for Escherichia coli metabol-
ism under different growth requirements and uptake environments.
Biotechnol. Prog., 17, 791—797.

Campodonico,M.A. et al. (2014) Generation of an atlas for commodity chem-
ical production in Escherichia coli and a novel pathway prediction algo-
rithm, GEM-Path. Metab. Eng., 25, 140—158.

Carbonell,P.et al. (2012) Enumerating metabolic pathways for the production of
heterologous target chemicals in chassis organisms. BMC Syst. Biol, 6, 10.

Caspi,R. et al. (2014) The MetaCyc database of metabolic pathways and en-
zymes and the BioCyc collection of Pathway/Genome Databases. Nucleic
Acids Res., 42, D459—D471.

Cho,A. et al. (2010) Prediction of novel synthetic pathways for the production
of desired chemicals. BMC Syst. Biol, 4, 35.

Chou,C.-H. et al. (2009) FMM: a web server for metabolic pathway recon-
struction and comparative analysis. Nucleic Acids Res., 37, W129—W134.
Croes,D. et al. (2006) Inferring meaningful pathways in weighted metabolic

networks. ]. Mol. Biol, 356, 222—23 6.

Dale,].M. et al. (2010) Machine learning methods for metabolic pathway pre-
diction. BMC Bioinformatics, 11, 15.

Darvas,F. (1988) Predicting metabolic pathways by logic programming. ].
Mol. Graphics, 6, 80—86.

Farm,P. et al. (2005) Logic optimization using rule-based randomized search.
In: Proceedings of the 2005 Asia and South Paciﬁc Design Automation
Conference. Shanghai, China: ACM, p. 998—1001.

Fast,A.G. and Papoutsakis,E.T. (2012) Stoichiometric and energetic analyses
of non-photosynthetic COZ-ﬁxation pathways to support synthetic biology
strategies for production of fuels and chemicals. Curr. Opin. Chem. Eng., 1,
380—395.

Gerard,M.F. et al. (2013) An evolutionary approach for searching metabolic
pathways. Comput. Biol. Med, 43, 1704—1712.

Huss,M. and Holme,P. (2007) Currency and commodity metabolites: their
identiﬁcation and relation to the modularity of metabolic networks. IET
Syst. Biol, 1, 280—285.

Jonnalagadda,S. and Srinivasan,R. (2014) An efﬁcient graph theory based
method to identify every minimal reaction set in a metabolic network. BMC
Syst. Biol, 8, 28.

Kanehisa,M. et al. (2014) Data, information, knowledge and principle: back
to metabolism in KEGG. Nucleic Acids Res., 42, D199—D205.

Karp,P.D. and Mavrovouniotis,M.L. (1994) Representing, analyzing, and syn-
thesizing biochemical pathways. IEEE Expert, 9, 11—21.

Kuffner,R. et al. (2000) Pathway analysis in metabolic databases Via differen-
tial metabolic display (DMD). Bioinformatics, 16, 825—836.

Latendresse,M. et al. (2014) Optimal metabolic route search based on atom
mappings. Bioinformatics, 30, 2043—2050.

Lee,].W. (2011) Designer organisms for photosynthetic production of ethanol
from carbon dioxide and water. US Patent No. 7973214 B2.

Lim,K. and Wong,L. (2012) CMPF: class-switching minimized pathﬁnding in
metabolic networks. BMC Bioinformatics, 13, 817.

Ma,H. and Zeng,A.-P. (2003) Reconstruction of metabolic networks from
genome data and analysis of their global structure for various organisms.
Bioinformatics, 19, 270—277.

Machado,I.M. and Atsumi,S. (2012) Cyanobacterial biofuel production. ].
Biotechnol, 162, 50—56.

Mavrovouniotis,M.L. (1993) Identiﬁcation of qualitatively feasible metabolic
pathways. Artif. Intell. Mol. Biol, 325—364.

McShan,D.C. et al. (2003) PathMiner: predicting metabolic pathways by
heuristic search. Bioinformatics, 19, 1692—1698.

Pearcy,N. et al. (2014) Hypergraph models of metabolism. Int. ]. Biol. Vet.
Agric. Food Eng., 8, 784—788.

Pey,]. et al. (201 1) Path ﬁnding methods accounting for stoichiometry in meta-
bolic networks. Genome Biol, 12, R49.

Pharkya,P. et al. (2004) OptStrain: a computational framework for redesign
of microbial production systems. Genome Res., 14, 23 67—23 76.

Rahman,S.A. et al. (2005) Metabolic pathway analysis web service (Pathway
Hunter Tool at CUBIC). Bioinformatics, 21, 1 189—1 193.

Rodrigo,G. et al. (2008) DESHARKY: automatic design of metabolic path-
ways for optimal cell growth. B ioinformatics, 24, 2554—25 5 6.

Schomburg,D. and Michal,G. (2012) Biochemical Pathways: An
Atlas Of Biochemistry And Molecular Biology. Hoboken, N.].: John Wiley
& Sons.

Schuster,S. and Hilgetag,C. (1994) On elementray ﬂux modes in biochemical
reaction systems at steady state. ]. Biol. Syst., 02, 165—182.

Tran,K.T. et al. (2014) Metabolic engineering of Escherichia coli to enhance
hydrogen production from glycerol. Appl. Microbiol. Biotechnol, 98,
4757—4770.

Ullah,E. et al. (2009) An algorithm for identifying dominant-edge metabolic
pathways. In: ICCAD. IEEE, pp. 144—150.

Wagner,A. and Fell,D.A. (2001) The small world inside large metabolic net-
works. Proc. Biol. Sci. R. Soc., 268, 1803—1810.

Yousofshahi,M. et al. (2011) Probabilistic pathway construction. Metab.
Eng., 13, 435—444.

Zheng,Y. et al. (2013) Metabolic engineering of Escherichia coli for high-
speciﬁcity production of isoprenol and prenol as next generation of biofuels.
Biotechnol. Biofuels, 6, 57.

9mg ‘09 1sn8nv uo sejeﬁuv sorg ‘121uJoggI123 go AJTSJQATUH 112 /810'8112umo[pJogxosoneunogugogq//:d11q urogg pep1201umoq

