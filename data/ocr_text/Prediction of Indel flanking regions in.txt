ORIGINAL PAPER

Vol. 31 no. 1 2015, pages 40—47
doi:10. 1093/bioinformatics/btu556

 

Sequence analysis

Advance Access publication August 31, 2014

Prediction of Indel flanking regions in protein sequences using

a variable-order Markov model

Mufleh Al-Shatnawi*, M. Omair Ahmad* and M.N.S. Swamy*
Department of Electrical and Computer Engineering, Concordia University, QC HBG 2W1, Canada

Associate Editor: John Hancock

 

ABSTRACT

Motivation: Insertion/deletion (indel) and amino acid substitution are
two common events that lead to the evolution of and variations in
protein sequences. Further, many of the human diseases and func-
tional divergence between homologous proteins are more related to
indel mutations, even though they occur less often than the substitu-
tion mutations do. A reliable identification of indels and their flanking
regions is a major challenge in research related to protein evolution,
structures and functions.

Results: In this article, we propose a novel scheme to predict indel
flanking regions in a protein sequence for a given protein fold, based
on a variable-order Markov model. The proposed indel flanking region
(lndelFR) predictors are designed based on prediction by partial match
(PPM) and probabilistic suffix tree (PST), which are referred to as the
PPM IndelFR and PST IndelFR predictors, respectively. The overall
performance evaluation results show that the proposed predictors
are able to predict lndelFRs in the protein sequences with a high ac-
curacy and F1 measure. In addition, the results show that if one is
interested only in predicting IndelFRs in protein sequences, it would
be preferable to use the proposed predictors instead of HMMER 3.0 in
view of the substantially superior performance of the former.
Contact: m_alshat@ece.concordia.ca or omair@ece.concordia.ca or
swamy@ece.concordia.ca.

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on March 23, 2014; revised on July 23, 2014; accepted on
August 12, 2014

1 INTRODUCTION

As new protein sequences are discovered on an everyday basis
and protein databases continue to grow exponentially with time,
analysis of protein families, understanding their evolutionary
trends and detection of remote homologues have become ex-
tremely important. The proteins that evolve from the same an-
cestor protein are called homologous proteins. A protein molecule
is created in a cell as a chain of amino acids, called the polypep-
tide chain. A polypeptide chain can be represented as a string of
characters by using the letter code of each amino acid. This string
of characters is called the primary structure of a protein.

In addition to the primary structure, a protein has secondary
and tertiary structures (Yona, 2011). Secondary structure of a
protein refers to well-determined local sequence elements, such
as an alpha helix, a beta strand or any other local sequence

 

* To whom correspondence should be addressed.

element that is neither a helix nor a strand. These other local
sequences, usually called loops or coils, may have a large variety
of shapes. These secondary structure elements of a protein can be
combined together to create a motif, which is a simple combin-
ation of a few consecutive secondary structure elements with a
speciﬁc geometric arrangement, such as helix-loop—helix or
strand-loop—helix. Some, but not all, motifs are associated with
speciﬁc biological functions. The tertiary structure of a protein
refers to the 3-dimensional structure of the protein, where the
secondary structure elements form the physical core of the 3-di-
mensional structure, and loops are located on the surface of the
tertiary structure. A domain refers to a combination of several
secondary elements and motifs, which may not necessarily be
contiguous and which are usually packed in a compact structure.
A protein may contain a single domain or several different
domains, or several copies of the same domain.

Normally, the proteins are classiﬁed into families based on the
existence of a speciﬁc motif or domain in their structure, where
the existence of such a motif or domain has a major indication
about the biological role of the protein. The structural classiﬁ-
cation of proteins (SCOP) database is a comprehensive ordering
of all the proteins of the known structures, according to their
evolutionary and structural relationships (Andreeva et al., 2008),
where the fundamental unit of this classiﬁcation is a domain. In
this database, the proteins have been classiﬁed into families,
superfamilies, common fold and, ﬁnally, into classes at the top
level of the structural hierarchy.

It is known that new proteins have evolved mainly through
indel mutations (Grishin, 2001; Zhang et al., 2010). Indel muta-
tions have been found to occur more often in the loop regions
(Benner et al., 1993; Hsing and Cherkasov, 2008), and mainly in
essential proteins and in those proteins that interact highly with
others (Chan et al., 2007). The functional divergence between
homologous proteins may also be caused by indel mutations
that occur in the regions between secondary structures of a pro-
tein (Jiang and Blouin, 2007). Further, it has been found that
differences among species, as well as many of the human dis-
eases, are related to indel mutations, which occur less often than
substitution mutations do (Britten et al., 2003; Chen et al., 2009;
Duval and Hamelin, 2002).

Sequence alignment is one of the most commonly performed
tasks in bioinformatics, and has been used in many applications,
including sequence annotation, phylogenetic tree estimation,
evolutionary analysis, secondary structure prediction and data-
base search (Notredame, 2002). In recent years, considerable
effort has been devoted to the development of protein alignment
algorithms that can efﬁciently detect mutations, and infer

 

40 © The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e—mail: journals.permissions@oup.com

112 /310's113umo [p.IOJXO'SOllBIIHOJUIOIQ/ﬁdllq 11101; papeommoq

9IOZ ‘09 lsnﬁnv uo ::

Prediction of indel flanking regions in protein sequences

 

structural and functional relationships among the aligned protein
sequences. By using position-variant probability to score indel
mutations, the proﬁle hidden Markov model (pHMM; Eddy,
1998; Krogh et al., 1994) is able to use the fact that indel muta-
tions occur more frequently in some parts of a protein more than
other parts (e.g. in the loop regions) (Benner et al., 1993; Hsing
and Cherkasov, 2008). Several software packages, such as
HMMER (Finn et al., 2011) and SAM (Hughey and Krogh,
1996; Karplus et al., 1998), have implemented the pHMM-
based alignment algorithms. Among these packages, HMMER
is the most-used software package in protein database search and
comparison. A collection of pHMMs covering many protein
families have been generated using HMMER, and they are avail-
able in the Pfam database (Punta et al., 2012). The disadvantage
of using pHMM-based alignments for detecting mutations
would be that the corresponding alignment algorithms assume
the occurrence of mutations in the protein sequence to follow a
ﬁxed ﬁrst-order Markov chain.

When a pair of protein sequences has been aligned, an indel
region is deﬁned as a gap in any of the two sequences. Segments
of protein sequence immediately before and after an indel region
are called ﬂanking regions (see Supplementary Fig. S3). The
database called IndelFR (Indel Flanking Region) database con-
tains sequence and structure information of 2 925 017 indels with
their ﬂanking regions, including their positions, length, amino
acid composition and secondary structure (Zhang et al., 2012).
In the IndelFR database, the structure-based sequence alignment
program PDBeFold (Krissinel and Henrick, 2004) has been used
to align homologous non-redundant proteins obtained from the
ASTRAL95 database (Chandonia et al., 2004), which in turn has
used the non-redundant protein domains from the SCOP data-
base that have similarity levels as high as 95%. It has been found
that there exists a strong relationship between indels and their
ﬂanking regions (Chen et al., 2009; Tian et al., 2008; Zhang et al.,
2011; Zhu et al., 2009).

The objective of this article is, therefore, to propose a novel
scheme to predict indel ﬂanking regions in a protein sequence,
based on a variable-order Markov model (VOMM) of the ﬂank-
ing regions. We propose two indel ﬂanking region (IndelFR)
predictors: one predictor using prediction by partial match
(PPM) (Cleary and Witten, 1984) and other using probabilistic
sufﬁx tree (PST) (Ron et al., 1996).

2 METHODS
2.1 VOMM for ﬂanking regions

In the IndelFR database, indels and their ﬂanking regions are extracted
from alignments by dividing equally the region between two adjacent
indels, and by taking 10 amino acids as the upper limit for the ﬂanking
regions. It has been shown by Zhang et al. (2011) that the impact of an
indel on its ﬂanking regions reduces dramatically as we move away from
the indel, and this impact is negligible after 10 amino acids. In this study,
we classify the indel regions stored in the IndelFR database according to
the number of amino acids in the ﬂanking regions as follows:

(i) If the number of amino acids between two indels is >20, then we
consider each of the two ﬂanking regions between them to have
exactly 10 amino acids.

(ii) If the number of amino acids between two indels is 520, but 22,
we still consider these two indels as two separate indels, and the

region between them split equally or as equally as possible to
deﬁne the ﬂanking regions between the two indels.

(iii) If the number of amino acids between two adjacent indels in the
same sequence is unity, then we combine the two indels along
with the single amino acid in between to treat the combination as
a single indel.

(iv) If the number of amino acids between two adjacent indels that
are not in the same sequence is unity, then we treat these two
indels as distinct. Thus, the right (left) ﬂanking region of one of
the indels and the left (right) ﬂanking region of the other indel
would each have only one amino acid.

We refer to an indel along with its left and right ﬂanking regions as an
indel ﬂanking region (IndelFR). Figure 1 shows an example illustrating
each of the above situations. It is noted that there are three IndelFRs for
each of the two alignments shown in Figure 1.

It is to be recalled that in the IndelFR database, a given protein se-
quence has been aligned with a large number of protein sequences that
belong to the same superfamily. For example, consider the protein
d1allb_. In the IndelFR database, 87 pairwise alignments have been car-
ried out for this protein (see Supplementary Table S2). From these align-
ments, we now identify all the IndelFRs for the protein dIallb_ and mark
off IndelFR segments, which are the segments of the protein sequence to
which all the identiﬁed IndelFRs collectively belong to. For the protein
sequence d1allb_, these segments are observed to be from position 88 to
97 and from 100 to 115, and no indel is located outside these segments.
This process can be applied to any of the protein sequences available in
the IndelFR database to obtain its IndelFR segments. Figure 2 shows
such segments for some of the protein sequences selected from the Globin-
like superfamily, the segments being marked by thick lines.

The above results strongly suggest that the IndelFRs for a given pro-
tein sequence are conserved within only the IndelFR segments. This is a
signiﬁcant ﬁnding, which we will use later in this section in training the
model for the proposed IndelFR predictor.

We now present a technique to build an IndelFR predictor for a given
protein fold. In this study, the protein folds are selected from the follow-
ing protein classes: All-oz proteins, All-,8 proteins and a and ,8 proteins (a/b)
(see Supplementary Tables S3—S5). It is noted that each protein fold
contains one or more superfamilies and each superfamily contains one
or more protein families. Therefore, the proposed IndelFR predictor for a
given protein fold can be used to predict IndelFRs in protein sequences
that belong to different protein families within the same fold.

Because we already know how to obtain the locations of the IndelFR
segments for a protein sequence, we build our proposed model for the
IndelFR predictor by conﬁning only to the IndelFR segments of each of
the protein sequences in a given fold. We extract the ﬂanking regions of
all the sequences in the fold and divide them into two sets, the left and
right sets. The left set contains all the left ﬂanking regions, whereas the

LFF|1 ind-cl 1 FIFFh LFFIE Indus: E FI=H:' IFFta Indel 3 FIFFI3

 

H1

FIFE: Ftp-QM ‘llEﬂl-lIr-J raglan
LFR. Len llanklng regain
0 Amino and

 

'—
11
:U
N

Fig. 1. Indel regions classiﬁed according to the number of amino acids in
the ﬂanking regions

 

41

112 /810's113u1no [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁdllq 11101; papeommoq

9IOZ ‘091sn3nv uo ::

M.AI-Shatnawi et al.

 

right set contains all the right ﬂanking regions. The ﬂanking regions in
either of the two sets have, in general, different lengths, as these lengths,
according to our earlier assumption, can vary between 1 and 10.

The proposed IndelFR predictor for a given protein fold contains two
VOMMs (Buhlmann and Wyner, 1999; Ron et al., 1996): one for the left
set and the other for the right set. These models learn the conditional
probability Pk(o|s,-_k . ..s,_1) of observing a particular amino acid a e
\metem at position i, given a context 8 = s,_k . . . s,_1 of length k, where the
context 8 = s,_k . . . s,_1 represents all the previously observed amino acids
before a is observed at position i, each s], j e {i — 1, .. . , i — k}, represent-
ing one of the possible 20 amino acids. The context length k could vary
depending on the size and nature of the string of amino acids in a ﬂanking
region, and \metem is the alphabet set containing all the amino acid sym-
bols. We select a VOMM instead of a ﬁxed-order one for the following
reasons: (i) the chosen model should take into consideration varying sizes
of the ﬂanking regions in a set, and (ii) it should take care of situations
where a ﬂanking region in which a particular amino acid a 6 111mm,, does
not exist for a given context of length m. In the latter case, a VOMM
would allow us to reduce the length of the context to be less than m.

Over the years, many VOMM structures, such as Lampel-Ziv com-
pression (Nisenson et al., 2003), context tree weighting (Willems et al.,
1995), PPM (Cleary and Witten, 1984) and PST (Ron et al., 1996), have
been proposed. We will brieﬂy discuss here only two of them, namely,
PPM and PST, which are among the most commonly used structures in
prediction applications. The effectiveness of PPM and PST for prediction
of sequences in various applications has been examined by Begleiter et al.
(2004). PST has also been used to model DNA sequences by Ron et al.
(1996). Further, it has been used in modeling and prediction of protein
families by Bejerano and Yona (2001).

In PPM, to build a VOMM for the left (right) set of ﬂanking regions,
we start by analyzing a subset of the left (right) ﬂanking regions as the
training set and counting the number of occurrences of the amino acid 0
immediately after the context 8, that is, counting the number of occur-
rences of the pattern so in the training set for each amino acid a e \Dprolem
and for each context 8: s,_k . . . s,_1 of length k, where each s],
j e {i — 1, . . . , i — k}, represents one of the possible 20 amino acids. The
context length k varies from zero to D, where D is the memory length of
the VOMM. Hence, for each value of k, we can compute the conditional
empirical probability 13k(o|s) (Y ona, 2011) as

“ N so
P o s = — 1
k( l ) Z Nssj ( )

S j e \I’protein

F‘rnlt'in Iléll11l." Ed IJIII"_ I. IA‘IIgEI'II lhl I. HIIII‘II‘er rI‘.’ ilIIgl'an'l‘Il‘ Iii-1":

I I ' I I
| ILI _'-"|.| .JIIII 4“ 5|] fill 7“ HLI 'JIJ IUU il'i] I III l3” E-Illfl Iii-LI LEI-i]

 

 

 

 

 

 

 

I'nlluill II.'II1IL': -:-:| Iuyw 3.1.u1lglll I Lh-Ijl, Nurl'fbur III .1I_I':lll:l)1.'l'.|!ﬁ I: IIIIFII

I In- :H ,l-IZ'I -II| FII "III '.'I'l III'I —':|'|'|— if I IIIJ I an Ile T—IJIII  1 [WI
I'II.II.1.'iII ILJIII'IL'. lid IIJHuJ I. 14.11311: I' IEII‘II. hul'i'lI'll'l -.:-I uJIEIIIE'IL'ﬂEI- I JUII-ZI

I IEI‘ Ell 14:] -III FIIII HI 1“” III-I '-.II| IIIII III] I III I -‘II'| “ﬂ I5” Hi]
I'IUIL'III II..1I:IL'.I'1JIII:LJ J. I.Jl.'l'.l_.".I'l I III-I I. I'IIJII'II'IL'I LII uIiEIII'IIL'IIIZH I IIJ'I'JI

I III 3'“ 1'} J-II 50 fl.“ TI] III-I LI” 5 I :II‘I I :"II I 3” I-I'IJ IﬁIJ IIIJ'II'

Pmmn nunr: Idl l'~|:1_ 1.14.11th Il-lfiil. Number nl'alagllmrnh' :IIIII'I‘I

 

I III III I![i' J-I] ﬁll {:1} TI] HIJ 9:] IIII 1H] IJII I3“ 1-I-GI

Fig. 2. IndelFR segments where ﬂanking regions may exist for some
selected protein sequences. The segments are indicated by thick lines

where N50 is the number of occurrences of the pattern so in the training
set. For k = 0, we can calculate the conditional empirical probability,
13(ole), where 6 represents an empty context. PPM handles the zero fre-
quency problem by going through the mechanisms of escape and exclu-
sion (Yona, 2011). In the escape mechanism, for each context
8 = s,_k . . . s,_1 of length k, we make use of a probability mass Pk(escape
Is) for all the amino acids that do not appear after the context 8 = s,_k . ..
s,_1 in the training set. There are different ways of deﬁning the escape
probabilities for a context. These deﬁnitions are generally based on intu-
ition and experience, and not on any underlying theory. For example, in
Moffat (1990), this escape probability has been deﬁned as

1111.1
MHZM,

SjE‘I’S

Pk(escape|s) = (2)

where 1115 is a set of amino acids appearing after the context
s=s,-_k...s,-_1, i.e. \IJS={0 : Nsa>0}, and IIIJSI denotes the number of
elements in 1115. Accordingly, the conditional probability is modiﬁed as

Pk(0|S)=
Pk(0‘|S)  E 1115 

Pk(escape|s)Pk_1(o|s,-_k+1 . . . s,_1) otherwise

where
N so

IW+23M

S j e wprotein

Pk(0|S) = (4)

In the above equation, if Pk_1(o|s,_k+1 . . .s,_1) is zero, then Equation (3)
is recursively modiﬁed by using contexts of shorter lengths as shown
below:

Pk—1(UISi—k+1 ---Si—1):(Pk—1(escaPeISi—k+1 ---Si—l)
(5)
Pk—2(0|Si—k+2 - - - 57—1))

In the exclusion mechanism, if a prediction fails for a certain context,
then the unseen amino acid cannot be one of the amino acids that has
been observed after that context, and the relevant alphabet set for all the
shorter contexts should be reduced by eliminating these observed amino
acids. Hence, every amino acid a e 1115 observed after context 8: s,_k . ..
s,_1 is excluded, when we calculate the conditional probability for all
contexts shorter than s=s,-_k . . . s,_1. An example of the PPM structure
of VOMM is given in the Supplementary Material Section 1. In the PST
structure, a single tree with depth D is constructed to represent a VOMM
of memory length D. The nodes in the tree have different degrees varying
from zero (for leaves) to the size of the alphabet set 111mm,, (for the
internal nodes and the root). Each edge in the tree is labeled by a
single amino acid from the set 111mm,". Each node in the tree is labeled
by a unique context 8 = s,_k . . . s,_1, where the context length varies from
zero (for the root) to D. Also, each node is assigned a conditional prob-
ability Pk(o|s), where o e \metem. It should be noted that the context 8
=s,-_k . . .s,_1 is generated by moving from the node to the root (i.e. in
PST, the father of the node labeled by S1S2S3 is the node S2S3, and not slsz
as in a regular sufﬁx tree).

To build the PST structure T for the left or for the right ﬂanking
region, we need to set the following four parameters:

(i) The memory length parameter D of PST.

(ii) The context threshold parameter N T, where NT: c - m, c (0< c
< 1) being a constant and m the total number of ﬂanking regions
in the left or right set. The parameter N T determines which con-
texts would be included in building the PST structure. If the

 

42

112 /810's112umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬂdllq 111011 pap1201umoq

910Z ‘091sn3nv uo ::

Prediction of indel flanking regions in protein sequences

 

number of occurrences of a context is less than NT, then such a
context is excluded in building the structure.

(iii) The parameter r is used to determine whether the context 8 = s,_k
. . . s,_1 contributes additional information in predicting the amino
acid o relative to its ‘parent’ or ‘sufﬁx’ context s,_k+1 ...s,-_1,
denoted by suf(s). The ratio Pk(o|s)/Pk_1(o|suf(s)) is chosen to
be outside the interval (1 / r, r). To make the contribution of this
context to be sensitive, r is chosen to be 1+6, 6 being a small
quantity.

(iv) The parameter E, is chosen to be B, = 5 - IIIJSI, as suggested by
Henikoff and Henikoff (1996), to ensure that for a given context
the probability of an amino acid o 6 WWW," does not become
zero.

Let N, be the number of occurrences of the context s=s,-_k . . . s,_1 in
the training set of the left (right) ﬂanking regions, N50 the number of
occurrences of the pattern so in the left (right) training set and Pk(o|s) the
conditional probability associated with the node labeled by the context
s=s,-_k . . . s,_1. The various steps to build the PST structure for the left
(right) training set are as follows.

Step 1: Create a tree T with a single root node labeled by an empty
context 6, and create an empty set setptr.

Step 2: Add to the set setplr all the contexts of length unity that have
occurred more number of times than N T, the context threshold (i.e.
NS>NT).

setplr <— {slNs >NT}

Step 3: Select a context from setptr.

Step 4: Test if there is an amino acid o e 111, that has a conditional
empirical probability Pk(o|s) given by Equation (1) satisfying the follow-
ing inequality:

 

13k (0‘ I S) >
I IIJprotein I

Step 5: Test if there is an amino acid o (not necessarily the same amino
acid as in Step 4) from alphabet III, satisfying the condition

Z l'
N I3k(UIS) : 0r
Pk_1(olsuf(s)) < i
_ r

Step 6: If the conditions in Steps 4 and 5 are both satisﬁed, go to Step
7; otherwise (i.e. condition in Steps 4 or 5 is not satisﬁed), go to Step 10.

Step 7: Test if the parent node of the context 8, labeled by suf(s),
already exists in the tree T. If yes, add the node corresponding to this
context 8 to the tree T.

Step 8: If the parent node for s in Step 7 does not exist, then create a
node for this context 8 and for its parent node. If the parent node of the
latter does not exist, then repeat this procedure until an existing parent
node in the tree is reached.

For example, assume a node labeled by context 8: C exists in the
tree, and we are trying to add a node labeled by context s=ABDC to
the tree. In PST, the parent node for the context s=ABDC is a node
labeled by context BDC, which does not exist in the tree. Also, the
parent node of the context BDC is a node labeled by context DC,
which also does not exist in the tree. But the parent node of the
context DC, namely, the node labeled C exists in the tree. Hence,
we have to add two more nodes labeled BDC and DC, in addition
to the node labeled ABDC to the tree. This is illustrated in the
Supplementary Figure S4.

Step 9: Adjust the conditional probability for each added node in Steps
7 or 8, so that the probability of an amino acid o 6 111mm,, for a given
context is given by

N50 + ( I‘I’prloteml )BS
2 NSSj + BS

SjE‘l’S

Pk(0|S) 2

Step 10: If the length of s < D, and there exists a pattern os, which has
occurred more number of times than NT (i.e. Nas 2 NT), then add the
pattern os to setptr.

setptr (— {USIU E IIJprotein and Nos 2 NT}

Step 11: Remove the context 8 from setplr, and repeat Steps 3—11 until
setptr becomes empty.

An example of building a PST structure with the parameters D = 2, N T
= 0.01 and r = 1.05 is given in the Supplementary Material Section 2.

2.2 Prediction of indel ﬂanking regions using VOMM

Given a test protein sequence S" =S1S2S3 . . .sn of length n, we scan it
using a running window of length L moving it one amino acid at a
time. To determine whether the string of amino acids within a window
contains a ﬂanking region, we compute the probability of this string using
VOMM.

For a VOMM, we use P(win,) to denote the probability of the string
seg, = sis,“ . . .s,+ L_1 of length L. If VOMM has a memory length D < L,
then P(win,), which is also referred to as the likelihood of win,, is given by
Yona (2011):

P( ' i):P(i)P(i+ li)---
w1n 0s 1s1s (6)

PD(Si+L—1ISi+L—D - - ~Si+L—2)

We calculate the various probabilities on the right side of Equation (6)
by using PPM or PST. If the probability Pk(sj|sj_ksj_k+1 . . .sj_1) for s],
(i 5 j g i+L — 1) does not exist, we proceed as follows:

(a) In the case of PPM, we use the escape and exclusion mechanisms,
in conjunction with Equation (3), to calculate each of the prob-
abilities in Equation (6).

(b) In the case of PST, we ﬁnd the longest sufﬁx of the context sj_k
Sj_k+1 . . . Sj_1 that exists in the tree. Assuming the longest sufﬁx of
the context Sj_ij_k+1 ...Sj_1 that exists in the tree to be
sj_,sj_,+1...sj_1, (0 5 t<k), then

Pk(SjISj—ij—k+ 1 ---Sj—l) = Pt(SjISj—tSj—t+ 1 - - - Sj—l) (7)

Maximizing the likelihood P(win,-) is equivalent to minimizing the aver-
age log—loss function in a lossless compression algorithm (Yona, 2011),
where the average log-loss function is deﬁned as

1
loglossP(win,-) = — Z (logP0(s,-) + logP1(s,-+ 1|s,-)+
log P2(s,-+2|s1s,-+1)+  + (8)
10g PD(Si+L—1ISi+L—1—D---Si+L—2))

the logarithm being taken to base 2. It may be noted that in compression,
the log-loss function represents the average number of bits per character,
as the term (—log Pk(sj|sj_ksj_k+1 . . . sj_1)) is the shortest code that can be
assigned to the character s], given the conditional probability distribution
Pk(Sj|Sj_kSJ'—k+1 ...Sj_1). Therefore, win,- contains a ﬂanking region if it
has a low average log-loss value compared with that of its neighboring
windows.

 

43

112 /810's112umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬂdllq 111011 pap1201umoq

910Z ‘091sn3nv uo ::

M.AI-Shatnawi et al.

 

An example illustrating the steps for calculating the probability of a
particular segment using PPM or PST is given in the Supplementary
Material Sections 1 and 2.

The proposed IndelFR predictor for a given protein fold can be built
using PPM or PST. We build the left PPM (LPPM) and the left PST
(LPST) for the left set, and build the right PPM (RPPM) and the right
PST (RPST) for the right set. LPPM and RPPM are combined together
to form a PPM IndelFR predictor for memory length D. Similarly, LPST
and RPST are combined together to form a PST IndelFR predictor for
memory length D. Such IndelFR predictors are built for various values of
the memory length D, D e {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, so that we can de-
termine the value of D that results in the best performance in predicting
the locations of IndelFRs. The procedure to extract the predicted loca-
tions of these regions in the test protein sequence using PPM IndelFR
predictor is given in Algorithm 1. A similar procedure is applied for the
proposed PST IndelFR predictor.

 

Algorithm 1: Procedure to extract the predicted locations of IndelFRs in a
test protein sequence using the proposed PPM IndelFR predictor with a
memory length D.

 

Step 1: Scan the test protein sequence S" = S1S2S3 . . . S" of length n using a
running window of length L = 10.

wini=sisi+1...s,-+9 If  

Step 2: Compute and store the average log-loss values for each window
using LPPM and RPPM with a memory length D using Equation (8).
Step 3: From the LPPM average log-loss values, choose the mean of these
values as the threshold. Then, ﬁnd the locations of the local minima that
have values below the threshold.

Step 4: Repeat Step 3 using the RPPM log-loss values and ﬁnd the loca-
tions of the local minima.

Step 5: Find the locations of IndelFRs in the test protein sequence by
identifying each of the LPPM minimum locations that is immediately
followed by an RPPM minimum location. The identiﬁed LPPM and
the corresponding RPPM minimum locations represent the start loca-
tions of the predicted left and right ﬂanking regions, respectively, and
each ﬂanking region (left or right) has a length of at most 10. For each
selected minimum location at I), the predicted locations for this ﬂanking
region (left or right) are limited to I), v+ 1, v+2, ..., v+9.

Step 6: For the test protein sequence, use the actual locations of IndelFRs
and the predicted locations to determine the accuracy and the F1 measure.

 

3 RESULTS AND DISCUSSION

In this section, we evaluate the performance of the predictors
proposed in Section 2. For this purpose, from the SCOP data-
base, we select ll, 14 and 18 protein folds from different protein
classes: All-a proteins, All-,8 proteins and a and ,6 proteins (a/b),
respectively (see Supplementary Tables S3—S5). This selection is
conﬁned to those protein folds that have indel ﬂanking regions
listed in the IndelFR database. We build the PPM and PST
IndelFR predictors proposed in Section 2 for each of the selected
protein folds. These predictors are built for various values of the
memory length D, D e {0, 1,2, 3,4, 5, 6, 7, 8,9}, so that we can
determine the value of D that provides the best performance.
We use the k-fold cross-validation method for training and
testing the proposed IndelFR predictors, where k = 10.
Consequently, k iterations of training and testing are performed
for each predictor. In the training phase, we train the IndelFR
predictor for a given protein fold using the indel ﬂanking regions
listed in the IndelFR database. In the testing phase, we ﬁrst test

the trained predictors on the protein sequences from the same
protein fold belonging to the IndelFR database and next, on the
set of protein sequences from the same protein fold but belong-
ing to the sequence alignment benchmark (SABmark 1.65)
(W alle et al., 2005). Finally, the performance of the two proposed
predictors is compared with that using the latest version of the
alignment software HMMER, HMMER 3.0 (Finn et al., 2011).

We evaluate the performance of the proposed predictors using
the measures of accuracy and F1 measure, which are the com-
monly used metrics in the evaluation of the performance of pre-
diction techniques in bioinformatics (Fawcett, 2006; Sonego
et al., 2008) (see Supplementary Material Section 3 for more
details).

3.1 Prediction in IndelFR database

The average log-loss values for each test protein sequence are
computed for each of the two proposed predictors. For the pur-
pose of illustration, the average log-loss values using the two pre-
dictors for the protein sequence d1liab_ are shown in Figure 3. It
is seen from this ﬁgure that the average log-loss value around the
ﬂanking regions is much less than that around the other regions.
It should be noted that for each of the test protein sequences, we
follow the steps outlined in Algorithm 1 to extract the predicted
locations of IndelFRs, and to calculate both the accuracy and the
F1 measure. As seen from Figure 3a, the PPM IndelFR predictor
predicts the locations (A, B), (C, D), (E, F) and (G, H) as the
start locations for IndelFRs (left and right, respectively), while
this predictor ignores the RPPM minimum location (I), as it is
not preceded by an LPPM minimum location. To compute the
accuracy and the F1 measure, we use the actual IndelFRs shown
in Figure 3c taken from the IndelFR database, and the locations
predicted by the proposed PPM IndelFR predictor. The accuracy
and F1 measure are found to be 81 and 77%, respectively. In a
similar manner, using the results shown in Figure 3b, we

 

.... ._ 1 .. . | . :I: ll .. = II. ='II—.I;
r"I-.I.r.II_.I. Lug. |I.I E-I'IIJIIILHII. hllu. U I M and HI | H. Hume-Ly III -1 until I'I LPPM _____ Emmi '—

    

I.
'I .-
I..__._.

I II

   

 

. I III' I II I I I
III 1'“ J!“ I“ .‘I'll- I‘ll] 7|] EU '9'“ IIIII] IILI III] |.'I|J HEI |_"{| IFIU I?“

I.I'I I I

Ia:
AIL-mg: Lulu-hw- IIIIL-u-a Luru'. I.P‘.‘Ii'l'.IrII.l III-“1T. JHK'IIIHL'L' =TJ'a' .InI! Fl r7111:
H _ I I I l I r I I . .

 

 

 

l I
I

It I'
-. _ C "- I; b'
.. F I

I I I

II III III .10 III ."IIZI HI '.'[I FIJZI IIIII III'I IIII IJII I'lfl l-III lr'III IIIII Illil
II'I'I

I I
l-
|

 

PI'II-I'III'I II|.‘II'I'|.I.III nIIImnIlIIIIIh I.1d:nLI_1IL1|?'-'I
= :-
III III ."[| -I[| SEI EIEI '."[I :61: 'III

 

Ilﬂ IIIII III] |."l[| I-IEI IFIII IfII'I |'.'|Il -

LLI

Fig. 3. Average log-loss values for the d] liab_ protein sequence: (a) using
PPM IndelFR predictor and (b) using PST IndelFR predictor. (c)
Ground truth for the IndelFR taken from the IndelFR database
(Zhang et al., 2012). Solid dots represent the start locations of the pre-
dicted left ﬂanking regions and the stars that of the predicted right ﬂank-
ing regions

 

44

112 /810's112umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬂdllq 111011 pap1201umoq

910Z ‘091sn3nv uo ::

Prediction of indel flanking regions in protein sequences

 

determine the accuracy and F1 measure for the PST IndelFR
predictor to be 72 and 70%, respectively.

The average accuracy and F1 measure values of the PPM pre-
dictor for various values of the memory length D,
D e {0, 1,2, 3,4, 5, 6,7, 8,9}, are obtained for each of the 11
chosen protein folds from the All-a protein class, and are
shown in Figure 4. It is observed from this ﬁgure that the best
choice for the memory length D is 4. Further, the accuracy varies
from 74 to 98% and the F1 measure from 54 to 99% for the
various folds. The average accuracy and F l-measure values of the
PPM predictor, with a memory length of 4, over the All-a protein
class are 91 and 92%, respectively. In a similar manner, the
average accuracy and Fl-measure values of the PST predictor
for various values of the memory length D,
D e {0, l, 2, 3, 4, 5, 6, 7, 8, 9}, are obtained for each the 11
chosen protein folds from the All-a protein class (see
Supplementary Fig S5 and S6). The results for the PST predictor
strongly suggest that the best choice for the memory length D is
again 4. Further, the accuracy varies from 63 to 96% and the F1
measure from 54 to 97% for the various folds. The average ac-
curacy and Fl-measure values of the PST predictor, with a
memory length of 4, over the All-a protein class are 88 and
89%, respectively.

The average accuracy and F1 measure values of the proposed
PPM and PST predictors for various values of the memory
length D, are obtained for each of the remaining 14 and 18 pro-
tein folds from the protein classes, All-,8 protein class and a and ,6
protein (a/b) class, respectively (see Supplementary Tables
S6—Sl3). These results show that the best choice for the
memory length D is still 4 for all the selected protein folds. In
addition, the results indicate that the proposed predictors per-
form better on those protein folds that have a large number of
protein sequences. The average accuracy and F1 measure values
of the proposed PPM and PST predictors with D = 4, for the
selected ll, 14 and 18 protein folds from the three protein classes
are shown in Figure 5.

Average performances in terms of the accuracy and F1 meas-
ure, over all the protein sequences contained in the 11, 14 and 18

 

 

 

 

 

 

 

I'I ' H '|

|| 1 f .'-

d ."
Mir-In Imlh I'J
Alf-I +33% $53.: +9.1“ I'm-Ii

-o-.1,| +5.3 - AI-I +3.22 AI'K -I-.-".I.‘-.I

Fig. 4. Average accuracy and Fl-measure values for the PPM IndelFR
predictor for different protein folds selected from the All-oz protein class
for various values of the memory length D, where A1, A3, A4, A22, A25,
A26, A35, A39, A45, A118 and A133 are the protein folds (see

Supplementary Table S3)

protein folds of the IndelFR database belonging to the All-a
protein, All-,8 protein and a and ,6 protein (a/b) classes, respect-
ively, for the two proposed predictors are given in Table l. The
table shows that the proposed PPM and PST predictors with
D = 4 provide about the same average performance.

3.2 Prediction in SABmark 1.65

To have a more stringent assessment of the performance of the
proposed predictors, we now test the two predictors with D = 4
on the sequence alignment benchmark (SABmark 1.65) (W alle
et al., 2005). It should be noted that the SABmark is generated
from the SCOP database, and covers the entire known protein
fold space with two sets, referred to as the Superfamily set and
the Twilight set. The similarity level between any two protein
sequences is <50% in the Superfamily set, while it is at most
25% in the Twilight set, in contrast to that in the IndelFR data-
base, which contains protein sequences that have a similarity
level that could be as high as 95%.

To evaluate the performance of the proposed PPM and PST
predictors on the Superfamily and Twilight sets, we select protein
sequences from the protein folds belonging to these sets; the folds
chosen are only those for which the predictors have already been
designed using the IndelFR database. The average accuracy and
F1 measure of the proposed predictors for each of the above
protein folds are given in Supplementary Table S14. The average
performance of the proposed predictors is also given in Table l
for the Superfamily and Twilight sets. These results show that the
proposed predictors are still able to predict the IndelFRs in the
selected protein folds from both the sets with a high accuracy and
F1 measure, even though the similarity level between any two
protein sequences is at most 50% in the case of the
Superfamily set, and at most 25% in the case of the Twilight
set. In addition, the results show that the performances of the
two proposed predictors are almost the same for both sets, the
average accuracies being ~75% and the average F1 measures
being ~79%. The average accuracy values and average F 1-meas-
ure values for the proposed IndelFR predictors for the se-
lected protein folds from the three protein classes are shown in

a
.-

 

. a. ..
22:22-13“:

 

 

+I’I’VI I I'IIIII" I'II'. [If-.'IIIL'II Ir

—i— HI I InIIrII-I-t prnllcmr

Fig. 5. Average accuracy and Fl-measure values for the proposed PPM
and PST IndelFR predictors with D = 4 for different protein folds se-
lected from the All-oz protein, All-,8 protein and a and ,8 protein (a/b)
protein classes for memory length D = 4, where A1, A3, A4, A22, A25,
A26, A35, A39, A45, A118, A133, B6, B18, B29, B34, B35, B36, B40,
B42, B47, B50, B55, B60, B82, B121, C1, C2, C3, C14, C23, C26, C36,
C37, C47, C55, C56, C61, C67, C68, C69, C94, C95 and C108 are the
protein folds (see Supplementary Tables S3—S5)

 

45

112 /810's112umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬂ(11111 111011 pap1201umoq

910Z ‘091sn3nv uo ::

M.AI-Shatnawi et al.

 

Figures 6 and 7 for the Superfamily and Twilight sets,
respectively.

3.3 Comparison with HMMER

The performance of the proposed predictors with D = 4 is now
compared with that obtained using the latest version of the align-
ment software HMMER, HMMER 3.0 (Finn et al., 2011).
HMMER 3.0 implements the alignment of a protein sequence
with the pHMM representing a particular protein family. A col-
lection of pHMMs covering many protein families is available in
the Pfam database (Punta et al., 2012). To be able to make this
comparison, it is necessary to ﬁnd the Pfam pHMMs for all
protein families that belong to a protein fold for which the
PPM and PST predictors have already been designed using the
IndelFR database. The protein families for the selected ll, 14
and 18 protein folds from the three protein classes are given in
Supplementary Tables S3—S5. Prediction performance using
HMMER 3.0 is obtained on the IndelFR database, as well as
on the Superfamily and Twilight sets, and the results for the
selected ll, 14 and 18 protein folds are given in Supplementary
Tables S15—S20. The average performances obtained using
HMMER 3.0 on the IndelFR database and on the
Superfamily and Twilight sets, are also included in Table l.
The results indicate that the proposed predictors signiﬁcantly
outperform that obtained using HMMER 3.0 in terms of both
accuracy and F1 measure.

It should be noted that the proposed IndelFR predictors are
more general than when HMMER 3.0 is used in that the pro-
posed PPM or PST predictor for a given protein fold is capable
of predicting the indel ﬂanking regions for any protein sequence
from any protein family in that fold, whereas HMMER 3.0 has
to use different pHMMs depending on the family of the protein
fold to which the protein sequence belongs. For instance, we
have to design only one IndelFR predictor for the Globin-like
fold, while HMMER 3.0 has to use ﬁve different pHMMs
(see Supplementary Tables S3—S5).

4 CONCLUSION

In conclusion, the results show that if one is interested only in
predicting the indel ﬂanking regions in protein sequences, then it
would be preferable to use the proposed predictors instead of
using HMMER 3.0 in View of the substantially superior

Accuracy

 

 

FJ-Mt-asurt

 

 

+I'I'M lrIlrll II [IrrIIIIT' —II— I'I-ur III.'h‘II II r‘ﬂ'IIL'III

Fig. 6. Average accuracy and F 1-measure values of the proposed IndelFR
predictors for the Superfamily set from the SABmark benchmark for the
selected protein folds from different protein classes listed in the caption of
Figure 5

 

 

 

 

'I
3915aEEEEEE55”553533EEECEEEEEEEEEEEEEEEEE

--I'l'.'ul lnhl'lhnﬂlncr Iir HTInIL‘IFR rrIr:h'II.I:r

Fig. 7. Average accuracy and F 1-measure values of the proposed IndelFR
predictors for the Twilight set from the SABmark benchmark for the
selected protein folds from different protein classes listed in the caption
of Figure 5

Table 1. Average accuracy and F1 measure values for the proposed PPM and PST predictors with D = 4 and that obtained using
HMMER 3.0 over all the protein sequences contained in the selected 11, 14 and 18 protein folds from the All-a protein, All-,8 protein
and a and ,8 protein (a/b) classes, respectively, for (a) IndelFR database, (b) SABmark-Superfamily set and (c) SABmark-Twilight set

 

 

 

 

 

(a) (b) (C)
Protein classes Accuracy (%) F1 (%) Accuracy (%) F1 (%) Accuracy (%) F1 (%)
PPM All-oz 91 92 76 79 74 76
IndelFR All-,8 86 85 74 80 75 78
Predictor a and ,8 83 84 77 79 74 78
PST All-a 88 89 76 79 71 75
IndelFR All- ,8 84 86 76 83 75 81
Predictor a and ,8 80 83 76 80 73 77
HMMER All-oz 43 49 57 64 59 66
Alignment All-,8 43 49 61 68 61 70
Software a and ,8 46 56 59 69 58 68

 

 

46

112 /810's112umo [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬂ(11111 111011 pap1201umoq

910Z ‘091sn8nv uo ::

Prediction of indel flanking regions in protein sequences

 

performance of the former. It should be noted that if HMMER
3.0 is used for prediction, one would need as many pHMMs as
the number of families in a given fold, while only one proposed
predictor is needed for a given fold. Moreover, it should be noted
that the proposed IndelFR predictors are built in a fully auto-
mated manner without using any prior assumption about the
occurrence of mutations in the protein sequences, as in the
case of scoring schemes. We anticipate that our study will not
only enable future studies on the modeling of indel mutations,
but will also open up new avenues for research concerning pro-
tein evolution, structures and functions.

Funding: This work was supported in part by the Natural
Sciences and Engineering Research Council (NSERC) of
Canada and in part by the Regroupement Stratgique en
Microlectronique du Qubec (ReSMiQ).

Conﬂict of Interest: none declared.

REFERENCES

Andreeva,A. et al. (2008) Data growth and its impact on the scop database: new
developments. Nucleic Acids Res., 36, D419—D425.

Begleiter,R. et al. (2004) On prediction using variable order markov models. J. Artif
Intell. Res., 22, 385—421.

Bejerano,G. and Yona,G. (2001) Variations on probabilistic sufﬁx trees: statistical
modeling and prediction of protein families. Bioinformatics, 17, 23—43.

Benner,S.A. et al. (1993) Empirical and structural models for insertions and dele-
tions in the divergent evolution of proteins. J. Mol Biol, 229, 1065—1082.

Britten,R.J. et al. (2003) Majority of divergence between closely related dna samples
is due to indels. Proc. Natl Acad. Sci, 100, 4661—4665.

Buhlmann,P. and Wyner,A.J. (1999) Variable length Markov chains. The Annals of
Statistics, 27, 480—513.

Chan,S.K. et al. (2007) Relationship between insertion/deletion (indel) frequency of
proteins and essentiality. BM C bioinformatics, 8, 227.

Chandonia,J.M. et al. (2004) The ASTRAL compendium in 2004. Nucleic Acids
Res., 32, D189—D192.

Chen,J.Q. et al. (2009) Variation in the ratio of nucleotide substitution and indel
rates across genomes in mammals and bacteria. Mol Biol. Evol, 26, 1523—1 531.

Cleary,J. and Witten,I. (1984) Data compression using adaptive coding and partial
string matching. IEEE Trans. Commun., 32, 396—402.

Duval,A. and Hamelin,R. (2002) Mutations at coding repeat sequences in mismatch
repair-deﬁcient human cancers: toward a new concept of target genes for in-
stability. Cancer Res., 62, 2447—2454.

Eddy,S.R. (1998) Profile hidden Markov models. Bioinformatics, 14, 755—763.

Fawcett,T. (2006) An introduction to ROC analysis. Pattern Recogn. Lett., 27,
861—874.

Finn,R.D. et al. (2011) HMMER web server: interactive sequence similarity search-
ing. Nucleic Acids Res., 39, W29—W37.

Grishin,N.V. (2001) Fold change in evolution of protein structures. J. Struct. Biol,
134, 167—185.

Henikoff,J.G. and Henikoff,S. (1996) Using substitution probabilities to improve
position-speciﬁc scoring matrices. Comput. Appl. Biosci., 12, 135—143.

Hsing,M. and Cherkasov,A. (2008) Indel PDB: a database of structural insertions
and deletions derived from sequence alignments of closely related proteins.
BM C bioinformatics, 9, 293.

Hughey,R. and Krogh,A. (1996) Hidden Markov models for sequence analysis:
extension and analysis of the basic method. Comput. Appl. Biosci., 12, 95—107.

J iang,H. and Blouin,C. (2007) Insertions and the emergence of novel protein struc-
ture: a structure-based phylogenetic study of insertions. BM C Bioinformatics, 8,
444.

Karplus,K. et al. (1998) Hidden Markov models for detecting remote protein homo-
logies. Bioinformatics, 14, 846—856.

Krissinel,E. and Henrick,K. (2004) Secondary-structure matching (SSM), a new
tool for fast protein structure alignment in three dimensions. Acta cryst., D60,
2256—2268.

Krogh,A. et al. (1994) Hidden Markov models in computational biology: applica-
tions to protein modeling. J. Mol Biol, 235, 1501—1531.

Moffat,A. (1990) Implementing the PPM data compression scheme. IEEE Trans.
Commun., 38, 1917—1921.

Nisenson,M. et al. (2003) Towards behaviometric security systems: learning to iden-
tify a typist. Proceedings of the 7th European Conference on Principles and
Practice of Knowledge Discovery in Databasess, Cavtat—Dubrovnik, Croatia.
Vol. 2838, pp. 363—374.

Notredame,C. (2002) Recent progress in multiple sequence alignment: a survey.
Pharmacogenomics, 3, 131—144.

Punta,M. et al. (2012) The Pfam protein families database. Nucleic Acids Res., 40,
D290—D301.

Ron,D. et al. (1996) The power of amnesia: Learning probabilistic automata with
variable memory length. Mach. Learn, 25, 117—149.

Sonego,P. et al. (2008) ROC analysis: applications to the classiﬁcation of biological
sequences and 3d structures. Brief Bioinform, 9, 198—209.

Tian,D. et al. (2008) Single-nucleotide mutation rate increases close to insertions/
deletions in eukaryotes. Nature, 455, 105—108.

Walle,I.V. et al. (2005) SABmark benchmark for sequence alignment that covers the
entire known fold space. Bioinformatics, 21, 1267—1268.

Willems,F.M.J. et al. (1995) The context-tree weighting method: basic properties.
IEEE Trans. Inform. Theory, 41, 653—664.

Yona,G. (2011) Introduction to Computational Proteomics. CRC Press, Boca
Raton, FL.

Zhang,Z. et al. (2010) The combined effects of amino acid substitutions and indels
on the evolution of structure within protein families. PloS One, 5, 614316.
Zhang,Z. et al. (2011) Impact of indels on the ﬂanking regions in structural do-

mains. Mol Biol. Evol, 28, 291—301.

Zhang,Z. et al. (2012) IndelFR: a database of indels in protein structures and their
ﬂanking regions. Nucleic Acids Res., 40, D512—D518.

Zhu,L. et al. (2009) Genomewide association between insertions/deletions and the
nucleotide diversity in bacteria. Mol Biol. Evol, 26, 2353—2361.

 

47

112 /810's112umo [progxo'sor112u1101urorq//:d11q 111011 pap1201umoq

910Z ‘091sn8nv uo ::

