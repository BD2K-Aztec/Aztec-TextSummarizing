Bioinformatics, 31 (12), 2015, 1988—1998

doi: 10.1093/bioinformatics/btv063

Advance Access Publication Date: 9 February 2015
Original Paper

 

Systems biology

A multiobjective memetic algorithm for PPI
network alignment

Connor Clark* and Jugal Kalita

Department of Computer Science, University of Colorado Colorado Springs, Colorado Springs, CO 80918, USA

*To whom correspondence should be addressed.
Associate Editor: Igor Jurisica

Received on July 28, 2014; revised on December 10, 2014; accepted on January 27, 2015

Abstract

Motivation: There recently has been great interest in aligning protein—protein interaction (PPI)
networks to identify potentially orthologous proteins between species. It is thought that the topo—
logical information contained in these networks will yield better orthology predictions than
sequence similarity alone. Recent work has found that existing aligners have difficulty making use
of both topological and sequence similarity when aligning, with either one or the other being better
matched. This can be at least partially attributed to the fact that existing aligners try to combine
these two potentially conflicting objectives into a single objective.

Results: We present Optnetalign, a multiobjective memetic algorithm for the problem of PPI net—
work alignment that uses extremely efficient swap—based local search, mutation and crossover op—
erations to create a population of alignments. This algorithm optimizes the conflicting goals of
topological and sequence similarity using the concept of Pareto dominance, exploring the tradeoff
between the two objectives as it runs. This allows us to produce many high—quality candidate align—
ments in a single run. Our algorithm produces alignments that are much better compromises be—
tween topological and biological match quality than previous work, while better characterizing the
diversity of possible good alignments between two networks. Our aligner’s results have several
interesting implications for future research on alignment evaluation, the design of network align—
ment objectives and the interpretation of alignment results.

Availability and Implementation: The C++ source code to our program, along with compilation
and usage instructions, is available at https://github.com/crclark/optnetaligncpp/

Contact: connor.r.clark@gmail.com

Supplementary information: Supplementary data are available at Bioinformatics online.

 

 

1 Introduction

As the sizes of known protein—protein interaction (PPI) networks
grow, so does interest in analyzing them. One of the more ambitious
efforts in this area is aligning the PPI networks of two different spe—
cies, with the goal of identifying orthologous proteins as well as
shared pathways and complexes that hint at the PPI network of a
common ancestor. There has already been a good deal of progress in
this area, with past work reporting success in finding large shared
subnetworks between Saccbaromyces cerevisiae and Homo sapiens,

as well as success in reconstructing phylogeny based on network

overlap discovered by an aligner (Kuchaiev and Przulj, 2011;
Kuchaiev et 61]., 2010).

Despite these successes, PPI network alignment is a young re-
search area. The incomplete, noisy nature of existing PPI networks
makes alignment difficult, with existing aligners performing dramat-
ically better on noise—free synthetic networks compared with noisy
real—world networks (Clark and Kalita, 2014). Furthermore, it has
been found that the two objectives of biological and topological fit
that these aligners optimize conﬂict to a larger extent than previ—
ously realized. Different aligners construct alignments that are dra—
matically different, with some optimizing topological fit at the

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 1988

112 /310'spaumo [p.IOJXO'SSUBUHOJUTOTQ/ﬁdllq 11101; popeommoq

9IOZ ‘09 lsnﬁnv uo ::

A multiobjective memetic algorithm

1989

 

expense of sequence similarity, while others do the opposite. While
some of these aligners provide a user—controlled parameter for ad—
justing between optimizing one objective over the other, even when
this parameter is adjusted as widely as possible, existing aligners
only output alignments in small, non—overlapping regions of object—
ive space that are often quite distant from each other (Clark and
Kalita, 2014; Patro and Kingsford, 2012). Lastly, these aligners tend
to produce very different alignments, sometimes agreeing on as few
as 5% of their total aligned pairs (Patro and Kingsford, 2012),
which makes it necessary for the user to run many different aligners
to get an idea of the many alignments possible. The difficulties with
the conﬂict between topological and biological fit, and the disparate
results of existing aligners, show that the problem of PPI network
alignment is far from solved.

To this end, we introduce a multiobjective memetic algorithm,
Optnetalign (Optimizing Network Aligner), for performing network
alignment. Unlike most existing aligners which use custom—built esti—
mators of node similarity which don’t always have a clear connec—
tion to final alignment quality, we use a multiobjective memetic
algorithm (Deb, 2001), which can produce a large number of di—
verse, high quality alignments in a single run. Our approach is able
to better optimize both the topological and sequence similarity of
the proteins aligned, and instead of arbitrarily emitting a single
alignment at one point in objective space, Optnetalign produces a
Pareto front of alignments that characterize the wide variety of pos—
sible tradeoffs between the conﬂicting objectives of network align-
ment. This tends to produce a wider variety of alignments than
using all previously created aligners together, and these alignments
tend to be comparable to or of better quality than those produced
by previous aligners.

2 Methods

2.1 PPI networks and the goal of alignment

A PPI network is a graphical representation of all the proteins in a
given organism, where the nodes of the network represent proteins,
and a link between two proteins indicates that they interact to per—
form some biological function. Protein interaction is measured
through a number of different experimental methods, with the most
common being coimmunoprecipitation (Aebersold and Mann,
2003). A large amount of effort has gone into collecting and curat—
ing the results of many protein interaction experiments, and the re—
sults are stored in databases such as DIP (Xenarios et 61]., 2002),
Isobase (Park et 61]., 2011), BIOGrid (Chatr—aryamontri et 61]., 2013)
and STRING (Franceschini et 61]., 2013). A related research effort in
this area is the Gene Ontology (GO), a large database annotating
genes and proteins with information about their function, the biolo—
gical processes in which they participate and the cellular compo—
nents in which they are found (Ashburner et 61]., 2000). The GO
database is constantly being updated and revised as new discoveries
are made. An important area of research is the transfer of GO anno—
tations from proteins in one species to orthologous proteins in an—
other. Some species have more complete GO annotation data than
others, so it is desirable to find a way to accurately and automatic—
ally predict GO annotations for unannotated proteins in less—studied
species.

PPI network alignment is a way to use both the sequence similar—
ity between proteins, as well as the topology of PPI networks, to
find likely orthologous proteins between species. The goal is to cre—
ate algorithms that can automatically find likely subnetworks of
two species’ PPI networks that are common to the two species, and

from there form hypotheses about protein function in species for
which less information exists. A single run of an alignment program
can generate thousands of candidate ortholog pairs.

2.2 Pairwise global alignment

We are given two graphs G1 : (V1,E1) and G2 : (V2,E2), whose
vertices represent proteins, and the presence of an edge (u, v) in E1
(or E2) indicates that the two proteins represented by u and z/ inter—
act in G1 (or G2). We assume, without loss of generality, that
|V1|S|V2|-

The problem of pairwise global alignment is to find a one—to—one
function (In the definitions that follow, we will employ a shorthand
where f is also applied to edges. In such cases f ((u, 12)) is shorthand
for  This makes several definitions significantly easier to
read.) f : V1 —> V2 that maps each node in V1 to the node it best
matches in V2, according to the topology of the network around the
node and the sequence similarity of the proteins represented by the
nodes. The various methods for determining the ‘best’ match will be
described further below. The resulting alignment f shows us a sub—
network that the two networks have in common. The problem of
global alignment is equivalent to the subgraph isomorphism prob—
lem, which is NP—Complete (Cook, 1971), so aligners produce ap—
proximate solutions using a variety of techniques that will be
discussed below.

2.3 Evaluating alignment quality

Once an alignment has been constructed, we must measure the ex—
tent to which it has satisfied the two objectives of maximizing both
the topological fit between the two networks and the number of
likely orthologs that have been matched. These objectives are in—
tended to measure the extent to which we have identified overlap—
ping pathways and orthology relationships respectively. Three
closely related metrics for topological fit have been used in the glo—
bal network alignment literature, which present different ways of
evaluating how well one network has been matched to the other: EC
(Kuchaiev et 61]., 2010), ICS (Patro and Kingsford, 2012) and S3
(Saraph and Milenkovic, 2014). Of these, EC is the most universally
used, while ICS and S3 are newer refinements of EC. These three
metrics are ratios taking values between 0 and 1, with higher values
being better. They all share the same numerator, which represents
the number of edges that have been conserved by the alignment 

conserved(f) :  ﬂ E2| (1)

They differ, however, in their denominators. EC simply divides by
|E1|, showing us how many of the edges in the first network have
been successfully matched. ICS refines this by instead dividing by
|EGZV<V1H |, the number of edges in the induced subgraph of G2 that f
maps to. This effectively penalizes alignments from sparse graph re-
gions to dense graph regions. S3 is a further refinement of ICS, which
penalizes dense—to—sparse as well as sparse—to—dense alignments by
dividing by |E1| —l— |EG2WV1H| —  ﬂ E2|. While we previously
evaluated existing algorithms using ICS (Clark and Kalita, 2014),
we switch to S3 in this article because, in contrast to the aligners we
evaluated previously, Optnetalign is able to ‘cheat’ when optimizing
ICS by minimizing the denominator without increasing the numer—
ator, and MAGNA exhibits this behavior as well (Saraph and
Milenkovic, 2014). S3 properly penalizes this behavior.

We also use a measure of agreement derived from biological
knowledge. The true alignment between two PPI networks is at least
partially unknown, so one cannot simply report the percentage of
nodes mapped to their true orthologs, except when using synthetic

112 /310'spaumo [p.IOJXO'SOTlBIIHOJUTOTQ/ﬁdllq 11101; popeommoq

9IOZ ‘09 lsnﬁnv uo ::

1990

C. Clark and J. Kalita

 

benchmark data. However, we can at least verify that the proteins
mapped to one another are similar in function. All the literature on
PPI network alignment makes use of GO annotations to evaluate the
accuracy of their alignments, by comparing the similarity of GO an-
notations between aligned proteins. Several papers simply report the
percentage of aligned pairs that share more than 12 GO annotations
(Kuchaiev and Przulj, 2011; Memisevic and Przulj, 2012;
Neyshabur et 61]., 2013), while others use ontological similarity
methods (Guzzi and Mina, 2014; Patro and Kingsford, 2012). We
use a Jaccard index, introduced by Aladag and Erten (2013). In the
context of network alignment, this measure is called GO consist—
ency, and is defined as

|GO(u) r1 GO(z/)|

GOC(u,v) = W

(2)
for an aligned pair of nodes 14 E V1 and z/ E V2, where GO(u) de—
notes the GO terms associated with the protein 14. We restrict this to
GO terms at distance five from the root of the ontology, so as not to
confuse the analysis by using GO terms of differing specificity. We
then report the sum of the GO consistency over all alignment pairs
for each alignment produced.

To further ease comparison with existing aligners, we evaluate
on the same dataset of Isobase networks as we used in our previous
work (Clark and Kalita, 2014), which combines PPI information
from DIP (Xenarios et al., 2002), BIOGrid (Chatr—aryamontri et 61].,
2013), and the Human Protein Reference Database (Prasad et 61].,
2009), three curated sources of PPI data derived from a variety of
experimental methods (for more information on the Isobase net—
works, see our Supplementary Information File). The only differ-
ences are that we now use the S3 metric instead of ICS, and, since
the synthetic dataset NAPAbench (Sahraeian and Yoon, 2012) did
not exhibit the same tradeoff between ICS and biological similarity
that is exhibited in the real—world Isobase networks (Clark and
Kalita, 2014), we evaluate primarily on the Isobase networks, using
the NAPAbench data to verify the correctness of our alignments,
since the true alignments for NAPAbench are known.

Both topological similarity techniques and sequence similarity
have advantages and disadvantages. It has been argued that over—
reliance on topological similarity can be misleading, since actual
complexes may appear disconnected in current noisy, incomplete
datasets, and so sequence similarity information is essential to
produce the best alignment possible (Huang et 61]., 2012).
Sequence similarity scores also have their problems, since the ac—
tual level of sequence similarity between two proteins that serve a
similar function can vary (Chindelevitch et 61]., 2013). Previous
work has found (Clark and Kalita, 2014; Patro and Kingsford,
2012) that existing aligners uncover a tradeoff between topo—
logical fit and biological fit when constructing alignments—it is
not possible to jointly maximize both. This tradeoff can be quite
dramatic. For example, on the Caenor/oabdz'tis elegans—Drosop/oila
melanogaster alignment problem, NETAL (Neyshabur et 61].,
2013) achieves an S3 of 0.41 and a GOC of 12, while PINALOG
(Phan and Sternberg, 2012) manages a S3 of 0.065 and a GOC of
230. When existing aligners are all plotted for one of these prob—
lems (as in Fig. 3 later), we see a distinctive curve of tradeoffs be—
tween these two objectives. We also find that these aligners
produce alignments in non—overlapping regions of the objective
space, even for those aligners that provide a parameter for con—
trolling the tradeoff between the two objectives. As we explain
further below, ours is the only aligner that was designed to expli—
citly explore the possible tradeoffs between these two objectives,
and to output many alignments for further analysis.

2.4 Existing alignment algorithms

One of the first algorithms for global network alignment was
IsoRank (Singh et 61]., 2008). This was then extended into a version
that could align many networks simultaneously, called IsoRankN
(Liao et 61]., 2009). These two work by computing a similarity meas—
ure similar to Google’s PageRank algorithm, and this is combined
with BLAST bit scores to find a mapping. Another notable set of
aligners is the GRAAL family (Kuchaiev and Przulj, 2011; Kuchaiev
et 61]., 2010; Memisevic and Priulj, 2012; Milenkovic et 61]., 2010).
These work by counting small induced subgraphs called ‘graphlets’
to compute pairwise node similarity. They differ mainly in what
additional similarity measures they use, and in their matching stages.
NATALIE 2.0 frames alignment as a relaxation of an integer linear
programming problem (El-Kebir et 61]., 2011). GHOST uses meth—
ods from spectral graph theory to estimate node similarity (Patro
and Kingsford, 2012). PINALOG recursively maps networks to—
gether by first matching dense subgraphs, and then matching the
nodes within those subgraphs (Phan and Sternberg, 2012). NETAL
uses topological data exclusively, iteratively computing match confi-
dence as the expected number of conserved edges (Neyshabur et 61].,
2013). SPINAL uses both coarse— and fine—grained matching steps to
iteratively improve an alignment (Aladag and Erten, 2013). PISwap
(Chindelevitch et 61]., 2013) first creates a maximum—weight match
by bit score, and then improves the topological fit of the alignment
through swap—based local search. MAGNA (Saraph and
Milenkovic, 2014) is the first aligner to use a genetic algorithm, and
uses a crossover—only design.

Most aligners can be categorized as belonging to one of two
classes. The first class, which has been much more popular, is what
we call two-stage alignment. Such aligners first compute some esti—
mate of the similarity of each pair of nodes in V1 >< V2 using some
topological similarity metric and (in most cases) BLAST bit scores or
E—values, and then use this similarity matrix to create a maximum-
weight bipartite matching between the nodes of V1 and V2. A simple
strategy for this matching is the Hungarian algorithm, which pro-
duces an optimal matching (Chindelevitch et 61]., 2013; Milenkovic
et 61]., 2010). However, because the similarity scores used are them—
selves only approximate, the O(n3) time complexity of the
Hungarian algorithm is generally not worth the time, and most
aligners favor faster, greedy matching algorithms. Many aligners,
such as GRAAL (Kuchaiev et 61]., 2010), MI—GRAAL (Kuchaiev and
Przulj, 2011), and GHOST (Patro and Kingsford, 2012), use vari—
ants on a ‘seed—and—extend’ method, where the most similar pair of
nodes is aligned first, and then nodes neighboring that pair are
matched.

The second, and much smaller class, that is sometimes used in
network alignment are search-based aligners. These aligners use
heuristic or metaheuristic algorithms to continuously refine a single
alignment or a population of alignments. With such algorithms, the
alignment objectives that these aligners are trying to optimize are
computed continuously as the alignment is constructed, instead of
being measured afterward as they are in the two—stage aligners. Only
a handful of search—based aligners exist. These are SIM—T (Kpodjedo
et 61]., 2014), which uses tabu search, where ‘moves’ are additions
and removals of aligned pairs from the alignment; PISwap
(Chindelevitch et 61]., 2013), which uses the 3—opt heuristic to inter—
change the assignments of three aligned pairs at each step; and
MAGNA (Saraph and Milenkovic, 2014), which uses a genetic algo—
rithm that attempts to maximize either EC, ICS or S3. SPINAL
(Aladag and Erten, 2013) also performs some amount of swap—based
hill climbing in its ‘fine-grained’ matching stage. Outside of the bio—
logical network alignment literature, the use of metaheuristic search

112 /310's112u1no [p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

A multiobjective memetic algorithm

1991

 

for graph matching has been researched as well, but these
approaches are less relevant as they only optimize topological fit
and are applied to graphs much smaller than those seen in bioinfor-
matics (Barecke and Detyniecki, 2007; Cicirello and Smith, 2000;
Cross et al., 1997; Lipets et al., 2009).

Optnetalign falls into the search—based category, because we be—
lieve the two—stage paradigm has a number of severe weaknesses.
First of all, two—stage aligners typically introduce both a novel way
of computing pairwise node similarity along with a new matching
algorithm. Little work exists on mixing—and—matching approaches to
the two stages to discover whether the first or second stage is more
responsible for the results of a given aligner. To our knowledge, the
only works attempting this compared only MI-GRAAL to
IsoRankN (Milenkovic et al., 2013) and MI—GRAAL to GHOST
(Crawford et al., 2014). Since two—stage algorithms do not track
alignment quality as they construct their alignments, it is very diffi-
cult to understand what portions of a two—stage algorithm are re—
sponsible for the quality of the results. This makes it difficult to
create a new algorithm of this type. As Saraph and Milenkovic
(2014) recently observed, these two—stage aligners, while hoping to
optimize metrics such as EC and some metric of GO term agree—
ment, actually optimize ad—hoc similarity scores that have no clearly
established relation to standard alignment evaluation metrics. The
existing literature provides little explanation of why or whether
such similarity scores would be expected to work. In contrast,
search—based aligners focus on maximizing the actual alignment ob-
jectives that are currently accepted in the alignment literature.

A problem shared by all existing aligners is that they do not ex—
plicitly approach the problem of network alignment as a multiobjec—
tive one. It has become increasingly clear that there is a tradeoff
between our alignment objectives, as we discussed above. However,
the best any existing aligner does to address this problem is provid—
ing users with a parameter or, which gives the user rough control
over the weight of biological or topological similarity in construct—
ing an alignment, with some equation similar to

sim(u,z/) : or X t(u,z/) —l— (1 — or) X b(u,z/) (3)

where sim(u, v) is the aligner’s estimated overall similarity between
nodes 14 and z/ and t(u, v) and [9(u, v) are the aligner’s estimated topo—
logical and sequence similarity of the two nodes respectively. This is
insufficient. Not only does this approach requires trial—and—error ex—
periments on the part of the user, and complete recalculation of the
alignment each time or is adjusted, but existing aligners only cover a
narrow section of the objective space, even when varying or as widely
as possible. Optnetalign produces a variety of solutions more diverse
than existing aligners combined, and does so in a single run without
extra effort on the part of the user.

2.5 Multiobjective optimization

Metaheuristics are a family of optimization techniques for problems
that cannot be framed in a way amenable to standard optimization
techniques, such as when objective functions are discontinuous, not
differentiable or not functions of real numbers. In PPI network
alignment, our goal is to maximize several objectives that are a func—
tion of a network alignment—the problem must first be relaxed for
standard optimization techniques to work (El—Kebir et al., 2011).
Metaheuristics are thus a natural fit for network alignment. Genetic
algorithms are a particular family of metaheuristics inspired by bio—
logical evolution (Michalewicz and Fogel, 2004). Initially, a popula-
tion of candidate solutions are generated at random. These solutions
are ranked by their fitness, and the best of them are allowed to

‘breed’ to produce a new population of solutions. The new popula—
tion undergoes mutation with some small probability, and then the
process begins again, until an acceptable solution has been found
(Floreano and Mattiussi, 2008). This approach is applicable to
many problems, since it only requires a way of scoring the ‘fitness’
of candidate solutions, and a data structure representing solutions
for which we can define a useful crossover operation (for combining
two existing solutions) and a mutation operation (for randomly
modifying solutions). Memetic algorithms are a generalization of
standard genetic algorithms that additionally incorporate a local
search heuristic to further improve their results (Blum et al., 2011).
Genetic algorithms and local search heuristics are complementary—
the former explores large spaces quickly through crossover and mu—
tation, while the latter is particularly effective at refining solutions
that have been found.

While genetic algorithms have been used since the 1970’s (e.g.
Holland, 1975), variants capable of efficiently optimizing multiob-
jective problems have only become a focus of research more re—
cently, with algorithms such as NSGA—II (Deb et al., 2002) and
SPEA2 (Zitzler et al., 2001) becoming immensely popular. Other
local search approaches to multiobjective optimization have had
great success, as well (Corne et al., 2000; CzyzZak and Jaszkiewicz,
1998; Knowles and Corne, 2000). Multiobjective memetic algo—
rithms have also been developed in recent years (Knowles and
Corne, 2005; Knowles et al., 2001).

The key difference between single objective metaheuristics such
as MAGNA (Saraph and Milenkovic, 2014) and multiobjective
metaheuristics such as Optnetalign is that the latter can optimize
several objectives, even if they conflict, and then output a represen—
tative set of solutions that are optimal tradeoffs between the con—
ﬂicting objectives. Standard genetic algorithms represent the fitness
of a solution as a single number, often by creating a linear combin-
ation of multiple objectives using an equation similar to Equation 3.
Then, solution x is preferred to solution 32 if fitness(x) > fitness(y).
However, if x has a high topological fit and a low biological fit,
while 3) has a low topological fit and a high biological fit, it may be
that neither solution is clearly better. This information is lost using
the approach of Equation 3. Multiobjective optimization replaces
the greater—than relation with the subtler relation of Pareto domin-
ance, which operates on a vector of fitness values. We now intro—
duce several new terms used in multiobjective optimization (we refer
the reader to e.g. Deb, 2001 or Zhou et al., 2011 for a more thor-
ough description of these concepts than space permits here). The
first is Pareto optimality: a solution to a multiobjective optimization
problem is Pareto optimal if further increasing one of the objectives
would require decreasing one or more of the other objectives. Such
solutions represent optimal tradeoffs between the given objectives.
The second concept is Pareto dominance: solution x dominates solu—
tion 3) if x is at least as good as y with respect to all objectives, and
strictly better than 3) with respect to at least one objective. We prefer
a solution x to a solution 3) if x Pareto dominates y, and we are
indifferent between x and y if neither dominates the other. This
definition leads to the possibility that a set of solutions may be non—
dominated with respect to each other. Multiobjective genetic algo—
rithms work by selecting non—dominated members of the population
for reproduction at every generation, in the hopes of approximating
the set of Pareto optimal solutions. This approximate Pareto optimal
set will, in turn, allow us to characterize the Pareto front of the ob—
jective space—the boundary between attainable and unattainable so—
lutions. Multiobjective genetic algorithms output a wide variety of
representative solutions from the Pareto optimal set. Since these so—
lutions are all Pareto optimal, we cannot a priori prefer one of them

112 /310's112u1no [p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

1992

C. Clark and J. Kalita

 

over another, and a human decision maker must use some other in—
formation or subjective preference to decide which of these solutions
to keep. In the case of PPI network alignment, this means that our
algorithm produces a number of alignments with different tradeoffs
between topological and biological fit. These alignments can then be
studied further to better understand the relationship between the
two networks under consideration.

2.6 Our algorithm

We present a multiobjective memetic algorithm that discovers a rep—
resentative set of non—dominated alignments using crossover, muta—
tion and swap—based hill climbing. Our algorithm maintains a
population of non—dominated alignments and attempts to improve
them. The algorithm initializes with randomly—constructed align—
ments. On each iteration, Optnetalign selects random members of
the population, performs swap—based crossover and mutation, fol—
lowed by swap—based hill climbing. We randomly select either hill
climbing that improves one objective while ignoring the others, or
hill climbing that only makes moves that do not worsen any obj ect—
ive. The resulting alignment is then placed in the population if it is
not Pareto dominated by any other population member, and align-
ments it Pareto dominates are removed from the population. This
continues until a user—specified time limit is reached, after which the
program outputs all non—dominated solutions found. Generally, we
find that the algorithm converges after about 10 h of runtime.

Following other genetic algorithms for network alignment, we
adopt a permutation encoding for our alignments (Barecke and
Detyniecki, 2007; Saraph and Milenkovic, 2014). In this encoding,
we label the n nodes of each network with the integers
{0, 1,  — 2,n — 1}. Since we assume |V2|2|V1|, we add ‘dummy’
nodes to V1 so that |V1| : |V2|. Then our alignment f can be stored
in memory as an array a such that if f(u) : 12, then au : 12. All indices
iZ|V1| of a are ignored. This representation simplifies searching
through the space of alignments to searching through the space of
permutations of integers in the interval [0, |V2|), allowing us to
adapt permutation—based search operators that have been well—
studied in genetic and local search algorithms for the traveling sales—
man problem (Goldberg, 1989).

We adopt the Uniform Partially Matched Crossover (UPMX) op—
erator introduced in a genetic algorithm for a related largest com—
mon subgraph problem (Cicirello and Smith, 2000). We compared
this to several other standard and custom—built crossover operators
and found that it tended to give the best performance. UPMX works
as follows: for two permutations a and h, for each index i with prob—
ability cxswapph, swap the value of a,- and hi. Unless a,- : hi, the new
values of a,- and h,- after the swap will occur in their respective arrays
in two places. To fix this, we also swap a,- and bk, where j and la are
the indices of the duplicate values in their respective arrays. An ex—
ample of this swap process for index i: 0 follows.

1. Initial arrays: a = {1,3,2} and h = {2,1,3}.
Swap the ﬁrst elements of a and h: a = {2,3,2} and
h = {1,1,3}.

3. a has a duplicate at i: 2 and b has a duplicate at la : 1. Swap a,-
and bk: a = {2,3,1} and h = {1,2,3}.

For mutation, we also adopt a simple swap—based scheme. For a
permutation a, for each index i with probability mutswapph, we
randomly select an index j 7E i and swap a,- with a,.

We also make use of two variants on a simple hill climbing algo-
rithm based on swaps. The first variant, hillClithonDominated,
performs repeated random swaps, undoing a swap if it worsens any

of the objective functions. The second variant, hillClithneOhj,
takes an objective name as an argument, and only undoes a swap if
the given objective is worsened, ignoring any worsening of other ob—
jectives. We use the former hill climbing variant as a core function to
improve our population of alignments, and use the latter to increase
the variance of our population in objective space, which helps us to
find a better set of representatives of the approximated Pareto front.

It is important to note that our crossover, mutation and hill
climbing functions all use swapping as their basic operation. Since
the only way permutations are modified is by swapping, this allows
us to implement our fitness evaluations very efficiently—we only
compute the change in the user—specified objectives at each swap.
This allows us to evaluate millions of swaps per second on a desktop
CPU. This speed is such that a simplified version of our program,
which employs only hill climbing to create a single alignment, pro-
duces a single excellent alignment in seconds. The reasoning behind
Optnetalign is to leverage this speed to produce hundreds of align—
ments in the same amount of time that several other aligners take to
produce a single alignment, since waiting hours for a result is al—
ready expected by users of network alignment software.

Our population is stored in an archive data structure that auto—
matically discards dominated solutions when better solutions are
inserted. This gives us a data structure that stores only the non—
dominated solutions that have been found so far. When the archive
exceeds its user—defined size limit, it shrinks itself to the maximum
size by discarding the most crowded solutions, using the crowded
comparison operator first introduced in NSGA—II (Deb et al., 2002).
This helps to ensure that a diverse variety of solutions are main—
tained in the population at all times. This archiving strategy is simi-
lar to the multiobjective local search algorithm PAES (Knowles and
Corne, 2000).

To increase the performance of our algorithm, it was designed
from the beginning to be amenable to parallelization. The user speci—
fies how many threads the program is to use, and each thread exe—
cutes Algorithm 1 until a user—specified time limit has been reached.
The threads all share the same archive, which is the only point of
communication between the threads. This solution is highly scal-
able, and is able to fully utilize 16 processor cores in our tests. The
overall structure of the algorithm is very straightforward, and rem-
iniscent of other hybrid genetic algorithms in the literature; e.g.
(Nguyen et al., 2007). One quirk of the algorithm is that we first de—
cide probabilistically whether to perform hillclithneOhj or
hillClithonDominated, but then afterwards, perform another
round of hillClithonDominated. This ensures that, when
hillclithneOhj is chosen, the alignment is not left in a dominated
state that could easily be improved to a non—dominated one.

 

Algorithm 1 Per—Thread Loop

 

while time limit not reached do
(parent1,parent2) <— two random members of Archive
child <— initialize new alignment
with probability cxrate do
child <— crossoz/er(cxswapph, parentl, parent2)
end
with probability mutrate do
child <— mutate(mutswapph, child)
end
with probability oneohjrate do
randOhj <— randomly—chosen objective

child <— hillclithneOhj(randOhj, niters, child)

112 /310's112u1no [p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

A multiobjective memetic algorithm

1993

 

else do
child <— hillclithonDominated(niters, child)
end
child <— hillclithonDominated(niters, child)
insert( child, Archive)
end while

 

The user—adjustable parameters of our algorithm include the
time limit, the rate of crossover (cxrate) and mutation (mutrate), the
probability of performing a swap at each index for crossover
(cxswapph) and mutation (mutswapph), the probability that single-
objective hill climbing will be used instead of non—dominated hill
climbing (oneohjrate), and the number of iterations of hill climbing
to perform in each loop (niters). We find that over the course of the
algorithm’s execution, the optimal rate of crossover, mutation and
one—objective hill climbing seem to vary. We thus provide the option
of automatically adjusting those rates to their rates of success at pro—
ducing non—dominated solutions over the course of the algorithm’s
execution. Other, more sophisticated control schemes exist in the
genetic algorithms literature (Eiben et al., 1999; Eiben and Smit,
2011), but this simple heuristic appears to work quite well. We find
that cxswapph : 0.5, mutswapph : 0.0001, and hillclimhiters :
10000 are good settings for the remaining parameters. It is import-
ant to emphasize that we set the number of hill climbing iterations
quite high, so that computation time is dominated by hill climbing.
We find that hill climbing is best used as the primary means for ob—
taining results, with crossover and mutation mostly playing a sec—
ondary role to prevent premature convergence.

3 Results and discussion

As discussed above, we report our results aligning the networks
included in Isobase (Park et al., 2011). For each alignment problem,
we run our algorithm for 12 h. We try two different sets of objectives.
In the first experiment, we set Optnetalign to maximize S3 as well as
the sum of the BLAST bit scores of proteins that have been aligned,
leaving GOC as an external measure of alignment quality. In the se—
cond experiment, we optimize S3 and GOC directly. The first experi-
ment is most directly comparable to existing aligners, which try to
optimize the sum of the bit score of all pairs of nodes that have been
aligned (i.e. a maximum—weight matching), while the second is an in—
vestigation of how well we can optimize the overlap of GO terms dir—
ectly, which helps us obtain an approximate upper bound on the
extent to which both topological fit and biological function can be
jointly optimized. For each alignment problem, we set Optnetalign’s
maximum population parameter to output an approximate Pareto
front containing at most 200 alignments.

Since Optnetalign outputs more candidate alignments than the
other aligners we evaluate against combined, we report the average,
minimum and maximum of S3 and GOC of the output alignments
for each problem. In our experiments, these numbers are stable from
run to run. We also compare the Pareto front of alignments our al-
gorithm produces to all the alignments produced by the aligners that
have a user—configurable tradeoff parameter between topological
and biological similarity for the C.elegans—D.melanogaster align—
ment problem.

We also make some changes in the aligners we compare with,
when compared with our previous benchmark paper. Since our
alignment algorithm is somewhat similar to PISwap and MAGNA,
we add these two aligners to the evaluation. We also remove
IsoRank (Singh et al., 2008), GRAAL (Kuchaiev et al., 2010),

MI-GRAAL (Kuchaiev and Przulj, 2011) and NATALIE (El-Kebir
et al., 2011) from consideration, since they were Pareto dominated
by other existing aligners on this dataset.

To ensure that GO annotations transferred by sequence similar—
ity were not skewing our results, we evaluated using only experi—
mentally—verified GO terms. For results using all GO terms, see our
Supplementary Information File.

3.1 First experiment benchmark results

Here we report the results of optimizing S3 and the sum of bit scores
of aligned pairs. We report the same data in tabular form in our
Supplementary Information File. Optnetalign matches or outper—
forms all existing aligners on S3, and outperforms all but one aligner
on GOC. As noted above, we report the minimum, average and
maximum of these scores. These metrics are almost perfectly in—
versely correlated, so for all of these experiments, the alignment
Optnetalign produces with the highest S3 has the lowest GOC, and
vice versa.

We first consider our performance on S3 in Figure 1. We must
note that several aligners crashed on several experiments. This is
denoted by a missing bar in these instances. The maximum S3 found
by Optnetalign on each problem instance is comparable to or ex—
ceeds that of NETAL, which was previously the best performer on
this dataset. However, as shown in Figure 2, our topologically best
alignments have much higher GOC scores than NETAL’s. Even our
alignments with the poorest topological quality tend to perform
comparably to or better than many existing aligners.

With respect to GOC scores, our best alignments are all a distant
second place behind PISwap. However, because PISwap works by
first maximizing sequence similarity with the Hungarian algorithm,
and then is limited to performing swaps that don’t worsen the se—
quence similarity matching, its topological fit is extremely low, with
S3 scores generally an order of magnitude lower than any other
aligner. Thus, PISwap’s alignments constitute an extreme point on
the Pareto front. On its topologically worst performance, PISwap
only finds 91 conserved edges on the C.elegans to S.cerez/isiae align—
ment problem, out of the 4495 possible. Our best GOC scores,
which outperform all aligners except PISwap, come from alignments
that have non—trivial S3 scores that are in some cases, such as the
S. cerevisiae to H .sapiens problem, competitive with existing
algorithms.

We also compare the Pareto front found by Optnetalign on the
C.elegans to D.melanogaster problem to the range of tradeoffs pro—
duced by existing aligners that expose a tradeoff parameter to the
user for balancing topological and biological similarity. The results
in Figure 3 show that Optnetalign is able to find a much wider
Pareto front than all previous aligners. Previously, it was not nearly
as clear that such a wide range of results was possible. The align—
ments Optnetalign produced for this problem also varied greatly in
the pairs of nodes they chose to align. The least similar pair of net-
works had only 8.7% of their aligned pairs in common. The max-
imum was 73%, and the average was 36%. This diversity in aligned
pairs is comparable to the diversity in all the alignments produced
by previous aligners.

3.2 Second experiment benchmark results

Here we report the results we obtain when we set Optnetalign to op—
timize S3 and GOC directly. Since ours is the only aligner among
those tested that can optimize GO term consistency instead of bit
score sum, all other aligners are still optimizing bit score sum, when

112 /810's112u1no [p.IOJXO'SOTlBIIIJOJUTOTQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

 

 

 

 

 

 

    

 

 

 

 

 

 

 

 

 

 

 

 

 

1994 C. Clark and J. Kalita
120 GOC (Experimental terms only) for IsoBase Tests 33 for IsoBase Tests
I I I | ' 1.0 I I I I I I
100 - -
0.8 - -
80 - -
_ 0.6 - -
o .
O 60 — _
o ‘82
0.4 — -
40 - -
20 - -
ce-dm ce-hs ce-sc dm-hsﬂ ’ sc-dm sc—h;
- NETAL - C-GRAAL I: OptnetalignMin _ '
— PINALOG - GHOST I: OptnetalignAvg - NETAL - C'GRAAL OPtnetalfgnM‘“
- SPINAL model 1:1 PISwap I: OptnetalignMax - PINALOG '2' GHOST OptnetalfgnAVg
_ SPINAL mode H : MAGNA - SPINAL model E PISwap I:| OptnetalignMax
— SPINAL mode 11 1:1 MAGNA

 

 

 

Fig. 1. .56 score for various aligners and our own for the Isobase dataset,
when Optnetalign is set to optimize .5G and sum of bit scores. Note that the
bars in the chart are in the same order as in the legend

800 GOC (Experimental terms only) for IsoBase Tests

 

700 - _

600 - -

500— — c _

400 -

GOC

   
 

 

 

 

 

 

 

 

 

 

 

ce-sc dm-hs

 

ce-hs

 

 

sc-hs
- NETAL - C—GRAAL OptnetalignMin
- PINALOG I:I GHOST OptnetalignAvg
- SPINAL model E PISwap |:| OptnetalignMax
— SPINAL mode II E MAGNA

 

 

 

Fig. 2. GOC for various aligners and our own for the Isobase dataset, when
Optnetalign is set to optimize .5G and sum of bit scores. Only GO terms with
experimental evidence codes are used

applicable, so all of the scores in Figures 4 and 5 are the same as in
Figures 1 and 2, except for Optnetalign’s.

In Figure 4, we see that our S3 results are much the same as be—
fore with the best alignments, with only slightly lower scores.
The average scores are somewhat lower now, especially on the latter
3 alignments, where the average no longer outperforms most align—
ers. The minimum scores are very similar to those in Figure 1,
as well.

The primary difference when optimizing GOC directly, instead
of its imperfect proxy of bit score sum, is that we are now able to
obtain GOC scores that outperform PISwap on several problems.
While on the C.elegans to D.melanogaster problem, PISwap still
strongly outperforms all other aligners, Optnetalign is actually able
to outperform PISwap on the latter three alignment problems, and
performs much more strongly on the other problems involving
C.elegans. These results show that apparently better results can be
obtained by optimizing GOC directly, and we recommend that fu—
ture aligners also include this functionality.

 

 

 

Fig. 3. Pareto fronts found by various aligners with adjustable tradeoff param-
eters and our own for the C.elegans to D.melanogaster alignment problem,
when Optnetalign is set to optimize .5G and sum of bit scores. The scatter plot
here is visually indistinguishable from equivalent plots using other networks
from this dataset. We use C.elegans to D.melanogaster in this figure because
SPINAL and GHOST tended to crash on other problems, giving incomplete
data

 

S3 for IsoBase Tests

0.6 - -

0.4 — —

 

 

 

 

- NETAL - C-GRAAL m OptnetalignMin
- PINALOG I:I GHOST OptnetalignAvg
- SPINAL model EEG PISwap |:| OptnetalignMax
- SPINAL mode 11 I3 MAGNA

 

 

 

Fig. 4. .56 score for various aligners and our own for the Isobase dataset,
when Optnetalign is set to optimize .5G and GOC. Note that the bars in the
chart are in the same order as in the legend

3.3 Synthetic benchmark results

While the preceding benchmarks show that Optnetalign obtains ex—
cellent performance on real—world data, the true alignment for such
networks is unknown. Therefore, we additionally benchmark
against the NAPAbench network alignment benchmark dataset
(Sahraeian and Yoon, 2012) to evaluate node correctness—the share
of nodes in the smaller network that have been correctly mapped to
orthologous nodes in the second. On these synthetic tests,
Optnetalign achieves performance similar to, but slightly worse
than, the best—performing existing aligners on this dataset, PISwap
and GHOST, with Optnetalign’s best—scoring alignments achieving
node correctness levels between about 77 and 80%. On this dataset,
the alignments with highest node correctness are the alignments on
the high topological side of the Pareto front found; biological

112 /810's112u1no [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁdllq 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

A multiobjective memetic algorithm

1995

 

S3 vs. GOC for differing levels of tradeoff parameter for ce—dm

 

250

200

'4
.5.
i ‘Q.

C
100 g  _
I O

GOC Score
H
U]
c

 

 

 

 

50 - —
A
+
0 I I I I
0.0 0.2 0.4 0.6 0.8 1.0
.93
—( SPINAL mode I ‘ Natalie 2.0 + MAGNA
I SPINAL mode 11 X IsoRank . Optnetalign
Q GHOST

 

 

 

Fig. 5. GOC for various aligners and our own for the Isobase dataset, when
Optnetalign is set to optimize .5G and sum of GOC

similarity is less helpful, though still necessary, to create correct
alignments. For more details, see our Supplementary Information
File.

3.4 Execution times

The benchmarked aligners differed greatly in their execution times.
Unfortunately, since not all aligners were available for the same
platform, we had to execute many of them on virtual machines,
which prevented us from performing a precise comparison of their
relative execution times. Instead, we report here ‘ballpark’ execution
times, expressed in orders of magnitude. Like several of the best—per—
forming aligners, Optnetalign requires several hours to obtain good
results. Since Optnetalign is a metaheuristic, it can conceivably keep
trying to improve its alignments indefinitely. However, after be—
tween 10 and 12 h, it usually failed to find any further improvement.
For this reason, we ran all tests of Optnetalign with a time limit of
12 h. Comparison here is not entirely straightforward, however.
Optnetalign uses efficient swap—based operators that can produce
alignments extremely quickly. These operators allow Optnetalign to
produce hundreds of mutually non—dominated alignments in the
course of one run. In contrast, other aligners with adjustable trade—
off parameters only produce one alignment per run, and so must be
run many times to produce many alignments. When the user wants
to produce many alignments at different tradeoffs, Optnetalign can
save the user a significant amount of time. Additionally, if the user
wants only one alignment, a simplified version of Optnetalign is
available that can produce a single alignment in seconds or minutes,
depending on the size of the networks.

 

 

Aligner Time
NETAL seconds
PINALOG minutes
SPINAL minutes
GRAAL hours to days
C—GRAAL hours to days
GHOST hours to days
IsoRank minutes
PISwap minutes
MAGNA hours to days
Optnetalign hours to days

 

Table 1. Correlation matrix for various objectives on the
S.cerevisiae to H.sapiens alignment problem

 

 

ICS S3 EC GOC Bit score sum LCCS size
ICS 1.0 —0.132 —0.338 0.079 —0.103 —0.42
S3 1.0 0.957 —0.964 —0.848 0.939
EC 1.0 —0.948 —0.796 0.987
GOC 1.0 0.81 —0.91
Bit score sum 1.0 —0.75 9
LCCS size 1.0

 

Unlike the other objectives, the number of nodes in the largest common
connected subgraph (LCCS) was not set as an optimization objective in our
program; it was computed afterwards

3.5 Comparing objectives

The speed of Optnetalign, its ability to handle any number of object—
ives, and the large number of diverse alignments it can create in a
reasonable amount of time, allow us to perform novel analyses that
explore the inherent tradeoffs between many objectives, as well as
examine how different objectives are correlated. This can give us in—
sight into the nature of the network alignment problem, and help us
identify deficiencies in current alignment evaluation metrics. We
demonstrate this by performing another run of the S.cerez/isiae to
H.sapiens problem, in which we set the aligner to optimize EC, ICS,
S3, sum of bit scores and GOC. This time, we set the maximum
archive size very high, to allow the aligner to output as many non—
dominated alignments as possible in a 12 h run. This resulted in 571
unique, non—dominated alignments. The minimum agreement on
aligned pairs for these alignments was 1%, the maximum was 92%
and the average was 8.3%. This lack of agreement is consistent with
the lack of agreement between existing aligners (Patro and
Kingsford, 2012), so this confirms that our aligner produces align—
ments as diverse as using many different previously—published align-
ers together.

We present a correlation matrix for our objectives in Table 1.
EC and S3 are strongly positively correlated, but, as we noted above,
since Optnetalign can minimize the I CS denominator without
increasing the number of conserved edges, ICS is negatively corre—
lated with the other two topological metrics. We also include the
commonly used metric of the number of nodes in the largest con—
nected common subgraph (LCCS) here (see e.g. Kuchaiev and
Przulj, 2011 for more information), which Optnetalign cannot opti—
mize directly. To demonstrate how Optnetalign allows us to com—
pare the behavior of different alignment metrics, the relationship
between ICS and GOC is illustrated in Figure 3 of our
Supplementary Information. To better understand ICS inflation, we
also present a plot of EC against ICS in Figure 4 of our
Supplementary Information.

This experiment also demonstrates the potential utility of opti—
mizing for GO term consistency instead of bit score sum. In Figure 6
in our Supplementary Information, we show that, while bit score
sum and GOC generally correlate, the highest GOC scores we ob—
tain have bit scores sums that are less than half of the highest bit
score sum Optnetalign finds. This reinforces the fact that, in some
cases, proteins of similar function can have significant differences in
their sequences, and it shows the value of optimizing GOC directly.

This large set of alignments again highlights the inherent conﬂict
between optimizing measures of topological fit and measures of bio—
logical fit simultaneously. In Figure 5 of our Supplementary
Information, we show S3 plotted against GOC. Even though most of
the alignments dramatically outperform those of previous aligners,

112 /810's112u1no [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁ(11111 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

1996

C. Clark and J. Kalita

 

we still see a distinct tradeoff between S3 and GOC. Since previous
aligners varied dramatically in performance while only outputting a
single alignment, there was very little evidence that such a wide
Pareto front between these two objectives was obtainable. Previous
aligners which provided a user—controlled tradeoff parameter be—
tween these topological and biological similarity scores framed the
parameter as a small tweak, and in most cases, adjusting that par—
ameter through its entire range, as we did in producing Figure 3, ex—
plores only a small portion of objective space. Therefore, it was not
clearly understood that these two objectives conﬂict so sharply.

3.6 Potential directions for future work

Our results here show some weaknesses in existing network align-
ment research that open up many possibilities for future work.
Perhaps the most glaring question, given these results, is that of the
tradeoff between biological and topological similarity. The assump-
tion underlying the entire premise of global network alignment is
that different species share large regions of their PPI networks,
which they inherited from a common ancestor. Our results show
that finding that overlap is not as easy as was previously thought.
We can either align two networks in a way that matches many
neighbors in G1 to many neighbors in G2, or we can align two net—
works in such a way that proteins with similar GO annotations are
matched together. It does not appear from our results that it is pos—
sible to do both well. There are a number of possible reasons for this
that should be better explored in future work. First, as we noted pre—
viously (Clark and Kalita, 2014), this tradeoff is much less dramatic
in synthetic networks. It’s possible that currently known protein net—
works have too many false positive and false negative edges to be
aligned reliably, and the false positive edges mislead alignment algo—
rithms. If this is the case, we should probably prefer alignments with
higher GOC, even if they have a lower S3. Second, it is possible that
our current best topological metrics are insufficient and mislead
Optnetalign. These metrics all essentially count how many neigh-
bors in G1 have been matched to neighbors in G2, but they have no
way of ensuring neighbors of neighbors are matched to neighbors of
neighbors, or that other large structures between networks are
matched properly. One proposed metric that partially overcomes
this is to report the size the largest connected common subgraph,
but we have found that this metric correlates so strongly with met—
rics like S3 that it does not provide us with much additional helpful
information. This makes sense intuitively: conserving one more edge
could join two previously disconnected common subgraphs and es—
sentially double the score. Equivalently, reporting the size of the
largest common connected subgraph doesn’t tell us anything about
the distribution of the sizes of the remaining connected subgraphs
found. A few moderately large ones may be much more helpful than
one very large one, especially if the species are more distantly
related. Our algorithm performs well even when optimizing many
objectives in one run, and, as we show above, this can be used to
critically evaluate different candidate objectives.

It would also be possible to use this aligner to evaluate existing
aligners’ approximate topological similarity metrics, such as
GHOST’s (Patro and Kingsford, 2012) spectral graph signatures or
graphlet degree signatures (Priulj, 2007; Milenkovic and Priulj,
2008). The relative performance of these similarity metrics has al—
ways been unclear, though some preliminary work has been done on
the problem (Crawford and Milenkovic, 2014; Crawford et al.,
2014; Milenkovic et al., 2013). With metaheuristic multiobjective
alignment, we could optimize many of these metrics at once and
analyze many alignments to determine which ones best predict or

conﬂict with the objectives of network alignment. It’s even possible
that some of these similarity measures, when paired with
Optnetalign, could produce better results than optimizing S3 or
GOC directly.

An important direction for future work is to find ways to sum—
marize or condense the large number of possible alignments between
two PPI networks. The original goal of pairwise global alignment
was to produce the one best alignment given our objectives. Our
work here has shown that currently studied alignment objectives do
not uniquely specify a best alignment. Instead, there are many di—
verse alignments along a wide Pareto front, and these alignments
may agree on as few as 1% of their aligned pairs while still appear-
ing good with respect to at least one objective. While this was al—
ready known, our multiobjective aligner makes this problem much
more obvious. This creates difficulties for a biologist who would
like to use the output of such an algorithm. An obvious next step
would be to find ways to summarize the results of these alignments
so that someone who wants to use an alignment can either pick the
alignment that best fits their particular needs, or produce a compos—
ite alignment that summarizes the most interesting alignments
found. We have done some preliminary experiments with
creating partial alignments, using the number of aligned pairs of the
alignment as an objective. This could be used to produce small,
local alignments and large, global alignments in one run of the pro—
gram as well, which would unify the two related, but heretofore
separate, techniques of local and global network alignment. This
has similarities to NetAligner (Pache and Aloy, 2012; Pache et al.,
2012), which is another tool capable of both local and global
alignment. There are many other possibilities for producing
summary or approximate alignments, as well. The recent publica—
tion of DualAligner (Seah et al., 2014) is a good step in this
direction.

4 Conclusion

We have shown that Optnetalign can outperform or perform com-
petitively with the best previously published aligners. Furthermore,
since it is a multiobjective algorithm, it manages to better balance
the tradeoff between the conflicting objectives of biological and
topological fit. Its ability to produce a large number of alignments in
one run allows us to explore the problem of network alignment
more thoroughly, and reveals the strengths and weaknesses of cur—
rent evaluation metrics. We expect Optnetalign will be useful not
only in aligning particular PPI networks to one another, but also in
evaluating and experimenting with new alignment objectives, as
well. The large number of highly diverse alignments Optnetalign can
produce allows us to thoroughly understand the sometimes complex
relationship between alignment objectives, and also shows promise
in developing new techniques to combine many alignments into
summary alignments, to produce many-to-many alignments, or to
create local alignments that find small—scale regions of similarity be-
tween PPI networks. Perhaps most importantly, instead of running
many different programs dozens of times to get a wide variety of
possible alignments to analyze, users of alignment software need
only run Optnetalign once.

Acknowledgement

The authors thank Vikram Saraph for helping them get MAGNA
working, Cheng-Yu Ma for quickly diagnosing and ﬁxing a bug in PISwap
that the authors were having difﬁculty with, and Rob Patro for insightful

discussion.

112 /810's112u1no [p.IOJXO'SOllBIIIJOJUIOIQ/ﬁ(11111 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

A multiobjective memetic algorithm

1997

 

Funding

This work was supported by a grant from the Biofrontiers Center at the
University of Colorado, Colorado Springs.

Conﬂict of Interest: none declared.

References

Aebersold,R. and Mann,M. (2003) Mass spectrometry-based proteomics.
Nature, 422, 198—207.

Aladag,A.E. and Erten,C. (2013) SPINAL: scalable protein interaction net-
work alignment. B ioinformatics, 29, 917—924.

Ashburner,M. et al. (2000) Gene ontology: tool for the uniﬁcation of biology.
The gene ontology consortium. Nat. Genet, 25, 25—29.

Barecke,T. and Detyniecki,M. (2007) Memetic algorithms for inexact graph
matching. In: IEEE Congress on Evolutionary Computation, 2007. CEC
2007. pp. 423 8—4245, IEEE, Singapore.

Blum,C. et al. (2011) Hybrid metaheuristics in combinatorial optimization: a
survey. Appl. Soft Comput., 11, 4135—4151.

Chatr-aryamontri,A. et al. (2013) The biogrid interaction database: 2013 up-
date. Nucleic Acids Res., 41, D816—D823.

Chindelevitch,L. et al. (2013) Optimizing a global alignment of protein inter-
action networks. B ioinformatics, 29, 2765—2773.

Cicirello,V.A. and Smith,S.F. (2000) Modeling GA performance for control
parameter optimization. In: Genetic and Evolutionary Computation
Conference, pp. 235—242, Las Vegas.

Clark,C. and Kalita,]. (2014) A comparison of algorithms for the pairwise
alignment of biological networks. B ioinformatics, 30, 235 1—235 9.

Cook,S.A. (1971) The complexity of theorem-proving procedures. In:
Proceedings of the Third Annual ACM Symposium on Theory of
Computing, pp. 151—158, Shaker Heights, Ohio.

Corne,D.W. et al. (2000) The pareto envelope-based selection algorithm for
multiobjective optimization. In: Parallel Problem Solving from Nature VI
Conference, pp. 839—848, Springer, Paris.

Crawford,]. et al. (2014) Fair evaluation of global network aligners. arXiv pre—
print arXiv:1407.4824.

Crawford,]. and Milenkovié,T. (2014) Great: graphlet edge-based network
alignment. arXiv preprint arXiv:1410.5103.

Cross,A.D. et al. (1997) Inexact graph matching using genetic search. Pattern
Recogn., 30, 953—970.

CzyzZak,P. and Jaszkiewicz,A. (1998) Pareto simulated annealing—a meta-
heuristic technique for multiple-objective combinatorial optimization.
]. Multi-Criteria Decis. Anal., 7, 34—47.

Deb,K. (2001) Multi—ohjective Optimization Using Evolutionary Algorithms.
Wiley, England.

Deb,K. et al. (2002) A fast and elitist multiobjective genetic algorithm: NSGA-
11. IEEE Trans. Evol. Comput., 6, 182—197.

Eiben,A.E. et al. (1999) Parameter control in evolutionary algorithms. IEEE
Trans. Evol. Comput., 3, 124—141.

Eiben,A.E. and Smit,S.K. (201 1) Parameter tuning for conﬁguring and analyz-
ing evolutionary algorithms. Swarm Evol. Comput., 1, 19—31.

El-Kebir,M. et al. (2011) Lagrangian relaxation applied to sparse
global network alignment. In: Pattern Recognition in Bioinformatics, vol-
ume 7036 of Lecture Notes in Computer Science, pp. 225—236. Springer.
Berlin.

Floreano,D. and Mattiussi,C. (2008) Bio—inspired Artiﬁcial Intelligence:
Theories, Methods, and Technologies. MIT press, Cambridge, MA.

Franceschini,A. et al. (2013) STRING V9.1: protein-protein interaction net-
works, With increased coverage and integration. Nucleic Acids Res., 41,
D808—815.

Goldberg,D.E. (1989) Genetic Algorithms in Search Optimization and
Machine Learning, Boston, MA.

Guzzi,P. and Mina,M. (2014) Computational Biology and Bioinformatics.
IEEE/ACM Transactions, 11, 5 61—572.

Holland,].H. (1975) Adaptation in Natural and Artiﬁcial Systems: An
Introductory Analysis with Applications to Biology, Control, and Artiﬁcial
Intelligence. University of Michigan Press, Ann Arbor, MI.

Huang,Q. et al. (2012) CNetA: network alignment by combining biological
and topological features. In: 2012 IEEE 6th International Conference on
Systems Biology (ISB), pp. 220—225, Xi’an, China.

Knowles,]. and Corne,D. (2005) Memetic algorithms for multiobjective opti-
mization: issues, methods and prospects. In: Recent Advances in Memetic
Algorithms, pp. 313—352. Springer.

Knowles,].D. and Corne,D.W. (2000) Approximating the nondominated
front using the pareto archived evolution strategy. Evol. Comput., 8,
149—172.

Knowles,].D. et al. (2001) Reducing local optima in single-objective problems
by multi-objectivization. In: Evolutionary Multi—Criterion Optimization,
pp. 269—283. Springer.

Kpodjedo,S. et al. (2014) Using local similarity measures to efﬁ-
ciently address approximate graph matching. Discrete Appl. Math., 164,
161—177.

KuchaieV,O. et al. (2010) Topological network alignment uncovers biological
function and phylogeny. ]. R. Soc. Interface, 7, 1341—1354.

KuchaieV,O. and Przulj,N. (201 1) Integrative network alignment reveals large
regions of global network similarity in yeast and human. Bioinformatics,
27, 1390—1396.

Liao,C.-S. et al. (2009) IsoRankN: spectral methods for global alignment of
multiple protein networks. Bioinformatics, 25 , i253—i258.

Lipets,V. et al. (2009) Subsea: an efﬁcient heuristic algorithm for subgraph iso-
morphism. Data Mining Knowl. Dis., 19, 320—350.

MemiseviéN. and Przulj,N. (2012) C-GRAAL: common-neighbors-
based global GRAph ALignment of biological networks. Integr. Biol., 4,
734—743.

Michalewicz,Z. and Fogel,D.B. (2004) How to solve it: modern heuristics.
Springer, Berlin Heidelberg.

Milenkovié,T. et al. (2010) Optimal network alignment with graphlet degree
vectors. Cancer Inform., 9, 121.

Milenkovié,T. et al. (2013) Global network alignment in the context
of aging. In: Proceedings of the International Conference on
Bioinformatics, Computational Biology and Biomedical Informatics, p. 23.
ACM.

Milenkovié,T. and Przulj,N. (2008) Uncovering biological network function
Via graphlet degree signatures. Cancer I nf., 6, 257.

Neyshabur,B. et al. (2013) NETAL: a new graph-based method for global
alignment of protein—protein interaction networks. Bioinformatics, 29,
1654—1662.

Nguyen,H.D. et al. (2007) Implementation of an effective hybrid ga for large-
scale traveling salesman problems. IEEE Trans. Syst. Man Cybern. Part B,
37, 92—99.

Pache,R.A. and Aloy,P. (2012) A novel framework for the comparative ana-
lysis of biological networks. PLoS One, 7, e31220.

Pache,R.A. et al. (2012) Netaligner—a network alignment server to com-
pare complexes, pathways and whole interactomes. Nucleic Acids Res.,
40(Web Server issue), W157—W161.

Park,D. et al. (201 1) IsoBase: a database of functionally related proteins across
PPI networks. Nucleic Acids Res., 39, D295—D300.

Patro,R. and Kingsford,C. (2012) Global network alignment using multiscale
spectral signatures. Bioinformatics, 28, 3105—3114.

Phan,H.T. and Sternberg,M.J. (2012) PINALOG: a novel approach to align
protein interaction networks—implications for complex detection and func-
tion prediction. Bioinformatics, 28, 1239—1245.

Prasad,T.K. et al. (2009) Human protein reference database—2009 update.
Nucleic Acids Res., 37, D767—D772.

Przulj,N. (2007) Biological network comparison using graphlet degree distri-
bution. Bioinformatics, 23, e177—e183.

Sahraeian,S.M.E. and Yoon,B.-]. (2012) A network synthesis model for gener-
ating protein interaction network families. PLoS ONE, 7, e41474.

Saraph,V. and Milenkovié,T. (2014) Magna: maximizing accuracy in global
network alignment. B ioinformatics, 30, 2931—2940.

Seah,B.-S. et al. (2014) Dualaligner: A dual alignment-based strategy to align
protein interaction networks. Bioinformatics, 30, 2619—2626.

Singh,R. et al. (2008) Global alignment of multiple protein interaction net-
works With application to functional orthology detection. Proc. Natl. Acad.
Sci. USA, 105, 12763—12768.

112 /810's112u1no [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(11111 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

1998

C. Clark and J. Kalita

 

Xenarios,l. et al. (2002) Dip, the database of interacting proteins: a research
tool for studying cellular networks of protein interactions. Nucleic Acids
Res., 30, 303—305.

Zhou,A. et al. (2011) Multiobjective evolutionary algorithms: a survey of
the state of the art. Swarm and Evolutionary Computation, 1, 32—49.

Zitzler,E. et al. (2001) SPEA2: Improving the Strength Pareto Evolutionary
Algorithm for Multiobjective Optimization. In: Giannakoglou,K. C. et al
(eds). Evolutionary Methods for Design, Optimisation and Control with
Application to Industrial Problems (EUROGEN 2001), pp. 95—100,
International Center for Numerical Methods in Engineering (CIMNE).

112 /810's112u1no [p.IOJXO'SOIlBIIIJOJUIOIQ/ﬁ(11111 111011 pop1201umoq

9IOZ ‘09 lsnﬁnv uo ::

