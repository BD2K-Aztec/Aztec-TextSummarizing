ORIGINAL PAPER

Vol. 30 no. 11 2014, pages 1569—1578
doi: 10. 1 093/bioinformatics/btu021

 

Systems biology

Advance Access publication February 3, 2014

Complete enumeration of elementary flux modes through scalable
demand-based subnetwork definition

Kristopher A. Hunt1’2’*, James P. Folsom”, Reed L. Taffs1 ’2 and Ross P. Carlson1’2’*

1Center for Biofilm Engineering, Montana State University, Bozeman, MT 59717—3980 and 2Department of Chemical and
Biological Engineering, Montana State University, Bozeman, MT 59717—3920, USA

Associate Editor: Mario Albrecht

 

ABSTRACT

Motivation: Elementary flux mode analysis (EFMA) decomposes com-
plex metabolic network models into tractable biochemical pathways,
which have been used for rational design and analysis of metabolic
and regulatory networks. However, application of EFMA has often
been limited to targeted or simplified metabolic network representa-
tions due to computational demands of the method.

Results: Division of biological networks into subnetworks enables the
complete enumeration of elementary flux modes (EFMs) for metabolic
models of a broad range of complexities, including genome-scale.
Here, subnetworks are defined using serial dichotomous suppression
and enforcement of flux through model reactions. Rules for selecting
appropriate reactions to generate subnetworks are proposed and
tested; three test cases, including both prokaryotic and eukaryotic net-
work models, verify the efficacy of these rules and demonstrate com-
pleteness and reproducibility of EFM enumeration. Division of models
into subnetworks is demand-based and automated; computationally
intractable subnetworks are further divided until the entire solution
space is enumerated. To demonstrate the strategy’s scalability, the
splitting algorithm was implemented using an EFMA software package
(EFMTool) and Windows PowerShell on a 50 node Microsoft high per-
formance computing cluster. Enumeration of the EFMs in a genome-
scale metabolic model of a diatom, Phaeodactylum tricornutum, iden-
tified ~2 billion EFMs. The output represents an order of magnitude
increase in EFMs computed compared with other published algorithms
and demonstrates a scalable framework for EFMA of most systems.
Availability and implementation: http://www.chbe.montana.edu/
RossC.

Contact: rossc@erc.montana.edu or kristopher.hunt@erc.montana.
edu

Supplementary Information: Supplemental materials are available at
Bioinformatics online.

Received on July 7, 2013; revised on November 26, 2013; accepted
on January 12, 2014

1 INTRODUCTION

Extracting biologically meaningful information from the con-
tinuously expanding ‘omics’ databases is often limited by bio-
informatics tools. Stoichiometric modeling is one approach
making advances in the quantiﬁcation of metabolic phenotypes

 

*To whom correspondence should be addressed.

reﬂected by ﬂuxomic data and inferred from metabolomic,
proteomic, transcriptomic and genomic data (Reed and
Palsson, 2003). Stoichiometric modeling assumes that during ap-
propriate time scales, cellular biochemistry can be approximated
as a steady state process with respect to intracellular enzyme and
metabolite concentrations. This assumption simpliﬁes the differ-
ential equations describing cellular mass balances, and when
coupled with reaction directionality and ﬂux magnitude con-
straints, permits the calculation of physiologically reasonable
ﬂux distributions. There are two major stoichiometric modeling
approaches with numerous subvariations (Klamt and Stelling,
2003; Orth et al., 2010; Reed and Palsson, 2003; Trinh et al.,
2009). One stoichiometric modeling approach, elementary
ﬂux mode analysis (EF MA), enumerates all genetically distinct
indecomposable ﬂux distributions in a metabolic network
(Schuster and Hilgetag, 1994). These elementary ﬂux modes
(EF Ms) are the minimal set of stoichiometrically balanced ﬂux
distributions representable as unique binary vectors based on par-
ticipation of every model reaction. This set must also represent
every steady state ﬂux distribution in a given network through
non-negative combinations without cancellation (Klamt and
Stelling, 2003; Llaneras and Picé, 2010; Schilling et al., 2000).
Cancellation refers to removal of reaction participation through
combination of ﬂuxes with equal but opposite magnitudes
(i.e. genetic distinction). Another stoichiometric modeling ap-
proach, ﬂux balance analysis (F BA), uses linear programing to
identify optimal ﬂux distributions through a metabolic network.
Various objective functions are possible, including the maximiza-
tion of biomass yield from a substrate (e. g. Varma et al., 1993).
These two stoichiometric modeling methods have been used for
decades to direct metabolic engineering efforts and predict
physiological and ecological behaviors (Carlson, 2009; Carlson
et al., 2002; Feist et al., 2006; Liao et al., 1996; Reed and Palsson,
2003; Taffs et al., 2009; Trinh et al., 2009; Varma and Palsson,
1994).

Both stoichiometric modeling approaches have strengths and
limitations. A major strength of EF MA is enumeration of the
entire solution space in an unbiased manner. F BA generates
only a limited number of distinct solutions using a directed
objective function (Orth et al., 2010; Reed and Palsson, 2003;
Trinh et al., 2009). However, the directed F BA approach reduces
computational costs relative to EF MA, permitting examination of
complex metabolic reconstructions, commonly referred to as
genome-scale models. Complex (e. g. genome scale and microbial
community) metabolic networks have often been intractable using
EF MA (Klamt and Stelling, 2002; Terzer et al., 2009), despite

 

© The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 1569

112 /810'S112umo[pJOJXO'soi1chOJuioiw/2d11q IIIOJJ pepcommoq

910K ‘09 lsnﬁnV no :2

K.A.Hunt et al.

 

algorithmic advances (Klamt et al., 2005; Schuster and Hilgetag,
1994; Schuster et al., 2000; Terzer and Stelling, 2008; Urbanczik
and Wagner, 2005a).

Approaches that circumvent the problem of enumerating
all EFMs have been explored. One such approach, convex
basis analysis [i.e. extreme pathway analysis (Schilling et al.,
2000)] identiﬁes a subset of EF Ms that still reproduce any feas-
ible steady state ﬂux distribution but lack the biological inter-
pretability of the complete EF M set (Klamt and Stelling, 2003;
Llaneras and Picé, 2010). Efforts have also been made to enu-
merate subsets or patterns of elementary ﬂux vectors that allow
genome-scale investigations. These efforts include generating
the conversion cone (a simpler projection of the solution space
considering external ﬂuxes only) (Urbanczik, 2007; Urbanczik
and Wagner, 2005b), enumerating only EFMs containing the
largest number of zero ﬂuxes (de Figueiredo et al., 2009),
enumerating a set of EFMs that can explain a given ﬂux distri-
bution (Ip et al., 2011), applying regulation to minimize compu-
tation (J ungreuthmayer et al., 2013) and identifying elementary
ﬂux patterns, which are EF Ms for subsystems that consider the
constraints imposed by the parent network (Kaleta et al., 2009;
Schuster et al., 2010). Finally, computationally intractable net-
works have been divided into manageable pieces based on bio-
chemical knowledge (Schilling and Palsson, 2000; Verwoerd,
2011), metabolite connectivity (i.e. the number of reactions invol-
ving a particular metabolite) (Schuster et al., 2002; Verwoerd,
2011), path length between reactions (Ma et al., 2004), examin-
ation of the nullspace of the stoichiometric matrix (Poolman
et al., 2007) and random sampling of the solution space to
calculate eigenvectors that can be rotated to produce distinct
reaction sets (Barrett et al., 2009).

For many applications, the ideal approach is an unbiased in-
vestigation of the entire solution space, although this scenario
was previously out of computational reach for complex networks
(Klamt and Stelling, 2002; Llaneras and Picé, 2010). It has been
proposed that otherwise infeasible EFM enumerations can be
performed through the dissection of metabolic networks into
simpler subnetworks via suppression or enforcement of reaction
ﬂuxes, a technique referred to as splitting (Klamt et al., 2005).
Suppression of a reaction deﬁnes a subnetwork that does not
contain the reaction, whereas enforcement of a reaction deﬁnes
a subnetwork that excludes EF Ms that do not use the reaction,
both of which reduce the computational burden (e.g. Fig. 1).
Complete coverage of a metabolic network’s solution space with-
out overlap is ensured at each split by paired suppression and
enforcement of a single reaction. An additional example of sup-
pressing and enforcing can be found in Jevremovié et al. (2011b),
which used the EF MA algorithm, Elmo-Comp. Unfortunately,
Elmo-Comp lacked enumeration completeness, as shown
through a disagreement between the presented and published
EFM counts (Jevremovié and Boley, 2012; Jevremovié et al.,
2011a). The primary objective of the current study is to success-
fully implement a scalable demand-based splitting technique for
complete enumeration of all network EFMs. The objective is
achieved through (i) the development of rational rules for effect-
ively splitting networks, (ii) the successful use of a network split-
ting algorithm that continuously divides networks until they are
computationally tractable and (iii) the use of a workstation-
based computational cluster to distribute EFM enumeration of

genome-scale models. The presented work demonstrates efﬁcacy
across network models containing EFM counts spanning four
orders of magnitude. This algorithm is the ﬁrst successful imple-
mentation of the splitting technique and establishes a scalable
framework for EFMA of most metabolic models.

2 METHODS

2.1 Experimental and computational systems

Development and analysis of the presented splitting techniques was per-
formed using three previously published metabolic models described in
Table 1 with additional detail available in Supplementary Table S1. The
test models, chosen to demonstrate efﬁcacy over a range of model complex-
ity, included a prokaryotic (ECOLI), a simpliﬁed eukaryotic (YEASTl)
and a multicompartment eukaryotic model (YEAST2) (Supplementary
Material). These test models were calculated as both unsplit and split net-
works to validate the compiled subnetwork results. Unsplit networks were
computed using the software package EFMTool on a Windows 7 machine
with a maximum conﬁguration of 120 GB of RAM and 2 Intel Xeon pro-
cessors 0(5690). Implementation of EFMTool (Terzer and Stelling, 2008)
version 4.7.1 (www.csb.ethz.ch/tools/efmtool) used documented options
described in Supplementary Table S2. The basic splitting and iterative
splitting algorithms were written in Windows PowerShell v2.0 for imple-
mentation with Microsoft high performance computing (HPC), clustering
software which supports workstation-based clusters. The computational
cluster included 50 workstation nodes, which ranged from 4—120 GB of
RAM per node. Result compilations and analyses were performed using
MATLAB on machines with 32 GB of RAM.

2.2 EFM concatenation and comparison

Subnetwork results produced by the splitting algorithm were screened
for consistency with subnetwork deﬁnitions and concatenated into a
single output set (as in Fig. 2). EFMTool identiﬁes futile cycles based
on the number of non-zero ﬂuxes in a ﬂux vector, removes them from
processing and adds them back at the end of processing regardless of
subnetwork deﬁnition. This necessitated screening all EFMs to verify that
they did not violate the deﬁnition of their subnetwork. The screening
process required minimal computational effort. For example, the
CONCATENATOR script checked and compiled 2 billion EFMs in
~1 day; most of the elapsed time involved reading, decompressing, com-
pressing and writing the results, which occupy ~1 TB of hard drive space.

Network results were compared across different algorithms and split-
ting conﬁgurations by converting all EFMs to a binary representation
based on reaction participation and identifying EFMs not shared by both
result sets being compared. This comparison was done using standard
MATLAB functions. Binary representation removed rounding effects
associated with normalization and allowed for comparison of all test
models presented.

2.3 Optimizing EFMTool performance

EFMTool’s use of RAM was inspected and optimized using the manage-
ment application, Jconsole, and Java options. Brieﬂy, Java 1.6.x uses a
generational memory construct that assigns new objects to one memory
space while moving older objects to a separate predeﬁned memory space.
This is usually an efﬁcient use of RAM, as most Java applications do not
produce many old objects, and memory management is easier when
newer objects are kept together. However, EFMTool stores each EFM
as an object that stays in RAM for the duration of the calculation, even-
tually becoming an old object. EFMTool ﬁlled the memory allocated for
older objects that resulted in ‘out of RAM’ errors, despite having only
used 25—33% of the RAM assigned to Java. Thus, the default Java op-
tions limit EFMTool execution to smaller networks. This practice was

 

1 570

112 ﬁle'spaumo[pJOJXO'sor1chOJurorw/2d11q IIIOJJ pepcolumoq

910K ‘09 lsnﬁnV no :2

EFMA through demand-based subnetwork definition

 

 

 

 

 

 

 

    

 

 

 

 

 

 

 

 

 

 

 

Compression, Nullspace Conversion, and Row Ordering
‘. , 11-111,: 10000.1
3; g R a“??? R 0 -1 1 1 1,3 0 1 0 0 s,
IzﬁDi-lari1ﬂfﬁﬂjfjg 1000 4 4 0010R5R
1 ‘3 [ 0 ‘l 0 0 0 0 0 1 R
:‘EEU1U1‘1'1’0010 21‘0-11111:
I 0001 13 11-110.”
Elementary Flux Mode Enumeration
- - MIN-INA! “lam-03
N1 N2 N3 “1 N “a N1Ns.2“4.2 N "1111.1“1.2“10N1.a"“* N:l N4N41N13N“ 1 2 2'21: 2 R1
10000., 10000 100010 100:1:UH 112,30“:
 710813331321
0001RSH*00101 011°1Hi13*°°1-1-1R:
   01012 R13 1.
 1'39-1 R113 0 1 1 O 0 1 1 2 0 0 R. 01 101 a,
 '17'4'4‘1 1 R1,: ‘1 -1 ‘1 0 2 1'1 o 1 1 [11 113
Enforcement of Reaction R2
“1 N2 N3 “4 N “a NaNsJNM N1 111,01,12 “1N1”:
10000; 10000 100 T'ENUH 
010005 00011 001 “ 0103
00100.19 01010 10 000 113?}? 121001
00010.0‘ 00101 ’ 011 010,11‘3‘ 33;:
0-111%; 01100 010 112,,” 011:
11.11102 1-1102 112 1'2 0113
Suppression of Reaction R2
NINE.
Reactions -1 1 1 R13 “1 “2 N NE N3 2 . 1 2 :1
E R1; R4 H5 R5“ R? '1 1 '1 H4. 1 U 0 R5 0 0 5 F: g R1
000-141-1131000514010R5“151D “17"”:
.D
.315101-1-1*010115,‘9|?1:”»$1 “3*:1-10
E 0 0 1 R I L3 1.3 0 00.1
11 —1 1-111., 14 1 
L I

 

 

 

 

Fig. 1. Overview of EFM enumeration using EFMTool and the splitting approach. Step 1) The model is compressed removing dead-end reactions (R6),
separating reversible reactions into forward and reverse reactions (R5 becomes R5 and R5R), and combining reaction sets that always occur together into
a single reaction (R7 and R8 combined into R73, removing metabolite G). Step 2—3) The compressed network, represented by a stoichiometric matrix
with reactions in columns and metabolites in rows, is solved for the nullspace basis vectors (i.e. the nullspace kernel). External metabolites are not
constrained by conservation relationships and are therefore not considered in the stoichiometric matrix. Step 4) The kernel rows are reordered to
minimize memory usage and computational runtirne. Steps 5—6) The EFMTool algorithm then applies directionality constraints to each reaction
sequentially; vectors containing negative ﬂuxes in the reaction being constrained are replaced by all non-negative linear combinations resulting in a
zero ﬂux through the reaction. The negative ﬂux in reaction R13 at N2 is replaced by N3; (N3 + N2) and N4; (N4 + N2), whereas the negative ﬂux in
reaction R1; at N3 is replaced by N13 (N1+ N3), N43 (N4 + N3) and N43; (N4; + N3). EFMTool bit-masks each row of values after the directionality
constraint is applied, improving memory usage (not shown). Step 7) N3; is removed during recompilation of reversible reactions, and N433 is removed
because at least q-m-l zeros per ﬂux vector are required by the degrees of freedom constraint, where q and m are the number of reactions and metabolites,
respectively (Gagneur and Klamt, 2004). Step 8) The remaining vectors are EFMs and decompressed. This procedure can be modiﬁed to enforce (Steps
9—12) or suppress (Steps 13—17) reactions as needed. Enforced reactions are moved to the end of the algorithm and directionality constraints are applied
as described earlier; however, when the enforced reaction is reached, all positive ﬂux vectors have already been enumerated (Step 9), therefore ﬂux vectors
that violate the directionality constraint or do not use the reaction are discarded (Step 10). Suppressed reactions result in a new stoichiometric matrix that
is then processed as described earlier. The highlighted examples of a combined reaction in the backslash patterned box , reversible reaction in the
forward slash patterned box and dead-end reaction in the gray box El are to be avoided for use in splitting

 

1571

112 [3.1081120an[p.IOJXO'SODBIIIJOJIITOTQ/ﬂ(11111 IIIOJJ pepsolumoq

910K ‘09 lsnﬁnV no 22

K.A.Hunt et al.

 

Table 1. Metabolic models used in the presented study

 

 

Organism Model Reactions/ EFMs
Metabolites

Saccharomyces cerevisiae YEASTla 78/62 1 515 31 5d

S. cerevisiae YEAST2a 83/63 68 868 602(1

Escherichia coli ECOLIb 95/94 226 269 020(1

P. tricornutum DIATOMc 318/335 1 934 729 5516

 

aJevremovié and Boley, 2012.

bJungreuthmayer et al., 2013.

0This work.

dEFMs validated by comparing split and unsplit network results.

eFourteen reactions used for iterative splitting. Some subnetworks were recalculated
varying the number of reactions for splitting to validate results.

corrected and performance optimized using command line switches
described in Supplementary Table S2.

2.4 k-l EFM correction

During early attempts at EFM enumeration using the EFMTool func-
tionality to enforce reactions, EFMs were absent from the resulting
solution set. The missing EFMs contained k—l enforced reactions,
where k is the number of non-zero ﬂuxes in the EFM. This issue was
corrected through a modiﬁcation in EFMTool code to consider enforced
reactions during the subroutine that removes futile cycles (Supplementary
Material).

3 RESULTS

3.1 Selecting reactions for deﬁning subnetworks

Appropriate reaction selection for subnetwork deﬁnition is
essential for effective splitting. Selected reactions must permit
complete enumeration of EF Ms while distributing calculations
over subnetworks. Initially, random reactions for splitting were
screened using a brute force method to conﬁrm functionality for
splitting; analysis of the results identiﬁed four major categories of
reactions to avoid. First, reactions for splitting should not pro-
duce or consume metabolites that are not consumed or produced
by other reactions (i.e. dead-end reactions, R6 in Fig. 1). Dead-
end reactions result in empty subnetworks when enforced and do
not reduce computations when suppressed.

Second, reactions for splitting should not include reversible
reactions. EFMTool divides reversible reactions into two separ-
ate irreversible reactions, a forward and reverse reaction, during
EF M enumeration and then recombines the ﬂuxes before report-
ing the ﬁnal EFMs (R5 in Fig. 1). If used for splitting, the
forward and reverse reactions are enforced or suppressed con-
currently; EFMs with ﬂux in only one of these reactions would
be lost. This property makes reversible reactions unacceptable
for splitting.

Network compression improves memory efﬁciency by
combining reactions, which must operate together into a single
compressed reaction (e.g. R1 and R2 are combined into R12 in
Fig. 1; Gagneur and Klamt, 2004); however, compression can
cause problems during splitting, resulting in a third category of
reactions to avoid for splitting. Two adverse scenarios can result
from compression. In a branching series, a single reaction can be

 

[ in siiico stoichio metric model ]

‘I
Compress network while suppressing all R’
preliminary.r reactions for splitting

 

L

 

r Scan compressed network for additional reactions
that satisfyr criteria in Table 2

Flilo additional reactions: Additional reactions:
ii"prelimir1ai'1,iI reactions randomlv add one to set
L for splitting of preliminarv reactions

I
1'

L

Reactions for Splitting
{REACTIGNTESTERJ

 

 

Preliminarv Identification of

 

 

 

 

 

 

 

 

 

E Compress all 2"" subnetwork permutations defined

 bvthe set ofR’preliminarv reactionsfor splitting

3% E‘

g E Check all subnetworkCompressionsfor reactions in

x Z violation of criteria in Table 1

L at

as * *

E H Subnetworks pass: Remove violating reactions B

E R reactions for from the set of preliminary

E, splitting reactions for splitting
Y

 

Divide R reactions for splitting into im sets of r
reactions, where r c R and im‘r s R

f

[ Deﬁne 2'” subnetworks, where i is the iteration of

 

the splitting process

 

 

Attempt EFM enumeration of all defined ]

 

 

Iterative Splitting Technique
{INDEKER and CONCATENATOR}

 

 

 

 

 

subnetworks
Tractalale subnetwork: lntractalale subnetwork:
Check EFM compliance Continueto next
with subnetwork iteration with r additional
definition and compile reactions for splitting

 

[ Compiled EEMs of entire network ]

 

Fig. 2. Work ﬂow of reaction identiﬁcation and iterative splitting
approaches. Initially, the list of identiﬁed preliminary reactions for split-
ting is empty but increases by one reaction per loop through preliminary
reaction identiﬁcation. The ﬁnal quantity of reactions for splitting was
adjusted at the gray box by choosing route A if a predeﬁned R was
achieved or route B if more reactions for splitting were required.
Depicted processes describe the pseudo-code or MATLAB functions
listed in parentheses. See the Symbols Section for additional variable
deﬁnitions

combined separately with multiple reactions to form multiple
compressed reactions. Using that single reaction as a reaction
for splitting prevents certain subnetwork permutations be-
cause multiple independent compressed reactions are enforced
or suppressed simultaneously (e.g. R1 in Figs. 1 and 3 and
Supplementary Fig. S1). In a linear series, a set of reactions
that must occur together combine to form a single compressed
reaction (e.g. R7 and R8 in Fig. 1 and Supplementary Fig. S1).
Using multiple reactions that deﬁne a compressed linear series is
ineffective for the same reason as enforcing dead-end reactions
(R7 and R8 in Fig. 1 and Supplementary Fig. S1). However, one
reaction from a linear series or the branch reactions in a
branched series may be effective for splitting (e.g. R2, R3 and

 

1 572

112 [3.1081120an[p.IOJXO'SODBIIIJOJIITOTQ/ﬂ(11111 IIIOJJ pepsolumoq

910K ‘09 isnﬁnV uo 22

EFMA through demand-based subnetwork definition

 

 

Reactions Enforceﬂuppress Permutations of Compressed Reactions

y A Fl11,2,” 3 Eur." c “1.2!,” D '11.2.?”
HI - - - - _ _Ji'r - - - - - -‘l"r

ﬁA -_---_" --_---'\
k R1,: R13“; H1.31 R13“;

Fig. 3. Network compression effect on reactions. Network compression
results in two reactions: R1; is R1+ R2 and R13 is R1+ R3. Enforcing
(solid lines)/suppressing (dotted lines) reaction R1 generates only two (A
and B) of the four reaction combinations needed to fully describe possible
reaction participation (A, B, C and D)

 

 

 

 

R7 or R8 in Figs 1 and 3 and Supplementary Fig. S1). Although
more reactions may be available for subnetwork deﬁnition when
compression is not used, compression greatly reduces computa-
tional burden during the enumeration process, vastly outweigh-
ing the beneﬁt of additional potential reactions for splitting (data
not shown; Klamt et al., 2005).

A fourth type of reaction to avoid has poorly scaled coefﬁ-
cients that can lead to numerical instability. This often occurs
with biomass synthesis associated reactions. For instance,
accounting for the synthesis of a low abundance vitamin
(e.g. B12) and a common amino acid (e.g. glycine) can lead to
a >103-fold difference between the reaction’s largest and smallest
coefﬁcients. Such a model could not be analyzed with EFMTool
due to numerical instabilities in the stoichiometric matrix. This
issue can be exacerbated during the network splitting process
when potential EF Ms with small, but nonzero, ﬂuxes in enforced
reactions are removed based on the software’s computational
deﬁnition of zero. The removed EFMs are not present when
the reaction is suppressed by deﬁnition and are therefore
missed in the results. One method explored to circumvent this
problem used the higher accuracy arithmetic of ﬁxed-point
notation instead of the default ﬂoating-point notation (double
to fractional arithmetic in EFMTool nomenclature). The use of
ﬁxed-point notation permitted complete enumeration of EF Ms
for some test networks but introduced a substantial computa-
tional cost with a minimal increase in the number of usable re-
actions for splitting (data not shown). Increasing the precision of
the zero deﬁnition for ﬂoating-point notation was also examined
but not found to consistently improve EFM enumeration.
Although there are multiple methods to circumvent this problem,
this study avoided using reactions containing poorly scaled co-
efﬁcients for splitting, deﬁned as coefﬁcients with a difference
>10 within a single reaction. This approach was sufﬁcient for
the three test models.

A list of effective reactions for splitting was identiﬁed through
application of the rules summarized in Table 2 and conﬁrmed
through additional checks (i.e. REACTIONTESTER and
SCANNER, respectively, in Fig. 2). The rules were applied
iteratively as follows: (i) reactions were identiﬁed that did not
violate the rules in Table 2, given the current network compres-
sion, (ii) one such reaction was selected randomly and added to a
list with R’ preliminary reactions for splitting and (iii) the sub-
network was deﬁned by suppressing all R’ preliminary reactions
for splitting, providing the basis for the next iteration of reaction
selection. This was repeated until all remaining reactions violated
the rules. Repeatedly adjusting the compression basis was

Table 2. Criteria for removal of reactions from enforce/suppress sets

 

Rule Reaction type Issue

 

1 Dead-end Subnetworks cannot evenly distribute

EFMS

2 Reversible Misses EFMs containing ﬂux in either but
not both directions
3 Combineda May not allow for all reaction
combinations
4 Poorly scaled Poorly conditioned matrix and zero
coefﬁcients deﬁnition may miss EFMs (threshold

difference of 10)

 

Note: All reaction combinations must be tested to conﬁrm that an EFM is not
represented in the enforce/suppress set and that the subnetwork deﬁnition and
compression does not rearrange reactions causing violation of the stated rules.
aSee Section 3.1 for detailed description of combined reactions to avoid.

necessary because as reactions are suppressed, they change the
model compression through production of dead-ends and new
sets of combined reactions. Then, to ensure effective splitting,
all 2R, subnetwork permutations deﬁned using enforce/suppress
combinations of the preliminary reactions for splitting were com-
pressed and examined for rule violations. Any reactions that
violated the rules under any enforce/suppress permutation were
removed, resulting in a ﬁnal list of R usable reactions for split-
ting. Reaction validation for all subnetworks also allowed for
screening of reactions that create incompatibility issues with
EFMTool. These processes for preliminary reaction identiﬁca-
tion and subnetwork permutation checking, depicted in Figure 2,
are described in the pseudo-code found in the Supplementary
Material (REACTIONTESTER function and SCANNER sub-
routine, respectively).

3.2 Efﬁcacy of splitting

The number and choice of reactions used to deﬁne subnetworks
are important control points for splitting. To quantify splitting
effectiveness based on these considerations, subnetworks were
deﬁned using a set of R reactions, EF Ms for all subnetworks
were enumerated and the largest number of EF Ms in any sub-
network was used as a basis to assess splitting efﬁcacy. A single
set of reactions for splitting was identiﬁed for each of the ECOLI
and YEAST2 models, whereas four distinct sets were identiﬁed
for the YEASTl model using the procedure detailed in the
preceding section (pseudo-code presented in Supplementary
Material). The four distinct sets of reactions for splitting exist
due to the sequential random identiﬁcation of reactions for split-
ting (e. g. most reactions could work in isolation, but only some
sets of reactions work together). R was varied within each set of
reactions for splitting by removing reactions without replacement
to form smaller sets. The linear trend on a semi-log plot (Fig. 4)
suggests an exponential decay of maximum EFMs per subnet-
work with increasing R. There were no deviations in the number
or identity of the EF Ms enumerated between the 77 splitting-
based enumerations and the respective unsplit enumerations.
This analysis also demonstrates that the reaction selection rules
are functional over a broad range of R.

 

1 573

112 ﬁre‘slcumo[pJOJXO'sottchOJutotw/2dnq IIIOJJ pepsolumoq

910K ‘09 isnﬁnV uo 22

K.A.Hunt et al.

 

 

0.1

 

 

I
0.01 5 ..

 

 

 

Maximum EFM: in a Sub-network i
Total EFM: in the Network

0.001 . . . .
0 5 1 0 1 5 20
Total Reactions Used for Splitting {it}

Fig. 4. Subnetwork EFM count reduction with increasing number of re-
actions for splitting (R). The test models YEASTl (squares), YEAST2
(diamonds) and ECOLI (circles) were analyzed in 77 separate conﬁgur-
ations; every conﬁguration resulted in complete enumeration of the
solution space

3.3 Iterative splitting

Identifying the optimal number of reactions for splitting a model
is a major theoretical and practical challenge. There are two
competing effects with increasing magnitude of R that are (i)
the rate of new subnetwork deﬁnition and (ii) the rate of reduc-
tion in subnetwork complexity. Splitting shifts the computational
burden from memory limitation to CPU limitation (Fig. 5A and
B). The number of subnetworks grows with 2R when using basic
splitting, resulting in a prohibitive number of ﬁles for larger
values of R. Figure 5A demonstrates a case of basic splitting in
gray where R is 4.

A demand-based network splitting algorithm can be imple-
mented, which minimizes the total number of analyzed subnet-
works without sacriﬁcing complete coverage of the solution. This
strategy is referred to as iterative splitting (Fig. 5B). The proced-
ure initially uses a set of r reactions to deﬁne subnetworks, where
r is less than the total number of reactions needed to complete
the network (Rmin). EF Ms of calculable subnetworks are enum-
erated and subnetworks that are assessed to be intractable
(e.g. EFM enumeration fails due to memory limitation or ter-
minates via the algorithm discussed in Section 3 .5) form branches
that are further divided using an additional set of r reactions. The
process continues until each branch completes or the list of re-
actions for splitting is exhausted. Computational savings are
realized when branches complete at intermediate iterations in-
stead of the ﬁnal iteration. Figure 5B illustrates a case where r
is 1, Rm,” is 4 and the total number of iterations, 1,0,, is 4. In this
example, one branch completes per iteration resulting in a 2-fold
decrease in total subnetworks attempted compared with basic
splitting (Fig. 5A and B). The YEAST2 model in Table 1 demon-
strated a 76-fold decrease in number of subnetworks calculated
using iterative splitting (r = 2, Rm,” 2 14 and i101: 7) as compared
with basic splitting with the same 14 reactions (reactions for
splitting: R4, R5, R9, R12, R14, R21, R27, R33, R37, R40,
R46, R53, R58 and R61). Rm,” is a function of computational
resources and was increased by decreasing available memory for
computation (e. g. 6718 MB heap size for the YEAST2 example).

CPU Intensive

 

RAM Intensive

     
 
 
   
    

 

 

 

 

 

      

 

A' maxi!"
A£1E253x=0
r A“1t=0 -
_ wee
At152E3x=D
assess-Fa
Astsax=ﬂ I I
F W
A AELSESSI:D
Ait=0
AstszEsx=D
gsisax=0
Ja,|s1s2.sa:,,.t=ﬂ.
. 51W
* AMIIU .
51W
AqicacaA_D I
Astszx=0 .
i._.ii

 

 

 

 

 

 

Fig. 5. Comparison of two network splitting approaches. The basic split-
ting approach (A) uses combinations of enforced/suppressed reactions to
create calculable subnetworks where the number of subnetworks in-
creases exponentially with the number of reactions for splitting (Klamt
et al., 2005). The iterative splitting approach 03) only generates subnet-
works when the previous ones are intractable (white) until all EFMs for
all subnetworks in the branch can be enumerated (gray) (Klamt et al.,
2005). Both approaches shift the burden of computation from a RAM-
limited problem to a CPU-limited problem as the subnetworks become
smaller but greater in number. The example uses R :4 reactions for
splitting with each iteration considering one additional reaction (i.e.
r: 1) for a total of 1:4 iterations. Superscripts refer to the enforced
(E) or suppressed (S) reactions in the labeled subnetworks

3.4 Optimizing the number of reactions for splitting
per iteration (r)

Iterative splitting has substantial computational beneﬁts when
branches complete before the ﬁnal iteration; however, the com-
putational costs of intractable subnetworks may overwhelm this
beneﬁt. This tradeoff provides a basis for optimization, the
number of reactions for splitting (r) applied per iteration, 1'.
Increasing r deﬁnes a larger number of more constrained subnet-
works per iteration, which have an increased likelihood of com-
pletion compared with subnetworks deﬁned using smaller r. This
approach decreases failed enumeration attempts but increases
the number of attempted subnetworks per iteration. Two scen-
arios bound the total possible number of subnetworks analyzed

 

1 574

112 [3.1081120an[plOJXO'SODBIIIJOJIIIOIQ/[Z(11111 IIIOJJ pepsolumoq

910K ‘09 isnﬁnV uo 22

EFMA through demand-based subnetwork definition

 

during iterative splitting. The upper limit occurs when all sub-
networks are intractable until the last iteration at which point
they all complete (Fig. 5A, r: 1). This scenario represents basic
splitting when r equals R. The lower limit occurs when each step
of iterative splitting produces only one intractable subnetwork
until R reactions are used, at which point all subnetworks com-
plete and the entire solution space for the whole network is
covered (Fig. 5B, r=1).

Optimization based on limiting the number of intractable sub-
networks enables prediction of a generalized ideal r without a
priori network-speciﬁc information. The equation for the total
number of subnetworks (N) is:

N=2"(f+ l) (1)

where f is the number of intractable subnetworks. Equation (1)
does not include the original unsplit network. As r—>Rm,-,,, f—>0,
therefore, basic splitting with at least the number of reactions
required (Rm-n) eliminates time spent on intractable subnetworks.
However, this neglects the beneﬁt of early branch completion,
reducing the total number of attempted subnetworks and there-
fore the total CPU time (Fig. 5A and B).

Assigning a theoretical relative CPU time for tractable and
intractable subnetworks permits evaluation of effective values
of r with respect to CPU time. For this analysis, a theoretical
model is considered that requires one hour of CPU time to enu-
merate the EF Ms from the unsplit network, tunspm. An approxi-
mate relation between tunsph, and the average CPU time to
enumerate the EF Ms of a subnetwork of the same network
was determined empirically using the test models in Table 1.
For the subnetwork deﬁned by r*i reactions, the CPU time for
EF M enumeration (tr-’1') follows the relationship:

tunsplit
r,i —  
(data not shown). For analysis purposes, the CPU time for sub-
networks with failed EFM enumeration attempts, tfail, was
bracketed between 10-fold longer and 10-fold shorter than tunsPh-t.
A 10-fold longer run time was used as an upper limit because
Java garbage collection will run until it uses 90% of the total
CPU time before crashing, inﬂating the run time ~10-fold. A 10-
fold shorter run time was used for the lower limit because net-
works with an explosion in the number of potential EF Ms may
quickly ﬁll available memory with objects that cannot be cleared
(data not shown). Combining Equation (2) and the bounds for
tfail with the number of subnetworks deﬁned by Equation (1),
total CPU time boundaries were estimated as a function of r and
normalized by tunspm (Fig. 6). Simulations considered three the-
oretical models with Rm,” 2 10, 20 and 30 and all combinations
of itot and r producing a respective Rmin. Increasing r reduces the
maximum potential CPU time investment independent of R;
however, the time minimum increases signiﬁcantly with r after
~5 reactions (Fig. 6). The minimum time increases due to the
large number of subnetworks and the associated redundant cal-
culations during reaction enforcement. Considering both the
minimum relative CPU time for the lower tfail limit scenario
and the exponential decrease in relative CPU time for the
upper tfaﬂ limit scenario, an r in the range of 4—8 reactions ap-
pears optimal without a priori knowledge (Fig. 6). The analysis
considers total relative CPU time; implementation on

computational clusters would reduce real-world time because
of parallel computations.

3.5 Minimizing intractable subnetwork runtime

Intractable subnetworks can have a high CPU time cost; there-
fore, large run time savings can be obtained by minimizing CPU
time spent on intractable subnetworks. An empirical detection
strategy was applied to identify EF M enumeration attempts that
were not likely to complete; those attempts were then terminated
before failure and the subnetwork was further divided. Applying
the intractable subnetwork detection strategy resulted in substan-
tial time savings for the models in this study (data not shown).
Details of the prediction algorithm and used time thresholds can
be found in the Supplementary Material.

3.6 Application of the iterative splitting algorithm to a
genome-scale diatom model

EFMA of a genome-scale metabolic model for the diatom
Phaeodactylum tricornutum Ptl was conducted to demonstrate
the iterative splitting algorithm. This model was reconstructed
using the extensive knowledge base for P. tricornutum Ptl,
including a ﬁnished genome (Markowitz et al., 2012) and litera-
ture-based manual analyses (e. g. F abris et al., 2012; Kroth et al.,
2008). The DIATOM model considers 680 genes that were
manually compressed into 318 reactions with 335 metabolites.
Reactions and metabolites were partitioned into ﬁve distinct
physical compartments based on analysis of organelle signal
peptides (Emanuelsson et al., 2007) and biochemical studies
(e. g. Tachibana et al., 2011). The metabolic model with genomic
information, stoichiometries, biomass requirements and a graph-
ical representation can be found in the Supplementary Material.

The workﬂow for successful application of the iterative split-
ting algorithm (i.e. Fig. 2) to the DIATOM model can be
described as follows: a set of 14 reactions for splitting (R: 14)
was identiﬁed by calling the REACTIONTESTER function
(Supplementary Material). The reactions were divided into two
sets of seven reactions (r = 7 and i101: 2) based on the theoretical
optimal values of r (Fig. 6) and the complete use of the set of
reactions for splitting. The INDEXER function submitted EF M
enumeration jobs to the HPC cluster and on completion of the
ﬁrst iteration, scanned the results for intractable subnetworks to
further divide with the next seven reactions in the second iter-
ation. The PowerShell script used is available in
the Supplementary Material. EF MA of the DIATOM model
resulted in 1934729 551 EFMs; this count was validated by rea-
nalyzing random model subnetworks using different sets of
reactions for splitting. The output exceeds the largest reported
for EF MA to date by ~1 order of magnitude (Jungreuthmayer
et al., 2013).

4 DISCUSSION

The complete and reproducible EF MA of metabolic networks
that were previously computationally intractable was demon-
strated here through the deﬁnition of subnetworks based on
serial enforcement and suppression of reaction ﬂuxes. This is in
contrast to other recent attempts to parallelize EF M enumer-
ation by splitting, which were found to be incomplete at times

 

1 575

112 [3.1081120an[plOJXO'SODBIIIJOJIIIOIQ/[Z(11111 IIIOJJ pepsolumoq

910K ‘09 isnﬁnV uo 22

K.A.Hunt et al.

 

 

A 20000

\ Rrtrin=1[--‘|
2000
200 “I K

 

 

 

 

 

 

 

 

 

I .. 1 g _ >-
K I;
20 Is”
_ia
013’
2 I I I I I
3 2000000 K
a: 
I a
E I ‘.‘l - - M
= 20000
n.
U
III
.a
as
2 II I I I I
'3 2E+10

 

200000000 --.

2000000 /

200m /

200-

 

 

 

 

 

it

eta-s”
pct-0'

 

 

 

2 I I I I I
4 E 1 2 1 6 20 24 23

Reaction: per iteration {r}

 

D

Fig. 6. Optimization of reactions for splitting applied per iteration (r).
Relative CPU time for theoretical networks requiring 10 (A), 20 (B) and
30 (C) total reactions for splitting to complete, assuming that one sub-
network is intractable per iteration (open circles) or all subnetworks are
intractable until the last iteration (closed squares). Time for intractable
subnetworks was varied between 10-fold increase (solid lines) and 10-fold
decrease (dashed lines) relative to an unsplit model. Relative CPU time is
the summation of time to complete all subnetworks normalized by time to
complete the whole unsplit network. Vertical dotted lines designate the
optimal working range based on the minimum (open circles with solid
lines) and the exponential decrease (closed squares), given no prior know-
ledge of network splitting behavior

(J evremovié and Boley, 2012; Jevremovié et al., 2011a). The pre-
sented basic and iterative splitting algorithms are expected to be
fully compatible with that group’s recent efforts to implement
distributed EF MA computing with shared memory (Jevremovié

et al., 2011b), offering additional computing power for recalci-
trant subnetworks.

When using EFMTool, the reactions for splitting cannot con-
tain a subset representing all non-zero ﬂux reactions in an EF M;
enforcing such a subset causes an error. The ability to identify
the error by examining all subnetworks at the level of compres-
sion indicates the error is caused during preprocessing.
Additionally, manual application of the nullspace algorithm
did not yield an explanation for the error. The error was repro-
ducibly avoided by identifying the subnetworks with the error
and eliminating at least one of the reactions in the EF M from the
set of reactions for splitting. This solution is algorithmically in-
convenient, as one of these reactions must be removed from the
set of reactions for splitting and the new combination of reac-
tions reanalyzed (Fig. 2). However, subnetworks enforcing an
EFM cannot contain more than the deﬁned EFM, as an EFM
cannot be represented within another EFM (due to the decom-
posability constraint). The BF M in an enforced reaction set can
be identiﬁed through EFMA of the problematic reaction set, a
negligible computational investment. By conﬁrming enforcement
of an EF M to be the problem, rechecking of reactions and empty
subnetworks may be avoidable through early completion of the
branch enforcing a complete EF M and addition of the identiﬁed
EF M to the solution set.

Selection criteria were established for identifying effective re-
actions for splitting (Table 2). Some of these criteria could be
incorporated into a new EF MA algorithm. Examples include (i)
changing the representation of reversible reactions and (ii) chan-
ging when the algorithm networks are compressed. Recording
reversible reactions in the original network model as separate
forward and reverse reactions would allow the algorithm to
deﬁne enforce/ suppress combinations involving currently unus-
able reactions thereby eliminating the need for the reversibility
rule. Compressing networks before applying the enforce/ suppress
subroutine would prevent the network from reconﬁguring with
subnetwork deﬁnition, removing the need for subnetwork veriﬁ-
cation. However, this operational order may reduce effectiveness
of subnetwork deﬁnition, as some suppressed reactions result
in additional combinable reactions, as shown by the creation
of a dead-end reaction when suppressing R8 in Figure 1 and
Supplementary Figure S1 (Klamt et al., 2005). Although the
likelihood of reaction rearrangement as a function of network
complexity should be examined, the costs of accounting for net-
work compression effects were not prohibitive to the analysis for
presented models.

The presented splitting approaches are subject to the availabil-
ity of reactions for splitting. For instance, a hypothetical model
composed exclusively of reversible reactions or a model where
every reaction had poorly scaled coefﬁcients could not be ana-
lyzed with the presented approach. Fortunately, such models are
not typically biologically relevant. Although all chemical reac-
tions are theoretically reversible, many are effectively irreversible
under physiologically relevant concentrations and temperatures.
Additionally, the scaling of reaction coefﬁcients for a metabolic
model is dictated by product/substrate stoichiometries of the en-
zymes, which are often in a range that do not cause numerical
instability. A more practical limit would be a model that does
not have enough reactions satisfying the rules in Table 2 to
sufﬁciently divide the network into tractable subnetworks.

 

1 576

112 [3.1081120an[plOJXO'SODBIIIJOJIIIOIQ/[Z(11111 IIIOJJ pepsolumoq

910K ‘09 isnﬁnV uo 22

EFMA through demand-based subnetwork definition

 

Although such a model is theoretically possible, it is hypothe-
sized that with computational resource improvements, most
models will be tractable.

The basic splitting and iterative splitting algorithms allow for
distributed computation of models through division into subnet-
works. Microsoft HPC software permitted enumeration of the
nearly 2 billion EF Ms in the DIATOM model in <1 month using
academic computer laboratories during idle hours. Although the
total CPU time is unavoidable, the real time required to run large
models can be reduced substantially based on the number and
computational power of nodes. For instance, the most complex
subnetwork in the DIATOM model took ~2 days of run time;
therefore, given appropriate resources, the EFMA could have
been completed in 2 days if the other subnetworks were concur-
rently run on additional nodes. This highlights the lower limits of
computational time for EF MA of genome-scale models, given
current computer capabilities. Using the splitting algorithm and
sufﬁcient computational resources, the presented study substan-
tially expands the applicability of EF MA.

SYMBOLS

f Number of intractable subnetworks

i Iteration in the iterative splitting process

iw, Number of iterations in the iterative splitting process

k Number of reactions with non-zero coefﬁcients within an EFM
m Number of metabolites in the compressed model

N Number of subnetworks attempted

q Number of reactions in the compressed model

R Number of reactions used for subnetwork deﬁnition during the

splitting process
m,” Minimum number of reactions needed for complete subnetwork
enumeration during the splitting process

a

R’ Number of preliminary reactions for splitting (reactions that have
not been veriﬁed at the subnetwork level)

R# Reaction #, where # identiﬁes a speciﬁc reaction from Figures 1
or 3

r Number of reactions used for subnetwork deﬁnition at each
iteration

tfal'] Average CPU time spent on intractable subnetworks

tr}, Average completion time for subnetwork deﬁned by r*i reactions

tunsph, Time for unsplit network to complete

ACKNOWLEDGEMENT

The authors would like to thank Jeffrey J. Heys, Marco Terzer,
and Austin Jacobs for helpful discussions.

Funding: Centers of Biomedical Research Excellence (COBRE)
Center for Analysis of Cellular Mechanisms and Systems
Biology, National Institute of Health (P20RR024237 to J .P.F .
and R.L.T.), Integrative Graduate Education and Research
Traineeship (IGERT) in Geobiological Systems, National
Science Foundation (DGE 0654336 to K.A.H. and R.L.T.)
and the Emerging Frontiers in Research and Innovation
(EFRI), National Science Foundation (0937613 to K.A.H.).
The diatom reconstruction was supported by the Air Force
Ofﬁce of Scientiﬁc Research (FA9550-09-1-0243 to R.P.C.).

Conflict of interest: none declared.

REFERENCES

Barrett,C.L. et al. (2009) Decomposing complex reaction networks using ran-
dom sampling, principal component analysis and basis rotation. BMC Syst.
Biol., 3, 30.

Carlson,R.P. (2009) Decomposition of complex microbial behaviors into resource-
based stress responses. Bioinformatics, 25, 90—97.

Carlson,R.P. et al. (2002) Metabolic pathway analysis of a recombinant yeast for
rational strain development. Biotechnol. Bioeng., 79, 121—134.

de Figueiredo,L.F. et al. (2009) Computing the shortest elementary ﬂux modes in
genome-scale metabolic networks. Bioinformatics, 25, 3158—3165.

Emanuelsson,O. et al. (2007) Locating proteins in the cell using TargetP, SignalP
and related tools. Nat. Protoc., 2, 953—971.

Fabris,M. et al. (2012) The metabolic blueprint of Phaeodactylum tricornutum
reveals a eukaryotic Entner-Doudoroff glycolytic pathway. Plant J., 70,
1004—1014.

Feist,A.M. et al. (2006) Modeling methanogenesis with a genome-scale metabolic
reconstruction of Methanosarcina barkeri. Mol. Syst. Biol., 2, 2006.0004.

Gagneur,J. and Klamt,S. (2004) Computation of elementary modes: a unifying
framework and the new binary approach. BM C Bioinformatics, 5, 175.

Ip,K. et al. (2011) Analysis of complex metabolic behavior through pathway
decomposition. BM C Syst. Biol., 5, 91.

Jevremovié,D. et al. (2011a) Divide-and-conquer approach to the parallel compu-
tation of elementary ﬂux modes in metabolic networks. In: 2011 IEEE
International Symposium on Parallel and Distributed Processing Workshops and
Phd Forum. IEEE, Anchorage, AK, pp. 502—511.

Jevremovié,D. et al. (2011b) Parallelization of nullspace algorithm for the compu-
tation of metabolic pathways. Parallel Comput., 37, 261—278.

Jevremovié,D. and Boley,D. (2012) Parallel computation of elementary ﬂux modes
in metabolic networks using global arrays. In: The 6th Conference on Partitioned
Global Address Space Programming Models. Santa Barbara, CA.

Jungreuthmayer,C. et al. (2013) regEfmtool: Speeding up elementary ﬂux mode
calculation using transcriptional regulatory rules in the form of three-state
logic. Biosystems., 113, 37—39.

Kaleta,C. et al. (2009) Can the whole be less than the sum of its parts? Pathway
analysis in genome-scale metabolic networks using elementary ﬂux patterns.
Genome Res., 19, 1872—1883.

Klamt,S. et al. (2005) Algorithmic approaches for computing elementary modes in
large biochemical reaction networks. IEE Proc. Syst. Biol., 152, 249—255.

Klamt,S. and Stelling,]. (2002) Combinatorial complexity of pathway analysis in
metabolic networks. Mol. Biol. Rep., 29, 233—236.

Klamt,S. and Stelling,]. (2003) Two approaches for metabolic pathway analysis?
Trends Biotechnol., 21, 64—69.

Kroth,P.G. et al. (2008) A model for carbohydrate metabolism in the diatom
Phaeodactylum tricornutum deduced from comparative whole genome analysis.
PLoS One, 3, 61426.

Liao,J.C. et al. (1996) Pathway analysis, engineering, and physiological consider-
ations for redirecting central metabolism. Biotechnol. Bioeng., 52, 129—140.
Llaneras,F. and Picc'),J. (2010) Which metabolic pathways generate and characterize
the ﬂux space? A comparison among elementary modes, extreme pathways and

minimal generators. J. Biomed. Biotechnol., 2010, 753904.

Ma,H.-W. et al. (2004) Decomposition of metabolic network into functional mod-
ules based on the global connectivity structure of reaction graph. Bioinformatics,
20, 1870—1876.

Markowitz,V.M. et al. (2012) IMG: the integrated microbial genomes database and
comparative analysis system. Nucleic Acids Res., 40, D115—D122.

Orth,J.D. et al. (2010) What is ﬂux balance analysis? Nat. Biotechnol., 28, 245—248.

Poolman,M.G. et al. (2007) Modular decomposition of metabolic systems via null-
space analysis. J. Theor. Biol., 249, 691—705.

Reed,J.L. and Palsson,B.O. (2003) Thirteen years of building constraint-based in
silico models of Escherichia coli. J. Bacteriol, 185, 2692—2699.

Schilling,C.H. et al. (2000) Theory for the systemic deﬁnition of metabolic pathways
and their use in interpreting metabolic function from a pathway-oriented per-
spective. J. T heor. Biol., 203, 229—248.

Schilling,C.H. and Palsson,B.0. (2000) Assessment of the metabolic capabilities of
Haemophilus inﬂuenzae Rd through a genome-scale pathway analysis. J. Theor.
Biol., 203, 249—283.

 

1 577

112 /810'S112umo[pJOJXO'sottchOJutotw/2dnq IIIOJJ pepcolumoq

910K ‘09 isnﬁnV uo 22

K.A.Hunt et al.

 

Schuster,S. et al. (2000) A general deﬁnition of metabolic pathways useful for
systematic organization and analysis of complex metabolic networks. Nat.
Biotechnol., 18, 326—332.

Schuster,S. et al. (2002) Exploring the pathway structure of metabolism: decompos-
ition into subnetworks and application to Mycoplasma pneumoniae.
Bioinformatics, 18, 351—361.

Schuster,S. et al. (2010) Predicting novel pathways in genome-scale metabolic
networks. Biochem. Soc. T rans., 38, 1202—1205.

Schuster,S. and Hilgetag,C. (1994) On elementary ﬂux modes in biochemical reac-
tion systems at steady state. J. Biol. Syst., 02, 165—182.

Tachibana,M. et al. (2011) Localization of putative carbonic anhydrases in two
marine diatoms, Phaeodactylum tricornutum and T halassiosira pseudonana.
Photosynth. Res., 109, 205—221.

Taffs,R. et al. (2009) In silico approaches to study mass and energy ﬂows in micro-
bial consortia: a syntrophic case study. BM C Syst. Biol., 3, 114.

Terzer,M. et al. (2009) Genome-scale metabolic networks. Wiley Interdiscip. Rev.
Syst. Biol. Med., 1, 285—297.

Terzer,M. and Stelling,J. (2008) Large-scale computation of elementary ﬂux modes
with bit pattern trees. Bioinformatics, 24, 2229—2235.

Trinh,C.T. et al. (2009) Elementary mode analysis: a useful metabolic pathway
analysis tool for characterizing cellular metabolism. Appl. Microbiol.
Biotechnol., 81, 813—826.

Urbanczik,R. (2007) Enumerating constrained elementary ﬂux vectors of metabolic
networks. IET Syst. Biol., 1, 274—279.

Urbanczik,R. and Wagner,C. (2005a) An improved algorithm for stoichiometric
network analysis: theory and applications. Bioinformatics, 21, 1203—1210.

Urbanczik,R. and Wagner,C. (2005b) Functional stoichiometric analysis of meta-
bolic networks. Bioinformatics, 21, 4176—4180.

Varma,A. et al. (1993) Stoichiometric interpretation of Escherichia coli glucose
catabolism under various oxygenation rates. Appl. Environ. Microbiol., 59,
2465—2473.

Varma,A. and Palsson,B.0. (1994) Stoichiometric ﬂux balance models quantita-
tively predict growth and metabolic by-product secretion in wild-type
Escherichia coli W3110. Appl. Environ. Microbiol., 60, 3724—3731.

Verwoerd,W.S. (2011) A new computational method to split large biochemical
networks into coherent subnets. BMC Syst. Biol., 5, 25.

 

1 578

112 [glO'SIBILInO[plOJXO'SODBIILIOJIIlOIQ/[i(11111 won pepeolumoq

910K ‘09 lsnﬁnV no :2

