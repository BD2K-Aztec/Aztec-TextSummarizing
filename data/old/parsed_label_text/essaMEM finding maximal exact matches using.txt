We have developed essaMEM, a tool for finding maximal exact matches that can be used in genome comparison and read mapping. essaMEM enhances an existing sparse suffix array implementation with a sparse child array. Tests indicate that the enhanced algorithm for finding maximal exact matches is much faster, while maintaining the same memory footprint. In this way, sparse suffix arrays remain competitive with the more complex compressed suffix arrays. Availability: Source code is freely available at https://github.ugent.be/ ComputationalBiology/essaMEM.
INTRODUCTIONMaximal exact matches (MEMs) are exact matches between two sequences that cannot be extended to the left or right without introducing a mismatch. In addition, extra cardinality constraints can be imposed, leading to the concepts of maximal unique matches (MUMs) and maximal almost-unique matches. These matches are widely used as seeds for sequence comparisons and alignment tools, such as MUMmer (). Algorithms for memory-efficient MEM-finding can be divided into online and indexed methods. Algorithms of the former type construct a (compressed) index structure for the concatenation of both sequences and iterate over the index to find the MEMs or MUMs (). essaMEM belongs to the class of indexed MEM-finding algorithms, which match one sequence against an index of the other sequence. The advantage of indexed MEM-finding over online MEM-finding algorithms is the reusability of the constructed index. Originally, suffix trees () or enhanced suffix arrays (ESA) () were used to find MEMs. However, the size of these types of indexes is several times larger than the size of the indexed sequence. ESAs consist of four arrays [suffix, longest common prefix (LCP), child and suffix link arrays] that contain parts of the information stored in suffix trees and together reach the full expressiveness of suffix trees (). Several algorithms build on the idea of ESAs by using more memory-efficient variants of the arrays.suggest the use of sparse suffix arrays (SSA). SSAs index only every Kth suffix of the sequence. The parameter K is called the sparseness factor. Their SSA-based algorithm, sparseMEM, is able to find MEMs faster than previous methods, while using less memory. As a result of this lower memory footprint, SSAs can also index larger genomes than previous methods. However, for large values of K, the execution time increases dramatically. More recently, an algorithm using (enhanced) compressed suffix arrays (CSA) was presented by. In contrast to SSAs, these compressed counterparts index every Kth suffix array value. It was shown how the CSA-based MEM-finding algorithm, backwardMEM, outperforms sparseMEM, except when memory is abundant. In this article, we optimize the method by Khan et al. by supplementing SSAs with a sparse child array for large sparseness factors. We show that the new index structure outperforms the previous design, while maintaining the same memory footprint. Furthermore, when combining both the suffix link and child arrays, we achieve a complete enhanced sparse suffix array (ESSA), which has the same expressiveness as suffix trees for substrings larger than K. We show that ESSAs are competitive for MEM-finding with the CSA-based method by Ohlebusch et al. and outperform commonly used methods like MUMmer () and Vmatch (http://www.vmatch.de/). This indicates that, although compressed index structures have recently become popular (), the use of ESSA-based algorithms can be a viable option for further research.