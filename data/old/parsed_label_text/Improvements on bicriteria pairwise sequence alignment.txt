Motivation: In this article, we consider the bicriteria pairwise sequence alignment problem and propose extensions of dynamic programming algorithms for several problem variants with a novel pruning technique that efficiently reduces the number of states to be processed. Moreover, we present a method for the construction of phylo-genetic trees based on this bicriteria framework. Two exemplary cases are discussed. Results: Numerical results on a real dataset show that this approach is very fast in practice. The pruning technique saves up to 90% in memory usage and 80% in CPU time. Based on this method, phylo-genetic trees are constructed from real-life data. In addition of providing complementary information, some of these trees match those obtained by the Maximum Likelihood method. Availability and implementation: Source code is freely available
INTRODUCTIONRecently, there has been a growing interest on the multi-criteria formulation of optimization problems that arise in computational biology (see an extensive review in). However, exact solution approaches for most of these new formulations have not been thoroughly investigated, with the exception of the work offor bicriteria pairwise sequence alignment. For an alignment ' of sequences A : a 1 ,. .. , a n1  and B : b 1 ,. .. , b n2 , we denote by s' the substitution score of alignment ' according to a substitution matrix M, and by d' and g', the number of indels and gaps (maximal consecutive run of indels) of '. The two following score vector functions are considered: VSD' : s',  d'   VSG' : s',  g'   Two bicriteria problems that consist of finding the alignments that are 'maximal' with respect to the score vector functions above are as follows:where  denotes the set of all feasible alignments. The image of set  in the score function space is called feasible score set. To give a proper meaning to the operator vmax, we introduce the following dominance relation between score vectors in Problem (VSDP): Given two alignments ' and ' 0 , VSD'4VSD' 0  (' dominates ' 0 ) if and only if it holds that s' ! s' 0 , d' d' 0  and VSD' 6  VSD' 0 . An alignment ' is Pareto optimal if there exists no other alignment '  such that VSD'  4VSD'. The set of all Pareto optimal alignments is called Pareto optimal alignment set. The image of a Pareto optimal alignment in the score function space is a non-dominated score, and the set of all non-dominated scores is called non-dominated score set. The dominance relation and the above notation also apply to Problem (VSGP) with the necessary changes. Computing the Pareto optimal alignment set can be an intractable task: consider the sequences A : G n and B : TGT 2n and the substitution matrix Mi, i : 1 and Mi, j : 0, i 6  j; then, there exist 2n nPareto optimal alignments that match G n in both sequences, as there exists no other alignment with larger substitution score and lesser number of indels (3n  1 indels). The aforementioned example also applies to the number of gaps (n  1 gaps). However, the size of the non-dominated score set is bounded by min', n 1  n 2  2', where ' is the size of longest common subsequence of A and B (). Interesting properties of this formulation in relation to parametric sequence alignment (see) are discussed in: an optimal alignment for the parametric score function with positive parameters is a Pareto optimal alignment. However, there may exist Pareto optimal alignments that are not optimal for any parameter setting. These alignments, and corresponding scores, are called supported and non-supported, respectively (). From a geometrical point of view, supported scores are those that lie in the convex-hull boundary of the non-dominated score set. *To whom correspondence should be addressed. Furthermore, it is common to distinguish between extreme and non-extreme supported scores (). A score is extreme supported if it is a vertex of the convex hull boundary of the feasible score set; otherwise it is a non-extreme supported score. Although it is relatively easy to find all extreme supported scores (), it is more challenging to find all those that are non-extreme. Finding the whole non-dominated score set would allow identifying both extreme and non-extreme supported non-dominated scores, as well as non-supported nondominated scores. Therefore, multicriteria sequence alignment brings advantages to the practitioner, as it allows to get rid of parameters and to explore a tractable set of alignments that are not reachable by any other methods. However, to the best of our knowledge, few work has been done on multi-criteria sequence alignment (). In this article, we propose extensions of dynamic programming algorithms for several bicriteria problem variants with a pruning technique that is based on the comparison of lower and upper bounds, as performed in branch-and-bound procedures. Moreover, we describe an experimental analysis on a real dataset and discuss the use of bicriteria pairwise sequence alignment in the context of phylogenetic tree construction.
CONCLUSIONIn this article, a pruning technique is introduced to improve the performance of dynamic programming algorithms for bicriteria pairwise sequence alignment, which uses lower and upper bounds to discard states in early stages of the process. This technique can easily be extended for the case of affine gap by performing the necessary changes in the recurrence relation of matrices S and T(see Section 2.1). They can also be extended for the three criteria case, where the substitution score, the number of indels and the number of gaps are simultaneously considered in the score vector function. In addition, this pruning technique can also be used in multi-criteria multiple sequence alignment, for instance, in the context of progressive alignment with sum-of-pairs score function. In the second part of this article, we showed for the first time a successful link between non-dominated score sets and phylogenetic tree construction. We present a simple method based on our bicriteria framework that allows to construct phylogenetic trees as well as to give information about the reliability of the tree branches. The advantage of this method is that no assumption about a priori knowledge on users preferences is required, therefore, being less unbiased. The two real-life test cases showed that few phylogenetic trees can be obtained and are matched with those obtained with the ML method. Further research is needed to derive theoretical relation between ML estimations and the information provided by the non-dominated score set for tree branch reliability.