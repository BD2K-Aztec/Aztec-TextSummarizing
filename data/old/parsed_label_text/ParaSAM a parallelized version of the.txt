Motivation: Significance analysis of microarrays (SAM) is a widely used permutation-based approach to identifying differentially expressed genes in microarray datasets. While SAM is freely available as an Excel plug-in and as an R-package, analyses are often limited for large datasets due to very high memory requirements. Summary: We have developed a parallelized version of the SAM algorithm called ParaSAM to overcome the memory limitations. This high performance multithreaded application provides the scientific community with an easy and manageable client-server Windows application with graphical user interface and does not require programming experience to run. The parallel nature of the application comes from the use of web services to perform the permutations. Our results indicate that ParaSAM is not only faster than the serial version, but also can analyze extremely large datasets that cannot be performed using existing implementations.
INTRODUCTIONShrinkage-based approaches to testing for differential expression in microarray experiments have proven to best identify the genes of scientific interest (). The computational demand of analyzing these data continues to increase due to the reduced cost of microarrays and increases in the number of replicates being measured. The computational burden is especially evident with shrinkage-based tests where permutations are often used to assess statistical significance and the false discovery rate (FDR) (). The significance analysis of microarrays (SAM) algorithm is a popular method for differential expression analyses using a shrinkage-based-test and permutations for the FDR (). The popularity of SAM is enhanced by its free availability as an Excel plug-in or R package. SAM is a computationally * To whom correspondence should be addressed. demanding algorithm and analysis of larger datasets is challenging due to the high memory requirements. Creating a parallel version of SAM could address problems often encountered with larger experiments. With a parallel algorithm, the computational workload is divided among multiple CPUs and the main memory of all participating computers is utilized to avoid caching operations to the disk which will significantly decrease algorithm execution time. The most time and memory intensive portion of the SAM algorithm is permuting the columns to determine the null distribution. For large datasets, users of the serial version of SAM will decrease the number of permutations used in analyses to allow the algorithm to complete without error. This results in a poorly characterized null distribution. To overcome this limitation, we developed a high performance parallelized version of the SAM algorithm called ParaSAM. This version divides the permutations across multiple compute nodes, allowing ParaSAM to perform a large number of permutations (e.g. 1000).a larger number of people by writing the software to run in the Windows operating system. This parallel implementation of the SAM algorithm does not require expensive hardware and the number of compute nodes can be as small as one. In fact, any number of inexpensive desktop computers connected by a network can be used. The permutation partitioning scheme is not restricted and is entirely dependent on the number of compute nodes participating in the algorithm. In ParaSAM, we have utilized the memory efficiently using C# and have achieved almost a 2-fold speed-up even on a single machine.