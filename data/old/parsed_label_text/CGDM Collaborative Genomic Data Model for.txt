Motivation: High-throughput molecular profiling has greatly improved patient stratification and mechanistic understanding of diseases. With the increasing amount of data used in translational medicine studies in recent years, there is a need to improve the performance of data warehouses in terms of data retrieval and statistical processing. Both relational and Key Value models have been used for managing molecular profiling data. Key Value models such as SeqWare have been shown to be particularly advantageous in terms of query processing speed for large datasets. However, more improvement can be achieved, particularly through better indexing techniques of the Key Value models, taking advantage of the types of queries which are specific for the high-throughput molecular profiling data. Results: In this paper, we introduce a Collaborative Genomic Data Model (CGDM), aimed at significantly increasing the query processing speed for the main classes of queries on genomic databases. CGDM creates three Collaborative Global Clustering Index Tables (CGCITs) to solve the velocity and variety issues at the cost of limited extra volume. Several benchmarking experiments were carried out, comparing CGDM implemented on HBase to the traditional SQL data model (TDM) implemented on both HBase and MySQL Cluster, using large publicly available molecular profiling datasets taken from NCBI and HapMap. In the microarray case, CGDM on HBase performed up to 246 times faster than TDM on HBase and 7 times faster than TDM on MySQL Cluster. In single nucleotide polymorphism (SNP) case, CGDM on HBase outperformed TDM on HBase by up to 351 times and TDM on MySQL Cluster by up to 9 times.
IntroductionMolecular profiling refers to the study of specific patterns or signatures, such as DNA polymorphism, mRNA gene expression profiling, RNA profiling, proteomics and metabolic polymorphism. Biomedical research is moving towards using more high-throughput molecular profiling data to improve disease understanding. A typical molecular profiling database contains values of features from individuals of interest or samples, to be used for several medical studies. A subject of study is usually a particular sample which we want to analyze for the specific study. At high level, queries on bioinformatics databases are meant to retrieve subjects based on their features as searching conditions. We investigated massive molecular profiling data based analysis applications, such as Van't, Cross and Burmester (2004),, and participated in popular European medical projects, such as U-BIOPRED (Unbiased BIOmarkers in PREDiction of respiratory disease outcomes) () and eTRIKS (European Translational Information and Knowledge Management Services) (). We found three most frequently used steps for disease understanding. The first step is the marker selection. The next step is to discover the relationship between the selected markers and a particular disease. If the relationship is validated, the last step is to detect potential patients with the disease
DiscussionThe most common queries for disease understanding do not cover all the commonly used queries, for example wildcard query. Generally, there are two main types of wildcard queries. One begins with a wildcard (%searchstring...). This query will perform a scan operation on a full or large range of the table. The other one starts with a search string (search-string%...). This query will perform a relatively small seek operation based on theprefix 'search-string'. Though tests for wildcard query are not specified, some of the results show some hints about how CGDM may perform. The last query in section 3.2.1, which performed a scan on the whole table, indicates the performance of a test similar to (%search-string...). The query tests in section 3.2.3 performed queries similar to queries with wildcard (GSE2408%) on HBase. Due to the hierarchical design of CGCIT, CGCIT has three types of wildcard queries, the wildcard query on primary index, the wildcard query on other indices and the wildcard query on content. The last query in section 3.2.1 shows a wildcard query on primary key and the queries in section 3.2.3 indicates wildcard queries on other indices. Any one of these three wildcard queries may not be the best choice for certain cases, while a mixed dynamically wildcard query plan may perform better than statically choosing one.
ConclusionIn this paper, CGDM has been created for high-throughput molecular profiling data to improve the query processing speed for the three main classes of queries on genomic databases. Multiple benchmarking experiments were carried out, comparing CGDM implemented on HBase to TDM implemented on both HBase and MySQL Cluster, using large publicly available molecular profiling datasets. In the microarray case, CGDM on HBase performed up to 246 times faster than TDM on HBase and 7 times faster than TDM on MySQL Cluster. In the SNP case, CGDM on HBase outperformed TDM on HBase by up to 351 times and TDM on MySQL Cluster by up to 9 times.