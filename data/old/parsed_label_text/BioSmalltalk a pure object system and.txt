We have developed BioSmalltalk, a new environment system for pure object-oriented bioinformatics programming. Adaptive end-user programming systems tend to become more important for discovering biological knowledge, as is demonstrated by the emergence of open-source programming toolkits for bioinfor-matics in the past years. Our software is intended to bridge the gap between bioscientists and rapid software prototyping while preserving the possibility of scaling to whole-system biology applications. BioSmalltalk performs better in terms of execution time and memory usage than Biopython and BioPerl for some classical situations. Availability: BioSmalltalk is cross-platform and freely available (MIT license) through the Google Project Hosting at
INTRODUCTIONWe present a novel free/open source software (FOSS) platform for the development of bioinformatics software and applications. BioSmalltalk attempts to reconcile the current de facto scripting modalities of textual programming languages with the features of Smalltalk (), which has a pure object dynamic programming environment. BioSmalltalk provides similar functionality to other FOSS toolkits for bioinformatics, such as BioPerl (), Biopython () and BioJava (), based in industry-leading general-purpose textual programming languages. Precedent of bioinformatics tools exists in Smalltalk, but none of them has tried to provide a bioinformatics Application Programming Interface (API). MolTalk () was developed in StepTalk, a scripting environment, for doing structural bioinformatics. Also, a cross-platform Graphical User Interface (GUI) for protein sequence analysis was done in Smalltalk (). Object-orientation (OO) is a term first coined by one of the Smalltalk inventors, Alan Kay (1969). It was initially conceived as a programming paradigm based on the recognition of realworld communicating objects in computer simulations (). OO features were integrated accordingly to platform limitations, in virtually all major programming languages, and toolkits, including the Bio* projects. The Bio* toolkits' usage of OO is commonly hybrid or emulated through modules (), mixing objects with primitive data types and hampering the use of reflective functionalities (). BioSmalltalk benefits from decreased source code verbosity, and its execution in a self-contained snapshot system that promotes run-time adaptability, critical for systems where shutdown cycles cannot be tolerated ().