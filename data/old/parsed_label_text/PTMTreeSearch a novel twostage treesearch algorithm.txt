Motivation: Tandem mass spectrometry has become a standard tool for identifying post-translational modifications (PTMs) of proteins. Algorithmic searches for PTMs from tandem mass spectrum data (MS/MS) tend to be hampered by noisy data as well as by a combina-torial explosion of search space. This leads to high uncertainty and long search-execution times. Results: To address this issue, we present PTMTreeSearch, a new algorithm that uses a large database of known PTMs to identify PTMs from MS/MS data. For a given peptide sequence, PTMTreeSearch builds a computational tree wherein each path from the root to the leaves is labeled with the amino acids of a peptide sequence. Branches then represent PTMs. Various empirical tree pruning rules have been designed to decrease the search-execution time by eliminating biologically unlikely solutions. PTMTreeSearch first identifies a relatively small set of high confidence PTM types, and in a second stage, performs a more exhaustive search on this restricted set using relaxed search parameter settings. An analysis of experimental data shows that using the same criteria for false discovery, PTMTreeSearch annotates more peptides than the current state-of-the-art methods and PTM identification algorithms, and achieves this at roughly the same execution time. PTMTreeSearch is implemented as a plugable scoring function in the X!Tandem search engine. Availability: The source code of PTMTreeSearch and a demo server application can be found at http://net.icgeb.org/ptmtreesearch.
INTRODUCTIONMass spectrometry is now the de facto method used for protein identification in complex biological samples. Subsequent computational analysis of data from even a single sample may be intense and involve the application of a long pipeline of various algorithms to reveal protein identification and structure. (For reviews see) Difficulties arise when unexpected or missed cleavages, point mutations and post-translational and chemical modifications need to be considered in the analysis, since the inclusion of these structural features of proteins can lead to the combinatorial explosion of the search space. This can lead to increases in search-execution time, decreases in the significance of hits, and increases in the number of false assignments. A solution to this problem involves application of a so-called two-round-search (often termed error-tolerant search) applied extensively in X!Tandem () and Mascot (). The first round of this strategy uses 'clean', i.e. unmodified peptides to identify proteins, and then in a second round of analysis, a more exhaustive search is used to identify modified peptides. This principle assumes that at least one high-quality unmodified peptide is present in the sample under analysis. Identification of post-translational modifications of proteins (PTMs) is an especially difficult task. On average, human proteins are thought to carry about three PTMs per molecule (). However, 51% of the proteins in the UniProtKB/Swiss-Prot databases are annotated with PTMs (), meaning significant variations from this estimate may exist. The current list of known PTMs is 4500, and they can be found in various lookup tables (PTMDBs, PTM databases). A good example is the RESID Database of Protein Modifications (). A PTM carried on a peptide alters the molecular weight of the peptide and the corresponding fragment ions and results in a shift within the mass spectrum fragment ion series. We term this shift a 'gap'. A PTM search can then be formalized as follows: given a theoretical and an experimental spectrum, *To whom correspondence should be addressed. insert one or more gaps into the theoretical spectrum such that it maximizes the number of the overlapping peaks or other scoring functions. The main challenge for the PTM-search algorithms is then to find such gaps that can be interpreted as PTMs in the MS/MS data, while keeping the execution time and the false discovery rate (FDR) low (). PTM-search algorithms can be categorized into three large groups: targeted, untargeted and de novo PTM-search methods (for a review see). In the case of targeted PTM searches, the user/experimenter has to specify the PTMs that may be present in the sample as an input parameter to the search program and these parameters will then be used to calculate the gaps. For instance, X!Tandem () considers one type of PTM per amino acid. However, this results in a combinatorial explosion of the search space that increases the execution time and often reduces the significance of the hits. For example, a partial (incomplete) modification, such as phosphorylation of serine would result in a mass shift of $80 Da at serine residues and would effectively double the number of serine-containing peptides. This is because each serine residue would have to be annotated with and without the mass shift due to phosphorylation. Untargeted PTM searches do not require the user to specify expected PTMs but instead use heuristic search algorithms to find modifications on the basis of a database of known PTMs. RESID () is one such database that can be used in this type of search. For instance, the algorithm PILOT_PTM (prediction via integer linear optimization and tandem mass spectrometry) uses a binary integer optimization model to find PTMs that best match the experimental data under analysis (). MODi () identifies shortsequence tags (35-amino acid long) and fills gaps between tags with amino acids that are unmodified or modified by PTMs. PTMSearchPlus () uses further information obtained from accurate intact protein mass to identify PTMs in MS/MS data. De novo PTM-search algorithms (also called 'unrestricted PTM searches or blind searches') do not use a priori information about modifications making it possible to discover novel, previously never reported, modifications. In general, a theoretical spectrum of a peptide sequence is aligned to an experimental spectrum, allowing placement of one or a few gaps in one way or another. These gaps are then reported as putative PTMs. To explain this in more detail, let  denote the mass difference between the precursor mass of the experimental spectrum and the parent mass of the theoretical peptide. Some methods have a restriction on gaps, such as the number of the gaps or the sum of the inserted gaps must be  . MS-Alignment () uses a dynamic programming approach to calculate the best alignment. A similar method has been proposed by (), but in this case does not take  into account during the alignment calculation. P-Mod (), PTMap () and pMatch () place  of each amino acid on the theoretical peptide and matches it to the experimental spectrum iteratively. In a similar manner, TwinPeaks () and DeltAMT () calculate the location of the PTM but TwinPeaks shifts the theoretical peptide over a wide range and derives the PTM mass from the shift providing the highest score. DeltAMT meanwhile assumes that both modified and unmodified versions of the peptides are present in the sample and looks for frequent occurrences of the retention time and parent ion-mass difference between spectral pairs. High concentration of such pairs is assumed to represent modification groups in the sample. OpenSea (), in a similar manner to MOD i , identifies shortsequence tags from the spectrum but fills the gaps between tags without using a PTMDB. SIMS () meanwhile interprets pairs of product ion peaks, which represent potential amino acid residues or intervals, as a means of mapping PTMs. The de novo PTM identification algorithms often misplace PTMs on the amino acid sequence or require other corrections to improve accuracy. PTMClust () and PTMFinder () have been designed to improve the quality of PTM assignments obtained with de novo PTM identification. Building a prefix tree from theoretical peptide sequences constitutes a different kind of approach wherein the problem of PTM identification is reduced to tree traversal (). For a peptide sequence p 1. .. p n of length n, a prefix tree structure can be built wherein the nodes at the i-th level of the tree are labeled with the amino acid p i and each branch represents different modifications on p i taken from a PTMDB. At each node, the corresponding theoretical fragment ion masses are calculated and matched to the experimental spectrum, providing a score for the given node. Leaves that have gathered modifications on the path from the root and add up to the parent mass difference are considered feasible solutions. The problem with this approach is the tree's size: a complete traversal is too time-consuming for practical application. A greedy traversal heuristic has previously been proposed that traverses only a fraction of the full search space thus reducing running times to a manageable level (). However, greedy algorithms may fail to find the best solution and report false annotations. Instead of developing more sophisticated tree traversal algorithms for this problem, we decided to develop treepruning rules to eliminate unlikely modifications and reduce the search space. In this article we present a novel method, called PTMTreeSearch, which is designed to identify modifications in experimental spectra using a PTMDB. PTMTreeSearch is executed in two rounds. Using strict tree-pruning rules, the first round of search is aimed at identifying a restricted set of PTM types with high confidence. The second round uses this restricted set of PTM types but runs with relaxed tree-pruning rules so as to identify more modified spectra. To the best of our knowledge, this method is the first that applies a two-stage-search approach to PTM identification. This idea is analogous to the two round peptide identification strategy used by X!Tandem and Mascot, where the first round is used to reduce the search space to likely solutions followed by an error-tolerant, more exhaustive search in the second round. The rest of this article is structured as follows: Section 2 presents the PTMTreeSearch algorithm along with the tree pruning techniques applied; Section 3 describes the datasets and methods used and Section 4 presents and discusses the results. Finally, Section 5 concludes our findings and outlines further work. Let L a be a list of modification masses (measured in Daltons) for the amino acid a and n a  jL a j denote the number of the elements in the list (0.0 Da is always included and represents no modification). A modification mass is the mass difference that the amino acid gains or losses due to the molecular modification. For example L c  /0.0, 17.0265, 47.9847, 57.0215, 71.0371,. .. , '/' means the amino acid cysteine can be (i) unmodified, (ii) lose 17.0265 Da (via losing ammonia from cysteine), (iii) gain 47.9847 Da (via complete oxidation), (iv) gain 57.0215 Da (via carbamidomethylation) and (v) gain 71.0371 Da (via propionamide), and so on. The molecular mass of cysteine is 121.16 Da and becomes 178.1815 Da after carbamidomethylation. Note that one particular amino acid molecule is not modified with more than one modification at the same time, but an amino acid can be modified with various modifications at different occurrences in the peptide sequence (and in different peptides as well). Let q be an experimental spectrum represented as a list of locationintensity peak pairs, p  a 1 a 2. .. a n be a peptide sequence, PM(q) and PM(p) denote the precursor mass of q and p, respectively, and   PM(q)  PM(p). The basic idea is to generate the theoretical fragment ion peaks for all modified variations of peptide p and store them in a prefix tree, where a branch at the level i denotes a PTM on amino acid a i. A tree node at the level i contains a structure v  hs, b, y, m, ci, where s is a score that quantifies the comparison of the peptide part a 1. .. a i to the experimental spectrum. Then c is the number and m is the sum of the mass of the acquired modifications in the sequence a 1. .. a i. The variables b and y store the masses (m/z) of the b-and y-fragment ions that correspond to the (a 1. .. a i )  m and (a i1. .. a n )    m fragment ions, respectively. Now we recursively define the tree and the values stored in the node structures as follows: the root node is h0, 0, PM(q), 0, 0i at level 0. If v  hs, b, y, m, ci is a node in the tree at the level i (0 i5n), then the node v j  hs  h, b  m ai1  m j , y  m ai1  m j , m  m j , c 0 i is a child of the node v at level i  1, where m ai1 is the mass of the amino acid a i1 , m j is the j-th modification in the list L ai1 , h is the sum of the intensities of the experimental peaks that matches to the theoretical peaks b  m ai1  m j and y  m ai1  m j within the small ion match tolerance, c 0  c  1 if m j 6  0, otherwise c 0  c (that is c 0 counts the PTMs on the a 1. .. a i1 fragment).The node v j at level i  1 represents that the amino acid a i1 in the peptide p is modified with the j-th modification from L ai1. If v is a node at level n then v is a leaf node. A leaf l  hs, b, y, m, ci is called a feasible solution if   m (up to a small precursor mass tolerance); that is the mass of the peptide with the acquired modification masses is equal to the precursor mass of the query spectrum. Note that h can be calculated in an efficient way by storing the peaks of the experimental spectrum in an ordered list ordered by the peaks' m/z locations. The score of the spectrum q and peptide p comparison is the maximum score of the feasible solutions, if there is any, otherwise 'null' is returned. This goal can be found with any kind of tree traversal method  depthfirst traversal algorithms are a good example in this case. The modifications on the peptide can then be extracted from the path between the root and the best goal leaf. Note that all nodes at level i correspond to the i-th amino acids in peptide p, and all have the same n ai number of children. Hence, the tree is balanced and all leaves have the same depth. This gives the size of the search space:which makes the time complexity of the traversal algorithm impractical. Note also that the size of the search space does not depend on the experimental spectrum. In the next subsection we define pruning techniques in order to maintain the run time polynomial and make it appropriate for real applications. An example computational tree is given in.