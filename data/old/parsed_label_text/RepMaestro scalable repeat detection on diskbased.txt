Motivation: We investigate the problem of exact repeat detection on large genomic sequences. Most existing approaches based on suffix trees and suffix arrays (SAs) are limited either to small sequences or those that are memory resident. We introduce RepMaestro, a software that adapts existing in-memory-enhanced SA algorithms to enable them to scale efficiently to large sequences that are disk resident. Supermaximal repeats, maximal unique matches (MuMs) and pairwise branching tandem repeats have been used to demonstrate the practicality of our approach; the first such study to use an enhanced SA to detect these repeats in large genome sequences. Results: The detection of supermaximal repeats was observed to be up to two times faster than Vmatch, but more importantly, was shown to scale efficiently to large genome sequences that Vmatch could not process due to memory constraints (4 GB). Similar results were observed for the detection of MuMs, with RepMaestro shown to scale well and also perform up to six times faster than Vmatch. For tandem repeats, RepMaestro was found to be slower but could nonetheless scale to large disk-resident sequences. These results are a significant advance in the quest of scalable repeat detection. Software availability:
INTRODUCTIONThe analysis of whole genome sequences is of critical importance in bioinformatics. A significant problem in such sequence analysis is the presence of repetitive structures, the analysis of which plays a crucial role in the study and comparison of complete genomes (). These repetitive regions occur in biological strings such as in DNA, RNA and protein, and have been shown to play a functional and evolutionary role (). The vast majority of repeats occur in larger organisms such as plants and animals belonging to the eukaryote kingdom and comparatively fewer repeats occur in prokaryote organisms such as bacteria. Significantly, families of repeats account for almost 50% of * To whom correspondence should be addressed. the human genome () and comprise nearly 11% of the mustard weed genome and 7% of the worm genome (). Surprisingly, only a very small fraction (23%) of the human genome sequence contains the protein-coding regions. A large fraction of the genome contain repetitive elements, the functioning of which are yet to be known. For example, long and short interspersed elements account for 21% and 13% of the genome, respectively, while repetitive elements such as micro-and minisatellites could amount to 15% of the genome. This indicates that repetitive sequences exist in abundance in the genome and several of them have been shown to result in abnormalities and diseases. During the analysis of genomes, the basic tasks include locating and characterizing repetitive sequences in the genome and finding similar repeats between two genomes. Broadly, there are two types of repeats: exact and approximate. While exact repeats are a smaller fraction of the repeats having biological interest, they form the 'core blocks of approximate repeats' (). Consequently, we restrict our discussion to the detection of exact repeats and do not consider approximate or inexact repeats. Nonetheless, adapting our software to detect approximate repeats presents a promising avenue for future research. Repeats play a crucial role in furthering our understanding, but the rate at which new genome sequences are being uncovered has been increasing rapidly. The genome sequencing project has been generating sequence data at an exponential rate () and the size of GenBank has been doubling approximately every 18 months. Hence, with the growth of genomic collections as well as increasing query lengths (), it is crucial that the efficiency of sequence analysis remains practical. An example of the impact of this exponential data growth is with the popular local alignment search tool BLAST (), which has been getting slower by 64% each year () inspite of hardware improvements. Thus, we continue to need not only faster and more efficient approaches for the detection of repeats but also ones that are scalable. Two key data structures used for such tasks are the suffix tree and the suffix array (SA). These are helpful for the analysis of sequences that are large but otherwise static. There exists disk-based suffix tree () and SA construction () algorithms that can create a human genome scale structure in under 5 h. However, these data structures are seldom considered for large-scale genome analysis, where these indexes primarily reside on disk. This is primarily due to the poor locality of access inherent in these structures. Our intention is to show that the enhanced SA-based structure (Page: 2369 23682374 RepMaestro) scales very well to the task of repeat detection of large genomes. Furthermore, it has been shown that a SA equipped with additional information can be used to solve all problems for which a suffix tree has been traditionally used (), thus our techniques could be applied to enhance the scalability of a wide array of (bottomup traversal) problems. Fundamental problems in bioinformatics () include the detection of supermaximal repeats, maximal repeats, maximal unique matches (MuMs), maximal multiple exact matches, tandem repeats, exact pattern matching and maximal exact matches; each of which has numerous applications in comparative genomics, homology searching and finding repeat sequences. For example, tandem repeats are the markers of choice in genomic research and find applications in determining parentage, genealogical DNA tests, genotyping pathogens, morphological evolution and in human identification in forensic cases. Furthermore, variations in tandem repeats are an indication of diseases. Existing genomic search tools () can be divided into two major groups: exhaustive and index based. The exhaustive search tools like BLAST incorporate several heuristics to compare the query to each sequence in the database, but there are growing concerns regarding its scalability. The index-based tools such as CAFE (), Vmatch () and MUMmer () preprocess the collection to create an index. CAFE adapts the inverted index structure for fast and scalable homology search but it remains unclear if it could be adapted to solve the other core bioinformatics problems. Vmatch, a state-of-the-art pattern recognition software, is based on an enhanced SA structure () and solves several of the core bioinformatics problems but it is restricted to sequences and indexes being memory-resident. REPuter (), a precursor to Vmatch, is based on the suffix tree representation and consequently has both speed and scalability concerns.introduced a technique that builds an index on top of an external suffix tree to detect supermaximal repeats on large genome sequences. With a minimum repeat length of 10, their implementation is 2 faster than Vmatch, but its large index size is prohibitive. Thus, a primary drawback in existing systems is that the sequences and associated structures are required to be memory-resident for efficiency. The Tallymer software () addresses this concern for the task of k-mer counting and for indexing large sequence sets, by utilizing a disk-resident-enhanced SA. Tallymer offers linear processing time and space consumption, but it is unclear as to whether the software can operate with a bound on memory usage (i.e. whether or not it is scalable), as a consequence of its linear space requirement. Moreover, the authors do not investigate or propose software solutions for finding repeats such as MuMs, in a scalable manner. Consequently, there exists inherent constraints in existing software tools that we seek to improve upon. We have, therefore, developed a pattern recognition software called RepMaestro that offers scalable and memory-conscious algorithms for finding supermaximal repeats, MuMs and tandem repeats in large genome sequences on disk. Our approach, similar to the workings of Vmatch, employs an enhanced SA that is engineered to be accessed and maintained from disk. We demonstrate through careful experimental evaluations that our approach is highly scalable and in many cases, faster than Vmatch and MUMmer.
CONCLUSIONThe analysis of repetitive sequences plays a key role in genome analysis. Such repetitive regions are abundant in genome sequences and these have been demonstrated to have several practical biological applications such as in the determination of parentage and in forensics. While there are several efficient algorithms available that enable the detection of repetitive sequences, these are mainly restricted to smaller memory-resident sequences and, therefore, can not scale well or operate on large sequences that are stored on disk. We have, therefore, introduced RepMaestro, a software that implements algorithms that allows us to compute supermaximal repeats, MuMs and tandem repeats of a large genome sequence stored on disk, in a scalable and memory-efficient manner. In most cases, we outperform a state-of-the-art memory-resident algorithm while simultaneously consuming significantly less (and bounded) memory. This allows RepMaestro to be an immediate solution for the problem of rapidly processing large genome sequences that are many times larger than the available main memory. RepMaestro is, however, dependant on third-party software(s) to generate the required indexes, and so, its applicability is subjected to their operational constraints (see Supplementary Material).