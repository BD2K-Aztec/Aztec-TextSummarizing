Motivation: A palindrome is a string that reads the same forward and backward. Finding palin-dromic substructures is important in DNA, RNA or protein sequence analysis. We say that two strings of the same length are pal-equivalent if, for each possible centre, they have the same length of the maximal palindrome. Given a text T of length n and a pattern P of length m, we study the pal-indrome pattern matching problem that finds all indices i such that P and T ½i À m þ 1 : i are pal-equivalent. Results: We first solve the online palindrome pattern matching problem in O(m 2) preprocessing time and O(mn) query time using O(m 2) space. We then extend the problem for multiple patterns and solve the online multiple palindrome pattern matching problem in Oðm k MÞ preprocessing time and Oðm k n þ cÞ query time using Oðm k MÞ space, where M is the sum of all pattern lengths, m k is the longest pattern length and c is the number of pattern occurrences. Availability and implementation: The source code for all algorithms is freely available at http://toc.
IntroductionFinding motifs and patterns in bio strings has been one of the most popular topics in both computer science and biology (). A palindrome is a string that reads the same forward and backward. Namely, a string w is a palindrome if w  w R , where w R denotes the reversal of w. If a substring of a string is a palindrome, we say that the string has a palindromic substring or palindromic structure. It is important to find palindromes and identify similar palindromic structures in DNA, RNA or protein sequence analysis (). Since palindromic structures in bio data reflect the capability of molecules to fold and form doublestranded stems (), bio data with similar palindromic structures may have similar secondary structures. Moreover, palindromic sequences are closely associated with DNA breakage during gene conversion (), and palindromic substructures are presented in CRISPR/Cas9 (), which has been used for gene editing and gene regulation in species (). Therefore, it is useful to identify palindromic substructures and palindromic equivalence efficiently. We focus on the palindrome pattern matching problem introduced by. Given a text T of length n and a pattern P of length m, the palindrome pattern matching problem is to find all indices i such that P and Ti  m  1 : i have the same set of all centre-distinct maximal palindromes. Seefor an example.presented two algorithms that solve the palindrome pattern matching for an arbitrary size alphabet. We notice that both algorithms byrequire a preprocessing step of T. This may slow down the whole process when T is an extremely large text and I/O for T is considerably slow due to the large but slow storages. Moreover, these algorithms might not be applicable if T is a stream data. Many researchers designed online string algorithms to avoid these problems, where each character in T is given online, and we want to report intermediate results without readingwhole T (). For the palindrome pattern matching problem, we want to report all matching indices i while reading T online. Based on the KnuthMorrisPratt algorithm (), we first build an automaton A from P and process T using A. For a text T of length n and a pattern P of length m, our algorithm requires O(m 2 ) preprocessing time and runs in O(mn) query time using O(m 2 ) space. We, furthermore, tackle the online multiple palindrome pattern matching based on a modification of the AhoCorasick automaton (). For multiple patterns P 1 ;. .. ; P k of length m 1 ;. .. ; m k , our algorithm requires Om k M preprocessing time and runs in Om k n  c query time using Om k M space, where M is the sum of all pattern lengths, m k is the longest pattern length and c is the number of pattern occurrences. Note that the second algorithm considers multiple patterns and has the same query time as the first algorithm except the number of pattern occurrences.