Motivation: The reference CRAM file format implementation is in Java. We present Scramble: a new C implementation of SAM, BAM and CRAM file I/O. Results: The C implementation of for CRAM is 1.5–1.7Â slower than BAM at decoding but 1.8–2.6Â faster at encoding. We see file size savings of 34–55%. Availability and implementation: Source code is available at http:// sourceforge.net/projects/staden/files/io_lib/ under the BSD software licence.
INTRODUCTIONStorage capacity has been the primary driver behind the development of the CRAM format (). The CRAM format () is a practical implementation of reference-based compression and is a viable alternative to the earlier BAM format (). CRAM is now the preferred submission format for the European Nucleotide Archive. The initial CRAM prototype was in Python, quickly followed by a Picard (http://picard.sourceforge.net/) compatible Java reference implementation (https://www.ebi.ac.uk/ena/about/cram_ toolkit). We identified a need for a C implementation, which was implemented as part of the Staden Package's () 'io_lib' library. Our primary conversion tool is named Scramble. It can read and write SAM, BAM and CRAM formats using a unified Application Programming Interface (API).
CONCLUSIONWe have demonstrated that the C implementation of CRAM performs well, beating Samtools, Picard and Cramtools for encoding speed. Decoding speed is not as efficient as Samtools but is still comparable with Picard and nearly twice as fast as the Java CRAM implementation. Also notable is that the nature of CRAM means some read operations (for example, flagstat and index) are faster than with BAM. CRAM is not yet capable of achieving the top compression ratios, using 3.96 bits/base with 40 quality bins and 2.05 bits/base with 8 bins compared against only 3.16 and 1.52 for fqz_comp (), and 41 bits per read name in CRAM versus 23 bits in fqz_comp. This demonstrates room for improvement in future CRAM versions, partially achieved by replacing Zlib with arithmetic coding or an Asymmetric Numerical System (). Scramble is not a drop-in replacement for the Samtools API; however, a port of the CRAM components of Scramble has been made to the HTSlib library and is available within Samtools version 1.0, available at https://github.com/samtools/.