Motivation: The Systems Biology Markup Language (SBML) is currently supported by 4230 software tools, among which 160 support numerical integration of ordinary differential equation (ODE) models. Although SBML is a widely accepted standard within this field, there is still no language-neutral library that supports all features of SBML for simulating ODE models. Therefore, a demand exists for a simple portable implementation of a numerical integrator that supports SBML to enhance the development of a computational platform for systems biology. Results: We implemented a library called libSBMLSim, which supports all the features of SBML and confirmed that the library passes all tests in the SBML test suite including those for SBML Events, AlgebraicRules, fast attribute on Reactions and Delay. LibSBMLSim is implemented in the C programming language and does not depend on any third-party library except libSBML, which is a library to handle SBML documents. For the numerical integrator, both explicit and implicit methods are written from scratch to support all the function-ality of SBML features in a straightforward implementation. We succeeded in implementing libSBMLSim as a platform-independent library that can run on most common operating systems (Windows, MacOSX and Linux) and also provides several language bindings (Java, C#, Python and Ruby). Availability: The source code of libSBMLSim is available from http:// fun.bio.keio.ac.jp/software/libsbmlsim/. LibSBMLSim is distributed under the terms of LGPL.
INTRODUCTIONUnderstanding of the logic and dynamics of gene-regulatory and biochemical networks is a major challenge in systems biology. For this reason, there exist numerous software tools that can simulate ordinary differential equations (ODEs), and several efforts to standardize the model description of computational models have been made. One major model description language is the Systems Biology Markup Language (SBML), which is well accepted in the systems biology field (). Although there exist 4230 SBML-supported software tools (), there is still no language-neutral library that supports all SBML features and has been confirmed as passing all SBML tests. For example, few simulator completely support SBML Events, which is an element to describe a discontinuous change to a model with respect to time, number of particles, parameter values, etc. Supporting Events in the simulator requires some effort by developers if they are using one of the existing numerical integration libraries, because most of the integrators assume that the model is continuous. Another element that is not well supported in SBML is the SBML AlgebraicRule element, which allows modelers to reduce the number of variables and to add a constraint to each variable. Therefore, supporting AlgebraicRule in the simulator involves far more than just implementing a numerical integrator for ODEs, because the simulator has to solve differential algebraic equations (DAEs), which requires an implementation to solve non-linear simultaneous equation numerically (or analytically) to determine the value of variables described in AlgebraicRule. This is also required when a simulator must support the 'fast' attribute on an SBML Reaction element. The Delay function is a rarely supported SBML function in existing simulators, especially with a combination of Event elements. The Delay function allows a modeler to include biological processes having a delayed response. This function requires some additional modification to the ODE solver itself, to store calculated values that are used after a certain delay. To carefully and quantitatively check the capability of each SBML elements on the simulator, it is recommended to run the test cases provided by the SBML test suite and validate each simulation results. SBML test suite consists of numerous combinations of SBML features in separate models with the expected results. The test results are also publicly released for existing software (http://sbml.org/Facilities/Database), and currently, there is still no language-neutral library that confirmed to pass all SBML tests.
DISCUSSIONThe aim of the current work is the development of a portable simulation library that fully supports SBML features. For this purpose, we at first focused on accuracy by a straightforward implementation, staying carefully within the specifications of SBML. Although there already exist elaborated and efficient solvers, numerical integrators including variable-step integrator and both explicit and implicit method are implemented from scratch because we wanted to reduce the number of dependent libraries as much as possible. We are planning to port this library on tablet computers and smartphones. SBML can also describe partial differential equations (PDEs), stochastic differential equations (SDEs) and discrete stochastic simulation models, which are not yet included in the SBML test suite. As yet libSBMLSim does not provide integrators for these types of models; a known limitation which we intended to address in our future development of the library.
CONCLUSION