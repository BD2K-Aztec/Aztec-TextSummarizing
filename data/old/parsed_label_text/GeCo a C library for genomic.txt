We propose a C++ class library developed to the purpose of making the implementation of sequence analysis algorithms easier and faster when genomic annotations and variations need to be considered. The library provides a class hierarchy to seamlessly bind together annotations of genomic elements to sequences and to algorithm results; it allows to evaluate the effect of mutations/variations in terms of both element position shifts and of algorithm results, limiting recalculation to the minimum. Particular care has been posed to keep memory and time overhead into acceptable limits. Availability and Implementation: A complete tutorial as well as a detailed doxygen generated documentation and source code is
DISCUSSIONNew cost-effective high-throughput sequencing and array techniques are now able to generate huge amounts of information on DNA, RNA as well as proteinDNA and proteinRNA interactions. Systems biology approaches can integrate these information at a genomic level describing and studying complex regulatory networks. Prediction and interpretation of the functional meaning of individual genomic variations could be inferred by studying the modifications and rewiring events they produce in these networks. Despite this being considered as one of the most promising challenges (), a gap remains to be filled between sequence analysis algorithms, genomic annotations and variations; the lack of tools integrating these three levels of analysis is going to become more evident as high-throughput techniques on one side and system biology on the other start to converge to translational research applications. Beside providing C++ programmers with features usually present in interpreted languages, our library introduces a genomic element model that tightly and time/space efficiently integrates computed features, position annotations and variations, allowing for feature rich 'in memory' representations of what usually is provided by genome browsers. The most important difference is that in our case this representation is able to dynamically keep track of genomic variations. To our knowledge this is an approach that has not been implemented in any other package yet, irrespectively by the language used. As a first attempt to fill this gap, the GeCo++ library makes the development of complex and efficient applications straightforward, not bounded to specific data sources or computational algorithms and that can easily evaluate the effect of sequence variations on genomic functional elements. Conflict of Interest: none declared.