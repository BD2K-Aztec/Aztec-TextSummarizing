Large volumes of data generated by high-throughput sequencing instruments present non-trivial challenges in data storage, content access and transfer. We present G-SQZ, a Huffman coding-based sequencing-reads-specific representation scheme that compresses data without altering the relative order. G-SQZ has achieved from 65% to 81% compression on benchmark datasets, and it allows selective access without scanning and decoding from start. This article focuses on describing the underlying encoding scheme and its software implementation, and a more theoretical problem of optimal compression is out of scope. The immediate practical benefits include reduced infrastructure and informatics costs in managing and analyzing large sequencing data.
INTRODUCTIONHigh-throughput sequencing methods and instruments () generate hundredsof-millions to billions of short reads. Storage, management and transfer of such large volumes of data necessitate an order of magnitude more infrastructure capabilities. Algorithms and software are required to analyze terabytes of data within practical constraints of resources, such as computer processors, memory, storage, time, etc., and have to cope with the new challenge of handling very large files containing dense data. With constantly increasing throughput, monetary costs of processing and managing sequencing data are becoming a larger factor in research planning. To that end, this article proposes a lossless, order preserving and compact-encoding scheme called Genomic SQueeZ (G-SQZ) for sequence read data and provides a software implementation. Typically, genomic sequencing data consists of annotated genomic bases in their relative order. Annotation is required due to reasons such as (i) nucleotide base calling algorithms typically report error probability, generally called quality score, to account for intrinsic uncertainties in sequence identification processes; (ii) additional information needs to be reported when sequence identification is inconclusive, incomplete or erroneous; and (iii) for various downstream analyses, assigning unique * To whom correspondence should be addressed. identifiers to sequencing reads is desirable. This overhead of storing annotation information dramatically increases file sizes and any storage reduction approach requires compressing both base and annotation data.
DISCUSSIONThe salient features of G-SQZ are: (i) Specifically designed for sequencing reads in known format(s) and not for arbitrary data; (ii) implicit pairing and simultaneous encoding of base-quality data; (iii) other than counting frequency of base, quality pairs, no other string matching is employed; (iv) order of base, quality data is unchanged; and (v) data can be retrieved selectively without serial scans and decoding from the beginning, a feature that can be utilized by multi-threaded parallel computing applications. G-SQZ is designed for sequencing reads, unlike aligned sequences in SAM/BAM () formats. Since no restriction is imposed on the number of symbols, it is possible to include any number of distinct bases (including other IUPAC symbols, error symbols, etc.) and larger range covering higher