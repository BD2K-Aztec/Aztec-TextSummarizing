
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:56+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Systems biology Biocellion: accelerating computer simulation of multicellular biological system models</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2014">. 21 2014</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Seunghwa</forename>
								<surname>Kang</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computational Biology and Bioinformatics Group</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Simon</forename>
								<surname>Kahan</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">High-performance Computing Group</orgName>
								<orgName type="institution">Pacific Northwest National Laboratory</orgName>
								<address>
									<postCode>99354</postCode>
									<settlement>Richland</settlement>
									<region>WA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jason</forename>
								<surname>Mcdermott</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computational Biology and Bioinformatics Group</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Nicholas</forename>
								<surname>Flann</surname>
							</persName>
							<affiliation key="aff2">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Utah State University</orgName>
								<address>
									<postCode>84322</postCode>
									<settlement>Logan</settlement>
									<region>UT</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Ilya</forename>
								<surname>Shmulevich</surname>
							</persName>
							<affiliation key="aff3">
								<orgName type="department">Institute for Systems Biology</orgName>
								<address>
									<postCode>98109</postCode>
									<settlement>Seattle</settlement>
									<region>WA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Systems biology Biocellion: accelerating computer simulation of multicellular biological system models</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">30</biblScope>
							<biblScope unit="page" from="3101" to="3108"/>
							<date type="published" when="2014">. 21 2014</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btu498</idno>
					<note type="submission">Received on April 2, 2014; revised on June 28, 2014; accepted on July 17, 2014</note>
					<note>BIOINFORMATICS ORIGINAL PAPER Associate Editor: Jonathan Wren</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Biological system behaviors are often the outcome of complex interactions among a large number of cells and their biotic and abiotic environment. Computational biologists attempt to understand , predict and manipulate biological system behavior through mathematical modeling and computer simulation. Discrete agent-based modeling (in combination with high-resolution grids to model the extracellular environment) is a popular approach for building biological system models. However, the computational complexity of this approach forces computational biologists to resort to coarser resolution approaches to simulate large biological systems. High-performance parallel computers have the potential to address the computing challenge, but writing efficient software for parallel computers is difficult and time-consuming. Results: We have developed Biocellion, a high-performance software framework, to solve this computing challenge using parallel computers. To support a wide range of multicellular biological system models, Biocellion asks users to provide their model specifics by filling the function body of pre-defined model routines. Using Biocellion, modelers without parallel computing expertise can efficiently exploit parallel computers with less effort than writing sequential programs from scratch. We simulate cell sorting, microbial patterning and a bacterial system in soil aggregate as case studies. Availability and implementation: Biocellion runs on x86 compatible systems with the 64 bit Linux operating system and is freely available for academic use. Visit http://biocellion.com for additional information.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Cells interact with other cells by moving, adhering, dividing and secreting and receiving diffusible molecules. As a result, unicellular organisms are able to form communities with complex macroscopic structure and behavior (e.g. biofilm), while multicellular organisms, where cells can differentiate to perform different functions, form tissues. Multicellular biological systems respond to external stimuli and reshape the surrounding environment. Complex interactions among cells and their biotic and abiotic environment drive multicellular system behavior. Understanding the impact of such interactions is a critical step in our ability to predict and manipulate important biological system behaviors in the areas of energy (<ref type="bibr" target="#b25">Melnicki et al., 2013</ref>), environment (<ref type="bibr" target="#b9">Daly, 2000</ref>) and health care (<ref type="bibr" target="#b36">Weinberg, 2007</ref>). Computational biologists have started to investigate multicellular biological systems via modeling and simulation. Cells and their biotic and abiotic environment constitute a biological system. Computational biologists commonly model the environment by imposing a grid on the extracellular space. There are two principal approaches in modeling cells: population-based modeling and discrete agent-based modeling. Population-based modeling (<ref type="bibr" target="#b0">Anderson and Chaplain, 1998;</ref><ref type="bibr" target="#b37">Xavier et al., 2009</ref>) approximates the cells within any grid box by a set of variables associated with the grid box. Discrete agent-based modeling (<ref type="bibr" target="#b0">Anderson and Chaplain, 1998;</ref><ref type="bibr" target="#b10">Ferrer et al., 2008;</ref><ref type="bibr">JeanninGirardon et al., 2013</ref>) maps each cell (or subcellular element) to a discrete simulation entity. Biologists have accumulated a significant amount of knowledge about cell and subcellular organelle behaviors. Discrete agent-based modeling naturally translates the accumulated knowledge to a mathematical model. However, the computational complexity of discrete agent-based modeling increases proportional to the number of discrete agents. Many biological systems contain 1 million to 100 billion cells (<ref type="bibr" target="#b5">Byrne and Drasdo, 2009</ref>). Researchers have acknowledged the necessity of supercomputers and a proper parallel implementation to simulate millions to billions of cells within a reasonable time (<ref type="bibr" target="#b16">Jiao and Torquato, 2011</ref>). The lack of 'a proper parallel implementation' forces computational biologists to simply use a small number of cells (which does not reflect the reality), resort to populationbased modeling or develop a hybrid approach that uses discrete agent-based modeling for a fraction of the cells [e.g. invading cancer cells (<ref type="bibr" target="#b11">Frieboes et al., 2010)]</ref>and adopts populationbased modeling for the remaining cells. The most practical approach to build a high fidelity model of important biological systems is starting from a relatively simple model and incrementally improving the model fidelity, which typically results in increases in the complexity and scale of the model. For this approach to be successful, we believe that an incremental increase in model complexity and scale should require only an incremental amount of additional programming effort. Population-based modeling and the hybrid approach are *To whom correspondence should be addressed. ß The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com inherently limited in this regard. Averaging a heterogeneous population of cells to a few variables associated with a grid box cannot model cell granularity events in the required level of detail (<ref type="bibr" target="#b23">McDougall et al., 2002</ref>). Adopting the hybrid approach, fewer and fewer cells can be modeled using the population-based approach as modelers adopt more complex mathematics to describe individual cell behaviors. We designed Biocellion to allow computational biologists to use discrete agent-based modeling—in combination with highresolution grids to model the extracellular environment—from simple small-scale models to highly complex large-scale models with millions to billions of cells. We aim to address the increase in computational complexity exploiting high-performance computing (HPC): adoption of efficient algorithms, careful performance tuning and exploitation of parallel computers ranging from multicore PCs to Cloud computers and supercomputers. Parallel computers are abundant but developing efficient software for large parallel computers is a highly demanding task (<ref type="bibr" target="#b2">Bernholdt, 2007</ref>) and becoming even more so with new multicore processors and manycore accelerators such as Intel Xeon Phi and NVIDIA graphics processing units (<ref type="bibr" target="#b18">Kang et al., 2011</ref>). Biological system models are diverse and even a model from a single research group changes significantly over a relatively short period. This imposes a challenge in software reusability, which is problematic considering the high development cost of parallel software. Biocellion asks users to express their model specifics by filling the function body of pre-defined model routines. Biocellion executes and evaluates the user-provided model routines in parallel using efficient solvers. This approach provides Biocellion users having no HPC expertise with the flexibility needed to support a variety of models and the performance required to simulate large systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Related work</head><p>VirtualCell (<ref type="bibr" target="#b22">Loew and Schaff, 2001</ref>) and Smoldyn (<ref type="bibr" target="#b1">Andrews, 2012</ref>) simulates one or a small number of cells in detail—modeling cell membrane and subcellular structures in high spatial resolution or individually modeling every molecule. CompuCell3D (<ref type="bibr" target="#b14">Izaguirre et al., 2004</ref>) and Morpheus (<ref type="bibr" target="#b31">Starruß et al., 2014</ref>) adopt the Cellular Potts model (<ref type="bibr" target="#b12">Graner and Glazier, 1992</ref>) and target biological systems with up to millions of cells. The Cellular Potts Model partitions the simulation domain into equally sized cubic boxes and maps a set of boxes to each cell. The Cellular Potts Model evaluates the overall biological system energy based on mathematical constraints derived from cell behavioral rules and dynamically updates the mapping between boxes and cells to minimize the overall system energy. However, Voss-B€ ohme (2012) claims that modeling biological system behaviors using the contrived energy term complicates interpreting simulation output. Discrete agent-based modeling maps a cell to an agent (or multiple agents). Discrete agents can be placed anywhere in the simulation domain to within the limits of floating point precision. Discrete agents move and change sizes to model cell movement and growth. There are multiple general-purpose software frameworks supporting agent-based modeling—e.g. FLAME (<ref type="bibr" target="#b7">Chin et al., 2012</ref>) and SWARM (<ref type="bibr" target="#b26">Minar et al., 1996</ref>). These tools are highly flexible in modeling agent behaviors but require more programming efforts than software frameworks specifically designed for biological system modeling; modelers need to implement partial differential equation (PDE) solvers from scratch to update molecular concentrations by solving PDEs. iDynoMiCS (<ref type="bibr" target="#b21">Lardon et al., 2011</ref>) is an agent-based simulation framework designed for biofilm modeling targeting nonprogrammers. iDynoMiCS does not support parallel computing. To the best of our knowledge, Biocellion is the only software framework that is specifically designed for discrete agent-based simulation of general multiscale multicellular biological system models and exploits high-performance parallel computing to simulate millions to billions of cells.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">METHODS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Biocellion design motivation</head><p>Mathematical models of biological systems are diverse, but at the same time, many of the models share common programming and computational challenges. For example, enumerating cell pairs close enough to interact via direct contact is a recurring task. PDE is commonly used to model spatio-temporal variation of molecular concentrations in the extracellular environment. Efficient PDE solvers can be reused. Every parallel simulation of multicellular models must distribute the work of simulating (i) cells, (ii) cell–cell interactions and (iii) different subregions of the extracellular space across compute cores on multiple compute nodes. These are recurring tasks. A biological system model needs to integrate multiple biological processes occurring in different timescales to simulate the system in its entirety. This requires multiple time step sizes. Solving PDEs to model molecular diffusion often requires a much smaller time step size than simulating cell movement due to cell growth and cell–cell shoving and adhesion. Biological processes are interrelated. The required coupling interval—the maximum time step size to simulate one biological process, ignoring the changes due to another biological process, without introducing a significant simulation artifact—varies widely for different pairs of biological processes. Multiple time step sizes and coupling intervals complicate data exchange patterns in parallel computing. The HPC community has developed efficient (but complex to implement) algorithms for many of these recurring issues [e.g. developing efficient PDE solvers (<ref type="bibr" target="#b8">Colella et al., 2012)]</ref>or at least have identified them as future research challenges (<ref type="bibr" target="#b2">Bernholdt, 2007</ref>). Biocellion's design goal is to integrate various algorithms developed by the HPC community to overcome the challenges in concurrently simulating multiple coupled biological processes. This allows computational biologists to focus on building high-fidelity mathematical models (instead of introducing crude approximations to reduce the programming and simulation time or wasting time on implementing complex software). There are two challenges to overcome: (i) designing the Biocellion application programming interface (API) to accommodate the modeling requirements of a spectrum of multicellular biological system models and (ii) providing a high-performance implementation. We focus on the API design issue in this article. The full details of the Biocellion API are also available in the Biocellion user manual (<ref type="bibr" target="#b17">Kang and Kahan, 2014</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">HPC algorithm overview</head><p>We briefly describe our HPC approach here for readers interested in Biocellion internals; the full details will appear in another paper targeting HPC experts. Multiscale models are composed of coupled computational modules. There are two approaches to simulating multiscale models on parallel computers with multiple compute nodes. One approach is to functionally decompose the simulation into multiple computational modules, running each module on a dedicated partition of the compute nodes (<ref type="bibr" target="#b3">Borgdorff et al., 2014</ref>). Modules communicate with each other via explicit internode messages. One can easily build multiscale simulation software by composing existing programs and modifying the program interfaces (<ref type="bibr" target="#b3">Borgdorff et al., 2014</ref>), but the internode communication network becomes a performance bottleneck if modules communicate frequently or voluminously. Biocellion takes a second approach, spatially partitioning the simulation domain. Partitions are assigned to the compute nodes, each executing the entire set of modules for its allotment of partitions. Different modules communicate using memory copy operations, and internode communication occurs only at partition boundaries. This reduces the internode communication volume but complicates programming. Another challenge is balancing the computational load presented by modules with diverse characteristics, including those defined by the user provided model routine code, across compute cores. Biocellion addresses these challenges by using Intel Thread Building Block (TBB) to coordinate the concurrent execution of the computational modules—TBB is designed to support nested irregular parallelism and fits well in our context. For internode communication, Biocellion uses MPI to communicate data at partition boundaries and PNNL Global Arrays (http://hpc.pnl. gov/globalarrays) to share dynamically collected computational characteristics data for different partitions (which are used to map partitions to compute nodes). Different computational modules communicate at different time intervals to exchange data at partition boundaries. Different partitions also have varying computational costs (e.g. some partitions are more densely populated with cells). Assigning neighboring partitions to a single compute node reduces the internode communication volume. Biocellion uses a newly designed algorithm to map partitions to compute nodes considering the above issues and using the dynamically collected characteristics data. Biocellion adopts efficient (but complex) algorithms. Biocellion uses the octree partitioning (<ref type="bibr" target="#b24">Meagher, 1982</ref>) to efficiently enumerate neighboring agent pairs even when there are different types of agents with varying direct physical interaction ranges. Biocellion solves PDEs using an L-stable multi-step semi-implicit method based on adaptive mesh refinement (AMR) and multigrid via customizing CHOMBO (<ref type="bibr" target="#b8">Colella et al., 2012</ref>). An L-stable semi-implicit method allows users to use a much larger time step size than explicit methods on solving stiff problems on a fine grid (<ref type="bibr" target="#b13">Iserles, 2009</ref>). AMR allows users to impose multiple grids with different grid spacings based on the spatial resolution requirements of the simulation subdomains. The multigrid method improves the convergence rate of a numerical method for large problems (<ref type="bibr" target="#b4">Briggs et al., 2000</ref>). Biocellion users do not need to understand our HPC approaches. Users need to fill the model routines to describe biological system behaviors. Efficiently evaluating the model routines using parallel computers is Biocellion's responsibility.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Simulation components</head><p>Biocellion has three computational modules to (i) update individual discrete agent states, (ii) evaluate direct physico-mechanical interactions between discrete agent pairs in close proximity and (iii) track changes in the extracellular space to model indirect interactions among cells via diffusible molecules and interactions between cells and their environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1">Updating individual agent states This module modifies</head><p>the state variables associated with discrete agents. Discrete agent state changes include, but are not limited to, discrete agent growth and shape transformation, increases or decreases in concentrations of various intracellular and cell membrane-bound molecules, cell differentiation and mutation and up-or down-regulation of various molecule consumption and production rates. Biocellion asks users to set the number of discrete agent types and the number of state variables for each discrete agent type. This allows modelers to assign an arbitrary shape (<ref type="figure" target="#fig_1">Fig. 1a</ref>) or an arbitrary set of attributes to a discrete agent based on the model requirements— different models require different sets of state variables. Biocellion provides model routines to update discrete agent state variables based on the state of the discrete agent, direct physico-mechanical interactions with neighboring cells and the state of the microenvironment. This module also simulates cell division and death and secretion of new discrete agents—e.g. to model white blood cells moving out from blood vessels (diapedesis) or secretion of extracellular polymeric substances or extracellular matrix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.2">Evaluating direct interactions</head><p>This module evaluates interactions between discrete agent pairs via direct contact. Direct interactions include cell–cell shoving and adhesion, immune cells engulfing pathogens (phagocytosis), blood vessel tip cells connecting to an existing blood vessel segment (anastomosis), horizontal gene transfer by bacterial conjugation or any other interactions via direct contact between discrete agents. Biocellion users set the maximum direct interaction distance for each discrete agent type. For direct interactions between two discrete agents with different types, Biocellion sets the maximum direct interaction distance by averaging the maximum direct interaction distances of the two types. Biocellion's role is to enumerate every agent pair within the maximum direct interaction distances, and model routines evaluate direct interactions between an agent pair. Cell–cell interactions often depend on previous interactions. For example, if two cells form an adherens junction, pulling the two cells apart requires greater force. Biocellion supports users to explicitly form and break a junction between two discrete agent pairs (<ref type="figure" target="#fig_1">Fig. 1b</ref>). Two discrete agents forming a junction have a set of variables associated with the junction end in each cell's boundary. Users set the number of variables for each junction end type. For example, a modeler can add a variable to store the molecular concentration of adhesion molecules if the model requires the variable to evaluate the strength of cell adhesion. A junction automatically breaks if the distance between the discrete agent pair forming the junction exceeds the maximum direct interaction distance. Direct interactions are evaluated in parallel. If a discrete agent directly interacts with more than one agent, discrete agent variables representing the changes due to direct interactions can be updated by multiple user routine calls. This requires a coordination method if a single variable is concurrently updated by multiple user routine calls. Biocellion supports two different mechanisms to resolve conflicts—users select the conflict resolution scheme. The overwrite scheme reflects only one of the multiple updates from multiple user routine invocations. The delta scheme sums the differences from the initial value. Changes are reflected only after interactions between every pair within the interaction ranges are evaluated. Say a modeler wishes to evaluate the mechanical stress on a cell by summing the overlap distances between the cell and its neighboring cells. The delta scheme is appropriate to sum the overlap distances. If multiple immune cells are trying to engulf a pathogen agent, a modeler may expect only one immune cell to succeed. Assume the modeler added a state variable to the pathogen agent type to store the identifier of an engulfing cell. If multiple model routine calls attempt to update the variable, only one attempt will succeed with the overwrite scheme. In the next time step, the model routine compares the variable value and the interacting immune cell's identifier, and if the two values coincide, the routine updates relevant state variables to complete phagocytosis (e.g. add the pathogen agent's mass to the mass of the engulfing cell). This requires two time steps. We propose to add the third transactional scheme to simulate phagocytosis in a single time step in a more natural way. Two model routine calls will be serialized if they update variables associated with the same discrete agent, and the changes will be reflected immediately.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.3">Updating the extracellular environment The environment</head><p>update module modifies variables representing the extracellular space by either following model-specific rules or solving PDEs. The extracellular space is partitioned into a set of cubical grid boxes. Biocellion invokes a model routine updating state variables associated with grid boxes based on model-specific rules for each grid box. In a single invocation, the model routine can read and update variables associated with one grid box and its 26 neighboring grid boxes (<ref type="figure" target="#fig_1">Fig. 1c</ref>). Variables associated with a single grid box can be updated by up to 27 model routine invocations, and Biocellion supports conflict resolution schemes similar to the above case, evaluating direct interactions between discrete agents. Biocellion provides PDE solvers for steady-state linear reactiondiffusion PDE, time-dependent linear reaction-diffusion PDE and timedependent reaction-diffusion PDE adopting the splitting scheme (<ref type="bibr" target="#b33">Strang, 1968</ref>). The third method is added to model non-linear reactions among different molecular species in the extracellular space—e.g. enzymatic hydrolysis breaks macro molecules into smaller molecules suitable for cell consumption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Simulation domain</head><p>Biocellion partitions the simulation domain into a set of cubical grid boxes. This interface grid is imposed on the simulation domain to model the environment. Different simulation modules interface through this grid (<ref type="figure" target="#fig_1">Fig. 1d</ref>). The interface grid spacing becomes the finest grid spacing in AMR. Users set the number of AMR levels, the refinement ratio between two consecutive AMR levels, and tag each grid box with a desired AMR level. Biocellion generates an AMR grid hierarchy based on this information. Biocellion allows users to set subregions of the simulation domain as PDE buffers—these regions are relevant only in solving PDEs. To model yeast cells growing on top of a thick agarose cylinder, modelers need to include the agarose cylinder to track molecular concentration changes by solving PDEs. However, maintaining data structures to simulate all three computational modules at the granularity of the interface grid spacing is a significant waste in both computing and memory if no cells reside in the agarose cylinder. If a subregion of the simulation domain is marked as a PDE buffer, Biocellion maintains only data structures necessary to solve PDEs. Biocellion also automatically tags the PDE buffer regions with the coarsest AMR level. The environmental structure often limits cell movement—e.g. bacterial cells can be assumed to reside only in pore regions in soil structure (<ref type="bibr" target="#b29">Resat et al., 2011</ref>). Updating cell displacements considering the soil structure can be a cumbersome programming task. Biocellion users can mark subregions of the simulation domain as uninhabitable, and Biocellion automatically adjusts cell displacements (set by users) to prevent cells from penetrating into an uninhabitable region.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Time steps</head><p>Biocellion asks users to set multiple time step sizes representing multiple timescales. The baseline time step is the largest time step to simulate direct interactions between discrete agents and discrete agent movement, division, death and secretion. The direct interaction module reflects the changes from the other two modules in every baseline time step. Biocellion users can tightly couple the discrete agent state update module and the environment update module by splitting a single baseline time step into multiple state-and-grid time steps. A single state-and-grid time step can be further partitioned into multiple PDE time steps.<ref type="figure" target="#fig_2">Figure  2</ref>summarizes the integration strategy for coupling multiple simulation components.Biocellion, by default, maps a cell to a sphere (left). Users can add additional state variables to map an agent to a different shape—e.g. cylinder (right). Cell shape affects cell–cell shoving and adhesion, and providing mathematics to model mechanical interactions between agents is users' task. (b) A junction between a discrete agent pair. A junction end holds a set of variables to represent the junction state in each discrete agent's boundary. (c) A single grid box (black) and its 26 neighboring boxes (white). Each grid box covers a subregion of the simulation domain. (d) PDE parameters are set for each interface grid box based on the states of the grid box, and the discrete agents in the box. are set for the face between two adjacent grid boxesCode 2 Model routine template to set the net molecule production rate (s in<ref type="figure" target="#fig_1">Fig. 1d</ref>) for an interface grid box based on the state of the box and the states of the discrete agents residing in the box.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">API highlights</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RESULTS</head><p>We implement three different models using Biocellion as case studies. The following presents cell sorting (<ref type="bibr" target="#b12">Graner and Glazier, 1992</ref>), microbial patterning in communities of different yeast strains engaging in metabolic interactions (<ref type="bibr" target="#b27">Momeni et al., 2013</ref>) and a bacterial system in complex soil structures (<ref type="bibr" target="#b29">Resat et al., 2011</ref>). Full source code for the presented model implementations is included in the Biocellion release, and steps to port the microbial patterning model to Biocellion are described in (<ref type="bibr" target="#b17">Kang et al., 2014</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Cell sorting</head><p>Many multicellular patterns formed during morphogenesis and embryonic development arise because of differential adhesion among distinct types of disassociated cells (<ref type="bibr" target="#b32">Steinberg, 1963</ref>). Simulations of this process have demonstrated how changes in homotypic and heterotypic adhesion can result in many distinct macroscopic cellular arrangements including clumping, where homotypic cells aggregate, or mosaics, where heterotypic cells alternate forming checkerboard-like patterns (<ref type="bibr" target="#b12">Graner and Glazier, 1992</ref>). In our model, two different cell types are defined with each cell mapped to a sphere of 8 m diameter. If there is an overlap between two neighboring spheres, the two cells push each other to remove the overlap. If two non-overlapping cells of a same type are within 10 m, they pull toward each other, modeling stronger adhesion. If they are of different types, there is no adhesion. The simulations demonstrate that such differential adhesion leads to cell sorting into homotypic aggregations from an initial random distribution (<ref type="figure" target="#fig_5">Fig. 3a</ref>).</p><p>Code 3 The model routine simulating shoving and differential adhesion between two cells. A modeler focuses on describing mathematical rules to evaluate shoving and differential adhesion. Concurrently executing this model routine using parallel computers for different sets of agent pairs is Biocellion's responsibility. The model code implemented using Biocellion has 854 lines— the empty template has 723 lines. Code 3 shows the model routine evaluating cell–cell shoving and differential adhesion. Biocellion users can simulate cell sorting using a cluster computer with little more than 100 lines of coding—the Biocellion framework code has nearly 100 thousand lines to simulate the model using efficient algorithms (briefed in Section 2.2) and parallel computers.<ref type="bibr" target="#b34">Tapia and D'Souza, 2011</ref>). Jeannin<ref type="bibr" target="#b15">Girardon et al. (2013)</ref>adopted an agent-based model mapping a cell to seven particles and sorted 1 million cells using a NVIDIA GTX 690 GPU taking little longer than 0.4 s per step. Even though we are comparing results from running different models on a variety of different computers, and perform varying amounts of work per step, our work significantly advances the state of the art by scaling to the largest parallel computers and sorting billions of cells, three orders of magnitude more than prior work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Microbial patterning</head><p>Momeni et al. (2013) have studied pattern formation in communities of yeast strains based on their ecological interaction types, comparing the MATLAB simulation output and actual patterns observed in laboratory experiments. We implemented one test case in their work using Biocellion (<ref type="figure">Fig. 4</ref>visualizes the simulation output). One strain (say the R strain) produces adenine and consumes lysine. Another strain (say the G strain) produces lysine and consumes adenine. The two strains grow on top of a 24 mm thick agarose cylinder—the height of the simulated colony growth region in the original paper is 300 m in comparison.<ref type="bibr">Momeni et al. demonstrated</ref>that the cooperative relationship between the two strains promotes the intermixing of the two yeast strains. Momeni et al.'s original implementation sets the PDE grid spacing to 50 m for the entire simulation domain (to track adenine and lysine concentrations, the maximum cell diameter is 5 m in comparison). Adenine concentration has high spatial variation near adenine-producing cells. A grid of 50 m spacing might be sufficient to model intermixing patterns (especially when diffusion is fast), but 5 m grid spacing is required to capture the high spatial variation—this might be necessary to investigate more complex problems with high fidelity. Momeni et al.'s original implementation adopts the explicit Euler method—reducing grid spacing by a factor of 10 requires reducing the time step size by 10 2 times for stability. The original implementation takes about a week to simulate yeast growth for 500 h with 50 m grid spacing. Simulating with 5 m grid spacing will take 10 5 weeks ($1917 years) using the original implementation—10 3 times more grid boxes and 10 2 times more time steps. Using Biocellion, a simulation with 5 m grid spacing finishes in little more than a week using 8 Intel nodes owing to AMR (using 5 m grid spacing only for the yeast colony growth region and the top 40 m of the agarose cylinder where adenine concentration is highly localized), L-stable semi-implicit method for timestepping, and parallel computing (exploiting multiple cores in a node and up to eight nodes, Biocellion reduces the execution time per baseline time step by 64.9 times). The original MATLAB code has 449 lines (the Matlab code is available at the publisher's site) while the Biocellion model code has 1817 lines—again, the empty template has 723 lines. The increase in the model code size is due to the increase in the model fidelity. The original MATLAB implementation partitions the simulation domain into fixed size cubical boxes and maps a cell to a box. On cell division, the daughter cell occupies one of the nearest boxes, instantly pushing surrounding cells outward. This models neither cell size changes nor cell movement due to cell–cell shoving (cells move only because of cell division). Cells divide always vertically when surrounded by other cells, and this simplification ends up underestimating the degree of intermixing in the vertical direction (<ref type="bibr" target="#b27">Momeni et al., 2013</ref>). The Biocellion model code maps cells to spheres and more faithfully models cell growth (by increasing the radius of a cell) and cell–cell shoving (by removing the overlap between two spheres). Cells divide in a random direction instead of always dividing vertically. The model improvements result in more accurate reproduction of the intermixing patterns seen in laboratory experiments (<ref type="bibr" target="#b17">Kang et al., 2014</ref>). The Matlab code includes many large matrix operations. This reduces the code size and improves the performance using Matlab's optimized matrix operation libraries but does not provide sufficient flexibility to implement complex cell behavioral rules.(a) Biocellion simulation output for cell sorting. Different types of cells have different colors (red and green). (b) We present strong scaling results (solving a fixed size problem using a larger computer) and weak scaling results (solving a larger problem using a larger computer increasing the problem size proportional to the computer size). For the strong scaling results (left and center), we used up to 16 Intel nodes (each node has two Intel Xeon E-5 2670 2.6 GHz sockets). For the weak scaling results (right), we used up to 128 AMD nodes (each node has two AMD Opteron 6272 Interlago 2.1 GHz sockets) in a larger cluster. We measured the execution time per step (evaluating pairwise interactions between every cell pair within 10 m, cell packing density: 1.6 cells/ð10 mÞ 3 ). Biocellion reduces the execution time by 15.1 times using 16 cores in an Intel node (left) and by additional 15.8 times using 16 Intel nodes. This reduces the execution time per step to sort 26.8 million cells from 113 to 0.474 s. Biocellion sorts a larger system of cells with little increase in time, so long as we increase the number of nodes proportional to the cell system size. Biocellion sorts 1.72 billion cells in 4.46 s per step using 128 AMD nodes (right). No model code change is necessary to achieve this speedup<ref type="figure">Fig. 4</ref>. Microbial patterns produced using Biocellion. The cooperative relationship between R (black) and G (green) strain cells promote the intermixing of the two strains. Black spheres are dead cells and pore regions. No cells reside in the blocked regions and molecules cannot diffuse into the blocked regions—modelers can easily introduce these constraints into Biocellion by marking the blocked regions as uninhabitable and setting diffusion coefficients of the blocked grid box faces to 0. They consider three bacterial strains. One strain secretes a hydrolysis enzyme. The second strain expresses a hydrolysis enzyme on the cell surface. The third strain neither secretes nor expresses a hydrolysis enzyme and does not contribute to macro-molecule hydrolysis. Macro-molecules are located in blocked regions, and the original model updates the concentrations of macro-molecules and secreted enzymes bound to macro-molecules (which cannot diffuse) based on model-specific rules (instead of solving PDEs) considering the concentrations of the secreted enzyme and the cell membrane-bound enzyme in the pore boxes adjacent to the blocked boxes containing macro-molecules. The original model updates secreted enzyme and glucose (output of the enzymatic hydrolysis) concentrations by solving PDEs. Biocellion users can update state variables associated with grid boxes based on model-specific rules (in addition to solving PDEs) to serve this modeling requirement. The original model studied the efficiency of enzymatic hydrolysis and cell growth dynamics for micro-pores and small porous soil aggregates. A single simulation of a 111 m Â 111 m Â 111 m soil aggregate takes 2–4 days on a workstation using the original Fortran implementation (8457 lines). Using Biocellion (the model code has 2466 lines), simulating a soil structure composed of multiple aggregates (384 m Â 384 m Â 384 m) takes a comparable amount of time using four Intel nodes (exploiting multiple cores in a node and up to four nodes, Biocellion reduces the execution time per baseline time step by 47.5 times). Biocellion users can increase the simulation size using a bigger computer without additional programming if it is necessary to study more complex and larger scale phenomena.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Bacterial system in soil aggregate</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">DISCUSSION AND FUTURE WORK</head><p>The Biocellion API does not assume a specific parallel computer architecture. Biocellion users can test their initial implementations on a desktop PC first and scale-up their simulations on Cloud computers or supercomputers with no code change—the complexity of the model code depends only on the complexity of the mathematical model and is irrelevant to the underlying computer system. Biocellion already simulates millions to billions of cells in the 3D environment using multicore workstations to moderate sized cluster computers. Model code conforming to the Biocellion API will seamlessly benefit from Biocellion updates on improving scalability and performance—e.g. tuning for accelerator architectures such as Intel Xeon Phi. We maintain that the computational complexity of high fidelity models and the difficulty of parallel programming for current and future computers should not be a major bottleneck in building highly practical biological system models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Limitations and future work</head><p>Representing a cell by multiple agents allows modeling cell shapes and physical interactions in greater detail (Jeannin<ref type="bibr" target="#b15">Girardon et al., 2013;</ref><ref type="bibr" target="#b28">Newman, 2005</ref>). Mapping a cell to multiple agents is also necessary to separately model subcellular compartments and to represent the spatial variation of molecular concentrations within a cell. However, Biocellion does not yet support this. This limits the maximum resolution used to represent the environment because the interface grid spacing cannot be less than the maximum direct interaction distance between two agents—which often coincides with the maximum cell diameter if a cell is mapped to an agent. Mapping a cell to multiple smaller agents will allow modeling the environment at higher resolution. We plan to extend Biocellion to support multi-agent representation of a cell to lift these limitations. Biocellion provides deterministic ODE system solvers, but there are many other approaches (<ref type="bibr" target="#b30">Shmulevich and Aitchison, 2009</ref>) or even a combination of various approaches (<ref type="bibr" target="#b20">Karr et al., 2012</ref>) to model cell regulatory networks. Users need to implement solvers on their own to use those approaches. This increases the programming burden and lowers the performance, as modelers are likely to write less efficient code than HPC experts. We plan to add solvers for widely used modeling approaches to further reduce the programming burden in simulating cell regulatory networks. Biocellion asks users to represent a model using a predefined set of model routines describing how a cell behaves, how a cell directly interacts with neighboring cells and how cells in a small region interact with their microenvironment. The Biocellion model routines provide local behavioral rules. Global processes, such as water or blood flow, cannot be modeled using the local rules unless Biocellion provides solvers to simulate global processes using locally determined parameter values. We plan to add solvers for Navier-Stokes equations (to compute flow rates) and advection-reaction-diffusion equations (to update molecular concentrations considering flow) to support water and blood flow modeling. Flexibility, performance, and usability often conflict in software design. We designed Biocellion to allow a modeler with strong mathematical modeling background (but without HPC expertise) to build high fidelity models—we focus on providing high flexibility to support various modeling requirements even though we do not ignore usability. To reach a broader range of users, we envision adding productivity layers on top of Biocellion once mathematical modeling of biological systems matures. Biocellion will serve as an acceleration layer for higher productivity tools in such cases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENT</head><p>We acknowledge Wenying Shou, Babak Momeni and Haluk Resat for providing their model details, and Ryan Tasseff for valuable feedback on improving Biocellion. Funding: Support for this research was provided by the Extreme Scale Computing Initiative, the Fundamental and Computational Sciences Directorate and the Technology Investment Program, as part of the Laboratory Directed Research and Development Program at Pacific Northwest National Laboratory (PNNL). Portions of this work were conducted using PNNL Institutional Computing at PNNL. PNNL is operated by Battelle for DOE under contract DE-ACO576RLO 1830.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>Biocellion users provide model specifics in a predefined set of functions spread in five files. model_routine_config.cpp initializes the model—e.g. sets the interface grid spacing. model_routine_agent.cpp updates the discrete agent state. model_routine_grid.cpp updates the extracellular environment. model_routine_mech.cpp evaluates direct interactions between discrete agents. model_routine_output.cpp updates simulation output data—we use Paraview (http://paraview.org) for visualization. Code 1 presents the syntax of the model routine updating the discrete agent state. Code 2 depicts the syntax of the model routine updating the</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig.1.</head><figDesc>Fig. 1. Biocellion API illustrations. (a) Biocellion, by default, maps a cell to a sphere (left). Users can add additional state variables to map an agent to a different shape—e.g. cylinder (right). Cell shape affects cell–cell shoving and adhesion, and providing mathematics to model mechanical interactions between agents is users' task. (b) A junction between a discrete agent pair. A junction end holds a set of variables to represent the junction state in each discrete agent's boundary. (c) A single grid box (black) and its 26 neighboring boxes (white). Each grid box covers a subregion of the simulation domain. (d) PDE parameters are set for each interface grid box based on the states of the grid box, and the discrete agents in the box. are set for the face between two adjacent grid boxes</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig.2.</head><figDesc>Fig. 2. The integration strategy for coupling simulation components. Duplicating data allows parallel execution of simulation components based on system resources. For example, direct interactions are evaluated using the agent state and grid data duplicated at the beginning of the baseline time step. (note that agent and grid data are concurrently updated by other simulation components)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><figDesc>Figure 3b summarizes the performance results. Our results sort up to 1.72 billion cells. In comparison, Chen et al. (2007) adopted the Cellular Potts model and sorted 4 million cells placed on a 2D 10 000 2 lattice using 25 compute nodes (each node has two AMD Opteron 248 sockets) taking 5.3 s per Monte Carlo step. Tapia and D'Souza also adopted the Cellular Potts model and sorted 1.46 million cells placed on a 3D 256 3 lattice using a NVIDIA Tesla C1060 GPU taking 0.26 s per Monte Carlo step (</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><figDesc>Resat et al. (2011) have investigated enzymatic macro-molecule (cellulose) hydrolysis by a heterogeneous population of bacteria in complex soil structure. A soil structure has blocked regions</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig.3.</head><figDesc>Fig. 3. Cell sorting on Biocellion. (a) Biocellion simulation output for cell sorting. Different types of cells have different colors (red and green). (b) We present strong scaling results (solving a fixed size problem using a larger computer) and weak scaling results (solving a larger problem using a larger computer increasing the problem size proportional to the computer size). For the strong scaling results (left and center), we used up to 16 Intel nodes (each node has two Intel Xeon E-5 2670 2.6 GHz sockets). For the weak scaling results (right), we used up to 128 AMD nodes (each node has two AMD Opteron 6272 Interlago 2.1 GHz sockets) in a larger cluster. We measured the execution time per step (evaluating pairwise interactions between every cell pair within 10 m, cell packing density: 1.6 cells/ð10 mÞ 3 ). Biocellion reduces the execution time by 15.1 times using 16 cores in an Intel node (left) and by additional 15.8 times using 16 Intel nodes. This reduces the execution time per step to sort 26.8 million cells from 113 to 0.474 s. Biocellion sorts a larger system of cells with little increase in time, so long as we increase the number of nodes proportional to the cell system size. Biocellion sorts 1.72 billion cells in 4.46 s per step using 128 AMD nodes (right). No model code change is necessary to achieve this speedup</figDesc></figure>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">S.Kang et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">Biocellion at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">Biocellion at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from Conflict of interest: Si.K. has founded Biocellion SPC, a WA state Social Purpose Corporation, to commercialize the Biocellion software framework.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Continuous and discrete mathematical models of tumor-induced angiogenesis</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">R A</forename>
				<surname>Anderson</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">A J</forename>
				<surname>Chaplain</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bull. Math. Biol</title>
		<imprint>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="page" from="857" to="899" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Spatial and stochastic cellular modeling with the smoldyn simulator</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">S</forename>
				<surname>Andrews</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Methods Mol. Biol</title>
		<imprint>
			<biblScope unit="volume">804</biblScope>
			<biblScope unit="page" from="519" to="542" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Component architectures in the next generation of ultrascale scientific computing: challenges and opportunities</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">E</forename>
				<surname>Bernholdt</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Symposium on Component and Framework technology in high-performance and scientific computing (CompFrame</title>
		<meeting>Symposium on Component and Framework technology in high-performance and scientific computing (CompFrame<address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Distributed multiscale computing with MUSCLE 2, the multiscale coupling library and environment</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Borgdorff</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="719" to="731" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title/>
		<author>
			<persName>
				<forename type="first">W</forename>
				<forename type="middle">L</forename>
				<surname>Briggs</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">A Multigrid Tutorial. SIAM</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Individual-based and continuum models of growing cell populations: a comparison</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Byrne</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Drasdo</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Math. Biol</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="page" from="657" to="687" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">A parallel implementation of the cellular potts model for simulation of cell-based morphogenesis</title>
		<author>
			<persName>
				<forename type="first">N</forename>
				<surname>Chen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Phys. Commun</title>
		<imprint>
			<biblScope unit="volume">176</biblScope>
			<biblScope unit="page" from="670" to="681" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<monogr>
		<title level="m" type="main">Flame-ii: a redesign of the flexible large-scale agent-based modelling environment</title>
		<author>
			<persName>
				<forename type="first">L</forename>
				<forename type="middle">S</forename>
				<surname>Chin</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<monogr>
		<title level="m" type="main">Chombo Software Package for AMR Applications Design Document</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Colella</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<pubPlace>Berkeley, CA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">Engineering radiation-resistant bacteria for environmental biotechnology</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">J</forename>
				<surname>Daly</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Curr. Opin.Biotechnol</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="280" to="285" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">Individual-based modelling: an essential tool for microbiology</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Ferrer</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Biol. Phys</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="19" to="37" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">Three-dimensional multispecies nonlinear tumor growthII: tumor invasion and angiogenesis</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<forename type="middle">B</forename>
				<surname>Frieboes</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">264</biblScope>
			<biblScope unit="page" from="1254" to="1278" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">Simulation of biological cell sorting using a twodimensional extended Potts model</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Graner</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Glazier</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Rev. Lett</title>
		<imprint>
			<biblScope unit="volume">69</biblScope>
			<biblScope unit="page" from="2013" to="2016" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<monogr>
		<title level="m" type="main">Numerical Analysis of Differential Equations</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Iserles</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>Cambridge University Press</publisher>
			<pubPlace>Cambridge, UK.</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<analytic>
		<title level="a" type="main">COMPUCELL, a multi-model framework for simulation of morphogenesis</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">A</forename>
				<surname>Izaguirre</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="1129" to="1137" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">An efficient biomechanical cell model to simulate large multi-cellular tissue morphogenesis: application to cell sorting simulation on GPU</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Jeannin-Girardon</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lect. Notes Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">8273</biblScope>
			<biblScope unit="page" from="96" to="107" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">Emergent behaviors from a cellular automaton model for invasive tumor growth in heterogeneous microenvironments</title>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Jiao</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Torquato</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS Comput. Biol</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page">1002314</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<analytic>
		<title level="a" type="main">Biocellion 1.1 User Manual</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Kang</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Kahan</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pacific Northwest National Laboratory</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b18">
	<analytic>
		<title level="a" type="main">Algorithm engineering challenges in multicore and manycore systems</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Kang</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Technol</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="page" from="266" to="273" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<analytic>
		<title level="a" type="main">Simulating microbial community patterning using biocellion</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Kang</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Methods Mol. Biol</title>
		<imprint>
			<biblScope unit="volume">1151</biblScope>
			<biblScope unit="page" from="233" to="253" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b20">
	<analytic>
		<title level="a" type="main">A whole-cell computational model predicts phenotype from genotype</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">R</forename>
				<surname>Karr</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cell</title>
		<imprint>
			<biblScope unit="volume">150</biblScope>
			<biblScope unit="page" from="389" to="401" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b21">
	<analytic>
		<title level="a" type="main">iDynoMiCS: next-generation individual-based modelling of biofilms</title>
		<author>
			<persName>
				<forename type="first">L</forename>
				<forename type="middle">A</forename>
				<surname>Lardon</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Environ. Microbiol</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="2416" to="2434" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b22">
	<analytic>
		<title level="a" type="main">The virtual cell: a software environment for computational cell biology</title>
		<author>
			<persName>
				<forename type="first">L</forename>
				<forename type="middle">M</forename>
				<surname>Loew</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">C</forename>
				<surname>Schaff</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">TRENDS Biotechnol</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="401" to="406" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b23">
	<analytic>
		<title level="a" type="main">Mathematical modelling of flow through vascular networks: implications for tumour-induced angiogenesis and chemotherapy strategies</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">R</forename>
				<surname>Mcdougall</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bull. Math. Biol</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="page" from="673" to="702" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b24">
	<analytic>
		<title level="a" type="main">Geometric modeling using octree encoding</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Meagher</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Graph. Image Process</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="129" to="147" />
			<date type="published" when="1982" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b25">
	<analytic>
		<title level="a" type="main">Feedback-controlled LED photobioreactor for photophysiological studies of cyanobacteria</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">R</forename>
				<surname>Melnicki</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioresour. Technol</title>
		<imprint>
			<biblScope unit="volume">134</biblScope>
			<biblScope unit="page" from="127" to="133" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b26">
	<monogr>
		<title level="m" type="main">The SWARM simulation system: a toolkit for building multiagent simulations</title>
		<author>
			<persName>
				<forename type="first">N</forename>
				<surname>Minar</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b27">
	<monogr>
		<title level="m" type="main">Strong inter-population cooperation leads to partner intermixing in microbial communities</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Momeni</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page">230</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b28">
	<analytic>
		<title level="a" type="main">Modeling multicellular systems using subcellular elements</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<forename type="middle">J</forename>
				<surname>Newman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math. Biosci. Eng</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="611" to="622" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b29">
	<analytic>
		<title level="a" type="main">Modeling microbial dynamics in heterogeneous environments: growth on soil carbon sources</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Resat</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Microb. Ecol</title>
		<imprint>
			<biblScope unit="volume">63</biblScope>
			<biblScope unit="page" from="883" to="897" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b30">
	<analytic>
		<title level="a" type="main">Deterministic and stochastic models of genetic regulatory networks</title>
		<author>
			<persName>
				<forename type="first">I</forename>
				<surname>Shmulevich</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">D</forename>
				<surname>Aitchison</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Methods Enzymol</title>
		<imprint>
			<biblScope unit="volume">467</biblScope>
			<biblScope unit="page" from="335" to="356" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b31">
	<analytic>
		<title level="a" type="main">Morpheus: a user-friendly modeling environment for multiscale and multicellular systems biology</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Starruß</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1331" to="1332" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b32">
	<analytic>
		<title level="a" type="main">Reconstruction of tissues by dissociated cells. Some morphogenetic tissue movements and the sorting out of embryonic cells may have a common explanation</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">S</forename>
				<surname>Steinberg</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">141</biblScope>
			<biblScope unit="page" from="401" to="408" />
			<date type="published" when="1963" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b33">
	<analytic>
		<title level="a" type="main">On the construction and comparison of difference schemes</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Strang</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Numer. Anal</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="506" to="517" />
			<date type="published" when="1968" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b34">
	<analytic>
		<title level="a" type="main">Parallelizing the cellular potts model on graphics processing units</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">J</forename>
				<surname>Tapia</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Souza</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">M</forename>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Phys.Commun</title>
		<imprint>
			<biblScope unit="volume">182</biblScope>
			<biblScope unit="page" from="857" to="865" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b35">
	<analytic>
		<title level="a" type="main">Multi-scale modeling in morphogenesis: a critical analysis of the cellular potts model</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Voss-B € Ohme</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS One</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="1" to="14" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b36">
	<monogr>
		<title level="m" type="main">The Biology of Cancer. Garland Science</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">A</forename>
				<surname>Weinberg</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<pubPlace>New York, NY, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b37">
	<analytic>
		<title level="a" type="main">Social evolution of spatial patterns in bacterial biofilms: when conflict drives disorder</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">B</forename>
				<surname>Xavier</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Am. Nat</title>
		<imprint>
			<biblScope unit="volume">174</biblScope>
			<biblScope unit="page" from="1" to="12" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>