
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:59+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genome analysis Bpipe: a tool for running and managing bioinformatics pipelines</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2012">2012</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Simon</forename>
								<forename type="middle">P</forename>
								<surname>Sadedin</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Murdoch Childrens Research Institute</orgName>
								<orgName type="institution" key="instit2">Royal Children&apos;s Hospital</orgName>
								<address>
									<addrLine>Flemington Road</addrLine>
									<postCode>3052</postCode>
									<settlement>Parkville</settlement>
									<region>Victoria</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Bernard</forename>
								<surname>Pope</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Murdoch Childrens Research Institute</orgName>
								<orgName type="institution" key="instit2">Royal Children&apos;s Hospital</orgName>
								<address>
									<addrLine>Flemington Road</addrLine>
									<postCode>3052</postCode>
									<settlement>Parkville</settlement>
									<region>Victoria</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Alicia</forename>
								<surname>Oshlack</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Murdoch Childrens Research Institute</orgName>
								<orgName type="institution" key="instit2">Royal Children&apos;s Hospital</orgName>
								<address>
									<addrLine>Flemington Road</addrLine>
									<postCode>3052</postCode>
									<settlement>Parkville</settlement>
									<region>Victoria</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Alex</forename>
								<surname>Bateman</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">Victorian Life Sciences Computation Initiative</orgName>
								<orgName type="institution">The University of Melbourne</orgName>
								<address>
									<postCode>3010</postCode>
									<settlement>Carlton</settlement>
									<region>Victoria</region>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genome analysis Bpipe: a tool for running and managing bioinformatics pipelines</title>
					</analytic>
					<monogr>
						<title level="j" type="main">BIOINFORMATICS APPLICATIONS NOTE</title>
						<imprint>
							<biblScope unit="volume">28</biblScope>
							<biblScope unit="issue">11</biblScope>
							<biblScope unit="page" from="1525" to="1526"/>
							<date type="published" when="2012">2012</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/bts167</idno>
					<note type="submission">Received on December 18, 2011; revised on March 28, 2012; accepted on April 2, 2012</note>
					<note>Copyedited by: B.S MANUSCRIPT CATEGORY: APPLICATIONS NOTE [07:40 7/5/2012 Bioinformatics-bts167.tex] Page: 1525 1525–1526 Associate Editor: Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Bpipe is a simple, dedicated programming language for defining and executing bioinformatics pipelines. It specializes in enabling users to turn existing pipelines based on shell scripts or command line tools into highly flexible, adaptable and maintainable workflows with a minimum of effort. Bpipe ensures that pipelines execute in a controlled and repeatable fashion and keeps audit trails and logs to ensure that experimental results are reproducible. Requiring only Java as a dependency, Bpipe is fully self-contained and cross-platform, making it very easy to adopt and deploy into existing environments. Availability and implementation: Bpipe is freely available from</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Bioinformatics is a rapidly expanding field in which the arrival of new technologies and tools, and the evolution of experimental techniques is a constant occurrence. Therefore, data analysis pipelines cannot be static and researchers are faced with a continual need to adapt, understand, experiment with and integrate new computational tools into their analyses. Such analyses are usually composed of a chain of tools that perform separate stages of the process. For example, calling variants from exome sequencing data typically involves several tasks such as aligning the raw data to the genome; removing duplicate reads; recalibrating quality scores; calling variants; and filtering variants. For each step, several alternative computation tools are available, but ultimately a tool for each step needs to be chosen and integrated into a complete pipeline to produce results of biological significance. Integration of such diverse computational tasks into a cohesive unit is approached in different ways. Where the expertise is available, scripting languages such as Perl or Python are frequently employed to create 'pipeline' scripts. At the other end of the spectrum, tools such as Galaxy (<ref type="bibr" target="#b0">Goecks et al., 2010</ref>) and Taverna (<ref type="bibr" target="#b3">Oinn et al., 2004</ref>) have emerged which offer many advantages in terms of ease of use and level of automation. Despite the advantages of other tools, some bioinformaticians still prefer to run jobs as shell scripts. Although this makes running them easy, it has many limitations. For example, when scripts fail before * To whom correspondence should be addressed. completion, it is often difficult to determine where or why they failed and even harder to restart from the point of failure. There is no automatic log of commands or capture of output. Failed jobs may leave half-created files that can be confused with completed files. Modifying the pipeline often requires changes in multiple places, meaning that a missed change can cause commands to fail, or use incorrect data. Bpipe tries to solve these problems while retaining much of the simplicity and syntax of a shell script.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BPIPE LANGUAGE</head><p>Bpipe is implemented in Groovy, a language that supports creation of Domain-Specific Languages for the Java Virtual Machine. While Bpipe retains the ability for advanced users to extend scripts using Java or Groovy, it does not require knowledge of either language to implement pipelines (see Supplementary Material). The key drivers behind the design of the Bpipe language are simplicity and concision, allowing expression of the pipeline behavior with very little syntactical overhead. There are two steps to creating a Bpipe pipeline. The first is to define the computational stages of the pipeline that perform the specific tasks, such as aligning sequencing reads to the genome. The second step is to then combine the tasks together into a pipeline. This achieves reusability of pipeline stages and easy modification of the pipeline sequence. The Bpipe syntax for defining stages is very similar to running a tool with the command line; the command is simply placed inside curly braces and executed using the keyword exec. For example, to define the stage of aligning sequencing reads to a genome using bwa (<ref type="bibr" target="#b2">Li et al., 2009</ref>), we would write:</p><formula>1 align_reads = { 2 exec " bwa aln –t 8 $input &gt; $output " 3 }</formula><p>The two variables, $input and $output, are provided implicitly by Bpipe and ensure that Bpipe can verify and track both the inputs and outputs of the stage. Next, once a set of stages have been defined, a pipeline can be joined together using a concise syntax that utilizes mathematical operators to symbolize pipeline construction:where each group will be processed in parallel by the align_reads and dedupe stages that follow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RUNNING A BPIPE PIPELINE</head><p>Bpipe scripts are executed by a simple command line tool called 'bpipe'. The tool can launch a pipeline, display status, stop a pipeline or retry a partially executed pipeline from the point of failure. It automatically captures all output and executed commands to log files while forwarding the output to the console for the user to see or leave running in the background as desired. Requiring only Java as a dependency, it can run in a user's local directory without any installation, making it especially easy to deploy into a new environment. In addition, Bpipe can interact with cluster resource management systems and includes built-in support for the TORQUE Resource Manager system (http://www.adaptivecomputing.com/ products/torque.php). We provide a generic interface to resource managers, making it easy to support other systems in the future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">APPLICATION DOMAIN</head><p>There are numerous existing tools for performing computational workflows offering differing degrees of automation and control. Some tools such as Galaxy and Taverna feature high levels of automation and support sophisticated graphical user interfaces. These tools are ideal for a broad range of practicing bioinformaticians as they are easy to use, built from well-established tools and protocols and allow easy access to a wide range of online data sources. Other tools, such as shell scripts, are mostly manual but offer complete control over how tasks execute. Bpipe and Ruffus (<ref type="bibr" target="#b1">Goodstadt, 2010</ref>), a pipeline construction toolkit based on Python, sit somewhere in the middle of this spectrum where there is some level of automation but also still a significant level of fine-grained control. While Bpipe has similar goals and features to Ruffus, it differs in several ways. Bpipe was created in response to a need to frequently run many variations of a pipeline with stages deleted, inserted, reordered or adjusted. Although Ruffus supports such activity, it was found to be challenging to implement because Ruffus does not explicitly model the joining of stages together as a language construct. Rather it combines the definition of pipeline stages and ordering by using Python annotations attached to each pipeline stage. In addition, Bpipe, through its support of shell variable syntax, enables the user to copy and paste a shell command they already use directly into their pipeline with little modification. Ruffus, however, usually needs commands to be converted to a Python-based syntax for variable substitution. Thus, although both tools can accomplish the same job, Bpipe is optimized for users who wish to execute shell commands as directly as possible and desire the ability to frequently modify or reorder them as their pipeline evolves. To illustrate how Bpipe eases pipeline modifications, the pipeline above could be trivially modified to remove the 'dedupe' stage by simply deleting it from line 5 as follows:</p><p>4 Bpipe.run { 5 align_reads + call_variants 6 } As the pipeline stages were not modified, both versions of the pipeline can be maintained simultaneously. By comparison, unless the user went to special efforts to enable it, a Ruffus script would require modifications to several places including the pipeline stages themselves and it would be harder to maintain both versions of the pipeline simultaneously. In summary, Bpipe contains attractive features to build and maintain bioinformatics pipelines including the following: @BULLET Simple definition of tasks—Bpipe runs shell commands almost as is.</p><p>@BULLET Transactional management of tasks—outputs of failed commands are cleaned up, log files saved and the pipeline cleanly aborted. @BULLET Automatic connection of stages—removing or adding new stages never breaks the flow of data.</p><p>@BULLET Easy restarting of jobs—when a job fails, Bpipe cleanly restarts from the point of failure.</p><p>@BULLET Audit trail—Bpipe keeps a journal of which commands were executed and all their inputs and outputs.</p></div>
			<note place="foot">© The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Goecks</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Biol</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page">86</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Ruffus: a lightweight Python library for computational pipelines</title>
		<author>
			<persName>
				<forename type="first">L</forename>
				<surname>Goodstadt</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="2778" to="2779" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Fast and accurate short read alignment with Burrows-Wheeler Transform</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="1754" to="1760" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Taverna: a tool for the composition and enactment of bioinformatics workflows</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Oinn</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="3045" to="3054" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>