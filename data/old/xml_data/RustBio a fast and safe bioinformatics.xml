
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:31+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Rust-Bio: a fast and safe bioinformatics library</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Johannes</forename>
								<surname>Kö</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Functional Cancer Epigenetics</orgName>
								<orgName type="department" key="dep2">Dana-Farber Cancer Institute</orgName>
								<orgName type="department" key="dep3">Department of Biostatistics and Computational Biology</orgName>
								<orgName type="department" key="dep4">Dana-Farber Cancer Institute</orgName>
								<orgName type="department" key="dep5">Department of Medical Oncology</orgName>
								<orgName type="department" key="dep6">Dana-Farber Cancer Institute</orgName>
								<orgName type="institution" key="instit1">Harvard School of Public Health</orgName>
								<orgName type="institution" key="instit2">Harvard Medical School</orgName>
								<address>
									<postCode>MA02215</postCode>
									<settlement>Boston</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Rust-Bio: a fast and safe bioinformatics library</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btv573</idno>
					<note type="submission">Received on June 20, 2015; revised on September 14, 2015; accepted on September 28, 2015</note>
					<note>Sequence analysis Associate Editor: John Hancock Availability and implementation: Rust-Bio is available open source under the MIT license at https:// rust-bio.github.io. Contact: koester@jimmy.harvard.edu Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We present Rust-Bio, the first general purpose bioinformatics library for the innovative Rust programming language. Rust-Bio leverages the unique combination of speed, memory safety and high-level syntax offered by Rust to provide a fast and safe set of bioinformatics algorithms and data structures with a focus on sequence analysis.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>With ever increasing amounts of experimental data being generated, their computational analysis becomes increasingly challenging. For novel or custom problems where carefully engineered highperformance standalone tools (like read mappers) are not yet available, general purpose bioinformatics libraries can help to minimize the coding effort. Bioinformatics libraries are published for many popular programming languages, e.g. SeqAn for Cþþ, Biopython, Bioperl and BioRuby (<ref type="bibr" target="#b2">Cock et al., 2009;</ref><ref type="bibr" target="#b3">Dö ring et al., 2008;</ref><ref type="bibr" target="#b7">Goto et al., 2010;</ref><ref type="bibr" target="#b18">Stajich et al., 2002</ref>). Choosing the programming language for a specific task usually entails a tradeoff between execution and development speed. Low-level system programming languages like C or Cþþ provide optimal performance at the cost of increased complexity. Higher level languages like Python or Perl provide a more concise syntax while leading to computational overhead introduced by online memory management (e.g. reference counting or garbage collection), type inference and not being compiled but interpreted during execution. Often, the combination of a high-level language with some carefully engineered implementations of a bioinformatics library is a good choice to quickly solve a problem with reasonable performance. However, the amounts of data the bioinformatics community is facing in the coming years and the need to handle nature's resources carefully implies that using a high-performance, compiled language is still beneficial for certain problems. Recently, Rust (http://www.rust-lang.org) has gained attention as a new programming language combining speed with memory safety and high-level syntactical features. Being compiled with LLVM (<ref type="bibr" target="#b11">Lattner and Adve, 2004</ref>), Rust has many advantages of low-level, system programming languages, such as speed and a small memory footprint. Supporting automatic type inference, its code is often less verbose than C or Cþþ code. With Rust, type inference happens at compile time, such that runtime overhead (appearing with scripting languages like Python) can be avoided. The key feature of Rust is a concept of ownership and borrowing of variables, that enables the compiler to automatically decide about lifetime of objects during compile time, making an online memory management superfluous without requiring manual freeing of resources. At the same time, this concept prevents common sources of errors with low-level languages like accessing invalid memory regions. Finally, the ownership concept enforces thread-safety, such that race conditions cannot occur. These features make Rust a promising solution to above tradeoff problem. In this work, we present Rust-Bio, the first general purpose bioinformatics library for the Rust programming language. Rust-Bio provides a high-level, fast and safe API for many state-of-the-art data structures and algorithms used in bioinformatics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Library</head><p>Rust-Bio is built with the following principles in mind. Where possible, iterators are returned. This allows to process streams of data with minimal memory footprint. On top, using the extensive set of iterator tools available in Rust, iterators can be, e.g. filtered,structure, we provide complexities in the documentation. Where more than one alternative is available, the documentation tries to highlight distinguishing use cases. So far, Rust-Bio is focused on algorithms and data structures for biological sequences. A central component of Rust-Bio are alphabets, which, e.g. allow to check in linear time whether a given sequence is a word over the alphabet, transform symbols to their lexicographical ranks and perform bit-encoding to save memory or iterate over q-grams. Rust-Bio can read and write common file formats like FASTA, FASTQ and BED. For SAM/BAM, CRAM and VCF/BCF support, it is complemented by Rust-HTSlib. Listing 1 Creating an FM-Index for a given sequence with an occurrence table sampling rate of 3. Here, the alphabet is used to provide guarantees for being able to limit memory usage during FMIndex construction. Afterward, we iterate over a FASTQ file, use the alphabet to validate read sequences and search for exact matches in the FM-Index. This example illustrates how to create a simple read mapper with Rust-Bio.Especially when considering sequencing data, many problems can be solved with a set of well-established data structures like suffix arrays (<ref type="bibr" target="#b13">Manber and Myers, 1990</ref>), the Burrows-Wheeler Transform (<ref type="bibr" target="#b1">Burrows and Wheeler, 1994</ref>), rank/select data structures (<ref type="bibr" target="#b9">Jacobson, 1988</ref>) and q-gram indices. In line with that, Rust-Bio implements induced sorting for suffix array construction (<ref type="bibr" target="#b16">Nong et al., 2009</ref>), the FM-Index (<ref type="bibr" target="#b4">Ferragina and Manzini, 2000</ref>) for pattern matching on top of the Burrows-Wheeler Transform, a practical variant of a rank/select data structure (<ref type="bibr">Gonzá lez et al., 2005</ref>) and a q-gram index for arbitrary alphabets and q 32. Further, Rust-Bio implements the FMD-Index (<ref type="bibr" target="#b12">Li, 2012</ref>), that allows to find supermaximal exact matches in DNA sequences and their reverse complements in linear time. Implementations for many classical pattern matching algorithms are provided, including the algorithm of Knuth, Morris and Pratt, Backward Nondeterministic DAWG Matching, Backward Oracle Matching, the algorithm of Horspool and the Shift-And algorithm (<ref type="bibr" target="#b0">Allauzen et al., 1999;</ref><ref type="bibr" target="#b6">Gonzalo Navarro, 1998;</ref><ref type="bibr" target="#b8">Horspool, 1980;</ref><ref type="bibr" target="#b10">Knuth et al., 1977;</ref><ref type="bibr" target="#b21">Wu and Manber, 1992</ref>). In the Supplementary Material, we compare the speed of these algorithms against the Cþþ-based Seqan, which is among the fastest bioinformatics libraries (<ref type="bibr">Dö ring et al., 2008</ref>). The benchmarks exemplify that the speed of Rust-Bio is comparable to that of Cþþ-based implementations. For approximate pattern matching, Ukkonen's dynamic programming-based algorithm (<ref type="bibr" target="#b20">Ukkonen, 1985</ref>) and Myer's bit-parallel algorithm (<ref type="bibr" target="#b14">Myers, 1999</ref>) are provided. Finally, Rust-Bio implements local, global and semi-global pairwise sequence alignment as variants of the Smith–Waterman and Needleman–Wunsch algorithms (<ref type="bibr" target="#b15">Needleman and Wunsch, 1970;</ref><ref type="bibr" target="#b17">Smith and Waterman, 1981</ref>). An example for using the Rust-Bio API can be seen in Listing 1.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>let alphabet ¼ alphabets::dna::iupac_alphabet(); let pos ¼ suffix_array(text); let bwt ¼ bwt(text, &amp;pos); let fmindex ¼ FMIndex::new(&amp;bwt, 3, &amp;alphabet); let reader ¼ fastq::Reader::from_file('reads.fastq'); for record in reader.records() { let seq ¼ record.seq(); if alphabet.is_word(seq) { let interval ¼ fmindex.backward_search(seq. iter()); let positions ¼ interval.occ(&amp;pos); } }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 444 Bioinformatics, 32(3), 2016, 444–446 doi: 10.1093/bioinformatics/btv573 Advance Access Publication Date: 6 October 2015 Applications Note modified, chained or combined in an easy way.</figDesc><table>If a language data 
type appears suitable, we avoid to enclose data into a custom object. 
This mimimizes memory usage and increases flexibility when han-
dling the data, e.g. biological sequences are represented as vectors or 
slices of bytes in ASCII encoding. This allows to use sequences with 
all algorithms and functions in, e.g. the Rust standard library that 
work with byte vectors or slices. Each implemented algorithm is 
automatically tested via continuous integration (https://travis-ci. 
org). For each algorithm and data </table></figure>

			<note place="foot">at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="3"> Conclusion Rust-Bio is a general purpose bioinformatics library. Building on the innovative Rust programming language, Rust-Bio combines memory safety with speed, complemented by rigorous continuous integration tests. So far, a wide set of algorithms and data structures for biological sequences is provided, ranging from index data structures to pattern matching and alignment, complemented by readers and writers for common file formats.</note>

			<note place="foot">Rust-Bio</note>

			<note place="foot">J.Kö ster at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We thank Christopher Schrö der and Peer Aramillo Irizar for code contributions as well as Sven Rahmann, Dominik Kopczynski, Tobias Marschall and Marcel Martin for their inspiring lecture notes 'Algorithms on Sequences'. Conflict of Interest: none declared.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Factor oracle: a new structure for pattern matching</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Allauzen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lect. Notes Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">1725</biblScope>
			<biblScope unit="page" from="1" to="16" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">A block-sorting lossless data compression algorithm</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Burrows</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Wheeler</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithm Data Compression</title>
		<imprint>
			<biblScope unit="issue">124</biblScope>
			<biblScope unit="page">18</biblScope>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Biopython: freely available python tools for computational molecular biology and bioinformatics</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">J A</forename>
				<surname>Cock</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="1422" to="1423" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Seqan an efficient, generic Cþþ library for sequence analysis</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Dö Ring</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page">11</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Opportunistic data structures with applications</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Ferragina</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Manzini</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 41st Annual Symposium on Foundations of Computer Science</title>
		<editor>Young,D.C.</editor>
		<meeting>the 41st Annual Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="390" to="398" />
		</imprint>
	</monogr>
	<note>Redondo. Beach</note>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Practical implementation of rank and select queries</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>González</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Poster Proceedings Volume of the 4th Workshop on Efficient and Experimental Algorithms (WEA05)</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="27" to="38" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">A bit-parallel approach to suffix automata: fast extended string matching</title>
		<author>
			<persName>
				<forename type="first">Gonzalo</forename>
				<surname>Navarro</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">R</forename>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th Annual Symposium on Combinatorial Pattern Matching</title>
		<editor>Farach-Colton,M.</editor>
		<meeting>the 9th Annual Symposium on Combinatorial Pattern Matching<address><addrLine>Piscataway, New Jersey</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="14" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">Bioruby: bioinformatics software for the ruby programming language</title>
		<author>
			<persName>
				<forename type="first">N</forename>
				<surname>Goto</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="2617" to="2626" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Practical fast searching in strings</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">N</forename>
				<surname>Horspool</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Softw. Pract. Exp</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="501" to="506" />
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<monogr>
		<title level="m" type="main">Succinct static data structures</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<forename type="middle">J</forename>
				<surname>Jacobson</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">Fast pattern matching in strings</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">E</forename>
				<surname>Knuth</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Comput</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="323" to="350" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">Llvm: A compilation framework for lifelong program analysis &amp; transformation</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Lattner</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Adve</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Code Generation and Optimization</title>
		<meeting><address><addrLine>San Jose</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="75" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">Exploring single-sample SNP and indel calling with whole-genome de novo assembly</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="1838" to="1844" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<analytic>
		<title level="a" type="main">Suffix arrays: a new method for on-line string searches</title>
		<author>
			<persName>
				<forename type="first">U</forename>
				<surname>Manber</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Myers</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="935" to="948" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<analytic>
		<title level="a" type="main">A fast bit-vector algorithm for approximate string matching based on dynamic programming</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Myers</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="page" from="395" to="415" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">A general method applicable to the search for similarities in the amino acid sequence of two proteins</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">B</forename>
				<surname>Needleman</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">C</forename>
				<forename type="middle">D</forename>
				<surname>Wunsch</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mol. Biol</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="443" to="453" />
			<date type="published" when="1970" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">Linear suffix array construction by almost pure inducedsorting</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Nong</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Data Compression Conference</title>
		<editor>Storer,J.A. and Marcellin,M.W.</editor>
		<meeting><address><addrLine>Snowbird, Utah</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="193" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<analytic>
		<title level="a" type="main">Identification of common molecular subsequences</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<forename type="middle">F</forename>
				<surname>Smith</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">S</forename>
				<surname>Waterman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mol. Biol</title>
		<imprint>
			<biblScope unit="volume">147</biblScope>
			<biblScope unit="page" from="195" to="197" />
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b18">
	<monogr>
		<title level="m" type="main">The bioperl toolkit: Perl modules for the life sciences</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">E</forename>
				<surname>Stajich</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="1611" to="1618" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b20">
	<analytic>
		<title level="a" type="main">Algorithms for approximate string matching</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Ukkonen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inform. Control</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="page" from="100" to="118" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b21">
	<analytic>
		<title level="a" type="main">Fast text searching: allowing errors</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Wu</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">U</forename>
				<surname>Manber</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page" from="83" to="91" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>