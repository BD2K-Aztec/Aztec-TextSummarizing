
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:53+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">LBIBCell: a cell-based simulation environment for morphogenetic problems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Simon</forename>
								<surname>Tanaka</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department for Biosystems Science and Engineering</orgName>
								<orgName type="institution">ETH Zurich</orgName>
								<address>
									<addrLine>Mattenstrasse 26</addrLine>
									<postCode>4058</postCode>
									<settlement>Basel</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Swiss Institute of Bioinformatics</orgName>
								<address>
									<settlement>Basel</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">David</forename>
								<surname>Sichau</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department for Biosystems Science and Engineering</orgName>
								<orgName type="institution">ETH Zurich</orgName>
								<address>
									<addrLine>Mattenstrasse 26</addrLine>
									<postCode>4058</postCode>
									<settlement>Basel</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Dagmar</forename>
								<surname>Iber</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department for Biosystems Science and Engineering</orgName>
								<orgName type="institution">ETH Zurich</orgName>
								<address>
									<addrLine>Mattenstrasse 26</addrLine>
									<postCode>4058</postCode>
									<settlement>Basel</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Swiss Institute of Bioinformatics</orgName>
								<address>
									<settlement>Basel</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">LBIBCell: a cell-based simulation environment for morphogenetic problems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btv147</idno>
					<note type="submission">Received on June 13, 2014; revised on March 2, 2015; accepted on March 10, 2015</note>
					<note>Systems biology *To whom correspondence should be addressed. Associate Editor: Robert Murphy Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: The simulation of morphogenetic problems requires the simultaneous and coupled simulation of signalling and tissue dynamics. A cellular resolution of the tissue domain is important to adequately describe the impact of cell-based events, such as cell division, cell–cell interactions and spatially restricted signalling events. A tightly coupled cell-based mechano-regulatory simulation tool is therefore required. Results: We developed an open-source software framework for morphogenetic problems. The environment offers core functionalities for the tissue and signalling models. In addition, the software offers great flexibility to add custom extensions and biologically motivated processes. Cells are represented as highly resolved, massless elastic polygons; the viscous properties of the tissue are modelled by a Newtonian fluid. The Immersed Boundary method is used to model the interaction between the viscous and elastic properties of the cells, thus extending on the IBCell model. The fluid and signalling processes are solved using the Lattice Boltzmann method. As application examples we simulate signalling-dependent tissue dynamics. Availability and implementation: The documentation and source code are available on http://tana-kas.bitbucket.org/lbibcell/index.html</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>During morphogenesis, tissue grows and self-organizes into complex functional units such as organs. The process is tightly controlled, both by signalling and by mechanical interactions. Long-range signalling interactions in the tissues can be mediated by diffusible substances, called morphogens, and by long-range cell processes (<ref type="bibr" target="#b25">Restrepo et al., 2014</ref>). The dynamics of the diffusible factors can typically be well described by systems of continuous reactionadvection-diffusion partial differential equations (PDEs). The appropriate tissue representation depends on the relevant time scale. For a homogeneous isotropic embryonic tissue, experiments show that the tissue is well approximated by a viscous fluid on long time scales (equilibration after 30 min to several hours) and by an elastic material on short time scales (seconds to minutes) (<ref type="bibr" target="#b8">Forgacs et al., 1998</ref>). However, biological control typically happens on a shorter time scale, and many cellular processes such as cell migration and adhesion, cell polarity, directed division, monolayer structures and differentiation cannot be cast into a continuous formulation in a straight-forward way. A number of cell-based simulation techniques at different scales and different level of detail have been developed to study these processes; here, we discuss main representatives for each category. The Cellular Potts model, introduced by<ref type="bibr" target="#b10">Graner and Glazier (1992)</ref>, is solved on a lattice, with each lattice point holding a generalized spin value denoting cell identity. Similar to the Ising model, Hamiltonian energy functions are formulated and minimized using a Metropolis algorithm. It has been applied to a multitude of problems and is implemented in the software CompuCell3D (<ref type="bibr" target="#b29">Swat et al., 2012</ref>).However, the correspondence between the biological problem and the Hamiltonian, the temperature and the time step is not always straightforward. The subcellular element model divides cells into subcellular elements, which are represented by computational particles. The elements interact via interacting potentials which are subject to modelling. The motion of the elements is governed by overdamped Langevin dynamics, such that the method is mesh-free. The framework was first introduced by Newman (2005) and later applied by<ref type="bibr">Sandersius et al. (2011a, b</ref>). This approach allows for detailed biophysical modelling, both in 2D and 3D. The spheroid model developed by<ref type="bibr" target="#b5">Drasdo et al. (2007)</ref>assumes that cells in unstructured cell populations are similar to colloidal particles. The cells are modelled as point particles, hosting interaction potentials. Their motions consist of a random and a directed movement. Neighbouring cells form adhesive bonds, which are represented using models borrowed from contact mechanics, such as e.g. the Johnson–Kendall–Roberts model (<ref type="bibr" target="#b4">Chu et al., 2005</ref>). Many cellular processes such as cell shape change, division, death, lysis, cell–cell interaction and migration have been successfully translated into the spheroid model (<ref type="bibr" target="#b5">Drasdo et al., 2007</ref>). Intra-and extracellular diffusion has not yet been introduced and implemented. The spheroid model extends efficiently to 3D, and it has been implemented in the open-source framework CellSys (<ref type="bibr" target="#b12">Hoehme and Drasdo, 2010</ref>). The vertex model uses polygons (or polyhedra in 3D) to represent cells in densely packed tissues, e.g. in Drosophila wing disc epithelia (<ref type="bibr" target="#b6">Farhadifar et al., 2007</ref>). For each vertex, forces are computed—either via a potential or directly. The vertices are moved subsequently according to overdamped equations of motion or via a Monte Carlo algorithm. The model is implemented in the opensource software Chaste (<ref type="bibr" target="#b21">Pitt-Francis et al., 2009</ref>). The viscoelastic cell model (also called IBCell models) presented in<ref type="bibr" target="#b24">Rejniak et al. (2004) and</ref><ref type="bibr" target="#b23">Rejniak (2007)</ref>uses the immersed boundary (IB) method (<ref type="bibr" target="#b20">Peskin, 2003</ref>) to represent individually deformable cells as immersed elastic bodies. The cytoplasm and the extracellular matrix and fluid are represented by a viscous incompressible fluid. In this framework, a vast amount of biological processes such as cell growth, cell division, apoptosis and polarization has been realized. The model was applied to study tumour and epithelial dynamics. Due to the high level of detail, the viscoelastic cell model is computationally expensive and has not yet been implemented in 3D. The software framework VirtualLeaf with explicit cell resolution, available in 2D, has been introduced in<ref type="bibr" target="#b17">Merks et al. (2011)</ref>. Although the cell representation is similar to vertex cell models, the dynamics is realized by minimizing a Hamiltonian using a Monte Carlo algorithm. The model assumes rigid cell walls, which is appropriate for plant morphogenesis. For many morphogenetic phenomena, which arise from a tight interaction between the biomolecular signalling and the tissue physics, an explicit computational representation of the cell shapes is required. Here, we present a flexible software framework based on the IBCell model, which, as a novelty, permits to tightly couple biomolecular signalling models to a cell-resolved, physical tissue model. The core components and the general approach of the model are described in the second section. In the third section, the software and the main functionalities are described in detail. Application examples are given in the fourth chapter to demonstrate the framework's capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Approach</head><p>Our approach permits the coupled simulation of tissue and signalling dynamics. To describe the tissue dynamics, the viscoelastic cell model needs to represent both the cellular structures and their elastic properties, as well as the viscous behaviour of the cytoplasm and of the extracellular space surrounding the cells. The model therefore rests on three core parts: the representation of cells, the representation of the fluid and the fluid-structure interaction, and the coupling of the tissue part to the signalling model. To describe the interaction between the viscous fluid and the elastic structures, which are immersed in the fluid, we use Immersed Boundary method (<ref type="bibr" target="#b20">Peskin, 2003</ref>) as previously implemented in the viscoelastic cell model, also called IBcell model (<ref type="bibr" target="#b24">Rejniak et al., 2004;</ref><ref type="bibr" target="#b23">Rejniak, 2007</ref>). To solve the viscous fluid behaviour, we use the Lattice Boltzmann method, which is an efficient mesoscopic numerical scheme, originally developed to solve fluid dynamics problems (<ref type="bibr" target="#b3">Chen and Doolen, 1998</ref>). The method has previously been successfully applied to reaction-diffusion equations, such as Turing systems (Ponce<ref type="bibr" target="#b22">Dawson et al., 1993</ref>), as well as to coupled scalar fields such as temperature (<ref type="bibr" target="#b11">Guo et al., 2002</ref>). The method was for the first time combined with the Immersed Boundary method (<ref type="bibr" target="#b20">Peskin, 2003</ref>) by Feng and Michaelides (2004), and has later been used to study red blood cells in flow by<ref type="bibr" target="#b32">Zhang et al. (2007)</ref>. In the following, we provide an overview of the implemented methods; the implementation details are given in Section 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Cell representation</head><p>Cells are represented as massless, purely elastic structures, which are described by sets of geometry points forming polygons. The geometry points are connected via forces. In a first approximation, the elastic structures can be identified to represent the elastic cell membranes. However, more elastic structures can be added to the intraand extracellular volume to mimic the viscoelastic properties of the cytoskeleton or the extracellular matrix. The user can implement biological mechanisms which operate on the cell representations. For example, a new junction to a neighbouring cell might be created when the distance between two neighbouring cell boundaries falls below a threshold distance. Similarly, a junction might be removed when overly stretched.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Fluid and fluid-structure interaction</head><p>The viscoelastic cell model represents the content of cells (the cytoplasm) as well as the extracellular space (the interstitial fluid and the extracellular matrix) as a viscous, Newtonian fluid. The intra-and extracellular fluids interact with the elastic membrane, i.e. the fluids exert force on the membrane, and the membrane exerts force on the fluids. Furthermore, the velocity field of the fluid, which is induced by the forces, moves and deforms the elastic structures. This interaction, well-known as fluid-structure interaction, lies at the heart of the tissue model. Forces (e.g. membrane tension or cell–cell forces) acting on these points are exerted on the fluid by distributing the force to the surrounding fluid. Due to the local forcing, the fluid moves. At this step, the membrane point is advected passively by the fluid. As a result the forces need to be re-evaluated on the points. By repeating the forcing-advection steps, the interaction is realized iteratively. As a result of this iterative process, the (elastic) structures are coupled to the (viscous) fluid. Depending on the parameterization, this model allows to describe either elastic, or viscous, or viscoelastic material behaviour. The upper part of<ref type="figure" target="#fig_0">Figure 1</ref>illustrates the Immersed Boundary interaction. The implemented Immersed Boundary kernel function has bounded support, i.e. each geometry point influences and is influenced only its immediate neighbourhood. Here, the dimension of the kernel function is four by four (cf.<ref type="figure" target="#fig_0">Fig. 1</ref>). The fluid equations are solved using the Lattice Boltzmann method (<ref type="bibr" target="#b3">Chen and Doolen, 1998</ref>), which is described in detail in the Supplementary material (Section 6). The Reynolds number is typically n1; hence, the regime is described by Stokes flow (The Reynolds number reads Re ¼ UL , with U being a characteristic velocity, L a characteristic length scale and the kinematic viscosity. Assuming L ¼ 10 À3 ½m; U ¼ 10 À8 ½m=s and ¼ 10 1. .. 10 2 ½m 2 =s, then Re ¼ 10 À13. .. 10 À12 can be estimated (<ref type="bibr" target="#b8">Forgacs et al., 1998</ref>)).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Signalling</head><p>The signalling network is represented as a system of reactionadvection-diffusion processes. The elastic membranes may act as no-flux boundaries for compounds which only exist in the extra-or intracellular volume, respectively. The reaction-advection-diffusion solvers can be equipped with potentially coupled reaction terms in order to model signalling interactions of diffusing factors. Depending on the model, the signalling may impact the tissue dynamics. This can be done, for instance, by making the mass source of the fluid dependent on the values of the reaction-advection-diffusion solvers such that the tissue expands locally (cf.<ref type="figure" target="#fig_0">Fig. 1</ref>). Furthermore, the diffusing compounds can be individually configured to diffuse freely across the entire domain, or only inside or outside the cells (e.g. using no-flux boundary conditions for the cell membranes).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Software</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Cell representation</head><p>The cell geometries consist of two elements, the GeometryNodes, which act as the IB points, and the Connections, connecting pairs of GeometryNodes. A simplified cell is visualized in<ref type="figure">Figure 2</ref>. The Connections are attributed with a domainID flag, which is an identifier for the surrounded domain (respecting the counterclockwise directionality convention). The domain identifier on the other side (on the right hand side) is zero by convention, representing the interstitial space. The domainID of the connections are copied to the fluid and reaction-advection-diffusion solvers. Moreover, the domainID's are associated with a cell type flag, cellType. By applying custom differentiation rules, the cellType of individual cells may be changed according to custom criteria; otherwise the all cells default to cellType ¼ 1 (with cellType ¼ 0 being the interstitial space, again). In this way, the reaction terms and the mass sources may be made dependent on specific cells or specific cell types.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">User-provided solvers</head><p>The user can add the following routines: MassSolverXX, CDESolverXX and BioSolverXX (XX being a name to be chosen). The MassSolverXX—as described earlier—adds or subtracts mass from/to the fluid solver. The CDESolverXX is used to implement the reaction terms of the signalling models. Finally, the</p><p>BioSolverXX can be used to execute biologically motivated operations on the geometry and the forces. Such an operation might be cell division, which is discussed in more detail in Section 3.5.4.<ref type="figure" target="#fig_1">Figure 3A</ref>summarizes the most important classes and their interactions. The classes which are subject to customization are shaded. In order to add a new customized routine (e.g. a mass modifying solver MassSolverXX, a reaction</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>advection-diffusion solver</head><p>CDESolverXX or a biologically motivated solver BioSolverXX),<ref type="figure">Fig. 2</ref>. Elements of the geometry representation. The cells are closed polygons, consisting of geometry nodes (discussed in the top part) and connections (shaded boxes in the top part) between each two geometry nodes. Each connection stores two references to its preceding and successive geometry nodes, and vice versa each geometry node stores two references to its preceding and successive connection (visualized by aggregation arrows in the top part). Directionality of the polygon is counter-clockwise by convention. Each geometry node has a unique, immutable nodeID attribute, which is allocated internally upon creation of a new geometry node. Each connection features a domainID attribute, which denotes the domain identifier of the domain on the left hand side. The domain identifier on the right hand side is by definition zero, representing the extracellular space. Using the domainID of the connections, the domainID of the lattice nodes is automatically set (lower part). Additionally, each domainID is associated with a cellType. The behaviour of the MassSolverXX, BioSolverXX and CDESolverXX can be made dependent on the domainID and/or cellType attributes by the userThe geometry X l; t ð Þ (top part, discussed in more detail in<ref type="figure">Fig. 2</ref>) is used to compute the forces F l; t ð Þ acting on each of the geometry nodes. These forces, which do not necessarily coincide with a lattice point, are scattered to the fluid lattice (middle part) using the IB method kernel function, F l; t ð Þ! f t ð Þ. After advancing the fluid solver by one time step, the velocity is interpolated to the geometry node position using the same kernel function, u x; t ð Þ!U l; t ð Þ. The geometry nodes are moved according to their velocity U l; t ð Þ, and the iteration is restarted. The velocity u x; t ð Þ of the fluid lattice is also copied to the reaction-advection-diffusion solvers (PDE), together with the position X l; t ð Þ!x t ð Þ of the geometry. The state of the reaction-advection-diffusion solvers, which are used to model signalling, may be used to compute mass sources S x; t ð Þfor the fluid solver the user needs to inherit from their respective virtual base classes (cf.<ref type="figure" target="#fig_1">Fig. 3B</ref>).<ref type="figure">Figure 4</ref>visualizes the routines, which are called iteratively by the SimulationRunner (cf.<ref type="figure" target="#fig_1">Fig. 3A</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Input and output</head><p>The communication to the user is achieved via the loading and dumping of configuration files. A general configuration file contains the global simulation parameters, such as the simulation time, the domain size, the fluid viscosity and the diffusion coefficients for the reaction-advection-diffusion solvers. The geometry points and the corresponding geometrical connections are stored in a geometry file. A third file contains the forces, including forces between a pair of geometry points, freely defined forces or spatially anchored points. The fluid and reaction-advection-diffusion solver states may be written either to .txt files or in .vtk format and can be postprocessed with third-party software (e.g. Matlab or ParaView). Optionally, the solver states can be saved in a loadable format to resume the simulation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Physical processes</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.1">Viscous and elastic behaviour</head><p>The viscous behaviour is implemented using a representation of an incompressible fluid (solved using the Lattice Boltzmann method, cf. Supplementary material), which converges to the Navier–Stokes equation in the hydrodynamic limit. The fluid is solved on a regular Cartesian and Eulerian grid. The membranes are represented by sets of points, which are connected to form closed polygons. A variety of forces may act on the membrane nodes, such as e.g. membrane tensions (cf. Section 3.4.3). The interaction between the fluid and the elastic structures is formulated using the Immersed Boundary method (cf. Supplementary material). The membrane points move according to the local fluid velocity field in a Lagrangian manner.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.2">Reaction-diffusion of biochemical compounds</head><p>The biochemical signalling can be described by sets of coupled reaction-diffusion PDEs. Similar to the fluid equations, these equations are solved on a regular Cartesian and Eulerian grid (solved using the Lattice Boltzmann method, cf. Supplementary material). The concentrations of the compounds can be accessed by other solvers, for example to make other processes such as cell division dependent on signalling factors. The cell boundaries can be chosen to be either invisible to the diffusing compounds or to be no-flux boundaries. To account for advection, the fluid velocity field is directly transferred from the fluid solver since the fluid and the reaction-diffusion lattices coincide spatially. The coupling of the solvers is visualized in<ref type="figure" target="#fig_0">Figure 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.3">Forces</head><p>Forces are an integral part of the simulation environment. A force is always connected to a membrane point. Any type of conservative force (which can be derived from a potential) can easily be implemented. Currently, the following types of forces are implemented: @BULLET spring force between two geometrical nodes @BULLET spring force between a geometrical node and a spatial anchor point @BULLET free force acting on a geometrical node @BULLET horizontally or vertically sliding force (thus enforcing only the y or x coordinate, respectively) @BULLET constant force between two geometrical nodesGeometryHandler has a collection of PhysicalNodes, representing the lattice, a collection of BoundaryNodes which are woven into the lattice, and a Geometry object. The latter contains the cell's geometric information, namely the GeometryNodes and the</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Connections. The GeometryNodes and the</head><p>Connections each have two references of the preceding and successive elements, as also explained in<ref type="figure">Figure 2</ref>. BioSolverXX obtains references from the GeometryHandler and the ForceSolver to alter states accordingly. Similarly, the MassSolverXX obtains a reference to the lattice and adds mass sources to the fluid. (B) To implement new custom routines, the user must inherit from provided base classes (from BioBaseSolver for biologically motivated routines, from BaseCDESolver for reaction-advection-diffusion processes, and from BaseMassSolver for mass modifying routines)<ref type="figure">Fig. 4</ref>. Iterative processing in the solver. At initiation, the library loads the user-provided configuration files (containing global simulation parameters, initial geometry, initial forces). During each iteration, the library's class SimulationRunner (cf.<ref type="figure" target="#fig_1">Fig. 3A</ref>) successively calls the physical routines (the Lattice Boltzmann method to solve the fluid and reaction-advection-diffusion processes, and the Immersed Boundary method to solve the fluid-structure interaction) and the biological routines (biologically motivated re-arrangement of the geometry, modifications of the forces, etc.). The current configuration and optionally the entire solver states can be saved at a chosen frequency</p><p>Application examples include constant forces between two geometrical nodes that can be used to model constant membrane tension, which leads to the minimization of a cells perimeter (discussed in Section 3.5.2). Moreover, a geometrical point can dynamically explore its local neighbourhood and establish a force to another geometrical point from another cell, thus, mimicking cell–cell junctions (discussed in Section 3.5.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Biological processes</head><p>The biological solvers (BioSolver) accommodate the functionalities that are related to biological processes. These processes may be mostly related to modifications of the forces and the geometry. The BioSolver has full access to the compound concentrations. Furthermore, it is aware of the cells, whose geometries are stored individually. This enables the BioSolver to compute cell areas and averaged or integrated compound concentrations. Because all cells are individually tagged, cell behaviour can be made dependent on cell identity. Additionally to the cell identity, cells also carry a cell type tag, which can be changed depending on run-time conditions. This latter functionality can be used to model cell differentiation. Consider a cell division event as an example. Here, a division plane has to be chosen. The choice of its position and direction is subject to the user's model: the cell division plane might be set perpendicular to the cell's axis of strongest elongation. Next, the cell has to be divided, which requires the removal of the corresponding geometrical connections, and the insertion of new geometrical nodes and connections to close the divided cells. Note that the concentration fields of the compounds, as well as the velocity-and pressure fields of the fluid solver are not directly altered in the biological module.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.1">Control of cell area</head><p>Depending on the biological model of the user, the cell area has to be controlled. By assuming that a cell might change its spatial extent in the third dimension, the area might shrink or expand as a response to forces exerted by its neighbouring cells, which can effectively be modelled as an 'area elasticity'. In the limiting case, the cell resists external forces, maintains its area and only reacts with changes of the hydrostatic pressure. In general, to control the area of cells, the reference area for each cell needs to be adapted. The reference area acts as a set point for a simple proportional controller, i.e. the local mass source S k in the cell k is proportional to the area difference between the current cell area A k t ð Þ and the set point area A 0 k :</p><formula>S k ¼ a A 0 k À A k t ð Þ À Á (1)</formula><p>where a is a proportional constant. More advanced control methods, such as e.g. proportional-integral control methods, can be realized easily. This approach of controlling the cell area can also be used to let cells grow or shrink in a controlled way, i.e. a cell differentiating into a hypertrophic cell type may grow in volume. Implementing this process would be as simple as setting the new target area as set point area. The area controller will bring the cell close to its new area.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.2">Membrane tension</head><p>The definition of forces acting between pairs of membrane points allows for simulating the cell's membrane tension. By default, a constant contracting force F i with magnitude u m is applied to every pair of neighbouring membrane points. Hence, the resulting force on membrane point i is composed of a force pointing to its preceding membrane point iÀ1, and a force pointing to its successive membrane point iþ1:</p><formula>F m i ¼ u m x iÀ1 À x i jx iÀ1 À x i j þ x iþ1 À x i jx iþ1 À x i j (2)</formula><p>This approach can be interpreted as an actively remodelled membrane: when stretched, new membrane is synthesized in order to not increase the membrane tension on longer time scales (hours). On the other hand, excessive membrane is degraded to abide the membrane tension. Therefore, the membrane tension minimizes the cell's perimeter. Because the intracellular fluid (and thus the cell area) is conserved in the absence of neighbouring cells and active mechanisms (c.f. Section 3.5.1), the cell assumes a circular shape. On short time scales (seconds), the passive (non-remodelled) elastic membranes can be modelled by using Hookean spring potentials. The membrane tension will then be proportional to deviation from the resting membrane perimeter. In both cases, the membrane is flexible (i.e. has no bending stiffness); if bending stiffness should be required by the user, this can be easily realized in a custom BioSolver. The implementation of membrane tension needs to consider the geometry remeshing. Whenever a new membrane point is inserted, it needs to get connected to its neighbours instantly, because the cell will be overly stretched in the absence of membrane tensions. A membrane point's forces need to be removed upon its removal. Algorithmically, this is realized by removing and reconstructing all membrane forces at every time step. At this point, the magnitude of the membrane tension can be made dependent on signalling factors.</p><p>BioSolverMembraneTension is an example of a class managing the membrane tensions with immediate remodeling, and BioSolverHookeanMembraneTension implements simple Hookean springs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.3">Cell junctions</head><p>A cell can create cell junctions to neighbouring cells. In the simplest case, each membrane point i uses the function getGeometry NodesWithinRadiusWithAvoidanceClosest to get the closest membrane point j of another cell, which is within a predefined cutoff radius l max , or zero if there is no such membrane point. Once a candidate membrane point fulfils the criteria, a new Hookean force F i with a spring constant k j and resting length l 0 is created:</p><formula>F cj i ¼ k j x j À x i jx j À x i j jx j À x i j À l 0 À Á if jx j À x i j &lt; l max 0 else 8 &lt; : (3)</formula><p>The cell junction forces are regularly (potentially not at every time step) deleted and renewed, where the frequency of cell junction renewal might reflect the cell junction synthesis rate. The function getGeometryNodesWithinRadiusWithAvoidance returns all membrane points of another cell, which are within a predefined cut-off radius; the returned list might be empty. This opens up the possibility to introduce randomness by choosing the membrane point randomly from the candidate list. The probability to create a junction might depend on the junction length: the shorter, the higher the probability to form a new junction. Also the removal of membrane points might be randomized, and the probability made dependent on the junction length, i.e. overly stretched junctions are removed with higher probability. Even the membrane point whose junctions shall be updated might be chosen randomly. Again, the number of updated membrane nodes per time reflects the cell's limited cell junction synthesis activity.</p><p>The membrane points are internally stored in a fast neighbour list data structure, which is well suited for spatial range queries. BioSolverCellJunction is an example of a class responsible for cell junctions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.4">Cell division</head><p>The cell division functionality requires several steps. First, criteria will have to be defined which cells shall be divided. Criteria might be maximal cell area, maximal spatial expansion or biochemical signals. Once a cell committed for division, the cell division plane will have to be chosen. Again, how to chose the plane is subject to biological modelling. A frequently used rule is to use a plane defined by a random direction vector and the center of mass of the cell. However, different rules can be readily implemented, such as random directions drawn from non-uniform probability distributions (which, in turn, can be controlled, e.g. by signalling factor gradients) or division planes perpendicular to the longest axis (<ref type="bibr" target="#b18">Minc et al., 2011</ref>). In a next step, the two membrane segments are determined which intersect with the division plane; this is implemented in getTwoConnections RandomDirection or getTwoConnectionsLongestAxis. These two membrane segments are subsequently removed, and two new membrane segments across the cell are introduced, leading to a cut through the mother cell. Finally, a new domain identity number has to be given to one of the daughter cells; the other daughter cell inherits the domain identity number from the mother cell. The new domain identity number is set to the largest domain identity number plus one, and it is automatically copied to the physical grid. Both daughter cells by default inherit the cell type flag from the mother cell, which is also automatically copied to the physical grid. The basic cell division functionality is implemented in the class BioSolverCellDivision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.5">Differentiation</head><p>Differentiation changes the cell type flag of the cells according to user-defined, biologically motivated rules. These rules might be based on the cell area, or on a signalling factor concentration, possibly integrated over the cell area. Once being committed for differentiation, the cell changes its cell type flag according to the rule. The new cell type flag will be automatically copied to the physical grid. The cell type flag can be used to make signalling dynamics, but also other biologically motivated processes dependent on the cell type. The association between the domain identifier flags and the cell type flags is stored in the cellTypeTrackerMap_, which is a member of the GeometryHandler. This makes sure that all</p><p>BioSolverXX classes have easy access to this information. A basic implementation of the differentiation control can be found in BioSolverDifferentiation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Accuracy and performance</head><p>The Lattice Boltzmann schemes are second order accurate, and the explicit Immersed Boundary method is first order accurate in space and time. The internal data structure uses a fast neighbour list (cell list) implementation to optimize for range queries (e.g. searching for other cells in the local neighbourhood), which exhibits a search complexity of O N ð Þ, with N being the number of membrane points to represent the cells. Many iterative computations (Lattice Boltzmann and Immersed Boundary routines such as particle streaming and collision, gathering of velocity and scattering of force) are parallelized using the shared memory paradigm. However, a few computational steps cannot be parallelized. This is typically the case when writeoperations occur on shared data structures, such as the data structures storing the geometry nodes and the force structs (e.g. in ForceSolver::delete ForceType() and GeometryHandler ::computeAreas()). Moreover, the geometry remeshing (refining and coarsening) functions as well as the data I/O are not parallelized, but are assumed to occur much less frequently than the actual fluid and reaction-advection-diffusion solvers. Therefore, since the fraction of sequential code is not negligible, the software should best be run on fast multi-core processors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7">Tools, dependencies and documentation</head><p>A compiler with Cþþ0x support (such as GCC 4.7 or higher) is required. The software depends on Boost (http://www.boost.org; 1.54.0 or higher), OpenMP, CMake (http://www.cmake.org) and vtk (http://www.vtk.org/; 5.8 or higher). The source code is extensively documented using Doxygen (http://www.stack.nl/dimitri/ doxygen). Git (http://git-scm.com) is used for version control. The software has only been tested on linux operating systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.8">Availability</head><p>The documentation and source code are available on http://tanakas. bitbucket.org/lbibcell/index.html.<ref type="figure">Figure 6A</ref>illustrates the interaction between a ligand L and its receptor R. Here, we assume that one ligand dimer molecule L binds to two receptors R, forming the complex R 2 L which induces upregulation of the receptor on the membrane (e.g.<ref type="bibr" target="#b1">Bellusci et al., 1997</ref>). Unbound receptor is turned over at a linear rate. The ligand can diffuse freely across the tissue and the entire domain, whereas the diffusion of the receptor is limited to a single cell's apical surface and is much slower. The dynamics can be formulated as a system of non-dimensional PDEs:</p><formula>@ t R ¼ DR þ c a À R þ R 2 L À Á (4) @ t L¼dDLþc bÀR 2 L À Á (5)</formula><p>where c is a reactivity constant, a and b production constants and d the relative diffusion coefficient of ligand and receptor. We note that the equations correspond to the classical Schnakenberg-type Turing mechanism (<ref type="bibr" target="#b9">Gierer and Meinhardt, 1972;</ref><ref type="bibr" target="#b28">Schnakenberg, 1979</ref>On a continuous domain, we obtain the well-known regular spot pattern (<ref type="figure">Fig. 6B</ref>). On an idealized static cellular domain an overall regular pattern with irregular internal structure (<ref type="figure">Fig. 6C</ref>) can be observed. Decreasing the simulation parameter c, which inversely controls the distance between the spots, leads to even more unexpected patterns: for c ¼ 100, the local regularity is completely lost (<ref type="figure">Fig. 6D</ref>). Finally, on a dynamically growing cellular domain, where the local proliferation rate was set proportional to the R 2 L signal, we obtain irregular patterns (<ref type="figure">Fig. 6E</ref>). For a lower value c ¼ 100, clusters of cells withThe signalling level (the spatially integrated concentration of the signalling molecule) drops in cells far away from the initial cell and differentiation into the green cell type occurs. The green cell type does not grow intrinsically, and only divides if overly stretched by external forces. (D) The highly proliferating red cells are trapped in the forming tissue due to the randomly chosen cell division axis. At t ¼ 5000, the expression of the differentiation inhibiting molecule I is switched off, which leads to the differentiation of the remaining red cells. (E) In the absence of high proliferation, the cells rearrange to maximize the perimeter/area ratio. Characteristic penta-and hexagonal cell shapes emerge (cf. Supplementary file S6.4). Cells close to the boundary try to take a circular shape<ref type="figure">Fig. 6</ref>. Turing patterning on growing cellular domains. (A) Turing instability can be achieved by Schnakenberg-type reactions, involving a slowly diffusing compound R, here interpreted as a receptor, and a fast diffusing compound L, here interpreted as a freely diffusing ligand. One ligand molecule binds to two receptors, leading to the complex R 2 L. The complex can be interpreted as a biological signal. (B) The model is solved on a continuous square lattice (using d ¼ 1, c ¼ 800, a ¼ 0.1, b ¼ 0.9), resulting in the classical regular spotpattern. The biological signal R 2 L is shown. (C) The same system as in B is solved on an idealized static cellular domain, i.e. the diffusion of the receptor R is restricted to a cell. The emerging biological signal R 2 L is now distributed irregularly. (D) The same system as in C, but with c ¼ 100, is solved on an idealized static cellular domain. Fewer cells show significant levels of signal R 2 L and no regular pattern can be found (salt-and-pepper pattern). (E) The same system as in C is solved on a growing cellular domain. The proliferation rate of a cell is set proportional to its signal R 2 L. The resulting pattern features regularity on a larger scale, but the local patterning significantly differs from the behaviour on continuous (B) and static cellular (C) domains. (F) The same system as in D is solved on growing cellular domain. The proliferation rate of a cell is set proportional to the local intensity of the signal R 2 L. Clusters of active cells with high levels of R 2 L emerge high R 2 L signalling levels emerge (<ref type="figure">Fig. 6F</ref>). In conclusion, even relatively simple signalling mechanisms can lead to significantly different results, depending on how the tissue is represented.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion</head><p>We developed an extendible and open-source cell-based simulation environment, which is tailored to study morphogenetic problems. The novel framework permits the coupled simulation of a physically motivated viscoelastic cell model with regulatory signalling models. Processes such as viscous dissipation, elasticity, advection, diffusion, local reactions, local mass sources and sinks, cell division and cell differentiation are implemented. By applying our framework to Turing signalling systems, we show that the signalling systems may behave differently on dynamic tissues than on simple continuous tissue representations. We therefore advocate to test continuous morphogenetic signalling models on dynamically growing cellular domains. The presented framework permits to study a variety of mechanoregulatory mechanisms. By making the cell division orientation dependent on signalling cues, the effect on the macroscopic tissue geometry may be studied. Cell migration can be modelled by introducing gradient-dependent forces on specific cell types. Cell sorting may be achieved by specifying multiple cell types with differential cell–cell junction strengths. The framework is specifically designed to study the mutual effects of signalling and biophysical cell properties. The viscoelastic cell model represents cell shapes at high resolution and is thus, unlike the vertex model, not restricted to densely packed tissues. Furthermore, hydrodynamic interaction, membrane tension and hydrostatic pressure are integral components of the model. The fact that a velocity field is available on the entire domain is a critical advantage to account for advection of the signalling components, thus allowing for a spatial description of intracellular concentrations. The model is, however, not easily extendable to the third dimension. Because a meshing of the surface will be required, the algorithmic and computational complexity are expected to be significant and subject to future work. The presented framework is, however, ideal to study intrinsically 2D morphogenetic problems, such as apical surface dynamics of epithelia as studied previously also by<ref type="bibr" target="#b6">Farhadifar et al. (2007)</ref>and Ishihara and Sugimura (2012) in 2D.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding</head><p>The authors acknowledge funding from the SNF Sinergia grant 'Developmental engineering of endochondral ossification from mesenchymal stem cells' and the SNF SystemsX RTD NeurostemX. Conflict of Interest: none declared.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig.1.</head><figDesc>Fig. 1. Algorithm overview. The algorithm consists of three coupled layers. The geometry X l; t ð Þ (top part, discussed in more detail in Fig. 2) is used to compute the forces F l; t ð Þ acting on each of the geometry nodes. These forces, which do not necessarily coincide with a lattice point, are scattered to the fluid lattice (middle part) using the IB method kernel function, F l; t ð Þ! f t ð Þ. After advancing the fluid solver by one time step, the velocity is interpolated to the geometry node position using the same kernel function, u x; t ð Þ!U l; t ð Þ. The geometry nodes are moved according to their velocity U l; t ð Þ, and the iteration is restarted. The velocity u x; t ð Þ of the fluid lattice is also copied to the reaction-advection-diffusion solvers (PDE), together with the position X l; t ð Þ!x t ð Þ of the geometry. The state of the reaction-advection-diffusion solvers, which are used to model signalling, may be used to compute mass sources S x; t ð Þfor the fluid solver</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig.3.</head><figDesc>Fig. 3. Simplified UML diagram of important classes. The classes which have to be provided by the user are shaded. XX refers to an arbitrary solver name. (A) The SimulationRunner controls the execution of the simulation. The</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig.5.</head><figDesc>Fig. 5. Cell division, differentiation and signalling. (A) The initial configuration consists of a single, circular cell of type red. The red cell type proliferates at a high rate. The initial cell is tagged and expresses a signalling molecule I which inhibits differentiation. (B) The first cell division occurs. The division axis is chosen randomly. The daughter cell inherits the cell type from the mother cell, but only the mother cell keeps expressing the signalling molecule I. (C) The signalling level (the spatially integrated concentration of the signalling molecule) drops in cells far away from the initial cell and differentiation into the green cell type occurs. The green cell type does not grow intrinsically, and only divides if overly stretched by external forces. (D) The highly proliferating red cells are trapped in the forming tissue due to the randomly chosen cell division axis. At t ¼ 5000, the expression of the differentiation inhibiting molecule I is switched off, which leads to the differentiation of the remaining red cells. (E) In the absence of high proliferation, the cells rearrange to maximize the perimeter/area ratio. Characteristic penta-and hexagonal cell shapes emerge (cf. Supplementary file S6.4). Cells close to the boundary try to take a circular shape</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 2340 Bioinformatics, 31(14), 2015, 2340–2347 doi: 10.1093/bioinformatics/btv147 Advance Access Publication Date: 13 March 2015 Original Paper</figDesc><table></table></figure>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">S.Tanaka et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="4"> Application examples 4.1 Cell division, differentiation and signalling To demonstrate the capabilities of the software, we first consider a tissue model with cell-type specific cell division and signalling-dependent differentiation (Fig. 5). In the beginning, a circular cell with radius R ¼ 10 is placed in the middle of a quadratic 400 by 400 domain (Fig. 5A). Iso-pressure boundary conditions are set at the border of the domain. The initial cell is of red cell type, which is proliferating at a high rate. When considering a single layer epithelium, mass uptake, which is needed for modelling cell growth and finally proliferation, is assumed to occur from the apical cavity through the apical membrane. Additionally, the initial cell secretes a signalling factor I which inhibits differentiation of the red cell type into the green cell type. Once the cell area doubled, the cell is divided in a random direction (cf. Fig. 5B). The daughter cells inherit the cell type, but only the mother cell continues to express the signalling molecule I. All cells of red type integrate the concentration of I over their area. For low signalling levels, the red cell type differentiates into the green cell type. The green cell type does not grow and only divides if external forces stretch the cell. In Figure 5C, the daughter cell&apos;s signalling level dropped after cell division, and differentiation occurred. After several rounds of cell division, a tissue starts to form (cf. Fig. 5D). The cells close to the secreting initial cell remain protected from differentiation, whereas more distant cells differentiate irreversibly. Due to the randomly chosen cell division axis, it might happen that the proliferating red cells get trapped (cf. Fig. 5E). The expression of I is switched off at time t ¼ 5000, thus leading to complete differentiation shortly after (cf. Fig. 5F). After proliferation stopped, the cells slowly rearrange because cell–cell junctions are broken if overly stretched, and new junctions are formed [according to Equation (3)]. At the boundary of the tissue, the cells try to reach a spherical shape, while in the middle mainly characteristic penta-and hexagonal shapes emerge (cf. Fig. 5F and Supplementary file S6.4). 4.2 Turing patterning on growing cellular domains To demonstrate the importance to investigate morphogenic signalling hypotheses on dynamically growing domains with cellular resolution, we solved a reaction-diffusion system, featuring the well-known diffusion-driven Turing instability (Turing, 1952), on a proliferating tissue. A cell-based simulation environment for morphogenetic problems</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Digit patterning during limb development as a result of the BMP-receptor interaction</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Badugu</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sci. Rep</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page">991</biblScope>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Involvement of sonic hedgehog (Shh) in mouse embryonic lung growth and morphogenesis</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Bellusci</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Development</title>
		<imprint>
			<biblScope unit="volume">124</biblScope>
			<biblScope unit="page" from="53" to="63" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Simulations demonstrate a simple network to be sufficient to control branch point selection, smooth muscle and vasculature formation during lung branching morphogenesis</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Cellière</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biol. Open</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="775" to="788" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Lattice Boltzmann methods for fluid flows</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Chen</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<forename type="middle">D</forename>
				<surname>Doolen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annu. Rev. Fluid Mech</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="329" to="364" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Johnson-Kendall-Roberts theory applied to living cells</title>
		<author>
			<persName>
				<forename type="first">Y.-S</forename>
				<surname>Chu</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Rev. Lett</title>
		<imprint>
			<biblScope unit="volume">94</biblScope>
			<biblScope unit="page">28102</biblScope>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">On the role of physics in the growth and pattern formation of multi-cellular systems: what can we learn from individual-cell Based Models?</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Drasdo</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Stat. Phys</title>
		<imprint>
			<biblScope unit="volume">128</biblScope>
			<biblScope unit="page" from="287" to="345" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">The influence of cell mechanics, cell-cell interactions, and proliferation on epithelial packing</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Farhadifar</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Curr. Biol</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="2095" to="2104" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">The immersed boundary-lattice Boltzmann method for solving fluid particles interaction problems</title>
		<author>
			<persName>
				<forename type="first">Z.-G</forename>
				<surname>Feng</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<forename type="middle">E</forename>
				<surname>Michaelides</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Phys</title>
		<imprint>
			<biblScope unit="volume">195</biblScope>
			<biblScope unit="page" from="602" to="628" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Viscoelastic properties of living embryonic tissues: a quantitative study</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Forgacs</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biophys. J</title>
		<imprint>
			<biblScope unit="volume">74</biblScope>
			<biblScope unit="page" from="2227" to="2234" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">A theory of biological pattern formation</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Gierer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Meinhardt</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Kybernetik</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="30" to="39" />
			<date type="published" when="1972" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">Simulation of biological cell sorting using a two-dimensional extended Potts model</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Graner</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Glazier</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Rev. Lett</title>
		<imprint>
			<biblScope unit="volume">69</biblScope>
			<biblScope unit="page" from="2013" to="2016" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">A coupled lattice BGK model for the Boussinesq equations</title>
		<author>
			<persName>
				<forename type="first">Z</forename>
				<surname>Guo</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Numer. Methods Fluids</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="325" to="342" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">A cell-based simulation software for multicellular systems</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Hoehme</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Drasdo</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="2641" to="2642" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<analytic>
		<title level="a" type="main">Bayesian inference of force dynamics during morphogenesis</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Ishihara</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Sugimura</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">313</biblScope>
			<biblScope unit="page" from="201" to="211" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<analytic>
		<title level="a" type="main">Kidney branching morphogenesis under the control of a ligand-receptor-based Turing mechanism</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Menshykau</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Iber</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Biol</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page">46003</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">Branch mode selection during early lung development</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Menshykau</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS Comput. Biol</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">1002377</biblScope>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">An interplay of geometry and signaling enables robust lung branching morphogenesis</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Menshykau</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Development</title>
		<imprint>
			<biblScope unit="volume">141</biblScope>
			<biblScope unit="page" from="4526" to="4536" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<analytic>
		<title level="a" type="main">VirtualLeaf: an open-source framework for cellbased modeling of plant tissue growth and development</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">M H</forename>
				<surname>Merks</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Plant Physiol</title>
		<imprint>
			<biblScope unit="volume">155</biblScope>
			<biblScope unit="page" from="656" to="666" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b18">
	<analytic>
		<title level="a" type="main">Influence of cell geometry on division-plane positioning</title>
		<author>
			<persName>
				<forename type="first">N</forename>
				<surname>Minc</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cell</title>
		<imprint>
			<biblScope unit="volume">144</biblScope>
			<biblScope unit="page" from="414" to="426" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<analytic>
		<title level="a" type="main">Modeling Multicellular Systems Using Subcellular Elements</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<forename type="middle">J</forename>
				<surname>Newman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math. Biosci. Eng</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="613" to="624" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b20">
	<analytic>
		<title level="a" type="main">The immersed boundary method</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<forename type="middle">S</forename>
				<surname>Peskin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Numerica</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="479" to="517" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b21">
	<analytic>
		<title level="a" type="main">Chaste: a test-driven approach to software development for biological modelling</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Pitt-Francis</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Phys. Commun</title>
		<imprint>
			<biblScope unit="volume">180</biblScope>
			<biblScope unit="page" from="2452" to="2471" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b22">
	<analytic>
		<title level="a" type="main">Lattice Boltzmann computations for reactiondiffusion equations</title>
		<author>
			<persName>
				<forename type="first">Ponce</forename>
				<surname>Dawson</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Chem. Phys</title>
		<imprint>
			<biblScope unit="volume">98</biblScope>
			<biblScope unit="page">1514</biblScope>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b23">
	<analytic>
		<title level="a" type="main">An immersed boundary framework for modelling the growth of individual cells: an application to the early tumour development</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<forename type="middle">A</forename>
				<surname>Rejniak</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">247</biblScope>
			<biblScope unit="page" from="186" to="204" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b24">
	<analytic>
		<title level="a" type="main">A computational model of the mechanics of growth of the villous trophoblast bilayer</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<forename type="middle">A</forename>
				<surname>Rejniak</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bull. Math. Biol</title>
		<imprint>
			<biblScope unit="volume">66</biblScope>
			<biblScope unit="page" from="199" to="232" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b25">
	<analytic>
		<title level="a" type="main">Coordination of patterning and growth by the morphogen DPP</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Restrepo</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Curr. Biol</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="245" to="255" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b26">
	<analytic>
		<title level="a" type="main">A&apos;chemotactic dipole&apos; mechanism for large-scale vortex motion during primitive streak formation in the chick embryo</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">A</forename>
				<surname>Sandersius</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Biol</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">45008</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b27">
	<analytic>
		<title level="a" type="main">Emergent cell and tissue dynamics from subcellular modeling of active biomechanical processes</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">A</forename>
				<surname>Sandersius</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Biol</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">45007</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b28">
	<analytic>
		<title level="a" type="main">Simple chemical reaction systems with limit cycle behaviour</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Schnakenberg</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">81</biblScope>
			<biblScope unit="page" from="389" to="400" />
			<date type="published" when="1979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b29">
	<analytic>
		<title level="a" type="main">Multi-Scale Modeling of Tissues Using CompuCell3D</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">H</forename>
				<surname>Swat</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Methods Cell Biol</title>
		<imprint>
			<biblScope unit="page" from="325" to="366" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b30">
	<analytic>
		<title level="a" type="main">Inter-dependent tissue growth and Turing patterning in a model for long bone development</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Tanaka</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Iber</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Biol</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page">56009</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b31">
	<analytic>
		<title level="a" type="main">The chemical basis of morphogenesis</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">M</forename>
				<surname>Turing</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phil. Trans. R. Soc. B Biol. Sci</title>
		<imprint>
			<biblScope unit="volume">237</biblScope>
			<biblScope unit="page" from="37" to="72" />
			<date type="published" when="1952" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b32">
	<analytic>
		<title level="a" type="main">An immersed boundary lattice Boltzmann approach to simulate deformable liquid capsules and its application to microscopic blood flows</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Zhang</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Biol</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="285" to="295" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>