
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:47+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genome analysis Pybedtools: a flexible Python library for manipulating genomic datasets and annotations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2011">2011</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName>
								<forename type="first">Ryan</forename>
								<forename type="middle">K</forename>
								<surname>Dale</surname>
							</persName>
							<email>dalerr@niddk.nih.gov</email>
							<affiliation key="aff0">
								<orgName type="department">National Institute of Diabetes and Digestive and Kidney Diseases</orgName>
								<orgName type="laboratory">Laboratory of Cellular and Developmental Biology</orgName>
								<orgName type="institution">National Institutes of Health</orgName>
								<address>
									<postCode>20892</postCode>
									<settlement>Bethesda</settlement>
									<region>MD</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Brent</forename>
								<forename type="middle">S</forename>
								<surname>Pedersen</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Medicine</orgName>
								<orgName type="institution">University of Colorado</orgName>
								<address>
									<settlement>Denver</settlement>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="institution">Anschutz Medical Campus</orgName>
								<address>
									<postCode>80045</postCode>
									<settlement>Aurora</settlement>
									<region>CO</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Aaron</forename>
								<forename type="middle">R</forename>
								<surname>Quinlan</surname>
							</persName>
							<affiliation key="aff3">
								<orgName type="department" key="dep1">Department of Public Health Sciences</orgName>
								<orgName type="department" key="dep2">Center for Public Health Genomics</orgName>
								<orgName type="institution">University of Virginia</orgName>
								<address>
									<postCode>22908</postCode>
									<settlement>Charlottesville</settlement>
									<region>VA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genome analysis Pybedtools: a flexible Python library for manipulating genomic datasets and annotations</title>
					</analytic>
					<monogr>
						<title level="j" type="main">BIOINFORMATICS APPLICATIONS NOTE</title>
						<imprint>
							<biblScope unit="volume">27</biblScope>
							<biblScope unit="issue">24</biblScope>
							<biblScope unit="page" from="3423" to="3424"/>
							<date type="published" when="2011">2011</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btr539</idno>
					<note type="submission">Received on July 15, 2011; revised on September 12, 2011; accepted on September 20, 2011</note>
					<note>[15:43 15/11/2011 Bioinformatics-btr539.tex] Page: 3423 3423–3424 Associate Editor: John Quackenbush Supplementary Information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>pybedtools is a flexible Python software library for manipulating and exploring genomic datasets in many common formats. It provides an intuitive Python interface that extends upon the popular BEDTools genome arithmetic tools. The library is well documented and efficient, and allows researchers to quickly develop simple, yet powerful scripts that enable complex genomic analyses. Availability: pybedtools is maintained under the GPL license. Stable versions of pybedtools as well as documentation are available on the Python Package Index at http://pypi.python.org/pypi/pybedtools. Contact:</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Due to advances in DNA sequencing technologies, genomic datasets are rapidly expanding in size and complexity (<ref type="bibr" target="#b8">Stein, 2010</ref>). It is now clear that the primary bottleneck in genomics is data analysis and interpretation, not data generation. Therefore, researchers depend upon fast, flexible 'genome arithmetic' tools for interrogating and comparing diverse datasets of genome features. For example, genome arithmetic is used to interpret results from whole-genome sequencing, ChIP-seq and RNA-seq experiments by integrating experimental datasets with genes, genetic variation and the wealth of existing genome annotations (1000 Genomes Project<ref type="bibr" target="#b0">Consortium et al., 2010;</ref><ref type="bibr" target="#b2">ENCODE Project Consortium et al., 2011</ref>). These analyses are complicated by the fact that they are often done via custom scripts or one-off manipulations that are inefficient and difficult to reproduce and maintain. Tools designed to manipulate, intersect and annotate these datasets in commonly-used formats greatly facilitate such analyses and provide a consistent framework for reproducible research. Here we introduce pybedtools, which extends the BEDTools (<ref type="bibr" target="#b7">Quinlan and Hall, 2010</ref>) genome arithmetic utilities by providing a powerful interface combining the benefits of Python scripting and the BEDTools libraries. Using a simple syntax, it allows researchers to analyze datasets in BED (<ref type="bibr" target="#b5">Kent et al., 2002</ref>), VCF (<ref type="bibr">Danacek et al., *</ref>To whom correspondence should be addressed.</p><p>2011), GFF, BEDGRAPH (<ref type="bibr" target="#b5">Kent et al., 2002</ref>) and SAM/BAM (<ref type="bibr" target="#b6">Li et al., 2009</ref>) formats without the need for format conversion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">APPLICATION</head><p>The pybedtools package employs a syntax that is intuitive to Python programmers. For example, given an annotation file of genes, hg19.gff, and a file containing relevant genetic variation, snps.bed, one can identify genes that contain SNPs with the following:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>from pybedtools import BedTool</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R.K.Dale et al.</head><p>genes = BedTool('hg19.gff') snps = BedTool('snps.bed') genes_with_snps = genes.intersect(snps)</p><p>At this point, one can easily examine the genes that overlap SNPs: for g in genes_with_snps: print g.chrom, g.start, g.end, len(g) or filter the results with simple boolean functions: def chrom_filt(g): return g.chrom == 'chr21' subset = genes_with_snps.filter(chrom_filt)</p><p>The underlying BEDTools commands send their results to 'standard output'. To assist in managing intermediate files, pybedtools automatically saves these results as temporary files that are deleted when Python exits. Results can be explicitly saved with the saveas() method: subset = subset.saveas('chr21-genes-snps.gff')</p><p>Given a FASTA file of the genome, hg19.fa, sequences for this subset of genes can be retrieved and saved with:</p><p>subset.sequence('hg19.fa').\ save_seqs('chr21-genes-snps.fa') One of the more powerful extensions provided by the pybedtools interface is the ability to mix file operations with feature operations in a way that makes otherwise difficult tasks very accessible with minimal code. For example, the following identifies the closest gene (within 5 kb) to each intergenic SNP: intergenic_snps = (snps-genes) nearby = genes.closest(intergenic_snps, d=True, stream=True) for gene in nearby: if int(gene<ref type="bibr">[-1]</ref>) &lt; 5000: print gene.name</p><p>This example illustrates several powerful features of pybedtools that confer additional functionality and greatly simplify analyses as compared with the BEDTools command line utilities (see Supplementary Material for an analogous experiment with BEDTools). For example, set subtraction between BedTools is used to extract features that are unique to one file (snps-genes). Similarly, one may also use the addition operator to identify features in the first file that overlap features in multiple datasets (e.g. snps + novel_snps + genes). Moreover, there is essentially no limit to the number of files that can be compared with the + and − operators. Arguments sent to BedTool objects are passed to BEDTools programs. The argument d=True tells the BEDTools closestBed program to append the distance (in base pairs) between each SNP and the closest gene to the end of each line, equivalent to the-d argument typically given on the command line. Additionally, the argument stream=True indicates that the resulting BedTool object will stream results as a Python iterable of Interval objects instead of saving the results to a temporary file. This saves disk space and reduces file operations when performing many operations on large files. Also note the indexing of the Interval object gene via<ref type="bibr">[-1]</ref>. This retrieves the last item on the line, which, because of the d=True argument, represents the distance in base pairs between each SNP and gene. All elements of a line can be accessed from an Interval object by their integer index, and core attributes by their name. Finally, although nearby represents results that are a composite of GFF and BED features (i.e. genes and snps), the operation that produced nearby was driven by the gene GFF file. Therefore gene.name is seamlessly extracted from the GFF 'attributes' field. Pybedtools also allows one to integrate sequence alignments in the widely used SAM/BAM format into their analyses. The following example illustrates how one would use pybedtools to identify sequence alignments that overlap coding exons. reads = BedTool('reads.bam') exons = BedTool('exons.bed') exonic = reads.intersect(exons)</p><p>Alternatively, this analysis could be reduced to the following statement: exonic = BedTool('reads.bam').intersect('exons.bed') Some BEDTools programs require files containing chromosome sizes. Pybedtools handles these automatically with the genome keyword argument to methods that wrap such programs. For example, the following command creates a bedGraph file of read coverage for the hg19 assembly: bedgraph = reads.genome_coverage(genome='hg19', bg=True)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">CONCLUSION</head><p>The pybedtools package provides a convenient and flexible interface to both the BEDTools command-line tools and efficient functions in the BEDTools C++ libraries. Pybedtools simplifies complicated analyses by extending the functionality in BEDTools and by providing, to our knowledge, the first Python library offering a common interface for manipulating datasets in diverse formats. Other new functionality includes: set operations on multiple datasets using a simple, intuitive syntax, the ability to filter features and select specific columns or attributes, a unified interface to common attributes (e.g. chromosome, start, end, name and strand) from many file formats, and a documented command history. Pybedtools provides researchers with a simple and efficient interface for exploring complex genomics datasets in widely used formats.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding: Intramural Program of the National Institute of Diabetes and Digestive and Kidney Diseases.</head><p>Conflict of Interest: none declared.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>©</head><figDesc>The Author(s) 2011. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/3.0), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><figDesc>[15:43 15/11/2011 Bioinformatics-btr539.tex] Page: 3424 3423–3424</figDesc></figure>

			<note place="foot" n="2"> APPROACH The pybedtools library allows one to manipulate datasets at both the file and individual feature level using the BedTool and Interval classes, respectively. It integrates high-level BEDTools programs through the Python subprocess module, and lower level BEDTools functionality by exposing a subset of BEDTools&apos; libraries. At the core of pybedtools is the BedTool class. Typically, a BedTool is initially created with a file name. BEDTools programs are then accessed as methods of BedTool objects (e.g. BedTool.intersect for the BEDTools program intersectBed) with arguments identical to the user&apos;s installed version of BEDTools. However, in addition to passing filenames as in typical BEDTools command line usage, one may also pass collections of Interval objects which can be manipulated in Python on a feature-by-feature basis. Furthermore, BedTool methods return new BedTool instances, allowing users to chain many operations together in a fashion similar to the UNIX command line. The pybedtools package provides a standardized interface to individual features in diverse genomics datasets, thus allowing one to iterate through datasets while accessing chromosome, start and stop coordinates with identical syntax, regardless of the underlying file format. This abstraction is made possible via Cython (http://cython.org, last accessed Aug 2011) which exposes the BEDTools file manipulation, feature parsing and overlap detection functions. In terms of speed and memory efficiency, pybedtools therefore compares favorably with Galaxy&apos;s (Giardine et al., 2005) bx-python, Kent source (Kent et al., 2002) and the original BEDTools software (Supplementary Fig. 1). Formats with different coordinate systems (e.g. BED vs GFF) are handled with uniform, well-defined semantics described in the documentation. Additional features and example scripts illustrating the library&apos;s functionality are in the documentation at http://packages.python.org/pybedtools.</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="3424"> at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">A map of human genome variation from population-scale sequencing</title>
		<author>
			<persName>
				<forename type="first">Consortium</forename>
				<surname>Genomes Project</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">467</biblScope>
			<biblScope unit="page" from="1061" to="1073" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">The Variant Call Format and VCFTools</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Danacek</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="2156" to="2158" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">A user&apos;s guide to the encyclopedia of DNA elements (ENCODE)</title>
		<author>
			<persName>
				<surname>Encode Project</surname>
			</persName>
		</author>
		<author>
			<persName>
				<surname>Consortium</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS Biol</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page">1001046</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<monogr>
		<title level="m" type="main">Galaxy: a platform for interactive large-scale genome analysis</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Giardine</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="1451" to="1455" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">The human genome browser at UCSC</title>
		<author>
			<persName>
				<forename type="first">W</forename>
				<surname>Kent</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="996" to="1106" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">The Sequence Alignment/Map format and SAMtools</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="page">25</biblScope>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">BEDTools: a flexible suite of utilities for comparing genomic features</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Quinlan</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">I</forename>
				<surname>Hall</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="841" to="842" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">The case for cloud computing in genome informatics</title>
		<author>
			<persName>
				<forename type="first">L</forename>
				<surname>Stein</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Biol</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page">207</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>