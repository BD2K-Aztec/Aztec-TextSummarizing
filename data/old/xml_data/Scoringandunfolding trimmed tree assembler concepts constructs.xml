
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:44+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genome analysis Scoring-and-unfolding trimmed tree assembler: concepts, constructs and comparisons</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2011">2011</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Giuseppe</forename>
								<surname>Narzisi</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Courant Institute of Mathematical Sciences</orgName>
								<orgName type="institution" key="instit2">New York University</orgName>
								<address>
									<addrLine>251 Mercer Street</addrLine>
									<postCode>10012</postCode>
									<settlement>New York</settlement>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Bud</forename>
								<surname>Mishra</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Courant Institute of Mathematical Sciences</orgName>
								<orgName type="institution" key="instit2">New York University</orgName>
								<address>
									<addrLine>251 Mercer Street</addrLine>
									<postCode>10012</postCode>
									<settlement>New York</settlement>
									<region>NY</region>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">NYU School of Medicine</orgName>
								<address>
									<addrLine>550 First Avenue</addrLine>
									<postCode>10016</postCode>
									<settlement>New York</settlement>
									<region>NY</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genome analysis Scoring-and-unfolding trimmed tree assembler: concepts, constructs and comparisons</title>
					</analytic>
					<monogr>
						<title level="j" type="main">BIOINFORMATICS ORIGINAL PAPER</title>
						<imprint>
							<biblScope unit="volume">27</biblScope>
							<biblScope unit="issue">2</biblScope>
							<biblScope unit="page" from="153" to="160"/>
							<date type="published" when="2011">2011</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btq646</idno>
					<note type="submission">Received on July 28, 2010; revised on October 19, 2010; accepted on November 13, 2010</note>
					<note>[15:50 16/12/2010 Bioinformatics-btq646.tex] Page: 153 153–160 Associate Editor: Joaquin Dopazo Availability and Implementation: SUTTA&apos;s binaries are freely available to non-profit institutions for research and educational purposes at http://www.bioinformatics.nyu.edu. Contact: narzisi@nyu.edu Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Mired by its connection to a well-known N P-complete combinatorial optimization problem—namely, the Shortest Common Superstring Problem (SCSP)—historically, the whole-genome sequence assembly (WGSA) problem has been assumed to be amenable only to greedy and heuristic methods. By placing efficiency as their first priority, these methods opted to rely only on local searches, and are thus inherently approximate, ambiguous or error prone, especially, for genomes with complex structures. Furthermore, since choice of the best heuristics depended critically on the properties of (e.g. errors in) the input data and the available long range information, these approaches hindered designing an error free WGSA pipeline. Results: We dispense with the idea of limiting the solutions to just the approximated ones, and instead favor an approach that could potentially lead to an exhaustive (exponential-time) search of all possible layouts. Its computational complexity thus must be tamed through a constrained search (Branch-and-Bound) and quick identification and pruning of implausible overlays. For his purpose, such a method necessarily relies on a set of score functions (oracles) that can combine different structural properties (e.g. transitivity, coverage, physical maps, etc.). We give a detailed description of this novel assembly framework, referred to as Scoring-and-Unfolding Trimmed Tree Assembler (SUTTA), and present experimental results on several bacterial genomes using next-generation sequencing technology data. We also report experimental evidence that the assembly quality strongly depends on the choice of the minimum overlap parameter k.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Since the pioneering work of Frederick Sanger in 1975, when he developed the basic DNA sequencing technology, Sanger chemistry has continued to be employed widely (<ref type="bibr" target="#b15">Sanger et al., 1977</ref>) in * To whom correspondence should be addressed. practically all large-scale genome projects. However, whole-genome sequence assembly (WGSA) pipelines in these projects have usually resorted to the shotgun sequencing strategy in order to reconstruct a genome sequence, despite the limitation that Sanger chemistry could only generate moderate-sized reads (around 1000 bp) with no location information. While many recent advances in sequencing technology has yielded higher throughput and lower cost, the limitations imposed by the read lengths (ranging between 35 and 500 bp) still plague the genomics science, forcing it to work with draft-quality, unfinished, genotypic and misassembled genomic data. The problem is, however, complicated by the presence of haplotypic ambiguities, base-calling errors and repetitive genomic sections. Recall that to obtain the input read data, the DNA polymer is first sheared into a large number of small fragments; and then either the entire fragment or just its ends are sequenced. The resulting sequences are then combined into a consensus sequence using a computer program: DNA sequence assembler. It is desired that the consensus has as small a base-level discrepancy with respect to the original DNA polymer as possible. Researchers first approximated the shotgun sequence assembly problem as one of finding the shortest common superstring of a set of sequences (<ref type="bibr" target="#b20">Tarhio and Ukkonen, 1988</ref>). Although this was an elegant theoretical abstraction, it was oblivious to what biology needs to make correct interpretation of genomic data. In fact, it misses the correct model for the assembly problem for at least three different reasons: (i) it does not model possible errors arising from sequencing the fragments; (ii) it does not model fragment orientation (the sequence source can be one of the two DNA strands); (iii) most importantly it fails in the presence of repeats in the genome. Faced with this theoretical computational intractability (N P-complete), most of the practical approaches for genome sequence assembly were devised to use greedy and heuristic methods that, by definition, restrict themselves to find suboptimal solutions (see<ref type="bibr" target="#b8">Kececioglu and Myers (1995)</ref>). Note that if the DNA was totally random then the overlap information would be sufficient to reassemble the target sequence and greedy algorithms would perform always well (<ref type="bibr" target="#b11">Ma, 2009</ref>). However, this argument is mostly irrelevant, since the problem is complicated by the presence of various non-random structures, in particular in eukaryotic genomes (e.g. repeated regions, rearrangements, segmental duplications). In the case of human genome, initially two unfinished draft sequences were produced by different methods, one by the International Human Genome Sequencing Consortium (IHGSC) and another by CELERA genomics (CG), with the published IHGSC assembly constructed by the program GigAssembler devised at</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.Narzisi and B.Mishra</head><p>the university of California at Santa Cruz (UCSC). As noted, in a recent article by Semple (2003): 'Of particular interest are the relative rates of misassembly (sequence assembled in the wrong order and/or orientation) and the relative coverage achieved by the three protocols. Unfortunately, the UCSC groups were alone in having published assessments of the rate of misassembly in the contigs they produced. Using artificial datasets, they found that, on average 10% of assembled fragments were assigned the wrong orientation and 15% of fragments were placed in wrong order by their protocol (<ref type="bibr" target="#b9">Kent and Haussler, 2001</ref>). Two independent (more recent) assessments of UCSC assemblies have come to the similar conclusions'. Resolving these ambiguities requires the development of novel tools that can combine different technologies into one unified assembly framework, specifically combining shortrange information (e.g. provided by sequence reads) together with single-molecule long-range information (e.g. provided by optical maps). However, there is no unanimous agreement, at least within the computer science community, that this problem has exhausted all reasonable methods of attack. For instance, Karp (2003) observed, 'The shortest superstring problem<ref type="bibr">[is]</ref>an elegant but flawed abstraction: [since it defines assembly problem as finding] a shortest string containing a set of given strings as substrings. The SCSP problem is N P-hard, and theoretical results focus on constant-factor approximation algorithms … Should this approach be studied within theoretical computer science?' In contrast to the work in computational biology, there have now emerged examples within computer science, where impressive progress has been made to solve important N P-hard problems exactly, despite their worst-case exponential time complexity: e.g. Traveling Salesman Problem (TSP), Satisfiability (SAT), Quadratic Assignment Problem (QAP), etc. For instance, recent work of<ref type="bibr" target="#b3">Applegate et al. (2001)</ref>demonstrated the feasibility of solving instances of TSP (as large as 85 900 cities) using branch-and-cut, whereas symbolic techniques in propositional satisfiability (e.g. DPLL SAT solver<ref type="bibr" target="#b5">Davis et al., 1962</ref>), employing systematic backtracking search procedure (in combination with efficient conflict analysis, clause learning, nonchronological backtracking, 'two-watched-literals'unit propagation, adaptive branching and random restarts), have exhibited the capability to handle more than a million variables. Inspired by these lessons from theoretical computer science, a novel approach, embodied in SUTTA algorithm, was developed. In the process, several related issues were addressed: namely, developing better ways to dynamically evaluate and validate layouts, formulating the assembly problem more faithfully, devising superior and accurate algorithms, taming the complexity of the algorithms and finally, a theoretical framework for further studies along with practical tools for future sequencing technologies. Because of the generality and flexibility of the scheme (it only depends on the underlying sequencing technologies through the choice of score and penalty functions), SUTTA is capable, at least in principle, of agnostically adapting to various rapidly evolving technologies. It also allows concurrent assembly and validation of multiple layouts, thus providing a flexible framework that combines short-and longrange information from different technologies. The main aim of this article is to elaborate upon the mathematical, algorithmic and technical details of this method. The article also demonstrates SUTTA's feasibility through several in silico experiments using real paired and unpaired data from next-generation sequencing<ref type="figure">1</ref>. Two possible overlaps: left overlap is normal (both reads pointing to the same forward direction) right overlap is innie (the second read B is reverse complemented and is pointing in the backward direction). technology. Finally contig size and assembly quality are shown to be critically dependent on the minimum overlap parameter k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">SYSTEM AND METHODS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">The sequence assembly problem</head><p>In order to naturally derive SUTTA's method, it is best to start with a formulation of the assembly problem as a constrained optimization problem. For this purpose, SUTTA relies on the same notational framework (but a different approach of attack) as that first introduced by Myers (1995). For convenience, an essential set of definitions is summarized below. The output of a sequencing project consists of a set of reads (or fragments) F ={r 1 ,r 2 ,...,r N }, where each read r i is a string over the alphabet = {A,C,G,T }. To each read is associated a pair of integers (s i ,e i ),i ∈<ref type="bibr">[1,|F|]</ref>where s i and e i are, respectively, the starting and ending points of the read r i in the reconstructed string R (to be generated by the assembler), such that 1 ≤ s i ,e i ≤|R|. The order of s i and e i encodes the orientation of the read (whether r i was sampled from Watson or Crick strand). The overlaps (best local alignment) between each pair of reads may be computed using the Smith–Waterman algorithm (<ref type="bibr" target="#b19">Smith and Waterman, 1981</ref>) with match, mismatch and gap penalty scores dependent on the errors introduced by the sequencing technology. Exact string matching is instead used for short read from next-generation sequencing, since they usually provide high coverage, thus allowing tolerance to an increased false negatives. Note also that by restricting to exact matches only, the time complexity of the overlap detection procedure is reduced from a quadratic to a linear function of the input size. 1 The complete description of an overlap π is given by specifying: (i) the substrings π.A<ref type="bibr">[</ref>of the two reads that are involved in the overlap; (ii) the offsets from the left-most and right-most positions of the reads π.A hang and π.B hang ; (iii) the relative directions of the two reads: normal (N), innie (I); (iv) a predicate suffix π (r) on a read r such that: suffix π (r) = true iff suffix of r participates in the overlap π false iff prefix of r participates in the overlap π</p><formula>(1)</formula><p>Figure 1 illustrates two possible overlaps (normal and innie). Note that a right arrow represents a read in forward orientation, conversely a left arrow represents a read that is reverse complemented. Definition 1 (Layout). A layout L induced by a set of reads F ={r 1 ,r 2 ,...,r N } is defined as:</p><formula>L = r j 1 π 1 r j 2 π 2 r j 3 π 3 ··· π N−1 r j N .</formula><formula>(2)</formula><p>Informally a layout is simply an ordered sequence of reads connected by overlap relations. Note that the order of the reads in L is a permutation of the reads in F. The previous definition assumes that there are no containments 2 ; without loss of generality, contained reads can be initially removed (in a preprocessing step) and then reintroduced later after the layout has been created. Among all the possible layouts (possibly, super-exponential in the Page: 155 153–160</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SUTTA</head><p>number of reads), it is imperative to efficiently identify the ones that are consistent according to the following definition: Definition 2 (Consistency property). A layout L is consistent if the following property holds for i = 2,...,N −1:</p><formula>π i−1 r j i π i iff suffix π i−1 (r j i ) = suffix π i (r j i ).</formula><formula>(3)</formula><p>The consistency property imposes a directionality to the sequence of reads in the layout. The estimated start positions for each read are given by:</p><formula>sp 1 = 1, sp i = sp i−1 +π i−1 .hang r j i −1 if i &gt; 1 (4)</formula><p>Consistent layouts must also satisfy the following property:Note that in practice the maximum error rate is used during the overlap computation to filter only detected overlaps between two reads r 1 and r 2 whose number of errors is no more than (|r 1 |+|r 2 |). Equipped with this set of definitions, the sequence assembly problem is formulated as follows:Each of these properties plays an important role in resolving problems that arise when real genomic data is used (e.g. data containing repeat-regions, rearrangements, segmental duplications, etc.). Note that, in the absence of additional information, among all possible layouts the minimum length layout is typically preferred (shortest superstring), although this choice is difficult to justify. As the genomic sequence deviates further and further from a random sequence, normally minimum length layout starts introducing various misassembly errors (e.g. compression, insertions, rearrangements, etc.). Note that, traditionally, assemblers have only optimized/approximated one of the properties [i.e.</p><formula>(O)]</formula><p>, listed above, while checking for the others in a post-processing step. SUTTA, in contrast, views this problem as a constrained optimization problem with the feasible region, determined by the consistent layouts. It converts the group of constraints into appropriate score functions and uses them in combination to search for the optimal layout. This article illustrates these ideas with all but (OM) constraints, which will be described in a sequel. Finally note that this list of constraints is not exhaustive and it will likely change from year to year as new sequencing technologies become available and new types of long-range information become possible to produce. It is thus important to have an assembly framework that could dynamically and effortlessly adapt to the new technologies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">SUTTA algorithm</head><p>Traditional graph-based assembly algorithms use either the overlap-layoutconsensus (OLC) or the sequencing-by-hybridization (SBH) paradigm, in which first the overlap/DeBruijn graph is built and the contigs are extracted later. SUTTA instead assembles each contig independently and dynamically one after another using the Branch-and-Bound (B&amp;B) strategy. Originally developed for linear programming problems (<ref type="bibr" target="#b10">Land and Doig, 1960</ref>), B&amp;B algorithms are well-known searching techniques applied to intractable (N P-hard), combinatorial optimization problems. The basic idea is to search the complete space of solutions. However, the caveat is that explicit enumeration is practically impossible (i.e. has exponential time complexity). The tactics honed by B&amp;B is to limit itself to a smaller subspace that contains the optimum—this subspace is determined dynamically through the use of certain well chosen score functions. B&amp;B has been successfully employed to solve a large collection of complex problems, whose most prominent members are TSP (traveling salesman problem), MAX-SAT (maximal satisfiability) and QAP (quadratic assignment problem). The high level SUTTA pseudocode is shown in Algorithm 1. Here, two important data structures are maintained: a forest of double-trees (D-tree) B and a set of contigs C. At each step, a new D-tree is initiated from one of the remaining reads in F. Once the construction of the D-tree is completed, the associated contig is created and stored in the set of contigs C. Next the layout for this contig is computed and all its reads are removed from the set of all available reads F. This process continues as long as there are reads left in the set F. Note that for the sake of a clear exposition, both the forest of D-trees B and the set of contigs C are kept and updated in the pseudocode; however, after the layout is computed, there is no particular reason to keep the full D-tree in memory, especially, where memory requirements are of concern.Finally, note that the proposed Algorithm 1 is input order dependent. SUTTA adopts the policy to always select the next unassembled read with highest occurrence as seed for the D-tree [also used by Taipan;<ref type="bibr" target="#b16">Schmidt et al. (2009)]</ref>. This strategy has the property to minimize the extension of reads containing sequencing errors. However, empirical observations indicate that changing the order of the reads rarely affects structure of the solutions, as the relatively longer contigs are not affected. An explanation for this can be obtained through a probabilistic analysis of the data and a 0–1 law resulting from such an analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Overlap score (weighted transitivity)</head><p>Like any B&amp;B approach, a major component of SUTTA algorithm is the score function used to evaluate the quality of the candidate solutions that are dynamically constructed using the B&amp;B strategy. SUTTA employs an overlap score based on the following argument. Large de novo sequencing projects typically have coverage higher than three, and this implies that frequently two overlapping regions of three consecutive reads in a region of correct layout share intersections. Events of this type are 'witness' to a transitivity relation between the three reads and they play an important role in identifying true positive 3 overlaps with high probability.<ref type="figure" target="#fig_1">Figure 2</ref>shows an example of transitivity relation between three reads A,B and C. During contig layout construction, the overlap score uses the following basic principle to dynamically compute the score value of a candidate solution: if Page: 156 153–160read A overlaps read B, and read B overlaps read C, SUTTA will score those overlaps strongly if in addition A and C also overlap: if(π(A,B)∧π(B,C))then{S(π(A,B,C))</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.Narzisi and B.Mishra</head><formula>s A e A B s B A C s C e C e B</formula><formula>= S(π(A,B))+S(π(B,C))+(π(A,C)?S(π(A,C)) : 0)} (5)</formula><p>Note that the score of a single overlap corresponds to the score computed by the Smith–Waterman alignment algorithm (for long reads) or exact matching (for short reads). Clearly the total score of a candidate solution is given by the sum of the scores along the overlaps that join the set of reads in the layout L plus the score of the transitivity edges (if any):</p><formula>g(L) = r j ∈L j∈2,...,N−1 S(π(r j−1 ,r j ,r j+1 )) = π i ∈O S(π i (r j 1 ,r j 2 ))+ π k ∈T S(π k (r j 1 ,r j 2 )), (6)</formula><p>where O and T are respectively the set of overlaps and transitivity edges (with respect to the set of reads, defined by the layout L) and S(π) is the score (Smith–Waterman, exact match, etc.) for the overlap. This step in SUTTA resembles superficially to the Unitig construction step in overlap-layout-consensus assembler, carried out by removing 'transitive' edges. However, unlike SUTTA, in the overlap-layout-consensus approach the weights of the overlaps are ignored in meaningfully scoring the paths. Since Unitig construction can be computationally expensive, largescale assemblers like CELERA have adopted the best-buddy algorithm, where Unitigs are computed as chains of mutually unique best buddies (adjacent reads with best overlap between each other). Finally, it must be noted that the overlap scores are insufficient to resolve long repeats or haplotypic variations. The score functions must be augmented with constraints (formulated as reward/penalty terms) arising from mate-pair distance information or optical map alignments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Node expansion</head><p>The core component of SUTTA is the B&amp;B procedure used to build and expand the D-tree (create_double_tree() procedure in Algorithm 1). The high-level description of this procedure is as follows:</p><p>(1) Start with a random read (it will be the root of a tree; use only the read that has not been used in a contig yet, or that is not contained).</p><formula>(2)</formula><p>Create RIGHT Tree: start with an unexplored leaf node (a read) with the best score value; choose all its non-contained right-overlapping reads (Extensions() procedure in Algorithm 2); filter out the set of overlapping reads by pruning unpromising directions (<ref type="bibr">Transitivity(), DeadEnds(), Bubbles() and MatePairs()</ref>procedures in Algorithm 2); expand the remaining nodes by making them its children; compute their scores. (Add the 'contained' nodes along the way, while including them in the computed scores; check that no read occurs repeatedly along any path of the tree.) STOP when the tree cannot be expanded any further.available: if at the end of the pruning process there are still multiple directions to follow the branching is either terminated (conservative) or not (aggressive). In the aggressive case, the algorithm chooses the direction to follow with the highest local overlap. Algorithm 2 is applied twice to generate LEFT and RIGHT trees from the start read. Next, to create a globally optimal contig, the best LEFT path, the root and the best RIGHT path are concatenated together.<ref type="figure" target="#fig_2">Figure 3</ref>illustrates the steps involved in the construction of a contig. The amount of exploration and resource consumption is controlled by the two parameters K and T : K is the max number of candidate solution allowed in the queue at each time step, while T is the percentage of top ranking solutions compared with the current optimum score. At each iteration, the queue is pruned such that its size is always ≤ max(K,T |Q|), where |Q| is the current size of the queue. Note that while K remains fixed at each iteration of Algorithm 2, the percentage of top ranking solutions dynamically changes over time. As a consequence, more exploration is performed when many solutions evaluate to nearly identical scores.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 2: Node expansion</head><p>Input: Start read r 0 , max queue size K, percentage T of top ranking solutions, dead-end depth W de , bubble depth W bb , mate-pair depth W mp Output: Best scoring leaf V := ; /* Set of leaves */</p><formula>L := {(r 0 ,g(r 0 ))}; /* Live nodes (priority queue) */ while (L ==) do L := Prune(L,K,T ); /* Prune the queue */ r i := L.popNext();</formula><p>/* Get the best scoring node */</p><formula>E := Extensions(r i ); /* Possible extensions */ E (1) := Transitivity(E,r i ); /* Transitivity pruning */ E (2) := DeadEnds(E (1) ,r 0 ,W de ); /* Dead-end pruning */ E (3) := Bubbles(E (2) ,r 0 ,W bb ); /* Bubble pruning */ E (4) := MatePairs(E (3) ,r 0 ,W mp );</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Search strategy</head><p>A critical component of any B&amp;B approach is the choice of the search strategy used to explore the next subproblem in the tree. There are several Page: 157 153–160</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SUTTA</head><p>variations among strategies (with no single one being universally accepted as ideal), since these strategies' computational performance varies with the problem type. The typical trade-off is between keeping the number of explored nodes in the search tree low and staying within the memory capacity. The two most common strategies are Best First Search (BeFS) and Depth First Search (DFS). BeFS always selects among the live (i.e. yet to be explored) subproblems, the one with the best score. It has the advantage to be theoretically superior since whenever a node is chosen for expansion, a best-score path to that node has been found. However it suffers from memory usage problems, since it behaves essentially like a Breadth First Search (BFS). Also checking repeated nodes in a branch of the tree is computationally expensive (linear time). DFS instead always selects among the live subproblems the one with largest level (deepest) in the tree. It does not have the same theoretical guarantees of BeFS but the memory requirements are now bounded by the product of the maximum depth of the tree and the branching factor. The other advantage is that checking if a read occurs repeatedly along a path can be done in constant time by using the DFS interval schemes. For SUTTA, we use a combined strategy: using DFS as overall search strategy, but switching to BeFS, when choice needs to be made between nodes at the same level. This strategy can be easily implemented by ordering the set of live nodes L of Algorithm 2 using the following precedence relation between two nodes x and y:</p><formula>x ≺ y iff ⎧ ⎨ ⎩</formula><p>depth(x) &gt; depth(y) or depth(x) == depth(y)∧score(x) &gt; score(y) ,</p><formula>(7)</formula><p>where depth is the depth of the node in the tree and score is the current score of the node (defined in section 2.3). Because BeFS is applied locally at each level, the score is optimized concurrently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Pruning the Tree</head><p>Transitivity pruning: the potentially exponential size of the D-tree is controlled by exploiting certain specific structures of the assembly problem that permit a quick pruning of many redundant and uninformative branches of the tree—surprisingly, substantial pruning can be done only using local structures of the overlap relations among the reads. The core observation is that it is not prudent to spend time on expanding nodes that can create a suffix-path of a previously created path, as no information is lost by delaying the expansion of the last node/read involved in such a 'transitivity' relation. This scenario can happen every time there is a transitivity edge between three consecutive reads (see<ref type="figure" target="#fig_1">Fig. 2</ref>), and it is further illustrated in<ref type="figure" target="#fig_4">Figure 4</ref>with an example. Suppose that A,B 1 ,B 2 ,...,B n are n+1 reads with a layout shown in<ref type="figure" target="#fig_4">Figure 4</ref>. The local structure of the D-tree will have node A with n children B 1 ,B 2 ,...,B n. However , since B 1 also overlaps B 2 ,B 3 ,...,B n , these nodes will appear as children of B 1 at the next level in the tree. So the expansion of nodes B 2 ,B 3 ,...,B n can be delayed because their overlap with read A is enforced by read B 1. Similar argument holds for nodes B 2 ,B 3 ,...,B n. In the best scenario, this kind of pruning can reduce a full tree structure into a linear chain of nodes. Additional optimization can be performed by evaluating the children according to the following order (h 1 ≤ h 2 ≤ ··· ≤ h n ), where h i is the size of the hang 4 for read B i. This ordering gives higher priority to reads with higher overlap score. This explains how the Transitivity() procedure from Algorithm 2 is performed. Zig-zag overlaps mapping: although based on a simple principle, the time complexity of the transitivity pruning is a function of how quickly it is possible to check the existence of an overlap between two reads (corresponding to the dashed arrows of<ref type="figure" target="#fig_4">Fig. 4</ref>). The general problem is the following: given the set of overlaps O (computed in a preprocessing step) for a set of reads F, check the existence of an overlap (or set of overlaps) for a pair of reads (r 1 ,r 2 ). The naive strategy that checks all the possible pairs takes time O(n 2 ) where n =|O|. If a graph-theoretic approach is used, 4 Size of the read portion that is not involved in the overlap.The idea is to build a hash table, in which a pair of reads is uniquely encoded to a single location of the table by using the following hash function:</p><formula>H(a,b) = (a+b)(a+b−1) 2 +(1−b),</formula><formula>(8)</formula><p>where a and b are the unique identification numbers of the two reads. This is the well-known zig-zag function, which is the bijection often used in countability proofs. The number of possible overlaps |H(a,b)| between two reads is always bounded by some constant c, which is a function of the read length, genome structure (e.g. number of simple repeats) and the strategy adopted for the overlap computation (Smith–Waterman, exact match, etc.). In practice, the costant c is never too large because, even when multiple overlaps between two reads are available (typically 4), only a small subset with a reasonably good score (i.e. above a threshold) is examined by the algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Lookahead</head><p>Mate-pairs: had the overlapping phase produced only true positive overlaps, every overlapping pair of reads would have been correctly inferred to have originated in the same genomic neighborhood, thus turning the assembly process to an almost trivial task. However, this is not the case—the overlap detection is not error free and produces false positive or ambiguous overlaps abundantly, specially when repeat regions are encountered. A potential repeat boundary between reads A, B and C is shown in<ref type="figure">Figure 5</ref>. Read A overlaps both reads B and C, but B and C do not overlap each other. Thus, the missing overlap between B and C is the sign of a possible repeat-boundary location, making the pruning decisions impossible. However, SUTTA's framework makes it possible to resolve this scenario by looking ahead into the possible layouts generated by the two reads, and keeping the node that generates the layout with the least number of unsatisfied constraints (i.e. consistent with mate-pair distances or restriction fragment lengths from optical maps). SUTTA's implementation generates two subtrees: one for node B and the other for C (see<ref type="figure">Fig. 5</ref>). The size of each subtree is controlled by the parameter W mp , the maximum height allowed for each node in the tree. The choice of W mp is both a function of the size of the mate-pair library, local genome coverage and the genome structure. For genomes with short repeats, a small value for W mp is sufficient to resolve most of the repeat boundaries, and can be estimated from a kmer analysis of the reads. However, some genomes have much higher complexity (family of LINEs, SINEs and segmental duplications with varying homologies), in that case a higher value of W mp is necessary, but can be estimated adaptively. Once the two (or occasionally more) subtrees are constructed, the best path is selected based on the overlap score and the quality of each path is evaluated by a reward/penalty function corresponding to mate-pair constraints. For each node in the path, its pairing mate (if any) is searched to collect only those mate-pairs, crossing the connection point between the subtree and the full tree, which are then Page: 158 153–160<ref type="figure">Fig. 5</ref>. Lookahead: the repeat boundary between reads B and C is resolved looking ahead in the subtree of B and C, and checking how many and how well the mate-pair constrains are satisfied. scored by the following rule:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.Narzisi and B.Mishra</head><formula>S MP (r 1 ,r 2 ) = ⎧ ⎪ ⎪ ⎨ ⎪ ⎪ ⎩ 1, iff(l ∈[µ−ασ,µ+ασ])∧(r 1 ↔ r 2 ); −1, iff(l / ∈[µ−ασ,µ+ασ])∧(r 1 ↔ r 2 ); −1, iff¬(r 1 ↔ r 2 ); 0, otherwise.</formula><formula>(9)</formula><p>Here l is the distance between the two reads in the layout, µ and σ are the mean and SD of the mate-pair library, α is a parameter that controls the relaxation of the mate-pair constrains (in the results, fixed at α = 6), and r 1 ↔ r 2 denotes that the two reads are oriented toward each other (with the 5 ends farthest apart). Such a score can be easily shown to give higher value to layouts with as few unsatisfied constraints as possible. Note that the mate-pair score is also dependent on local coverage of the reads, so its value should be adjusted/normalized to compensate for the variation in coverage. By penalizing the score negatively and positively according to the constraints, the current formulation assumes uniform coverage. However more sophisticated score functions could be employed, if it is necessary to precisely quantify the extent to which the score varies with coverage. The mate-pair score f of the full path P is given by the sum of the scores of each pair of reads with feasible constraints in P:</p><formula>f (P) = r i ,r j ∈P S MP (r i ,r j ) (10)</formula><p>Note that the current formulation of S MP models only mate-pairs libraries whose reads face against each other. However, most current assemblies use a mixture of paired-end and mate-pair datasets that differ in insert size and read pair orientation. SUTTA's mate-pair score can be easily adapted to support any read pair orientation and insert size. Memory management is very important during lookahead: the subtrees are dynamically constructed and their memory deallocated as soon as the repeat boundary is resolved. Also note that the lookahead procedure is performed every time a repeat boundary is identified, so the extra work associated with the construction and scoring of the subtrees is performed only when repeated regions of the genome are assembled. Finally note that, the construction of each subtree follows the same strategy (from Algorithm 2) and uses the same overlap score (defined in section 2.3); however, recursive lookahead is not permitted. The mate-pair score introduced in (9) is used only to prune one of the two original nodes under consideration (or both, in the rare but possible scenarios, where neither of the subtrees satisfies the mate-pair constraints). This explains how the MatePairs() procedure from Algorithm 2 is performed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dead-ends and bubbles</head><p>: base pair errors in short reads form next-generation sequencing produce an intuitively non-obvious set of erroneous paths in the graph and tree structures. Because perfect matching is used to compute the overlaps, according to where the base error is located two possible ambiguities need to be resolved: dead-ends and bubbles. Dead-ends consist of short branches of overlaps that extend only for very few steps and they are typically associated with base errors located close to the read ends. Bubbles instead manifest themselves as false branches that reconnect to a single path after a small number of steps. They are typically caused by single nucleotide difference carried by a small subset of reads. The lookahead procedure is easily adapted to handle these kind of structures. Specifically for dead-ends, each branch is explored up to depth W de and all the branches that have shorter depth are pruned. In the case of bubbles, both branches are expanded up to depth W bb and, if they converge, only the branch with higher coverage is kept and the other one pruned.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RESULTS</head><p>We have compared SUTTA to several well-known short read assemblers on three real datasets from Illumina next-generation sequencing data using both mated and unmated reads. The following assemblers are used in the comparison: Edena 2.1.1 (<ref type="bibr" target="#b6">Hernandez et al., 2008</ref>), Velvet 1.0.13 (<ref type="bibr" target="#b22">Zerbino and Birney, 2008</ref>), Taipan 1.0 (<ref type="bibr" target="#b16">Schmidt et al., 2009</ref>), ABySS 1.2.3 (<ref type="bibr" target="#b18">Simpson et al., 2009</ref>), SSAKE 3.6 (<ref type="bibr" target="#b21">Warren et al., 2007</ref>) and EULER-SR 1.1.2 (<ref type="bibr" target="#b4">Chaisson and Pevzner, 2008</ref>). Although these datasets do not represent the state of the art in sequencing technology (for example, Illumina can currently generate longer reads up to 100 bp), they have been extensively analyzed by previously published short read assemblers.). The experimental results show that SUTTA has comparable performance to the best state-of-the-art assemblers based on contig size comparison. This comparison is to be interpreted in the context of our experimental evidence that the choice of the minimum overlap parameter k affects both contig size and assembly quality (presented below, see Figs 6 and 7).<ref type="figure" target="#tab_1">Tables 1</ref>and 2 present the comparison based on contig size analysis for all three genomes. Only contigs of minimal length 100 bp are considered in the statistics. A contig is classified as correct if it fully aligns to the genome with a minimum base similarity of 98% (for S.aures and H.acininychis) and 95% (for E.coli). Inspecting the results in<ref type="figure" target="#tab_1">Table 1</ref>, it is evident that SUTTA performs comparatively well relative to these assemblers. In particular, SUTTA a , thanks to its aggressive strategy, assembles longer contigs but it pays in assembly quality by generating more misassembly errors. SUTTA c instead behaves more conservatively and generated less errors but without excessively sacrificing contig length. The choice between the aggressive strategy and the conservative one is clearly based on the overall quality of the input set of reads and the genome structure. For example, in the case of an error-free dataset and a genome with few and short repeats, we may opt for an aggressive strategy. In the Page: 159 153–160 SUTTAcase of mate-pair data, SUTTA produces shorter contigs compared with ABySS, Velvet and EULER-SR; however, SUTTA's overall assembly quality is superior with fewer and shorter misassembled contigs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Contig size analysis</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Overlap size k</head><p>The min overlap length k is a determinant parameter and its optimal setting strongly depends on the data (coverage). This is particularly pronounced for short reads since the required overlapping length represents a significant part of the read length. Therefore, the effective coverage E cov = N(l−k) G is significantly sensitive to choice of the minimum overlap parameter k, where N is the number of reads, l is the read length and G is the genome size.<ref type="figure" target="#fig_6">Figure 6</ref>shows the relation of the N50 size versus the minimum overlap parameter k for two of the genomic datasets analyzed in this article. Clearly, there is a trade-off between the number of spurious overlaps and lack of overlaps as the values for k move from small to larger numbers. Increasing the overlap allows to resolve more ambiguities, but in turn requires a higher coverage depth to achieve the same N50 value. It is important to emphasize that the optimal value for k depends on the genome structure and coverage (S.aureus and E.coli have different optimal value) and so it needs to be tuned accordingly. Finally, the availability of mate-pairs definitely improves the results and enables assembly of longer contigs for the E.coli genome.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Feature–response curve dynamics</head><p>The choice of the minimum overlap parameter k not only affects the estimated length of the assembled contigs but also changes the overall quality of the assembled sequences. In order to show this phenomenon, we use a new metric to examine the assembly quality that we call 'Feature-Response' (FR) curve. Similarly to the receiver operating characteristic (ROC) curve, the FR curve characterizes the sensitivity (e.g. coverage) of the sequence assembler as a function of its discrimination threshold (number of features/errors). Features correspond to doubtful regions of the assembled sequence and are computed using the amosvalidate pipeline developed by<ref type="bibr" target="#b13">Phillippy et al. (2008)</ref>. Faster the FR grows better is the assembly quality, because higher genome coverage is achieved with less errors (see the Supplementary Material for more details on the FR curve).<ref type="figure" target="#fig_7">Figure 7</ref>shows the dynamics of the FR curve for E.coli as a function of the minimum overlap parameter k. Similarly to the plots in<ref type="figure" target="#fig_6">Figure 6</ref>, both small and large values of k produce more assembly errors, while the best value lays in the middle range of 25–29. There seems to be a phase transition for k = 33 and k = 34, this is due to the fact the probability to detect a perfect match overlap of higher size (k &gt; 32) becomes more unlikely without increasing the coverage. Both average contig length and N50 value decrease such that more contigs of size smaller than the insert size are created. All these contigs then violate the mate-pair constraints and result in a high number of features/errors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Computational performance</head><p>Because of the theoretical intractability of the sequence assembly problem and because, in principle, SUTTA's exploration scheme could make it generate an exponentially larger number of layouts, SUTTA could be expected to suffer from long running time and high memory requirements. However, our empirical analysis shows that SUTTA has a competitively good performance—thanks to the B&amp;B strategy, well-defined scoring and pruning schemes, and a careful implementation. SUTTA's computational performance was compared with Velvet, ABySS, EULER-SR, Edena and SSAKE on the S.aureus genome using a four quad core processor machine, Opteron CPU 2.5 GHz (see the Supplementary Material for the comparative table). SUTTA has an assembly time complexity similar to Edena, SSAKE and EULER-SR. Velvet and ABySS have the best computational performance. Velvet, ABySS and Edena consume less memory than SUTTA; however, note that SUTTA relies on AMOS to maintain various genomic objects (reads, inserts, maps, overlaps, contigs, etc.), which are not optimized for short reads. At the current stage of development, SUTTA is limited to relatively small gnomes and its time complexity increases with mate-pairs constrain computation, but is expected to improve with reengineering planned for the next versions. Finally, note that typically two-thirds of total SUTTA's running time is dedicated to the computation of overlaps, leaving only a one-third of the total time to assemble the contigs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">CONCLUSION</head><p>Sequence assembly accuracy has now become particularly important in: (i) genome-wide association studies, (ii) detecting new polymorphisms and (iii) finding rare and de novo mutations. New-sequencing technologies have reduced cost and increased the throughput; however, they have sacrificed read length and accuracy by allowing more single nucleotide (base-calling) and indel (e.g. due to homo-polymer) errors. Overcoming these difficulties without paying for high computational cost requires (i) better algorithmic framework (not greedy), (ii) being able to adapt to new and combined hybrid technologies (allowing significantly large coverage and auxiliary long-rage information) and (iii) prudent experiment design. We have presented a novel assembly algorithm, SUTTA, that has been designed to satisfy these goals as it exploits many new algorithmic ideas. Challenging the popular intuition, SUTTA enables 'fast' global optimization of the WGSA problem by taming the complexity using the B&amp;B method. Because of the generality of the proposed approach, SUTTA has the potential to adapt to future sequencing technologies without major changes to its infrastructure: technology-dependent features can be encapsulated into the lookahead procedure and well-chosen score functions.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig.</head><figDesc>Fig. 1. Two possible overlaps: left overlap is normal (both reads pointing to the same forward direction) right overlap is innie (the second read B is reverse complemented and is pointing in the backward direction).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig.2.</head><figDesc>Fig. 2. Example of transitivity relation: the overlap regions between reads AB and BC share an intersection.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>(3)</head><figDesc>Create LEFT Tree: symmetric to previous step. Algorithm 2 presents the pseudocode of the expansion routine (details for each subroutine are available in the Supplementary Material). In this framework each path constructed using Algorithm 2 correspond to a possible layout of the reads for the current contig. Unlike the graph-based approaches (OLC and SBH), multiple paths/layouts are concurrently expanded and validated. Based on the branching strategy, two versions of SUTTA are</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig.3.</head><figDesc>Fig. 3. Contig construction: (i) the D-tree is constructed by generating LEFT and RIGHT trees for the root node; (ii) best left and right paths are selected and joined together; (iii) the reads layout is computed for the set of reads in the full path.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig.4.</head><figDesc>Fig. 4. Example of transitivity pruning: the expansion of nodes B 2 ,B 3 ,...,B n can be delayed because their overlap with read A is enforced by read B 1 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><figDesc>The first dataset consists of 3.86 million 35 bp unmated reads from the Staphylococcus aureus strain MW2 (coverage 48X, genome length 2.8 Mb). These reads are freely available from the Edena's web site (http://www.genomic.ch/edena.php). The second dataset is composed of 12.3 million 36 bp unmated Illumina reads for the Helicobacter acinonychis strain Sheeba genome (coverage 284X, genome length 1.5 Mb). This dataset is freely available at http://sharcgs.molgen.mpg.de/download.shtml. The third dataset consists of 20.8 million paired-end 36 bp Illumina reads from a 200 bp insert of Escherichia coli, strain K12 MG1655, (coverage 160X, genome length 4.6 Mb) available at the NCBI SRA (accession no. SRX000429</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig.6.</head><figDesc>Fig. 6. Relation between the min overlap parameter k and the N50 contig size for S.aureus and E.coli.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig.7.</head><figDesc>Fig. 7. Feature–response curve dynamics as a function of the minimum overlap parameter k for E.coli using mate-pair data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Funding</head><figDesc>: NSF CDI program; Abraxis BioScience, LLC. Conflict of Interest: none declared.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>π.s A ,π.e A ] and π.B[π.s B ,π.e B ]</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><figDesc>Definition 4 (Sequence Assembly Problem). Given a collection of fragment reads F ={r i }</figDesc><table>N 
i=1 and a tolerance level (error rate) , find a reconstruction 
R whose layout L is -valid, consistent and such that the following set of 
properties (oracles) are satisfied: 

@BULLET Overlap-Constraint (O)): the cumulative overlap score of the layout is 
optimized. 

@BULLET (Mate-Pair-Constraint (MP)): the distance between mate-pairs is 
consistent. 
@BULLET (Optical-Map-Constraint (OM)): the observed distribution of 
restriction enzyme sites, C obs is consistent with the distribution of 
experimental optical map data C src . 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><figDesc>Algorithm 1: SUTTA-pseudo code Input: Set of N reads Output: Set of contigs B := ; /* Forest of D-trees */ C := ; /* Set of contigs */ F := N i {r i }; /* All the available reads */ while (F ==) do r := F .getNextRead(); if ( ¬isUsed(r) ∧ ¬isContained(r) ) then DT := create_double_tree(r); B := B ∪{DT }; Contig CT G := create_contig(DT ); C := C ∪{CT G}; CT G.layout(); /* Compute contig layout */ F := F \{CT G.reads}; /</figDesc><table>* Remove used reads */ 
end 
end 
return C; 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><figDesc>/* Mate pruning */ if (|E (4) |==0) then V := V ∪{r i }; /* r i is a leaf */ else for (j=1 to |E (4) |) do L := L∪{(r j ,g(r j ))}; end end end return max r i ∈V {g(r i )};</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="true"><figDesc>Table 1. Assembly comparison for S.aureus (strain MW2) and H.acininychis (strain Sheeba)</figDesc><table>Assembler 
Number of Number of N50 Mean Max Coverage 
correct 
errors 
(kb) (kb) (kb) (%) 

S.aureus 
SUTTA c 
998 
11 
6.0 2.6 
22.8 97 
SUTTA a 
892 
52 
6.3 2.8 
37.7 97 
Edena (strict) 
1124 
0 
5.9 2.4 
25.7 98 
Edena (non-strict) 740 
16 
9.0 3.7 
51.8 97 
Velvet 
945 
5 
7.4 2.8 
32.7 97 
ABySS 
928 
6 
7.8 2.9 
32.7 98 
EULER-SR 
669 
33 
10.1 4.0 
37.9 99 
SSAKE 
2073 
378 
2.0 1.1 
9.7 99 
Taipan 
692 
16 
11.1 3.9 
44.6 98 

H.acininychis 
SUTTA c 
313 
9 
9.6 4.5 
41.3 98 
SUTTA a 
216 
37 
13.1 5.9 
68.0 98 
Edena (strict) 
336 
0 
10.1 4.5 
36.9 98 
Edena (non-strict) 302 
1 
13.2 4.9 
35.0 97 
Velvet 
278 
2 
12.8 5.4 
49.5 98 
ABySS 
270 
8 
13.9 5.4 
54.7 98 
EULER-SR 
730 
21 
4.3 2.1 
18.8 98 
SSAKE 
675 
156 
3.2 1.8 
14.6 99 
Taipan 
271 
0 
13.3 5.6 
48.6 98 

SUTTA c uses the conservative approach; SUTTA a uses the aggressive strategy. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="true"><figDesc>Table 2. Assembly comparison for E.coli strain K12 MG1655</figDesc><table>Assembler Number of Number of errors N50 Mean Max Coverage 
correct 
(mean kb) 
(kb) (kb) (kb) (%) 

SUTTA m 
423 
7 (18.8) 
22.7 10.2 
84.5 98 
Edena 
674 
6 (13.2) 
16.4 6.6 
67.1 99 
Velvet 
275 
9 (52.9) 
54.3 15.9 166.0 98 
ABySS 
114 
10 (49.5) 
87.4 37.3 210.7 99 
EULER-SR 190 
26 (37.8) 
57.4 21.1 174.0 99 
SSAKE 
407 
66 (15.3) 
31.2 9.6 105.9 98 
Taipan 
742 
62 (5.2) 
12.2 5.6 
56.5 97 

SUTTA m uses mate-pairs constraints in the lookahead to resolve repeat boundaries. 

</table></figure>

			<note place="foot">© The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com</note>

			<note place="foot">at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="1"> See the Supplementary Material for more information about the overlapper. 2 These are reads that are proper subsequences of another read.</note>

			<note place="foot" n="3"> The two reads correctly originate from the same place in the genome.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">1512</biblScope>
			<biblScope unit="page" from="50" to="66" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>btq646. .tex]</note>
</biblStruct>

<biblStruct   xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName>
				<surname>Page</surname>
			</persName>
		</author>
		<imprint>
			<biblScope unit="page" from="153" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Narzisi</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Mishra</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">References</forename>
			</persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Tsp cuts which do not conform to the template paradigm</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Applegate</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computational Combinatorial Optimization, Optimal or Provably Near-Optimal Solutions</title>
		<meeting><address><addrLine>London, UK</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="261" to="304" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Short read fragment assembly of bacterial genomes</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">J</forename>
				<surname>Chaisson</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">A</forename>
				<surname>Pevzner</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="324" to="330" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">A machine program for theorem-proving</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Davis</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="394" to="397" />
			<date type="published" when="1962" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">De novo bacterial genome sequencing: Millions of very short reads assembled on a desktop computer</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Hernandez</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="802" to="809" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">The role of algorithmic research in computational genomics</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">M</forename>
				<surname>Karp</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Syst. Bioinformatics Conf. Int. IEEE Comput. Soc</title>
		<imprint>
			<biblScope unit="page">10</biblScope>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Combinatorial algorithms for dna sequence assembly</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Kececioglu</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Myers</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="7" to="51" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">Assembly of the working draft of the human genome with GigAssembler</title>
		<author>
			<persName>
				<forename type="first">W</forename>
				<forename type="middle">J</forename>
				<surname>Kent</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Haussler</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="1541" to="1548" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">An automatic method of solving discrete programming problems</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">H</forename>
				<surname>Land</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">G</forename>
				<surname>Doig</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Econometrica</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="497" to="520" />
			<date type="published" when="1960" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">Why greed works for shortest common superstring problem</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Ma</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">410</biblScope>
			<biblScope unit="page" from="5374" to="5381" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">Toward simplifying and accurately formulating fragment assembly</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<forename type="middle">W</forename>
				<surname>Myers</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Biol</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="275" to="290" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<monogr>
		<title level="m" type="main">Genome assembly forensics: finding the elusive mis-assembly</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Phillippy</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Genome Biol</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page">55</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">DNA sequencing with chain-terminating inhibitors</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Sanger</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Natl Acad. Sci. USA</title>
		<meeting>. Natl Acad. Sci. USA</meeting>
		<imprint>
			<date type="published" when="1977" />
			<biblScope unit="page" from="5463" to="5467" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">A fast hybrid short read fragment assembly algorithm</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Schmidt</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="2279" to="2280" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<analytic>
		<title level="a" type="main">Assembling a view of the human genome</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<forename type="middle">A M</forename>
				<surname>Semple</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Bioinformatics for Geneticists</title>
		<editor>Barnes,M.R. and Gray,I.C.</editor>
		<meeting><address><addrLine>Ltd, Chichester, UK</addrLine></address></meeting>
		<imprint>
			<publisher>John Wiley &amp; Sons</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="93" to="117" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b18">
	<analytic>
		<title level="a" type="main">ABySS: a parallel assembler for short read sequence data</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">T</forename>
				<surname>Simpson</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="1117" to="1123" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<analytic>
		<title level="a" type="main">Identification of common molecular subsequences</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<forename type="middle">F</forename>
				<surname>Smith</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">S</forename>
				<surname>Waterman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mol. Biol</title>
		<imprint>
			<biblScope unit="volume">147</biblScope>
			<biblScope unit="page" from="195" to="197" />
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b20">
	<analytic>
		<title level="a" type="main">A greedy approximation algorithm for constructing shortest common superstrings</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Tarhio</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Ukkonen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="page" from="131" to="145" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b21">
	<analytic>
		<title level="a" type="main">Assembling millions of short DNA sequences using SSAKE</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">L</forename>
				<surname>Warren</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="500" to="501" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b22">
	<analytic>
		<title level="a" type="main">Velvet: Algorithms for de novo short read assembly using de Bruijn graphs</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">R</forename>
				<surname>Zerbino</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Birney</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="821" to="829" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>