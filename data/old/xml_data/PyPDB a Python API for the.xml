
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:37+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">PyPDB: a Python API for the Protein Data Bank</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">William</forename>
								<surname>Gilpin</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Applied Physics</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">PyPDB: a Python API for the Protein Data Bank</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btv543</idno>
					<note type="submission">Received on July 14, 2015; revised on August 22, 2015; accepted on September 7, 2015</note>
					<note>Databases and ontologies Associate Editor: Anna Tramontano latest stable release is also available on PyPI. Contact: wgilpin@stanford.edu</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We have created a Python programming interface for the RCSB Protein Data Bank (PDB) that allows search and data retrieval for a wide range of result types, including BLAST and sequence motif queries. The API relies on the existing XML-based API and operates by creating custom XML requests from native Python types, allowing extensibility and straightforward modification. The package has the ability to perform many types of advanced search of the PDB that are otherwise only available through the PDB website. Availability and implementation: PyPDB is implemented exclusively in Python 3 using standard libraries for maximal compatibility. The most up-to-date version, including iPython notebooks containing usage tutorials, is available free-of-charge under an open-source MIT license via GitHub at https://github.com/williamgilpin/pypdb, and the full API reference is at</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The RCSB Protein Data Bank (PDB) represents one of the most comprehensive structural biology information databases openly available to genomics and proteomics researchers (<ref type="bibr" target="#b0">Berman et al., 2000</ref>). It provides an online interface for browsing amino acid and genetic sequences, as well as crystallographic structures aggregated from a large number of sources. It also provides sophisticated tools for visualizing protein structure and sequence lineages, aligning sequences and searching for homologies, and it provides links to relevant entries in related databases, such as GenBank and UniProt. The Python scripting language has demonstrated its usefulness to the bioinformatics community as a means of unifying different data sources and analysis tools, allowing diverse data streams to be retrieved, analyzed, and summarized from within the same workflow. This function has been complemented by new interface tools such as the iPython notebook, as well as general-purpose analysis toolkits like Biopython and Biskit (<ref type="bibr" target="#b1">Cock et al., 2009;</ref><ref type="bibr" target="#b2">Grü nberg et al., 2007</ref>). In this article, we describe an API for the PDB that allows advanced querying of information on PDB entries. Similar utilities exist for programmatic querying of other large bioinformatics databases (including Ensembl, PubChem and UniProt), but, to our knowledge, no such tool currently exists for the PDB (<ref type="bibr" target="#b4">Patient et al., 2008;</ref><ref type="bibr" target="#b5">Southern and Griffin, 2011;</ref><ref type="bibr" target="#b6">Strozzi and Aerts, 2011</ref>). Our tool facilitates integration of automatic PDB searches within existing Python bioinformatics workflows, and it simplifies the process of performing multiple searches based on the results of existing searches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Implementation</head><p>The PDB currently uses a RESTful API that allows retrieval of information via standard HTML verbs, such as POST/GET/PUT/etc. All advanced query types can be represented by XML. PyPDB converts nested dict() objects into structured XML strings, performs searches using these strings and then parses the XML search results back into nested dict() objects. Most query and search results are represented either as native Python dict() or list() objects depending on their type. PyPDB supports retrieval but not local manipulation of raw data files (.pdb,.cif,.mcif, etc.) available in the PDB, as there are already libraries for manipulating these files included in existing Python toolkits, such as the Biopython module Bio.PDB (<ref type="bibr" target="#b3">Hamelryck and Manderick, 2003</ref>). Bio.PDB enables local.pdb analysis like secondary structure prediction and neighbor searching, as well as internet retrieval of the full PDB and single files using its get_all_entries and retrieve_pdb_file methods. However, Bio.PDB does not currentlysupport keyword querying or advanced search, making PyPDB complementary to Bio.PDB's extensive range of capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Features</head><p>PyPDB can search the PDB by keyword, author, publication date and experimental method, as well as by specific sequence motifs. For individual PDB IDs, retrievable information ranges from metadata (date of posting, authors, etc.) to the full. pdb data file stored with an entry. Standard information such as gene ontology, ligand information and protein family information can be accessed. PyPDB can also perform BLAST searches. A list of the most common functions is available in<ref type="figure" target="#tab_1">Table 1</ref>. A full listing of the available methods is given in the documentation. The arguments, keywords and outputs for each function are also described in each function's docstring, which can be accessed with help(name_of_function)<ref type="figure" target="#fig_0">Figure 1</ref>shows an example script in an iPython notebook. The find_dates() method creates a query dict() and structures it for the PDB format (by default, string arguments are treated as keyword searches), and it then sends this query to the PDB by internally calling PyPDB's make_query and do_search() methods. The search returns a list of strings representing four-character PDB IDs, and this function then tabulates the deposition dates associated with each PDB ID. The last code block plots the number of PDB IDs found for each year, representing popularity over time of the original search term (in this case, the CRISPR/Cas9 gene-editing method).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Example usage</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Extensibility</head><p>PyPDB includes most of the common types of operations involved when working with the PDB. However, the depth and range of data represented in the PDB may require eventual support for additional functions. Because PyPDB primarily operates by converting native Python dict() objects into valid XML strings, such operations are straightforward to implement. The full code is available on the GitHub website, and forks and pull requests are encouraged.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>The library described here provides direct querying of the PDB using the Python programming language. This API complements the existing PDB GUI and XML API by introducing the ability to directly retrieve information from the PDB from within existing Python bioinformatics workflows. The use of native Python datatypes to represent queries simplifies conducting multiple searches with similar queries, and it allows the individual PDB IDs returned in search results to be examined from within the same programming workflow as the original search. The latest stable release of PyPDB is available on PyPI and can be installed with the command pip install pypdb. The source code of all versions of PyPDB is available at https://github.com/williamgil pin/pypdb, and full documentation is available at http://williamgil pin.github.io/pypdb_docs/html/. iPython notebooks containing usage examples are also available on the GitHub website.Note: Additional functions provided in the documentation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig.1.</head><figDesc>Fig. 1. Example PyPDB workflow in an iPython notebook</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com Bioinformatics, 32(1), 2016, 159–160 doi: 10.1093/bioinformatics/btv543 Advance Access Publication Date: 14 September 2015 Applications Note</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><figDesc>Table 1. The primary PyPDB functions</figDesc><table>Function 
Description 

make_query 
Structure a search request into a dict() 
do_search 
Perform a search for PDB IDs 
get_all 
Get all active PDB IDs 
describe_pdb 
All metadata about PDB entry 
get_all_info 
All information deposited in PDB entry 
get_pdb_file 
Retrieve.pdb/.cif/.xml file for PDB entry 
get_blast 
BLAST search results for PDB entry 
find_papers 
Find papers associated with keyword 
find_authors 
Find authors associated with keyword 

</table></figure>

			<note place="foot">at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">W.Gilpin at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgement</head><p>The author thanks Sebastian Doniach for his helpful suggestions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding</head><p>This work was supported by the National Science Foundation Graduate Research Fellowship<ref type="bibr">[</ref></p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">The Protein Data Bank</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<forename type="middle">M</forename>
				<surname>Berman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nucleic Acids Res</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="235" to="242" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Biopython: freely available Python tools for computational molecular biology and bioinformatics</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">J</forename>
				<surname>Cock</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="1422" to="1423" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Biskit—a software platform for structural bioinformatics</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Grü Nberg</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="769" to="770" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">PDB file parser and structure class implemented in Python</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Hamelryck</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Manderick</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="2308" to="2310" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">UniProtJAPI: a remote API for accessing UniProt data</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Patient</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="1321" to="1322" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">A Java API for working with PubChem datasets</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">R</forename>
				<surname>Southern</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">R</forename>
				<surname>Griffin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="741" to="742" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">A Ruby API to query the Ensembl database for genomic features</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Strozzi</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Aerts</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="1013" to="1014" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>