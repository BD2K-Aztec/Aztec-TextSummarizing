
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:57+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Data and text mining Muxstep: an open-source C 11 multiplex HMM library for making inferences on multiple data types</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Petar</forename>
								<surname>Veli Ckovi</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Laboratory</orgName>
								<orgName type="institution">University of Cambridge</orgName>
								<address>
									<postCode>CB3 0FD</postCode>
									<settlement>Cambridge</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Pietro</forename>
								<surname>Li</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Laboratory</orgName>
								<orgName type="institution">University of Cambridge</orgName>
								<address>
									<postCode>CB3 0FD</postCode>
									<settlement>Cambridge</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Data and text mining Muxstep: an open-source C 11 multiplex HMM library for making inferences on multiple data types</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note type="submission">Received on February 10, 2016; revised on March 21, 2016; accepted on April 6, 2016</note>
					<note>*To whom correspondence should be addressed. Associate Editor: Jonathan Wren Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: With the development of experimental methods and technology, we are able to reliably gain access to data in larger quantities, dimensions and types. This has great potential for the improvement of machine learning (as the learning algorithms have access to a larger space of information). However, conventional machine learning approaches used thus far on single-dimensional data inputs are unlikely to be expressive enough to accurately model the problem in higher dimensions ; in fact, it should generally be most suitable to represent our underlying models as some form of complex networksng;nsio with nontrivial topological features. As the first step in establishing such a trend, we present muxstep, an open-source library utilising multiplex networks for the purposes of binary classification on multiple data types. The library is designed to be used out-of-the-box for developing models based on the multiplex network framework, as well as easily modifiable to suit problem modelling needs that may differ significantly from the default approach described. Availability and Implementation: The full source code is available on GitHub: https://github.com/</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Machine learning algorithms that tackle problems such as classification, clustering and decoding have been frequently found in a variety of applications, a significant share of which is of bioinformatical nature.<ref type="bibr" target="#b5">Larra~ naga et al. (2006)</ref>have presented a review of these applications, which includes but is not limited to knowledge extraction, genomics and proteomics, systems biology and text mining. In a variety of fields, perhaps especially bioinformatics, the algorithms can be faced with learning from multiple types of data simultaneously. The exact ways in which the processes producing each data type are connected may well be unknown or incompletely understood, which often results in having to make certain assumptions on their form (to make the problem tractable). One possible assumption is to model these 'inter-process connections' as multilayer networks (<ref type="bibr" target="#b4">Kivel€ a et al., 2014</ref>); in particular, the special case of multiplex networks could be very appropriate while still maintaining tractability. Informally, a multiplex network is a multi-layered graph in which each layer is built over the same set of nodes, and there may exist edges between nodes in different layers. This models. suitability arises from the fact that there exists a wide variety of systems exhibiting 'natural' multiplexity: social networks and epidemics modelling (<ref type="bibr" target="#b3">Granell et al., 2014</ref>), transportation networks (<ref type="bibr" target="#b0">Cardillo et al., 2013</ref>), biochemical and genetic networks (<ref type="bibr" target="#b6">Stark et al., 2006</ref>) and research communities (<ref type="bibr" target="#b1">De Domenico et al., 2015</ref>), to name a few. We have developed the muxstep library motivated by the examples above, as the (to the best of our knowledge) first publicly available machine learning library acquiring this methodology. The problem we focus on is the very common problem of binary classification (the Supplementary Materials also detail workflows thatextend it to k-ary classification). Briefly, muxstep is designed to process any ordered sequence of data points, where each data point is actually a tuple of several real-valued data types. Furthermore, it is possible to assign a discrete 'sub-output' to each tuple in the sequence, thus encompassing a kind of mixture model. The muxstep library and this applications note are designed with the following primary goals in mind: (i) Out-of-the-box usefulness for new problems, and providing an overview of its essential internals and a worked case study in a way that makes it easy for bioinformaticians to develop models based on multilayer networks; (ii) Ease of extending (in the spirit of open-source), with clear descriptions of the most common ways to extend it; (iii) User-friendliness and potential educational value of its codebase, with a well-structured coding style and an abundance of comments and explanations of key algorithms involved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Implementation</head><p>The muxstep library is implemented in C þþ and is not dependent on any libraries outside of the C þþ11 standard template library. In order to build the library from source (or link it against other C þþ code), clang þþ is required; on Mac OS X, this compiler is installed by default. The library is capable of four essential actions: (i) Creating (randomised) models with a given number of nodes, or copying existing models; (ii) Training the models on a set of sequences for which it is known whether they belong in the first (positive) or the second (negative) class; (iii) Classifying new (unseen) sequences using a trained model; (iv) Storing the model parameters for later use. The primary tasks of training and classification are performed by using established algorithms; the Baum-Welch algorithm is used to train individual Gaussian mixture hidden Markov model (GMHMM) layers based on each data type separately. Afterwards, NSGA-II by<ref type="bibr" target="#b2">Deb et al. (2002)</ref>is used to train the interlayer transition weights between them. Finally, treating the entire structure as a large-scale GMHMM, the forward algorithm is used to evaluate likelihoods for new sequences to be used for classification. The full pipeline is illustrated by<ref type="figure">Figure 1</ref>. We have fully described the theoretical foundations of the model (as well as an application to classifying patients for breast invasive carcinoma) in Veli ckovi c and Li o (2015) important details of this case study are outlined, for convenience, in the supplementary data. highly beneficial to users needing to properly handle multiple types of data simultaneously. The full source code of muxstep is freely available on the corresponding author's GitHub profile and licensed under the MIT license.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding</head><p>We would like to thank the EU grant EpiHealthNet. Conflict of Interest: none declared.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>V C The Author 2016. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 2562 Bioinformatics, 32(16), 2016, 2562–2564 doi: 10.1093/bioinformatics/btw196 Advance Access Publication Date: 13 April 2016 Applications Note</figDesc><table></table></figure>

			<note place="foot">at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="3"> Usage Within the repository, we have provided an example C þþ source file illustrating the basic workflow while making use of the muxstep library. The source is located in example/folder, along with auxiliary data used for training and testing within the example. The example is well-commented and covers a method for extracting the training and testing data into a data structure suitable for the classifier, creating, training and classifying on the model, and methods for storing its parameters in a file for later use, as well as creating a model from such a file. The supplementary data contains a full manual on how to install and use muxstep, including with it the detailed guidelines on how to modify parts of the library to suit particular requirements. These include, but are not limited to: (i) Disabling the use of sub-outputs; (ii) Using output distributions different than the Gaussian distribution; (iii) Computing confidence intervals for the obtained output sequence likelihoods. For convenience, we also provide two auxiliary tools within the test/folder which should be helpful with testing the generated models: • A synthetic data generator (contained within test/syn_gen/), which can generate normally distributed sequence data using a given parameter file. • An evaluation suite (contained within test/classifier/), capable of performing k-fold crossvalidation on a set of sequences with known labels to evaluate the model&apos;s performance by computing various metrics such as the accuracy, sensitivity, MCC, F 1 score etc. It is also capable of performing noise testing, evaluating the robustness of the model in the presence of Gaussian noise on the data. 4 Conclusion In this applications note we have presented muxstep, a C þþ library for binary classification on multiple data types, taking advantage of hidden Markov models and multiplex networks. To the best of our knowledge, it is the first of its kind, and should serve as both a valuable tool for bioinformaticians (as well as other scientists in a variety of fields) and a foundation for future advancements in the area of multi-omic data integration. The library has been designed not only to be simple to use as compiled from source, but also to be easily extensible. We intend to continue developing, extending and maintaining it, and we hope that the work described here will represent an important step towards a new class of software implementations within the context of complex multilayer networks, which should be Fig. 1. A diagram representing all the steps in the training and classification algorithms The training algorithm initially partitions the training set ~ s into sequences belonging to class C 1 and those belonging to class C 2. Then it produces two models (one trained on all the sequences in C 1 , the other on all the sequences in C 2 ). The models are produced by first training the individual layers on the sequences containing the individual data types only (e.g. for a sequence [(1, 2), (3, 3)], the layers will be trained on sequences [1, 3] and [2, 3], respectively). Then the layers are connected with appropriate interlayer transition weights using NSGA-II. The classification algorithm queries these two models for the likelihood Pð~ y jC i Þ of producing an unseen sequence, ~ y , and chooses the class C corresponding with the model more likely to have produced the sequence. N.B. this can easily and intuitively be extended to more than two classes; see the supplementary data for more information (Color version of this figure is available at Bioinformatics online.) Multi-omic data integration</note>

			<note place="foot">P.Veli ckovi c and P.Li o at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Emergence of network features from multiplexity</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Cardillo</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific Reports</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page">1344</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Identifying modular flows on multilayer networks reveals highly overlapping organization in interconnected systems</title>
		<author>
			<persName>
				<forename type="first">De</forename>
				<surname>Domenico</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physical Review X</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">A fast and elitist multiobjective genetic algorithm: NSGAII</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Deb</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Evolutionary Computation</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="182" to="197" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Competing spreading processes on multiplex networks:awareness and epidemics</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Granell</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physical Review E</title>
		<imprint>
			<biblScope unit="page" from="90" to="1344" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Multilayer networks</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Kivel€ A</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Complex Networks</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="203" to="271" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Machine learning in bioinformatics</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Larra~ Naga</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Briefings in Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="86" to="112" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">BioGRID: a general repository for interaction datasets</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Stark</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nucleic Acids Research</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="539" to="539" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
	<note>suppl. . 1</note>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">Molecular multiplex network inference using Gaussian mixture hidden Markov models</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Veli Ckovi C</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Li O</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Complex Networks Advance Access</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>