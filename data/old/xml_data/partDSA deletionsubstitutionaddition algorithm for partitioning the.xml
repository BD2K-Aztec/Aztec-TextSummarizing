
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:53+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Data and text mining partDSA: deletion/substitution/addition algorithm for partitioning the covariate space in prediction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2010">2010</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Annette</forename>
								<forename type="middle">M</forename>
								<surname>Molinaro</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Division of Biostatistics</orgName>
								<orgName type="institution">Yale University Schools of Public Health and Medicine</orgName>
								<address>
									<addrLine>60 College St</addrLine>
									<postCode>06519</postCode>
									<settlement>New Haven</settlement>
									<region>CT</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Karen</forename>
								<surname>Lostritto</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Division of Biostatistics</orgName>
								<orgName type="institution">Yale University Schools of Public Health and Medicine</orgName>
								<address>
									<addrLine>60 College St</addrLine>
									<postCode>06519</postCode>
									<settlement>New Haven</settlement>
									<region>CT</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Mark</forename>
								<surname>Van Der Laan</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">Division of Biostatistics</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<addrLine>Earl Warren Hall #7360</addrLine>
									<postCode>94720-7360</postCode>
									<settlement>Berkeley, Berkeley</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Data and text mining partDSA: deletion/substitution/addition algorithm for partitioning the covariate space in prediction</title>
					</analytic>
					<monogr>
						<title level="j" type="main">BIOINFORMATICS ORIGINAL PAPER</title>
						<imprint>
							<biblScope unit="volume">26</biblScope>
							<biblScope unit="issue">10</biblScope>
							<biblScope unit="page" from="1357" to="1363"/>
							<date type="published" when="2010">2010</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btq142</idno>
					<note type="submission">Advance Access publication April 7, 2010 Received on January 3, 2010; revised on March 29, 2010; accepted on March 30, 2010</note>
					<note>[11:12 24/4/2010 Bioinformatics-btq142.tex] Page: 1357 1357–1363 Associate Editor: Jonathan Wren Contact: annette.molinaro@yale.edu Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Until now, much of the focus in cancer has been on biomarker discovery and generating lists of univariately significant genes, as well as epidemiological and clinical measures. These approaches, although significant on their own, are not effective for elucidating the synergistic qualities of the numerous components in complex diseases. These components do not act one at a time, but rather in concert with numerous others. A compelling need exists to develop analytically sound and computationally advanced methods that elucidate a more biologically meaningful understanding of the mechanisms of cancer initiation and progression by taking these interactions into account. Results: We propose a novel algorithm, partDSA, for prediction when several variables jointly affect the outcome. In such settings, piecewise constant estimation provides an intuitive approach by elucidating interactions and correlation patterns in addition to main effects. As well as generating &apos;and&apos; statements similar to previously described methods, partDSA explores and chooses the best among all possible &apos;or&apos; statements. The immediate benefit of partDSA is the ability to build a parsimonious model with &apos;and&apos; and &apos;or&apos; conjunctions that account for the observed biological phenomena. Importantly, partDSA is capable of handling categorical and continuous explanatory variables and outcomes. We evaluate the effectiveness of partDSA in comparison to several adaptive algorithms in simulations; additionally, we perform several data analyses with publicly available data and introduce the implementation of partDSA as an R package.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>By pinpointing and targeting specific early events in disease development, clinicians aim toward a more preventative model of attacking cancer. These early events can be measured as genomic, epidemiologic and/or clinical variables. Genomic variables can be measured on expression or comparative genomic hybridization (CGH) microarrays, epidemiologic variables with questionnaires, * To whom correspondence should be addressed. and clinical variables with pathology and histology reports. These measurements are then used to predict clinical outcomes such as number of nodes involved or response to treatment as measured by decrease in tumor size. In theory, given the interactions of biological components inherent in carcinogenesis, model building should require the examination of all possible combinations of variables. However, in practice, it is frequently impossible to search over this entire set. Tree-based methods, which rely on the construction of piecewise constant estimators avoid this problem by attempting to approximate the search using recursive binary partitioning. Perhaps the most popular methodology in use today is classification and regression trees (CART ;<ref type="bibr" target="#b0">Breiman et al., 1984</ref>). There are three main aspects to this tree-structured estimation scheme: (i) the splitting rule for generating the candidate predictors; (ii) the selection of a 'right-sized' tree, referred to as pruning; (iii) estimation of the parameter of interest within each terminal node. Solutions to each of these problems typically involve optimization of a lossbased criterion. Subsequently, the final CART model is represented primarily by a list of<ref type="bibr">'and'statements.</ref>Although the CART algorithm does not intentionally build 'or' statements, it is sometimes possible post-analysis to form such conjunctions with two or more terminal nodes. Unlike CART, which fits a piecewise constant estimate within every terminal node, multivariate adaptive regression splines (MARS;<ref type="bibr" target="#b1">Friedman, 1991</ref>) fit piecewise linear functions. The result is a function that is continuous with respect to a continuous covariate. MARS was originally developed for a continuous outcome although adaptations are possible for those that are categorical. After CART and MARS, the most analogous method in the statistical literature is Logic Regression, a novel algorithm that constructs predictors as Boolean combinations of binary covariates (<ref type="bibr" target="#b3">Kooperberg et al., 2001;</ref><ref type="bibr" target="#b10">Ruczinski et al., 2003</ref>). One restriction of Logic Regression is that it does not allow for continuous covariates, only binary. Therefore, to accomplish the task of aggressively searching a highly complex variable space with a variety of variable types, we propose partDSA: a deletion/substitution/addition algorithm for partitioning the covariate space in prediction. In addition to generating 'and' statements, partDSA explores and chooses the best among all possible 'or' statements to build the most parsimonious model. There are numerous motivating examples of this in carcinogenesis. For instance, during the cell cycle there may be several regions of DNA that have been altered leading to a gain on one chromosome and a loss on another. Although these<ref type="bibr">[11:12 24/4/2010 Bioinformatics-btq142.tex]</ref>Page: 1358 1357–1363</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.M.Molinaro et al.</head><p>two mutations may be mutually exclusive, the end result could be similar. As such, we would want to account for 'or' orderings, e.g. 'loss at locus 1 'or' loss at locus 3 'and' gain at locus 2 predicts outcome of 'y', in addition to a list of 'and' statements. In addition, partDSA allows for variables measured as continuous, categorical or ordinal that include covariates from various types of arrays as well as histology, epidemiology and pathology measures. We suggest that partDSA is a flexible and aggressive data-adaptive tool that, depending on the unknown underlying data-generating distribution, will perform as well as, if not better than, previously suggested approaches. For example, CART utilizes a limited set of moves amounting to forward selection (node splitting) followed by backward elimination (tree pruning). In contrast, our proposed algorithm will not only split partitions (nodes in tree estimation) it will also combine and substitute partitions. These additional moves will allow us to unearth intricate correlation patterns and further elucidate interactions in addition to main effects. In the following, we introduce the key elements of partDSA and relevant notation. We report results from both simulations and publicly available data from a cancer study. Lastly, we summarize the method and discuss the advantages and potential limitations of our method as well as the direction of future research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">METHODS</head><p>partDSA is based on a unified loss-based methodology for estimator construction, selection and performance assessment employing crossvalidation. In this approach, the parameter of interest is defined as the risk minimizer for a suitable loss function and candidate estimators are generated using this (or possibly another) loss function. Cross-validation is applied to select an optimal estimator among the candidates. Our general statistical framework of the unified loss-based methodology and its theoretical foundations are described in Van der Laan and Dudoit (2003) and, more specific to recursive partitioning, in<ref type="bibr" target="#b5">Molinaro et al. (2004)</ref>. To motivate the partDSA algorithm, we begin with the data structure and loss functions specific to univariate outcome prediction. Subsequently, partDSA is formally introduced, including the main components of moves, ordering, and risk functions.</p><p>Observed data structure: in the univariate outcome prediction problem, we are interested in building and evaluating the performance of a rule or procedure fitted to n independent observations, corresponding to the n independent subjects in a study. Accordingly, we observe a random sample</p><formula>of n i.i.d. observations X 1 ,...,X n , where X = (Y ,W</formula><p>) contains a univariate outcome Y and a collection of p measured explanatory variables, or features,</p><formula>W = (W 1 ,...,W p )</formula><p>. For example, in microarray experiments W includes RNA or protein expression, chromosomal amplification and deletions or epigenetic changes; while in proteomic data, it includes the intensities at the mass over charge (m/z) values. The collection of features may also contain explanatory variables measured in the clinic and/or by histopathology such as a patient's age or tumor stage. We denote the distribution of the data structure X by F X. The variables that constitute W can be measured on a continuous, ordinal or categorical scale. Although this covariate process may contain both time-dependent and time-independent covariates, we will focus on the time-independent W. The univariate outcome Y may be a continuous measure such as tumor size, a categorical or ordinal measure such as stage of disease, or a binary measure such as disease status. The goal of univariate outcome prediction is to predict Y from the collection of features, W , via the use of statistical learning algorithms. Loss functions for univariate outcome prediction: partDSA employs loss functions for two key stages of model building: separating the observed sample into different groups (or partitions) and selecting the final prediction model. More generally, in the context of piecewise constant estimation (described in Section 2.1.1), the candidate estimators are generated by partitioning a suitably defined covariate space into disjoint and exhaustive partitions. As illustrated in<ref type="bibr" target="#b5">Molinaro et al. (2004)</ref>, univariate outcome prediction, multivariate outcome prediction and density estimation can each be handled by specifying a suitable loss function. Here, we will focus solely on univariate outcome prediction and refer the reader to the aforementioned for the loss-functions and implementation of the two other scenarios. Where we observe n observations of X 1 ,...,X n , the parameter of interest, ψ 0 , is a mapping ψ : S → IR, from a covariate space S into the real line IR. Denote the parameter space by. The parameter ψ 0 can be defined in terms of a loss function, L(X,ψ), as the minimizer of the expected loss, or risk. That is, ψ 0 is such that</p><formula>E F X [L(X,ψ 0 )] = L(x,ψ 0 )dF X (x) ≡ min ψ∈ L(x,ψ)dF X (x) = min ψ∈ E F X [L(X,ψ)].</formula><p>The purpose of the loss function L is to quantify performance. Thus, depending on the parameter of interest, there could be numerous loss functions from which to choose. If the outcome Y is continuous, frequently the parameter of interest is the conditional mean ψ 0 (W ) = E[Y | W ] which has the corresponding squared error loss function, L(X,ψ) = (Y −ψ(W )) 2. Another common parameter of interest is the conditional median ψ 0 (W ) = Med<ref type="bibr">[Y | W ]</ref>, which has the corresponding absolute error loss function L(X,ψ) =| Y −ψ(W ) |. If the outcome Y is categorical, the parameter of interest involves the class conditional probabilities, Pr 0 (y|W ). For the indicator loss function, L(X,ψ) = I(Y = ψ(W )), the optimal parameter is ψ 0 (W ) = argmax y Pr 0 (y | W ), the class with maximum probability given covariates W. One could also use a loss function that incorporates differential misclassification costs. Note that in the standard CART methodology,<ref type="bibr" target="#b0">Breiman et al. (1984)</ref>favor replacing the indicator loss function in the splitting rule by measures of node impurity, such as the entropy, Gini, or twoing indices. The indicator loss function is still used for pruning and performance assessment. It turns out that the entropy criterion corresponds to the negative log-likelihood loss function, L(X,ψ) =−logψ(X), and parameter of interest ψ 0 (X) = Pr 0 (Y |W ). Likewise, the Gini criterion corresponds to the loss function L(X,ψ) = 1−ψ(X), with parameter of interest ψ 0 (X) = 1 if Y = argmax y Pr 0 (y | W ) and 0 otherwise. These modifications amount to using different loss functions for the same parameter at different stages of the model-building process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">partDSA</head><p>As an alternative to previous methods for generating piecewise constant estimates, we describe a completely data adaptive, aggressive and flexible algorithm to search the entire covariate space. Here, we detail how to approximate the parameter space by a sequence of subspaces of increasing dimension and generate candidate estimators for each subspace as well as define the moves and specific ordering of partDSA.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.1">Generating candidate piecewise constant estimators</head><p>As defined,</p><formula>X = (Y ,W</formula><p>), where Y is the random outcome and W is a p-vector of baseline covariates. Define a countable set of basis functions, {φ j : j ∈ IN}, indexed by the non-negative integers IN. These basis functions are simply set indicators {R j : j ∈ I}, which form a partition of the covariate space S, where I is an index set, I ∈ I, and I is a collection of subsets of IN. Here, R j denotes partitions of S that are disjoint (R j ∩R j =∅, j = j ) and exhaustive (S = ∪ j∈I R j ). Now, every parameter ψ ∈ can be written (and approximated) as a finite linear combination of the basis functions</p><formula>ψ I,β (·) ≡ j∈I β j φ j (·),</formula><p>where for a given index set I ∈ I, the coefficients β = (β 1 ,.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>..,β</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>partDSA</head><p>The complete parameter space can be written as the collection of basis functions {φ j : j ∈ IN} and represented by</p><formula>≡{ψ I,β (·) = j∈I β j φ j (·) : β ∈ B I ,I ∈ I}.</formula><p>In general, it is not possible to consider all candidate estimators ψ ∈ . Define a sieve, { k }, of subspaces k ⊂ , of increasing dimension approximating the complete parameter space as</p><formula>k ≡ ⎧ ⎨ ⎩ ψ I,β (·) = j∈I β j φ j (·) : β ∈ B I , I, |I|≤k ⎫ ⎬ ⎭ ,</formula><p>where k denotes the index set size (i.e. number of basis functions). Now, for every k we want to find the estimator that minimizes the empirical risk over the subspace k. That can be done by initially optimizing over the regression coefficients β ∈ B I for a given index set I and then optimizing over the index sets I. Estimation of regression coefficients β for a given subset of basis functions:</p><formula>given index sets I ∈ I, define I-specific subspaces I ≡{ψ I ,β : β ∈ B I }.</formula><p>For each subspace I , the regression coefficients β are estimated by minimizing the empirical risk, i.e.</p><formula>ˆ β I = β I (P n ) ≡ argmin β∈B I L(x,ψ I,β )dP n (x) = argmin β∈B I n i=1 L(X i ,ψ I,β ),</formula><p>where P n denotes the empirical measure. It is possible to write the I-specific estimators asˆψasˆ</p><formula>asˆψ I = I (·|P n ) ≡ ψ I,β I(Pn ) ,I ∈ I.</formula><p>An example of this is with the squared error loss function; ˆ ψ I is then the least squares linear regression estimator corresponding with the variables identified by the index set I.</p><p>Optimization over the index sets I: partDSA utilizes three specific moves, or step functions (described below), to generate index sets (i.e. different partitionings of the covariate space) with the goal of minimizing a risk function over all the generated index sets. For a particular partitioning, or index set, I ∈ I, the empirical risk of the I-specific estimator is</p><formula>I → f 1 (I) ≡ L(x, ˆ ψ I )dP n (x) = 1 n n i=1 L(X i , ˆ ψ I ), wherê ψ I = I (·|P n</formula><p>) is an estimator based on the empirical distribution P n .</p><p>With the empirical risk function, the algorithm searches to minimize it over all index sets I of size less than or equal to k, where k = 1,...,K. For each k there is a best partitioning that can be denoted</p><formula>I * k (P n ) ≡ argmin {I:|I|=k,I∈I} f 1 (I).</formula><p>The algorithm searches for an approximation of</p><formula>I * k (P n )</formula><p>, which is designated as I k (P n ) and the resulting estimator asˆψasˆ asˆψ k = k (P n ). This results in a sieve of increasingly complex estimators indexed by k. Cross-validation is employed for two purposes: to select an optimal estimator among the candidates generated in the sieve and to assess the performance of the resulting estimator (<ref type="bibr" target="#b4">Molinaro and Lostritto, 2010;</ref><ref type="bibr" target="#b6">Molinaro et al., 2005</ref>). Both are based on the chosen loss function. For selecting the optimal estimator, an alternative to cross-validation would be to minimize the empirical risk as a measure of error across the entire parameter space. However, this estimate would be highly variable and too data-dependent. Van der Laan and Dudoit (2003) derive finite sample and asymptotic optimality results for the cross-validation selector for general data-generating distributions, loss functions and estimators. The implication of these results is that selection via cross-validation is adequate in thorough searches of large parameter spaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.2">Algorithm moves</head><p>In addition to generating 'and' statements, partDSA explores and chooses the best among all possible 'or' statements by employing three different step functions: Deletion, Substitution, and Addition. These functions generate index sets I, i.e. partitionings, and map the index set I ∈ I of size k into sets of index sets of size k −1, k, and k +1. The goal is to use these moves to minimize a risk function based on the chosen loss over all the generated index sets. They are defined as: @BULLET Deletion: A deletion move forms a union of two partitions of the covariate space regardless of their spatial location, i.e. the two partitions need not be contiguous. Formally, given a particular partitioning, i.e. an index set I ∈ I, which consists of k basis functions representing indicator functions of partitions, such that |I|=k, we define the set DEL(I) ⊂ I as that which contains all possible unions of two disparate partitions. This new set, DEL(I), is of size C k 2. @BULLET Substitution: A substitution move divides two disparate partitions into two (disjoint and mutually exhaustive) subsets each and then forms combinations of the four subsets resulting in two new partitions. Thus, this step forms unions of partitions (or subsets within the partitions) as well as divides partitions. Formally, given an index set I ∈ I, where |I|=k, we define the set SUB(I) ⊂ I by splitting all partitions into two subsets each and subsequently forming all unique combinations of the 2k subsets. This new set, SUB(I), is of size 6 * C k 2 , due to the six unique combinations for every two partitions (i.e. four subsets). @BULLET Addition: An addition move splits one partition into two distinct partitions. Formally, given an index set I ∈ I, where |I|=k, we define the setSimilar to CART, 'best split' is the split that most decreases the residual sum of squares for the entire space. However, as all splits are individually examined it is simply the split that minimizes the within-node (i.e. partition) sum-of-squares. By implementing these moves, a sieve of increasingly complex predictors can be generated. Each of these predictors represents the 'best' predictor of size k, where k = 1,...,K. As previously mentioned, to select the best partitioning, i.e. index set, cross-validation is used. A unique and highly important contribution of partDSA is through the Deletion and Substitution steps as this is when unions of partitions are formed. These unions of potentially disparate partitions result in 'or' statements. Thus, we can define subsets of the partitions R j of the covariate space S as S l , where each partition can be a union of several subsets or smaller partitions of the covariate space. The subsets S l themselves are disjoint (S l ∩S l =∅, l = l ) and exhaustive (S =∪ l∈I S l ). The predicted value for each of the partitions is constant resulting in a histogram estimate of the regression surface. This allows basis functions, which may be comprised of numerous 'and' and 'or' statements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.3">Algorithm ordering Having</head><p>outlined the three moves, Deletion, Substitution and Addition and the risk functions, the ordering is the final step of the algorithm. Minimizing the empirical risk function results in a sieve of estimators indexed by k. The vector BEST (k) will be used to store the estimated empirical risk corresponding with the best partitioning of size k. Given the goal of minimizing I → f 1 (I), there are three steps to this process:</p><p>(1) Initiate Algorithm. The algorithm is initiated by setting the running partitioning, I 0 , to the null set. For piecewise constant regression, the null set is that set which includes the entire covariate space as one partition.</p><formula>I − ≡ argmin I∈Del(I 0 ) f 1 (I). If f (I − ) &lt; BEST (k −1) then BEST (k −1) = f (I − ), I 0 = I − and return to *.</formula><p>@BULLET Else, find an optimal updated I = of size k among all allowed substitution moves, where</p><formula>I = ≡ argmin I∈Sub(I 0 ) f 1 (I). If f (I = ) &lt; BEST (k) then BEST (k) = f (I = ), I 0 = I = and return to *.</formula><p>@BULLET Else, find an optimal updated I + of size k +1 among all allowed addition moves, where</p><formula>I + ≡ argmin I∈Add(I 0 ) f 1 (I). If f (I + ) &lt; BEST (k +1) then BEST (k +1) = f (I + ), I 0 = I + and return to *.</formula><p>(3) Stop Algorithm. If |I|=COG stop the algorithm.</p><p>When the algorithm is stopped there is a list of best estimators I k (P n ), where k = 1,...,COG. As detailed in Section 2.1.1, cross-validation is used to select the best k. An example in two dimensions (i.e. with Z 1 and Z 2 as covariates) is shown in<ref type="figure" target="#fig_0">Figure 1</ref>. partDSA is initiated with all observations in one partition. After performing Addition and Deletion steps the partitioning reads:</p><p>@BULLET Given a low value for Z 1 AND a low value for Z 2 , the patient has the highest value of the outcome Y .</p><p>@BULLET Given a high value of Z 1 AND a high value of Z 2 , the patient has the lowest value of the outcome Y .</p><p>@BULLET Given a low value of Z 1 AND a high value of Z 2 OR a low value of Z 2 AND a high value of Z 1 , the patient has an intermediate value of the outcome Y .</p><p>There are several ways to limit the number of basis functions for the risk function. The first is to restrict the minimum number of observations in a partition R j or subset S l such that no more splits can occur if that minimum is reached. In CART, this is referred to as 'minbucket.' The second is to require a prespecified improvement in the empirical risk before the BEST (·) can be replaced (we refer to this as minimum percent difference, or MPD). For example, for a new estimator of size k to replace the current best estimator of size k, with MPD = 0.3, the new empirical risk must be 30% less than that of the best estimator's.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RESULTS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Synthetic data</head><p>To understand the flexibility and aggressive nature of partDSA, we compared it to the best adaptive algorithms in the statistical literature: CART (<ref type="bibr" target="#b0">Breiman et al., 1984</ref>), MARS (<ref type="bibr" target="#b1">Friedman, 1991</ref>) and Logic Regression (<ref type="bibr" target="#b10">Ruczinski et al., 2003</ref>). All four algorithms can be used for modeling categorical or continuous outcomes with binary predictors; while all but Logic Regression can also be used with continuous predictors. In the simulations reported below, forpartDSA and CART, the minimum number of observations per node was set to 20, the maximum number of partitions to 10 and the minimum percent difference to 0.01. For both, the best model was chosen by the 1+SE rule suggested in<ref type="bibr" target="#b0">Breiman et al. (1984)</ref>. We used the R packages partDSA and rpart, to run partDSA and CART, respectively. For MARS, we used the R package earth, the penalty was set to two, the number of interactions to four, and the maximum number of model terms to 15. The best model was chosen to minimize the GCV score. For Logic Regression, we used the R package LogicReg, the penalty was set to two and the best model was chosen by randomization. In the results, model size refers to the number of final partitions for partDSA, terminal nodes for CART, terms for MARS and leaves for Logic Regression. In addition to model selection measures, the error rate of the fitted model relative to the true model is reported for each simulation. The first simulation, similar in nature to that of<ref type="bibr" target="#b10">Ruczinski et al. (2003)</ref>, was generated with 50 training sets each containing 250 observations and nine binary covariates. Fifty independent test sets with 1000 observations each were also generated to evaluate the performance of the predictors built on the training sets. For both sets, variables X1 and X3−X9 had an independent Bernoulli(0.5) distribution. Variable X2 had a Bernoulli(0.2) distribution if X1 = 0 and Bernoulli(0.8) otherwise. A continuous outcome was generated from the model Y = 5 * (X1∨X2)+N(0,,), where = 3 if ( X1∧X2) and equals 1 otherwise. A CART tree representing this model is shown in<ref type="figure" target="#fig_2">Figure 2</ref>. This simulation generates most observations from either terminal node A or C with few in B. Additionally, nodes B and C have the same outcome. The smaller number of observations and higher variance (i.e. = 3) associated with terminal node B is a realistic scenario intended to illustrate the difference between CART and partDSA. Specifically, partDSA will combine terminal nodes B and C providing a more stable estimate of the outcome for those observations. The results are shown in<ref type="figure" target="#tab_1">Table 1</ref>. The second simulation was identical in setting to the first except the outcome was binary as opposed to continuous. The outcome was generated such that Y had a Bernoulli(0.1) distribution if ( X1∧ X2); a Bernoulli(0.9) distribution if X1; or a Bernoulli(0.6) distribution if ( X1∧X2). The results are shown in<ref type="figure" target="#tab_2">Table 2</ref>.</p><p>Page: 1361 1357–1363 partDSAThe third simulation includes continuous covariates. As a result, partDSA could only be compared to CART and MARS. Similar to the previous simulations, 50 training sets of 250 observations and 50 independent test sets of 1000 observations were generated. However, now X1−X9 have an independent Uniform(0,1) distribution. The outcome Y was distributed as follows: Y = 5 * (X1 ≤ 0.5∨X2 ≤ 0.15)+N(0,,), where = 4 if (X1 &gt; 0.5∧ X2 ≤ 0.15) and equals 1 otherwise. For partDSA and CART the minimum number of observations in each node was decreased to 15; while the penalty for MARS was increased to 5 and the degree was decreased to 2. The results are shown in<ref type="figure" target="#tab_3">Table 3</ref>. In all three simulations, partDSA chooses the correct predictors and builds a model of the appropriate size. Additionally, in comparison to the other algorithms, partDSA's selected model has the lowest error. CART also chooses the correct predictors but tends to build too small of a model (especially with a continuous outcome in the second simulation), which results in associated errors ranging from slightly larger to double that of partDSA's. MARS selects the two correct predictors but also an incorrect predictor leading to a larger model than necessary in all three settings. With a binary outcome, MARS's error is double that of partDSA's, while it is only marginally larger with a continuous outcome. Logic Regression selects the two correct predictors but has a tendency to also choose an incorrect predictor. This happens more frequently with a binary outcome resulting in too large of a final model. Results from additional scenarios are shown in the Supplementary Material including simulations with continuous covariates and a binary outcome (Simulation 4), a combination of continuous and binary covariates with a continuous outcome (Simulation 5), Simulations 1–5 with 500 observations in the training set, as well as 500 variables in Simulation 4 (see, Supplementary Tables 1–8).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Data analysis</head><p>In addition to synthetic data, we evaluated the performance of partDSA with publicly available data. One such analysis is presented here, while the others are included in the Supplementary Material. The chosen data analysis for presentation focuses on a diffuse large B-cell lymphoma (DLBCL) study as described in<ref type="bibr" target="#b9">Rosenwald et al. (2002)</ref>. The purpose of this study was to determine whether the prognosis of DLBCL patients is associated with molecular features of the tumors. As only 35–40% of DLBCL patients<ref type="bibr" target="#b9">Rosenwald et al. (2002)</ref>assigned subsets of the genes significantly associated with survival into four different gene signatures: germinal center B-cell (GCBcell; 151 genes), MHC class II (MHCII; 37 genes), lymph-node (LN; 357 genes) and Proliferation (Prolif; 1333 genes). For the purposes of their study,<ref type="bibr" target="#b9">Rosenwald et al. (2002)</ref>used a linear combination of the four gene signatures along with the BMP6 gene score in a Cox's proportional hazard model to predict a survival outcome. Here, we use the same gene signatures and scores as covariates in order to predict lymphoma subtype. For the purposes of our analysis, the total 240 patients were repeatedly divided into training and test sets each of size 120. The patients were randomly assigned to the training or test sets such that each subtype was proportionally represented. This stratification allows for equal representation of all three subtypes such that classification relying on majority consensus is not biased toward any of the three (<ref type="bibr" target="#b8">Quackenbush, 2004</ref>). In this analysis, the prediction errors among CART, partDSA, and MARS were compared. For CART and partDSA, the analysis conducted employed 10-fold cross-validation in the training set to select the best number of partitions, corresponding to the first minimum over the 10-folds of estimated error. The entire training set was then used to build a model of this selected size and the risk, i.e. prediction error, was subsequently assessed on the test set. The minimum number of observations in each node was set to 20, the maximum number of possible partitions to 10, and for partDSA, the minimum percent difference to 0.2. For MARS, the penalty was set equal to two, maximum number of interactions to four and maximum model size to 15. The analysis was repeated 50 times each time with a different split of the data into a training and test set.<ref type="figure" target="#tab_4">Table 4</ref>reports the average selected model size, the average number of unique variables and the average prediction error for the models chosen by the three algorithms. The models from partDSA and MARS result in similar error rates; both are slightly less than that of CART 's. Importantly, the model size for partDSA is almost half that of MARS meaning that partDSA is describing the same covariate space with fewer coefficients, i.e. more efficiently. Note, a naive estimator with no coefficients, i.e. the predicted value for the test set is set equal to the most frequent outcome value, would result in a test set error of 52%. For illustration purposes, the description of a partDSA model built with one split of the training/test sets follows. In this example, the best number of partitions as chosen by the first minimum of the 10-fold cross-validated error was four. The two gene signatures selected to build the partitions are GCBcell and proliferation. The final partitions and predicted subtypes can be written as:<ref type="figure" target="#tab_5">Table 5</ref>, the numbers of patients within each of the lymphoma subtypes are listed in the columns separately for the training and test sets. The true subtypes are separated in rows by the partDSA predicted subtype. Also, included is the prediction error. From this table, partitions two and four (both predict subtype GCB) have the lowest error for the training and test sets, misclassifying 13 patients in the training set and 17 in the test set. Partition three (predicts subtype ABC) has the next lowest prediction error for both sets, misclassifying 6 out of 27 resulting in a training set error of 22% and 8 out of 29 resulting in a test set error of 28%. The numbers in the first partition reflect the increased difficulty with classifying the Type III subtype. The overall prediction error for the training set is 25% and for the test set is 27.5%. The final model can also be shown graphically as seen in<ref type="figure">Figure 3</ref>, while a tree depicting the CART analysis for the same data is shown in<ref type="figure" target="#fig_0">Figure 1</ref>in the Supplementary Material. Here, for partDSA, the results are shown as a tree where the four terminal partitions are represented by the colors red, green, orange and purple. The data adaptivity of partDSA is visually represented by the same green color oval representing one final partition (similar to CART 's terminal nodes) with predicted GCB subtype. In comparison, the CART tree for the same data only splits on one variable (GCBcell signature) resulting in two terminal nodes with predicted subtypes of GCB and ABC (Supplementary<ref type="figure" target="#fig_0">Figure 1</ref>). Thus, the CART analysis does not allot any patients for the third subtype, Type III. Importantly, note that the partDSA partitioning shown in<ref type="figure">Figure 3</ref>is not equivalent to a CART tree. The reason is that a CART tree with the identical structure would estimate outcomes forof the corresponding subtypes that are also at risk of being pruned via cross-validation. Thus, by choosing the best of the 'or' statements in the form of a single partition, partDSA builds a more parsimonious model that maintains a greater number of observations in the final partitions and, consequently, is better able to estimate the parameter of interest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Implementation</head><p>partDSA is implemented as an R package (<ref type="bibr" target="#b7">Molinaro et al., 2009</ref>). Currently, the package accommodates continuous and categorical outcomes and covariates. The user has the choice of the v for v-fold cross-validation; size of the minimum partition, minbucket; largest number of partitions to explore, COG; minimum percent difference for splitting, MPD; and, loss function. The choices of loss functions are Gini and negative log-likelihood for categorical outcomes and the squared error for continuous outcomes. Additionally, partDSA is available in serial and parallel versions. As partDSA performs an exhaustive search of the covariate space, the running time of this algorithm is an important consideration. By implementing a parallel version the running time is quite reasonable. To demonstrate, we tested six datasets (available in R), five of them ran in under 30 s and the sixth ran in just over a minute. All simulations were run on the Yale University Life Sciences High Performance Computing Center's Bulldogi, a cluster of 170 Dell PowerEdge 1955 nodes, each containing 2 dual core 3.0 Ghz Xeon 64 bit EM64T Intel cpus, for a total of 680 cores. Each node has 16 GB RAM. The parameter values were set to: minbucket = 6, COG = 10, and MPD = 0.1, the defaults for the R package.<ref type="figure" target="#tab_6">Table 6</ref>shows the improvement in running time between a sequential and parallel version of partDSA.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">CONCLUSION</head><p>partDSA is a novel tool for generating a piecewise constant estimation sieve of candidate estimators based on an intensive and comprehensive search over the entire covariate space. The strength of this new algorithm is that it builds precise estimates of the parameter of interest based on 'and' and 'or' statements. These conjunctions allow combinations and substitutions of partitions for the purpose of discovering intricate correlation patterns and interactions in addition to main effects. As such, partDSA provides users an additional tool for their statistical toolbox. Depending on the application, partDSA will supersede other methods by being not only more aggressive but also more flexible. As seen in the synthetic and real data sections, as well as the Supplementary Material, partDSA consistently had a lower error than CART, MARS and, when applicable, Logic Regression. In addition, partDSA selected the correct variables and built more Page: 1363 1357–1363</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>partDSA</head><p>parsimonious models than the other algorithms. Importantly, due to partDSA's formation of an 'or' statement as a single partition, a greater number of observations are assigned to the final partitions in comparison to CART resulting in more precise and stable estimates of the parameter of interest (as described at the end of Section 3.2). Due to a focus on minimizing the empirical risk of an estimator, partDSA can accommodate numerous settings with either continuous or categorical outcomes. As a result, the user can decide which loss function is most appropriate for their application. In the partDSA R package, the squared error loss function is implemented for continuous outcomes as well as the Gini and negative log-likelihood loss functions for categorical outcomes. There are several directions for future work. First, with a continuous outcome, partDSA employs a squared error loss function for two key stages of model building: separating patients into different partitions and selecting the final prediction model. However, an immediate difficulty arises with censored survival data, for the set of observed event times cannot be treated as an uncensored sample; that is, we must modify the loss function so that it can accommodate censored outcome data in a meaningful way. Therefore, the first direction for future work is to expand partDSA for censored outcomes with several appropriate loss functions. Next, to assess the value of an individual variable in the current implementation, partDSA returns a simple frequency of the number of times a variable is selected for each partitioning. The second direction will include exploring more informative variable importance measures and including the relevant ones in the R package.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig.1.</head><figDesc>Fig. 1. Two dimensional display of partDSA results. Two disparate partitions form a union. @BULLET * Set k =|I 0 |. If k &gt; 1 find an optimal updated I − of size k −1 among all allowed deletion moves, where I − ≡ argmin I∈Del(I 0 ) f 1 (I). If f (I − ) &lt; BEST (k −1) then BEST (k −1) = f (I − ), I 0 = I − and return to *.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig.2.</head><figDesc>Fig. 2. Graphical display of Simulation Models 1 and 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>|I| ) belong to B I ≡{β : ψ I,β ∈ }⊆IR |I|. These are of the form referred to as piecewise constant regression models (Härdle, 1989).</figDesc><table>Page: 1359 1357–1363 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><figDesc>ADD(I) ⊂ I as</figDesc><table>that which contains two basis functions for every 
initial basis function. The new basis functions represent the 'best split' 
of the original partition into two distinct partitions. As such ADD(I) is 
of size 2k. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><figDesc>Then f 1 (I 0 ) is evaluated and BEST (</figDesc><table>1) is given its value. A 
stopping value indicating the maximum number of basis functions to 
consider is assigned as cut-off-growth (COG). 

(2) Move through Step Functions. Page: 1360 1357–1363 

A.M.Molinaro et al. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="true"><figDesc>Table 1. Simulation 1 results Method partDSA CART MARS LR</figDesc><table>True model size 
2 
3 
4 
2 
Fitted model size 
1.980 
2.86 
5.8 
2.76 
No. of vars used 
1.920 
1.86 
3.04 
2.62 
No. of vars X1,X2 used 
1.920 
1.86 
2 
2 
No. of vars X3,...,X9 used 
0 
0 
1.04 
0.62 
Error rate relative to truth 
0.198 
0.326 
0.403 
0.311 
Ratio of error/partDSA 
1 
1.65 
2.04 
1.57 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="true"><figDesc>Table 2. Simulation 2 results Method partDSA CART MARS LR</figDesc><table>True model size 
2 
3 
4 
2 
Fitted model size 
2 
2.26 
5.34 
2 
No. of vars used 
1.68 
1.26 
3.04 
2 
No. of vars X1,X2 used 
1.68 
1.26 
2 
1.72 
No. of vars X3,...,X9 used 
0 
0 
1.04 
0.28 
Error rate relative to truth 
3.2% 
7.2% 
3.5% 
4.1% 
Ratio of error/partDSA 
1 
2.29 
1.09 
1.29 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="true"><figDesc>Table 3. Simulation 3 results Method partDSA CART MARS</figDesc><table>True model size 
2 
3 
4 
Fitted model size 
1.98 
2.86 
6.10 
No. of vars used 
1.96 
1.86 
2.98 
No. of vars X1,X2 used 
1.94 
1.86 
2 
No. of vars X3,...,X9 used 
.020 
0 
.980 
Error rate relative to truth 
0.576 
0.596 
1.11 
Ratio of error/partDSA 
1 
1.03 
1.93 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="true"><figDesc>Table 4. Data analysis results</figDesc><table>Method 
partDSA 
CART 
MARS 

Fitted model size 
4.16 
2.54 
6.96 
No. of vars used 
2.30 
1.54 
3.4 
Error rate relative to truth 
25.4% 
29.9% 
26.0% 

respond to chemotherapy treatment, it has been suggested that there are 
meaningful subtypes of DLBCL which may predict response to treatment. 
Therefore, tumors from 240 patients were sampled and hemopathologists 
assessed the subtype of each tumor as activated B-cell like (ABC), germinal 
center B-cell like (GCB) and Type 3 (Type III). 
For each of the patients, messenger RNA expression of 7399 genes was 
measured using DNA microarrays. </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><figDesc>@BULLET Partition 1: A GCBcell score ≤ 0.31 AND Prolif score ≤−0.17 predicts the Type III subtype.</figDesc><table>@BULLET Partition 2: A GCBcell score &gt; 0.31 AND LymphNode score ≤ 0.17 
OR a GCBcell score between −0.48 and 0.31 AND Prolif score &gt; 
−0.17 predicts the GCB subtype. Page: 1362 1357–1363 

A.M.Molinaro et al. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="true"><figDesc>Table 5. Classification of patients based on partDSA analysis</figDesc><table>Training set (n = 120) 
Test set (n = 120) 

Prediction ABC GCB III Error 
ABC GCB III Error 

ABC 
21 
1 
5 0.22 
21 
2 
6 0.28 
GCB 
13 
48 
0 0.21 
14 
49 
3 0.26 
Type III 
2 
9 
21 0.34 
2 
6 
17 0.32 

GCBcell 

Lymph 
Prolif 

Type III 
GCBcell 

ABC 
GCB 

≤ 0.31 
&gt; 0.31 

GCB 
GCB 

≤ -0.17 

≤ -0.48 

≤ 0.17 
&gt; -0.17 
&gt; 0.17 

&gt; -0.48 

Fig. 3. Graphical display of partDSA data analysis. This graph shows the 
partDSA partitioning based on the three signatures: 'GCBcell', 'Prolif' and 
'LymphNode'. There are four final partitions denoted by different colors: the 
first, in red, denotes subtype Type III; the second, in green, and the fourth, 
in purple, denote subtype GCB; and the third partition, in orange, denotes 
subtype ABC. 

@BULLET Partition 3: A GCBcell score ≤−0.48 AND a Prolif score &gt; −0.17 
predicts the ABC subtype. 

@BULLET Partition 4: A GCBcell score &gt; 0.31 AND a LymphNode score &gt; 0.17 
predicts the GCB subtype. 

In </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="true"><figDesc>Table 6. Running times of partDSA for various datasets</figDesc><table>Data 
Set size 
No. of 
Time (s) 

Training 
Test 
vars 
Serial 
Parallel 

Lymphoma 
120 
120 
5 
31.21 
6.80 
German Br. Ca. 
343 
343 
7 
36.94 
7.74 
Boston housing 
253 
253 
13 
60.4 
13.35 
Compress. Strgth 
515 
515 
8 
70.7 
16.55 
Tecator 
120 
120 
100 
285.59 
66.90 
Tecator (PCA) 
120 
120 
22 
42.38 
8.66 

two terminal nodes instead of one (as partDSA does) resulting in less precise 
and more unstable predictions </table></figure>

			<note place="foot">© The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org 1357 at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We would like to thank Steve Weston, REvolution Computing, Robert Bjornson and Nicholas Carriero for assistance with programming and computing advice.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<monogr>
		<title level="m" type="main">Classification and Regression Trees</title>
		<author>
			<persName>
				<forename type="first">L</forename>
				<surname>Breiman</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1984" />
			<publisher>Wadsworth and Brooks/Cole</publisher>
			<pubPlace>Monterey, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Multivariate adaptive regression splines</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">H</forename>
				<surname>Friedman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ann. Stat</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="1" to="141" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<monogr>
		<title level="m" type="main">Applied nonparametric regression. Number 17 in Econometric Society Monographs</title>
		<author>
			<persName>
				<forename type="first">W</forename>
				<surname>Härdle</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Cambridge University Press</publisher>
			<pubPlace>Cambridge, New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Sequence analysis using logic regression</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Kooperberg</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genet. Epidemiol</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="626" to="631" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<monogr>
		<title level="m" type="main">Statistical bioinformatics: a guide for life and biomedical science researchers Statistical resampling for large screening data analysis such as classical resampling, Bootstrapping, Markov chain Monte Carlo, and statistical simulation and validation strategies</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">M</forename>
				<surname>Molinaro</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Lostritto</surname>
			</persName>
		</author>
		<editor>Jae K.Lee</editor>
		<imprint>
			<date type="published" when="2010" />
			<publisher>John Wiley &amp; Sons, Inc</publisher>
			<biblScope unit="page" from="219" to="248" />
			<pubPlace>Hoboken, New Jersey</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Tree-based multivariate regression and density estimation based on right-censored data</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">M</forename>
				<surname>Molinaro</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Multivar. Anal</title>
		<imprint>
			<biblScope unit="volume">90</biblScope>
			<biblScope unit="page" from="154" to="177" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">Prediction error estimation: a comparison of resampling methods</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">M</forename>
				<surname>Molinaro</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="3301" to="3307" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<monogr>
		<title level="m" type="main">partDSA: partitioning using deletion, substitution, and addition moves</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">M</forename>
				<surname>Molinaro</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2009-04-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Meeting the challenges of functional genomics: from the laboratory to the clinic</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Quackenbush</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Preclinica2</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="313" to="316" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">The use of molecular profiling to predict survival after chemotherapy for diffuse large-B-cell lymphoma</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Rosenwald</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">N. Engl. J. Med</title>
		<imprint>
			<biblScope unit="volume">346</biblScope>
			<biblScope unit="page" from="1937" to="1946" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">Logic regression Unified cross-validation methods for selection among estimators: finite sample results, asymptotic optimality, and applications</title>
		<author>
			<persName>
				<forename type="first">I</forename>
				<surname>Ruczinski</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Graph. Stat</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="474" to="511" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
	<note>van. der Laan</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>