
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:45+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">sBWT: memory efficient implementation of the hardware-acceleration-friendly Schindler transform for the fast biological sequence mapping</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Chia-Hua</forename>
								<surname>Chang</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Institute of Bioinformatics and Systems Biology</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Institute of Biomedical Engineering</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Min-Te</forename>
								<surname>Chou</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Institute of Bioinformatics and Systems Biology</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Yi-Chung</forename>
								<surname>Wu</surname>
							</persName>
							<affiliation key="aff3">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">National Taiwan University</orgName>
								<address>
									<settlement>Taipei</settlement>
									<country key="TW">Taiwan</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Ting-Wei</forename>
								<surname>Hong</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Institute of Bioinformatics and Systems Biology</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Yun-Lung</forename>
								<surname>Li</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Institute of Bioinformatics and Systems Biology</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Chia-Hsiang</forename>
								<surname>Yang</surname>
							</persName>
							<affiliation key="aff3">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">National Taiwan University</orgName>
								<address>
									<settlement>Taipei</settlement>
									<country key="TW">Taiwan</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jui-Hung</forename>
								<surname>Hung</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Institute of Bioinformatics and Systems Biology</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Institute of Biomedical Engineering</orgName>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Department of Biological Science and Technology</orgName>
								<orgName type="institution">National Chiao Tung University</orgName>
								<address>
									<settlement>Hsin-Chu</settlement>
									<country key="TW">Taiwan</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">sBWT: memory efficient implementation of the hardware-acceleration-friendly Schindler transform for the fast biological sequence mapping</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btw419</idno>
					<note type="submission">Received on March 9, 2016; revised on June 8, 2016; accepted on June 25, 2016</note>
					<note>Applications Note *To whom correspondence should be addressed. Associate Editor: Inanc Birol Supplementary information: Supplementary data are available at Bioinformatics online. Contact:</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: The Full-text index in Minute space (FM-index) derived from the Burrows–Wheeler transform (BWT) is broadly used for fast string matching in large genomes or a huge set of sequencing reads. Several graphic processing unit (GPU) accelerated aligners based on the FM-index have been proposed recently; however, the construction of the index is still handled by central processing unit (CPU), only parallelized in data level (e.g. by performing block-wise suffix sorting in GPU), or not scalable for large genomes. Results: To fulfill the need for a more practical, hardware-parallelizable indexing and matching approach , we herein propose sBWT based on a BWT variant (i.e. Schindler transform) that can be built with highly simplified hardware-acceleration-friendly algorithms and still suffices accurate and fast string matching in repetitive references. In our tests, the implementation achieves significant speedups in indexing and searching compared with other BWT-based tools and can be applied to a variety of domains. Availability and implementation: sBWT is implemented in C þþ with CPU-only and GPU-accelerated versions. sBWT is open-source software and is available at</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Index structures, such as the Full-text index in Minute space (FM-index) derived from the Burrows–Wheeler transform (BWT) (<ref type="bibr" target="#b6">Ferragina and Manzini, 2000</ref>) and enhanced suffix arrays (<ref type="bibr" target="#b0">Abouelhoda, et al., 2002</ref>), have been widely used in NGS applications for mapping short reads to the references (<ref type="bibr" target="#b13">Li and Homer, 2010;</ref><ref type="bibr" target="#b23">Vyverman, et al., 2012</ref>). Recently the biological applications of the FM-index are expanding; the FM-index has been used to compress NGS data (<ref type="bibr" target="#b4">Cox et al., 2012</ref>) and de novo assembly (<ref type="bibr" target="#b20">Simpson and Durbin, 2012</ref>). These applications require dynamic construction of the indexes based on reads. For instance, in the construction of the overlap graph for doing de novo assembly as demonstrated by Simpson and Durbin (<ref type="bibr" target="#b20">Simpson and Durbin, 2012</ref>). The suboptimal performance of</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Bioinformatics Advance Access published July 21, 2016</head><p>indexing, especially for huge read sets or assembling contigs/ chromosomes has become a cause for concern. Several algorithms have been proposed to construct the FMindex from a huge collection of reads, such as the dynamic FMindex (<ref type="bibr" target="#b17">Makinen and Navarro, 2008</ref>), BCR (<ref type="bibr" target="#b2">Bauer, et al., 2013</ref>), CX1 (<ref type="bibr" target="#b14">Liu, 2014</ref>) and ropeBWT2 (<ref type="bibr" target="#b11">Li, 2014</ref>); however, these algorithms are unable to handle long fragments efficiently (up to kilobases), which appear in the later rounds of the contig assembly or are generated from long read sequencing techniques (<ref type="bibr" target="#b7">Huddleston, et al., 2014</ref>). Many efforts have been made to improve the efficacy of the construction of the index structure (<ref type="bibr" target="#b1">Adjeroh et al., 2008</ref>). One BWT variant, Schindler transform (a.k.a. sort transform, ST), uses only order-k contexts (i.e. the order of suffixes are determined only by their first k-mers) and is still invertible with some extra complexity and performance penalty (<ref type="bibr" target="#b18">Nong and Zhang, 2006</ref>;<ref type="bibr" target="#b21">Schindler and Wien, 2001</ref>). ST is faster and much easier to parallelize with hardware than BWT. Several implementations of ST have been proposed but the indexes built are not applicable to searching (<ref type="bibr" target="#b5">Culpepper, et al., 2012;</ref><ref type="bibr" target="#b19">Nong and Zhang, 2007</ref>). Recently,<ref type="bibr" target="#b22">Torres et al. (2012)</ref>has demonstrated the use of ST for short read alignment; however, the proposed approach required to keep huge data structure from the fully sorted BWT, which is not scalable and does not take full advantage of the ST. To reduce the excessive memory footprint that is usually not applicable to graphic processing unit (GPU) or hardware accelerated environments, we herein propose novel, simple and highly parallelizable algorithms coupled with ST and still competent in string matching for general purposes. Two implementations of our algorithms (i.e. sBWT) are provided and were fully tested and compared with existing tools. We also applied our implementations to improve the most timeconsuming step in de novo assembly and thereby exemplified the broad utility of sBWT. sBWT can be incorporated in many existing algorithms and pipelines to benefit a wider range of applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Methods and results</head><p>We build the k-ordered FM-index based on ST for the long and repetitive reference from its k-ordered suffix array (k-ordered SA) with only three simple steps: split sort, k-ordered bucket sort, and merging and compression (see Supplementary Materials for more details). In the split sort step, as described in previous literature (<ref type="bibr" target="#b8">Karkkainen, 2007</ref>) but much simplified, extract a sufficiently large set (e.g. n ¼ 1000) of suffixes from the reference sequence T by random sampling, and then, in the k-orded bucket sort step, sort the set of suffixes in the lexicographical order with the multikey quicksort and/or the bucket sort. Then use every mth (e.g. m ¼ 100) element of the sorted set as splitters to group all suffixes of T into n/m þ 1 suffix blocks. Suffixes that are bigger than the ith splitter and smaller than the i þ 1th splitter lexicographically fall in the i þ 1th suffix block. Note that the relative order of these blocks has to be maintained in the succeeding step. To save memory, only one block is created at a time and the indexes of all the suffixes of the block are stored in secondary storage. Multiple blocks can be processed in parallel to decrease running time when sufficient memory is provided. The values of n and m should be determined according to the maximal memory available. In the merging and compression step, the resulting n/m þ 1 transformed strings are concatenated in the same order of the suffix blocks and are compressed to form the k-ordered FM-index (i.e. the ST string) including other auxiliary tables (i.e. the C, Occ tables, and a specially designed location table, see below and supplemen tary method for more details). Since biological sequences consist of a relatively small alphabet, the transformed string (T') can be further encoded to save space. Another edge of compressing the BWT string is that the backtracking algorithm (used for searching, see below) can recover multiple nucleotides in reading one single byte and reduce the time calculating positions in searching with the help of some additional lookup tables. To search with the k-ordered FM-index, we basically follow the similar strategy as Torres et al. proposed; however, to save the memory needed for Torres's approach, we construct a lookup table called location table to store the mapping between the index (denoted as i) of T' and the start position of the corresponding suffix (i.e. k-ordered SA<ref type="bibr">[i]</ref>) like the text offset table used in fully sorted FM-index (see Supplementary Materials); the key distinction is at that the table is sampled according to the k-ordered SA<ref type="bibr">[i]</ref>, instead of i, in an interval of v. In other words, only the suffixes whose start positions in the text are at the multiples of v are stored in the location table. This table can be constructed easily along with the construction of the T' (see Supplementary Materials). With the proposed location table, we can find all the locations within k recursions of enumerating the alphabet (i.e. R ¼ {A, T, C, and G}; see Algorithm 1, 2, 3 and Supplementary Materials). Indeed, the maximum length of each query sequence is restricted to the parameters (i.e. k and v) upon construction, which could be inconvenience; however, since modern short read aligners fragmentize the query into several short 'seeds' and tailor the alignments of each seed against the reference together afterward (<ref type="bibr" target="#b10">Langmead and Salzberg, 2012;</ref><ref type="bibr" target="#b12">Li and Durbin, 2010</ref>), we believe it is not difficult to choose the right combination of parameters to fit the general purpose of fast string searching by the proposed k-ordered FM-index (By default, k is set as 256, and v is 64; maximum query length ¼ 192; see Supplementary Materials for more details). We implemented the indexing and searching algorithms of the proposed k-ordered FM-index for both central processing unit (CPU)-only (sBWT) and GPU-accelerated (sBWT-CUDA) architectures. The implementations were fully tested and compared with other available tools in the use of general-purposed read mapping and creating the index of a huge set of reads for de novo assembly. We compared the performance of indexing and searching in simulated genomes using sBWT and sBWT-CUDA with that of two conventional FM-index based aligners (i.e. Bowtie and BWA; We picked Bowtie instead of Bowtie2 for its better performance of short read mapping) and four GPU-accelerated aligners (i.e. CUSHAW (<ref type="bibr" target="#b15">Liu et al., 2012</ref>), SOAP3-dp (<ref type="bibr" target="#b16">Luo et al., 2013</ref>), BarraCUDA (<ref type="bibr" target="#b9">Klus et al., 2012</ref>) and nvBWT [nvlabs.github.io/nvbio/<ref type="bibr">]</ref>). The results showed great time efficiency of sBWT (<ref type="figure">Fig. 1A</ref>–C). The simplicity of the k-ordered FM index also led to a highly parallelizable GPUacceleration friendly implementation, sBWT-CUDA, which significantly improves the performance of both indexing and searching. To further demonstrate the usefulness of k-ordered FM-index, we used sBWT-CUDA to construct the index for de novo assembly from a subset of a real-life deep sequencing library (SRR065390, see Supplementary Materials for more details). sBWT-CUDA was compared with two other implementations of the FM-Index based indexing algorithms designed specifically for building indexes on a huge set of reads, ropeBWT2 (<ref type="bibr" target="#b11">Li, 2014</ref>) and nvSetBWT, an implementation based on the CX1 algorithm (<ref type="bibr" target="#b14">Liu, 2014</ref>) (<ref type="figure">Fig. 1D</ref>). The results suggest that sBWT-CUDA can have a better overall performance during the entire process of de novo assembly. More details and the parameters used for all tests and all tools can be found in Supplementary Materials. The proposed k-ordered FM-index, location table and the accompanying algorithms are much simpler to implement than the conventional ones—a simple bucket sort can do all the tricks; no need to deal with repetition at all (e.g. difference covers sampling (DCS);<ref type="bibr" target="#b3">Burkhardt and Karkkainen, 2003</ref>), see Supplementary Materials). The search space of the novel location table is bounded by O(kjRj), whereas that of the conventional offset table, at worst case, is bounded by O(N). It was somehow unexpected to see the searching of sBWT without any parallelism was faster than other CPU-only tools, but it is possible due to the complexity of their designs for more functionalities such as mapping quality evaluation or information logging. Our innovation can also help the construction of the overlap graph (including finding irreducible edges) used in de novo assembly. Most excitingly, our implementation can create the index for multiple reads of any length. Other tools that designed specifically for the purpose do not scale as good as the proposed methods when the contig length grows along with the assembly. Future applications such as searching within multiple gigabase genomes can be better achieved by our innovations.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>V C The Author 2016. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 1 Bioinformatics, 2016, 1–3 doi: 10.1093/bioinformatics/btw419 Advance Access Publication Date: 13 July 2016 Applications Note</figDesc><table></table></figure>

			<note place="foot">at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">C.H.Chang et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="1"> X 3 2 X 1 X 3 2 X 1 X 3 2 X 1 X 3 2 X Fig. 1. The overview of the performance comparison with other tools. (sBWTC: sBWT-CUDA) (A) Time needed for indexing genomes with different level of repetition. Five different types of genomes (which are all 80M bp long) were generated and differed in the level of repetition (i.e. 1X, 2X, 4X, 8X, 16X and 32X) and the averages of five repeated measurements are plotted. (B) Time needed for searching in the genomes with 1Â and 32Â genomes by CPU-only tools and (C) GPU-accelerated tools. (D) The speed of indexing a set of reads relatively to that by sBWT-CUDA. To be comprehensive, we simulated the scenarios of assembling long contigs by creating an array of reads with different length from SRR065390. We generated six different sets of reads, in which reads length are set to 100 (bp), 1k, 2k, 5k, 10k, and finally the length of the entire library. nvSetBWT worked only on 100bp-long reads in our tests. Note that CUSHAW and BarraCUDA do not provide any advancement in indexing, so the comparison with them only focused on searching. Searching by all tools was restricted in exact string matching only. CPU-only implementations (i.e. Bowtie, BWA and sBWT) were tested on a machine with 2.0 G INTEL 24-core CPU and 32G DDR3 memory. GPU-based implementations, namely sBWT-CUDA, SOAP3-dp, nvBWT, CUSHSAW and BarraCUDA, were tested on the same machine with an NVIDIA Tesla C2075 card (1.15G 448-core GPU and 6G GDDR5 memory) installed Memory efficient implementation of the hardware-acceleration-friendly Schindler transform</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We thank the members of the Hung laboratories for helpful discussion and critical testing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding</head><p>This work was supported by the National Science Council (103-2221-E-009-128-MY2 and 104-2311-B-009002-MY3 to J.H.H.) of Taiwan. Conflict of Interest: none declared.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">The enhanced suffix array and its applications to genome analysis</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">I</forename>
				<surname>Abouelhoda</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lect. Notes Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">2452</biblScope>
			<biblScope unit="page" from="449" to="463" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<monogr>
		<title level="m" type="main">Variants of the burrows-wheeler transform. In, The Burrows-Wheeler Transform: Data Compression, Suffix Arrays, and Pattern Matching</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Adjeroh</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>Springer</publisher>
			<biblScope unit="page" from="153" to="186" />
			<pubPlace>, US</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Lightweight algorithms for constructing and inverting the BWT of string collections</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">J</forename>
				<surname>Bauer</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">483</biblScope>
			<biblScope unit="page" from="134" to="148" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Fast lightweight suffix array construction and checking</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Burkhardt</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Karkkainen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comb. Pattern Match. Proc</title>
		<imprint>
			<biblScope unit="volume">2676</biblScope>
			<biblScope unit="page" from="55" to="69" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Large-scale compression of genomic sequence databases with the Burrows–Wheeler transform</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">J</forename>
				<surname>Cox</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="1415" to="1419" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Revisiting bounded context block-sorting transformations</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">S</forename>
				<surname>Culpepper</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Softw. Pract. Exp</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="1037" to="1054" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">Opportunistic data structures with applications</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Ferragina</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Manzini</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ann. Ieee Symp. Found</title>
		<imprint>
			<biblScope unit="page" from="390" to="398" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">Reconstructing complex regions of genomes using long-read sequencing technology</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Huddleston</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="688" to="696" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Fast BWT in small space by blockwise suffix sorting</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Karkkainen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">387</biblScope>
			<biblScope unit="page" from="249" to="257" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">BarraCUDA-a fast short read sequence aligner using graphics processing units</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Klus</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Res. Notes</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page">27</biblScope>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">Fast gapped-read alignment with Bowtie 2</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Langmead</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">L</forename>
				<surname>Salzberg</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Methods</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="357" to="359" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">Fast construction of FM-index for long sequence reads</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="3274" to="3275" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">Fast and accurate long-read alignment with Burrows-Wheeler transform</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Durbin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="589" to="595" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<analytic>
		<title level="a" type="main">A survey of sequence alignment algorithms for next-generation sequencing</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">N</forename>
				<surname>Homer</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Brief. Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="473" to="483" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<monogr>
		<title level="m" type="main">GPU-Accelerated BWT construction for large collection of short reads</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Liu</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">CUSHAW: a CUDA compatible short read aligner to large genomes based on the Burrows-Wheeler transform</title>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Liu</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="1830" to="1837" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">SOAP3-dp: fast, accurate and sensitive GPU-based short read aligner</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Luo</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PloS One</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">65632</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<analytic>
		<title level="a" type="main">Dynamic entropy-compressed sequences and full-text indexes</title>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Makinen</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Navarro</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acm T Algorithms</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="1" to="38" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b18">
	<analytic>
		<title level="a" type="main">Unifying the burrows-wheeler and the Schindler transforms</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Nong</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Zhang</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Ieee Data Compression Conference</title>
		<meeting><address><addrLine>Snowbird, UT</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="464" to="464" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<analytic>
		<title level="a" type="main">Efficient algorithms for the inverse sort transform</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Nong</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Zhang</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ieee. Trans. Comput</title>
		<imprint>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="page" from="1564" to="1574" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b20">
	<analytic>
		<title level="a" type="main">Efficient de novo assembly of large genomes using compressed data structures</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">T</forename>
				<surname>Simpson</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Durbin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="549" to="556" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b21">
	<monogr>
		<title level="m" type="main">Method and apparatus for sorting data blocks</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">B</forename>
				<surname>Schindler</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">At</forename>
				<surname>Wien</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Schindler Michael</publisher>
		</imprint>
	</monogr>
	<note>United. States. U.S. Patent 5659733 A</note>
</biblStruct>

<biblStruct   xml:id="b22">
	<analytic>
		<title level="a" type="main">Using GPUs for the Exact Alignment of Short-Read Genetic Sequences by Means of the Burrows-Wheeler Transform</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">S</forename>
				<surname>Torres</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ieee Acm Trans. Comput. Biol</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="1245" to="1256" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b23">
	<analytic>
		<title level="a" type="main">Prospects and limitations of full-text index structures in genome analysis</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Vyverman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nucleic Acids Res</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="6993" to="7015" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>