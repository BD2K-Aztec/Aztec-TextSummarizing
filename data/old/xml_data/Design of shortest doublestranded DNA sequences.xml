
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:42+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Design of shortest double-stranded DNA sequences covering all k-mers with applications to protein-binding microarrays and synthetic enhancers</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2013">2013</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Yaron</forename>
								<surname>Orenstein</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Blavatnik School of Computer Science</orgName>
								<orgName type="institution">Tel-Aviv University</orgName>
								<address>
									<postCode>69978</postCode>
									<settlement>Tel-Aviv</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Ron</forename>
								<surname>Shamir</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Blavatnik School of Computer Science</orgName>
								<orgName type="institution">Tel-Aviv University</orgName>
								<address>
									<postCode>69978</postCode>
									<settlement>Tel-Aviv</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Design of shortest double-stranded DNA sequences covering all k-mers with applications to protein-binding microarrays and synthetic enhancers</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">29</biblScope>
							<biblScope unit="page" from="71" to="79"/>
							<date type="published" when="2013">2013</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btt230</idno>
					<note>BIOINFORMATICS</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>Contact: rshamir@tauacil</keywords>
			</textClass>
			<abstract>
				<p>Motivation: Novel technologies can generate large sets of short double-stranded DNA sequences that can be used to measure their regulatory effects. Microarrays can measure in vitro the binding intensity of a protein to thousands of probes. Synthetic enhancer sequences inserted into an organism&apos;s genome allow us to measure in vivo the effect of such sequences on the phenotype. In both applications , by using sequence probes that cover all k-mers, a comprehensive picture of the effect of all possible short sequences on gene regulation is obtained. The value of k that can be used in practice is, however, severely limited by cost and space considerations. A key challenge is, therefore, to cover all k-mers with a minimal number of probes. The standard way to do this uses the de Bruijn sequence of length 4 k. However, as probes are double stranded, when a k-mer is included in a probe, its reverse complement k-mer is accounted for as well. Results: Here, we show how to efficiently create a shortest possible sequence with the property that it contains each k-mer or its reverse complement, but not necessarily both. The length of the resulting sequence approaches half that of the de Bruijn sequence as k increases resulting in a more efficient array, which allows covering more longer sequences; alternatively, additional sequences with redundant k-mers of interest can be added. Availability: The software is freely available from our website http:// acgt.cs.tau.ac.il/shortcake/.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Gene regulation is a central focus of biological research. The main factors that regulate gene expression are transcription factors (TFs). These proteins bind to short DNA sequences, either in promoters or enhancers, and by that encourage or impede gene transcription. TFs bind to different DNA sequences with different affinity and specificity. Understanding TF-binding specificity and its effect on gene expression and the final phenotype is a fundamental goal in the study of gene regulation. Recent technologies measure the binding intensity of a TF to many DNA sequences [e.g. protein-binding microarray (PBM) (<ref type="bibr" target="#b0">Berger et al., 2006</ref>) and MITOMI<ref type="bibr" target="#b5">[Fordyce et al., 2010)]</ref>. These technologies synthesize a large set of DNA sequences and measure the binding intensity of the TF to each of those sequences. Some technologies use random DNA sequences (<ref type="bibr" target="#b13">Nutiu et al., 2011</ref>). Others use sequences that cover all possible DNA k-mers, as they provide a complete picture of the binding spectrum (<ref type="bibr" target="#b0">Berger et al., 2006;</ref><ref type="bibr" target="#b5">Fordyce et al., 2010</ref>). A similar approach was also used to test binding in vivo. A recent study used synthesized enhancer oligomers designed to cover all 6mers to test their effect on limb formation in zebrafish (<ref type="bibr" target="#b17">Smith and Ahituv, 2012</ref>). De Bruijn sequences are the most compact sequences that cover all k-mers (<ref type="bibr" target="#b0">Berger et al., 2006;</ref><ref type="bibr" target="#b5">Fordyce et al., 2010</ref>). The length of a de Bruijn sequence of order k over alphabet jAEj is jAEj k , where the DNA alphabet is AE ¼ fA, C, G, Tg. Because of the exponential dependency on k and small space on the experimental device, these technologies are limited to a small value of k. The most popular technology, PBM, was used in hundreds of experiments to date using arrays with k ¼ 10. To create p-long probe sequences, the sequence is split into intervals of length p with k À 1 overlap (p ¼ 36 is used in PBMs). Despite the universal and high-throughput nature of these technologies, the data produced are still limited. For many TFs, binding depends on 410 DNA positions, usually with six to eight core positions and additional side positions that have a significant contribution (<ref type="bibr" target="#b13">Nutiu et al., 2011;</ref><ref type="bibr" target="#b14">Orenstein et al., 2013</ref>). A recent study from the Taipale Laboratory using HTSelex showed that many TFs have longer motifs that are not covered well by an all 10mer array (<ref type="bibr" target="#b6">Jolma et al., 2013</ref>). The RankMotifþþ algorithm for PBM data also generates motifs of length 410 in most cases (<ref type="bibr" target="#b1">Chen et al., 2007</ref>). Covering all k-mers for a greater value of k will lead to improved understanding of TF binding. As the probes are double-stranded DNA segments, one can save by using the reverse complementarity of DNA: whenever a k-mer is included, its reverse complement is included as well, and there is no need to cover it again. This brings up the following question: a sequence S is called a reverse complementary complete sequence of order k (RC complete sequence for short) if for each k-mer either the k-mer or its reverse complement are included in S. Can we construct an optimal (minimum length) RC complete sequence? Theoretically, if for each k-mer T the sequence S includes either T or its reverse complement but not both, one could save a factor of nearly 2 compared with the length of a de Bruijn sequence. Ministeris and Eisen (2006) and<ref type="bibr" target="#b15">Philippakis et al. (2008)</ref>proposed the use of (regular) de Bruijn sequences for designing probes for PBMs. Philippakis et al. used linear feedback shift registers to generate a de Bruijn sequence with good coverage of gapped k-mers. This approach was used for constructing two microarrays that are in use today with k ¼ 10 (<ref type="bibr" target="#b0">Berger et al., 2006</ref>). The idea of exploiting reverse complementarity was raised by<ref type="bibr">Ministeris and Eisen (2006)</ref>, who sketched an algorithm for it without proof. In fact, as we shall show, the algorithm of *To whom correspondence should be addressed. ß The Author 2013. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/3.0/), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</p><p>Mintseris and Eisen (2006) does not provide an optimal solution for even values of k. In the context of sequence assembly,<ref type="bibr" target="#b10">Medvedev et al. (Medvedev and Brudno, 2009;</ref><ref type="bibr" target="#b11">Medvedev et al., 2007</ref>) solved the problem of constructing a minimum length sequence that covers a given set of k-mers, using reverse complementarity. Although their algorithm can be applied to solve the problem raised in this study, they do not address it directly. When applied to our problem, their algorithm requires Oðk 2 log 2 ðjAEjÞjAEj 2k Þ time. As we shall see, our algorithm is much faster. In this study, we address the problem of constructing an optimal RC complete sequence. We first give a lower bound for the length of such a sequence. We prove that for odd k, there exists a sequence that achieves the lower bound and show how to construct it in time complexity that is linear in the output sequence length. For odd k, the algorithm constructs two tours that are reverse complementary to each other and together cover all edges of the de Bruijn graph and is identical to<ref type="bibr" target="#b12">Mintseris and Eisen (2006)</ref>. Then, we show how to adjust the algorithm to handle the case of even k, achieving a saving factor approaching 2 as k increases. We give two solutions: a simple near-optimal one requiring linear time and a more complex (OðkjAEj 5k=4 logðjAEjÞÞ time) solution that guarantees optimality of the resulting sequence. In particular, this implies that the lower bound is not tight for even k. We implemented the algorithm and we demonstrate the saving it achieves. The produced sequences are nearly half the length compared with a regular de Bruijn sequence. The article is organized as follows. We first provide formal definitions and preliminaries. We then present a lower bound for the length of an optimal sequence based on k-mer counts. Then, we present an algorithm that works in linear time on the de Bruijn graph and prove that it solves the problem for odd k. We conclude by describing the two possible solutions for even k and report on experimental results with all the algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PRELIMINARIES</head><p>We start with some basic definitions of graphs and sequences. For more details see, e.g.<ref type="bibr" target="#b18">West et al. (2001)</ref>. A directed graph (digraph or simply a graph) G ¼ ðV, EÞ is a set of vertices V ¼ fv 1 , v 2 ,. .. , v n g and a set of edges E ¼ fe 1 , e 2 ,. .. , e m g. Each edge is an ordered pair of vertices ðv i , v j Þ, and we say the edge is directed from v i to v j. The indegree of vertex v is the number of edges entering v. Similarly, the outdegree is the number of edges outgoing from v. A vertex is balanced if its indegree equals its outdegree. A path in a digraph is a sequence of vertices, v i1 ,. .. , v i k , such that for each 1 j5k there is an edge ðv ij , v ijþ1 Þ. A cycle is a path where i 1 ¼ i k. A digraph is strongly connected if for every pair of vertices u, v there exists a path from u to v and a path from v to u. A strongly connected component in a digraph is a maximal set of vertices that induces a strongly connected subgraph. An Eulerian tour through a digraph G is a cycle that traverses all edges in G, such that each edge is traversed exactly once. If a digraph contains an Eulerian tour, we call it Eulerian. A digraph is Eulerian if and only if it is strongly connected and all vertices are balanced (<ref type="bibr" target="#b18">West et al., 2001</ref>). A de Bruijn sequence of order k over alphabet AE is a minimum length sequence that covers each k-mer over AE exactly once. For convenience, we define the length of the sequence as the number of k-mers in it. Hence, a sequence of length t contains t þ k À 1 characters. A de Bruijn sequence has length jAEj k , which is the minimum possible for covering all k-mers. Given sequences a, b over alphabet AE, the overlap between a and b, denoted ovða, bÞ, is the largest suffix of a that is also a prefix of b. A de Bruijn graph of order k is a digraph in which for every possible k-mer x 1 ,. .. , x k there is a vertex denoted by ½x 1 ,. .. , x k . There is an edge from u to v if and only if u ¼ ½x 1 ,. .. , x k  and v ¼ ½x 2 ,. .. , x kþ1 , that is, jovðu, vÞj ¼ k À 1. Each edge represents a unique ðk þ 1Þ-mer. For example, the edge ðu, vÞ above represents ðx 1 ,. .. , x kþ1 Þ. To distinguish vertices from edges, we will use square brackets for vertices. Hence, ðx 1 ,. .. , x kþ1 Þ is the edge between ½x 1 ,. .. , x k  and ½x 2 ,. .. , x kþ1 . Obviously, for each vertex v the indegree and outdegree are jAEj, and the graph is strongly connected. Thus, a de Bruijn graph is Eulerian. Any Eulerian tour represents a de Bruijn sequence of order k þ 1. Each edge and vertex in the graph is represented by Oðk logðjAEjÞÞ bits. Throughout the article, we assume this number of bits is contained in one computer word; hence, we deduce that it takes O(1) time to find an edge or a vertex. A complementarity relation between characters is a symmetric non-reflexive one-to-one relation. The alphabet of DNA is AE ¼ fA, C, G, Tg with the complementarity relation " A ¼ T and " C ¼ G. By symmetry also " T ¼ A and " G ¼ C. The reverse complement of sequence ðx 1 ,. .. , x k Þ, denoted RCðx 1 ,. .. , x k Þ, is defined as the sequence obtained by reversing the original sequence and replacing each character by its complement, i.e. RCðx 1 ,. .. , x k Þ ¼ ð " x k ,. .. , " x 1 Þ. For example, RCðCGAAÞ ¼ TTCG. A sequence s is called a palindromic reverse complementary sequence or in short a palindrome, if s ¼ RCðsÞ. For example, ACGT is a palindrome. We define a reverse complementary complete sequence of order k over alphabet AE (RC complete sequence for short) as a sequence such that for each k-mer s, at least one of s and RC(s) are in the sequence. Note that unlike a regular de Bruijn sequence, the definition of an RC complete sequence does not require minimality. An RC complete sequence is optimal if it is of minimum length.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RESULTS</head><p>3.1 A lower bound for the length of an RC complete sequence First, we derive a lower bound for the length of an RC complete sequence from k-mer counts.</p><p>PROPOSITION 1. Denote by n Ã ðkÞ the length of an optimal RC complete sequence of order k.</p><formula>n Ã ðkÞ ! jAEj k 2 , ifk is odd jAEj k þjAEj k=2 2</formula><p>, if k is even ( ð1Þ PROOF. We consider separately the cases of odd and even k. For odd k, there are no palindromes, as the middle position in a k-mer differs from its reverse complement. Each k-mer must be represented in the sequence by itself or its reverse complement. i72</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Y.Orenstein and R.Shamir</head><p>Thus, a lower bound for the minimum length is half the number of unique k-mers, which is jAEj k =2. For even k, some k-mers are palindromes. For palindromes, the first k=2 characters define the last k=2 characters. Hence, there are exactly jAEj k=2 different palindromes. All palindromes must appear at least once in any RC complete sequence, whereas for the non-palindromic k-mers, either they or their reverse complement must appear in the sequence. Thus, for even k, n Ã ðkÞ ! jAEj k ÀjAEj k=2 2 þ jAEj k=2. g We shall show later that n Ã ðkÞ is tight for odd k, but not for even k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Constructing an optimal RC complete sequence for odd k</head><p>In this section, we prove constructively that for odd k there exists an RC complete sequence that achieves the lower bound of Proposition 1 and is thus optimal. The proof modifies the Euler tour algorithm (<ref type="bibr" target="#b18">West et al., 2001</ref>). The modified algorithm was presented without proof in Mintseris and Eisen (2006). The algorithm for generating the sequence will work on the de Bruijn graph of order k À 1. Every k-mer is represented in the graph as an edge, the graph is strongly connected and all vertices are balanced. As there are no palindromes of odd length, every edge has a unique reverse complement counterpart that is different from it. This defines a perfect matching M on the edges of the graph. Given a directed path F in the graph, its reverse complement path is defined as the path R in which each edge ðu, vÞ in F is replaced by the edge ð " v, " uÞ. For example, for the path ðACGÞ ! ðCGGÞ ! ðGGTÞ, its reverse complement is ðACCÞ ! ðCCGÞ ! ðCGTÞ (<ref type="figure" target="#fig_0">Fig. 1</ref>). We will refer to F and R as forward and reverse paths, respectively. The following theorem provides a necessary and sufficient condition for the existence of an RC complete sequence that achieves the lower bound. THEOREM 1. For odd k, an RC complete sequence s achieves the lower bound (Proposition 1) if there exist two edge-disjoint paths with no repeating edges, corresponding to s and RC(s), that together cover all edges of the de Bruijn graph of order k À 1.(1) Initially all edges are unmarked, F ¼ R ¼ ;, and A ¼ fug, an arbitrary vertex.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACG CGG</head><p>GGT(2) Although A 6 ¼ ; do</p><formula>(3) F ¼ R ¼ ;.</formula><p>(4) Pick any starting vertex v ¼ ½x 1 ,. .. , x kÀ1  from A.</p><p>(5) Although there exists an unmarked edge e ¼ ðx 1 ,. .. , x k Þ outgoing from v do</p><p>(6) Append e to F. Prepend RC(e) to R.</p><formula>(7)</formula><p>Mark e and RC(e).</p><formula>(8)</formula><p>Set v ¼ ½x 2 ,. .. , x k ; A ¼ A [ fvg.</p><p>(9) Remove v from A.</p><p>(10) If F 6 ¼ ;, add F to F ; add R to R;</p><p>(11) Merge the cycles in F to obtain a single forward path.</p><p>Do the same for R. THEOREM 2. For odd k, Algorithm 1 returns forward and reverse paths that cover together all edges of the graph and represent two optimal RC complete sequences. The algorithm runs in OðjVjÞ time. PROOF. We prove the theorem using several lemmas. We first show that if the forward path F reaches a dead end, then so does the reverse path R, and in that case, a cycle is closed (Lemma 1). Note that each pair F, R constructed in Steps 4–7 are reverse complementary paths by the way they are constructed. Then, we show that the cycles in F can be merged into one cycle (Lemma 2). Third, we deduce that a strongly connected component is covered by F and R (Lemma 3). Finally, we conclude that F and R cover all edges, as there is only one strongly connected component in any de Bruijn graph (Corollary 1). As each edge is traversed once, the paths are of length jAEj k 2 and, hence, optimal. LEMMA 1. If the forward traversal reaches a dead end, then so does the reverse. Both paths close a cycle in this case. PROOF. Distinguish two cases in which the forward path reaches a dead end:</p><p>CASE 1. F reaches a vertex v and R reaches a vertex u 6 ¼ v, and all outgoing edges from v were already traversed. We prove that in that case, F must close a cycle. Assume to the contrary that F contains no edge outgoing from v. In that case, all outgoing edges were traversed by R. Then, all incoming edges must have been traversed by R as well, as each time R reached v, it must have exited it as well. The only exception is if v is also the first (last added) vertex u in R, contradicting our assumption that u 6 ¼ v. Therefore, all incoming and outgoing edges were covered by R, contradicting the fact that F just entered v. We conclude that F has an edge outgoing from v and thus it closed a cycle. Denote by ðx 1 ,. .. , x k Þ the last edge traversed by F. All edges of the form ðx 2 ,. .. , x k , aÞ, where a 2 AE, were traversed. Hence, the reverse edges of the form ð " a, x k ,. .. , x 2 Þ were traversed as well. The last edge traversed by R was ðx k ,. .. , x 1 Þ, outgoing from the vertex ½x k ,. .. , x 2 . All incoming edges to this vertex have already been traversed, as they are the reverse complements of the edges outgoing from v, which were traversed by F. Thus, R reaches a dead end as well. R closes a cycle because of a symmetrical argument to that made for F. CASE 2. F and R reach the same vertex v simultaneously. Denote the incoming edge used by F ðx 1 , x 2 ,. .. , x k Þ. Then, the reverse outgoing edge, which is traversed by R, is ðx k ,. .. , x 2 , x 1 Þ. From the fact that both reach the vertex simultaneously, we get that ½x 2 ,. .. , x k  ¼ ½x k ,. .. , x 2 . Hence, in all previous traversals of this vertex F and R also reached the vertex simultaneously. Moreover, the forward and reverse paths reach a dead end together at v. Hence, all incoming and outgoing edges were already traversed, and they are all of the form ða, x 2 ,. .. , x n Þ and ðx n ,. .. , x 2 , " aÞ, for all a 2 AE. Thus, both paths close a cycle g.</p><p>LEMMA 2. The cycles in F can be merged into one cycle. PROOF. According to Lemma 1, when F is added to F , it is a cycle in the graph. Thus, F is a set of cycles. The first cycle starts from an arbitrary vertex, but all other cycles start from a vertex of another cycle in F (denote encompassing cycle). Thus, each inner cycle can be merged into its encompassing cycle, forming one merged cycle. This is true to all cycles, except for the initial cycle g.</p><p>LEMMA 3. The merged cycle of F and R either cover two strongly connected components separately or one strongly connected component together. PROOF. Cycles are added to F and R as long as there are unmarked edges. If there are no shared vertices between F and R, then both sets cover edges of different components. As each set is added edges until all are traversed, they cover two strongly connected components separately. Else, there is at least one shared vertex; thus, they cover the same component. The component is strongly connected, as no edges are left to traverse g. COROLLARY 1. F and R cover all edges of a de Bruijn graph. PROOF. Following Lemma 3, as there is only one strongly connected component in a de Bruijn graph, F and R cover it together g. This completes the proof of Theorem 2 g.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Two solutions for the case of even k</head><p>Algorithm 1 cannot be applied when k is even. A palindrome is represented by one edge in the de Bruijn graph (like any other k-mer). The algorithm must traverse both an edge and its reverse complement edge on the forward and reverse paths; therefore, for a palindromic edge, both paths should use the same edge, which is impossible. One possible way to rectify the problem is by adding one more copy of each palindromic edge to the de Bruijn graph. Note that in the resulting (multi-) graph, the number of edges is exactly twice the lower bound. Adding the parallel edges would solve the problem discussed earlier in the text, but it will make some vertices unbalanced; therefore, the resulting graph is not Eulerian. Such a graph cannot be represented as a union of two reverse complementary edge-disjoint paths. A more aggressive augmentation that overcomes this difficulty is adding a cycle for every palindromic edge. This would preserve the balance of all vertices and the strong connectivity as well. If, in addition, the added non-palindromic edges have a perfect i74</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Y.Orenstein and R.Shamir</head><p>matching between reverse complementary edges, the algorithm can be applied. We present two possible augmentations. One is simple, based on the ideas aforementioned, and near-optimal; the other is optimal but requires a more complex augmentation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">A simple near-optimal augmentation</head><p>In this approach, for each palindromic edge, we add to the de Bruijn graph all possible cyclic shifts of it. More formally, let k ¼ 2l. For the palindrome e ¼ ðx 1 ,. .. , x l , " x l ,. .. , " x 1 Þ, we add k edges corresponding to all possible cyclic shifts of e. Obviously, as these edges form a cycle, all vertices remain balanced. In fact, this cycle contains two edges that are palindromes, ðx 1 ,. .. , x l , " x l ,. .. , "</p><formula>x 1 Þ and ð " x l ,. .. , " x 1 , x 1</formula><p>,. .. , x l Þ; therefore, only one cycle is added for both, and the cycle doubles both palindromic edges. It is easy to see that the remaining 2l À 2 edges are in fact l À 1 matching pairs of reverse complementary edges. For each edge that represents the cyclic shift starting at position i, for 15i5k=2, the matching edge starts at k þ 2 À i. Hence, a perfect matching exists after adding the new cycles. In total, during the edge augmentation process, for each pair of palindromic k-mers, we add k edges. For example, for the palindromes ACGT and GTAC, we add ACGT, CGTA, GTAC and TACG (<ref type="figure" target="#fig_4">Fig. 2</ref>). The added edges CGTA and TACG match each other. The added palindromes match the original edges in the graph. The resulting augmented graph contains jAEj k þ k Á jAEj k=2 2 edges, where the first term is the number of edges in the original de Bruijn graph, and the second is k for each pair of palindromes. In some cases, the number of added edges can be reduced. If the palindrome ðx 1 ,. .. , x k Þ is periodic, then the number of cyclic shifts needed to return to the original k-mer is the length of the period. For example, the period of (ATAT. .. T) and (TATA. .. A) is 2. Only two edges suffice in this case, the edges (ATAT. .. T) and (TATA. .. A). This also applies to (CGCG. .. G) and (GCGC. .. C). Therefore, each two periodic palindromes that are a cyclic shift of each other require an addition of a number of edges equal to the length of their period. Hence, a smaller augmented graph and a shorter RC complete sequence can be obtained by considering the different possible periods, which can only be of even length, as each period is a palindrome. Denote by 'ðkÞ the set of even integers that divide k, and by ðkÞ the exact number of additional edges.PROOF. All k-mer palindromes are divided to pairs, which are cyclic shifts of each other. For each pair, all distinct cyclic shifts are added. The number of shifts is equal to the length of the period of the k-mer. The periods can only be even, as the periodic sequences are palindromes by themselves. The number of i-periodic palindromes is jAEj i=2. These contain shorter periods, for which edges have already been counted. Thus, jAEj j=2 is subtracted, where j is the maximum even integer that divides i=2. The number of edges added for each pair of i-periodic palindromes is i g. THEOREM 4. Running Algorithm 1 on the augmented graph produces forward and reverse paths that together cover all edges of the graph and represent two RC complete sequences. PROOF. Algorithm 1 can be run on graphs that satisfy the following properties:</p><p>(i) The graph is strongly connected.</p><p>(ii) All vertices are balanced. (iii) There exists a perfect matching of the edges, such that each pair of edges represent a k-mer and its reverse complement.</p><p>The original de Bruijn graph of order k satisfies (1)</p><p>and (2), and there exists a perfect matching for all non-palindromic k-mers in it. Added edges cannot disturb the connectivity. The addition of cycles preserves the balance. Each added palindromic k-mer matched the edge representing the same k-mer in the original graph. As discussed earlier in the text, the added non-palindromic edges form a perfect matching. Thus, Algorithm 1 can be run on the augmented graph. According to Theorem 2, it produces a forward and reverse path that together covers all edges of the augmented graph. Each k-mer is represented in the augmented graph as an edge. All edges are covered together by the forward and reverse paths. For each path and for each k-mer, either it or its reverse complement is covered by the path. Thus, the paths represent RC complete sequences g. Algorithm 1 produces two sequences, forward and reverse, each of which is an RC complete sequence (<ref type="figure" target="#fig_7">Fig. 3</ref>). The length of the produced sequences is the number of edges divided by two. For each pair of palindromic edges, at most k edges were added,<ref type="figure" target="#fig_4">Fig. 2</ref>. A cycle and edge matching. For the pair of palindromes ACGT and GTAC, all cyclic shifts of these palindromes are added once (dashed edges). In the matching, palindromic edges in the original cycle are paired with their added copies (encircled by small red ovals). Other non-palindromic added edges are paired (encircled by a large red oval)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>i75</head><p>Design of shortest double-stranded DNA sequences covering all k-mers and by Theorem 3 exactly ðkÞ edges were added in total. Hence, the length of the sequence is ðjAEj k þ ðkÞÞ=2, which is bounded by ðjAEj k þ jAEj k=2 2 Á kÞ=2. This is an addition of Âð ffiffiffi ffi L p logðLÞÞ characters, where L denotes the lower bound in Proposition 1 for an RC complete sequence of even order k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">An optimal augmentation</head><p>We now present another augmentation that has higher time complexity but leads to an optimal RC complete sequence. As before, starting from the de Bruijn graph G ¼ ðV, EÞ, all palindromic edges are doubled, resulting in a graph G 0 ¼ ðV, E [ E 0 Þ. We temporarily disregard the reverse complementarity matching constraints. As a result of the edge doubling, there are unbalanced vertices in G 0. We rectify this by adding short paths between unbalanced vertices. By adding paths of minimum total length, we will obtain a third graph</p><formula>G 2 ¼ ðV, E [ E 0 [ E 00 Þ</formula><p>in which all degrees are balanced and it has minimum number of edges. Finding an optimal set of edges E 00 can be done by solving a maximum weight-matching problem on a related graph. In fact the problem is equivalent to the Chinese postman problem (<ref type="bibr" target="#b3">Edmonds and Johnson, 1973</ref>. We shall later show that G 2 can be modified to satisfy the reverse complementarity matching requirement without losing optimality. Hence, applying Algorithm 1 on it will produce an optimal RC complete sequence. Finding an optimal set of edges E 00 is done by solving a maximum weight-matching problem in a bipartite graph, where vertices with greater indegree than outdegree constitute one part, and the vertices with greater outdegree than indegree are the other. The edge weights are k minus the number of characters on the path from one vertex to the other. More formally, let V À (V þ ) be the set of vertices with indegree greater (smaller) than outdegree in G 0. For k ¼ 2l, there are jAEj k=2 À jAEj vertices in V À of the form u ¼ ½x 2 ,. .. , x l , " x l ,. .. , " x 1  and the same number of vertices in V þ of the form v ¼ ½x 1 ,. .. , x l , " x l ,. .. , " x 2  [note that jAEj palindromes of period 2 are already balanced (e.g. ATA. .. T)]. We define a complete bipartite graph H ¼ ðV À , V þ , FÞ, where the weight of edge ðu, vÞ is the maximum overlap between the suffix of u and the prefix of v (i.e. jovðu, vÞj). The length of the shortest path pðu, vÞ between u and v is k À jovðu, vÞj (<ref type="figure">Fig. 4</ref>). We are looking for a maximum weight matching in H. The procedure is summarized in Algorithm 2, Steps 1–5.The graph G 2 produced in Step 5 of Algorithm 2 is strongly connected with all vertices balanced, but it is not guaranteed to satisfy the third property of Theorem 4, i.e. having a perfect matching among reverse complementary edges, which is needed to apply Algorithm 1. We now prove that it can be modified to satisfy this property without losing optimality. In fact, as E [ E 0 has a perfect matching, we only need to prove this property on the added edges E 00. Once this is done, Algorithm 1 can be applied to produce two reverse complementary paths that cover all edges. To establish Algorithm 2, we prove several lemmas: LEMMA 4. The shortest path from palindrome A to the palindrome B is the reverse complementary of the shortest path from B to A. PROOF. Denote A ¼ ðx 1 ,. .. , x k Þ and B ¼ ðy 1 ,. .. , y k Þ two palindromes. Let ðx i ,. .. x k , y 1 ,. .. , y iÀ1 Þ for any 2 i k be an edge in the shortest path from A to B. Its reverse complement is ðy iÀ1 ,. .. , y 1 , x k ,. .. , x i Þ, which, as A, B are palindromes, which is the same as ðy kÀiþ2 ,. .. , y k , x 1 ,. .. , x kÀiþ1 Þ, an edge in the shortest path from B to A g.PROOF. Suppose there exists a cycle containing only one palindrome. The shortest path to return to the palindrome is t cyclic shifts of the palindrome where t is the length of its period. Let ðx 1 ,. .. , x l , x l ,. .. , x 1 Þ be the palindrome. Its cyclic shift ðx l ,. .. , x 1 , x 1 ,. .. , x l Þ is another palindrome. Thus, the cycle includes more than one palindrome g.LEMMA 6. Every cycle in ðV, E 0 [ E 00 Þ can be decomposed into cycles containing exactly two palindromes each, without decreasing the total weight of the matching. PROOF. The proof is by induction on n, the number of palindromes in the cycle. For the induction base, n ¼ 1 is impossible by Lemma 5, and n ¼ 2 is trivially true. Induction step, for n ! 3, denote by X, Y, Z and W palindromes in the cycle, where W, X, Y and Z appear in this order in the cycle. Let x ¼ jovðW, XÞj, y ¼ jovðX, YÞj, z ¼ jovðY, ZÞj and let w be the sum of overlaps of all palindromes between Z and W (inclusive). In case n ¼ 3, Z ¼ W and w ¼ 0. Without loss of generality, let y be a maximum overlap. The total sum of overlaps is x þ y þ z þ w (<ref type="figure" target="#fig_5">Fig. 5</ref>). Remove X and Y and form a cycle of these two palindromes. As X, Y are palindromes, ovðX, YÞ ¼ ovðY, XÞ; therefore, the contribution of this cycle to the matching is 2y. The total overlap of the remaining cycle is w plus the overlap between W and Z, which is at least minðx, zÞ. To see this, denote by PrefðX, iÞ the i-long prefix of string X, and denote by SufðX, iÞ the i-long suffix of X. If x z, SufðW, xÞ ¼ PrefðX, xÞ ¼ PrefðY, xÞ ¼ SufðY, xÞ ¼ PrefðZ, xÞ, where the first, second and fourth equalities follow from the overlap assumptions and the second, third and fourth use the palindrome property. If z x, similarly SufðW, zÞ ¼ PrefðZ, zÞ. Hence, jovðW, ZÞj ! minðz, xÞ. The total weight of the two cycles in the new matching is at least 2y þ w þ minðx, zÞ. Hence, the difference between the new matching and the previous one is at least 2y þ w þ minðx, zÞ À x À y À z À w ¼ y þ minðx, zÞ À x À z ¼ y Àmaxðx, zÞ ! 0, where the last inequality follows by the choice of y as a maximum overlap. The remaining cycle has n À 2 palindromes, and by the induction step, it is breakable to cycles of size two g.</p><formula>A C G T A A G G C C T T AC CA GT TG A G G A C T T C CG</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROPOSITION</head><p>2. There exists a maximum weight matching in which all the added edges form reverse complementary pairs. Any maximum weight matching can be modified to such matching. PROOF. Consider the graph G 2 produced in Step 5 of Algorithm 2. If E 0 [ E 00 contains cycles of more than two palindromes, by Lemma 6, they can be decomposed into cycles of two palindromes. The new matching is of the same size, and for each cycle with exactly two palindromic edges, the remaining edges match in reverse complementary pairs (Lemma 4) g. The maximum weight-matching problem, also known as the assignment problem (<ref type="bibr" target="#b18">West et al., 2001</ref>), can be solved by the Hungarian method in OðjVj 2 logjVj þ jVjjEjÞ time (<ref type="bibr" target="#b9">Kuhn, 2006</ref>). As jVj ¼ ÂðjAEj k=2 Þ and jEj ¼ ÂðjVj 2 Þ ¼ ÂðjAEj k Þ, the running time is OðjAEj 3k=2 Þ. An improvement to this algorithm (<ref type="bibr" target="#b7">Kao et al., 1997</ref>), when the edge weights are integers, runs in Oð ffiffiffiffiffiffi ffi jVj p jEjlogðjVjNÞÞ time, where N is the largest edge weight. In our case N ¼ k, which gives OðkjAEj 5k=4 logðjAEjÞÞ running time. The post-processing of the matching (Lemma 6) requires finding two palindromes with maximum overlap. This can be done in total time linear in the number of palindromes, as overlap lengths are integers in the range of 0 to k, and thus can be sorted using count sort. Hence, we conclude<ref type="figure">Fig. 4</ref>. The bipartite graph for matching unbalanced vertices (Algorithm 2). On the top are the vertices with greater indegree, and on the bottom are the vertices with greater outdegree. Weights on the edges are the maximum overlap between the vertices' sequences. Only the edges out of one vertex are drawn (the graph is a complete bipartite graph). Note that only unbalanced vertices corresponding to ðk À 1Þ-long prefixes and suffixes of palindromes are included</p><formula>x y y z w x z w y y y y w t t w X: Y: Z: W: X: Y:</formula><p>Z: W:<ref type="figure" target="#fig_5">Fig. 5</ref>. Breaking down cycles with more than two palindromes. Left: Palindrome overlaps in a cycle found by the maximum matching. The rectangles at the ends indicate overlap between contiguous palindromes. Right: Partition into two cycles, one containing only the palindromes X and Y with a maximum overlap y. As t ! minðx, zÞ, the partition does not decrease the total contribution of the cycles to the weighted matching (Lemma 6)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>i77</head><p>Design of shortest double-stranded DNA sequences covering all k-mers THEOREM 5. An optimal RC complete sequence for even k can be produced in time OðkjAEj 5k=4 logðjAEjÞÞ. Summarizing Theorems 2 and 5 we obtain THEOREM 6. For every value of k, an optimal RC complete sequence can be obtained in time polynomial in the size of a de Bruijn graph of order k À 1.<ref type="figure" target="#tab_1">Table 1</ref>shows the results of the two algorithms for even k. As we can see, the sequence obtained by the algorithm is of length nearly half that of the original de Bruijn sequence. For example, for k ¼ 12, the minimum length is within 0.15 per cent of 4 12 =2 and within 10, 116 characters from the theoretical lower bound.<ref type="figure" target="#tab_2">Table 2</ref>lists the number of probes of length p needed to cover all k-mers, by cutting an optimal RC complete sequence to p-long probes with overlaps of k À 1. As we can see, the saved factor in using the RC complete sequence is roughly 2. A comparison to the<ref type="figure" target="#tab_1">Table 1</ref>of (<ref type="bibr" target="#b12">Mintseris and Eisen, 2006)</ref>shows that the sequence produced in (<ref type="bibr" target="#b12">Mintseris and Eisen, 2006</ref>) is sub-optimal. Running times: The simple near-optimal algorithm runs in time roughly linear in jAEj k. For example, for k ¼ 8, 10 and 12 the running times are 1.5, 26 and 445 s, respectively. The optimal algorithm requires 5, 126 and 2937 s, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">EXPERIMENTAL RESULTS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">SUMMARY AND DISCUSSION</head><p>In this article, we studied the problem of constructing a minimum length sequence that covers each k-mer or its reverse complement at least once. The problem has applications in construction of dense double-stranded probe arrays for in vitro measuring of protein–DNA binding (<ref type="bibr" target="#b0">Berger et al., 2006;</ref><ref type="bibr" target="#b5">Fordyce et al., 2010</ref>), and for design of synthetic enhancers for in vivo developmental studies (<ref type="bibr" target="#b17">Smith and Ahituv, 2012</ref>). For the case of odd k, we provided a proof that a simple modification of the Eulerian tour algorithm applied to the de Bruijn graph of order k À 1 gives an optimal solution. The algorithm requires linear time in the output sequence length, and it cuts the sequence length in half compared with using a regular de Bruijn sequence. The problem is a bit more involved for even k, and here we provided two algorithms, a linear time near-optimal algorithm and a more complex polynomial algorithm that produces an optimal sequence. The length of the sequence produced by the optimal algorithm is slightly shorter, and both algorithms nearly halve the total length of the sequence. The following related problem was studied by Medvedev et al.</p><p>(<ref type="bibr" target="#b10">Medvedev and Brudno, 2009;</ref><ref type="bibr" target="#b11">Medvedev et al., 2007</ref>): what is the minimum length sequence that contains a given set of k-mers? Their solution is based on bidirected graphs, which are similar to de Bruijn graphs, with the difference that a k-mer and its reverse complement are represented by the same vertex, and the edges represent the possible ways that double-stranded strings can overlap. These graphs were originally conceived by Kececioglu and Myers (1995) and actually discovered earlier by Edmonds (1967). Medvedev et al. stated, without proof, that an Eulerian path can be found in a bidirected graph in the same way as in a regular de Bruijn graph (Lemma 1), but they did not consider explicitly the problem of covering all k-mers and did not make the distinction between even and odd k. In fact, some vertices in a bidirected graph of odd order (when edges represent k-mers of even length) are unbalanced, and thus an Eulerian tour does not exist. Although their method can be applied to our problem, it is slower than ours: they require Oðk 2 log 2 ðjAEjÞjAEj 2k Þ, whereas our algorithms requires OðjAEj k Þ for odd k and OðkjAEj 5k=4 logðjAEjÞÞ for even k. Beyond the theoretical interest, our results are applicable to current (<ref type="bibr" target="#b0">Berger et al., 2006;</ref><ref type="bibr" target="#b5">Fordyce et al., 2010;</ref><ref type="bibr" target="#b17">Smith and Ahituv, 2012</ref>) and future technologies that require complete coverage of double-stranded DNA k-mers. In PBM, although it is desirable to have redundancy in covering k-mers, space on the arrays is limited. By essentially halving the needed sequence length, space is freed on the array to select additional redundant probes with desired properties. Similarly, in designing synthetic enhancer sequences, by using shorter sequences, experiments can be simplified. In current technologies, the de Bruijn (or RC complete) sequence is cut into probes of length p with overlap k À 1 (<ref type="figure" target="#tab_2">Table 2</ref>). There is no constraint that forces these probes to come from a single sequence. A variant of the problem we studied is as follows: what is the minimum number of double-stranded DNA probe sequences of length p that together cover all k-mers? As our solution for an RC complete sequence of even k covers, a few k-mers more than once and direct design of probe sequences of length p might reduce the number of probes needed to cover all k-mers. A heuristic solution to that problem was recently proposed by Riesenfeld and Pollard (<ref type="bibr" target="#b16">Riesenfeld and Pollard, 2012</ref>). They studied the following problem: given k and m, design a set of m double-stranded DNA probes (of equal or almost equal length, denoted as ') that together cover all k-mers. Their algorithm repeatedly searches for disjoint '-long paths between unbalanced vertices. After removal of all such paths, it finds two reversecomplementary cycles. One cycle is cut into probes (with overlaps of k À 1) of length ' or ' þ 1. If the program terminates, an optimal set of oligomers is found; however, there is no theoretical guarantee that it will terminate. In our tests, for k ¼ 6, their program terminates in a few seconds, whereas for k ¼ 8, it takes 41 h and for k ¼ 1042 weeks. For some values of m, the produced probes are not of equal length. A modest reduction in the number of oligomers is obtainable compared with our design: for example, for k ¼ 6 and probe length 15, the algorithm of Riesenfeld and Pollard produced 208 oligomers compared with 210 in our design. For greater values of k, the running time was already prohibitive (for k ¼ 12, it kept running for 41 month), and thus we could not test the performance for these values. Our algorithm, on the other hand, produces an output for values of k 10 in just a few seconds, whereas for k ¼ 12, the linear algorithm takes 510 min and the optimal 51 h. The time is polynomial (or even linear) in the output sequence size, independent of probe length or the number of oligomers.</p><p>Our study raises several additional open questions. First, following (<ref type="bibr" target="#b15">Philippakis et al., 2008</ref>), can one design an optimal RC complete sequence with improved coverage of gapped k-mers? Second, it is known that the number of distinct de Bruijn sequences is ðk!Þ k nÀ1 =k n. What is the number of different optimal RC complete sequences? Third, can one construct an optimal RC complete sequence for even k in linear time? Fourth, is there a closed formula for the length of an optimal RC complete of even order?</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Algorithm1.</head><figDesc>Find forward and reverse paths that cover all edges in a de Bruijn graph G ¼ ðV, EÞ of even order k À 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig.1.</head><figDesc>Fig. 1. An illustration of forward and reverse paths (top and bottom, respectively). The forward path traverses the edges in their direction. The corresponding reverse path traverses the reverse complementary edges in reverse direction</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><figDesc>) [the Chinese postman problem is used in Medvedev and Brudno (2009) and Medvedev et al. (2007) and is also mentioned in Mintseris and Eisen (2006) as a solution on the original de Bruijn graph]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Algorithm2.</head><figDesc>Find an optimal augmentation for a de Bruijn graph G ¼ ðV, EÞ of odd order. 1. Add to G the set E 0 of palindromic edges. The resulting (multi-)graph is G 0 ¼ ðV, E [ E 0 Þ. 2. Define V þ ¼ fv 2 Vjðv, uÞ 2 E 0 ^ ðu, vÞ= 2E 0 for some ug V À ¼ fu 2 Vjðv, uÞ 2 E 0 ^ ðu, vÞ= 2E 0 for some vg: 3. Define a complete bipartite graph H ¼ ðV À , V þ , FÞ with edge weights wðx, yÞ ¼ jovðx, yÞj. 4. Find a maximum weight-matching M in H. 5. Define G 2 ¼ ðV, E [ E 0 [ E 00 Þ where E 00 ¼ fðu, vÞ 2 pðx, yÞjðx, yÞ 2 Mg. 6. Modify M, so that each cycle in the graph ðV, E 0 [ E 00 Þ contains exactly two palindromic edges (Lemma 6).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>LEMMA5.</head><figDesc>No cycle in ðV, E 0 [ E 00 Þ contains a single palindrome.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig.3.</head><figDesc>Fig. 3. An augmented de Bruijn graph of order 1 and an example of forward and reverse paths in it. The dashed edges are added edges. The blue and brown paths represent the forward and reverse paths, respectively. Numbers on edges are the order of the edges in the forward path. The sequences are ACCGAATGCT and AGCATTCGGT for forward and reverse paths, respectively</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><figDesc>Funding: This study was supported in part by the Israel Science Foundation (grant no. 802/08), and by the I-CORE Program of the Planning and Budgeting Committee and the Israel Science Foundation (grant no. 41/11). Y.O. was supported in part by a fellowship from the Edmond J. Safra Center for Bioinformatics at Tel Aviv University and by a Dan David PhD Fellowship. Conflict of Interest: none declared.</figDesc></figure>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">PROOF. ) Observe that the lower bound assumes one occurrence of either w or RC(w) but not both in the sequence for each k-mer w. Assume an RC complete sequence s Ã achieves the lower bound. Then, because of its minimality, it contains no repeating k-mers; therefore, it must correspond to a path F in the de Bruijn graph with no repeating edges. The ordered set of k-mers in s Ã corresponds to consecutive edges in F. Note that the reverse complement sequence t Ã ¼ RCðs Ã Þ is also a path R in the graph: the k-mers in R are the reverse complement of those in F; therefore, consecutive edges form a path in the graph traversed in reverse order. As each k-mer or its reverse complement is covered in s Ã , it is also true that each k-mer or its reverse complement is covered by t Ã , and the two paths F and R, corresponding to the two sequences, together cover all edges. ( Suppose there are two edge-disjoint paths F and R with no repeated edges that together cover all edges. As they are reverse complement of each other, and together cover all edges, for each k-mer w, the sequence s (corresponding to path F) must contain either w or RC(w) (otherwise, some edges would have been uncovered). Hence, s is an RC complete sequence. The same argument holds for RC(s) (corresponding to path R). As each contains exactly half the edges, the length of each of them equals the lower bound g. Before presenting the algorithm for finding an optimal RC complete sequence, we remind the reader of the algorithm for finding an Eulerian cycle in a digraph (Fleischner, 1990). The algorithm starts from an arbitrary source vertex. Initially all edges are unmarked. It traverses a path of unmarked edges in arbitrary order. Each traversed edge is marked; therefore, no edge is traversed more than once. The algorithm also maintains a set A of the visited vertices that are still active, i.e. they have outgoing unmarked edges. When the last unmarked edge outgoing from a vertex is traversed, the vertex is removed from A. If the algorithm reaches a dead end, it starts another traversal from another vertex in A. A dead end can only be achieved when closing a cycle (i.e. returning to the source vertex), as in any other vertex there is always a free incoming edge and a free outgoing edge (as for every vertex except the source the unmarked outdegree and the unmarked indegree are equal). If not all edges have been traversed, A is not empty, and the process can start from a new source. In the end, as the graph is strongly connected and all cycles start from visited vertices (except for the initial vertex), the cycles can be joined to form one Eulerian cycle. The running time of the algorithm is linear in the number of vertices and edges. Algorithm 1 finds an optimal RC complete sequence in a de Bruijn graph of order k À 1 when k is odd. The algorithm imitates the Euler path algorithm but maintains both a forward sequence and a reverse complement sequence simultaneously. The collection of cycles traversed so far is kept in F and the corresponding reverse complement cycles set is R.</note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>i78</head><p>Y.Orenstein and R.Shamir</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Compact, universal DNA microarrays to comprehensively determine transcription-factor binding site specificities</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Berger</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Biotechnol</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="1429" to="1435" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Rankmotifþþ: a motif-search algorithm that accounts for relative ranks of k-mers in binding transcription factors</title>
		<author>
			<persName>
				<forename type="first">X</forename>
				<surname>Chen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="72" to="79" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<monogr>
		<title level="m" type="main">An introduction to matching</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Edmonds</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1967" />
			<pubPlace>Ann Arbor</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Matching, Euler tours and the Chinese postman</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Edmonds</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Johnson</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math. Program</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="88" to="124" />
			<date type="published" when="1973" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<monogr>
		<title level="m" type="main">Eulerian Graphs and Related Topics</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Fleischner</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>North-Holland</publisher>
			<pubPlace>Amsterdam and New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">De novo identification and biophysical characterization of transcription-factor binding sites with microfluidic affinity analysis</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Fordyce</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Biotechnol</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="970" to="975" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">DNA-binding specificities of human transcription factors</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Jolma</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cell</title>
		<imprint>
			<biblScope unit="volume">152</biblScope>
			<biblScope unit="page">327</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">All-cavity maximum matchings</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Kao</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithms Comput</title>
		<imprint>
			<biblScope unit="volume">1350</biblScope>
			<biblScope unit="page" from="364" to="373" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Combinatorial algorithms for DNA sequence assembly</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Kececioglu</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Myers</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="7" to="51" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">The Hungarian method for the assignment problem</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Kuhn</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Naval Res. Logist. Q</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="83" to="97" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">Maximum likelihood genome assembly</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Medvedev</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Brudno</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Biol</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="1101" to="1116" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">Computability of models for sequence assembly</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Medvedev</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithms Bioinform</title>
		<imprint>
			<biblScope unit="page" from="289" to="301" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">Design of a combinatorial DNA microarray for protein-DNA interaction studies</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Mintseris</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Eisen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page">429</biblScope>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<analytic>
		<title level="a" type="main">Direct measurement of DNA affinity landscapes on a highthroughput sequencing instrument</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Nutiu</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Biotechnol</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="659" to="664" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<analytic>
		<title level="a" type="main">Rap: Accurate and fast motif finding based on proteinbinding microarray data</title>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Orenstein</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Biol., [Epub ahead of print</title>
		<imprint>
			<date type="published" when="2013-03-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">Design of compact, universal DNA microarrays for protein binding microarray experiments</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Philippakis</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Biol</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="655" to="665" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">Computing MRCC libraries and related types of DNA oligomer libraries. https://github.com/sriesenfeld</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Riesenfeld</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Pollard</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">MRCC-Libraries</title>
		<imprint>
			<date type="published" when="2012-04-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<monogr>
		<title level="m" type="main">Deciphering the vertebrate regulatory code using short synthetic enhancers in vivo</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Smith</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">N</forename>
				<surname>Ahituv</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2012-04-01" />
		</imprint>
	</monogr>
	<note>date. last accessed</note>
</biblStruct>

<biblStruct   xml:id="b18">
	<monogr>
		<title level="m" type="main">Introduction to Graph Theory</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>West</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Prentice Hall</publisher>
			<pubPlace>Upper Saddle River, NJ</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<monogr>
		<title level="m" type="main">Design of shortest double-stranded DNA sequences covering all k-mers i79</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>