
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:47+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genome analysis BamTools: a C++ API and toolkit for analyzing and managing BAM files</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2011">2011 . 2011</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName>
								<forename type="first">Derek</forename>
								<forename type="middle">W</forename>
								<surname>Barnett</surname>
							</persName>
							<email>barnetde@bc.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Biology</orgName>
								<orgName type="institution">Boston College</orgName>
								<address>
									<addrLine>Chestnut Hill</addrLine>
									<postCode>02467</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Erik</forename>
								<forename type="middle">K</forename>
								<surname>Garrison</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Biology</orgName>
								<orgName type="institution">Boston College</orgName>
								<address>
									<addrLine>Chestnut Hill</addrLine>
									<postCode>02467</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Aaron</forename>
								<forename type="middle">R</forename>
								<surname>Quinlan</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Public Health Sciences and Center for Public Health Genomics</orgName>
								<orgName type="institution">University of Virginia School of Medicine</orgName>
								<address>
									<postCode>22908</postCode>
									<settlement>Charlottesville</settlement>
									<region>VA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Michael</forename>
								<forename type="middle">P</forename>
								<surname>Strömberg</surname>
							</persName>
							<affiliation key="aff2">
								<orgName type="institution">Illumina, Inc</orgName>
								<address>
									<postCode>92121</postCode>
									<settlement>San Diego</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Gabor</forename>
								<forename type="middle">T</forename>
								<surname>Marth</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Biology</orgName>
								<orgName type="institution">Boston College</orgName>
								<address>
									<addrLine>Chestnut Hill</addrLine>
									<postCode>02467</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Alfonso</forename>
								<surname>Valencia</surname>
							</persName>
						</author>
						<title level="a" type="main">Genome analysis BamTools: a C++ API and toolkit for analyzing and managing BAM files</title>
					</analytic>
					<monogr>
						<title level="j" type="main">Bioinformatics BIOINFORMATICS APPLICATIONS NOTE</title>
						<imprint>
							<biblScope unit="volume">1218</biblScope>
							<biblScope unit="issue">27 12</biblScope>
							<biblScope unit="page" from="1691" to="1691"/>
							<date type="published" when="2011">2011 . 2011</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btr174</idno>
					<note type="submission">Received on December 21, 2010; revised on March 23, 2011; accepted on March 31, 2011</note>
					<note>Associate Editor: Contact:</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Analysis of genomic sequencing data requires efficient, easy-to-use access to alignment results and flexible data management tools (e.g. filtering, merging, sorting, etc.). However, the enormous amount of data produced by current sequencing technologies is typically stored in compressed, binary formats that are not easily handled by the text-based parsers commonly used in bioinformatics research. Results: We introduce a software suite for programmers and end users that facilitates research analysis and data management using BAM files. BamTools provides both the first C++ API publicly available for BAM file support as well as a command-line toolkit. Availability: BamTools was written in C++, and is supported on Linux, Mac OSX and MS Windows. Source code and documentation are freely available at http://github.org/pezmaster31/bamtools.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The 1000 Genomes Project created the Sequence Alignment/Map (SAM) format and its sister format, the Binary Alignment/Map (BAM), to provide a 'generic and modular approach to the analysis of genomic sequencing data' (<ref type="bibr" target="#b2">Li et al., 2009</ref>). Such formats are necessary to provide a standardized vehicle for reporting alignment results and analyzing them using a wide variety of tools. The binary, compressed nature of BAM has made it the format of choice in many large-scale sequencing projects—where the text-based SAM does not scale to the massive amounts of data produced. However, storing the data in binary, compressed form comes at a cost as well. Casual programmers and end-users can no longer use the text-based parsing techniques to which they are typically accustomed. APIs and tools that can accomplish similar tasks, while managing BAM's more complex data storage behind the scenes, are vital to genomics researchers. BamTools is a flexible, efficient and easy-to-use suite designed to serve just these sorts of operations. We tested the raw read-through time on a BAM file containing the reads from 56 CEU samples from the 1000 Genomes low-coverage Pilot Project (<ref type="bibr">The 1000</ref><ref type="bibr">Genomes Project Consortium, 2010</ref>), resulting in 116-fold coverage of chromosome 20. It took on average 5:32 min to read every alignment sequentially from this file, on a single CPU (corresponding to ∼4.5 h for a whole-genome file, at the same coverage). Resource usage is ultimately application dependent; however, the basic process of reading alignments from BAM files is I/O bound rather than CPU bound.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">The toolkit</head><p>The BamTools command-line toolkit provides end-users with a suite of utilities for querying and manipulating BAM files.<ref type="figure" target="#tab_1">Table 1</ref>alternative indexing format, basic coverage output, conversion of alignment data to other text formats (e.g. BED, JSON, YAML), the ability to split a BAM into multiple files based on some criteria (e.g. reference, read group, mapped status) in a single command and a more comprehensive filtering scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1">Scriptable filtering</head><p>The filter utility in BamTools provides a powerful scripting feature that allows a user to create complex filter operations. While various toolkits offer some level of filtering capability, the ability to utilize combinations of both AND and OR logic is a novel and useful feature. The script is based on JavaScript Object Notation (JSON), providing intuitive named fields to define filter properties and an optional 'rule'. The example script shown below will result in an output BAM file containing only alignments that have high map quality OR both mates mapped (inclusive), while excluding alignments from read groups starting with the pattern 'ERR':</p><p>{ "filters" : [ { "id" : "inAnyErrorReadGroup", "tag" : "RG:ERR*" }, { "id" : "highMapQuality", "mapQuality" : "&gt;=75" }, { "id:" : "bothMatesMapped", "isMapped" : "true",</p><formula>"isMateMapped" : "true" } ], "rule" : "!inAnyErrorReadGroup &amp; (highMapQuality | bothMatesMapped)" }</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">BamTools index format</head><p>Indexing a sorted BAM file allows a (semi-)random-access jump to a particular region of interest. The BAM format describes a standard index format (BAI), which uses a binning scheme similar to the one implemented in the UCSC Genome Browser (<ref type="bibr" target="#b1">Kent et al., 2002</ref>). This BAI scheme provides quick access to the beginning of the contiguous run of alignments (or 'chunk') that overlaps the beginning of a region of interest. However in large datasets, where coverage is high, a significant number of alignments may be read and immediately discarded before finding an alignment that actually overlaps the region of interest. In response to this, we created an alternative BamTools index scheme (BTI) that is based, not on alignment position, but on a fixed read count. Thus, the number of alignments that must be read and discarded always has a fixed upper bound. Choosing the bin size depends on a trade-offbetween disk space versus access speed, and can be configured as needed. In our own index files, we use bins of 1000 alignments. Based on 1 million jumps to random positions in the chromosome 20 BAM file mentioned above, our new indexing method provides, on average, 10 times faster access than the standard BAI (with an SD roughly 20 times lower). The slowest access time (worst case) was also roughly 10 times faster for BTI than the worst case for BAI (<ref type="figure">Table 2</ref>).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>offers a subset of the currently available tools. There is some overlap of features found in the BamTools and SAMtools suites. However, it is not our intention to attempt to replace SAMtools. Instead, BamTools provide features that extend the flexibility of next-generation sequencing analysis. These features include an D.W.Barnett et al.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><figDesc>Table 1. BamTools command-line toolkit</figDesc><table>Utility 
Description 

convert 
Converts between BAM and a number of other formats. 
count 
Prints number of alignments in BAM file(s). 
coverage 
Prints coverage information from a BAM file. 
filter 
Filters BAM file(s) based on user-specified criteria. 
header 
Prints BAM header information. 
index 
Generates index for BAM file (either BAI or BTI). 
merge 
Merges multiple BAM files into single file. 
sort 
Sorts the BAM file. 
split 
Splits a BAM file into multiple files, based on some criteria. 
stats 
Prints general statistics from input BAM file(s). 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><figDesc>Table 2. BamTools index performance</figDesc><table>Index type 
Jump times (µs) 

Mean 
SD 
Worst-case 

BAI 
446 
13669.81 
1 291 278 
BTI 
40 
665.38 
121 403 

Generated from performing 1 million random jumps in a BAM file containing 116-fold 
coverage of human chromosome 20. 

</table></figure>

			<note place="foot">* To whom correspondence should be addressed. 2 FEATURES AND METHODS 2.1 The API The BamTools API provides programmers with intuitive interfaces for querying and generating BAM files. The primary classes used by client code include BamReader, BamWriter and the BamAlignment data structure. A few additional modules exist as convenience classes: BamMultiReader allows synchronized reading from several BAM files, SamHeader provides direct query and modification of the SAM-formatted header text that is included in BAM files, and BamIndex, which serves as an interface hook for advanced clients to implement their own custom index schemes. While APIs for processing BAM files exist for other languages (Li et al., 2009; McKenna et al., 2010), to our knowledge the BamTools library is the only C++-specific BAM API freely available at the time of writing. By offering a BAM API implemented in C++, we provide the large community of C++ developers a tool that can leverage that language&apos;s main advantage—combining raw performance with the benefits of object-oriented design. These include clearly labeled data structures, intuitive class interfaces and utilizing the RAII (Resource Acquisition Is Initialization) idiom, which makes client code simpler and safer. The following example illustrates how to create a new BAM file containing only high-quality alignments from the forward strand of a reference sequence: BamReader reader; BamWriter writer; // .. open reader &amp; writer with desired files BamAlignment al; while ( reader.GetNextAlignment(al) ) { if ( !al.IsReverseStrand() &amp;&amp; al.MapQuality &gt;= 75 ) writer.SaveAlignment(al); }</note>

			<note place="foot">© The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from [12:18 30/5/2011 Bioinformatics-btr174.tex]</note>

			<note place="foot" n="3"> CONCLUSION The BamTools C++ API/library has been successfully integrated into a variety of applications. It provides the BAM file support for several utilities in the BEDtools suite (Quinlan et al., 2010). Using BamTools, the freeBayes variant caller (https://github.com/ekg/freebayes) has produced whole-genome calls for the NCBI&apos;s new 1000 Genomes pipeline on up to 1000 BAM files simultaneously. The data management utilities (indexing, merging, etc.) provided by the BamTools command-line toolkit also play an integral role in this pipeline. Visualization software like Gambit (http://bioinformatics.bc.edu/marthlab/Gambit), uses the BamTools API to efficiently access alignment data in a setting where real-time performance is critical.</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENT</head><p>We would like to thank Baptiste Lepilleur for the public-domain JSON parser (JsonCPP) and Heng Li, primary developer of the SAMtools suite.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">A map of human genome variation from population-scale sequencing</title>
	</analytic>
	<monogr>
		<title level="m">The 1000 Genomes Project Consortium</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1061" to="1073" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">The human genome browser at UCSC</title>
		<author>
			<persName>
				<forename type="first">W</forename>
				<forename type="middle">J</forename>
				<surname>Kent</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="996" to="1106" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">The sequence alignment/map format and SAMtools</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bionformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="2078" to="2079" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">The genome analysis toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Mckenna</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="1297" to="303" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">BEDTools: a flexible suite of utilities for comparing genomic features</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">R</forename>
				<surname>Quinlan</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bionformatics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="841" to="842" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>