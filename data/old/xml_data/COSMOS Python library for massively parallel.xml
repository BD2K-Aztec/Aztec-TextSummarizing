
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:32+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genome analysis COSMOS: Python library for massively parallel workflows</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2014">20 2014</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Erik</forename>
								<surname>Gafni</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Biomedical Informatics</orgName>
								<orgName type="department" key="dep2">Harvard Medical School</orgName>
								<address>
									<addrLine>10 Shattuck Street</addrLine>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">J</forename>
								<surname>Lovelace</surname>
							</persName>
						</author>
						<author>
							<persName>
								<surname>Luquette</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Biomedical Informatics</orgName>
								<orgName type="department" key="dep2">Harvard Medical School</orgName>
								<address>
									<addrLine>10 Shattuck Street</addrLine>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Alex</forename>
								<forename type="middle">K</forename>
								<surname>Lancaster</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Biomedical Informatics</orgName>
								<orgName type="department" key="dep2">Harvard Medical School</orgName>
								<address>
									<addrLine>10 Shattuck Street</addrLine>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Beth Israel Deaconess Medical Center</orgName>
								<address>
									<addrLine>330 Brookline Avenue</addrLine>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jared</forename>
								<forename type="middle">B</forename>
								<surname>Hawkins</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Biomedical Informatics</orgName>
								<orgName type="department" key="dep2">Harvard Medical School</orgName>
								<address>
									<addrLine>10 Shattuck Street</addrLine>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jae-Yoon</forename>
								<surname>Jung</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Biomedical Informatics</orgName>
								<orgName type="department" key="dep2">Harvard Medical School</orgName>
								<address>
									<addrLine>10 Shattuck Street</addrLine>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Yassine</forename>
								<surname>Souilmi</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Biomedical Informatics</orgName>
								<orgName type="department" key="dep2">Harvard Medical School</orgName>
								<address>
									<addrLine>10 Shattuck Street</addrLine>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Department of Biology</orgName>
								<orgName type="institution">Mohammed V University-Agal</orgName>
								<address>
									<addrLine>4 Ibn Battouta Avenue, Rabat B.P:1014RP</addrLine>
									<country key="MA">Morocco</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Dennis</forename>
								<forename type="middle">P</forename>
								<surname>Wall</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Biomedical Informatics</orgName>
								<orgName type="department" key="dep2">Harvard Medical School</orgName>
								<address>
									<addrLine>10 Shattuck Street</addrLine>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Beth Israel Deaconess Medical Center</orgName>
								<address>
									<addrLine>330 Brookline Avenue</addrLine>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Peter</forename>
								<forename type="middle">J</forename>
								<surname>Tonellato</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Biomedical Informatics</orgName>
								<orgName type="department" key="dep2">Harvard Medical School</orgName>
								<address>
									<addrLine>10 Shattuck Street</addrLine>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Beth Israel Deaconess Medical Center</orgName>
								<address>
									<addrLine>330 Brookline Avenue</addrLine>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genome analysis COSMOS: Python library for massively parallel workflows</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">30</biblScope>
							<biblScope unit="page" from="2956" to="2958"/>
							<date type="published" when="2014">20 2014</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btu385</idno>
					<note type="submission">Received on February 7, 2014; revised on May 6, 2014; accepted on June 9, 2014</note>
					<note>Associate Editor: Michael Brudno Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Efficient workflows to shepherd clinically generated gen-omic data through the multiple stages of a next-generation sequen-cing pipeline are of critical importance in translational biomedical science. Here we present COSMOS, a Python library for workflow management that allows formal description of pipelines and partitioning of jobs. In addition, it includes a user interface for tracking the progress of jobs, abstraction of the queuing system and fine-grained control over the workflow. Workflows can be created on traditional computing clusters as well as cloud-based services. Availability and implementation: Source code is available for academic non-commercial research purposes. Links to code and documentation are provided at http://lpm.hms.harvard.edu and http:// wall</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The growing deluge of data from next-generation sequencers leads to analyses lasting hundreds or thousands of compute hours per specimen, requiring massive computing clusters or cloud infrastructure. Existing computational tools like Pegasus (<ref type="bibr">Deelman et al., 2005</ref>) and more recent efforts like Galaxy (<ref type="bibr">Goecks et al., 2010</ref>) and Bpipe (<ref type="bibr">Sadedin et al., 2012</ref>) allow the creation and execution of complex workflows. However, few projects have succeeded in describing complicated workflows in a simple, but powerful, language that generalizes to thousands of input files; fewer still are able to deploy workflows onto distributed resource management systems (DRMs) such as Platform Load Sharing Facility (LSF) or Sun Grid Engine that stitch together clusters of thousands of compute cores. Here we describe COSMOS, a Python library developed to address these and other needs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">FEATURES AND METHODS</head><p>An essential challenge for a workflow definition language is to separate the definition of tools (which represent individual analyses) from the definition of the dependencies between them. Several workflow libraries require each tool to expect specifically named input files and produce similarly specific output files; however, in COSMOS, tool I/O is instead controlled by specifying file types. For example, the BWA alignment tool (<ref type="figure" target="#fig_3">Fig. 1a</ref>) can expect FASTQ-typed inputs and produce a SAM-typed output, but does not depend on any specific file names or locations. Additionally, tool definitions do not require knowledge of the controlling DRM. Once tools have been defined, their dependencies can be formalized via a COSMOS workflow, which is defined using Python functions that support the map-reduce paradigm (<ref type="bibr">Dean and Ghemawat, 2004</ref>) (<ref type="figure" target="#fig_3">Fig. 1b</ref>). Sequential workflows are defined primarily by the sequence_ primitive, which runs tools in series. The apply_ primitive is provided to describe workflows with potentially unrelated branching by executing tools in parallel. To facilitate map-reduce in large and branching workflows, COSMOS introduces a tagging system that associates a set of key-value tags (e.g. a sample ID, chunk ID, sequencer ID or other job parameter) with specific job instances. This tagging feature enables users to formalize reductions over existing tag sets or to split by creating new combinations of tags (Supplementary<ref type="figure" target="#fig_3">Fig. S1</ref>). To execute a workflow, COSMOS creates a directed acyclic graph (DAG) of tool dependencies at runtime (<ref type="figure" target="#fig_3">Fig. 1c</ref>) and automatically links the inputs and outputs between tools by recognizing file extensions as types. All file paths generated by tool connections are managed by COSMOS, automatically assigning intermediate file names. Another major challenge in workflow management is execution on large compute clusters, where transient errors are commonplace and must be handled gracefully. If errors cannot be automatically resolved, the framework should record exactly which jobs have failed and allow the restart of an analysis after error resolution. COSMOS uses the DRMAA library (<ref type="bibr">Troger et al. 2007</ref>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/3.0/), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com overriding a Python function that is called on every job control event. COSMOS' internal data structures are stored in an SQL database using the Django framework (https://djangoproject. com) and is distributed with a Web application for monitoring the state of both running and completed workflows, querying individual job states, visualizing DAGs and debugging failed jobs (Supplementary Figs S2–S5). Each COSMOS job is continuously monitored for resource usage, and a summary of these statistics and standard output and error streams are stored in the database. This allows users to fine-tune estimated DRM parameters such as CPU and memory usage for more efficient cluster usage. Pipeline restarts are also facilitated by the persistent database, as it records both success and failure using job exit codes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">COMPARISON AND DISCUSSION</head><p>Projects such as Galaxy and Taverna (<ref type="bibr">Wolstencroft et al., 2013</ref>) are aimed at users without programming expertize and offer graphical user interfaces (GUIs) to create workflows, but come at the expense of power. For example, it is straightforward to describe task dependencies in Galaxy's drag-and-drop workflow creator; however, to parallelize alignment by breaking the input FASTQ into several smaller chunks to be aligned independently, input stages must be manually created for each chunk or the workflow must be applied to each chunk manually. In addition, the user must fix the number of input chunks a priori. COSMOS resolves this tedious process for the programmer by dynamically building its DAG at runtime. Such limitations may not be a major concern for small-scale experiments where massive parallelization to reduce runtime is not critical; however, when regularly analyzing terabytes of raw data, the logistics of parallelization and job management play a central role. Snakemake (K € oster and<ref type="bibr">Rahmann, 2012</ref>) looks to the proven design of GNU Make to describe DAGs for complicated workflows, whereas the Ruffus project (<ref type="bibr">Goodstadt, 2010)</ref>aims to create a DAG by providing a library of Python decorators. However, neither of these projects directly supports integration with a DRM. The Pegasus system offers excellent integration with DRMs and even the assembly of several independent DRMs using the Globus software; however, the description of some simple workflows can require considerably more code than the equivalent COSMOS code (Supplementary<ref type="figure">Fig.  S6</ref>), and the DAG is not determined at runtime, so cannot depend on the input. Bpipe offers an elegant syntax for defining the DAG, but does not include a graphic user interface for monitoring and runtime statistics. Additionally, COSMOS' persistent database and Web front end allow rapid diagnosis of errors in data input or workflow execution (see Supplementary<ref type="figure">Table S1</ref>for a detailed feature comparison). COSMOS has been tested on the Ubuntu, Debian and Fedora Linux distributions. The only dependency is Python 2.6 or newer and the ability to install Python packages; we recommend a DRMAA-compatible DRM for intensive workloads.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>) to manage job submission, status checking and error handling. DRMAA supports most DRM platforms, including Condor, although our efforts used LSF and Sun Grid Engine. Users may control DRM submission parameters by *To whom correspondence should be addressed. y The authors wish it to be known that, in their opinion, the first two authors should be regarded as Joint First Authors. z Present address: Invitae 458 Brannan St., San Francisco, CA 94107, USA. x Present address: Department of Pediatrics, Division of Systems Medicine, Stanford University, 1265 Welch Road, Stanford, CA, USA. ß The Author 2014. Published by Oxford University Press.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><figDesc>Funding: This work was supported by the National Institutes of Health [1R01MH090611-01A1 to D.P.W, 1R01LM011566 to P.J.T., and 5T15LM007092 to P.J.T. and J.B.H.]; and a Fulbright Fellowship [to Y.S.]. Conflict of Interest: L.J.L. is also an employee with Claritas Genomics Inc., a licensee of COSMOS. REFERENCES Dean,J. and Ghemawat,S. (2004) MapReduce: simplified data processing on large clusters. In: Proceedings of the 6th Conference on Symposium on Operating Systems Design &amp; Implementation. USENIX Association, Berkeley, CA, p. 10. Deelman,E. et al. (2005) Pegasus: A framework for mapping complex scientific workflows onto distributed systems. Sci. Program., 13, 219–237. Goecks,J. et al. (2010) Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences. Genome Biol, 11, R86.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig.1.</head><figDesc>Fig. 1. (a) Tools are defined in COSMOS by specifying input and output types, not files, and a cmd() function returning a string to be executed in a shell. cpu_req and other parameters may be inspected by a programmer-defined Python function to set DRM parameters or redirect jobs to queues. (b) Workflows are defined using map-reduce primitives: sequence_, map_ (execute the align tool from (a) on each 'chunk' in parallel) and reduce_ (group the aligned outputs by sample tag). (c) Directed acyclic graph of jobs generated by the workflow in (b) to be executed via the DRM for four input FASTQ files (with sample tags s1 and s2, and chunk tags of c1 and c2)</figDesc></figure>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>