
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:52+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Structural bioinformatics pyRMSD: a Python package for efficient pairwise RMSD matrix calculation and handling</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2013">18 2013</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Víctor</forename>
								<forename type="middle">A</forename>
								<surname>Gil</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Barcelona Supercomputing Center</orgName>
								<orgName type="institution">Joint BSC-IRB Research Program in Computational Biology</orgName>
								<address>
									<postCode>08034</postCode>
									<settlement>Barcelona</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Víctor</forename>
								<surname>Guallar</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Barcelona Supercomputing Center</orgName>
								<orgName type="institution">Joint BSC-IRB Research Program in Computational Biology</orgName>
								<address>
									<postCode>08034</postCode>
									<settlement>Barcelona</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="laboratory">Institució Catalana de Recerca i Estudis Avanç ats (ICREA)</orgName>
								<address>
									<addrLine>Passeig Lluís Companys 23</addrLine>
									<postCode>E-08010</postCode>
									<settlement>Barcelona</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Structural bioinformatics pyRMSD: a Python package for efficient pairwise RMSD matrix calculation and handling</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">29</biblScope>
							<biblScope unit="page" from="2363" to="2364"/>
							<date type="published" when="2013">18 2013</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btt402</idno>
					<note type="submission">Received on April 24, 2013; revised on June 11, 2013; accepted on July 5, 2013</note>
					<note>Spain Associate Editor: Anna Tramontano Contact: victor.guallar@bsc.es Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We introduce pyRMSD, an open source standalone Python package that aims at offering an integrative and efficient way of performing Root Mean Square Deviation (RMSD)-related calculations of large sets of structures. It is specially tuned to do fast collective RMSD calculations, as pairwise RMSD matrices, implementing up to three well-known superposition algorithms. pyRMSD provides its own symmetric distance matrix class that, besides the fact that it can be used as a regular matrix, helps to save memory and increases memory access speed. This last feature can dramatically improve the overall performance of any Python algorithm using it. In addition, its extensi-bility, testing suites and documentation make it a good choice to those in need of a workbench for developing or testing new algorithms. Availability: The source code (under MIT license), installer, test suites and benchmarks can be found at https://pele.bsc.es/ under the tools section.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>As molecular modeling keeps expanding, obtaining the Root Mean Square Deviation (RMSD) with optimum superposition for a large set of structures in an efficient and fast manner is a necessity. Clustering methods, for example, which are becoming increasingly popular as trajectory analysis and compression tools (<ref type="bibr" target="#b2">Karpen et al., 1993;</ref><ref type="bibr" target="#b4">Phillips et al., 2011</ref>), can benefit from the use of a pre-calculated pairwise distance matrix or even totally depend on it, e.g. Spectral Clustering (<ref type="bibr" target="#b3">Luxburg, 2007</ref>). However, as hardware and algorithms improve, the output size of simulations grows bigger, and the calculation of the distance matrix becomes the bottleneck in any process depending on it. There are several implementations of the different superposition algorithms, which are written in wide spectra of programming languages. Almost all Molecular Dynamics packages and biomolecule handling software include their own RMSD calculation tools. Every time programmers need to use an external RMSD solution in a project, they have two options. The first one is to use an external source or library, which requires previous knowledge of the language in which it was written and its dependencies. A second option is to use a precompiled tool with a bigger scope, which means creating an interface with their own application by writing wrappers and output converters (with the consequent performance loss). In general, the main problems to face are fragmentation, excess of or missing features, bad documentation, lack of sources and the intrinsic difficulty of the languages used. pyRMSD is a Python package that overcomes all the above problems in the following way: It is totally focused on the calculation of RMSD. It provides solutions for all the usual RMSD problems and is specially tuned for RMSD collective calculations, like pairwise RMSD matrices, a feature that is usually missing in most utilities. Python (www.python.org) is an easy to learn and use programming language, which has an extensive library pool that includes wrappers for almost all libraries used in science. This makes it one of the better languages for scientific software prototyping and development.</p><p>As pure Python implementations have a poor performance (even when using fine tuned packages as numpy), pyRMSD uses Python C extensions with OpenMP and CUDA code, allowing the full use of multicore machines and Graphics Processing Units (GPU). It implements the most important superposition algorithms in the same place. It is documented, well tested and open source; therefore, it can be the perfect workbench for any experienced user who wants to develop and test their own superposition algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">IMPLEMENTATION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Features</head><p>pyRMSD is built around two main classes: the RMSDCalculator and the CondensedMatrix. The RMSDCalculator class provides a straightforward interface to three superposition algorithm implementations, as well as some convenience methods to set up their options: Kabsch's superposition algorithm (<ref type="bibr" target="#b1">Kabsch, 1978</ref>), QTRFIT (<ref type="bibr" target="#b0">Heisterberg, 1990</ref>) and the Quaternion Characteristic Polinomial method (QCP) (<ref type="bibr" target="#b5">Theobald, 2005</ref>). All have been written as Python C extensions, with serial and parallel (OpenMP) versions for the first two and an additional CUDA version for the last.RMSDCalculator's methods cover all the usual scenarios for superposition and RMSD calculation:</p><p>(1) Pairwise RMSD calculation.</p><p>(2) Reference versus the rest of the set.</p><p>(3) Reference versus following conformations.</p><p>(4) Calculation of a pairwise RMSD matrix of the whole set.</p><p>(5) Iterative superposition of a set of conformations.</p><p>Moreover, it offers two additional options that further extend the previous methods. The first one is allowing the modification of input coordinates to obtain the superposed conformations. The second one is to the use of different coordinate sets for superposition and RMSD calculation. The CondensedMatrix class models a symmetric squared matrix. It allows the same row/column access of a regular matrix, storing only the upper triangle and thus saving half of the memory. The class has been completely written in C, allowing access times which are up to 6Â faster compared with its Python counterpart. As a consequence, any algorithm that requires intensive matrix read access improves its performance. For instance, our cardinality function benchmark, available in the benchmarks folder, shows a 100Â free speedup just by using it. pyRMSD also provides two small helper classes that make the process of generating a pairwise RMSD matrix easier. The Reader class obtains the coordinate sets by means of a simple and fast C written PDB reader. Finally, the MatrixHandler class is capable of creating a distance matrix from a set of coordinates and managing its persistence, with functions to load and save matrices from disk.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Usage</head><p>The following code snippet illustrates the creation and access of a pairwise RMSD matrix of a 35 k frames trajectory, available in the 'benchmark/data' folder, using the QCP superposition algorithm, in its CUDA version:Here, we can find a minimum subset of all the features of pyRMSD and of the MatrixHandler class itself. However, it is a good example of how this class nicely encapsulates all the steps of creating a matrix and of the succinct interface presented to the user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Performance</head><p>Using pyRMSD, we have coded a set of benchmark scripts to understand the performance differences between the three implemented algorithms. We have observed that, in all studied scenarios, QCP is the faster method. We have also compared the performance of our four QCP implementations. Compared with the serial code, our OpenMP version is 5Â faster; our CUDA-based implementation shows a 11Â speedup (see<ref type="figure" target="#fig_2">Fig. 1</ref>). This leads us to conclude that GPU implementations can really make the difference in this kind of problems. These and other benchmarks, as well as a comparison with other packages, are discussed in depth in the Supplementary Data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CONCLUSIONS</head><p>We have created pyRMSD, a user-friendly RMSD focused Python package, which allows, besides other functionalities, the efficient creation of RMSD pairwise matrices. Its design provides a natural way of accessing its functionalities making it a good candidate to be used in bigger packages to replace slower RMSD functions. This is specially true for those who need to calculate and access large pairwise RMSD matrices, as clustering-related packages.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>from pyRMSD.matrixHandler import MatrixHandler from pyRMSD.utils.proteinReading import Reader cords = Reader().readThisFile('amber_35k.pdb')\ .gettingOnlyCAs().read() matrix = MatrixHandler()\ .createMatrix(coords, 'QCP_OMP_CALCULATOR')</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><figDesc>Funding: European project PELE (ERC-2009-Adg 25027). Conflict of Interest: none declared.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig.1.</head><figDesc>Fig. 1. QCP calculator performance over a Ubiquitin trajectory (only CAs) using a 6 cores Intel Xeon E5649 CPU with an NVIDIA M2090 GPU. OpenMP version reaches a 5Â speedup. CUDA version gets a maximum 11Â speedup (almost 12 million RMSD calculations per second)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>*To whom correspondence should be addressed. ß The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com</figDesc><table></table></figure>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">V.A.Gil and V.Guallar at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<monogr>
		<title level="m" type="main">QTRFIT algorithm for superimposing two similar rigid molecules. The Ohio Supercomputer Center</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">J</forename>
				<surname>Heisterberg</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<pubPlace>Columbus, OH</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">A discussion of the solution for the best rotation to relate two sets of vectors</title>
		<author>
			<persName>
				<forename type="first">W</forename>
				<surname>Kabsch</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta. Crystallogr. A</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="827" to="828" />
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Statistical clustering techniques for the analysis of long molecular dynamics trajectories: analysis of 2.2-ns trajectories of YPGDV</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">E</forename>
				<surname>Karpen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biochemistry</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="412" to="420" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">A tutorial on spectral clustering</title>
		<author>
			<persName>
				<forename type="first">U</forename>
				<surname>Luxburg</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Stat. Comp</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="395" to="416" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Validating clustering of molecular dynamics simulations using polymer models</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">L</forename>
				<surname>Phillips</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page">445</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Rapid calculation of RMSDs using a quaternion-based characteristic polynomial</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">L</forename>
				<surname>Theobald</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta. Crystallogr. A</title>
		<imprint>
			<biblScope unit="page" from="61" to="478" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>