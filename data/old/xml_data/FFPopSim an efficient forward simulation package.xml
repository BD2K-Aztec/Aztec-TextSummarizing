
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:58+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genetics and population analysis FFPopSim: an efficient forward simulation package for the evolution of large populations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2012">. 24 2012</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Fabio</forename>
								<surname>Zanini</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Max Planck Institute for Developmental Biology</orgName>
								<orgName type="laboratory">Evolutionary Dynamics and Biophysics Group</orgName>
								<address>
									<postCode>72076</postCode>
									<settlement>Tü bingen</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Richard</forename>
								<forename type="middle">A</forename>
								<surname>Neher</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Max Planck Institute for Developmental Biology</orgName>
								<orgName type="laboratory">Evolutionary Dynamics and Biophysics Group</orgName>
								<address>
									<postCode>72076</postCode>
									<settlement>Tü bingen</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jeffrey</forename>
								<surname>Barrett</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Max Planck Institute for Developmental Biology</orgName>
								<orgName type="laboratory">Evolutionary Dynamics and Biophysics Group</orgName>
								<address>
									<postCode>72076</postCode>
									<settlement>Tü bingen</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genetics and population analysis FFPopSim: an efficient forward simulation package for the evolution of large populations</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">28</biblScope>
							<biblScope unit="page" from="3332" to="3333"/>
							<date type="published" when="2012">. 24 2012</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/bts633</idno>
					<note type="submission">Received on July 20, 2012; revised on September 26, 2012; accepted on October 17, 2012</note>
					<note>BIOINFORMATICS APPLICATIONS NOTE Associate Editor: Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: The analysis of the evolutionary dynamics of a population with many polymorphic loci is challenging, as a large number of possible genotypes needs to be tracked. In the absence of analytical solutions, forward computer simulations are an important tool in multi-locus population genetics. The run time of standard algorithms to simulate sexual populations increases as 8 L with the number of loci L, or with the square of the population size N. Results: We have developed algorithms to simulate large populations with arbitrary genetic maps, including multiple crossovers, with a run time that scales as 3 L. If the number of crossovers is restricted to at most one, the run time is reduced to L2 L. The algorithm is based on an analogue of the Fast Fourier Transform (FFT) and allows for arbitrary fitness functions (i.e. any epistasis). In addition, we include a streamlined individual-based framework. The library is implemented as a collection of Cþþ classes and a Python interface.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Forward simulations of population genetics track either the number of individuals carrying each possible genotype or the genotype of every individual in the population, as illustrated in<ref type="figure">Figure 1</ref>. The latter strategy has been implemented in a number of flexible simulation packages (<ref type="bibr" target="#b0">Guillaume and Rougemont, 2006;</ref><ref type="bibr" target="#b3">Peng and Kimmel, 2005;</ref><ref type="bibr" target="#b4">Spencer and Coop, 2004</ref>). In large populations with a moderate number of loci L, storing the abundance of all possible 2 L genotypes is often faster. Simulating such large populations with a small number of loci is for example essential when studying the evolution of drug resistance in viral or bacterial pathogens. Individual-based population genetics simulations are straightforward and usually use a discrete generation scheme in which processes such as mutation, selection and migration are applied at every generation to every individual. Individuals are then paired up via a mating scheme and recombinant offspring are produced. Existing toolboxes often emphasize biological realism and allow the user to specify complex life cycles. Our emphasis here is on efficient simulation of large populations. The class haploid_lowd of FFPopSim tracks the distribution P(g) of gametes across all possible 2 L genotypes, denoted by g ¼ ðs 1 ,. .. , s L Þ where s i ¼ 0/1 (see<ref type="figure">Fig. 1</ref>). This genotype distribution changes owing to mutation, selection and recombination. In our implementation, selection acts on haploid gametes, precluding dominance effects. Recombination is a computationally expensive operation, as it involves pairs of parents (up to 4 L of them) that can combine their genome in many different ways (2 L for arbitrary genetic maps, 2L when allowing single crossovers only). As a consequence, a naive implementation requires Oð8 L Þ or OðL4 L Þ operations to calculate the distribution of recombinant genotypes for arbitrary or single crossover recombination, respectively. It is intuitive that the complexity of this algorithm can be reduced: given a recombination pattern, only a fraction of the genome is passed on and all genotypes that agree on that fraction contribute identically. We show in the Supplementary Material that the distribution of recombinants can be calculated in Oð3 L Þ steps for arbitrary crossover patterns and in OðL2 L Þ steps if only a single crossover is allowed. This reduces the complexity of evolving sexual populations to that of asexual populations. The crucial ingredient for the increased performance is a Fast Fourier Transform on genotype spaces explained in detail in the Supplementary Material. The genotype space is an L dimensional hypercube on which Fourier and Taylor expansions can be defined. After selection, mutation and recombination, the population distribution P(g) contains the expected number of individuals of genotype g in the next generation. For stochastic population genetics, we still need to resample the population in a way that mimics the randomness of reproduction. This is achieved by resampling individuals according to a Poisson distribution with mean N P(g) for each genotype. The resulting population has a size of approximately N AE Oð ffiffiffiffi N p Þ. The fluctuations in the population size are small if N is large and do not propagate since the population is resampled de novo each generation. The user can set the expected population size before resampling and generate any desired time-dependent population size. For a general discussion of multi-locus evolution see e.g. (<ref type="bibr" target="#b2">Neher and Shraiman, 2011</ref>).<ref type="figure" target="#fig_1">Figure 2</ref>shows how the time required to simulate one generation increases with the number of loci, confirming the expected scaling behaviour of the computational complexity.results, such as a mutation–selection–drift equilibrium or the decay of linkage disequilibrium. The Cþþ library can be linked against custom code and modified for specific purposes. The class itself is called haploid_lowd, as it simulates a haploid population with a relatively small number of loci. As an example, we discuss here the problem of fitness valley crossing, which has recently received attention in the population genetics literature (<ref type="bibr" target="#b1">Lynch, 2010;</ref><ref type="bibr" target="#b5">Weissman et al., 2010</ref>) and requires forward simulation of large populations while tracking the state of several loci. Consider a fitness landscape where the wild-type genotype has (Malthusian) fitness s 1 , the quadruple mutant has fitness s 1 þ s 2 , and all intermediate genotypes have the same slightly deleterious fitness 0 (Às 1 relative to wild type). The time required for crossing the valley can be computed by the following routine: import FFPopSim L ¼ 4 # number of loci N ¼ 1e10 # population size # create population and set rates p ¼ FFPopSim.haploid_lowd(L) p.set_recombination_rates(0.001) p.set_mutation_rates(1e-5) # start with wildtype: 0b0000 ¼ 0 p.set_genotypes (<ref type="bibr">[0b0000]</ref>,<ref type="bibr">[N]</ref>) # set positive relative fitness for wildtype # and quadruple mutant: 0b1111 ¼ 15 p.set_fitness_function (<ref type="bibr">[0b0000, 0b1111]</ref>,<ref type="bibr">[0.01, 0.02]</ref>) # evolve until the quadruple mutant spreads while p.get_genotype_frequency(0b1111)50.5: p.evolve(100) print p</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">USAGE</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>.generation</head><p>The run time and memory requirements of 3 L or L2 L still preclude the simulation of more than L ¼ 20 loci. For this reason, we also include the class haploid_highd to perform individualbased simulations with the same interface. haploid_highd can simulate an arbitrarily large number of loci and has overall run time and memory requirements OðNLÞ in the worst case scenario (see<ref type="figure" target="#fig_1">Fig. 2B</ref>). Identical genotypes are grouped into clones to speed up the simulation whenever diversification via mutation or recombination is rare (Lð þ Þ ( 1, where and are mutation and recombination rates, respectively). The population size can be adjusted at any time by changing the carrying capacity. Overall, haploid_highd can simulate one megabase genomes in a population of 10 5 individuals in about one second per generation on a present day desktop computer. We have written a specific subclass hivpopulation for large viral populations that is also included in FFPopSim. As of now, the library does not support dominance effects; that would require a fitness function that depends on pairs of haploid genomes. Such an extension to diploid populations is planned.<ref type="figure">1</ref>. Strategies for forward simulations: The left panel illustrates a scheme that tracks the abundance of each possible genotype, encoded as a bit string. This is feasible up to L % 20 and is implemented in FFPopSim as the class haploid_lowd. Recombination requires considering all possible pairs of parental genotypes and the different ways their genomes can be combined, which is computationally expensive. The right panel illustrates individual-based simulations that track existing genotypes only. FFPopSim provides individual-based simulations through the class haploid_highd</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B A</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3333</head><p>FFPopSim</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>FFPopSim is implemented in Cþþ with a Python2 wrapper. From Python, FFPopSim can be imported as a module. We provide examples that reproduce basic population genetics *To whom correspondence should be addressed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig.2.</head><figDesc>Fig. 2. Performance of FFPopSim. (A) The time required to simulate a single generation as a function of the number of loci, using the class haploid_lowd. The expected scalings [8 L for naive implementation, 3 L for general recombination and L2 L for single crossovers (XO)] are indicated by solid lines. (B) The run times of the individual-based simulations as a function of the population size for different genome sizes L using haploid_highd. Solid lines correspond to crossover and mutations rates ¼ ¼ 10 À8 typical of the human genome, dashed lines to outcrossing with rate r ¼ 0.01, and ¼ 10 À5 , ¼ 10 À3 typical for viral evolution. Run times were determined on a 2.93 GHz Intel CPU</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig.</head><figDesc>Fig. 1. Strategies for forward simulations: The left panel illustrates a scheme that tracks the abundance of each possible genotype, encoded as a bit string. This is feasible up to L % 20 and is implemented in FFPopSim as the class haploid_lowd. Recombination requires considering all possible pairs of parental genotypes and the different ways their genomes can be combined, which is computationally expensive. The right panel illustrates individual-based simulations that track existing genotypes only. FFPopSim provides individual-based simulations through the class haploid_highd</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>ß The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0/), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</figDesc><table></table></figure>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENT</head><p>We would like to thank Boris Shraiman for many stimulating discussions and pointing us toward the FFT algorithm.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Nemo: an evolutionary and population genetics programming framework</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Guillaume</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Rougemont</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="2556" to="2557" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Scaling expectations for the time to establishment of complex adaptations</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Lynch</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Natl Acad. Sci. USA</title>
		<meeting>. Natl Acad. Sci. USA</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="16577" to="16582" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Statistical genetics and evolution of quantitative traits</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Neher</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Shraiman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Rev. Mod. Phys</title>
		<imprint>
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="page" from="1283" to="1300" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">simupop: a forward-time population genetics simulation environment</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Peng</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Kimmel</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="3686" to="3687" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Selsim: a program to simulate population genetic data with natural selection and recombination</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<forename type="middle">C A</forename>
				<surname>Spencer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Coop</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="3673" to="3675" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">The rate of fitness-valley crossing in sexual populations</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Weissman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genetics</title>
		<imprint>
			<biblScope unit="volume">186</biblScope>
			<biblScope unit="page" from="1389" to="1410" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>