
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:38+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Sequence analysis A Python package for parsing, validating, mapping and formatting sequence variants using HGVS nomenclature</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2015">2015</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Reece</forename>
								<forename type="middle">K</forename>
								<surname>Hart</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution">Invitae Inc</orgName>
								<address>
									<postCode>94107</postCode>
									<settlement>San Francisco</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Rudolph</forename>
								<surname>Rico</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution">Invitae Inc</orgName>
								<address>
									<postCode>94107</postCode>
									<settlement>San Francisco</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Emily</forename>
								<surname>Hare</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution">Invitae Inc</orgName>
								<address>
									<postCode>94107</postCode>
									<settlement>San Francisco</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">John</forename>
								<surname>Garcia</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution">Invitae Inc</orgName>
								<address>
									<postCode>94107</postCode>
									<settlement>San Francisco</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jody</forename>
								<surname>Westbrook</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution">Invitae Inc</orgName>
								<address>
									<postCode>94107</postCode>
									<settlement>San Francisco</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Vincent</forename>
								<forename type="middle">A</forename>
								<surname>Fusaro</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution">Invitae Inc</orgName>
								<address>
									<postCode>94107</postCode>
									<settlement>San Francisco</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">John</forename>
								<surname>Hancock</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">23andMe Inc</orgName>
								<address>
									<postCode>94043</postCode>
									<settlement>Mountain View</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Sequence analysis A Python package for parsing, validating, mapping and formatting sequence variants using HGVS nomenclature</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">31</biblScope>
							<biblScope unit="issue">2</biblScope>
							<biblScope unit="page" from="268" to="270"/>
							<date type="published" when="2015">2015</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btu630</idno>
					<note type="submission">Received on June 26, 2014; revised on August 29, 2014; accepted on September 17, 2014</note>
					<note>Associate Editor: Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Biological sequence variants are commonly represented in scientific literature, clinical reports and databases of variation using the mutation nomenclature guidelines endorsed by the Human Genome Variation Society (HGVS). Despite the widespread use of the standard, no freely available and comprehensive programming libraries are available. Here we report an open-source and easy-to-use Python library that facilitates the parsing, manipulation, formatting and validation of variants according to the HGVS specification. The current implementation focuses on the subset of the HGVS recommendations that precisely describe sequence-level variation relevant to the application of high-throughput sequencing to clinical diagnostics. Availability and implementation: The package is released under the Apache 2.0 open-source license. Source code, documentation and issue tracking are available at</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>As high-throughput sequencing becomes commonplace in the investigation and diagnosis of disease, it is essential that communicating variants from sequencing projects to the scientific community and from diagnostic laboratories to health-care providers is easy and accurate. The Human Genome Variation Society (HGVS) mutation nomenclature recommendations (<ref type="bibr" target="#b7">Taschner and den Dunnen, 2011</ref>) are widely endorsed by professional organizations, mandated by numerous journals and displayed by databases and tools. The HGVS recommendations—originally devised to standardize the representation of variants discovered before the advent of high-throughput sequencing—are now approved by the HGVS and continue to evolve under the auspices of the Human Variome Project. The continual evolution of HGVS guidelines makes the nomenclature difficult to understand and to use for experts and non-experts alike, often resulting in incorrect usage and potential clinical interpretation errors.</p><p>We sought a software library for manipulating HGVS variants that was appropriate for clinical diagnostics. Specifically, we required the following functionality: (i) We must be able to process patient variants locally (i.e. not sent to a remote site); (ii) we must be able to audit, extend and control updates of the source code and data; (iii) we must be able to map variants in regions of genome-transcript discrepancies, particularly indels. Mutalyzer (<ref type="bibr" target="#b8">Wildeman et al., 2008</ref>) provides a Web interface and Web services for constructing, validating and transforming sequence variants, but is not available for local installation. Another Python library (https://github.com/counsyl/hgvs), similar in spirit to the one we present here, uses a regular expressionbased parser and relies on exon structures derived from BLAT alignments (<ref type="bibr" target="#b4">Kent, 2002</ref>). Although other packages accept or generate HGVS-formatted variants, such as snpEff (<ref type="bibr" target="#b0">Cingolani et al., 2012</ref>) and VEP (<ref type="bibr" target="#b6">Mclaren et al., 2010</ref>), they are not intended for use as a software library. Here we present an open-source Python library for parsing, mapping, validating and formatting sequence variation according to the HGVS guidelines. The library features a parser based on a Parsing Expression Grammar and a variant mapper that accommodates insertion/deletion discrepancies between reference genomic sequences and transcripts that confound most existing tools. object representation. For a full list of object classes, readers should consult the source code. The HGVS parser presented here is based on a parsing expression grammar and was inspired by previous work (<ref type="bibr" target="#b5">Laros et al., 2011</ref>). There are 127 parsing rules to cover DNA, RNA, CDS and protein parsing. Any rule may be invoked to parse components of valid HGVS strings into an appropriate type. For example, the c_edit rule may be used to parse anHGVS substring such as 'c.688+403C4T'. Following Python conventions, formatting is implemented using the str() method of each class. The hgvs package requires sequence data and exon structures to map variants between the genome and transcript coordinates, to infer protein sequence changes from transcripts and to validate variants. The data provider interface declares seven methods required to support hgvs functionality; developers may implement a subclass of the abstract interface to use data from other sources. The hgvs package includes a concrete implementation based on the publicly available Universal Transcript Archive (information about UTA is available with package documentation). In addition to the syntactic validation provided during parsing, the hgvs package includes validation tools to ensure that a SequenceVariant object conforms to the HGVS guidelines and to catch common errors. For performance reasons, the Validator distinguishes intrinsic and extrinsic validation: intrinsic validation asserts internal correctness of the object, such as requiring that the start position is less than or equal to the end position or that the length of the location range specified for an insertion is one, and extrinsic validation invokes external data for validation, such as verifying that the reference sequence specified in the variant matches that from a source database. The hgvs package provides tools to transform ('map') variants between genomic (g.), mRNA (r.), CDS (c.) and protein (p.) variants. Of particular note is the implementation of an indel aware mapper that correctly accounts for insertions and deletions in transcripts with respect to a genomic reference. These discrepancies occur owing to natural polymorphisms and sequencing errors, and occur in 1.6% of current RefSeq transcripts (<ref type="bibr" target="#b1">Garla et al., 2011</ref>). The package also includes a transcript liftover tool to migrate variants between different transcripts. When used in conjunction with UTA, liftover may also be performed between the same RefSeq transcript aligned to a genomic reference by Splign (<ref type="bibr" target="#b3">Kapustin et al., 2008</ref>) and BLAT (<ref type="bibr" target="#b4">Kent, 2002</ref>). Splign and BLAT provide substantially different exon structures for 2.7% of RefSeq transcripts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">TESTING, VALIDATION AND LIMITATIONS</head><p>Reliable and robust variant manipulation is an essential goal of this work. The hgvs package implements extensive automated tests that are run on every commit made to the hgvs code, and the test results are publicly accessible. Unit tests, which validate low-level functionality, are available for nearly all code in the package. Functional tests, which verify parsing, formatting, transformation and validation, are extensive. In particular, 163 manually curated mappings between g., c. and p. representations in problematic genes were developed by geneticists and curators. Additional functional tests include 420 000 intronic and exonic single nucleotide variants, 42000 deletions, insertions and deletion-insertions variants and 11 duplications in 54 genes that exercise a variety of transcript features, such as strand, CDS start not in exon 1 and genome-transcript indels. In addition to the above automated tests, a comparison of genome-to-transcript transformations generated by the hgvs package and Mutalyzer's batch positionConverter tool using 110 125 genomic variants in 57 ACMG 'Must Report' genes (<ref type="bibr" target="#b2">Green et al., 2013</ref>) showed 499.9% concordance (Supplementary data). Mismatches occurred only in transcripts that have indels in the genome-transcript alignment. Because hgvs uses an indel aware mapper and Mutalyzer does not (Peter Taschner, personal communication), these differences are expected and highlight an advantage of the library presented here. Like the HGVS recommendations, the hgvs package presented here is a work in progress. The package does not yet implement the full recommendations: important limitations, which are detailed in the issue tracker, include lack of variant canonicalization, the inability to represent compound, mosaic and chimeric variants and lack of support for inversions. Patches and pull requests are welcome.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">AVAILABILITY, INSTALLATION AND USE</head><p>The hgvs source code, comprehensive documentation, examples, installation instructions, issue tracking, test results and mailing list are available via the BitBucket repository. In addition, the package is also available at PyPI; with modern versions of Python, installation involves simply typing 'pip install hgvs'.<ref type="figure" target="#fig_0">Figure 1</ref>illustrates the four primary functions provided by the hgvs package—parsing, formatting, mapping and validating. A variant in MCL1, NM_182763.2:c.688+403C4T (rs201430561), is parsed into a variant object that exposes variant components as Python properties. The variant is then projected onto NM_001197320.1 via GRCh37 and a splign-based exon alignment. A validation error is demonstrated with NM_ 001197320.1:c.281A4T, which specifies an incorrect reference nucleotide. Conflict of interest: All authors are employed by and have equity in the company that sponsored this work.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig.1.</head><figDesc>Fig. 1. Using the hgvs package to project a variant in MCL1 from one transcript to another via GRCh37 chromosome 1. (a) An object representation of the result of parsing 'NM_182763.2:c.688+403C4T'. Selected attributes are shown beneath. (b) A diagram of the MCL1 locus with five representations of a single variant. (c) Python code that demonstrates parsing, mapping between sequences, formatting and validating. Gray outline boxes enclose input, and the results appear immediately beneath. Circled numbers indicate a correspondence between the variants in (a) and code in (c). An SNVe, originally reported in literature as NM_182763.2:c.688+403C4T (rs201430561), is projected onto chromosome 1 as variant g, and then projected to an alternative transcript as variant. The inferred proteinh changes of variants e and h are shown as protein variantsf and i. The results are formatted by 'stringifying' them using standard Python printing commands. Validation for a valid variant (281C4T; no error generated) and an error for an invalid variant (281A4T) are shown</figDesc></figure>

			<note place="foot" n="2"> PACKAGE OVERVIEW The hgvs Python package comprises six key components: (i) object models for representing components of HGVS-formatted variants; (ii) a parser that generates an object representation from an HGVS-formatted string; (iii) formatting tools that generate an HGVS-formatted string from an object representation; (iv) mapping classes that transform variants between genomic, CDS and protein representations; (v) validation tools that ensure conformance to HGVS guidelines; (vi) an interface for defining external data sources required for validation and mapping. The core of the hgvs package is a set of object models that provide a foundation for developers to reference any component or property of the HGVS syntax. For example, a SequenceVariant consists of a sequence accession, a sequence type and PosEdits, which represent a set of individual changes to a sequence. A PosEdit is composed of positions, such as a BaseOffsetPosition for a CDS (c.) SequenceVariant with intronic variants, and an Edit for Single Nucleotide Variant (SNV), del, ins, delins, duplications and repeats. Figure 1a shows an example *To whom correspondence should be addressed. ß The Author 2014. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">R.K.Hart et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">A program for annotating and predicting the effects of single nucleotide polymorphisms, SnpEff: SNPs in the genome of Drosophila melanogaster strain w1118; iso-2; iso-3</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Cingolani</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Fly</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="80" to="92" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">MU2A—reconciling the genome and transcriptome to determine the effects of base substitutions</title>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Garla</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="416" to="418" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">ACMG recommendations for reporting of incidental findings in clinical exome and genome sequencing</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">C</forename>
				<surname>Green</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genet. Med</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="565" to="574" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Splign: algorithms for computing spliced alignments with identification of paralogs</title>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Kapustin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biol. Direct</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page">20</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">BLAT—the BLAST-like alignment tool</title>
		<author>
			<persName>
				<forename type="first">W</forename>
				<forename type="middle">J</forename>
				<surname>Kent</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="656" to="664" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">A formalized description of the standard human variant nomenclature in Extended Backus-Naur Form</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">F J</forename>
				<surname>Laros</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page">5</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
	<note>Suppl. 4</note>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">Deriving the consequences of genomic variants with the Ensembl API and SNP Effect Predictor</title>
		<author>
			<persName>
				<forename type="first">W</forename>
				<surname>Mclaren</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="1" to="2" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">Describing structural changes by extending HGVS sequence variation nomenclature</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">E M</forename>
				<surname>Taschner</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">T</forename>
				<surname>Den Dunnen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Hum. Mutat</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="507" to="511" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Improving sequence variant descriptions in mutation databases and literature using the mutalyzer sequence variation nomenclature checker</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Wildeman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Hum. Mutat</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="6" to="13" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>