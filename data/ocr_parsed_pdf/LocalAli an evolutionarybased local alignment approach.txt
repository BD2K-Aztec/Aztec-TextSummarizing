BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

 b t,
1 EV :FYE GY Su [’16 x

‘ subnetZ

Dz Ex Fz G7

 

/3.10'S[Bum0[p10}x0'SOpBLUJOJuyqu”:duq

an?kgowsmomammowoxmoa‘ocgawbmﬁ

subnetZ

\

?

subner
subnetx

I
8
n

b
u
S

subnetw

subnetV

 

’ \
II ~ \

I s \\
IIIV\III|\
\

\ I
x l. X‘

\
I \
lllllllll

I
I
il \\‘
I \\ llnv
Illlll\\ \\\
S
s
N
~ +
I —
II ~ ‘
I
II \
I \ s
I ‘
'n\ s
I s
I \

J.Hu and K.Reinert

 

correspondence match M” : Vr—> Vx. We denote as f,»(Gr. G1, Mrs) the
evolutionary distance caused by type i events during the evolution from
G, to GS. An investigation (Fraser et al., 2002) showed that proteins with
more interactions evolved more slowly because a greater proportion of
proteins are directly involved in its function. In other words, proteins
with different number of interactors have different evolutionary rates.
Hence, we choose e’W‘gm as the function to calculate the evolutionary
rate of a protein v, and e’w as the evolutionary rate of each interaction in
the PPI networks (see an example in Supplementary Fig. S2).
Consequently, the evolutionary distance function of each evolutionary
event is written as follows:

Evepe’md‘go'H i e {1, 2}

fi(Grv Gsv Mrs) 2
266,5”: i e {3, 4}

where T,- is the collection of type i events, deg(v) is the number of inter-
actions connected with protein v e Vr, oz and )3 are parameters adjusting
the evolutionary rates, t is the evolutionary time from G, to GS. The evo-
lutionary distance between G, and GS, ﬂGr. G1, Mn), is defined as
ﬂGr. G). M”) = 2?:1ﬁ(Gr. G1, Mrs). We chose proper values for or and
)3 so that evolutionary distances caused by protein events and interaction
events are in balance. Generally, the distances would be in balance if the
following two requirements are fulfilled: (i) the evolutionary rate of inter-
action is similar with that of protein with 2 interactions; (ii) the evolution-
ary rate of protein is <0.2 when the protein has more than 10 interactions.
If )3 is too small, type 3 and 4 events become unwelcome in searching for
optimal evolutionary tree because these events would result a larger evo-
lutionary distance. If )3 is too large, type 3 and 4 events become popular
because they would not actually make a big effect on the evolutionary
distance. For this reason, we tested a series of parameters and chose
or = 0.2 and [3 = 2.0 for all of our tests because it can make interaction
distance and protein distance in balance (see more in Supplementary Fig.
S2). We measure the evolutionary time t by the branch weight of the tree as
shown in Figure 3a. The topology and branch weight of the evolutionary
tree are calculated based on the common tree of the NCBI taxonomy
database (Federhen, 2012). See more information about the tree in
Figure 2 and the Supplementary Material.

3.3 Reconstruction of ancestral functional modules

To exactly answer how the extant functional modules evolved in the
evolutionary history, the reconstruction of ancestral functional modules
becomes a central problem. With this intention, we model it as an opti-
mization problem of finding a series of optimal ancestral subnetworks
that yield the smallest distance in the evolutionary tree. Subsequently, we
use a meta-heuristic method SA (Kirkpatrick et al., 1983) to find the
optimal or near-optimal solution (Fig. 3).

3 .3 .1 The optimization problem To explain the descent of the extant
functional modules, we estimate their ancestral functional modules (or
internal tree nodes) using the maximum parsimony principle (Felsenstein,
2003; Fitch, 1971). Under this rule, the evolutionary tree requires the
optimal internal tree nodes (i.e. the optimal ancestral functional modules)
such that it yields the smallest evolutionary distance of the tree.

Let T be the evolutionary tree that includes a set of leaves
L = {P1,P2, - - - , Pk}, internal nodes 1: {Pk+1,Pk+2,---,Pk+m}. We
refer to B C N X N as all branches of T where N = [U L, and F as the
collection of all possible I. We define Ml»,- as the node correspondence
match of P,- and P). On the basis of the maximum parsimony rule, we
reconstruct the set of internal nodes by solving an optimization problem
l’l’lll’l [Er Eff/(Pi, Pj,  where  = l  (Pi,  E B and

i,je{l,2,---,m+k}.

3.3.2 Search for optimal internal tree nodes With a tree topology B
and its leaves L, the computation of exhaustively searching for the

optimal internal tree nodes 1* is numerically intractable. Hence, we use
a meta-heuristic algorithm SA to detect optimal or near-optimal answers.
Annealing is known as a thermal process for obtaining a minimum energy
state of solid in a heat bath, which includes two steps: (i) raising the
temperature to melt the solid metal; (ii) decreasing the temperature in a
proper strategy so that the inner particles arrange themselves in a state of
lower energy.

For each observed d-subnet, the SA approach starts with a series of
non-interaction subnetworks as the initial internal tree nodes and specifies
the initial temperature to its maximum (see the pseudocode in the
Procedure S7). Let x = (e0,e1, e2, - - -) be a series of binary variables
that represent the appearance of interactions in the inner nodes. Then,
x can describe the current state of the evolutionary tree. For instance, the
initial state can be written as x0 = (0, 0, 0, - - -) since the absence of inter-
action in all ancestral modules. Then, we use @(x) as our objective func-

tion P,»,P-.M,~8,~. In the followin hase, we diminish the
2 ﬂ 1 J J g p
U

temperature and repeatedly perturb the current state x with a
Metropolis scheme (Metropolis et al., 1953) using 1:,» (x exp (@(x)/(sT,»))
as the Boltzmann probability distribution (Kirkpatrick et al., 1983). It is
noted that it allows the alteration of only one interaction from one state
xj to its neighbor state xj+1 (i.e. lxj — Xj+l| = 1). This process continues
until the temperature T,- decreases to Tmm. Eventually, all the internal
nodes 1* are reconstructed according to the final solution x*. A more
detailed workﬂow of this method is described in the Supplementary
Material.

3.4 Search for high-scoring d—subnets

To search for high-scoring local alignments, it is necessary to find a suitable
scoring scheme that assigns each d-subnet an alignment score. The align-
ment scores reﬂect the ﬁt of d-subnets to functionally conserved modules.

3 .4.1 Scoring function We introduce a scoring function that can fore-
tell how likely a d-subnet could be functionally conserved modules. As
mentioned before, each d-subnet can be put an evolutionary distance.
However, it is not enough to calibrate d-subnets of various sizes because
the evolutionary distance of a d-subnet tends to be linearly related to the
number of k-spines within it. Supplementary Figure S3 gives the distance
of 48 364 d-subnets sampled from our datasets. However, it is obvious
that functional modules are not biased toward the one of a bigger size. So,
we assigned each d-subnet an alignment score in the following way. Let U
be a d-subnet, which includes a set of d k-spines and k induced subnet-
works of the PPI networks. Regarding the k subnetworks as the leaves
L = {P1, P2, - - - , Pk} of the evolutionary tree T, we set the scoring func-
tion for the d-subnet U as

d

(Mu) = .—-
mln [eFZﬂPiv Pjv Mil-ﬁg-
if

Hence, the score of each d-subnet is a positive value that indicates the fit
of the observed d-subnet to a certain conserved functional module. The

distribution of alignment scores for d-subnets sampled from our datasets
is given in Supplementary Figures S4S6.

3.4.2 Searching algorithm Using the scoring function, the problem
of identifying conserved functional modules is reduced to the problem of
searching for high-scoring d-subnets. However, the task of enumerating
all d-subnets is computationally hard (Kalaev et al., 2009) because the
complexity of the fastest known algorithm is 0(n"’d). Hence, we use a
widely used heuristic approach seed-and-extend (Kalaev et al., 2009;
Sharan, 2005). Although the method does not reduce the complexity of
enumeration, it practically reduces the computational time.

Let GH= {VH,EH} be a k-layer graph, where VH =Uf21V,» and
EH 2 UiJ(Eij U E,») (see an example in Fig. 1). The pseudocode of our

 

366

ﬁm'spzumol‘pmﬂo'sopeuuopuorq/ﬁdnq

LocaIAli

 

Table 1. Proteins and interactions of our ﬁve
observed species, which are collected from the
databases of IntAct and Uniprot/Swiss-Prot

 

 

Species Proteins Interactions
H .sapiens 11 258 47 031
C .elegans 9302 15 669
D.melanogaster 8725 27 053
S .cere visiae 5494 54 l 63
E.coli 2985 14467

 

searching algorithm is described in Algorithm 1. To ﬁnd a k-spine around
a given node in GH, we adapt an efﬁcient subgraph searching algorithm
ESU (Wernicke, 2006) to our implementation. In the ESU algorithm,
each k-spine can be accessed by a starting node because its nodes are
visited in a ﬁxed order, but several k-spines might have a common starting
node (see more in Procedure S1 and S3). As the beginning of our search,
we collect all starting nodes (line 1). Then we search for a set of strongly
connected small d-subnets as reﬁned seeds (line 2). Subsequently, each
reﬁned seed is extended to a d-subnet of a size between minSize and
maxSize by using local search (line 6k11). Lastly, the alignment score
of each d-subnet is calculated by using SA (line 14), and these d-subnets
scoring lower than a threshold value are ﬁltered away (line 17719). More
detailed description of our algorithm is provided in the Supplementary
Material (Procedure S17S7).

 

Algorithm 1 Search for high-scoring d-subnets.

l: startNodesﬂ <— collectStartNodes(GH);

2: reﬁnedSeedsﬂ <— searchSeeds(GH, N, seedSize);
3: m <— refinedSeeds.size();

4: minSize <— seedSize + minExt;

5: maxSize <— seedSize + maxExt;

6

7

8

 

: for i := 1tom do
subnet <— expandSeed(GH, N, refinedSeeds[I], ext);
if subnet.size Z minSizel|subnet.size() 5 maxSize then

9: subnetList. push back (subnet);
10: end if
1 1: end for

12: n <— subnetLIst.size();

13: for i:= 1ton do

14: x* <— simulatedAnnealing(subnetList[I], T);
15: d <— subnetList[I].size();

16: score <— d/G)(X*);

17: if score > threshold then

18: output subnetList[i];
19: end if
20: end for

 

4 RESULTS AND DISCUSSION
4.1 Test data

All experimentally determined interactions of ﬁve species were
collected from the IntAct database (Kerrien et al., 2012) as the
test data of our evaluation (downloaded on February 10, 2014).
The ﬁve species were Homo sapiens (hsa), Caenorhabditis elegans
(cel), Drosophila melanogaster (dme), Saccharomyces cerevisiae
(see) and Escherichia coli (eco). The protein sequences were
downloaded from a reviewed and manually annotated database,

UniprotKB/Swiss—Prot (Magrane and Consortium, 2011).
All—against—all protein sequence similarities were calculated
with the program BLASTP (Altschul et al., 1997), and these
with E—value g 1.0e’7 were selected as homologous proteins.
The phylogenetic relationship of the five species was obtained
from the NCBI taxonomy database (Federhen, 2012). With the
real—world knowledge of the ﬁve species (Table 1), we performed
LA and several existing algorithms on 26 real datasets including
all possible combinations of the test species. To test the statistical
signiﬁcance of our alignment results, LA were also tested on
1040 random datasets (40 random k—layer graphs for each com—
bination). All these random k—layer graphs remained the same
number of interactions and edges as the real k—layer graphs.
Moreover, high—quality associated Gene Ontology (GO) annota—
tions which were downloaded from the Uniprot—GOA database
(on March 14, 2014) and a reference dataset CORUM (Ruepp
et al., 2010) were used to help assess the biological quality of the
results.

4.2 Experimental setup

We implemented LA in C + + using the LEMON Graph Library
(Dezso et al., 2011) version 1.2.3 and OpenMP (Chapman et al.,
2007). The implementation supports multicore parallelism in the
search for high—scoring d—subnets. LA provides many user—speci—
ﬁed parameters that are used to determine the topological feature
of target regions and the scoring scheme, such as seedSize,
minExt, maxExt, at and ﬂ. The default values are now
seedSize = 2, minExt = 3, maxExt = 13, 0c 2 0.2 and ﬂ = 2.
More elaborate information about the other speciﬁc parameters
is described in Supplementary Table S1. We first performed LA
20 times with a single core, and then ran it 20 times again with 16
cores in parallel on each real dataset. The best, average and worst
results were applied to assess the performance. NBM was subse—
quently performed on the same datasets with the extension
scheme of relaxed order. In addition, three pairwise local align—
ment tools NetworkBlast, AN and M W were applied to all of our
2—way alignments. However, another two multiple local align—
ment tools Graemlin and CAPPI were not taken into consider—
ation in our assessment, as Graemlin did not compile successfully
(the current available version is outdated), and CAPPI was only
compatible with particularly designed data. For a fair compari—
son, the solutions that were highly overlapped (i.e. >0.5) were
ﬁltered out after the search for high—scoring d—subnets (see more
in the Supplementary Material). All experiments mentioned in
the following parts were carried out on the same machine, an
Intel(R) Xeon(R) CPU X5550 with 2.67 GHz.

4.3 Cross-validation

We assessed the quality of the alignment results in four ways:
coverage, consistency, prediction of protein functions and pre—
diction of protein complexes. Coverage indicates the amount of
input data the algorithm can explain. Consistency implies the
functional coherence of identified d—subnets. Our goal is to ﬁnd
a series of d—subnets that have good consistency while reporting
as many d—subnets as possible (i.e. a high coverage) within rea—
sonable time. Consistency can be well accomplished by sacrifi—
cing coverage and vice versa. Further, to determine how much
our alignment results agree with known biological knowledge,

 

367

ﬁm'spzumol‘pmﬂo'sopeuuopnorq/ﬁdnq

J.Hu and K.Reinert

 

Table 2. Coverage, consistency and running time on the two-way alignments

 

 

 

 

 

 

 

 

 

 

 

Dataset Measure LA (best) LA (average) LA (worst) NB AN NBM MW
A-B Precision (%) 99.6 98.9 97.85 99.4 / 99.7 90
Time(s) X 1 59.19 62.33 65.7 16260 / 24 276
Time(s) X 16 15.43 16.4 18.1 / / / /
A-C Precision (%) 100 97.7 93.7 96.1 / 100 96.6
Time(s) X 1 54.8 56.84 59.06 36 750 / 55 889
Time(s) X 16 16.34 16.97 17.61 / / / /
A-D Precision (%) 93.5 92.1 91 / / / 95.2
Time(s) X 1 126 129.7 135.4 > 24h / / 1587
Time(s) X 16 32.04 33.38 34.61 / / / /
A-E Precision (%) 100 99.8 99.4 83.4 91.2 96.4 80 6
Time(s) X 1 76.39 81.05 83.93 10 / 6 1
Time(s) X 16 20.27 21.01 21.82 / 4 / /
B-C Precision (%) 99.1 98 96.15 87.5 76.9 99.2 73.7
Time(s) X 1 30.57 31.63 32.71 17 / 5 4
Time(s) X 16 9.652 10.41 11.12 / 11 / /
B-D Precision (%) 91.1 87.5 84.4 100 73.1 / 72.6
Time(s) X 1 116.9 120.3 125 59 / / 10
Time(s) X 16 24.42 26.71 28.52 / 7 / /
B-E Precision (%) 97.3 94.4 90.35 / 100 100 100
Time(s) X 1 50.8 53.22 54.67 4 / 1 0
Time(s) X 16 11.5 11.95 13.44 / 1 / /
C-D Precision (%) 94.85 93.6 92.2 96.5 70.6 / 69.8
Time(s) X 1 130.3 144.3 201.7 1558 / / 40
Time(s) X 16 30.33 32.38 35.69 / 43 / /
C-E Precision(%) 97.75 95.9 93.55 100 100 100 57.1
Time(s) X 1 58.95 61.5 63.98 6 / 1 0
Time(s) X 16 14.61 15.28 18.28 / 1 / /
D-E Precision (%) 97.75 94.8 91.5 88.1 84.6 / 51.8
Time(s) X 1 57.74 59.43 60.63 91 / / 4
Time(s) X 16 20.63 21.16 21.81 / 20 / /

 

Note: The ﬁve species Human, Worm, Fruit Fly, Yeast and E.coli are reperesented by A, B, C, D and E. The ﬁve algorithms LoeulAli, NetworkBlust,
AlignNemo, NetworkBlustM and MuWISh are shortly represented by LA, NB, AN, NBM and MW, respectively.

LA was also applied to predict protein functions and protein
complexes. Finally, we compared the performance of the align—
ment tools in terms of scalability and running time.

4.3.] Coverage and consistency The coverage was measured in
two ways. First, we measured it by the number of reported
d—subnets (or hits) after the elimination of redundant solutions.
Second, the coverage was measured by the percentage of proteins
value (PPV), which calculated the percentage of proteins covered
by the identiﬁed hits over all the proteins. We performed func—
tional enrichment analyses based on GO annotation data
(Ashburner et al., 2000) to assess the functional coherency of
each subnetworks in the reported hits. A powerful package
GO—TermFinder (Boyle et al., 2004) was used to calculate the
statistical signiﬁcance of GO annotations. Those subnetworks
that had one or more enriched G0 terms (i.e. corrected
P—value g 0.01) were regarded as FCS and likely to be functional
modules. Therefore, we measured consistency by the number of

reported FCS and the portion of FCS over all identiﬁed subnet—
works (i.e. precision). All the results of the 26 real datasets
including 10 two—way alignments, 10 three—way alignments, 5
four—way alignments and 1 five—way alignment were analyzed
as shown in Tables 2 and 3 and Supplementary Table S37S27.
In comparison with NB, NBM, AN and MW, LA basic—
ally outperformed all existing algorithms in the aspect of cover—
age. As shown in Supplementary Table S3, for instance, LA
reported 477, 408 and 348 hits in the best, average and worst
case in the two—way alignment of hsa—cel, while merely 367160
and 252 hits were reported by NB, NBM and MW. The worst
PPV value of LA was also upto 10.8%, which was obviously
more advanced than that of other algorithms. This was not a
unique instance in the 10 two—way alignments as shown in
Supplementary Tables S}S11. However, LA reported less hits
than NB, NBM, MW in the two—way alignment of hsa—dme. The
reason was that the threshold of the alignment score was too
high for this dataset. More than 90% d—subnets were ﬁltered

 

368

ﬁre'spzumol‘pmJXO'sopeuuowrorq/ﬁdnq

LocaIAli

 

Table 3. Coverage, consistency and running time on the 3-, 4- and 5-way alignments

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Dataset Measure LA (best) LA (average) LA (worst) NBM
A-B-C Precision (%) 97.8 96.4 94.4 99.6
Time(s) X 1 3143.79 3292.036 3390.03 227
Time(s) X 16 265.702 284.66345 304.984 /
A-B-D Precision (%) 94.8 93.9 93 /
Time(s) X 1 1029.38 1055.189 1073.14 /
Time(s) X 16 247.493 257.9092 270.716 /
A-B-E Precision (%) 100 95 86.7 90.5
Time(s) X 1 1047.39 1161.1855 1624 5
Time(s) X 16 865.333 1119.06825 1272.58 /
A-C-D Precision (%) 91.4 90.8 90.2 /
Time(s) X 1 2200.25 2281.7855 2383.87 /
Time(s) X 16 204.366 211.43815 219.9 /
A-C-E Precision (%) 97.5 96 94.7 96
Time(s) X 1 2405.05 2593.7125 2816.24 16
Time(s) X 16 1350.6 1746.3 1958.26 /
A-D-E Precision (%) 97.4 97.1 96.5 /
Time(s) X 1 1677.12 1800.295 1924.56 /
Time(s) X 16 271.142 295.1718 316.262 /
B-C-D Precision (%) 96.9 95.9 94.9 /
Time(s) X 1 931.271 1852.4552 2588.25 /
Time(s) X 16 192.827 199.7882 210.676 /
B-C-E Precision (%) 93.3 79.5 58.3 94.4
Time(s) X 1 1087.89 1225.4395 1339.38 1
Time(s) X 16 226.042 272.53595 303.416 /
B-D-E Precision (%) 97.5 96.3 94.8 /
Time(s) X 1 3277.73 3482.7515 3655.78 /
Time(s) X 16 250.955 252.15815 275.12 /
C-D-E Precision (%) 99.4 99.2 98.8 /
Time(s) X 1 2316.76 2450.2115 2534.97 /
Time(s) X 16 204.455 211.4621 218.722 /
A-B-C-D Precision (%) 98.1 96.5 95 /
Time(s) X 1 1389.4 1473.8075 1575.09 /
Time(s) X 16 363.119 445.35695 514.922 /
A-B-C-E Precision (%) 97.9 95.6 93.4 91.1
Time(s) X 1 2576.42 2919.1695 3333.32 152
Time(s) X 16 1721.29 2137.6375 2924.53 /
A-B-D-E Precision (%) 95.6 93.4 90.3 /
Time(s) X 1 506.98 579.72535 642.928 /
Time(s) X 16 157.4 197.66365 259.277 /
A-C-D-E Precision (%) 92.6 90.9 88.4 /
Time(s) X 1 706.675 850.19905 954.841 /
Time(s) X 16 261.356 375.35105 544.023 /
B-C-D-E Precision (%) 99.8 98.5 95.8 /
Time(s) X 1 760.734 884.5283 968.757 /
Time(s) X 16 125.965 160.45365 204.812 /
A-B-C-D-E Precision (%) 98.9 97.3 95.5 /
Time(s) X 1 8457.52 10 344.525 12 424.8 /
Time(s) X 16 3867.05 6535.725 9886.51 /

 

 

369

ﬁre'spzumol‘pmJXO'sopeuuowrorq/ﬁdnq

an?kgogmomammowoio~&o:3m7.omm\

4. 5
0A05
:0:0
h h:
Hmﬂm
e)e)
mama
m‘mxmxmw
wwww
8888
0000
0000
LLLL
A

NetBlastM (drne)
NetBlastM (eel)

 

LocaIAli

 

6.35%. They increased to 2.26 and 7.67% when th = 0.5. To sum
up, we can conclude that LA, in comparison with NBM, is more
precise in the prediction of functional annotations, and the
higher—scoring d—subnets are more favorable for the prediction
of protein functions.

4.3.3 Validation of predicted functional modules To validate the
predicted functional modules, we collected a benchmark set of
protein complexes that belonged to hsa as annotated in COR UM
(Ruepp et al., 2010; released in February 2012). Overall, there
were 1283 protein complexes consisting of three or more proteins
in our benchmark set. Then, we compared these identified con—
served subnetworks with the benchmark set of complexes. Let S
represent proteins of a conserved subnetwork, C be proteins of a
known protein complex. We will consider S to be a successful
prediction of C if and only if two requirements are fulﬁlled: (i)
lSﬂ Cl 3 3; (ii)  3 0.2. If S corresponds to a protein
complex in COR UM, it will be a pure module. As a result, NBM
successfully recognized 29 pure modules from the human PPI
network with a success rate of 11.9%. In contrast, LA recognized
55.8 pure modules on average with a success rate of 17.4%. It
indicates that LA is more accurate than NBM in recognizing
biologically meaningful modules.

4.3.4 Scalability Scalability is a bottleneck problem that limits
the applications of existing alignment tools. Many pairwise
alignment tools attempting to search for strongly connected
subgraphs in an alignment graph are difficult to extend to mul—
tiple networks because alignment nodes in the graphs will grow
exponentially when the number of networks increases. In com—
parison with other algorithms in our tests, LA demonstrated the
best performance in the aspect of scalability. It was the only
algorithm that favorably ran on all the 26 datasets. However,
NBM encountered its limitation when some network had a pro—
tein connected to a large number of other proteins, such as PPI
networks of sce in Table 1.

4.3.5 Running time Parallelization is a key technique that
enables LA to speed up. We ﬁrst performed LA on each real
dataset 20 times with a single core, and then ran it 20 times again
with 16 cores in parallel. In comparison with NB, NBM, AN and
MW, LA was the most favorable alignment tool in the pairwise
alignments. As shown in Supplementary Tables S37S12, LA ﬁn—
ished all the pairwise alignments within several minutes (33)
using a single core. The parallelism yielded a speedup of LA.
Generally, it could be three to six times faster in the pairwise
alignments. In contrast, NB spent about 5 h on the hsa—cel align—
ment, 10h on hsa—dme, >24h on hsa—sce and 0.5h on dme—sce.
MW spent 15 min on hsa—dme, 26 min on hsa—sce. Although,
NB, NBM, AN and MW were faster than LA in some alignment
such as hsa—eco and cel—eco, they accomplished the advancement
with a serious sacriﬁce of coverage. In the multiple
alignment, NBM was faster than LA in many cases but with a
smaller number of reported hits and a limited scalability
(Supplementary Tables S137S27).

5 CONCLUSION

In this article, we developed a fast and scalable local alignment
tool LA to identify functionally conserved modules across

multiple species. It overcomes several limitations of existing al—
gorithms by using a scoring scheme strongly rooted in a max—
imum—parsimony evolutionary model, scaling to multiple
networks with tens of thousands of proteins and interactions
and parallel computing. By relying on this model, LA can pro—
vide an inference of the evolutionary history of observed func—
tional modules with a series of evolutionary events. With a
rigorously designed scoring function, we reduced the problem
of identifying functionally conserved modules to a problem of
searching for high—scoring d—subnets. LA solves the problem in
three steps as follows: (i) it searches for a set of d—subnets with a
heuristic approach seed—and—extend; (ii) it reconstructs the evolu—
tion history of each d—subnets and calculates its alignment score;
(iii) it filters away these d—subnets with an alignment score below
a threshold.

To compare LA with other existing algorithms, we tested these
algorithm on 26 real—world datasets and analyzed their output in
terms of several criteria. In a short conclusion, LA has a super—
iority of coverage, consistency and scalability over NB, AN,
NBM and MW, meanwhile retains a high precision in identifying
functional coherent subnetworks. Furthermore, it predicted >500
new functional annotations for proteins of worm and fruit ﬂy,
and identiﬁed 55 pure modules, which were known protein
complexes that belonged to human as annotated in CORUM.
It reported many signiﬁcant functional modules that were
missed by other alignment tools. The results demonstrate that
LA provides substantial improvements to multiple local
alignment and might give helpful suggestions to the research
community that attempts to determine phylogeny, function
annotations and functional modules.

ACKNOWLEDGEMENTS

We are grateful to Xiao Liang and Rene Rahn for proofreading
the manuscript and their helpful suggestions.

Funding: This work is ﬁnancially supported by the China
Scholarship Council.

Conﬂict of interest: none declared.

REFERENCES

Aladag,A.E. and Erten,C. (2013) Spinal: scalable protein interaction network align—
ment. Bioiiy’ormatics, 29, 9177924.

Altschul,S.F. et al. (1997) Gapped BLAST and PSI—BLAST: a new generation of
protein database search programs. Niwleic Acids Res., 25, 338973402.

Ashburner,M. et al. (2000) Gene ontology: tool for the uniﬁcation of biology. The
gene ontology consortium. Nat. Genet, 25, 2&29.

Boyle,E.I. et al. (2004) Gozztermﬁnderopen source software for accessing gene ontol—
ogy information and ﬁnding signiﬁcantly enriched gene ontology terms asso—
ciated with a list of genes. Bioinformatics, 20, 371(k3715.

Chapman,B. et al. (2007) Using OpenMP: Portable Shared Memory Parallel
Programming ( Scientific and Engineering Computation). The MIT Press,
Cambridge, Massachusetts, London, England.

Ciriello,G. et al. (2012) Alignnemo: a local network alignment method to integrate
homology and topology. PLoS One, 7, e38107.

Clark,C. and Kalita,J. (2014) A comparison of algorithms for the pairwise align—
ment of biological networks. Bioiiy’ormatics, 30, 235172359.

Dezso,B. et al. (2011) LEMONian open source C+ + graph template library.
Electron. Notes Theor. Comput. Sci., 264, 23415; Proceedings of the Second
Workshop on Generative Technologies (WGT) 2010.

 

371

ﬁre'spzumol‘pmJXO'sopeuuowrorq/ﬁdnq

J.Hu and K.Reinert

 

Dutkowski,J. and Tiuryn,J. (2007) Identiﬁcation of functional modules from con—
served ancestral protein—protein interactions. Bioiiy’ormatics, 23, i1497i158.
El—Kebir,M. et al. (2011) Lagrangian relaxation applied to sparse global network
alignment. In: L00g,M. et al. (eds) Pattern Recognition in Bioinformatics, volume
7036 of Lecture Notes in Computer Science. Springer, Berlin, Heidelberg,

pp. 2257236.

Federhen,S. (2012) The ncbi taxonomy database. Nucleic Acids Res., 40,
Dl3frDl43.

Felsenstein,J. (2003) Inferring Phylogenies. 2 edn. Sinauer Associates, Inc.,
Sunderland, Massachusetts.

Fitch,W.M. (1971) Toward deﬁning the course of evolution: minimum change for a
speciﬁc tree topology. Syst. Biol, 20, 406—416.

Flannick,J. et al. (2006) Graemlin: general and robust alignment of multiple large
interaction networks. Genome Res., 16, 116%1181.

Flannick,J. et al. (2009) Automatic parameter learning for multiple local network
alignment. J. Comput. Biol, 16, 100171022.

Fraser,H.B. et al. (2002) Evolutionary rate in the protein interaction network.
Science, 296, 75(F752.

Guzzi,P.H. and Mina,M. (2012) Alignmcl: Comparative analysis of protein inter—
action networks through markov clustering. In: Proceedings of the 2012 IEEE
International Conference on Bioinﬁ)rmatics and Biomedicine Workshops
(BIBMW). BIBMW’12. IEEE Computer Society, Washington, DC, USA,
pp. 1747181.

Hartwell,L.H. et al. (1999) From molecular to modular cell biology. Nature, 402
(Suppl. 6761), C47£52.

Hu,J. et al. (2014) Netcoffee: a fast and accurate global alignment approach to
identify functionally conserved proteins in multiple networks. Bioinformatics,
30, 54(F548.

Huang,Q. et al. (2013) Corbi: a new r package for biological network alignment and
querying. BMC Syst. Biol, 7 (Suppl. 2), S6.

Kalaev,M. et al. (2008) Networkblast: comparative analysis of protein networks.
Bioinformatics, 24, 59¢596.

Kalaev,M. et al. (2009) Fast and accurate alignment of multiple protein networks. J.
Comput. Biol, 16, 9897999.

Kelley,B.P. et al. (2004) PathBLAST: a tool for alignment of protein interaction
networks. Nucleic Acids Res., 32 (Suppl. 2), W837W88.

Kerrien,S. et al. (2012) The intact molecular interaction database in 2012. Nucleic
Acids Res., 40, D8417D846.

Kirkpatrick,S. et al. (1983) Optimization by simulated annealing. Science, 220,
671480.

Koyutijrk,M. et al. (2006) Pairwise local alignment of protein interaction networks
guided by models of evolution. J. Comput. Biol, 13, 1827199.

Kuchaiev,O. and Przulj,N. (2011) Integrative network alignment reveals large re-
gions of global network similarity in yeast and human. Bioinformatics, 27,
139(F1396.

Li,Z. et al. (2007) Alignment of molecular networks by integer quadratic program—
ming. Bioinformatics, 23, 163171639.

Liao,C.—S. et al. (2009) IsoRankN: spectral methods for global alignment of mul—
tiple protein networks. Bioinformatics, 25, i2537i258.

Magrane,M. and Consortium,U. (2011) Uniprot knowledgebase: a hub of inte—
grated protein data. Database, 2011, bar009.

Metropolis,N. et al. (1953) Equation of state calculations by fast computing ma—
chines. J. Chem. Phys., 21, 108771092.

Milenkovic',T. et al. (2010) Optimal network alignment with graphlet degree vectors.
Cancer Inform., 9, 1217137.

Milenkovic’,T. et al. (2013) Global network alignment in the context of aging. In:
Proceedings of the International Conference on Bioinﬂ)rmatics, Computational
Biology and Biomedical Informatics. BCB'l3. ACM, New York, NY,
pp. 23:23723:32.

Neyshabur,B. et al. (2013) Netal: a new graph—based method for global alignment of
proteinprotein interaction networks. Bioinformatics, 29, 165471662.

Pache,R.A. et al. (2012) Netalignera network alignment server to compare com—
plexes, pathways and whole interactomes. Nucleic Acids Res., 40, W1577W161.

Patro,R. and Kingsford,C. (2013) Predicting protein interactions via parsimonious
network history inference. Bioinformatics, 29, i2377i246.

Patro,R. et al. (2012) Parsimonious reconstruction of network evolution. Algorithms
Mol Biol, 7, 25.

Pellegrini,M. et al. (1999) Assigning protein functions by comparative genome
analysis: protein phylogenetic proﬁles. Proc. Natl Acad. Sci. USA, 96,
42854288.

Phan,H.T.T. and Sternberg,M.J.E. (2012) Pinalog: a novel approach to align pro—
tein interaction networks implications for complex detection and function pre—
diction. Bioinformatics, 28, 123971245.

Roguev,A. et al. (2008) Conservation and rewiring of functional modules revealed
by an epistasis map in ﬁssion yeast. Science, 322, 405410.

Ruepp,A. et al. (2010) Corum: the comprehensive resource of mammalian protein
complexes—2009. Nucleic Acids Res., 38 (Suppl. 1), D4977D501.

Sahraeian,S.M.E. and Yoon,B.—J. (2013) Smetana: accurate and scalable algorithm
for probabilistic alignment of large—scale biological networks. PLoS One, 8,
e67995.

Saraph,V. and Milenkovic’,T. (2014) Magna: Maximizing accuracy in global net—
work alignment. Bioinformatics, 30, 293172940.

Sharan,R. (2005) Conserved patterns of protein interaction in multiple species. Proc.
Natl Acad. Sci. USA, 102, 197441979.

Sharan,R. and Ideker,T. (2006) Modeling cellular machinery through biological
network comparison. Nat. Biotech., 24, 427433.

Singh,R. et al. (2007) Pairwise global alignment of protein interaction networks by
matching neighborhood topology. In: Proceedings of the 11th annual interna—
tional conference on Research in computational molecular biology, RECOMB'07.
Springer—Verlag, Berlin, Heidelberg, pp. lfr3l.

Singh,R. et al. (2008) Global alignment of multiple protein interaction networks
with application to functional orthology detection. Proc. Natl Acad. Sci. USA,
105, 12763712768.

Vazquez,A. et al. (2003) Modeling of protein interaction networks. ComPlexUs, l,
3844.

Wagner,A. (2003) How the global structure of protein interaction networks evolves.
Proc. R. Soc. Lond. Ser. B Biol. Sci., 270, 457466.

Wernicke,S. (2006) Efficient detection of network motifs. IEEE/ACM Trans.
Comput. Biol. Bioinformatics, 3, 3477359.

Zhang,X. and Moret,B. (2008) Boosting the performance of inference algorithms
for transcriptional regulatory networks using a phylogenetic approach. In:
Crandall,K. and Lagergren,J. (eds) Algorithms in Bioinformatics, volume 5251
of Lecture Notes in Computer Science. Springer, Berlin, Heidelberg, pp. 24y258.

 

372

ﬁre'spzumol‘pmJXO'sopeuuowrorq/pdnq

