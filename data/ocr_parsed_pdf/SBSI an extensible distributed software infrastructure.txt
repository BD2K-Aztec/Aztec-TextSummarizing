BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

SBSI

 

multi—processor computers. Two objective functions are pro—
vided: a least—squares difference function to determine the
goodness—of—flt of a simulation to experimental data, and a
Fast Fourier Transform algorithm that identiﬁes oscillatory
models. It is also possible to link to external cost functions spe—
ciﬁc to an individual model.

SBSIDispatcher provides a secure REST—ful webservice API
to access parameter fitting and simulation functionality on the
SBSI servers. This middleware layer reduces coupling between
client applications and the servers that run the jobs, allowing
different HPCs or clusters to be utilized with little conflguration
required by the end—user. The web—service endpoint and docu—
mentation is https://sbsidev1.inf.ed.ac.uk:8083/sbsiservices/rela—
tions/list. This API enables applications other than SBSIVisual
to use the SBSINumerics algorithms and SBSI servers. We
developed a web application at https://sbsidev1.inf.ed.ac.
uk28083/sbsiservices/ that tracks job progress and accesses
results. We developed the server application in Java using the
industry—standard Spring MVC framework, and it can be
deployed as a standard web application.

SBSIVisual is a client application to configure parameter
optimization jobs, to link with external databases and to view
the results of optimizations.

It provides a workspace where local copies of models, data
and diagrams can be worked on, and provides validation services
for these resources. Time series simulations can be performed
using pre—installed ODE solvers from the Copasi distribution
(Mendes et al., 2009), the CVODE package (https://computa—
tion.llnl.gov/casc/sundials/main.html) and Dizzy (Ramsey et al.,
2005), but other simulators can be installed as plugins. A screen—
shot is shown in Supplementary Material S2.

One of the main purposes of SBSIVisual is to make it easier
for end—users to conﬁgure optimization tasks, which can be quite
complex. Such configuration includes the choice of which par—
ameters to optimize and their constraints, the optimization algo—
rithm and its parameters, and the choice of data sets and cost
functions (which may need to be conﬁgured on a per—dataset
basis). SBSIVisual uses a wizard dialogue to guide the user
through this process, and stores the conﬁguration as an SBML
Annotation in the model ﬁle. This conﬁguration populates the
wizard on subsequent occasions, easing the conﬁguration process
further. Additionally, users may now exchange both parameter—
f1tting conﬁgurations and models.

SBSIVisual provides a report view of a parameter—ﬁtting
experiment, showing plots of cost function value versus search
iteration, and overlays of simulation traces and experimental
data. In addition, if the user elects to retain the full search his—
tory, a cobweb plot can be created to show how the search space
has been explored. An example plot is shown in Supplementary
Material S3.

SBSIVisual is written in Java using the Eclipse Rich Client
Platform (RCP) as an application framework. This framework
offers a great deal of useriinterface support, as well as a robust
and highly developed plugin system for adding new functionality.
Our use of standard data formats such as the Systems Biology

Markup Language [SBML, Hucka et a]. (2003)] provides a stable
basis for plugin development. Plugins can be downloaded and
installed from an update site (http://www.sbsi.ed.ac.uk/update)
with minimal user input. Plugins developed to date enable
access to project—specific databases and editing support for
standard data formats such as SBML and SED—ML (Adams
et al., 2012; Adams, 2012).

3 CONCLUSIONS

The main focus of SBSI is the task of parameter estimation,
which by its nature is computationally intensive. Progress of
long—running jobs can be monitored by observing cost function
values, and downloading intermediate result flles. At the end of a
parameter fitting, the user can download the fitted model,
together with simulation results generated from the model, and
a full log of the explored search space. Since it is beyond our
resources to provide computational time for everyone wishing to
use SBSI, we have endeavoured to package the software in a
form that can be easily installable on other servers.
SBSIDispatcher, which acts as a task manager for remotely run—
ning jobs, is deployed as a regular Java web application, and only
requires conﬁguration of database access in order to be useable
on other application servers.

ACKNOWLEDGEMENT

The authors thank Kevin Stratford for consultancy on
SBSINumerics.

Funding: UK Biotechnology and Biological Sciences Research
Council, and Engineering and Physical Sciences Research
Council (to SynthSys, a Centre for Integrative and Systems
Biology) (BB/D019621/1).

Conﬂict of Interest: none declared.

REFERENCES

Adams,R.R. et a]. (2012) The Input Signal Step Function (ISSF): a standard
method to encode input signals in SBML models with software support, applied
to circadian clock models. J. Biol. thytltmx, 27, 3287332.

Adams,R.R. (2012) SED—ED, a workﬂow editor for computational biology experi—
ments written in SED—ML. Bioiiy’ormuticx, 28, 118(k1181.

Hirmajer,T. et a]. (2009) DOchpSB, a software toolbox for dynamic optimization
in systems biology. BMC Bioinformutim‘, 10, 199.

Hucka,M.S. et a]. (2003) The Systems Biology Markup Language (SBML): a
medium for representation and exchange of biochemical network models.
Bioinformuticx‘, l9, 52¢53l.

Maiwald,T. and Timmer,J. (2008) Dynamical modeling and multi—experiment
ﬁtting with PottersWheel. Bioiiy’ormuticx, 24, 203772043.

Mendes,P. et a]. (2009) Computational modeling of biochemical networks using
COPASI. Methods Mol. Biol., 500, 17759.

Ramsey,S. et a]. (2005) Dizzy: stochastic simulation of large—scale genetic regulatory
networks. J. Bioinform. Comput. Biol., 3, 4154136.

Zi,Z. (2011) SBML—PET—MPI: a parallel parameter estimation tool for Systems
Biology Markup Language based models. Bioiiy’ormuticx, 27, 102871029.

 

665

ﬁm'spzumofpmﬂo'sopeuuopnorq/ﬁdnq

