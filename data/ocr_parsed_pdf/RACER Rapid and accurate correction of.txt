BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

RACER

 

Table 1. The datasets used for evaluation, sorted increasingly by total number of base pairs

 

 

Dataset Accession Reference Genome Read Number Number Coverage

number genome length length of reads of base pairs
Lactococcus lactis SRR088759 NC_013656.1 2 598 144 36 4 370 050 157 321 800 60.55
Trepanema pallidum SRR361468 CP002376.1 1 139 417 35 7 133 663 249 678 205 219.13
Ecoli 75a SRR396536 NC_000913.2 4 639 675 75 3 454048 259 053 600 55.83
Bacillus subtilis DRR000852 NC_000964.3 4 215 606 75 3 519 504 263 962 800 62.62
Ecoli 75b SRR396532 NC_000913.2 4 639 675 75 4 341061 325 579 575 70.17
Pseudomonas aeruginosa SRR396641 NC_002516.2 6 264 404 36 9 306 557 335 036 052 53.48
Ecoli 47 SRR022918 NC_000913.1 4771872 47 14408 630 677 205 610 141.92
Leptospira interrogans L SRR353563 NC_004342.2 4 338 762 100 7 066 162 706 616 200 162.86
Limerrogans C SRR397962 NC_005823.1 4 277 185 100 7 127 250 712 725 000 166.63
Ecoli 36 SRX000429 NC_000913.1 4 771 872 36 20 816 448 749 392 128 157.04
Haemophilus inﬂuenzae SRR065202 NC_000907.1 1 830 138 42 23 935 272 1 005 281 424 549.29
Saureus SRR022866 NC_003923.1 2 901 156 76 25 551716 1941930 416 669.36
Scerevisiae SRX100885 PRJNA128 12 416 363 76 52 061664 3 956 686 464 318.67
Celegans SRR065390 wormbase.org 102 291 899 100 67 617 092 6 761 709 200 66.10
D.melan0gaster SRX006151 flybase.org 120 220 296 45 75 95 101 548 652 6 903 898 304 57.43

SRX006152

SRX023452

 

Note: All datasets and reference genome sequences are obtained from National Center for Biotechnology Information except Celegum' from www.wormbase.org and

Dmelunoguster from flybaseorg.

consumption, RACER is space efﬁcient. It is also faster and
more effective at correcting errors than the existing programs.
We have performed extensive comparison with the leading
programs on a variety of real datasets. RACER is freely avail—
able for non—commercial use at www.csd.uwo.ca/~ilie/RACER/.

2 RESULTS
2.1 Datasets

We have performed extensive testing on a wide variety of data—
sets with difference read length, genome size and coverage.
Comparison has been performed exclusively on real datasets be—
cause, in our experience, simulated datasets do not offer a good
indication of real—life performance. In addition, they are easy to
correct and the correcting programs often exhibit unrealistically
high performance.

Fifteen real datasets were considered, some of which have
been previously used either for correcting purposes or assembly:
Escherichia coli 36, Ecoli 47 (the numbers following the name
represent read length and are used to distinguish them),
Staphylococcus aureus, Saccharomyces cerevisiae and
Drosophila melanogaster have been used in the survey of Yang
et a1. (2013), and Caenorhabditis elegans was used for comparing
SGA with other genome assemblers by Simpson and Durbin
(2012). The remaining datasets are new. The accession numbers
and details of the datasets, together with the corresponding in—
formation concerning the reference genomes, are given in
Table l. Full organism names are provided in Supplementary
Table S4.

2.2 Evaluation

We have compared RACER with the programs tested by Yang
et a]. (2013), namely, HiTEC, SHREC, Reptile, Quake, Coral,

SOAP and ECHO. (We have tested SHREC instead of
HSHREC, as we consider only substitution errors.) Of these,
SOAP and ECHO were unable to run most of the datasets be—
cause of high space or time requirements and are left out of the
comparison.

All programs tested were evaluated on the raw datasets in
Table l for their ability to correct errors as well as the time
and space required. Error—correcting performance was evaluated
as the percentage of errors corrected. Our evaluation method has
the advantage of avoiding the interference of mapping or assem—
bling programs and is described in detail in Section 3.2 of
Methods.

To have a uniform comparison, we have normalized the time
and space values by dividing them by the total number of base
pairs in the dataset. The actual time and space values are given in
the Supplementary Material.

We have run all programs on the same HewlettiPackard com—
puter with 24 cores AMD Opteron at 2.1GHz and 98 GB of
random access memory running Linux Red Hat, CentOS
5.5m. Because HiTEC and Reptile do not run in parallel, we
performed the testing in both serial and parallel modes, to in—
clude all programs in the comparison. We have used 24 cores in
parallel mode.

The results are presented in Table 2, which contains the
error—correcting performance in the top part in percentage of
errors corrected, the time in the middle part in seconds per mega—
byte of input base pairs and space in the bottom part in mega—
bytes required per megabyte of input base pairs. Some programs
could not run all datasets and the reasons are indicated by letters
explained in the caption of the table. The last row in each part
represents the average of the entries for those datasets for which
all programs could run. To improve the visualization of the
tables, we have used color intensities with darker color represent—
ing better performance.

 

2491

ﬁlO'SIIZIImOprOJXO'SODBILLIOJLIIOICV/idnq

11.60
30.76
25.62
24.60
27.14
11.46

6.13
95.48
101.94
26.77
88.37
76.80
95.17

42.97

13.56

5.68
11.07
12.44
12.37
12.89

2.87
12.17
11.63
12.99
13.45
14.15

2.03 -

2.14

11.21

17.53

11.29
18.10
3.41
5.20
3.57
4.22
35.42
2.49
2.71
14.16
6.37

2.36
3.10
10.59
6.73

5.11

60.27
2.65
21.82
64.25
54.55
68.44
0.00
35.55
38.46
0.06

9.52
9.10
7.90
10.65
14.85
6.98
4.95
4.84
6.01
10.75

61.79
72.61
41.19
38.58
63.40

55.99
48.09
77.49

22.57
27.01
25.11
27.39
17.69

26.88
27.55
19.14
19.54

15.93 -

7.73
16.13
19.59

8.48

3.61
3.42
1.50
1.11
4.77
1.17
1.61
3.20
4.91

26.61

24.17 3.38

147.74
145.67
144.77
117.41
112 25
56.43
55.85
52.99
39.78

18.32

104.14 3.39

 

350.21 10.79
226 02 7.72
220 01 7.87
217 65 7.73
178.51 7.02
169.60 8.06
96.70 6.26
87.15 4.79
86.06 4.62
82.30 7.01
63.43
51.03
24.34 4.13
5.07
5.60
158.41 6.85

417.84
402.32
395.65
320.80

31

 

3.35
7.18
7.04
5.81
4.47

- ms

147.84
146.52
139.24
103.93

26.50

285.21

2.05
1.84
2.73
1.74
2.76
1.66
2.83
6.41
4.31

 

dnq

/310'spzumo[p10}xo'sopeuuqutotq”

RACER

 

performance was computed as (e,, — e“)/e,,. Because we have
e], = TP+FN, e“ = FP+FN (Ilie et al., 2011), we have that
 = #41; , which is the same as the formula used by Yang et al.
(2013). By considering whole-read correction, as explained above, instead
of individual-based correction, similar performance is expected; however,
the problems associated with read mapping are avoided.

Nevertheless, because in some articles the comparison is performed on
mapped datasets, we provide, for completeness, such a comparison in the
Supplementary Material where the datasets have been mapped using
BWA (Li and Durbin, 2009) with high error rate, so that a high
number of reads are kept and bias is minimized. The comparison on
the mapped datasets is similar with the one on the raw datasets except
that, as expected, the percentage of errors corrected increases.

All programs have been run according to the instructions given by the
authors in the corresponding articles, Web sites or readme files. We have
not tuned the parameters of any of the programs to improve perform-
ance, as this would be unrealistic. The commands used to run all pro-
grams are given in the Supplementary Material.

 

4 DISCUSSION

Extensive testing shows that RACER is superior to the existing
programs in all aspects: error—correcting performance, time and
space. It corrects about three—quarters of the errors in <2 min for
a bacterial dataset and 30410 min for a larger organism such as a
worm or fly. RACER does not require any additional software
to run.

5 CONCLUSION

We have presented a new tool, RACER, for correcting errors in
NGS data. The current version of RACER targets Illumina data,
thus correcting substitution error. Future versions will be able to
handle indel errors to enable correction of data from other
sequencing platforms as well as mixed data.

ACKNOWLEDGEMENTS

Performance evaluation has been performed using the facilities of
the Shared Hierarchical Academic Research Computing Network
(SHARCNET: www.sharcnet.ca) and Compute/Calcul Canada.

Funding: The Natural Sciences and Engineering Research
Council of Canada (NSERC) (in parts to L1.)

Conﬂict of Interest: none declared.

REFERENCES

Butler,J. et al. (2008) ALLPATHS: ale novo assembly of whole—genome shotgun
microreads. Genome Res., 18, 8107820.

Chaisson,M. et al. (2004) Fragment assembly with short reads. Bioinformatics, 20,
206772074.

Chaisson,M.J. and Pevzner,P.A. (2008) Short read fragment assembly of bacterial
genomes. Genome Res., 18, 3247330.

Haussler,D. et al. (2009) Genome 10K: a proposal to obtain whole—genome se—
quence for 10,000 vertebrate species. J. Hereil., 100, 659%74.

Ilie,L. et al. (2011) HiTEC: accurate error correction in high—throughput sequencing
data. Bioinformatics, 27, 2957302.

Kao,W.C. et al. (2011) ECHO: a reference—free short—read error correction algo—
rithm. Genome Res., 21, 118171192.

Kelley,D.R. et al. (2010) Quake: quality—aware detection and correction of sequen—
cing errors. Genome Biol., 11, R116.

Li,H. and Durbin,R. (2009) Fast and accurate short read alignment with burrows—
wheeler transform. Bioinformatics, 25, 175471760.

Li,R. et al. (2010) De novo assembly of human genomes with massively parallel
short read sequencing. Genome Res., 20, 2657272.

Medvedev,P. et al. (2011) Error correction of high—throughput sequencing datasets
with non—uniform coverage. Bioinformatics, 27, i1377i141.

Metzker,M.L. (2010) Sequencing technologies — the next generation. Nat. Rev.
Genet., 11, 31746.

Pevzner,P.A. et al. (2001) An Eulerian path approach to DNA fragment assembly.
Proc. Natl Acad. Sci. USA, 98, 974879753.

Salmela,L. (2010) Correction of sequencing errors in a mixed set of reads.
Bioinformatics, 26, l284~l290.

Salmela,L. and Schroder,J. (2011) Correcting errors in short reads by multiple
alignments. Bioinformatics, 27, 145571461.

Sanger,F. et al. (1977) DNA sequencing with chain—terminating inhibitors. Proc.
Natl Acad. Sci. USA, 74, 546375467.

Schroder,J. et al. (2009) SHREC: a short—read error correction method.
Bioinformatics, 25, 215772163.

Shi,H. et al. (2010) A parallel algorithm for error correction in high—throughput
short—read data on CUDA—enabled graphics hardware. J. Comput. Biol., 17,
603%15.

Simpson,J.T. and Durbin,R. (2012) Efficient ale novo assembly of large genomes
using compressed data structures. Genome Res., 22, 5497556.

Simpson,J.T. et al. (2009) ABySS: a parallel assembler for short read sequence data.
Genome Res., 19, 111771123.

Siva,N. (2008) 1000 Genomes Project. Nat. Biotechnol., 26, 256.

Yang,X. et al. (2010) Reptile: representative tiling for short read error correction.
Bioinformatics, 26, 252G2533.

Yang,X. et al. (2013) A survey of error—correction methods for next—generation
sequencing. Brief. Bioinform., 14, 5666.

Zhao,Z. et al. (2011a) An efficient hybrid approach to correcting errors in short
reads. In: Torra,V., Narakawa,Y., Yin,J. and Long]. (eds) Modeling Decision
for Artificial Intelligence. Volume 6820 of Lecture Notes in Computer Science.
Springer, Berlin/Heidelberg, pp. 987210.

Zhao,Z. et al. (2011b) PSAEC: an improved algorithm for short read error correc—
tion using partial sufﬁx arrays. In: Atallah,M., Li,X.Y. and Zhu,B. (eds)
Frontiers in Algorithmics and Algorithmic Aspects in Information and
Management. Volume 6681 of Lecture Notes in Computer Science. Springer,
Berlin/Heidelberg, pp. 22(k232.

 

2493

ﬁm'sIeumoI‘pJOJXO'sopeuuowrorq/pdnq

