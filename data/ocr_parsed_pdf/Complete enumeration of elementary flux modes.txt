BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

K.A.Hunt et al.

 

algorithmic advances (Klamt et al., 2005; Schuster and Hilgetag,
1994; Schuster et al., 2000; Terzer and Stelling, 2008; Urbanczik
and Wagner, 2005a).

Approaches that circumvent the problem of enumerating
all EFMs have been explored. One such approach, convex
basis analysis [i.e. extreme pathway analysis (Schilling et al.,
2000)] identiﬁes a subset of EFMs that still reproduce any feas—
ible steady state ﬂux distribution but lack the biological inter—
pretability of the complete EFM set (Klamt and Stelling, 2003;
Llaneras and Pico, 2010). Efforts have also been made to enu—
merate subsets or patterns of elementary ﬂux vectors that allow
genome—scale investigations. These efforts include generating
the conversion cone (a simpler projection of the solution space
considering external ﬂuxes only) (Urbanczik, 2007; Urbanczik
and Wagner, 2005b), enumerating only EFMs containing the
largest number of zero ﬂuxes (de Figueiredo et al., 2009),
enumerating a set of EFMs that can explain a given ﬂux distri—
bution (Ip et al., 2011), applying regulation to minimize compu—
tation (Jungreuthmayer et al., 2013) and identifying elementary
ﬂux patterns, which are EFMs for subsystems that consider the
constraints imposed by the parent network (Kaleta et al., 2009;
Schuster et al., 2010). Finally, computationally intractable net—
works have been divided into manageable pieces based on bio—
chemical knowledge (Schilling and Palsson, 2000; Verwoerd,
2011), metabolite connectivity (i.e. the number of reactions invol—
ving a particular metabolite) (Schuster et al., 2002; Verwoerd,
2011), path length between reactions (Ma et al., 2004), examin—
ation of the nullspace of the stoichiometric matrix (Poolman
et al., 2007) and random sampling of the solution space to
calculate eigenvectors that can be rotated to produce distinct
reaction sets (Barrett et al., 2009).

For many applications, the ideal approach is an unbiased in—
vestigation of the entire solution space, although this scenario
was previously out of computational reach for complex networks
(Klamt and Stelling, 2002; Llaneras and Pico, 2010). It has been
proposed that otherwise infeasible EFM enumerations can be
performed through the dissection of metabolic networks into
simpler subnetworks via suppression or enforcement of reaction
ﬂuxes, a technique referred to as splitting (Klamt et al., 2005).
Suppression of a reaction deﬁnes a subnetwork that does not
contain the reaction, whereas enforcement of a reaction deﬁnes
a subnetwork that excludes EFMs that do not use the reaction,
both of which reduce the computational burden (e.g. Fig. 1).
Complete coverage of a metabolic network’s solution space with—
out overlap is ensured at each split by paired suppression and
enforcement of a single reaction. An additional example of sup—
pressing and enforcing can be found in Jevremovic et al. (2011b),
which used the EFMA algorithm, Elmo—Comp. Unfortunately,
Elmo—Comp lacked enumeration completeness, as shown
through a disagreement between the presented and published
EFM counts (Jevremovic and Boley, 2012; Jevremovic et al.,
2011a). The primary objective of the current study is to success—
fully implement a scalable demand—based splitting technique for
complete enumeration of all network EFMs. The objective is
achieved through (i) the development of rational rules for effect—
ively splitting networks, (ii) the successful use of a network split—
ting algorithm that continuously divides networks until they are
computationally tractable and (iii) the use of a workstation—
based computational cluster to distribute EFM enumeration of

genome—scale models. The presented work demonstrates efficacy
across network models containing EFM counts spanning four
orders of magnitude. This algorithm is the first successful imple—
mentation of the splitting technique and establishes a scalable
framework for EFMA of most metabolic models.

2 METHODS

2.1 Experimental and computational systems

Development and analysis of the presented splitting techniques was per-
formed using three previously published metabolic models described in
Table l with additional detail available in Supplementary Table S1. The
test models, chosen to demonstrate efﬁcacy over a range of model complex-
ity, included a prokaryotic (ECOLI), a simpliﬁed eukaryotic (YEASTl)
and a multicompartment eukaryotic model (YEAST2) (Supplementary
Material). These test models were calculated as both unsplit and split net-
works to validate the compiled subnetwork results. Unsplit networks were
computed using the software package EFMTool on a Windows 7 machine
with a maximum conﬁguration of 120 GB of RAM and 2 Intel Xeon pro-
cessors (X5690). Implementation of EFMTool (Terzer and Stelling, 2008)
version 4.7.1 (www.csb.ethz.ch/tools/efmtool) used documented options
described in Supplementary Table S2. The basic splitting and iterative
splitting algorithms were written in Windows PowerShell v2.0 for imple-
mentation with Microsoft high performance computing (HPC), clustering
software which supports workstation-based clusters. The computational
cluster included 50 workstation nodes, which ranged from 4420 GB of
RAM per node. Result compilations and analyses were performed using
MATLAB on machines with 32 GB of RAM.

2.2 EFM concatenation and comparison

Subnetwork results produced by the splitting algorithm were screened
for consistency with subnetwork deﬁnitions and concatenated into a
single output set (as in Fig. 2). EFMTool identiﬁes futile cycles based
on the number of non-zero ﬂuxes in a ﬂux vector, removes them from
processing and adds them back at the end of processing regardless of
subnetwork deﬁnition. This necessitated screening all EFMs to verify that
they did not violate the deﬁnition of their subnetwork. The screening
process required minimal computational effort. For example, the
CONCATENATOR script checked and compiled 2 billion EFMs in
~l day; most of the elapsed time involved reading, decompressing, com-
pressing and writing the results, which occupy ~l TB of hard drive space.

Network results were compared across different algorithms and split-
ting conﬁgurations by converting all EFMs to a binary representation
based on reaction participation and identifying EFMs not shared by both
result sets being compared. This comparison was done using standard
MATLAB functions. Binary representation removed rounding effects
associated with normalization and allowed for comparison of all test
models presented.

2.3 Optimizing EFMTool performance

EFMTool’s use of RAM was inspected and optimized using the manage-
ment application, Jconsole, and Java options. Brieﬂy, Java 1.6.x uses a
generational memory construct that assigns new objects to one memory
space while moving older objects to a separate predeﬁned memory space.
This is usually an efﬁcient use of RAM, as most Java applications do not
produce many old objects, and memory management is easier when
newer objects are kept together. However, EFMTool stores each EFM
as an object that stays in RAM for the duration of the calculation, even-
tually becoming an old object. EFMTool ﬁlled the memory allocated for
older objects that resulted in ‘out of RAM’ errors, despite having only
used 25733% of the RAM assigned to Java. Thus, the default Java op-
tions limit EFMTool execution to smaller networks. This practice was

 

1570

ﬁm'spzumofpmjxo'sopeuuopnorq/ﬁdnq

H 3. .1. E. “A m. 2.. I. _.... ..... .... . _.... ... .. . . . _" n. u”.  Gm.  R1.  nn:  .Ha.
d r... H. _..a 1. 1 .
RRR RR L.20.204n_.sl1.

$000111,

dtanTlJnUDﬂ.
00101.1

_ n»:

I . .: ri. 1... I. J
(100001.5 .RRRRR

Lain/.120.

Nl|\1_;i'-J_. N awn

010041

?

Reactions

Elementary Flux Mode Enumeration
Enforcement of Reaction R?
Suppression of Reaction R

an
n
.n
e
d
r
0
w
0
R
d
n
a
n:
.m
S
r
e
V
n
0
C
e
C
a
p
16
Iu
N
H;
.m
S
S
e
r
D.
m
0
C


RRRRRR

3.x 1.
NUUOlll

Reactions

N3001014

N1010041

Nirl 0 0 0 D .I\_ . .
.r \ meonSmE

 

C8

92
a
2

E,
LLI
Z
2
4
LJ
.lﬂ .

ratqu St:

1121
{INDE

and cciNCATENATo i

u
I

1': E

in silico stoicl-nometric model

'l'npirFF'd ri tI-"rl' for additional reactions
that so

NC; additii'lnai I'E|
Ft" i'_‘|ir

mm; ii I!
actions tor splitting

Remove violating reactions
ions for from the set of preliminary

)Iitting mt
re r «2'. R and 

.mrilinoc
iteration with r addit'
reactions for splitting

‘. ' h subne. work
definition and compile

Compiled EF ' of entire ri

 

/310'S[BIIJHO[pJOJXO'SOtlBHIJOJutotq/ﬂdnq

an?kgogmomammowoio~&o:3m7.omm\

 

Maximum EFMs in a Sub-network :1

Total EFMs in the Network

5 10 15
Total Reactions Used for Splitting {R}

CPU Intensive

RAM intensive

AE1E2£3E4x=0

AFIETEJFAX=0

AElEESﬂE-lx :0

AEIEE‘S 3 54x :0

 

/310'S[BIIJHO[pJOJXO'SOtlBHIJOJutotq/ﬂdnq

EFMA through demand-based subnetwork definition

 

during iterative splitting. The upper limit occurs when all sub—
networks are intractable until the last iteration at which point
they all complete (Fig. 5A, r: 1). This scenario represents basic
splitting when r equals R. The lower limit occurs when each step
of iterative splitting produces only one intractable subnetwork
until R reactions are used, at which point all subnetworks com—
plete and the entire solution space for the whole network is
covered (Fig. 5B, r: 1).

Optimization based on limiting the number of intractable sub—
networks enables prediction of a generalized ideal r without a
priori network—speciﬁc information. The equation for the total
number of subnetworks (N) is:

N: 2"(f+ 1) (1)

where f is the number of intractable subnetworks. Equation (1)
does not include the original unsplit network. As r—> Rmm, f—>0,
therefore, basic splitting with at least the number of reactions
required (Rm-n) eliminates time spent on intractable subnetworks.
However, this neglects the benefit of early branch completion,
reducing the total number of attempted subnetworks and there—
fore the total CPU time (Fig. 5A and B).

Assigning a theoretical relative CPU time for tractable and
intractable subnetworks permits evaluation of effective values
of r with respect to CPU time. For this analysis, a theoretical
model is considered that requires one hour of CPU time to enu—
merate the EFMs from the unsplit network, tum”. An approxi—
mate relation between tum”, and the average CPU time to
enumerate the EFMs of a subnetwork of the same network
was determined empirically using the test models in Table 1.
For the subnetwork defined by r*i reactions, the CPU time for
EFM enumeration (trj) follows the relationship:

_ tumplit

tr‘f —  
(data not shown). For analysis purposes, the CPU time for sub—
networks with failed EFM enumeration attempts, (my, was
bracketed between 10—fold longer and 10—fold shorter than tum”.
A 10—fold longer run time was used as an upper limit because
Java garbage collection will run until it uses 90% of the total
CPU time before crashing, inﬂating the run time ~10—fold. A 10—
fold shorter run time was used for the lower limit because net—
works with an explosion in the number of potential EFMs may
quickly ﬁll available memory with objects that cannot be cleared
(data not shown). Combining Equation (2) and the bounds for
tﬂ,” with the number of subnetworks defined by Equation (1),
total CPU time boundaries were estimated as a function of r and
normalized by rump,” (Fig. 6). Simulations considered three the—
oretical models with Rmm: 10, 20 and 30 and all combinations
of it”, and r producing a respective Rmm. Increasing r reduces the
maximum potential CPU time investment independent of R;
however, the time minimum increases signiﬁcantly with r after
~5 reactions (Fig. 6). The minimum time increases due to the
large number of subnetworks and the associated redundant cal—
culations during reaction enforcement. Considering both the
minimum relative CPU time for the lower tfai, limit scenario
and the exponential decrease in relative CPU time for the
upper tfai, limit scenario, an r in the range of 48 reactions ap—
pears optimal without a priori knowledge (Fig. 6). The analysis
considers total relative CPU time; implementation on

computational clusters would reduce real—world time because
of parallel computations.

3.5 Minimizing intractable subnetwork runtime

Intractable subnetworks can have a high CPU time cost; there—
fore, large run time savings can be obtained by minimizing CPU
time spent on intractable subnetworks. An empirical detection
strategy was applied to identify EFM enumeration attempts that
were not likely to complete; those attempts were then terminated
before failure and the subnetwork was further divided. Applying
the intractable subnetwork detection strategy resulted in substan—
tial time savings for the models in this study (data not shown).
Details of the prediction algorithm and used time thresholds can
be found in the Supplementary Material.

3.6 Application of the iterative splitting algorithm to a
genome-scale diatom model

EFMA of a genome—scale metabolic model for the diatom
Phaeodactylum tricomutum Pt1 was conducted to demonstrate
the iterative splitting algorithm. This model was reconstructed
using the extensive knowledge base for P. tricomutum Pt1,
including a ﬁnished genome (Markowitz et al., 2012) and litera—
ture—based manual analyses (e. g. Fabris et al., 2012; Kroth et al.,
2008). The DIATOM model considers 680 genes that were
manually compressed into 318 reactions with 335 metabolites.
Reactions and metabolites were partitioned into five distinct
physical compartments based on analysis of organelle signal
peptides (Emanuelsson et al., 2007) and biochemical studies
(e. g. Tachibana et al., 2011). The metabolic model with genomic
information, stoichiometries, biomass requirements and a graph—
ical representation can be found in the Supplementary Material.

The workﬂow for successful application of the iterative split—
ting algorithm (i.e. Fig. 2) to the DIATOM model can be
described as follows: a set of 14 reactions for splitting (R: 14)
was identified by calling the REACTIONTESTER function
(Supplementary Material). The reactions were divided into two
sets of seven reactions (r = 7 and it”, = 2) based on the theoretical
optimal values of r (Fig. 6) and the complete use of the set of
reactions for splitting. The INDEXER function submitted EFM
enumeration jobs to the HPC cluster and on completion of the
ﬁrst iteration, scanned the results for intractable subnetworks to
further divide with the next seven reactions in the second iter—
ation. The PowerShell script used is available in
the Supplementary Material. EFMA of the DIATOM model
resulted in 1 934 729 551 EFMs; this count was validated by rea—
nalyzing random model subnetworks using different sets of
reactions for splitting. The output exceeds the largest reported
for EFMA to date by ~1 order of magnitude (J ungreuthmayer
et al., 2013).

4 DISCUSSION

The complete and reproducible EFMA of metabolic networks
that were previously computationally intractable was demon—
strated here through the deﬁnition of subnetworks based on
serial enforcement and suppression of reaction ﬂuxes. This is in
contrast to other recent attempts to parallelize EFM enumer—
ation by splitting, which were found to be incomplete at times

 

1 575

ﬁm'spzumofpmjxo'sopeuHOJHtotq/ﬁdnq

d.)
.E
'—
II
a.
U

0
.3
..
.2

m
0!

20000 ~

2000000 *

2E+10 --

200000000 -

2000000 -

20000 ~

8 12 15 20
Reactions per iteration [r]

 

/310'S[BIIJHO[pJOJXO"SOIJBHIJOJIIIOIq/ﬂdnq

EFMA through demand-based subnetwork definition

 

Although such a model is theoretically possible, it is hypothe—
sized that with computational resource improvements, most
models will be tractable.

The basic splitting and iterative splitting algorithms allow for
distributed computation of models through division into subnet—
works. Microsoft HPC software permitted enumeration of the
nearly 2 billion EFMs in the DIATOM model in <1 month using
academic computer laboratories during idle hours. Although the
total CPU time is unavoidable, the real time required to run large
models can be reduced substantially based on the number and
computational power of nodes. For instance, the most complex
subnetwork in the DIATOM model took ~2 days of run time;
therefore, given appropriate resources, the EFMA could have
been completed in 2 days if the other subnetworks were concur—
rently run on additional nodes. This highlights the lower limits of
computational time for EFMA of genome—scale models, given
current computer capabilities. Using the splitting algorithm and
sufﬁcient computational resources, the presented study substan—
tially expands the applicability of EFMA.

SYMBOLS

f Number of intractable subnetworks

i Iteration in the iterative splitting process

in” Number of iterations in the iterative splitting process

k Number of reactions with non-zero coefﬁcients within an EFM
m Number of metabolites in the compressed model

N Number of subnetworks attempted

q Number of reactions in the compressed model

R Number of reactions used for subnetwork deﬁnition during the

splitting process
Rm,” Minimum number of reactions needed for complete subnetwork
enumeration during the splitting process

R’ Number of preliminary reactions for splitting (reactions that have
not been veriﬁed at the subnetwork level)

R# Reaction #, where # identiﬁes a speciﬁc reaction from Figures 1
or 3

r Number of reactions used for subnetwork deﬁnition at each
iteration

[My Average CPU time spent on intractable subnetworks

try,- Average completion time for subnetwork deﬁned by r*i reactions

lump/i, Time for unsplit network to complete

ACKNOWLEDGEMENT

The authors would like to thank Jeffrey J. Heys, Marco Terzer,
and Austin Jacobs for helpful discussions.

Funding: Centers of Biomedical Research Excellence (COBRE)
Center for Analysis of Cellular Mechanisms and Systems
Biology, National Institute of Health (P20RR024237 to J PF.
and R.L.T.), Integrative Graduate Education and Research
Traineeship (IGERT) in Geobiological Systems, National
Science Foundation (DGE 0654336 to K.A.H. and R.L.T.)
and the Emerging Frontiers in Research and Innovation
(EFRI), National Science Foundation (0937613 to K.A.H.).
The diatom reconstruction was supported by the Air Force
Ofﬁce of Scientific Research (FA9550—09—1—0243 to R.P.C.).

Conﬂict of interest: none declared.

REFERENCES

Barrett,C.L. et a]. (2009) Decomposing complex reaction networks using ran—
dom sampling, principal component analysis and basis rotation. BMC Syst.
Biol, 3, 30.

Carlson,R.P. (2009) Decomposition of complex microbial behaviors into resource—
based stress responses. Bioinformatics, 25, 90797.

Carlson,R.P. et a]. (2002) Metabolic pathway analysis of a recombinant yeast for
rational strain development. Biotechnol. Bioeng., 79, 1217134.

de Figueiredo,L.F. et a]. (2009) Computing the shortest elementary ﬂux modes in
genome—scale metabolic networks. Bioinformatics, 25, 315873165.

Emanuelsson,O. et a]. (2007) Locating proteins in the cell using TargetP, SignalP
and related tools. Nat. Protoc., 2, 9537971.

Fabris,M. et a]. (2012) The metabolic blueprint of Phaeodactylum tricornutum
reveals a eukaryotic Entner—Doudoroff glycolytic pathway. Plant J., 70,
1004ﬁ1014.

Feist,A.M. et a]. (2006) Modeling methanogenesis with a genome—scale metabolic
reconstruction of Methanosarcina barkeri. Mol Syst. Biol, 2, 20060004.

Gagneur,J. and Klamt,S. (2004) Computation of elementary modes: a unifying
framework and the new binary approach. BMC Bioinformatics, 5, 175.

Ip,K. et a]. (2011) Analysis of complex metabolic behavior through pathway
decomposition. BMC Syst. Biol, 5, 91.

Jevremovic',D. et al. (2011a) Divide—and—conquer approach to the parallel compu—
tation of elementary flux modes in metabolic networks. In: 2011 IEEE
International Symposium on Parallel and Distributed Processing Workshops and
Phd Forum. IEEE, Anchorage, AK, pp. 502511.

Jevremovic',D. et al. (2011b) Parallelization of nullspace algorithm for the compu—
tation of metabolic pathways. Parallel Comput, 37, 2617278.

Jevremovic',D. and Boley,D. (2012) Parallel compumtion of elementary flux modes
in metabolic networks using global arrays. In: The 6th Conference on Partitioned
Global Address Space Programming Models. Sanm Barbara, CA.

Jungreuthmayer,C. et a]. (2013) regEfmtool: Speeding up elementary flux mode
calculation using transcriptional regulatory rules in the form of three—state
logic. Biosvstems., 113, 37739.

Kaleta,C. et a]. (2009) Can the whole be less than the sum of its parts? Pathway
analysis in genome—scale metabolic networks using elementary flux patterns.
Genome Res., 19, 187271883.

Klamt,S. et a]. (2005) Algorithmic approaches for computing elementary modes in
large biochemical reaction networks. IEE Proc. Syst. Biol, 152, 2497255.

Klamt,S. and Stelling,]. (2002) Combinatorial complexity of pathway analysis in
metabolic networks. Mol Biol. Rep, 29, 23%236.

Klamt,S. and Stelling,]. (2003) Two approaches for metabolic pathway analysis?
Trends Biotechnol, 21, 64e69.

Kroth,P.G. et a]. (2008) A model for carbohydrate metabolism in the diatom
Phaeodactylum tricornutum deduced from comparative whole genome analysis.
PLoS One, 3, e1426.

Liao,J.C. et a]. (1996) Pathway analysis, engineering, and physiological consider—
ations for redirecting central metabolism. Biotechnol. Bioeng., 52, 1297140.
Llaneras,F. and Pico,J. (2010) Which metabolic pathways generate and characterize
the flux space? A comparison among elementary modes, extreme pathways and

minimal generators. J. Biomed. Biotechnol, 2010, 753904.

Ma,H.—W. et a]. (2004) Decomposition of metabolic network into functional mod—
ules based on the global connectivity structure of reaction graph. Bioinformatics,
20, 187C1876.

Markowitz,V.M. et a]. (2012) IMG: the integrated microbial genomes database and
comparative analysis system. Nucleic Acids Res., 40, D1157D122.

Orth,J.D. et a]. (2010) What is flux balance analysis? Nat. Biotechnol, 28, 2457248.

Poolman,M.G. et a]. (2007) Modular decomposition of metabolic systems via null—
space analysis. J. Theor. Biol, 249, 6917705.

Reed,J.L. and Palsson,B.O. (2003) Thirteen years of building constraint—based in
silico models of Escherichia coli. J. Bacteriol, 185, 269272699.

Schilling,C.H. et a]. (2000) Theory for the systemic deﬁnition of metabolic pathways
and their use in interpreting metabolic function from a pathway—oriented per—
spective. J. Theor. Biol, 203, 2297248.

Schilling,C.H. and Palsson,B.0. (2000) Assessment of the metabolic capabilities of
Haenwphilus inﬂuenzae Rd through a genome—scale pathway analysis. J. Theor.
Biol, 203, 2497283.

 

1 577

ﬁle'spzumofpmJXO'sopnuuoprrorq/ﬁdnq

K.A.Hunt et al.

 

Schuster,S. et al. (2000) A general deﬁnition of metabolic pathways useful for
systematic organization and analysis of complex metabolic networks. Nat.
Biotechnol, 18, 3267332.

Schuster,S. et al. (2002) Exploring the pathway structure of metabolism: decompos—
ition into subnetworks and application to Mvcoplasma pneumoniae.
Bioinformatics, 18, 3517361.

Schuster,S. et al. (2010) Predicting novel pathways in genome—scale metabolic
networks. Biochem. Soc. Trans., 38, 120271205.

Schuster,S. and Hilgetag,C. (1994) On elementary flux modes in biochemical reac—
tion systems at steady state. J. Biol. S_vst., 02, 1657182.

Tachibana,M. et al. (2011) Localization of putative carbonic anhydrases in two
marine diatoms, Phaeodactylum tricornutum and Thalassiosira pseudonana.
Photosynth. Res, 109, 2057221.

Taffs,R. et al. (2009) In silico approaches to study mass and energy flows in micro—
bial consortia: a syntrophic case study. BMC Syst. Biol, 3, 114.

Terzer,M. et al. (2009) Genome—scale metabolic networks. Wiley Interdiscip. Rev.
Syst. Biol. Med, 1, 2857297.

Terzer,M. and Stelling,]. (2008) Large—scale computation of elementary flux modes
with bit pattern trees. Bioinformatics, 24, 222972235.

Trinh,C.T. et al. (2009) Elementary mode analysis: a useful metabolic pathway
analysis tool for characterizing cellular metabolism. Appl Microbiol
Biotechnol, 81, 8137826.

Urbanczik,R. (2007) Enumerating constrained elementary ﬂux vectors of metabolic
networks. IET Syst. Biol, 1, 27¢279.

Urbanczik,R. and Wagner,C. (2005a) An improved algorithm for stoichiometric
network analysis: theory and applications. Bioinformatics, 21, 120371210.

Urbanczik,R. and Wagner,C. (2005b) Functional stoichiometric analysis of meta—
bolic networks. Bioinformatics, 21, 417(r4ISO.

Varma,A. et al. (1993) Stoichiometric interpretation of Escherichia coli glucose
catabolism under various oxygenation rates. Appl Environ. Microbiol, 59,
246572473.

Varma,A. and Palsson,B.0. (1994) Stoichiometric ﬂux balance models quantita—
tively predict growth and metabolic by—product secretion in wild—type
Escherichia coli W3110. Appl Environ. Microbiol, 60, 3724e373l.

Verwoerd,W.S. (2011) A new computational method to split large biochemical
networks into coherent subnets. BMC Syst. Biol, 5, 25.

 

1 578

/810's112um0fp10}x0'sopBLuJOJurorq”:duq

