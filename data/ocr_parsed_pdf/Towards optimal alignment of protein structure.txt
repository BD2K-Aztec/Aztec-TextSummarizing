ORIGINAL PAPER

Vol. 26 no. 18 2010, pages 2273-2280
doi: 1 0. 1 093/bioinformatics/btq420

 

Structural bioinformatics

Advance Access publication July 17, 2010

Towards optimal alignment of protein structure distance matrices

Inken Wohlers1’*, Francisco S. Domingues2 and Gunnar W. Klaulai‘
chl, Life Sciences Group, PO. Box 94079, 1090 GB Amsterdam, The Netherlands and 2Max—PIanck—Institut f r

Informatik, Campus E1 4, 66123 Saarbr cken, Germany
Associate Editor: Anna Tramontano

 

ABSTRACT

Motivation: Structural alignments of proteins are important for
identification of structural similarities, homology detection and
functional annotation. The structural alignment problem is well
studied and computationally difficult. Many different scoring
schemes for structural similarity as well as many algorithms for
finding high-scoring alignments have been proposed. Algorithms
using contact map overlap (CMO) as scoring function are currently
the only practical algorithms able to compute provably optimal
alignments.

Results: We propose a new mathematical model for the alignment
of inter-residue distance matrices, building upon previous work on
maximum CMO. Our model includes all elements needed to emulate
various scoring schemes for the alignment of protein distance
matrices. The algorithm that we use to compute alignments is
practical only for sparse distance matrices. Therefore, we propose
a more effective scoring function, which uses a distance threshold
and only positive structural scores. We show that even under
these restrictions our approach is in terms of alignment accuracy
competitive with state-of-the-art structural alignment algorithms,
whereas it additionally either proves the optimality of an alignment
or returns bounds on the optimal score. Our novel method is freely
available and constitutes an important promising step towards truly
provably optimal structural alignments of proteins.

Availability: An executable of our program PAUL is available at
http://planet-lisa.net/

Contact: |nken.Wohlers@cwi.nl

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on April 1, 2010; revised and accepted on July 12, 2010

1 INTRODUCTION
1.1 Background

Structural alignments are assignments of structurally equivalent
amino acids between proteins with many applications in structural
biology (Sierk and Kleywegt, 2004). Generally, the 3D structure of
a protein determines its function and is often more conserved during
evolution than protein sequence. Therefore, structural alignment is
especially useful to detect remotely homologous proteins with low
sequence identity. Structural alignment is also applied to identify

 

*To whom correspondence should be addressed.

common structural elements and new protein folds and is used
to cluster all known protein structures into groups. Furthermore,
structural similarities can be used for functional annotation (Yakunin
et (11., 2004).

Various scoring functions and algorithms have been proposed.
They can be divided into two categories: they are either based on
the root mean square deviation (RMSD) of the 3D coordinates
after optimal superposition of aligned residues or on matching
inter-residue distances imposed by aligned residues. Finding an
optimal assignment of amino acids is in both cases an NP-hard
problem (Lathrop, 1994), since coordinate and distance matrix
representation of a protein structure can be transformed into each
other in polynomial time (Havel et (11., 1983). Therefore, many
structural alignment algorithms use heuristics to ﬁnd alignments.
They conﬁne the search space, e.g. by considering fragments of
several residues or by applying hierarchical approaches that align
secondary structure elements (SSEs) in a ﬁrst step.

There are many different competitive approaches and techniques
for structural alignment, either utilizing 3D coordinate superposition
[MAX-PAIRS (Poleksic, 2009), PROTDEFORM (Rocha et al., 2009).
MATT (Menke et (11., 2008), CE (Shindyalov and Bourne, 1998),
STRUCTAL (Subbiah et al., 1993), FATCAT (Ye and Godzik, 2003),
SHEBA (Jung and Lee, 2000), C-ALPHA MATCH (CA) (Bachar et al.,
1993), PPM (Csaba et (11., 2008), TMALIGN (Zhang and Skolnick,
2005), LGA (Zemla, 2003) and RASH (Standley et (11., 2007)], or
inter-residue distances [DALI (Holm and Sander, 1993), MATRAS
(Kawabata, 2003), SSAP (Taylor and Orengo, 1989) and VOROLIGN
(Birzele et (11., 2007)]. Many of these algorithms are considerably
accurate when evaluated based on manually curated reference
alignments, and often they are quite fast. Nonetheless, they are
not capable to report whether the computed alignment is optimal
according to the corresponding scoring function. As a consequence,
there is no way to compare different scoring schemes for structural
alignment, because weak performance can be attributed either to the
scoring function that is maximized or to the algorithm that is used.

Some efforts to compute close to optimal structural alignments
exist. For alignments based on 3D coordinate superposition,
Kolodny and Linial (2004) give a polynomial-time algorithm for
ﬁnding an alignment whose score lies within 8 of the optimal score.
Although their algorithm runs in polynomial time, it is too expensive
to be used in practice. Poleksic (2009) suggests also a polynomial-
time s-approximation algorithm for a class of scoring ﬁinctions
based on 3D superposition, which works very well in practice.
Finding the optimal alignment, i.e. 8:0, however, is not practical
with any of the two approaches.

Exact structural alignment algorithms based on inter-residue
distance matrices have so far been limited to very basic

 

© The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org 2273

112 /3.to's[Bumo[p.IOJxosorwurJOJurorq”:duq wort popcolumoq

9103 ‘{g anﬁnv 110::

I. Wohlers et al.

 

scoring functions. There are, for example, algorithms that compute
optimal structural alignments by ﬁnding their maximum contact map
overlap (CMO) [(Caprara et (11., 2004), A_PURVA (Andonov et (11.,
2008), CMOS (Xie and Sahinidis, 2007)], as well as faster heuristics
for the same problem (Jain and Oberrnayer, 2009; Pelta et (11.,
2008). Furthermore, other exact algorithms determine a structural
alignment by identifying a maximum clique of similar inter-residue
distances (Malod-Dognin et (11., 2010; Strickland et (11., 2005).
These algorithms have been evaluated in terms of their capability
to compute alignments to optimality and to classify rather small
benchmark sets. Although optimality might be especially interesting
in the case of single-case high-quality alignment, the accuracy of
their alignments has not been benchmarked or compared.

1.2 Contribution

In this article, we give a general mathematical model for optimal
alignment of inter-residue distance matrices. Our model is based
on an integer linear programming (ILP) formulation of Caprara
et (11. (2004). We add structural scores, afﬁne gap costs, amino
acid substitution scores and a negative sequence penalty, similar
to Taylor and Orengo (1989), to the model. In this way, various
existing scoring functions can be emulated, e.g. those of SSAP,
MATRAS and DALI. While we can model these scoring schemes, the
current algorithm can handle only positive scores and is practical
only for sparse distance matrices. We speciﬁcally pinpoint the two
restrictions that currently prevent us from computing alignments
based on the original scoring ﬁinctions for complete distance
matrices. These are: (i) the too large number of pairs of inter-
residue distances, especially for long proteins; and (ii) the current
lack of effectively considering negative structural scores. Therefore,
we currently impose a distance threshold and use only positive
structural scores. Our method is implemented in a software tool
called PAUL. With a preliminary version of PAUL we showed, e.g.
that the use of structural scores generates better alignments than
the use of contact maps (Wohlers et (11., 2009). Now we develop
a general mathematical model and a comprehensive, improved
implementation, e.g. by integrating scoring schemes, gap costs,
ﬁltering and different types of inter-residue distances. We perform
an extensive parameter optimization in order to determine our
own customized scoring function. We do this for Ca, Cf; and all-
atom distances, where all-atom distances are the minimum distance
between any pair of atoms of two residues. We show that the
algorithm with our scoring scheme is competitive with state-of—the-
art structural alignment methods in terms of alignment accuracy.
Additionally, we are able to compute a provably optimal alignment
in about 25% of the cases. High accuracy and optimality or near-
optimality come at the price of a signiﬁcantly longer run-time
that is not competitive to that of heuristic methods. Therefore, the
main contribution of our approach is 2-fold. First, we provide a
very accurate algorithm with an interchangeable and customizable
scoring scheme for high-quality single-case pairwise alignment.
Second, we make an important step towards a general method
for optimal alignment of distance matrices using combinatorial
optimization, by formulating the corresponding ILP and pointing
out the current challenges. A general method that generates optimal
alignments will make it possible to evaluate and compare different
distance matrix-based scoring schemes for structural alignment and
help develop provably better scoring functions.

(a) (b)
IAFDA
LS-VP
‘ 2 i X 3 (c)

A V1
03909

(d) 6(lA,mA)
1A mA
l m
13 7713

L
V2 50377713)

Fig. 1. Maximum CMO problem. (a) Two protein contact maps. (b)
Alignment of the two proteins. (c) Corresponding solution in the graph
problem. Alignments are characterized by non-crossing matches, or traces, in
the complete bipartite alignment graph (V1 U V2,L) (Kececioglu, 1993). Here,
vertices in V1 and V2 denote the residues of the two proteins, respectively,
andL is the complete set ofalignment edges, i.e. L = {(i,j) | i e V1,je V2}. The
displayed trace (bold alignment edges) maximizes the CMO. in the example
there are three shared contacts (also shown in bold). (d) An aligned pair of
distances. Function 6(-, -) denotes the distance between two residues with
respect to their 3D coordinates.

2 APPROACH

2.1 Combinatorial approach to structural alignment

Our mathematical model and algorithm are based on Caprara et (11.
(2004). Caprara et (11. (2004) compute a pairwise alignment of two
protein structures that maximizes the number of common contacts.
Two residues are in contact if they are in some sort of chemical
interaction, e.g. by hydrogen bonding. The model uses a simple
distance criterion: whenever the distance between two residues is
below a predeﬁned distance threshold (1;, the residues are considered
to be in contact. Caprara et (11. (2004) have introduced the maximum
CMO problem of ﬁnding the maximum number of common contacts
in two proteins. They give an ILP formulation, which they propose
to solve using an elegant Lagrangian relaxation approach.

Their ILP formulation relies on a reformulation of the structural
alignment problem as a graph problem. Figure 1 explains the
relation. In their model, Caprara et (11. (2004) introduce two vectors
x and y of binary variables. They consist of variables x] for each
alignment edge 1 e L aligning two residues and variables ylm for each
potentially shared common contact maintained by the two alignment
edges 1 and m. The binary variables indicate the presence or absence
of the corresponding objects in the solution. The authors express
the set of feasible solutions using linear inequalities and integrality
constraints involving x and y and ﬁnd the largest set of common
contacts using the objective function maxzusmmcwlm. For the

detailed mathematical model refer to Caprara et (11. (2004).

To align inter-residue distance matrices, we change the
mathematical model of Caprara et (11. (2004) by replacing the rigid
contact deﬁnition and taking into account the 3D distances between
the residues. Let (1,m) be a pair of aligned distances of two proteins
A and B with 1=(1A,13) and m=(mA,mB), see also Figure 1d. By
using a distance measure 6(-,-) that denotes the distance between
two residues with respect to their 3D coordinates, we are now able
to align inter-residue distances instead of contacts. Therefore, we
replace the objective ﬁinction maxZ< I, m) 6(1) ylm by

max 2 wlmylm+S(x), (1)
(lam>e(§)

 

2274

112 /3.to's[Bumo[p.IOJxosorwurJOJurorq”:duq urorr papaolumoq

9103 ‘{g anﬁnv 110::

Towards optimal alignment of protein structure distance matrices

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

(b) H D L I R H K
1 2 3 4 5 6 7
0
N1
L2
K3
HD I RHK
T4 12 4567
H5 N1 K3
HDLIRHK T4
N—LKTH— H5 +A-’\

 

 

 

Fig. 2. Double DP. (3) Left, the upper-level DP matrix. Right, proﬁt
computation Via two lower-level DP matrices, demonstrated for the upper-
level DP cell that aligns residues 3 and 2. One proﬁt DP matrix aligns on
the left, the other on the right of alignment edge (3,2). Scores of lower-
level DP cells are given by Equation (2) and each coloured cell, and its
score corresponds to a pair of inter-residue distances that is realized in the
proﬁt computation. The score of an upper-level DP cell consists of this proﬁt
(computed Via the two lower level DPS) minus a sequence penalty 0. (b) An
alignment, denoted by black DP cells and black alignment edges, containing
two gaps with gap penalty g. Choices that have been made in the lower level
DPS during proﬁt computation do not agree with the upper-level DP and
are penalized by Lagrangian multipliers A. Steps (3) and (b) are repeated
iteratively.

while keeping the constraints unchanged. In Equation (1), S (x) is a
sequence score. The structural score wlm is determined by a ﬁinction
that assigns a value for aligning distance 6(1A,mA) with distance
6(13,m3). Inspired by the rigid similarity introduced by Holm and
Sander (1993) in their paper on DALI, we choose

_ max{0,6—Alm} AlmfA; (2)
Wm — 0 otherwise ,
with Aim = |6(1A,mA)—6(13,m3)|. Here, 6 and A; are constant
parameters.

As Caprara et (11. (2004), we use Lagrangian relaxation to
compute alignments, which leads to an iterative double dynamic
programming (DP) algorithm, see Figure 2. The algorithm can
handle only positive scores effectively; therefore, we have to restrict
wlm to be greater than zero. Pairs of inter-residue distances with a
score wlm smaller than or equal to zero can be omitted from the ILP.

The idea of Lagrangian relaxation is to relax constraints of an
intractable problem, e.g. the structural alignment ILP, such that the
relaxed problem can be solved efﬁciently. The relaxed constraints are
moved to the objective function, penalized by so-called Lagrangian
multipliers. The optimal solution of the original problem (i.e. the
top-scoring alignment) is also a solution of the relaxed problem,
and every optimal solution of the relaxed problem provides an upper
bound on the optimal score of the original problem. In general, a
solution of the relaxed problem is not a feasible structural alignment
(cf. Fig. 2b). Nonetheless, from a solution of the relaxed problem

a feasible structural alignment can be deduced, and the score of
this alignment provides a lower bound on the optimal score of the
original problem. The Lagrangian multipliers are adjusted iteratively
such that the upper bound decreases gradually, and we can deduce
better structural alignments and thus increase the lower bound on
the optimal score. If upper and lower bound coincide, an optimal
structural alignment has been found.

In each Lagrange iteration, we solve the relaxed problem for the
current Lagrangian multipliers using double DP (cf. Fig. 2). In a
ﬁrst step, the proﬁt of each alignment edge is computed (Fig. 2a,
right). Therefore, we determine the alignment of maximum score
of those residues that are within distance threshold (1; of the two
residues of the respective alignment edge. These are the lower level
dynamic programs, two for each pair of residues. In a second step,
an alignment of the proteins based on the given proﬁts is computed
(Fig. 2b). This is the upper-level dynamic program. The resulting DP
score is an upper bound. We generate a feasible structural alignment
by considering all pairs of inter-residue distances that are realized by
this alignment, the corresponding score constitutes a lower bound.
Analogous to contact map alignment, the time and space complexity
of one Lagrange iteration of our method is 0(E1E2), where E1 and
E2 are the numbers of considered distances in the two proteins,
respectively.

2.2 Interchangeable scoring

Any positive function that scores pairs of inter-residue distances
can be used to compute scores w in (1). Examples are the scoring
function used by SSAP or the non-negative portion of scoring
functions used by DALI or MATRAS.

The number of pairs of inter-residue distances is 
where 111 and 112 are the lengths of the sequences. This large
number currently cannot be treated explicitly even for medium-
sized proteins. Therefore, algorithms that align inter-residue distance
matrices resort to techniques such as aligning fragments of several
residues or hierarchical alignment. In our approach, we use a
distance threshold (1;; only distances smaller than the threshold
are used. We hereby omit long inter-residue distances that are less
signiﬁcant for structural similarity than short distances. Since our
scoring ﬁinction assigns only positive scores, we additionally try to
omit all pairs of inter-residue distances that are unlikely observed in
biologically correct alignments.

In our algorithm, we use scoring ﬁinction (2), which takes into
account that scores must be positive and that we use a distance
threshold. For the interpretation of parameters, see Supplementary
Material. We determine scoring function parameters for Ca, Cf;
and all-atom distances. Each type of inter-residue distance places
a slightly different focus on the alignment. An alignment of Co;
distances is based on similar protein backbone conformations, an
alignment based on Cf; distances takes into account side-chain
placement, and an alignment of all-atom distances highlights similar
residue interactions in the two proteins. Because of the different
nature and range of the three inter-residue distance types, we
determine individual scoring ﬁinction parameters.

We deﬁne our own scoring function that explores the
characteristics of our algorithm. To make a ﬁrst step towards aligning
general distance matrices, we additionally emulate the positive
portion of the scoring function used in the structural alignment
algorithm MATRAS (Kawabata, 2003). Analogous to sequence

 

2275

112 /3.ro's[Bumo[pJOJXO'sorquJOJurorqﬂ:duq uroii papeolumoq

9103 ‘{g isnﬁnv 110::

I. Wohlers et al.

 

substitution matrices, MATRAS uses log-odds value matrices M as
scores. A value M L;- jﬁlj j indicates the log-likelihood that distance
i is aligned to distance j. Matrices are determined for 20 different
sequence separations, i.e. number of residues in the sequence over
which the distance ranges. A positive log-likelihood for a given
sequence separation means that the corresponding distances are
aligned more likely than expected by chance. We investigate how
alignment accuracy and performance change when the distance
threshold is varied by computing alignments based on MATRAS
scoring.

2.3 Filtering

The most effective technique to improve performance and speed of
our algorithm is to keep the number of variables in our ILP low.
For each variable ylm, we store its score and adapt its Lagrangian
multiplier. For each alignment edge 1, we compute its proﬁt, which
has to be completely recomputed in each Lagrange iteration in which
at least one of the multipliers of outgoing pairs of distances has been
changed (cf. Fig. 2b). Accordingly, there are two ways of ﬁltering:
ﬁltering pairs of distances affects the lower-level dynamic program,
and ﬁltering alignment edges the upper-level dynamic program. If
we forbid an alignment edge 1 and, therefore, set its variable x] to
zero, we never have to compute its proﬁt, i.e. the two lower-level
dynamic programs.

We ﬁlter on both levels. On the upper level, we use secondary
structure information. Using DSSP (Kabsch and Sander, 1983), we
assign to each residue its secondary structure type. We determine
experimentally that we can safely forbid to align ot-helical residues
(DSSP state ‘H’) with ﬁ-sheet residues (DSSP state ‘E’). On the lower
level, we ﬁlter in three different ways. Here, we take advantage of
the non-negative scoring ﬁinction and omit all pairs of distances to
which a negative score would be assigned. We omit pairs of distances
from which at least one distance exceeds the distance threshold (1;
and distances that differ more than the distance difference threshold
A;. Additional to these ﬁlters, we use MATRAS log-odds values
(Kawabata, 2003) and omit all pairs of distances with a negative
log-likelihood.

2.4 Sequence scores and gap costs

Using only positive scores for pairs of distances leads to the problem
that even aligning structurally dissimilar regions will increase the
overall score. A poor global alignment can then yield a higher score
than a shorter alignment of structurally highly conserved regions. We
deal with this problem by using a global negative sequence penalty c
for aligning two residues. The sequence penalty serves as a threshold
on the structural score, i.e. on the proﬁt of an alignment edge. Only
if the proﬁt exceeds this threshold, the overall score increases when
the corresponding residues are aligned.

To obtain a general approach for the alignment of inter-residue
distance matrices, we incorporate afﬁne gap costs with gap open
penalty g and gap extension penalty 0.25 times g into the algorithm.
Practically, the gap costs simply have to be considered in the upper-
level dynamic program and we do this using the Gotoh algorithm
(Gotoh, 1982). Formally integrating gap costs into the ILP is more
involved, and we refer to Bauer et (11. (2007) for a comprehensive
analogous extension of the model in the context of RNA alignment.

An optional sequence score can be added to the structural score
of each alignment edge. This sequence score can be provided by

any external amino acid substitution matrix. A scaling factor can
be tuned in order to balance structural against sequence score. By
default, sequence scores are not used.

2.5 Implementation

We implemented the novel structural alignment algorithm as the
freely available package PAUL within the C++ software library
PLANET LISA (http://planet—lisa.net/). PAUL supports
different input formats, e.g. PDB ﬁles, lists of pre-selected distances
or complete distance matrices, as well as different types of inter-
residue distances, Ca, Cf; and all-atom. Furthermore, also scoring
function parameters, gap costs, amino acid substitution matrices and
the proportion of sequence to structural score can be chosen. The
use of secondary structure and log-odds for ﬁltering is optional. By
keeping the scoring adaptable, PAUL allows to incorporate additional
information about the input proteins and makes it a very ﬂexible
software tool. By default, PAUL uses the optimized scoring function
parameters reported in this article as well as SSE ﬁltering. If a
global alignment of two proteins is needed, we resort to TCOFFEE
(Notredame et (11., 2000). TCOFFEE computes a sequence-based
alignment for those residues for which no structural similarity could
be determined.

3 METHODS

3.1 Experimental setup for parameter setting,
optimization, and evaluation

To optimize parameters, we use a training set consisting of structure-based
alignments from the Homologous Structure Alignment Database (HOMSTRAD,
October 2008 release) (Mizuguchi at al., 1998). As these alignments are
manually curated by experts, we consider them as gold standard reference
alignments. From HOMSTRAD, we consider only those non-corrupt 302
protein families with exactly two members from the twilight or midnight
zone of sequence identities below 35%, where sequence identity denotes
the percentage of identically aligned residues in comparison to the total
number of aligned residues. We optimize the parameters on a training set of
200 alignments and evaluate them on a test set that consists of the remaining
102 alignments. We measure the quality of the results computed by structural
alignment algorithms in terms of the achieved alignment accuracy, which is
the number of correctly aligned residues divided by the number of aligned
residues in the reference alignment.

We conduct an extensive parameter sweep in order to determine robust
scoring function parameters that promote a high average alignment accuracy.
See Supplementary Material for details. For the best overall parameter
sets (d;,A;,6,c, g) for combinations of Ca, C5 or all-atom distances with
or without ﬁltering, we align the HOMSTRAD test set and compare PAUL
performance to DALI, a widely used state-of-the-art structural alignment
algorithm that is ranked very high in many benchmarks (Berbalk at al., 2009;
Mayr at al., 2007; Poleksic, 2009; Rocha at al., 2009). For this evaluation,
we use the 99 test set protein pairs for which DALI returns an alignment; this
subset we call the consolidated test set.

3.2 Evaluating alignment accuracy

We use the parameters optimized on the HOMSTRAD dataset to evaluate PAUL
on two distinct, more challenging datasets, SISY and RIPC (Berbalk at al.,
2009; Mayr et al., 2007) (http : //biwww. Che . sbg . ac . at/RSA/).
These sets contain alignments that are difﬁcult for various reasons and were
constructed to assess and compare the accuracy of structural alignment
algorithms and to investigate their limitations. We compare PAUL to the
state-of-the-art structural alignment programs DALI, MATRAS, MATT, SHEBA,

 

2276

112 /3.ro's[Bumo[pJOJXO'sorquJOJurorqﬂ:duq uroii papeolumoq

9103 ‘{g isnﬁnv 110::

Towards optimal alignment of protein structure distance matrices

 

FATCAT, CE and CA, which were benchmarked by Berbalk at al. (2009). The
SISY set is assembled from SISYPHUS (Andreeva at al., 2007), a manually
curated database for alignments of proteins with non-trivial relationships. It
consists of 130 very diverse reference alignments for which the lengths of the
protein chains and the number of aligned residues in the reference alignment
vary greatly. The RIPC set contains 23 reference alignments with focus on
functional residues and ﬂexible proteins. Following Berbalk at al. (2009),
we use their consolidated set of SISY and RIPC, which are the subsets for
which no structural alignment method in their study fails to produce a result.
They contain 98 and 22 alignments, respectively. Note that PAUL does not fail
even on the removed alignments (see also Section 5). Furthermore, two recent
structural alignment methods, PROTDEFORM (Rocha at al., 2009) and MAX-
PAIRS (Poleksic, 2009) have been evaluated on an older version of the SISY set,
which we name in the following SISY.V1. For SISY.V1, the consolidated set of
alignments for which no method fails comprises 106 protein pairs. In Rocha
et al. (2009) and Poleksic (2009), DALI, SSAP, MAX-PAIRS, PROTDEFORM,
MATRAS, MATT, PPM, LGA, VOROLIGN and RASH have been benchmarked on
SISY.V1. We evaluate PAUL on the consolidated SISY.V1 set and compare the
results.

For aligning proteins from SISY, SISY.V1 and RIPC, we use a maximum
run-time of 30 CPU minutes per alignment. Note that the actual run-time
in which we observe improvements depends strongly on the length of the
proteins and is usually much shorter (cf. Supplementary Fig. 3 and HOMSTRAD
results). Nonetheless, to prove optimality of a solution, a conservative and
rather deliberate update scheme for the Lagrangian multipliers (e.g. the one
of Caprara at al., 2004) is needed and thus a longer overall run-time.

4 RESULTS
4.1 Optimized scoring function and results on
HOMSTRAD

For PAUL_MATRAS, which uses positive MATRAS log-odds values
as structural score, a high distance threshold is beneﬁcial, for
Co; distances, d;=10A and for Cf; distances, d;=10.5A (see
Supplementary Table 4). Due to the high memory requirements,
we currently cannot evaluate higher distance thresholds. The
corresponding average alignment accuracy for Co; distances lies at
88.7% and for C ,3 distances at 88.9%. The respective average test
set accuracies are 91.1% for Co; and 90.4% for Cf; distances (cf.
Supplementary Table 5).

When optimizing the PAUL parameters of scoring function (2)
we ﬁnd that the average alignment accuracies on HOMSTRAD vary
only slightly for different parameter values (cf. Supplementary
Tables 1—3). Furthermore, the parameter values after optimization
are robust: slightly changed parameter settings still have comparable
average alignment accuracy. Using a secondary structure ﬁlter
always leads to higher accuracy. When a log-odds ﬁlter is used,
higher distance thresholds improve alignment accuracy. The best
cross-validation accuracy on the training set after solely optimizing
structural scores is 87.6% for Ca, 87.4% for Cf; and 87.8% for
all-atom distances (Supplementary Tables 1—3 list all values).

In a second stage, we ﬁx the best parameter set (d;, A; and 6)
for each combination of an inter-residue type (C 0;, C ,3 and all-atom)
with a ﬁlter type and optimize the parameters without inﬂuence
on structural scores, i.e. the sequence penalty c and the gap open
penalty g. The ﬁnal average alignment accuracies on the training
set are in the range 89.0—90.2% (cf. Supplementary Table 5). The
average alignment accuracies on the consolidated test set lie in the
range 90.8—91.3% and the median alignment accuracies in the range

 

(a)

 

 

1W

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

c> _ l - l
‘D ' l l
r: a : :
we: _ l .
a : i
.._.. , 3
,3 _._
v a a
R — 3
3 a
o o a a n

 

 

| | | | l I
PAUL DALI MATRAS MATT SIIEBA FATCAT CI: CA

 

(b)

‘00

 

 

 

 

 

 

 

 

 

60
I

 

 

 

 

 

 

 

 

 

 

 

 

20
I

 

 

 

 

 

 

 

D _ _._ _._ _._ _ _ _
| | | | | I
PAUL MATT DALI MAT Fins SHEBA FATC AT CA CE

 

Fig. 3. Box plots display median and quartiles of the distributions of
percentages of alignment accuracies for (a) the SISY set and (b) the RIPC
set for PAUL, DALI, MATRAS, MATT, SHEBA, FATCAT, CE and CA. Ordering
according to decreasing median. White lines denote average accuracies.

91.9—93.4%. DALI reaches on the consolidated test set an average
accuracy of 89.0% and a median accuracy of 91.0%.

We obtain the highest average training set alignment accuracy
of 90.2% for Cf; distances with SSE ﬁlter and a parameter set
(d;, A;,6, c,g)= (8.5, 7, 9.8, 19.6,23) (refer to Supplementary Figs 1
and 2 for a histogram of aligned Cf; distances and a visualization
of the scoring function, respectively). We use this setting for the
evaluation on the SISY set. This is also PAUL’s default scoring scheme.

4.2 Results for SISY

Figure 3a displays the accuracies of PAUL, DALI, MATRAS, MATT,
SHEBA, FATCAT, CE and CA. PAUL alignments reach with 95.9% the
highest median, but with 80.7% a slightly lower average alignment
accuracy than MATT and DALI. According to Wilcoxon signed rank
tests, PAUL matches the reference alignments signiﬁcantly better than
SHEBA, FATCAT, CE and CA (P < 10‘4). PAUL furthermore computed
>25% of alignments (26) to provable optimality. The correlation
between alignment accuracies of different methods lies mainly
between 0.5 and 0.6 and is thus generally low (cf. Supplementary
Fig. 5).

PAUL with traditional CMO as scoring function ((1; :75 A)
reached a median alignment accuracy of 88.5% and an average
alignment accuracy of 72.1%. Because rounding can be applied for
the decimal upper bound of the integer-value contact map overlap

 

2277

112 /3.ro's[Bumo[p.IOJxosorquJOJurorq”:duq uroii papeolumoq

9103 ‘{g isnﬁnv 110::

I. Wohlers et al.

 

score, even 48 of the alignments were computed to optimality, i.e.
almost 50%.

We also test the performance of PAUL_MATRAS, our algorithm with
emulated positive MATRAS scores. The results show that although
using only positive scores and applying a distance threshold,
PAUL_MATRAS achieves accuracies competitive with those achieved
by MATRAS (cf. Supplementary Fig. 4), but not as high as PAUL using
our customized scoring function. With Co; distances, PAUL_MATRAS
reaches a higher median but a lower average alignment accuracy
than MATRAS. PAUL_MATRAS with Cf; distances performs slightly
worse according to both median and average. The correlation
between PAUL_MATRAS and MATRAS alignment accuracies is not
particularly high (Pearson and Spearman’s correlations 0.67 and
0.73, respectively, for Co; distances; 0.66 and 0.72 for Cﬁ).
The correlation between PAUL_MATRAS with Co; distances and
PAUL_MATRAS with Cf; distances is in contrast very high (Pearson’s
correlation 0.91, Spearman’s correlation 0.87).

4.3 Results for SISY.V1

On SISY.V1, PROTDEFORM (Rocha et (11., 2009) and MAX-PAIRS
(Poleksic, 2009) have been evaluated and compared with DALI,
SSAP, MAX-PAIRS, PROTDEFORM, MATRAS, MATT, PPM, LGA, VOROLIGN
and RASH. For this dataset, PAUL alignments reach with 96.3% the
highest median alignment accuracy of all methods and, slightly
after MATT, with 82.4% the second highest average accuracy (for
MAX-PAIRS, we compare only to the version that is solely structural
and does not use BLOSUM62 substitution scores). The box plots
of alignment accuracies for each of the methods are provided in
Supplementary Figure 8. More than 30% (32) of the alignments
were computed to optimality. Many of the methods that have been
tested on this dataset perform very well and should be considered
competitive in terms of alignment accuracy. PAUL alignments match
the reference alignments signiﬁcantly better than LGA, VOROLIGN and
RASH alignments (P <10_4). The correlation between alignment
accuracies achieved by different methods is, as on SISY, generally
low (cf. Supplementary Fig. 9). Average run-times of the compared
structural alignment methods vary notably, between <1 s and 24s
(cf. Supplementary Table 6, which is taken from Rocha et (11., 2009).
PAUL tries to compute the alignments to optimality and is terminated
after 30 CPU minutes; nonetheless, often alignments do not change
any more after much shorter time spans of 1—2 min; this is visualized
in Supplementary Fig. 3.

4.4 RIPC set

PAUL reaches the highest average and median alignment accuracy of
all methods tested (DALI, MATRAS, MATT, SHEBA, FATCAT, CE and CA).
Box plots of alignment accuracies are given in Figure 3b. Four of
the 22 PAUL alignments were computed to optimality, but only 2 of
those 4 reach 100% alignment accuracy with respect to the reference
alignment (cf. Supplementary Table 7).

PAUL is furthermore unsuccessﬁil in four cases, generating
alignments with 0% alignment accuracy. All these problematic cases
correspond to pairs of proteins related by circular permutation
where the reference alignments also include extensive indels. This
result is expected as PAUL was not designed to account for circular
permutation. In general, the other tested methods also perform
poorly on these four pairs, with the exception of CA, which allows
for non-sequential alignments. There are ﬁve cases where PAUL

 

Fig. 4. An example from the RIPC dataset. The N-terminal domain of
glutathione synthetase from Escherichia coli on the left (dlgsaal) (Hara
at al., 1996), and from human on the right (d2hgsa1) (Polekhina at al.,
1999). ﬁ-strands are in blue, OL-helices in orange. The two proteins show
considerable structural variation and several indels are required to align them.
The sequence identity is 16%. The ﬁve positions matched in the reference
alignment are represented as ball-and-stick, the rigid body superposition
of their Cu atoms has an RMSD of 2.05 A. PAUL misaligns only one
position (marked with arrow), but the shift is only one residue in the
sequence. The proteins are Viewed in the same orientation as given by the
superposition according to the reference alignment. Image prepared with
Chimera (Pettersen at al., 2004).

performs better than most of the other methods in terms of alignment
accuracy (d1d5fa_/d1nd7a_, d1dlia1/d1mv8a1, d 1 l5ba_/d 1 l5ea_,
d1gsaa1/d2hgsa1 and d2bbma_/d4clna_). These cases correspond to
pairs of proteins with extensive structural variation resulting from
ﬂexibility or from divergent evolution, Supplementary Figures 10
and 11 provide two examples. In four of these cases PAUL alignments
have 100% accuracy, with FATCAT and MATRAS also generating high-
quality alignments. The ﬁfth case (d1gsaa1/d2hgsa1) corresponds
to two remote homologous proteins with considerable structural
variation where the PAUL alignment is 80% accurate, whereas other
methods achieve only 40% accuracy (cf. Fig. 4).

5 DISCUSSION AND CONCLUSION

The results on HOMSTRAD show that our algorithm performs well
with any type of inter-residue distance matrix, despite the qualitative
difference between Ca, Cf; and all-atom distances. On this test set,
it reaches a higher average and median alignment accuracy than
DALI with all types of inter-residue distances and any type of ﬁlter.
Furthermore, our optimized scoring function is robust against slight
parameter changes and always performs better than CMO scoring.
Introducing additionally sequence penalty and gap costs consistently
increases the alignment accuracy.

The SISY and RIPC sets give us ﬁirther insight into the alignments
produced by PAUL. When compared to reference alignments, the
alignment accuracy is very high and often better than that of
other state-of—the-art structural alignment methods. This good
performance of PAUL can be attributed to several factors. First, PAUL
always computes alignments on single-residue level (contrary to
fragments) and without using any hierarchical approach that might
introduce mistakes on the ﬁrst, broad level which cannot be corrected
later on. Second, structural alignment methods that are based on
intramolecular distances as in PAUL, are more adequate to compare
ﬂexible proteins or proteins with considerable structural variation

 

2278

112 /3.ro's[BumoIpJOJxosorquJOJurorq”:duq uroii papeolumoq

9103 ‘{g isnﬁnv 110::

Towards optimal alignment of protein structure distance matrices

 

than methods that rely on rigid body superposition. Twists have to
be introduced in the comparison of these types of proteins by rigid
body superposition methods in order to accommodate for structural
variation. DALI and MATT also perform well in these datasets as
they both take into account protein ﬂexibility in comparisons. DALI
relies on intramolecuar distances, and MATT is a superposition-
based method that allows for different relative orientation between
fragment pairs during alignment generation. When evaluating RIPC
results, one should be cautious, because the dataset is very small;
nonetheless, the results indicate that PAUL compares favourably to
other methods in protein pairs that are challenging for structural
comparison, in particular, when these proteins show considerable
structural variation or ﬂexibility.

Furthermore, in the SISY set, we ﬁnd that the accuracy of
PAUL_MATRAS alignments, which are computed based on positive
MATRAS scores and with a distance threshold, is competitive with
the accuracy obtained by MATRAS itself. This result indicates that
(i) scores for some pairs of inter-residue distances might be irrelevant
for a correct alignment and (ii) that we use a very accurate algorithm
to compute the structural alignment.

The SISY set also contains pairwise alignments with multiple
chains. These were excluded from our study because many
algorithms handle multiple chains differently or cannot handle them
at all. In PAUL, we add an option to concatenate several chains, which
is reasonable if they correspond to one biological unit. Using this
option, we are able to run PAUL also on the instances of multiple
chains and obtain alignments in very good agreement with the
reference alignments.

Looking closer at PAUL alignments, we ﬁnd that they still share a
characteristic with alignments that have been computed with CMO
scoring: the exclusively positive structural scores encourage to align
even remotely structurally similar regions. The alignments tend to
be longer and have higher RMSD than alignments of other structural
alignment methods (cf. Supplementary Fig. 6). On the other hand, a
high RMSD is expected when proteins are related by considerable
structural variation or ﬂexibility. In fact, RMSD does not tend to
correlate with alignment accuracy as measured by comparison to
reference alignments (cf. Supplementary Fig. 7). RMSD is a useﬁil
measure of structure similarity, but does not seem to be an adequate
indicator of alignment quality.

Our results give a partial answer to a question raised by Pelta et (11.
(2008): can the performance of DALI be achieved using strategies
based on contact maps? On the datasets of our study and with respect
to alignment accuracy, the answer is that an increased distance
threshold and a more sophisticated scoring ﬁinction is needed.
Protein structure classiﬁcation will beneﬁt from increased alignment
accuracy. For classiﬁcation, the scoring function can be adjusted to
obtain a better accuracy to speed ratio. Furthermore, integrating fast
heuristics such as Pelta et (11. (2008), and Jain and Oberrnayer (2009)
into exact algorithms can help to ﬁnd high-scoring alignments earlier
(even if prooﬁng optimality might still be time consuming), which
can render the approach competitive also in terms of speed.

We show that the current algorithm is, in terms of alignment
accuracy, competitive with state-of—the-art structural alignment
methods. High accuracy and optimality or near-optimality of
the computed alignment come at the price of a longer run-
time in comparison to heuristic methods. PAUL is, therefore,
not competitive with faster methods when performing extensive
structure comparison over a database. Instead PAUL should be

applied when there is a need for a high-quality pairwise structure
alignment, where a run-time of minutes is acceptable.

Our study demonstrates that using combinatorial optimization and
a sophisticated scoring function, we can compute very accurate and
in some cases optimal alignments. Although the current approach
works well, it is only a ﬁrst step towards a general ILP-based
approach for optimal structural alignment of complete protein inter-
residue distance matrices. On the way to such a generic method,
there are three major challenges. First, we have to compute more
alignments to optimality. Second, an algorithm has to be developed
that can effectively handle negative structural scores. Third, we need
to be able to handle more or even all pairs of inter-residue distances.

With a general method for the alignment of inter-residue distance
matrices, we could then align proteins using various scoring
schemes; for instance, those of the widely-used structural alignment
algorithms DALI, MATRAS and SSAP. Knowing always the top-scoring
alignment, we could objectively compare structural alignment
scoring schemes. Furthermore, these scoring schemes could be
veriﬁably improved, for example, by designing combinations of
different scoring functions.

ACKNOWLEDGEMENTS

The authors thank Lars Petzold for the implementation work on
PAUL and for helpful discussions and Ingolf Sommer for valuable
comments and initiation of the authors’ cooperation. MATRAS log-
odds matrices were kindly provided to us by Takeshi Kawabata and
the SISY set and its evaluation environment by Peter Lackner.

F unding: DFG grant KL 1390/2-1; Computational experiments were
sponsored by the NCF for the use of supercomputer facilities, with
ﬁnancial support from NWO.

Conﬂict of Interest: none declared.

REFERENCES

Andonov,R. et al. (2008) An efﬁcient Lagrangian relaxation for the contact map
overlap problem. In Proceedings of the 8th international workshop on Algorithms
in Bioinformatics. Vol. 5251 of Lecture Notes in Computer Science. Springer,
Berlin/Heidelberg, pp. 1627173.

Andreeva,A. et al. (2007) SISYPI—IUsistructural alignments for proteins with non-
trivial relationships. Nucleic Acids Res., 35(Database issue), 2537259.

Bachar,O. et al. (1993) A computer vision based technique for 3-D sequence-
independent structural comparison of proteins. Protein Eng, 6, 2797288.

Bauer,M. et al. (2007)Accurate multiple sequence-structure alignment of RNA
sequences using combinatorial optimization. BMC Bioinformatics, 8, 271.

Berbalk,C. et al. (2009) Accuracy analysis of multiple structure alignments. Protein
Sci., 18, 202772035.

Birzele,F. et al. (2007) Vorolignifast structural alignment using Voronoi contacts.
Bioinformatics, 23, 2057211.

Caprara,A. et al. (2004) 1001 optimal PDB structure alignments: integer programming
methods for ﬁnding the maximum contact map overlap. J. Comput. Biol., 11, 27752.

Csaba,G. et al. (2008) Protein structure alignment considering phenotypic plasticity.
Bioinformatics, 24, 987104.

Gotoh,O. (1982) An improved algorithm for matching biological sequences. J. Mol.
Biol., 162, 7057708.

Hara,T. et al. (1996) A pseudo-michaelis quaternary complex in the reverse reaction
of a ligase: structure of Escherichia coli B glutathione synthetase complexed with
ADP, glutathione, and sulfate at 2.0 A resolution. Biochemistry, 35, 11967711974.

Havel,T. et al. (1983) The theory and practice of distance geometry. Bull. Math. Biol.,
45, 6657720.

Holm,L. and Sander,C. (1993) Protein structure comparison by alignment of distance
matrices. J. Mol. Biol., 233, 1237138.

 

2279

112 /3.ro's[BumoIpJOJxosorieuIJOJurorq”:duq uroii papeolumoq

9103 ‘{g isnﬁnv 110::

I. Wohlers et al.

 

Jain,B.J. and Obermayer,K. (2009) Bimal: bipartite matching alignment for the contact
map overlap problem. In Proceedings of the International Joint Conference on
Neural Networks (IJCNN ’09), pp. 139441400.

Jung]. and Lee,B. (2000) Protein structure alignment using environmental proﬁles.
Protein Eng, 13, 5357543.

Kabsch,W. and Sander,C. (1983) Dictionary of protein secondary structure: pattern
recognition of hydrogen-bonded and geometrical features. Biopolymers, 22,
257772637.

Kawabata,T. (2003) MATRAS: a program for protein 3D structure comparison. Nucleic
Acids Res., 31, 336773369.

Kececioglu,J.D. (1993) The maximum weight trace problem in multiple sequence
alignment. In Proceedings of the Fourth Annual Symposium of Combinatorial
Pattern Matching (CPM 93). Vol. 684 of Lecture Notes in Computer Science.
Springer, pp. 1067119.

Kolodny,R. and Linial,N. (2004) Approximate protein structural alignment in
polynomial time. Proc. Natl Acad. Sci. USA, 101, 12201712206.

Lathrop,R.H. (1994) The protein threading problem with sequence amino acid
interaction preferences is NP—complete. Protein Eng, 7, 105971068.

Malod-Dognin,N. et al. (2010) Maximum cliques in protein structure comparison.
In Proceedings of the 9th International Symposium on Experimental Algorithms
(SEA‘IO), Vol. 6049 of Lecture Notes in Computer Science. Springer,
Berlin/Heidelberg, pp. 1067117.

Mayr,G et al. (2007) Comparative analysis of protein structure alignments. BMC Struct.
Biol., 7, 50.

Menke,M. et al. (2008) Matt: local ﬂexibility aids protein multiple structure alignment.
PLoS Comput. Biol., 4, e10.

Mizuguchi,K. et al. (1998) HOMSTRAD: a database of protein structure alignments
for homologous families. Protein Sci., 7, 246972471.

Notredame,C. et al. (2000) T-Coffee: a novel method for fast and accurate multiple
sequence alignment. J. Mol. Biol., 302, 2057217.

Pelta,D.A. et al. (2008) A simple and fast heuristic for protein structure comparison.
BMC Bioinformatics, 9, 161.

Pettersen,E.F. et al. (2004) UCSF Chimeraia visualization system for exploratory
research and analysis. J. Comput. Chem., 25, 160571612.

Polekhina,G et al. (1999) Molecular basis of glutathione synthetase deﬁciency and a
rare gene permutation event. EMBO J ., 18, 320443213.

Poleksic,A. (2009) Algorithms for optimal protein structure alignment. Bioinformatics,
25, 275172756.

Rocha,J. et al. (2009) Flexible structural protein alignment by a sequence of local
transformations. Bioinformatics, 25, 162571631.

Shindyalov,I.N. and Boume,P.E. (1998) Protein structure alignment by incremental
combinatorial extension (CE) of the optimal path. Protein Eng, 11, 7397747.
Sierk,M.L. and Kleywegt,G.J. (2004) Deja vu all over again: ﬁnding and analyzing

protein structure similarities. Structure, 12, 210372111.

Standley,D.M. et al. (2007) ASH structure alignment package: sensitivity and selectivity
in domain classiﬁcation. BM C Bioinformatics, 8, 116.

Strickland,D.M. et al. (2005) Optimal protein structure alignment using maximum
cliques. Open Res., 53, 389402.

Subbiah,S. et al. (1993) Structural similarity of DNA-binding domains of bacteriophage
repressors and the globin core. Curr Biol., 3, 1417148.

Taylor,W.R. and Orengo,C.A. (1989) Protein structure alignment. J. Mol. Biol., 208,
1722.

Wohlers,I. et al. (2009) Aligning protein structures using distance matrices and
combinatorial optimization. In Proceedings of the German Conference on
Bioinformatics (GCB ’09). Vol. P-157 of Lecture Notes in Informatics, pp. 3343.

Xie,W. and Sahinidis,N.V. (2007) A reduction-based exact algorithm for the contact
map overlap problem. J. Comput. Biol., 14, 637454.

Yakunin,A.F. et al. (2004) Structural proteomics: a tool for genome annotation. Curr
Opin. Chem. Biol., 8, 4248.

Ye,Y. and Godzik,A. (2003) Flexible structure alignment by chaining aligned fragment
pairs allowing twists. Bioinformatics, 19 (Suppl. 2), 24&255.

Zemla,A. (2003) LGA: a method for ﬁnding 3D similarities in protein structures. Nucleic
Acids Res., 31, 337073374.

Zhang,Y. and Skolnick,J. (2005) TM-align: a protein structure alignment algorithm
based on the TM-score. Nucleic Acids Res., 33, 230272309.

 

2280

112 /3.ro's[BumoprOJxosorieuIJOJurorqp:duq uroii papeolumoq

9103 ‘{g isnﬁnv 110::

