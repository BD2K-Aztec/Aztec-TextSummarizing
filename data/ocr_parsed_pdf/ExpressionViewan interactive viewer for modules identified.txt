Vol. 26 no. 16 2010, pages 2062-2063
APPS N O  doi:10. 1093/bioinformatics/btq334

 

Gene expression

Advance Access publication July 29, 2010

ExpressionView—an interactive viewer for modules identified in

gene expression data

Andreas L scherlal, G bor Cs rdi1’2’l, Aitana Morton de Lachapellelazl,
Zolt n Kutaliklaal, Bastian Peter“2 and Sven Bergmannlaai‘

1Swiss Institute of Bioinformatics and 2Department of Medical Genetics, University of Lausanne, Lausanne,

Switzerland
Associate Editor: Martin Bishop

 

ABSTRACT

Summary: ExpressionView is an R package that provides an
interactive graphical environment to explore transcription modules
identified in gene expression data. A sophisticated ordering algorithm
is used to present the modules with the expression in a visually
appealing layout that provides an intuitive summary of the results.
From this overview, the user can select individual modules and
access biologically relevant metadata associated with them.
Availability: http://www.uni|.ch/cbg/ExpressionView. Screenshots,
tutorials and sample data sets can be found on the ExpressionView
web site.

Contact: sven.bergmann@unil.ch

Received on February 2, 2010; revised on May 31, 2010; accepted
on June 21,2010

1 INTRODUCTION

Biclustering is an unsupervised data analysis method that is
frequently used to explore microarray data. Biclustering algorithms
process collections of expression proﬁles to identify groups of
genes co-expressed under some conditions (samples). We refer to
such groups as modules. While there is a multitude of biclustering
software available [for reviews and comparisons see (Ihmels and
Bergmann, 2004; Madeira and Oliveira, 2004; Prelic et (11., 2006)],
packages with intuitive interfaces that allow for an interactive
exploration of the results are sparse.

Existing approaches include Bivisu (Cheng et (11., 2007) and
BicOverlapper (Santamaria et (11., 2008). The former is an interactive
biclustering program that plots modules individually, making it
difﬁcult to identify the relationship between the overlapping
modules. The latter is a novel tool for plotting overlapping modules,
yet in an abstract space. Our approach in ExpressionView is
different, as we use the usual gene-sample space and visualize all
modules together, on top of the reordered expression matrix. The
reordering ensures that the genes and samples that appear in the
same module are kept together.

 

*To whom correspondence should be addressed.
lThe authors wish it to be known that. in their opinion. the ﬁrst four authors
should be regarded as joint First authors.

2 PACKAGE DESIGN AND WORKFLOW

With the ExpressionView package, bicluster analysis can be
separated into two parts. The ﬁrst part involves ﬁnding the modules
in the dataset with some algorithm, possibly running enrichment
analysis for the modules, and reordering the rows and columns of
the expression matrix according to the modules. This part is typically
done by a bioinformatician. The second part of the analysis involves
the visualization and interactive exploration of the results. This part
is typically done by researchers without extensive programming
knowledge.

The ﬁrst part of ExpressionView is written in GNU R
(R Development Core Team, 2009) and contains an implementation
of the matrix reordering algorithm. The second part is an interactive
visualization tool in the form of an Adobe Flash applet, for which
the user only needs a Flash-enabled web browser.

This dual implementation has the advantage that all the power of
the GNU R environment and the BioConductor (Gentleman et (11.,
2004) packages can be used for the analysis itself, e.g. all organisms
that are (and will be) supported by BioConductor are automatically
supported by ExpressionView. On the other hand, the exploration of
the results does not need any GNU R knowledge and in most cases
no extra software needs to be installed. See Figure l for a typical
ExpressionView workﬂow.

2.1 Reordering genes and conditions

ExpressionView is designed to work with gene expression data in the
form of a Bioconductor ExpressionSet. This class provides a user-
friendly way to access the actual gene expression matrix and its
associated metadata. ExpressionView can treat biclustering results
obtained by the Iterative Signature Algorithm (Bergmann et (11.,
2003; Csardi et (11., 2010) and any of the methods available in the
Biclust package (Kaiser and Leisch, 2008). Since the structure of
biclustering results is independent of the algorithm, an extension to
other methods is straightforward.

To present the collection of possibly overlapping modules in
a visually appealing form, it is necessary to reorder the rows
(conditions) and columns (genes) of the gene expression matrix in
such a way that biclusters form contiguous rectangles. Since it is in
general impossible to ﬁnd such an arrangement for more than two
mutually overlapping modules, we propose here an approximate
solution that optimizes the arrangement within the original data,
by maximizing the total area of the largest contiguous module
subsets. [An alternative would be to repeat rows and columns as

 

2062 © The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org

112 /3.Io's[BrunoprOJxosorwurJOJurorq”:duq 11101} pepeolumoq

9103 ‘{g anﬁnv 110::

Expression View

 

A  B

Bioconductor
E: pressionsm

ISA I h
Biclust find ' 3”“
 '

ISAModules t
Bicluﬁ clusters

Older da1a
t

slore distribule
I l

 

export Ex presslonVIaw irn port _
' dala liIe (KM L] i :- .:5 -
r};

 

Fig. 1. Workﬂow of ExpressionView, showing the two parts of the analysis. (A) These steps are performed by a bioinformatician. using GNU R. Starting

from gene expression data in the form of a Bioconductor ExpressionSet, the ﬁrst step is ﬁnding the modules. In a second step, the rows and columns of the
gene expression matrix are rearranged to produce an easily readable overview of the results. The last step consists of combining the gene expression data

and its associated metadata, possibly including results of enrichment analysis, with the results from the biclustering and produce an ExpressionView data ﬁle.
(B) This ﬁle can be distributed and ﬁnally explored with the interactive Flash applet by the end user. Please see the web site for details on the data ﬁle format.

necessary (Grothaus et (11., 2006), but for many modules this results
in a very large expression matrix.]

This optimization task is an interesting problem on its own,
which to the best of our knowledge has not been studied in the
literature. We brieﬂy outline our strategy here (see our web site
for details). The reordering of the rows is independent from that
of the columns, so the same optimization method can be applied
separately to rows and columns. For a given order of the elements
(either genes or conditions), we compute for each module 1' the size
of the largest contiguous sequence of elements (i.e. the maximal
number of neighboring elements Nimax). Then, as a measure of the
quality (Q) of the order, we sum this quantity over all modules
(Q=Zl~Nl-max). To optimize Q, an initial sequence is calculated
using hierarchical clustering. Two operations are then applied to this:
(i) permutations that exchange two elements within a module and
(ii) shifts of a sequence of multiple elements of the same module to
a different position. We use a greedy iterative scheme that performs
these operations at all possible positions and keeps the best new
sequence if it improves Q. The algorithm stops if after a given
number of operations no signiﬁcant improvement of Q is achieved.

We have studied a large number of perfectly orderable, but
initially scrambled, test cases. We ﬁnd that the proposed algorithm
ﬁnds an order that recovers >99% of the score of the optimal solution
and in most cases, it recovers the correct alignment. For random
samples, which are more representative for actual gene expression
data, the execution time increases polynomially with the number
of clusters m as (9(mo‘), where a e [1.6, 2], almost independently of
the number of elements 11. For a given number of clusters, we ﬁnd
(901“), with a 6 [25,27].

Once the optimal order is determined, the program rearranges
the gene expression matrix accordingly and exports all the relevant
information into an XML ﬁle, that can be placed on a web server or
distributed by email and then imported by the interactive viewer.

2.2 Visualization

A screenshot of the viewer is shown in Figure l. The interface
is divided in two parts: on the left-hand side, the user ﬁnds
the gene expression data in the common heat map form, on top

of which the modules are overlaid. On the right-hand side, the
metadata associated with the expression data and the results of the
enrichment calculations for GO (Ashbumer et (11., 2000) categories
and KEGG (Kanehisa et (11., 2004) pathways are shown. Wherever
possible, these elements are linked to the corresponding databases.
The interface essentially behaves as an image viewer, allowing the
user to zoom and pan around the expression data, getting instant
feedback on the selected item.

Funding: Swiss Institute of Bioinformatics, the Swiss National
Science Foundation (3100AO-l 16323/1); European Framework
Project 6 (through the EuroDia and AnEuploidy projects).

Conﬂict of Interest: none declared.

REFERENCES

Ashburner,M. et al. (2000) Gene ontology: tool for the uniﬁcation of biology. the gene
ontology consortium. Nat. Genet, 25, 25729.

Bergmann,S. et al. (2003) Iterative signature algorithm for the analysis of large-scale
gene expression data. Phys. Rev. E, 67, 031902.

Cheng,K. et al. (2007) BiVisu: software tool for bicluster detection and visualization.
Bioinformatics, 23, 234272344.

Csardi,G. etal. (2010) Modular analysis of gene expression data with R. Bioinformatics,
26, 137&1377.

Gentleman,R.C. et al. (2004) Bioconductor: open software development for
computational biology and bioinforrnatics. Genome Biol., 5, R80.

Grothaus,G et al. (2006) Automatic layout and visualization of biclusters. Algorithms
Mol. Biol., 1, 15.

Ihmels,J.H. and Bergmann,S. (2004) Challenges and prospects in the analysis of
large-scale gene expression data. Brief Bioinform., 5, 3137327.

Kaiser,S. and Leisch,F. (2008) A toolbox for bicluster analysis in R. In Brito,P. ed.
Compstat 2008-Proeeedings in Computational Statistics, University of Munich,
Physica, Heidelberg, Germany, pp. 2017208.

Kanehisa,M. et al. (2004) The kegg resource for deciphering the genome. NaeleieAeids
Res., 32 (Database issue), 2777280.

Madeira,S. and Oliveira,A. (2004) Biclustering algorithms for biological data analysis:
a survey. IEEE/ACM Trans. Compnt. Biol. Bioinform., 1, 2445.

Prelic,A. et al. (2006) A systematic comparison and evaluation of biclustering methods
for gene expression data. Bioinformatics, 22, 112271129.

R Development Core Team (2009) R: A Language and Environment for Statistical
Computing. R Foundation for Statistical Computing, Vienna, Austria. ISBN
3-900051-07-0.

Santamaria,R. et al. (2008) BicOverlapper: a tool for bicluster visualization.
Bioinformatics, 24, 121271213.

 

2063

112 /3.Io's[BumoprOJxosorwurJOJurorq”:duq urorj papeolumoq

9103 ‘{g isnﬁnv 110::

