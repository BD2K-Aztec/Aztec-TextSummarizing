Bioinformatics, 32(8), 2016, 1185—1194

doi: 10.1093/bioinformatics/btv712

Advance Access Publication Date: 7 December 2015
Original Paper

 

 

Systems biology

Extending gene ontology with gene
association networks

Jiajie Peng1'2, Tao Wang1, Jixuan Wang3, Yadong WangI'* and
Jin Chen2'4'*

1School of Computer Science and Technology, Harbin Institute of Technology, Harbin, China, 2Department of
Energy Plant Research Laboratory, Michigan State University, East Lansing, MI 48824, USA, 3School of Software,
Harbin Institute of Technology, Harbin, China and 4Department of Computer Science and Engineering, Michigan
State University, East Lansing, MI 48824, USA

*To whom correspondence should be addressed.
Associate Editor: Igor Jurisica

Received on 17 June 2015; revised on 30 October 2015; accepted on 26 November 2015

Abstract

Motivation: Gene ontology (G0) is a widely used resource to describe the attributes for gene
products. However, automatic GO maintenance remains to be difficult because of the complex lo—
gical reasoning and the need of biological knowledge that are not explicitly represented in the G0.
The existing studies either construct whole GO based on network data or only infer the relations
between existing GO terms. None is purposed to add new terms automatically to the existing GO.
Results: We proposed a new algorithm 'GOExtender’ to efficiently identify all the connected
gene pairs labeled by the same parent GO terms. GOExtender is used to predict new GO terms
with biological network data, and connect them to the existing GO. Evaluation tests on biological
process and cellular component categories of different GO releases showed that GOExtender can
extend new GO terms automatically based on the biological network. Furthermore, we applied
GOExtender to the recent release of GO and discovered new GO terms with strong support from
literature.

Availability and implementation: Software and supplementary document are available at
www.msu.edu/%7Ejinchen/GOExtender

Contact: jinchen@msu.edu or ydwang@hit.edu.cn

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 IntrOducuon Till September 2014, GO has represented a total of 41 775 terms

Gene ontology (GO) has been widely used to capture the functional in— and 4 185 487 gene annotations from more than 80 species (Gene
formation and attributes for gene products, such as predicting gene
functional associations (Gene Ontology Consortium, 2001; Vafaee
et (11., 2013), inferring gene functions in genome—wide association stud—
ies (Holmans et (11., 2009), predicting protein functions (Pandey et (11.,
2006; Radivojac et (11., 2013) and predicting subcellular localizations

(Lu and Hunter, 2005). GO consists of three independent categories:

Ontology Consortium, 2015). However, despite the rapid increase
of the GO content, the GO structure is still manually curated by
teams of domain experts of the participating databases (Gene
Ontology Consortium, 2015), regardless of continually growing and
improving requests for new ontological terms (Dietze et (11., 2014).
Manual construction of ontology, as a complex and time—con—

9103 ‘Og JSanV 110 seleﬁuv soc] ‘BtHJOJtIBQ 30 AJtsreAtuf] 112 /3.10'spzu.m0fp10}x0"sotJBurJOJutotq/ﬁduq 11101} popcolumoq

biological process, molecular function, and cellular component. In each
category, GO terms are organized in a directed acyclic graph (DAG) to
represent a complex hierarchy of biological events, functions or loca—
tions (Gene Ontology Consortium, 2000; Skunca et (11., 2012).

suming process, has encountered a series of problems that are
becoming increasingly difficult to solve (Dietze et (11., 2014;
Dutkowski et (11., 2013; Gligorijevié et (11., 2014). First, given the
large volume of biological papers published in every year, it has

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 1185

1186

J.Peng et aI.

 

been difficult to maintain consistency in how literature and domain
expertise can be translated to terms and relationships in GO even
with stringent curation standards (Dutkowski et (11., 2013). Second,
although knowledge can be effectively retrieved from the literature
using advanced text—mining tools, the gap between biological know—
ledge and new GO terms and relationships still has not been met
(Gligorijevié et (11., 2014). Finally, there has been a strong bias in
coverage within GO toward well—studied processes, resulting in the
lack of coverage problem (Kramer et (11., 2014).

During the last decade, tools have been developed to define new
ontology terms and to discover new relationships between existing
GO terms using natural language processing, graph mining, and
data integration methods (Cimiano and Volker, 2005; Drymonas
et (11., 2010; Gherasim et (11., 2013; Jaimes and Smith, 2003; Savova
et (11., 2003; Wong et (11., 2012). These tools aim to facilitate the ef—
fective expansion of GO while ensuring validity, uniqueness and
proper relationships to the existing GO. However, automatic GO
maintenance remains to be a difficult task because of the complex
logical reasoning and the need of biological knowledge that are not
explicitly represented in the GO (Gene Ontology Consortium,
2001). Furthermore, the complicated GO structure, which allows
for multiple ancestors and multiple descendants for new GO terms,
increase the level of difficulty for GO update. For example, statistics
shows that, in the 1980 new biological process terms that have been
added to the GO between 2008 and 2013, 992 new terms share at
least 25% gene annotations with the existing terms (without gene
annotation prorogation), indicating that it is necessary to fully con—
sider the complex multiparent relationships when adding new terms
to the GO.

In this article, we present a new algorithm called GOExtender to
automatically identify new GO terms from the existing biological
network data, annotate the new GO term with new genes, and con—
nect them to the existing GO structure. Comparing to the existing
approaches, GOExtender has the following advantages:

' To the best of our knowledge, GOExtender is the ﬁrst approach
to automatically add new terms to the existing GO, rather than
generating a new GO structure;

' A novel edge—based clustering method is developed to effectively
connect new GO terms with multiple parent terms;

' Experiments on both biological process and cellular component
show that GOExtender is able to identify novel GO terms from
biological networks;

' Applying GOExtender to recent release of GO has discovered
new GO terms with solid supports from literature.

We expect that applying GOExtender on the newest version of
GO can help curators rapidly generate new terms and connect them
to the GO structure, to fill the gap between massive biological data
and the biological knowledge represented in GO.

2 Background

Tools to define new ontology terms and to discover relationships be—
tween them can be classified into three categories.

First, text mining methods that can handle the natural ambiguity
and subjectivity of natural language have been adopted to construct
new ontologies. For instance, a semiautomatic text—based approach
has been proposed to construct multimedia ontologies based on the
textual data available in video collection, which successfully dis—
covers relationships between terms manually selected by users
(Jaimes and Smith, 2003). However, it is difficult to apply these

methods to directly identify new GO terms and connect them to the
existing GO terms, because GO terms appear in textual data with a
low frequency (Shah et (11., 2012).

Next, algorithms have been presented to synthesize data—driven
ontologies by incorporating both extant terms and the connections
between genes in biological networks. DDOnt automatically recon—
nects the existing GO terms based on a biological network, which
brings new insights into sets of genes across microarray experiments
(Costello et (11., 2009). In parallel, a data integration method has
been presented to add new relationships to connect the existing GO
terms using biological networks (Gligorijevié et (11., 2014). These al—
gorithms indicate that biological networks, such as YeastNet (Kim
et (11., 2014) and AraNet (Lee et (11., 2010), are critical for novel sys—
tems biology applications (Costello et (11., 2009; Kim et (11., 2014;
Lee et (11., 2010).

Finally, algorithm NEXO has been developed to construct high—
quality ontological structure directly from biological networks
(Dutkowski et (11., 2013, 2014). The ontology inferred from the
large networks of gene and protein interactions in yeast shows that
its coverage and power are equivalent to those of the manually cura—
ted GO. Again, NEXO indicates that biological networks are valid
complementary resources of the GO (Dutkowski et (11., 2013).
However, to the best of our knowledge, neither NEXO nor the other
existing algorithms can add new terms to the existing GO.

In order to automatically add new terms to the existing GO, sev—
eral existing tools can be utilized. First, hierarchical graph clustering
algorithms such as HAC (Park and Bader, 2011) identify graph clus—
ters that represent ‘communities’ in the graph. Specifically, given a
gene network, HAC builds a binary dendrogram, in which each leaf
node represents a gene and a non—leaf node represents a gene cluster
that includes all its descendant leaf nodes. We can extend the GO by
running HAC on every GO term to extend. However, it is technic—
ally difficult to manually specify appropriate dendrogram thresholds
for all the network clustering results. Second, we can extend the cur—
rent GO by applying NEXO on every GO term to extend
(Dutkowski et (11., 2013). On each run of NEXO, a DAG will be
generated, in which each non—leaf node represents a new term. We
can further predict new terms with multiple parents by merging the
identical terms predicted under different parent terms. While the
aforementioned methods are optimized to identify new terms with
single parent term, we can use the concept of gene overlap for
multiparent GO term extension. The idea of GeneOverlap is to iden—
tify the overlapped gene sets among multiple GO terms, where the
significantly overlapped gene sets are considered as new terms. For
example, given two existing GO terms in and 172 containing genes
{A, B, C, D, E} and {C, D, E, F, G}, respectively, a new term contain—
ing genes {C, D, E} is predicted as the common child term of 171 and
172. A clear disadvantage of GeneOverlap is that it cannot utilize bio—
logical networks, which have already been proven to be valid com—
plementary resources of the GO. In the Result section, we compare
the performance of all these methods.

3 Methods

We propose a novel algorithm called GOExtender to predict new
GO terms and then add them to the existing GO structure. To
achieve the goal, GOExtender consists of four steps. First, it selects
candidate parent terms from all GO terms, saved in T. Second, it
constructs an edge based matrix M using T and biological network
G. Third, all the connected maximal submatrices MC will be identi—
fied with a novel matrix partitioning method. Finally, it predicts

91oz ‘Og JSanV 110 seleﬁuv soc] ‘BtHJOJtIBQ 30 AJtsreAtuf] 112 /3.10'spzu.m0fp10}x0"sotJBurJOJutotq/ﬁduq 11101} popcolumoq

 

 

 

 

 

 

 

 

 

 

 

Extending gene ontology with gene association networks 1187
Gene Biological A}, .939, L, 09,09.
ontology network "it .939? r- 1 I.
1, Deals. 1 o 0
.95.97 1 ‘I D
D 1 1.
. . B o 1 1
Identify the candidate parent terms based on GO 0 U ,
and biological network, saved in T o n T

 

I

Generate an edge based matrix M using T
and biological network (3

I

Identify all the connected maximal submatrices
(Me) of M by a hierarchical partitioning method

 

 

 

 

 

u

 

Adopt a graph clustering algorithm to predict new
(30 terms from ME

 

 

 

Fig. 1. The workflow of GOExtender. First, candidate parent terms T are se-
lected. Second, an edge based matrix M is generated using biological net-
work G and T. Third, all the connected maximal submatrices of M are
identified and are saved in M5. Finally, new GO terms are predicted from ME
by adopting a graph clustering algorithm

new GO terms from ME by adopting a graph clustering algorithm.
The diagram of the whole process is shown in Fig. 1.

3.1 Identifying candidate parent terms

In order to effectively reduce the search space for finding new GO
terms, we identify all the extendable terms t based on the GO struc—
ture, gene annotations and biological networks by checking two
conditions: (i) after gene annotation propagation, whether there is a
high amount of genes in the input network annotated to t but not to
the dependents of t and (ii) whether the level of the term t in the GO
is appropriate. Given a GO and a biological network, the candidate
parent term is defined as:

Definition 1. Candidate Parent Term. A GO term t is a candidate
parent term if and only if the number of annotated genes of t but not
to its dependents is greater than p1, the number of descendants of t
is greater than 172, and none of the descendants of t is a candidate
parent term.

In Definition 1, p1 and 172 are user given thresholds, which pre—
vent from generating trivial terms. The definition also eliminates the
parent—child relationships between candidate parent terms, making
the GO term prediction problem more practical. Note that although
the GO structure is constant, both the gene annotations and the bio—
logical network are specific for each genome. Therefore, the candi—
date parent terms are genome dependent.

To identify all the candidate parent terms, we start by checking all
the leaf terms and then recursively check all the parental terms of t. If
a term t is qualified, we output t and skip all its ancestor terms, be—
cause according to the definition, none of t’s ancestors can be a candi—
date parent term. All the candidate parent terms are saved in T.

3.2 Constructing edge—based binary matrix
Given all the candidate parent terms, the most straightforward ap—
proach to adding putative new terms for each candidate parent term

 

 

 

 

 

 

   

Fig. 2. An illustrative example to generate the edge based matrix M. First, an
gene pair list (C) is generated based on the list of candidate parent terms and
the annotation genes (A) and the gene association network (B). Second, an
edge-based binary matrix M (D) is constructed, in which rows and columns
represent gene pairs (C) and candidate parent terms (A), respectively. M(i, j)
is one or zero, meaning whether the gene pair at the ith row is annotated to
the candidate parent term at jth column or not

t is to scan the biological network with the existing term discovery
approaches, such as NEXO (Dutkowski et (11., 2013). The rationale
is that if the genes annotated to t can form a group of graph clusters
in the input biological network, and then each gene cluster may rep—
resent a new GO term (Dutkowski et (11., 2013). However, this ap—
proach can only discover new terms for each individual candidate
parent term. A comparison between the GO biological process terms
in 2008 and 2013 shows that more than 71% of the new terms have
multiple parent terms, indicating that simultaneously considering all
the candidate parent terms is required.

In this article, we integrate the information contained in all candi—
date parent terms T and the gene cofunction network G by construct—
ing the edge—based binary matrix M. The procedure is shown in Fig.
2. Mathematically, each column of M is a candidate parent term t;
and each row is a pair of genes that are annotated to the same candi—
date parent term and are connected in the gene co—function network
G. A cell M(i, /) is 1 if the corresponding genes in the 1th row are both
annotated to the candidate parent term in the jth column and are con—
nected in the co—function network, otherwise M(i, /) is 0.

In an illustrative example, given three candidate parent terms t1,
t2 and t3, and a biological network G (Fig. 2A and B), we first label
all the gene pairs that satisfy two conditions: (i) both genes are anno—
tated to the same candidate parent term and (ii) the corresponding
edge of the gene pair is in G (Fig. 2C). And then, we construct an
edge—based binary matrix M, such that each row in M is a gene pair,
each column is a candidate parent term, and each cell is one or zero,
meaning whether a gene pair is annotated to its corresponding can—
didate parent term (Fig. 2D).

3.3 Mining connected maximal submatrices

To predict new GO terms that may have multiple parent terms, we
identify subsets of M, where each subset consists of a subgraph of
G, in which all genes are annotated by the same candidate parent
terms. This problem is equivalent to mining from M the submatrices
with all values being 1 and the gene pairs (rows) are connected in
the given biological network G.

To efficiently solve the problem, we first define Connected
Maximal Submatrix in Definition 2, and then describe a new hier—
archical partitioning approach based on D—Miner (Besson et (11.,
2004; Ji et (11., 2006).

Definition 2. Connected Maximal Submatrix. Let M(E, T) be a bin—
ary matrix with  rows and IT) columns, where E is a set of edges,
and T is a set of terms. We have matrix M(Es, Ts) be the connected

9103 ‘Org JSanV uo soroﬁuv soc] ‘BtHJOJtIBQ JO AJtsroAtuf] 112 /3.10'speumofp1q1xo"sotJBurJOJutotq/ﬁduq 11101} popcorn/nag

1188

J.Peng et al.

 

maximal submatrix of M(E, T), if and only if all the four conditions
are satisfied:

Vei E E37Vti E Ts, Mew]. : 1, and

Ve, E E/ E5, there exists t,- 6 T5 such that Mm, : 0, and
Vt,- E T/ T5, there exists e,- E E5 such that Mm, : 0, and
Edge set E5 forms a connected graph.

:E‘P‘Pt‘

In Definition 2, requiring for connected submatrices prevents
generating numerous disconnected subgraphs thus improves the effi—
ciency of the algorithm. And identifying the maximal submatrices
ensures to find all the gene annotations for the new GO terms.

 

Algorithm 1. Mining connected maximal submatrices

 

1: procedure SUBMATRIXMINING
Input:

M: edge—based binary matrix

G: biological network

173: threshold of the minimum number of genes
Output:

0: a set of connected maximal submatrices

2: H <— getCutter(M); O <— 0; enqueue(ML, M)

3: While do ML 9E Q)

4: Mx <— dequeue(ML)

5: hmax <— NULL; Max <— 0

6: for all cutter h E H do

7: n <— number of genes in Mx cut by h

8: if n > Max then

9: hmax <— h; Max <— n

10: end if

11: end for

12: M), M, <— split(Mx, hmax) D split Mx using cutter
hmax

13: MS <— split(M[) D split M, by checking graph
connectivity

14: MS <— MSUsplit(M,) D split M, by checking
graph connectivity

15: for all My 6 MS do

16: if number of genes in My < 173 then

17: skip My

18: end if

19: if M3V is all—”1” submatrix then

20: O <— O U {My}

21: else

22: enqueue(ML, My)

23: end if

24: end for

25: end while
26: end procedure

 

We develop an efficient algorithm to quickly identify all the con—
nected maximal submatrices. The process begins with the edge—
based binary matrix M, and then it iteratively splits the current ma—
trix into multiple submatrices by reducing the number of cells valued
0 row—by—row or column—by—column while keeping the edges in a
submatrix forming a connected graph. The partitioning process will
stop if one of the following stopping criteria is satisfied: (i) all 05 are
removed from all submatrices; (ii) the number of genes containing in
a submatrix is smaller than a user—given threshold 173. The process to
reduce the number of cells valued 0 is to split the input matrix by

using a cutter h, where h is a set of all—‘0’ rows and columns in M,
such that the input matrix is split into a left (right) submatrix, when
rows (columns) containing ‘0’ are removed (Besson et al., 2004; Ji
et al., 2006). Specifically, our matrix partitioning process has the
following three steps:

1. In the initiation step, we generate a set of cutters H for the edge—
based binary matrix M. We add M to matrix set ML (line 2 in
Algorithm 1).

2. For each matrix Mx in ML, we remove it from ML and split it
with the cutter with the highest amount of valid genes in H. In
the matrix splitting process, we adopt the left cutting constraint
to avoid submatrix duplication (Besson et al., 2005) (lines 4—12
in Algorithm 1).

3. The resulting matrices of the previous step are further split using
graph connectivity. If a matrix contains less than 173 genes, it will
be deleted. If it is all—‘1’ submatrix, it will be outputted, other—
wise it will be added back to ML (lines 13—24 in Algorithm 1 ).

We repeat steps 2 and 3 until ML is empty (lines 3—25 in
Algorithm 1). Finally, all the connected maximal submatrices of the
input matrix M are identified. The second step ensures that we can
obtain all—‘1’ submatrices as soon as possible and therefore effi—
ciently decrease the height of the hierarchical partitioning tree.

The purpose of adopting the left cutting constraint is that when
generating the right child submatrix m,(E,,T,) of Mx, we must
check that V(X, Y) E H L, Y O T, 9E (25, where H L is the set of cutters
associated with the left branches of the path from the root (initial
matrix M) to m,.

An illustrative example is shown in Fig. 3. Based on the number
of genes, the sorted cutter set H is {(g3g5,g4g5,g6g7)(t1t2),
(g1g2,g1g3)(t2, t3), (g3g4)(t1)}. In the first iteration, we split m1 into
m2 and m3. By checking graph connectivity, m3 is further split into
m4 and m5, but m 5 is removed since its size is smaller than 173
(p3 : 3). In the end of the first iteration, ML : {m2, m4}. In the se—
cond iteration, we select the most efficient cutter (g1g2, g1g3)(t3). m6
is pruned because its size is smaller than threshold 173. m8 is outputted,
and ML :  After the last iteration, ML is empty and we suc—
cessfully discover three all—‘1’ submatrices from m1, i.e. m8, m9 and
M10.

The example shows that our approach can not only identify
genes that are connected in the biological network, which may lead
to new GO term discovery, but also identifies multiple common can—
didate parent terms.

3.4 Predicting new terms and new term relationships
According to Definition 2, each connected maximal submatrix
M(E5, T5) represents a subgraph G5(V5, E5), where V5 is the set of
genes in E5. Hence, predicting new terms from M(E5, T5) is equiva—
lent to identifying communities in G5, such that a community is con—
sidered as a predicted term, and the genes in the community are all
annotated to the predicted term. To achieve the goal, we adopt
HAC (Park and Bader, 2011), a hierarchical graph clustering algo—
rithm, because HAC outperforms traditional hierarchical graph
clustering algorithms in ontology term prediction (Eisen et al., 1998;
Dutkowski et al., 2013; Girvan and Newman, 2002; Zhang and
Horvath, 2005).

HAC generates a binary dendrogram for each connected max—
imal submatrix M(E5, T5), in which the leaf nodes and the non—leaf
nodes represent gene sets and the joining of gene sets in G5, respect—
ively (Park and Bader, 2011). For community detection, we need to
specify a threshold to cut the dendrogram. However, given the

9103 ‘Org JSanV uo soroﬁuv soc] ‘BtHJOJtIBQ JO AJtsroAtuf] 112 /3.10'speumofp1q1xo"sotJBurJOJutotq/ﬁduq 11101} pQPBOIIIAAOG

Extending gene ontology with gene association networks

1189

 

  
  

     
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

    

I'Th
H:
mags-8485.363731th
lasagna}th
[8:851th
(eagsstgsasgriltnbi  
m2 m3
Check connectivity
"'2
.'i n I
_1 J Checkconnactivity
_:1_.I 1 m. m ‘3‘ 1;
(9192,9193)be  _3_ tr”: ‘1.“
ma  .t. ,L' 'G‘
-i-‘-—-'-.' ‘o “v-31
. . ' \
Checkcannechwtr // \{g‘gzansﬁtmtsi
m7 ‘
1 E
I
.. . o
[93mmi____.......--"" \

 

[1
1
1

 

 

 

 

 

 

 

 

Fig. 3. An illustrative example for the process of mining the connected max-
imal submatrices. mX represents a matrix. HX is the set of sorted cutters for
matrix my HX is decreasing sorted based on the size of genes involved in the
rows of mX. m5 and me are pruned as its size is smaller than the given thresh-
old. mg, mg and mm are the connected maximal submatrices of given m1

numerous amount of submatrices, it is impossible to manually deter—
mine the dendrogram threshold for every submatrix. Besides, these
submatrices are highly overlapped, which may lead to redundant
new GO terms. To solve both problems, we propose a new method
to simultaneously identify nearly identical communities from the
highly overlapped connected maximal submatrices. The rationale is
that the dendrogram thresholds should be carefully chosen to maxi—
mize the agreement on gene grouping among all the highly over—
lapped submatrices.

Our approach has three steps. First, we identify the highly over—
lapped submatrices by computing the submatrix overlap rate:

IViﬂViI

Overlap(M(E,-, Ti)7 M(EI'7  Z 
1 7 I

where Overlap(.) is the overlap rate, M(E,-,Ti) and M(E,-,Ti) are
two connected maximal submatrices, V,- and  are the gene sets in
E,- and E,-, respectively. Based on the overlap rates, the highly over—
lapped submatrices are then identified using a clustering method
(Gordon, 1999).

Second, given a group of highly overlapped connected maximal
submatrices labeled as {M1,M2, . . . ,Mn}, we assign a length—n bin—
ary vector  for each gene g, where each element in  is ‘1’
or ‘0’ representing whether g exists in the corresponding submatrix.
To identify (nearly) identical communities from all the submatrices,

we cut the dendrograms such that the highly overlapped genes are
grouped into the same community.

Given a dendrogram cutoff cut, a submatrix can be separated
into a serial of communities C : {c1,c2,  ,cm}. The variance of

community c,- is defined as:

Z CosineDist(1l_/I(g),z‘lverage(1l_/I))2

7 Eat

 

Variance(c,-) — ‘6" (2)
where Average(M) : M ) / Icil. The cosine distance between

. . 8’63 .
two vectors, CosmeDzs(u, 11), Is:

it
E “ii/i
i:1

CosineDist(u,1/) : 1 — — (3)

where 14,, and 11,, are the xth elements in vector u and 11, respectively.

Finally, for the dendrogram cutoff cut, the variance of all the
communities C is defined as the averaged variance on all the com—
munities in C, i.e.

Z Variance(c,-)

Variance(C) : '71— (4)
m

Given all the dendrograms of a group of highly overlapped max—
imal connected submatrices, we select the best cutoffs by minimizing
the variance calculated with Equation 4. In case that there are no
highly overlapped submatrices, we use edge density as the criteria
for community detection. Edge density of a gene group X is defined
as NE(X)/NP(X), where NE(X) is the number of edges between

any two genes in X in a biological network G and NP(X) : (If)

(Dutkowski et al., 2013). Note that, among all the (nearly) identical
communizes in the highly overlapped submatrices, we only retain
the one with the highest number of parent terms.

4 Results

4.1 Data preparation

Four versions of GO data (Jan 2007, Jan 2009, Jan 2011 and Jan
2013) were downloaded from www.geneontology.org. For the biolo—
gical network, we reused the gene association network in NEXO
(Dutkowski et al., 2013) (http://www.nature.com/nbt/journal/v31/n1/
extref/nbt.2463—S6.xlsx), which integrated four yeast networks from
the public databases, i.e. physical protein—protein interactions—
BioGRID (Stark et al., 201 1), genetic interactions—DRYGIN database
(Costanzo et al., 2010), co—expression relationships—Stanford
Microarray Database (Hubble et al., 2009) and the integrated func—
tional network—YeastNET (Lee et al., 2007). GOExtender was imple—
mented with Java SDK 7 and the JUNG library (OMadadhain et al.,
2005

4.2 Performance evaluation criteria

We develop a procedure to evaluate the performance of
GOExtender on multiple versions of GO and compare it with four
existing GO term prediction methods. In this procedure, given
each candidate parent term, we identify all its leaf terms having at
least 173 genes, where 173 is a user—specified parameter, and add
them to the gold—standard term set. All the gold—standard terms are
hidden from the GO extension algorithms for performance
evaluation.

9103 05 JSanV uo sopﬁuv soc] ‘BIIIJOJIIBD JO AJtsroAtuf] 112 /310's1cu1noip101x0"sotJBurJOJutotq/ﬁduq 11101} popco1umoq

1190

J.Peng et al.

 

Given a predicted term tp E T}, and a gold—standard term tg E Tg
that have the same parent(s), and the corresponding annotation gene
sets G1, and Gg, if more than half of the genes in G1, are included in
Gg, we say tp is matchable to tp. All the predicted terms matchable
to tg are saved in Tpg and all the corresponding gene annotations are
saved in Gpg. For measuring the gene set overlap rate between Tpg
and tg, we use the weighted Jaccard Index (Tan et al., 2006):

1 IGpgﬂ GgI

accardG ,G : x—
] (1* 9 ITng legUGgl

 

(5)

Let T5,, be the set of matchable terms in T1, (Tap g T1,). In
Equation 5, traditional Jaccard score is weighted by 1 /ITng. A large
size of T1,g leads to a small value of Jaccard score. To compute the
gene set overlap rate between T1, and Tg, we define the correct pre—
diction rate (CPR) as:

Z ]accard(Gpg,Gg)
ITCPI X thTg

lTpl ITgl

 

CPR(Tp,Tg) : (6)
Similar to the definition of CPR, the predicted gold—standard
term rate (CGR) is also defined as follows.
(G 0G 1
IithEItp E Tram > 0-5}I

7
ngl ‘ )

CGR(Tg, T1,) :
where G1, is the gene set corresponding to t,,. A gold—standard term
is considered to be correctly predicted if and only if there exists a
predicted term with its Jaccard score between the gold—standard
term and the predicted term greater than 0.5. Similar to the F—meas—
ure (Powers and Martin, 2011), the overall performance evaluation
score F1 is defined as:

CPR - CGR

F1:2'CPR+CGR

(8)

In parallel, we adopt a false—discovery rate (FDR) based evalu—
ation method used in NEXO (Dutkowski et al., 2013). We assign a
predicted term to each gold—standard term based on the ratio, labeled
as r, between the size of interaction and union of the gene sets corres—
ponding to a gold—standard term and a predicted term. The ratio r
ranges from 0 to 1 where 1 represents the perfect match. To calculate
the FDR of a ratio, we first randomly generate 71 gene sets for each
predicted term (71 : 1000 in our experiment). In each random set, the
set size and the parent terms of all the predicted terms are fixed, but
the genes are randomly permuted. Let f be the threshold for ration r,
the FDR at a given threshold f is calculated as:

n
32 Ni)

i:1
FDR(f) NO.) <9>
where N,(f) is the number of the correctly predicted terms in the
random permutation i that have a ratio r not smaller than f, and
N (f) is the number of terms in the correctly predicted terms in the
real prediction result that have a ratio r not smaller than  We set
the threshold f such that the FDR score is smaller than a reasonable
value (usually 5 or 10%). In our experiment, we followed the
threshold setting in (Dutkowski et al., 2013). We computed the pre—
cision as the ratio between the correctly predicted terms and all the
predicted terms, and computed the recall as the ratio between the

correctly predicted terms and all the gold—standard terms.

Using all the aforementioned evaluation methods, we compared
the performance of GOExtender with four existing algorithms, i.e.

SubMatrix, HAC, NEXO and GeneOverlap. SubMatrix is a compo—
nent of GOExtender to identify the connected maximal submatrices
(see Subsection 3.3). In this method, each maximal connected sub—
matrix, regardless of its topological properties, is considered as a
predicted term. The other three methods are introduced in the
Background section.

4.3 GOExtender results

GOExtender was tested on the biological process and the cellular
component categories of four versions of GO. In each GO version,
all the terms that qualify the criteria described in Subsection 3.1
were considered as the candidate parent terms. In our experiments,
171, p2 and 173 were set to 50, 10 and 4, respectively. We applied
GOExtender and four existing algorithms, i.e. SubMatrix, HAC,
NEXO and GeneOverlap on the same datasets. Note that we did
not test GOExtender on the molecular function category of GO be—
cause the gene association network used in the evaluation test is not
constructed based on sequence similarity (Kim et al., 2014). Also,
according to our definition, the number of candidate parent terms is
subject to the GO, the biological network and the parameters 171 and
172. Therefore, although there are thousands of existing terms in GO,
less than 100 terms were considered as candidate parent terms in
each version of GO.

On the biological process category, 38, 50, 68 and 64 candidate
parent terms were selected from the GO of 2007, 2009, 2011 and
2013, respectively (Table 1). And 190, 239, 272 and 284 gold—
standard terms were hidden from GOExtender. Our method pre—
dicted 183, 265, 289 and 282 new terms for the four different GO
versions, respectively.

On the cellular component category, we chose 13, 15, 19 and 16
candidate parent terms and hid 190, 239, 272 and 284 gold—stand—
ard terms in the GO of 2007, 2009, 2011 and 2013, respectively
(Table 1). GOExtender predicted 86, 90, 117 and 113 new terms for
the four different GO versions, respectively.

The software is available on our project website. It can process
user—specified data with customized parameters. The new GO struc—
ture will be saved in OBO format, which can be visualized using
ontology visualization tools such as OBO—Edit (see Supplementary
Fig. S1) (Day—Richter et al., 2007). The GO annotation file will be
extended accordingly by adding all the new annotations to the pre—
dicted terms.

4.4 Performance evaluation on biological process

We tested the performance of GOExtender and the other four meth—
ods by comparing the predicted terms with the gold standard terms
on each of the four versions of GO data in the biological process cat—
egory. In general, GOExtender has the highest performance in all
the tests. On the 2007 version of GO, the CPR and F1 score of
GOExtender are 0.17 and 0.21, which are much higher than the

Table 1. The numbers of candidate parent terms and gold-standard
terms generated based on different versions of GO

 

Cellular component Biological process

 

GO version Parent terms Gold—standard Parent terms Gold standard

 

Jan. 2007 13 86 38 190
Jan. 2009 15 90 50 239
Jan. 2011 19 117 68 272
Jan. 2013 16 113 64 284

 

9103 05 isanV uo sopﬁuv soc] ‘BIIIJOJIIBD JO AirsroAtuf] 112 /310's1cu1noip101x0"soticurJOJutotq/ﬁduq 11101} popco1umoq

Extending gene ontology with gene association networks

1191

 

second best method HAC (0.13 and 0.18) (Fig. 4A and B,
Supplementary Table S1). We also tested the performance of all the
five methods on the 2009, 2011 and 2013 versions of GO. On all
the tests, GOExtender has the highest CPR scores and the highest F1
scores (Fig. 4A and B, Supplementary Table S1). Specifically, the
CPR scores of GOExtender on 2009, 2011 and 2013 are 0.16, 0.15
and 0.16, respectively, which are in average 50% higher than the se—
cond best measures (Fig. 4A and B, Supplementary Table S1). The
F1 scores of GOExtender on 2009, 2011 and 2013 are 0.19, 0.19
and 0.20, respectively, which are in average 25% higher than the se—
cond best measures (Fig. 4A and B, Supplementary Table S1). The
CGR of GOExtender, however, is not always the highest, since
NEXO has a better recall (Supplementary Fig. S2).

On the FDR based criteria, both the precision and the recall of
GOExtender are the highest among all the five methods (Fig. 6A). In
all versions of GO, the precision of GOExtender is 39% higher than
that of the second best methods. The only exception is that HAC and
GOExtender are equally well on the precision on the 2009 version of
GO (Fig. 6A). Note that since we cannot identify a qualiﬁed FDR for
NEXO on the 2007, 2009, 2013 versions of GO data and HAC on the

ELLE

2007 2009 2011 2013
A

0.10 0.15
I |

0.05
I

 

 

0.00

2011 version of GO, we chose to report the results with the closest
FDR.

Finally, we applied all the five methods on the 2009 version of
GO and counted the number of new GO terms in the 2011 and
2013 version of GO that could be correctly predicted. The test
shows that GOExtender has the overall highest performance. On the
2011 version of GO, GOExtender has the highest CPR score (0.020,
Supplementary Fig. S3A). The F1 of GOExtender and NEXO are
very close (0.029 and 0.030, Supplementary Fig. 53B). On the 2013
version of GO, the score of GOExtender is at least 64% higher than
the other measures (Supplementary Fig. S3A and B). On the FDR
based criteria, GOExtender has the highest precision among all the
methods (Supplementary Fig. S4), and its recall is the second best
(Supplementary Fig. S4).

4.5 Performance evaluation on cellular component

We tested the performance of GOExtender and the other four meth—
ods on the GO cellular component category with the same evalu—
ation methods used in the GO biological process data. In all the

 

   

5Q _ - GOExtender

o I SubMatrix
I HAC
- NEXO

a I GeneOverlap

d _

:2

d _

.9

d _

In

D _

c;

O

O _

c;

2007 2009 2011 2013
B

Fig. 4. Performance comparison on five GO term prediction methods using biological process. The scores are the correct prediction rate (CPR) (A) and F1 (B) on

the GO versions of January 2007, January 2009, January 2011 and January 2013

ID
0!—
O

0.20
I

0.10
I

0.05
I

 

ilii

2007 2009 2011 2013
A

 

0.25
I

 

     

I GOExtender
I SubMatrix
I HAC

o I NEXO

a; _ I GeneOverlap

O

:9

d _

2

d _

IO

Q _

O

O

Q _

O

2007 2009 2011 2013
B

Fig. 5. Performance comparison on five GO term prediction methods using cellular component. The scores are the correct prediction rate (CPR) (A) and F1 (B) on

the GO versions of January 2007, January 2009, January 2011 and January 2013

9103 ‘09 JSnﬁnV no so1o§uv $01 ‘BIIIJOJIIBQ JO [fume/nu f] 112 /810's112um0[p10}x0'sopcurJOJHtotq/ﬁduq 11101} popco1umoq

 

 

 

 

 

 

 

 

 

 

 

 

 

1192 J.Peng et al.
“0. _ °°. _
O O
«a _ ‘° - +
O O
1] -I—
A1.
8 E 9K
E V. _ E V _ 9K
E O E O I: A C‘ ‘I'
n. n.
31—6)— . GOExtender I GOExtender
Ag 0 SubMatrix A A I SubMatrix
o HAC D 0 HAC
g - %+ - NEXO g — 916 9K A - NEXO
D 0 GeneOverlap 0 GeneOverlap
*6 X + 2007 43 at + 2007
+ D 2009 El 2009
A 2011 A 2011
o. _ D9833 aie 2013 O. _ aIe 2013
O O
I I I I I I I I
0.0 0.2 0.4 0.6 0.8 0.0 0.2 0.4 0.6 0.8
Recall Recall
A B

Fig. 6. Performance comparison on five GO term prediction methods on biological process (A) and cellular component (B) using FDR based criteria. Different col-
ors in the figures represent different methods and different shapes represent different versions of GO data

tests, GOExtender performed the best and was significantly better
than the other four methods. Figure 5 shows the performance of all
the five methods on the 2007 version of the GO cellular component
category, in which GOExtender achieves the highest F1 score. In
addition, the CPR and F1 of GOExtender on the 2009 version of
GO are 0.20 and 0.25, respectively, significantly higher than the se—
cond best method (0.10 for both CPR and F1) (Fig. 5A and B,
Supplementary Table S2). On the 2011 and 2013 versions of GO,
the CPR and F1 score of GOExtender are both significantly higher
than the second best method NEXO (Fig. 5A and B). The CGR of
GOExtender, however, is the second highest (Supplementary Fig.
S5), since NEXO has better recall. We compared all the methods
using the FDR based criteria on cellular component. In all the tests,
the precision of GOExtender is at least 20% higher than the second
best method (Fig. 6B). We also found that NEXO had the highest re—
call in cellular component.

4.6 Extending the most recent GO

We applied GOExtender on the most recent GO biological process
data (2015 January) and predicted 201 new terms that extend 30
candidate parent terms. The complete list is in Supplementary Table
S3. Here, we introduce two of them.

A new term possibly named as ‘DNA repair through recombination
or replication’ was identified under three existing terms: DNA recom—
bination (GO:0006310), DNA replication (GO:0006260) and DNA
repair (GO:0006281) (Fig. 7). The integrity of genome is under con—
stant threat due to DNA damage that results from a series of endogen—
ous processes and exogenous agents, such as reactive oxygen species,
replication defect, UV exposure and other radiation. To maintain gen—
ome stability, the network of DNA repair mechanisms is activated in
response to DNA damage, thus is considered the surveillance system of
the genome (Croteau et al., 2014; Sancar et al., 2004). The intrinsic
connection among DNA repair, replication and recombination is tight
but complicated. For example, DNA repair requires unwinding of the
double strand DNA enabled by essential helicases and their interacting
proteins, which are functioning in DNA replication. Importantly, mem—
bers of DNA helicase family have specific and redundant binding affin—
ity and function to different DNA repair intermediates (Croteau et al.,
2014). Besides, DNA homologous recombination is one of the most
important mechanisms that repair double—strand breaks (DSBs)

rm: man bal .- :mrms

 

 

 

 

  

“Me I /’
____:"_-.I.¢:____

. eraser-11 .' M-IxnandrialDNA  Recombinant-Jul
: ara1.M:c1 : 'luar Nepal.-

Fig. 7. Case study of new term prediction by GOExtender on the most recent
GO. The dashed rectangle is the predicted new term. The dashed lines repre-
sent the relationship between the predicted term and the existing GO terms

Cellc'rtleDhl  nun-auenum
repliun'. '_"l DNA 'eullcatlnr

 

(Croteau et al., 2014). The recognition of DSBs by the MRN complex
leads to accumulation of RPA proteins, which interacts with all human
RecQ helicases, and eventually homologous recombination (Ciccia and
Elledge, 2010; Croteau et al., 2014). In addition, the importance of
DNA repair and its connection to replication, recombination can also
be reﬂected by diseases and cellular defects that are associated with mu—
tations in essential proteins players.

Adding a new term to connect DNA repair, recombination and
replication can better represent the intertwined relationship among
them and better annotate key proteins. Indeed, we found that four
genes RFA3, RFA2, RFA1 and MEC1 participate in the all the three
processes and can be annotated to the new term (Bandhu et al., 2014;
Nakada et al., 2004, 2005; Wold, 1997; Zou and Elledge, 2003).

Interestingly, another new term predicted by GOExtender is
under DNA repair (GO:0006281) and cell division (GO:0051301),
which are far from each other in the GO structure. However, the
annotated genes to the new term, i.e. RTT101, MMS22 and MMS1,
are involved in the same pathway to maintain genomic integrity
during DNA replication, probably indicating the latent relationships
between distinct biological processes (Wan et al., 2013).

5 Discussion and conclusion

Recently, researchers have started to use omics data to construct
GO or to identify new relationships between the existing GO terms.

9103 05 JSanV uo so1o§uv soc] @0110};sz JO [(1151910qu 112 /310's1cu1noip101x0"sotJBurJOJutotq/ﬁduq 11101} popco1umoq

Extending gene ontology with gene association networks

1193

 

However, there is no existing method to predict new terms for the
existing GO. In this article, we proposed a novel algorithm called
‘GOExtender’ to automatically predict new GO terms by using bio—
logical networks, and connect them to the existing GO with a new
edge—based clustering algorithm. GOExtender has four steps. First,
it selects candidate parent terms from all GO terms, saved in T.
Second, it constructs an edge based matrix M using T and biological
network G. Third, all the connected maximal submatrices (called
MC) of M will be identified by a novel hierarchical partitioning
method. Finally, it predicts new GO terms from ME by adopting a
graph clustering algorithm.

Since there are three key parameters 171, p2 and 173 in
GOExtender, we tested the effect of each parameter on the 2013
version of GO on the biological process category by varying one par—
ameter while fixing the other two. First, we fixed {72 : 10 and
p3 : 4, and changed in from 25 to 100. Second, we fixed in : 50
and p3 : 4, and changed in from 10 to 40. In both tests, the F1
scores are consistent (Supplementary Table S4 and S5) indicating
that the performance of GOExtender is not volatile with the change
of 171 and 172. Finally, we fixed in : 50 and p2 : 10, and varied 173
from 4 to 30. The results show that the F1 score decreases from 0.20
to 0.05, indicating that although GOExtender outperforms the com—
pared methods, it is not suitable to predict general terms
(Supplementary Table S6), meaning GOExtender is more suitable to
extend the existing GO rather than to build a new ontology
structure.

We also found that the number of candidate parent terms and
gold—standard terms were strongly affected by the parameters. For
example, when fixing p2 : 10 and p3 : 4, and varying in from 25
to 100, the number of candidate parent terms changes from 41 to
47, 64 and 106 for 171 being 100, 75, 50 and 25, respectively. Note
that there are significantly more new terms in the biological process
than in cellular component. This is probably because there are more
existing GO terms in the biological process. For example, in the
2014 version of GO, the number of terms in the biological process
and cellular component categories is 27 284 and 3758, respectively.
Since the abundance of the existing terms is different, it is likely that
there are more candidate parent terms in the biological process than
in cellular component.

We tested the scalability of GOExtender by comparing the exe—
cution time of NEXO and GOExtender on different biological net—
works and GO versions. First, we applied NEXO and GOExtender
on the 2013 version of GO biological process category and two
biological networks with different sizes. The integrated gene net—
work has 5051 nodes and 29 789 edges, whereas BioGRID, a phys—
ical protein—protein interaction network, has 6226 nodes and 319
692 edges (10 times larger). Both GOExtender and NEXO took
less than one and half minutes on the smaller network
(Supplementary Fig. S6). On the larger network, GOExtender is
50 seconds slower than NEXO. Nevertheless, the total running
time of GOExtender still falls within a reasonable range. Second,
we applied NEXO and GOExtender on two different versions of
GO (i.e. biological process in 2007 and 2013). The 2007 and 2013
GO data have 38 and 64 candidate parent terms, respectively.
Supplementary Figure S7 shows that the running time of both
GOExtender and NEXO are reasonable and are similar on these
datasets. In summary, computational time is not a bottleneck for
GOExtender.

To test the importance of the input biological network, we ran
GOExtender on the 2013 version of GO (both biological process
and cellular component categories) using four biological networks,
i.e. the integrated network used in NEXO, YeastNet (Lee et al.,

2007), BioGrid (Stark et al., 2011) and Genetic Interaction
(Costanzo et al., 2010). The result shows that the integrated net—
work has the best performance on biological process, and the genetic
interaction network has resulted in the best performance on the cel—
lular component (Supplementary Fig. S8). The results suggest that
user should be cautious when selecting the input biological network.

By comparing GOExtender with four existing approaches, we
found that GOExtender outperforms these methods on both the bio—
logical process and the cellular component categories of GO in four
recent releases. Additionally, new GO terms with strong support
from literature were found by applying GOExtender to the most re—
cent version of GO. GOExtender may fill the gap between the mas—
sive biological data and the limited biological knowledge
represented in GO. In the future work, we will extend GOExtender
to enhance the relationships between the existing and predicted
terms using unannotated genes (Pinoli et al., 2015).

Funding

Chemical Sciences, Geosciences and Biosciences Division, Office of Basic
Energy Sciences, Office of Science, U.S. Department of Energy (award number
DEFG02—91ER20021), the Natural Science Foundation of China (Nos:
61173085) and the National High-Tech Research and Development Program
(863) of China (Nos: 2012AA020404, 2012AA02A602, 2012AA02A604 and
2014AA021505).

Conﬂict of Interest: none declared.

References

Bandhu,A. et al. (2014) Ddc2 mediates mec1 activation through a ddcl-or
dpbl 1—independent mechanism. PLoS Genetics, 10, e1004136

Besson,J. et al. (2004). Constraint—based mining of formal concepts in transac-
tional data. In: Advances in Knowledge Discovery and Data Mining.
Springer, Berlin Heidelberg, pp. 615—624.

Besson,J. et al. (2005) Constraint-based concept mining and its application to
microarray data analysis. Intell. Data Anal., 9, 5 9—82.

Ciccia,A. and Elledge,S.J. (2010) The dna damage response: making it safe to
play with knives. Mol. Cell, 40, 179—204.

Cimiano,P. and V61ker,J. (2005). Text20nto. In: Natural Language
Processing and Information Systems. Springer, pp. 227—238.

Costanzo,M. et al. (2010) The genetic landscape of a cell. Science, 327,
425—431.

Costello,J.C. et al. (2009). Data-driven ontologies. In: Paciﬁc Symposium on
Biocomputing, vol. 14, pp. 15—26.

Croteau,D.L. et al. (2014) Human recq helicases in dna repair, recombination,
and replication. Annu. Rev. Biochem., 83, 519—552.

Day—Richter,J. et al. (2007) Obo—editlan ontology editor for biologists.
Bioinformatics, 23, 2198—2200.

Dietze,H. et al. (2014) Termgenie—a web-application for pattern-based ontol—
ogy class generation. ]. Biomed. Semant., 5, 48

Drymonas,E. et al. (2010). Unsupervised ontology acquisition from plain
texts: the ontogain system. In: Natural Language Processing and
Information Systems. Springer, pp. 277—287.

Dutkowski,J. et al. (2013) A gene ontology inferred from molecular networks.
Nat. Biotechnol, 31, 38—45.

Dutkowski,J. et al. (2014) Nexo web: the nexo ontology database and visual—
ization platform. Nucleic Acids Res., 42, D126 9—D1274.

Eisen,M. et al. (1998) Cluster analysis and display of genome—wide expression
patterns. Proc. Natl. Acad. Sci. USA, 95, 14863—14868.

Gene Ontology Consortium,T. (2000) Gene ontology: tool for the uniﬁcation
of biology. Nat. Genet., 25, 25—29.

Gene Ontology Consortium,T. (2001) Creating the gene ontology resource:
design and implementation. Genome Res., 11, 1425—1433.

Gene Ontology Consortium,T. (2015) Gene ontology consortium: going for—
ward. Nucleic Acids Res., 43, D1049—D1056.

9103 05 JSanV uo so1o§uv soc] @0110};sz JO AJtsroAtuf] 112 /310'S[Buln0prOJXO'SOIJBLUJOJIIIOiq/ﬂduq 11101} popco1umoq

1194

J.Peng et al.

 

Gherasim,T. et al. (2013). Methods and tools for automatic construction of
ontologies from textual resources: A framework for comparison and its ap-
plication. In: Advances in Knowledge Discovery and Management.
Springer, pp. 177—201.

Girvan,M. and Newman,M. (2002) Community structure in social and biolo-
gical networks. Proc. Natl. Acad. Sci. USA, 99, 7821—7826.

Gligorijevié,V. et al. (2014) Integration of molecular network data recon-
structs gene ontology. Bioinformatics, 30, i5 94—i600.

Gordon,A.D. (1999). Classiﬁcation. London: Chapman and Hall/CRC.

Holmans,P. et al. (2009) Gene ontology analysis of gwa study data sets pro—
vides insights into the biology of bipolar disorder. Am. ]. Hum. Genet., 85,
13—24.

Hubble,J. et al. (2009) Implementation of genepattern within the stanford
microarray database. Nucleic Acids Res., 37, D898—D901.

Jaimes,A. and Smith,J.R. (2003). Semi—automatic, data-driven construction of
multimedia ontologies. In: International Conference on Multimedia and
Expo, 2003. ICME’03. Proceedings., vol. 1. IEEE, pp. I—781.

Ji,L. et al. (2006). Quick hierarchical biclustering on microarray gene expres-
sion data. In: Sixth IEEE Symposium on BioInformatics and
BioEngineering, 2006. BIBE 2006. IEEE, pp. 110—120.

Kim,H. et al. (2014) Yeastnet v3: a public database of data—speciﬁc and inte-
grated functional gene networks for saccharomyces cerevisiae. Nucleic
Acids Res., 42, D731—D736.

Kramer,M. et al. (2014) Inferring gene ontologies from pairwise similarity
data. Bioinformatics, 30, i34—i42.

Lee,I. et al. (2007) An improved, bias-reduced probabilistic functional gene
network of baker’s yeast, Saccharomyces cerevisiae. PloS One, 2, e988

Lee,I. et al. (2010) Rational association of genes with traits using a gen-
ome—scale gene network for arabidopsis thaliana. Nat. Biotechnol., 28,
149—1 5 6.

Lu,Z. and Hunter,L. (2005). Go molecular function terms are predictive of
subcellular localization. In: Paciﬁc Symposium on Biocomputing. Paciﬁc
Symposium on Biocomputing. NIH Public Access, p. 151.

Nakada,D. et al. (2004) Requirement of the mre11 complex and exonuclease
1 for activation of the med signaling pathway. Mol. Cell. Biol., 24, 10016—
10025.

Nakada,D. et al. (2005) Role of the c terminus of mec1 checkpoint kinase in
its localization to sites of dna damage. Mol. Biol. Cell, 16, 5227—5235.

OMadadhain,J. et al. (2005) Analysis and visualization of network data using
jung.]. Stat. Softw., 10, 1—35.

Pandey,G. et al. (2006). Computational Approaches for Protein Function
Prediction: A Survey. Twin Cities: Department of Computer Science and
Engineering, University of Minnesota.

Park,Y. and Bader,J.S. (2011) Resolving the structure of interactomes with
hierarchical agglomerative clustering. BMC Bioinformatics, 12,

Pinoli,P. et al. (2015) Computational algorithms to predict gene ontology an-
notations. BMC Bioinformatics, 16, S4

Powers and Martin,D. (2011). Evaluation: from precision, recall and f-meas—
ure to roc, informedness, markedness and correlation. journal of Machine
learning Technologies, 2, 37—63.

Radivojac,P. et al. (2013) A large—scale evaluation of computational protein
function prediction. Nat. Methods, 10, 221—227.

Sancar,A. et al. (2004) Molecular mechanisms of mammalian dna repair and
the dna damage checkpoints. Annu. Rev. Biochem., 73, 39—85.

Savova,G.K. et al. (2003). A data-driven approach for extracting the most spe—
ciﬁc term for ontology development. In: AMIA Annual Symposium
Proceedings, vol. 2003. American Medical Informatics Association, p. 5 79.

Shah,N.H. et al. (2012) Analyses using disease ontologies. PLoS Comput.
Biol., 8, e1002827

Skunca,N. et al. (2012) Quality of computationally inferred gene ontology an-
notations. PLoS Comput. Biol., 8, e1002533

Stark,C. et al. (2011) The biogrid interaction database: 2011 update. Nucleic
Acids Res., 39, D698—D704.

Tan,P.N. et al. (2006). Introduction to Data Mining. Boston: Pearson Addison
Wesley.

Vafaee,F. et al. (2013) Novel semantic similarity measure improves an integra-
tive approach to predicting gene functional associations. BMC Syst. Biol., 7,
22

Wan,L.C. et al. (2013) Reconstitution and characterization of eukaryotic n6—
threonylcarbamoylation of trna using a minimal enzyme system. Nucleic
Acids Res., gkt322 page

Wold,M.S. (1997) Replication protein a: a heterotrimeric, single—stranded
dna-binding protein required for eukaryotic dna metabolism. Annu. Rev.
Biochem., 66, 61—92.

Wong,W. et al. (2012) Ontology learning from text: A look back and into the
future. ACM Comput. Surv. (CSUR), 44, 20

Zhang,B. and Horvath,S. (2005) A general framework for weighted gene co—
expression network analysis. Stat. Appl. Genet. Mol. Biol., 4,

Zou,L. and Elledge,S.J. (2003) Sensing dna damage through atrip recognition
of rpa-ssdna complexes. Science, 300, 1542—1548.

9103 05 JSanV uo so1o§uv soc] ‘BIIIJOJIIBD JO AJtsroAtuf] 112 /310'S[Buln0prOJXO'SOIJBLUJOJIIIOiq/ﬂduq 11101} popco1umoq

