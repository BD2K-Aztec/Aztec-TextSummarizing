ORIGINAL PAPER

Vol. 26 no. 7 2010, pages 932-938
doi: 1 0. 1093/bioinformatics/btq069

 

Systems biology

Advance Access publication February 21, 2010

SBRML: a markup language for associating systems biology data

with models

Joseph 0. Dadalaz, Irena Spasicla2, Norman W. Paton“2 and Pedro Mendesla2’3a*

1Manchester Centre for Integrative Systems Biology, Manchester Interdisciplinary Biooentre, The University of
Manchester, 131 Princess Street, Manchester M1 7DN, ZSohool of Computer Science, The University of Manchester,
Kilburn Building, Oxford Road, Manchester M13 9PL, UK and 3Virginia Bioinformatios Institute, Virginia Tech,

Washington Street MC 0477, Blacksburg, VA 24061, USA

Associate Editor: Trey Ideker

 

ABSTRACT

Motivation: Research in systems biology is carried out through a
combination of experiments and models. Several data standards
have been adopted for representing models (Systems Biology
Markup Language) and various types of relevant experimental data
(such as FuGE and those of the Proteomics Standards Initiative).
However, until now, there has been no standard way to associate a
model and its entities to the corresponding datasets, or vice versa.
Such a standard would provide a means to represent computational
simulation results as well as to frame experimental data in the context
of a particular model. Target applications include model-driven data
analysis, parameter estimation, and sharing and archiving model
simulations.

Results: We propose the Systems Biology Results Markup
Language (SBRML), an XML-based language that associates a
model with several datasets. Each dataset is represented as
a series of values associated with model variables, and their
corresponding parameter values. SBRML provides a flexible way of
indexing the results to model parameter values, which supports both
spreadsheet-like data and multidimensional data cubes. We present
and discuss several examples of SBRML usage in applications such
as enzyme kinetics, microarray gene expression and various types
of simulation results.

Availability and Implementation: The XML Schema file for SBRML
is available at http://www.comp-sys-bio.org/SBRML under the
Academic Free License (AFL) v3.0.

Contact: pedro.mendes@manchester.ac.uk

Supplementary information: Supplementary data are available at
Bioinformatios online.

Received on November 27, 2009; revised on February 8, 2010;
accepted on February 16, 2010

1 INTRODUCTION

Systems biology is typically carried out with a solid basis on
explicit (computational) models, which are used to guide traditional
experimentation as well as data analysis. Computational models are
at the core of the systems biology methodology, and therefore an
important part of the infrastructure needed for practicing systems
biology.

 

*To whom correspondence should be addressed.

The growing reliance on computational models to support
biological research has given rise to several types of modelling
software. There are software packages for creation and visualization
of models (Funahashi et al., 2003), for their analysis and sim-
ulation (Hoops et (11., 2006; Moraru et al., 2008) and also for
analysing experimental data in their context (Shannon et al., 2003).
Additionally, there are several databases for sharing models within
the community (Le Novere et al., 2006; Olivier and Snoep, 2004).

The most prominent standard is the Systems Biology Markup
Language (SBML; Hucka et al., 2003), which is an XML-based
language for representing systems biology models in a way that
is largely independent from the means to simulate those models.
Models represented in SBML are thus interpretable by a wide range
of software, which can manipulate them in different ways: simulate
their dynamics through ordinary differential equations, stochastic
simulation algorithms, Petri nets or other formalisms; analyse
their underlying stoichiometric properties; ﬁt their parameters to
experimental data; explore their parameter space by parameter scans
or bifurcation analysis and many more computational applications.
The existence of a standard way to represent models has been a
catalyst for the appearance of these diverse types of software, since
they have a common basis in SBML, allowing researchers to share
models and effectively use them with these software tools.

Another important standard in the area is MIRIAM (Le Novere
et al., 2005), which is a set of guidelines to be followed when
communicating models. More speciﬁcally, MIRIAM provides a
means of unequivocally identifying biological molecules [through
the use of resource description framework (RDF) and universal
identiﬁers]. MIRIAM also recommends that models should be
encoded in a machine-readable format, and that their authorship and
terms of distribution should be speciﬁed explicitly. While MIRIAM
does not prescribe which machine-readable format should be used
to encode the model, SBML is a convenient way to do so, and the
combination of these two standards has become a predominant way
to specify self-contained models (Herrgard et al., 2008).

The Simulation Experiment Description Markup Language
(SED-ML; Kohn and Le Novere, 2008) is another XML-based
standardization effort for describing computational simulation
experiments.

Despite the increasing popularity of SBML and MIRIAM, which
has resulted in many models now being available in electronic
form, there is currently no standard way of communicating the
actual results of the operations carried out on such models

 

932 © The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org

112 /3.Io's[BumoIpJOJXO'sorwurJOJurorq”:duq 11101} papBOIII/IAOG

9IOZ ‘IE JSHBHV 110::

Systems Biology Results Markup Language

 

(e.g. simulations). Because of this lack of a standardized way to
communicate model-derived data, it is very difﬁcult to share such
results between different software applications. Such activities have
to be done in ways that require ad hoc programs to transform the
data formats appropriately.

Here, we propose a new markup language which is intended to
specify results from operations carried out on models. We name this
format the Systems Biology Results Markup Language (SBRML).
While developing SBRML as a means of communicating simulation
results, it became obvious that it is equally useful to associate any
kind of experimental data to a model, something that seems to be
missing in the landscape of computational systems biology. SBRML
is therefore a means of specifying any kind of quantitative results
in the context of a systems biology model. Some of its major uses
are:

(l) associating experimental results with models for passing to
analysis tools;

(2) sharing and archiving of model simulations; and

(3) recording the results of analysis for validation, archiving or
comparison.

The rest of this article describes the overall structure of SBRML
documents and illustrates a number of use cases that are expected to
cover the most common applications. Finally, SBRML is discussed
in the context of a more complete scenario of computational
activities centered on biological models, and therefore showing its
relation with other existing and emerging standards.

2 METHODS

SBRML is based on XML (Bray et al., 2008) and is speciﬁed through the
XML Schema language (Biron and Malhotra, 2004). SBRML Object Model
(SBRML-OM) was ﬁrst developed using the Universal Modelling Language
(UML; OMG, 2007) and a Model-Driven Architecture approach was then
used to derive the corresponding XML Schema semi-automatically with the
help of mapping rules for classes and associations.

In order to test the practicality of data formatting in SBRML, a prototype
implementation was created with the software COPASI (Hoops et al., 2006).
This was done using COPASI’s report deﬁnition facilities, which allow one
to create output in very ﬂexible ways. We do not foresee that this method
will be the best one with which to produce SBRML results from COPASI,
and we plan to write a full-ﬂedged SBRML output generator in that package.
Indeed it is the authors” expectation that in the future many other systems
biology packages will provide means for exporting SBRML.

Since the main objective of SBRML is to associate data with a model,
it therefore needs to provide representations of both the model and the
data along with mechanisms to associate parts of the dataset with the
corresponding elements of the model. Accordingly, SBRML has two major
sections, one representing the model, and the other one describing the
dataset. Since there is a plethora of very different types of data that may
require specialized terms for their description such as concentration, particle
numbers, ﬂux, spectrophotometry, etc., it seemed too restrictive to deﬁne a
priori a controlled vocabulary of terms (this would either be an extremely
long and diverse list or otherwise incomplete). Instead, the solution was to
provide a third major section in SBRML that lists ontology terms used in the
rest of the document and refers to where such ontologies are deﬁned. This
allows the language to be extensible and cover any possible type of data.

SBRML-OM top-level classes are shown in Figure l. The abstract class
SBRBase provides a means of attaching arbitrary information on some
elements of SBRML through its association with Annotation and Notes
classes. The Sbrml class, which is subclass of SBRBase, has three required

 

. . <<primitive>>
All Classes Inherit from SBRBase

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

SBRId
SBRBase t t. Annotation
. _ +
+meta'd ' ID [0"1] anno: If“ +anyAnnotation : String [1]
Notes
moms +anyNote : String [1]
0.1

Sbrml
+xm|ns : String [1] +ontologyTerms OntologyTerm
+Ieve| : positivelnteger [1] 1..* +id : SBRId [1]

+version : positivelnteger [1]

+term : String [1]
+creationDate : Date [0..1]

+sourceTermld : String [1]
+ontologyURl : String [1]

 

 

 

 

 

 

 

Model

+name : String [1]
1 +sourceURl : String [0..1]

 

+model

 

 

 

 

*

 

 

+operations 1.. +sbm 0..1
Operation Sbml

+id : SBRId [1] +xm|ns : String [1]
+name : String [0..1]

 

 

 

 

 

 

 

 

 

 

 

 

Fig. 1. Top-level classes of SBRML-OM.

<?xml version="1.0“ encodinf“IJTF-8"7>
<sbrml xmlns:"http://www.sbrmlorg/sbnnl/level1/version1" level:"1" version:“1 " creationDate:“2009-11-27">
<ontologyTerrus>
<0ntologyTe1-m id="tennl " 1.61111:
<ontologyTe1'm id="tenn2" term=
</outulogyTerms>
<model namF"Curien20037MetThrf
<operations>
<0peration>

 
  

" ourceTermId="..." ontologyURI="..."/>
sourceTermId="..." ontologyURI="..." />

 

' ' “sourceURIﬁ'nm'mif ' ‘ ‘ dh-RIOMI />

</operatiou>

</op;ratiom>
</sbrml>

Fig. 2. The skeleton of systems biology results description in SBRML
showing only the top-level elements and their subelements.

attributes: the SBRML namespace, level and version, and an optional
attribute creation date. An SBRML document will in many cases be used
to encode the results of many operations performed on a single model.
All operations carried out on the model are deﬁned within the operations
element indicated as an association between Sbrml and Operation classes.
The ontologyTerms association between Sbrml and OntologyTerm classes as
shown in Figure l is an element in the instance of Sbrml (SBRML document),
which contains instances of OntologyTerm class. Figure 2 shows the skeleton
of systems biology results description in SBRML. The top level classes are
described in more detail below.

2.1 Ontology section

The use of vocabularies/terms from standard ontology sources to describe
various types of data associated with the model is important in order for
software tools to correctly interpret the data. There is no single ontology
that can provide all the terms needed for the description of the very diverse
systems biology data. SBRML provides the OntologyTerm class (Fig. l) as
a mechanism for representing controlled vocabulary terms from different
ontologies. The id attribute provides a unique identiﬁer for the ontology
term. The term attribute stores the term itself, while the sourceTermId is a

 

933

112 /3.Io's[BrunoIpJOJXO'sorwurJOJurorq”:duq 11101} papeolumoq

9103 ‘{g anﬁnv 110::

J. O.Dada et al.

 

<ontologyTerms>
<ontologyl'erm id="tenn1" term="concentmtion" sourceTennId="SBO:0000196" ontologyURI="http://www.ebi.ac.uk/sbol" />
<onlologyl‘erm id="term2" tenn="Spectropholometry" snurceTerntId="C0037805"
ontologyURI="http://Www.nlm.nih.gov/research/umls/" />
</ontulogyl‘erms>

Fig. 3. SBRML fragment for encoding ontology terms.

string that is used within the ontology to uniquely identify the concept being
referenced. The ontologyURI attribute speciﬁes the unique identiﬁer of the
ontology. There will always be some terms that are not yet available in any
ontology. Such terms can still be used for data description by using SBRML
assigned term identiﬁer and Uniform Resource Name (URN) for the terms.
It is highly desirable that the ontologies used are those commonly accepted
by the systems biology community, and expressed by their MIRIAM URN
(Laibe and Le Novére, 2007). The fragment of SBRML in Figure 3 illustrates
how to use terms from the external ontologies in SBRML.

2.2 Model section

SBRML associates data generated from operations with the model variables
and their parameter values. The class Model as shown in Figure 1 deﬁnes
the model used in the operations. The model must have a name attribute.
The sourceURI attribute deﬁnes the source of the model. If the sourceURI
attribute is not speciﬁed, the actual SBML representation of the model
(see Model association to Sbml class in Fig. 1) must be carried within the
instance of Model (inline). Providing a reliable way of accessing the model
is important since an SBRML document is intended to be interpreted in the
context of a particular model. An SBRML document without an associated
model is therefore not a valid SBRML document. The inline representation of
the model is more reliable since the model and the data are contained within
the same ﬁle and therefore will never become separated. Additionally, when
the source URI of model is used, there is always a possibility that the model
may become incompatible with the data due to external changes to the SBML
model, or that the model is no longer available. On the other hand, the inline
representation is less practical with respect to the space and time needed to
store or exchange the ﬁles. We recommend that a URI be used when the
model is available in a reliable and strictly regulated repository (such as
BioModels); in other circumstances it would be more prudent to include the
SBML model inline within the SBRML.

2.3 Results section

As mentioned earlier, an SBRML document will in many cases be used to
encode the results of many operations performed on a single model. An
operation is deﬁned as an object of the Operation class (Fig. 4). The id
attribute is a unique identiﬁer for an instance of Operation. The association
to OntologyTerm deﬁnes the name of the instance of the Operation in an
external ontology source. An operation is characterized by a method, which
is associated with a particular piece of software (in the case of simulation
this is the simulator software and in the case of experimental data this may
be the data acquisition software). The Method and Software classes deﬁne
the method and software, respectively, that are used by the operation. The
actual results of the operation performed on the model are deﬁned in the
Result class, and described in detail below. The SBRML fragment in Figure 5
illustrates how to encode the operation performed on model.

The Result class (Fig. 6) provides a ﬂexible structure for associating
the data generated by an operation with the model. The actual result is
deﬁned by the ResultComponent class. The result in SBRML has two
component parts: the description of the result represented by an abstract
class DimensionDescription and the result itself deﬁned by the abstract class
Dimension. There must be at least one instance of ResultComponent in an
instance of Result. The instance of ResultComponent is uniquely identiﬁed
by an id attribute.

The DimensionDescription describes the structure of the
ResultComponent and has three subclasses: CompositeDescription.
TupleDescription and AtomicDescription. CompositeDescription describes

 

 

 

 

 

OntologyTerm
operation +ontologyTerm +id 1 SBRId l1]
+id : SBRId [1] +term : String [1]

1 +sourceTermId : String [1]

+name : Strin 0.1
gl ] +ontologyUR| : String [1]

 

 

 

 

 

 

 

A

+ontologyTerm

 

 

“nether, Method
1 +name : String [0..1]

 

 

 

 

 

Software

 

+name : String [1]
+version : String [0..1]
1 +URL : String [0..1]

+software

 

 

 

 

Hesult Result

1

 

 

 

 

 

 

 

Fig. 4. SBRML-OMioperation class and its associations.

<operatiun id— cpl" name=“PaIameter scan" ontologyTenn="...“>

<method name="Newton method" ontologyTenn=“..." />
<soﬁware namF" COPASI" vetsion="COPASI 4.4 Build 26“ URL="http://www.copasi.org/download" />
<result>
</result>
</operation>

Fig. 5. SBRML fragment for encoding operation performed on biochemical
model.

the nesting of dimensions in a result. It has an implicit relationship
to CompositeValue, in that any result described by an instance of
CompositeDescription must be placed in an instance of CompositeValue.
The type of data of the indexValue attribute in CompositeValue is deﬁned
by the indexType attribute. Possible values for indexType attribute are
standard data types such as string, ﬂoat, double, integer, etc. An instance
of CompositeDescription must contain exactly one instance of any of
AtomicDescription. TupleDescription or CompositeDescription. The
inherited association to the OntologyTerm allows the ontology term deﬁned
by an external ontology source for the name attribute to be referenced.
Where results contain structured components that are not represented as
distinct dimensions, the structure is described using the TupleDescription,
which has an implicit relationship to Tuple. Any result that is described
by an instance of TupleDescription must be placed in an instance of
Tuple. An instance of TupleDescription must have at least one instance of
AtomicDescription. and only one instance of TupleDescrption is allowed
within the instance of CompositeDescription. The id and name attributes
inherited from the super class are optional for this class. AtomicDescription
is used to describe a value in a result that can no longer be subdivided. It
has an implicit relationship to AtomicValue. Any result that is described
in the instance of AtomicDescription must be placed in the instance of
AtomicValue. It has a required valueType attribute that deﬁnes the type of
data contained in the instance of AtomicValue.

It is sometimes useful to think of data as a set of numbers indexed in
an array. A spreadsheet is an instance of such structure in two dimensions.
In three or more dimensions we have so-called data cubes. In SBRML,
the Dimension class (within a ResultComponent) allows us to describe the
model element that is being used to index one of the dimensions of such
data structures. For example, a time course is usually a 2D data structure,
which associates species concentrations or particle numbers with discrete

 

934

112 /3.Io's[BumoIpJOJXO'sorwurJOJurorq”:duq 11101} papeolumoq

9103 ‘{g anﬁnv 110::

Systems Biology Results Markup Language

 

 

 

 

OntologyTerm Result

Note: Aggregation relationship is only to one

 

subclass at a time (i.e. choice from any of the

 

+id : SBRId [1]

subclasses). An instance of CompositeValue must

 

+term : String [1]
+sourceTermld : String [1]
+ontologyUFI| : String [1]

 

 

 

 

 

contain one instance of Tuple or one instance of
AtomicValue or at least one instance of
CompositeValue (recursive aggregation). The last

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Hesuncomponem 1__* content of the instance of CompositeValue must be
+ontologyTerm 0__1 ResultComponent either an instance of Tuple or AtomicValue.
. . . . +id : SBRId \
1 , dlmenslonDescrIptIon \
Dimens'bnbescript'b" +description 1..* +dimension \ \
1 0 1 Dimension

+|d : SBRId [0..1] "

+name : String [0..1] child

childDescription

 

 

 

 

i

|
AtomicDescription

 

 

 

 

 

 

 

+atomicValue I

 

+atomicDescription TuPIeDescripﬁon

 

 

 

+valueType : DataType [1 ]

 

CompositeDescription

 

 

AtomicValue Tuple CompositeValue
1..*

 

 

 

1..*

 

 

 

 

 

 

 

+indexType : DataType [1]

 

 

 

 

 

 

+indexValue : String [1]

 

 

 

 

 

 

 

 

 

Fig. 6. SBRML-OMiresult classes and their associations.

values of time. In this case, the link between the data and the model are
the species identiﬁers. The time course data is thus indexed by time and
by species identiﬁers. Each discrete value of time identiﬁes a set of species
concentrations, which correspond to the state of the system at that particular
time value; a species identiﬁer provides a further index to the concentration
of the corresponding species at that time value. If both concentration and
particle number of a species are to be encoded together, the species identiﬁer
indexes a tuple that is used to structure those two items, rather than a single
number. The indexing mechanism is provided by the indexValue attribute.
The value of this attribute in an SBRML document provides an important
link between the data, model variables and model parameter values.

The Dimension uses three subclasses: CompositeValue, Tuple and
AtomicValue to structure the data as shown in Figure 6. Section 3 provides
various examples of how the Result model can be used to encode different
types of systems biology data.

It is common to express experimental results associated with some
measurement of error. SBRML allows for this by including one, or several,
error estimates as a speciﬁc AtomicValue entries.

3 RESULTS

In this section, we provide examples of SBRML usage which fall under
two main types: output from systems biology modelling software, and
input to systems biology data analysis software. The ﬁrst type includes
essentially simulation results, while the second associates experimental data
with models. These examples illustrate the breadth of applications that can
be addressed by SBRML. The examples also cover the two different ways of
structuring data, tuples and data hypercubes, indicating the situations where
each one is more appropriate.

3.1 Example 1: a single steady state calculation

This is one of the simplest applications of SBRML as a means of formatting
output from a simulation. The SBRML example in Figure 7 encodes the
results (species concentration and reaction ﬂuxes) of a steady state solution
of model number 68 (Curien et al., 2003) in the BioModels database
(Le Novére et al., 2006). The ﬁrst ontologyTerms section ﬁle starts by
deﬁning the concepts of ‘steady state”, ‘Newton method”, ‘concentration’
and ‘ﬂux’, which are used subsequently in the ﬁle. The model is referenced
with the appropriate BioModels URN. Only one operation is speciﬁed, which
is a steady state calculation, and it is associated with two resultComponent
elements. The ﬁrst resultComponent contains the steady state concentration

 

<‘Jxm1 version:"1.0“ encoding:"UTF-8"7>
<sbrml xmlns:"http://Www.sbnn1.org/sbrml/level1/version1 " level:"1" version:"1 " creationDate:"2009-1 1-27">
<ontologyTerms>

<ontologyTerm id="tenn1" tenn="steady state" sourceTermId="TEDDY70000011"

 

 

 

‘ WURr utty. ’ a m: , 2007-09-0’ ‘ a dd,.ow1"/>

<ontologyTen-n id="term2" term="Newton method“ sourceTemJId="SBRML:00003"
ontologyURI="um:sbrml:ontologytcn'ns" />

<omologyTem1 id="tenn3" tenn="concentration" sourceTennId="SBO:0000196"
ontologyURI="ht1.p://www.ebi.ac.uk/sbo/" />

<ontologyTen'n id="term4" term="ﬂux" sourceTermId="C2348693"
ontologyURI="http://www.nlm.nih.gov/resealch/umls/" />

</ontologyTerms>

<modelnameF"Curien2003_MetThr_ sourceURr um mi.‘ 1 ‘ rltrRmMr .m />

<operations>

<operaticn id="op1“ name="SIeady State“ ontology'l'e =“term1">
<method name=“Newton method" cnmlcgyTerm="term2" />
<soﬂware name=“ COPASI" version="COPASI 4.4 Build 26" URL:"http://www.copasi.org/dowulcad“ />
<resu11>
<resultComponent id="component1">
<dimensionDescription>
<compositeDescription name="species" indexType:"su-ing">
<atomicDescription name="Coucentration” onmlogyTenn="tenn3" ValueType="double" />
</ccmpositeDescription>
</dimensionDescription>
<dimension>
<compositeValue indexValuF"Phsei-“>
<atomicVa1ue>141.063</atomicValu9
</ccmpositeValuv
</dimension>
</resultComponent>
<resultComponent id:"component2“>
<dimensionDescription>
<compositeDescription namrF'Reaction“ indexType="string">
<atomchescription namsF'Tlux" outelogyTenn="tenn4" ValueType="double" />
</compositeDescription>
</dimensionDescription>
<dimeusion>
<compositeValue indexValue="v1">
<atomicValue>1<latomicValue>
</compositeVa.lue>
<compositeValue indexValue:"vas">
<atomicValue>O.152172<latomicValue>
</composina.lue->
<compositeValue indexValue="vThr“>
<atomicValue>O.847828<latomicValue>
</compositeValu£->
</dimension>
</resultComponem>
</result>
</operation>
</ope1'aticns>
</sbrm1>

Fig. 7. Example SBRML ﬁle describing results of a steady state solution of
model 68 of the BioModels database.

of the only variable of this model (Phser). The second resultComponent
contains values of the ﬂuxes of three reactions (v1, vas, vThr). Both
resultComponents are presented as tuples (name, value). Note that the
numerical data is always associated with the identiﬁers from the SBML
model. This allows anyone to interpret these numbers within the appropriate
context. Together, the original SBML ﬁle and this SBRML ﬁle completely
specify the model, the simulation carried out and the results obtained.

 

935

112 /3.Io's[BumoIpJOJXO'sotwuiJOJurorq”:duq uiog popBo1umoq

9103 ‘1g15n8nv 110::

J. O.Dada et al.

 

 

<cpera1jon id="opl" namF'Time Course" ontologyTerm=
<method namF"Deterministic (LSODA)" ontologyTe ..
<soﬁware name=" COPASI" version="COPASI 4.4 Build 26" URL="http://www.copasi.org/download" />
<resu1t>
<resultComponent id:"componentl ">
<dimensionDescription>
<compositeDescripticn name="Time“ ontologyTenn="..." index'I‘ype:"dcuble">
<compositeDescription name="species“ index'l‘pr"st1-ing">
<mpleDescription>
<atomicDescription namFToncentration" ontologyTerm=“..." valueType=“double" />
<atomicDescription name="Panicle Numbers" ontologyTerm="...“ valueT‘pr‘Tnteger" />
</tupleDescription>
</oompositeDescription>
</ccmpositeDescription>
</dimensionDescription>
<dimension>
<compositeValue indexValue="0">
<composiIeValue indexValue=“Phser">
<tuple>
<atomicValu90<latomicValue>
<atomicValue>0<latomicValue>
</tnple>
</oompositeVa1ue>
</compositeVa.Iue->
<compositeValueindexValu “ ">
<compositeValue indexValue:"Phser">
<tup19
<alcmicValu90.996305<latomicValue>
<alomicValu9539989e+l7</atomicValue>
</tuple>
</comp05iteValue>
</compositeValue>
<compositeValue indexValue="2">... </composi1eValue>
</dimension>
</resultComponem>
</result>
</cperation>

 

 

 

Fig. 8. SBRML fragment for time course simulation results of model number
68 of the BioModels database.

3.2 Example 2: a time course simulation

A time course simulation is a description of the evolution of the variables
of a system (concentrations of chemical species, ﬂuxes, etc.) for increasing
values of time. If one considers time to be a parameter of the model, then
a time course can be naturally described as a series of states of the system
indexed by the parameter time. The SBRML fragment in Figure 8 shows
the results of a time course simulation of model number 68 of BioModels.
In this case the data are presented as a series of tuples indexed by values
of time. Each tuple represents the concentration and the particle number of
Phser, the only variable chemical species of this model. The Supplementary
File example2.xml gives the complete SBRML document for this example.

3.3 Example 3: enzyme kinetic data

SBRML is not limited to representing results of simulations, it is also
useful for connecting experimental results to a systems biology model. This
example illustrates the use of SBRML to represent data from an enzyme
kinetics experiment which is here associated with a model of the enzymatic
reaction carried out in the experiment. Data are from Martins et al. (2001),
where the enzyme glyoxalase I (EC 4.4.1.5) of Saccharomyces cerevisiae
was assayed in a progress curve analysis. The data are thus similar to
Example 2, whereby time is the varying parameter. In this case, however,
eight time courses are represented, each one for a different value of the
concentration of substrates and products. Each time course is included
as a single resultComponent (see SBRML fragment in Fig. 9). Since the
data were obtained through spectrophotometry, the SBML model includes
the appropriate rule deﬁning the absorbance at 240 nm as a product
of the concentration of the product SDLGSH by its molar absortivity
coefﬁcient, making it explicit in the model the assumption made of how
light absorption relates to the concentration of one of the chemical species.
Note that the complete SBRML ﬁle for this example (see Supplementary
File exarnple3.xml) includes the SBML ﬁle inline as it is not available in a
persistent repository.

3.4 Example 4: microarray data

A major data source in functional genomics often used in systems biology
(e.g. Castrillo et al., 2007) consists of measurements of RNA with microarray
technology. In this example, we illustrate the use of SBRML to represent

<operation id="operation1" name="Time Course" ontologyTeiTn="...">
<method an'ISpectmphotometry" ontologyTerm="..." />
<resu1t>
<resu1tComponent id="experiment1 ">
<dimensionDescription>

<compcsiteDescription id="exp1_descr1" name="species" indexTpr"string“>
<atomicDescripticn name:"initial concentration" indexT‘pr‘ﬂouble" />
</compositeDescription>
<compcsiteDescription id="exp1_descr2" name="Time" ontologyTerm="..." indexType="double">
<compositeDescription namF“Va.riable" ontologyTerm  indexType:"su'ing">
<awmicDescription namF"Va1ue" onwlogyTenn:"..." valueType:"dcuble“ />
</compositeDescription>
</ccmpositeDescription>
</dimensionDescription>
<dimension>
<compcsiteValue description="exp17descrl" indexValue="I-ITA">
<atomicValue>0.05</atomicValue>
</composiveValue>
<compositeValue descﬂptionﬂ'explidescrl" indexValue="MG">
<atomicValu90.02</atomicVa1ue>
</compositeVa1ue>
<compositeValue descriptionﬂexplidescrl" indexValue:"GSH">
<atomicValu90.76</atomicValu9
</ccmpositeVa1ue>
<compositeValue description:"exp1_descr2" indexValue:"60">
<compositeValue indexValue="A240">
<atomicValue>-0.0l</atomicValu9
</compcsiteValue>
</cumpositeValue>
<compositeValue descﬂption="exp17desch" indexValue="660">
<compositeVa1ue indexValue="A240">
<atomicValue>0.08</atomicVa1ue>
</compositeValue>
</compositeValue>
<compcsiteValue description="exp1_descr2" indexValue="1260">
<compositeVa1ue indexValue:"A240">
<awmicValue>0.15</atomicValu9
</compositeValu9
</ccmpositeVa1ue>

 

<compositeValue descﬁption="explidesc12" indexValue="3060">
<compositeValue indexValue="A240">
<atomicValue>0.25</atomicValue>
</compositeValue>
</compositeValue>
</dimension>
</resu1tComponem>
<resu1tComponent id:"experiment2">...</resu1tComponent>

</result>
</operation>

Fig. 9. SBRML fragment showing how to encode enzyme kinetic data.

microarray data. The example includes the levels of expression of the genes
encoding all enzymes of the pentose phosphate pathway in S.cerevisiae
in different samples of an experiment available from the GEO database
(a Pyocyanin dose-response, accession GDS2522, Angell et al., 2006). The
data are referenced to an (inline) SBML ﬁle of the pentose phosphate
metabolic pathway which was obtained as a subset of the metabolic
reconstruction of yeast in (Herrgard et al., 2008). This ﬁle associates the gene
expression levels of the various experiments with the (enzyme) modiﬁers
of each reaction of the metabolic pathway. This connection between RNA
levels and enzyme levels is, therefore, an assumption that is made explicitly
in this SBRML ﬁle. SBRML is therefore a suitable means to declare such
assumptions in a machine-readable format. Note that the SBML model in this
case is annotated with MIRIAM-compliant (Le Novére et al., 2005) RDF
annotations for each molecule represented. Figure 10 shows an SBRML
fragment of this example, the entire ﬁle is given as Supplementary Material.

3.5 Example 5: complex parameter scan

Parameter scans (or sweeps) are operations where many simulations are
carried out where the values of several parameters of a model are changed
in a regular pattern. This type of application is suitably represented as a
data hypercube (sometimes referred to as a multidimensional spreadsheet).
Again model number 68 of BioModels is used and in this case a series
of simulations study the effect of the concentrations of cysteine (Cys) and
S -adenosylmethionine (AdoMet) on the steady state ﬂuxes of cystathieonine
gamma-synthase (vas) and threnine Synthase (vThr) as described in the
original work (Curien et al., 2003). This forms a 2D parameter scan, and
therefore a 3D table is the most natural way of structuring the results.
Alternatives to this would be to provide a single table where some of the
columns would repeat the same value many times. The SBRML schema

 

936

112 /3.Io's[BumoIpJOJXO'sotwuiJOJurorq”:duq uiog popBo1umoq

9103 ‘1g15n8nv 110::

Systems Biology Results Markup Language

 

 

<opetation id="operation1" name="Micmarray Analysis" ontologyTenn="...">
<method namF‘DNA Microarray chips" ontologyTe :"..." />
<resu11>
<resuItCornponent i ="microl">
<dimensionDescription>
<compositeDescription name="samp1e" ontologyTerm="..." indexType="string">
<compositeDescription name="species" ontologyTet'm:  indexType="string">
<tupleDescription>
<atomicDescription name="pyocya.nin" valueType="integer" ontologyTerm="..." />
<atomicDescription name="expression level" valueType="doubIe" ontologyTerm="..." />
</tupleDescription>

</compositeDescription>
</compositeDescription>
</dimensionDescription>
<dimension>
<compositeValue indexValue="GSM142982">
<compositeValue indexValuF"YNL24lC">
<tup1e>
<atomicValue>0</atomicValue>
<atomicValue>2155.7</atomicValue>
</tup1e>
</compositeVa1ue>
<compositeValue indexValuF"YGR248W">
<tup1e>
<atomicValue>0</atomicValue>
<atomicValue>724.8</atornicValue>
</tup1e>
</compositeVa1ue>
<compositeValue indexValuF"YHR163W">
<tup1e>
<atomicValue>0</atomicValue>
<atomicValue>1354.3</atomicValue>
</tup1e>
</compositeVa1u9
<compositeValue indexValuc-F"YHR183W">. ..</cornpositeValu9
</dimension>
</resultCornponent>
</result>
<operation>

Fig. 10. SBRML fragment showing how to encode microarray data.

provides an easy way to represent this data cube simply by indexing the
results (ﬂuxes) with each of the varying parameters as shown in the SBRML
fragment in Figure 11. The Supplementary File exarnple5.xml gives the
complete SBRML document.

While parameter scans change values of parameters in a regular
pattern, parameter sampling changes values of parameters using random
distributions. This means that there is no regularity in those values and,
therefore, they are not appropriate for indexing results in a data hypercube
fashion. For parameter sampling, it is most appropriate to represent the data
as tuples.

4 DISCUSSION

It is often emphasized that one of the main Characteristics of systems
biology is the combined use of experiments and models (Kell,
2006; Kitano, 2002). Several standards already exist to express
various aspects of systems biology in computational terms, such
as Functional Genomics Experiment (FuGE; Jones et (11., 2007)
for ﬁinctional genomics data, the SBML (Hucka et (11., 2003) for
network and kinetic models or BioPAX (BioPAX Working Group,
2008) for pathways. It is remarkable, however, that until now there
have been no attempts at creating a standard way of computationally
linking data with models. If systems biology is indeed to succeed as
an integrative wet and dry biology exercise there must be a standard
way to create associations of data with models. We see two major
uses for this: (i) expressing results of computational manipulations
of models (e. g. simulations) and (ii) expressing experimental results
in the context of a model, mathematical or otherwise.

We have used the COPASI simulator to create the simulation
results here, and since we are part of the development team of
that software, future versions will provide easy means to export
results in SBRML. But for this to be a successful exchange format in

n

 

<operation id: cpl" name:“Parameter scan“ ontologyTe
<method name="Newton method" ontologﬂenn="._." />
<soﬁvrmre name:" COPASI" version="COPASI 4.4 Build 26" URL="http://www.copasi.org/download" />
<result>
<resultComponem id="componentl">
<dimensionDescription>
<compositeDescription an‘Ispecies" indexType="string">
<compositeDescription name="Initial Concentration" indexType="double">
<compositeDescription name="species" indexType=
<compositeDescription name:"IniLial Concentratio mdexTpr"integer“>
<compositeDescription name="reaction" index'l‘yp =‘ String">
<atomicDescription name="ﬂux" ontologyTem1="..." valueType="double" />
</compositeDescription>
</compositeDescription>
</ccmpcsiteDescription>
</compositeDescription>
</compositeDescription>
</dimensionDescription>
<dimension>
<compositeValue indexValue="Cys">
<compositeValue indexValue="0.3">
<compositeVa1ue indexValue="Ad0Met">
<compositeValue indexValuF"0">
<ccmpositeValue indexValue="vas">
<atomicVa1ue>0.0136504</atomicValue>
</oompositeValue>
<compositeValue indexValue="vThr">
<atomicValue>0.98635<iatomicValu9
<lmmpositeValue>
</compositeValue>

 

 

<compositeValue indexValuF"100">
<ccmpositeValue indexValue="vas">
<atomicVa1ue>0.010766</atomicValue>
</oompositeValue>
<compositeValue indexValue="vThr">
<atomicValue>0.989234</atomicValu9
<lmmpositeValue>
</compositeValue>
</compositeValu9
</compositeValue>
<compositeValue indexValuF"3">... </ccmpositeValue>
<compositeVa1ue indexValuF"300">... </compositeValue>
</compositeValue>
</dimension>
</resultComponem>
</result>
</operation>

Fig. 11. SBRML fragment showing how to encode results of complex
parameter scan operation on model number 68 of the BioModel database.

systems biology, it is important that other simulators provide similar
capabilities, as well as other types of systems biology application
including data analysis workﬂows, databases, etc. On the other hand,
it is also important that relevant applications be capable of reading
(and interpreting) SBRML.

Given that SBRML is too verbose for being readable by humans
(even very dedicated computational systems biologists), we foresee
the need for user-friendly SBRML readers. Such applications could
format the data from SBRML in tables or data hypercubes or provide
graphical displays of the data. Network visualization software such
as CellDesigner (Funahashi et (11 ., 2003), CytoScape (Shannon et (11.,
2003) or Ondex (Kohler et (11., 2006) would seem to be particularly
appropriate for interpreting and displaying the contents of SBRML
ﬁles. Example 4 illustrates a type of SBRML ﬁle that would
beneﬁt from being displayed in such applications. Data analysis
software would also beneﬁt from this format, such as applications for
parameter estimation demonstrated with Example 3 (in this context,
COPASI would also beneﬁt from being able to read SBRML for
parameter estimation).

As well as complementing SBML, SBRML can also be seen
to complement experimental data standards, such as FuGE (Jones
et (11., 2007) or MAGE-ML (Spellman et (11., 2002). Experimental
data standards essentially describe samples, the experimental and
analytical processes applied to those samples, and the results of
those processes. As such, experimental data standards describe how
results are derived from an experimental process, whereas SBRML
indicates how results have been derived from an SBML model by

 

937

112 /3.Io's[Bumo[pJOJXO'sotwuiJOJurorqﬂ:duq uiog popBo1umoq

9103 ‘1g15n8nv 110::

J. O.Dada et al.

 

inter-relating the model, the analytical process applied to the model
and the results of the process.

SBRML and SED-ML are also complementary. While the main
purpose of SBRML is to encode the simulation results and/or
experimental data and all context in which it was obtained, SED-
ML is used for a detailed description of the operations that generate
simulation results. This means SED-ML could be used for a detailed
description of the speciﬁc operations that led to the data in SBRML.
One way to achieve this might be the inclusion of an SED-ML
container in an SBRML ﬁle in similar way to SBML container
in ‘model’ element of SBRML. We will look into this approach
and other possible ways to combine SED-ML and SBRML in the
future. Note that while SED-ML would be a perfect solution to
describing computational operations, it does not provide any support
for describing ‘wet’ experiments and thus SBRML still needs a
mechanism for this purpose, which makes their integration not
trivial.

It is our conviction that SBRML ﬁlls a current need in systems
biology. We hope that this document and the SBRML speciﬁcation
stimulate discussion and implementations of this standard among
the systems biology community.

ACKNOWLEDGEMENTS

We thank our colleagues in the SBML community who provided
feedback about the SBRML speciﬁcation. We thank Daniel Jameson,
Peter Li, Neil Swainston and the rest of the MCISB staff for many
helpful comments.

Funding: Biotechnology and Biological Sciences Research Council
and Engineering and Physical Sciences Research Council (grant
BB/C008l29/2, a contribution from The Manchester Centre for
Integrative Systems Biology).

Conﬂict of Interest: none declared.

REFERENCES

Angell,S. et a1. (2006) Pyocyanin isolated from a marine microbial population:
synergistic production between two distinct bacterial species and mode of action.
Chem. Biol., 13, 134971359.

BioPAX Working Group (2008) BioPAXibiological pathways exchange language.
Level 3, Release Candidate 3 (Version 0.92) Documentation. Available at
http://www.biopax.org/release/biopax-level3-documentati0n.pdf.

Biron,P.V. and Malhotra,A. (2004) XML Schema part 2: Datatypes, W3C recom-
mendation 28 October 2004. Available at http://www.w3.org/TR/xmlschema-2/.
Bray,T. et a1. (2008) Extensible markup language (XML) 1.0 (third edition), W3C

recommendation 26 November 2008. Available at http://www.w3.org/TR/REC-xml.

Castrillo,J.I. et a1. (2007) Growth control of the eukaryote cell: a systems biology study
in yeast. J. Biol., 6, 4.

Curien,G et a1. (2003) Akinetic model of the branch-point between the methionine and
threonine biosynthesis pathways in Arabidopsis thaliana. Eur J. Biochem., 270,
46154627.

Funahashi,A. et a1. (2003) CellDesigner: a process diagram editor for gene-regulatory
and biochemical networks. Biosilico, 1, 1597162.

Herrgard,M.J. et a1. (2008) A consensus yeast metabolic network reconstruction
obtained from a community approach to systems biology. Nat. Biotechnol., 26,
115571160.

Hoops,S. et a1. (2006) COPASI: a COmplex PAthway SImulator. Bioinformatics, 22,
306773074.

Hucka,M. et a1. (2003) The systems biology markup language (SBML): a medium for
representation and exchange of biochemical network models. Bioinformatics, 19,
5247531.

Jones,A.R. et a1. (2007) The Functional Genomics Experiment model (FuGE): an
extensible framework for standards in functional genomics. Nat. Biotechnol., 25,
112771133.

Kell,D.B. (2006) Systems biology, metabolic modelling and metabolomics in drug
discovery and development. Drug Discov. Today, 11, 108571092.

Kitano,H. (2002) Systems biology: a brief overview. Science, 295, 166271664.

Kohler,J. et a1. (2006) Graph-based analysis and visualization of experimental results
with ONDEX. Bioinformatics, 22, 138371390.

Kohn,D. and Le Novére,N. (2008) SED-MLiAn XML Format for the Implementation
of the MIASE Guidelines. In Heiner,M. and Uhrmacher,A.M. (eds) Vol. 5307 of
Lecture Notes in Bioinformatics. Springer, Berlin/Heidelberg, pp. 1767190.

Laibe,C. and Le Novére,N. (2007) MIRIAM Resources: tools to generate and resolve
robust cross-references in Systems Biology. BMC Systems Biol., 1, 58.

Le Novére,N. et a1. (2006) BioModels Database: a free, centralized database of
curated, published, quantitative kinetic models of biochemical and cellular systems.
Nucleic Acids Res., 34, D6897D691.

Le Novére,N. et a1. (2005) Minimum information requested in the annotation of
biochemical models (MIRIAM). Nat. Biotechnol., 23, 150971515.

Martins,A.M. et a1. (2001) In situ kinetic analysis of glyoxalase I and glyoxalase II in
Saccliaromyces cerevisiae. Eur J. Biochem, 268, 393073936.

Moraru,I.I. et a1. (2008) Virtual cell modelling and simulation software environment.
IET Syst. Biol., 2, 3527362.

Olivier,B.G. and Snoep,].L. (2004) Web-based kinetic modelling using JWS online.
Bioinformatics, 20, 214372144.

Object Management Group (2007) Uniﬁed Modeling Language, Infrastructure, V2.1.2.
Available at http://www.omg.org/spec/UML/Z.1.2/Infrastructure/PDF.

Shannon,P. et a1. (2003) Cytoscape: a software environment for integrated models of
biomolecular interaction networks. Genome Res., 13, 249872504.

Spellman,P.T. et a1. (2002) Design and implementation of microarray gene expression
markup language (MAGE-ML). Genome Biol., 3, research0046.170046.9.

 

938

112 /3.Io's[BumoipJOJXO'sorwuiJOJurorq”:duq mot} popeo1umoq

9103 ‘1gisn8nv 110::

