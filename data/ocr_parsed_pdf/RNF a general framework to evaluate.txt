Bioinformatics, 32(1), 2016, 136—139

doi: 10.1093/bioinformatics/btv524

Advance Access Publication Date: 9 September 2015
Applications Note

 

Sequence analysis

RNF: a general framework to evaluate NGS
read mappers

Karel Brinda”, Valentina Boeva2'3'4 and Gregory Kucherov1

1L|GM/CNRS, Université Paris-Est, 77454 Marne-la-Vallée, France, Zlnserm, U900, Bioinformatics, Biostatistics,
Epidemiology and Computational Systems Biology of Cancer, 75248 Paris, France, 3lnstitut Curie, Centre de
Recherche, 26 rue d’Ulm, 75248 Paris, France and 4Mines ParisTech, 77300 Fontainebleau, France

*To whom correspondence should be addressed.
Associate Editor: Inanc Birol

Received on April 20, 2015; revised on July 31, 2015; accepted on August 31, 2015

Abstract

Motivation: Read simulators combined with alignment evaluation tools provide the most straight—
forward way to evaluate and compare mappers. Simulation of reads is accompanied by informa—
tion about their positions in the source genome. This information is then used to evaluate
alignments produced by the mapper. Finally, reports containing statistics of successful read align—
ments are created.

In default of standards for encoding read origins, every evaluation tool has to be made explicitly
compatible with the simulator used to generate reads.

Results: To solve this obstacle, we have created a generic format Read Naming Format (RNF) for as—
signing read names with encoded information about original positions. Futhermore, we have
developed an associated software package RNFTools containing two principal components.
MISHMASH applies one of popular read simulating tools (among DWGSIM, ART, MASON, CURESIM, etc.)
and transforms the generated reads into RNF format. LAVENDER evaluates then a given read mapper
using simulated reads in RNF format. A special attention is payed to mapping qualities that serve
for parametrization of Roc curves, and to evaluation ofthe effect of read sample contamination.
Availability and implementation: RNFTools: http://karel—brinda.github.io/rnftools Spec. of RNF:
http://karel—brinda.github.io/rnf—spec

Contact: karel.brinda@univ—mlv.fr

 

1 Introduction

 

The number of Next-Generation Sequencing (NGS) read mappers
has been rapidly growing during the last years. Then, there is an
increasing demand of methods for evaluation and comparison of
mappers to select the most appropriate one for a specific task. The
basic approach to compare mappers is based on simulating NGS
reads, aligning them to the reference genome and assessing read
mapping accuracy using a tool evaluating if each individual read has
been aligned correctly.

There exist many read simulators IARI (Huang et (11., 2011),
CURESIM (Caboche et (11., 2014), DNEMULAIOR (Frith et (11., 2012),
chSiM (http://github.com/nhl3/dwgsim), FASIQSIM (Shcherbina,
2014), FLowSiM (Balzer et (11., 2010), GEMSIM (McElroy et 111.,

(C7 The Author 2015. Published by Oxford University Press.

2012), MASON (Holtgrewe, 2010), PBSIM (Ono et (11., 2013), PIRS (Xu
et at, 2012), SINC (Pattnaik et at, 2014), WGSIM (http://github.
com/lh3/wgsim), XS (Pratas et (11., 2014)| as well as many evaluation
tools ICURESIMEVAL, DwaSmiEval, RABEMA (Holtgrewe et (11.,
2011), SEC-SUITE (http://cbrc3.cbrc.jp/~martin/seg-suite/), WGSIAL
EVAL, etc.|. However, each read simulator encodes information
about the origin of reads in its own manner. This makes combining
tools complicated and makes writing ad-hoc conversion scripts
inevitable.

Here we propose a standard for naming simulated NGS reads,
called Read Naming Format (RM), that makes evaluation tools for
read mappers independent of the tool used for read simulation.
Furthermore, we introduce RNFTOOlS, an easily configurable

136

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/Iicenses/by/4.0/), which permits
unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

/310‘slcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

RNF framework for NGS

137

 

software, to obtain simulated reads in RNF format using a wide class
of existing read simulators, and also to evaluate NGS mappers.

1.1 Simulation of reads
A typical read simulator introduces mutations into a given reference
genome (provided usually as a FASTA file) and generates reads as gen—
omic substrings with randomly added sequencing errors. Different
statistical models can be employed to simulate sequencing errors
and artefacts observed in experimental reads. The models usually
take into account CG—content, distributions of coverage, of sequenc—
ing errors in reads and of genomic mutations. Simulators can often
learn their parameters from an experimental alignment file.

At the end, information about origin of every read is encoded in
some way and the reads are saved into a FASTQ file.

1.2 Evaluation of mappers

When simulated reads are mapped back to the reference sequence
and possibly processed by an independent post—processing tool
(remapping around indels, etc.), an evaluation tool inputs the final
alignments of all reads, extracts information about their origin and
assesses if every single read has been aligned to a correct location
(and possibly with correct edit operations). The whole procedure is
finalized by creating a summarizing report.

Various evaluation strategies can be employed (see, e.g. intro—
duction of Caboche et al., 2014). Final statistics usually strongly de—
pend on the definition of a correctly mapped read, mapper’s
approach to deal with multi—mapped reads and with mapping
qualities.

1.3 Existing read naming approaches

Depending on the read simulator, information about the read’s ori—
gin is either encoded in its name, or stored in a separate file, possibly
augmented with information about the expected read alignment.
While WGSIM encodes the first nucleotide of each end of the read in
the read name, DWGSIM and CURESIM encode the leftmost nucleotide
of each end. Unfortunately, these read naming schemes were specif—
ically designed for particular sequencing technologies and single
evaluation strategies, therefore they are not suitable as generic for—
mats. ART produces SAM and ALN alignment files, MASON creates
SAM files and PIRS makes text files in its own format.

2 Methods

We have created RNF, a standard for naming simulated reads. It is
designed to be robust, easy to adopt by existing tools, extendable,
and to provide human—readable read names. It respects a wide range
of existing sequencing technologies as well as their possible future
evolution (e.g. technologies producing several ‘subreads’). We then
developed a utility for generating RNF—compliant reads using existing
simulators, and an associated mapper evaluation tool.

2.1 Read naming format (RNF)
2.1.1 Read tuples
Read tuple is a tuple of sequences (possibly overlapping) obtained
from a sequencing machine from a single fragment of DNA.
Elements of these tuples are called reads. For example, every
‘paired—end read’ is a read tuple and both of its ‘ends’ are individual
reads in our notation.

To every read tuple, two strings are assigned: a short read name
(SRN) and a long read name (LRN). SRN contains a hexadecimal
unique ID of the tuple prefixed by ’#’. LRN consists of four parts

(a) Coor 12345678901—2345678901234567890123456789
Source 1 7 reference genome
chr 1 ATGTTAGATAAiGATAGCTGTGCTAGTAGGCAGTCAGCCC
chr 2 t1:cttcl:ggaaegaccttctcctcctgcaaataaa
Source 2 — generator of random sequences
READS:
r001 ATGiTAGATA 7>
r002/1 TTAGATAACGA 7>
r002/2 <7 TCAG*CGGG
r003/l tgcaaataa —>
r003/2 gaa—gacc—t —>
r004 ATAGCT . . . . . . . . . . ..TCAG ->
r005 GTAGG ->

<7 agacctt
<7 TCGACACG
r006 ATATCACATCATTAGACACTA

Simulated reads

 

 

 

(b)
ntuple LRN SRN
$01 sim_1"(1,1,F,01,10)"[single*end] #1
r002 sim__2__(1,1,F,O4,13), (1,1,R,31,39)__ #2
[paired—end]
1003 sim__3__(l,2,F,09,l7),(1,2,F,25,33)__ #3

[mate—pair]
$04 simn4“(l,l,F,15,36)“[RNA—seq—spliced], #4

 

 

 

 

 

C:[6=12N4=]

$05 simn5n(1,1,R,15,22),(1,1,F,25,29), #5
(1,2,R,05,11)"[chimeric]

r006 rnd__6__ (2, 0,N, 00, 00) __[randecontamin] #6

Long and short read names

Fig. 1. Examples of simulated reads (in our definition read tuples) and their
corresponding RNF names, which can be used as read names in the final
FASTQ file: a single-end read (r001); a paired-end read (r002); a mate-pair read
(r003); a spliced RNA-seq read (r004); a chimeric read (r005); and a random
contaminating read with unspecified coordinates (r006)

delimited by double—underscore: (i) a prefix (possibly containing ex—
pressive information for a user or a particular string for sorting or
randomization of order of read tuples), (ii) a unique ID, (iii) infor—
mation about origins of all segments (see below) that constitute
reads of the tuple, (iv) a suffix containing arbitrary comments or ex—
tensions (for holding additional information). Preferred final read
names are LRNs. If an LRN exceeds 255 (maximum allowed read
length in SAM), SRNs are used instead and a SRN—LRN correspond—
ence file must be created.

2.1.2 Segments

Segments are substrings of a read which are spatially distinct in the
reference and correspond to individual lines in a SAM file. Since
spliced RNA—seq reads (Fig. 1, r004) are usually reported in single
lines in SAM, we recommend to keep them in single RNF segments
without splitting even though they might be considered spatially dis—
tinct. Thus, each read has an associated chain of segments and we
associate a read tuple with segments of all its reads.

Within our definition, a ‘single—end read’ (Fig. 1, r001) consists
of a single read with a single segment unless it comes from a region
with genomic rearrangement. A ‘paired—end read’ or a ‘mate—pair
read’ (Fig. 1, r002 and r003) consists of two reads, each with one
segment (under the same condition). A ‘strobe read’ consists of sev—
eral reads. Chimeric reads (i.e. reads corresponding to a genomic fu—
sion, a long deletion, or a translocation; Fig. 1, r005) have at least
two segments.

ﬁm'spzumol‘pmgxo'sopeuuogutotq/ﬁdnq

BWA-MEM
BWA-SW

Rahmann, 2012

Bowtiez
Yara

Fig. i

Koster

and

Li (2013)
Figure 2

Unmapped correctly

Unma ped Incorrectly

Thres olded correctly

Thresholded Incorrectly

Multlmapped

Mapped, should be unmapped
Mapped to wron posrtlon —

Mappe correctl

 

/810'spzumo_fp10}xo"sotJBmJOJutotW/zdnq

RNF framework for NGS

139

 

Caboche,S. et al. (2014) Comparison of mapping algorithms used in high-
throughput sequencing: application to Ion Torrent data. BMC Genomics,
15, 264.

Engstrom,P.G. et al. (2013) Systematic evaluation of spliced alignment pro—
grams for RNA-seq data. Nat. Methods, 10, 1185—1191.

Frith,M.C. et al. (2012) A mostly traditional approach improves alignment of
bisulﬁte-converted DNA. Nucleic Acids Res, 40, e100.

Holtgrewe,M. (2010) Mason—a read simulator for second generation
sequencing data. Technical Report TR—B—10—06, Institut fur Mathematik
und Informatik, Freie Universitat Berlin.

Holtgrewe,M. et al. (2011) A novel and well-deﬁned benchmarking method
for second generation read mapping. BMC Bioinformatics, 12, 210.

Huang,W. et al. (2011) ART: a next-generation sequencing read simulator.
Bioinformatics, 28, 593—594.

Hu,X. et al. (2012) leS: proﬁle-based Illumina pair-end reads simulator.
Bioinformatics, 28, 1533—1535.

Koester,]. and Rahmann,S. (2012) Snakemake—a scalable bioinformatics
workflow engine. Bioinformatics, 28, 2520—2522.

Li,H. et al. (2009) The sequence alignment/map format and SAMtools.
Bioinformatics, 25, 2078—2079.

Li,H. (2013) Aligning sequence reads, clone sequences and assembly contigs
with BWA-MEM. arXiv:1303.39971/2 [q-bio.GN].

McElroy,K.E. et al. (2012) GemSIM: general, error-model based simulator of
next-generation sequencing data. BMC Genomics, 13, 74.

Ono,Y. et al. (2013) PBSIM: PacBio reads simulator—toward accurate genome
assembly. Bioinformatics, 29, 119—121.

Pattnaik,S. et al. (2014) SInC: an accurate and fast error—model based simula-
tor. BMC Bioinformatics, 15, 40.

Pratas,D. et al. (2014) XS: a FASTQ read simulator. BMC Research Notes 7:40.

Shcherbina,A. (2014) FASTQSim: platform-independent data characteriza-
tion and in silico read generation for NGS datasets. BMC Res. Notes,
7, 533.

/310'S[BHmOFpJOJXO"SOTJBLUJOJIITOlq/ﬂdnq

