ORIGINAL PAPER

Vol. 26 no. 16 2010, pages 1938-1944
doi: 1 0. 1093/bioinformatics/btq332

 

Genome analysis

Advance Access publication June 20, 2010

Savant: genome browser for high-throughput sequencing data

Marc Flume“, Vanessa Williamsl, Andrew Brook1 and Michael Brudnola2
1Department of Computer Science and 2Donnelly Centre and Banting and Best Department of Medical Research,

University of Toronto, Ontario, Canada
Associate Editor: Alex Bateman

 

ABSTRACT

Motivation: The advent of high-throughput sequencing (HTS)
technologies has made it affordable to sequence many individuals’
genomes. Simultaneously the computational analysis of the large
volumes of data generated by the new sequencing machines remains
a challenge. While a plethora of tools are available to map the
resulting reads to a reference genome, and to conduct primary
analysis of the mappings, it is often necessary to visually examine the
results and underlying data to confirm predictions and understand
the functional effects, especially in the context of other datasets.
Results: We introduce Savant, the Sequence Annotation,
Visualization and ANalysis Tool, a desktop visualization and
analysis browser for genomic data. Savant was developed for
visualizing and analyzing HTS data, with special care taken
to enable dynamic visualization in the presence of gigabases
of genomic reads and references the size of the human genome.
Savant supports the visualization of genome-based sequence, point,
interval and continuous datasets, and multiple visualization modes
that enable easy identification of genomic variants (including single
nucleotide polymorphisms, structural and copy number variants),
and functional genomic information (e.g. peaks in ChlP-seq data) in
the context of genomic annotations.

Availability: Savant is freely available at http://compbio.cs.toronto
.edu/savant

Contact: savant@cs.toronto.edu

Received on March 2, 2010; revised on May 25, 2010; accepted on
June 15, 2010

1 INTRODUCTION

The emergence of high-throughput (a.k.a. next-generation)
sequencing technologies has made the acquisition of genomic
data quicker and more affordable than ever before. Continued
technological strides are being made to further improve throughput,
cost and accuracy of the sequencing platforms, enabling large-
scale studies of genomes, populations and diseases. Within the
ﬁeld of personalized genomics, ambitious sequencing projects
such as the 1000 Genomes Project, the International Cancer
Genome Consortium and the Autism Genome Project, are seeking
to identify genomic variants among human genomes and to use
this knowledge to determine the genetic underpinnings of human
diseases by associating variants with symptoms (Hu-Lince et (11.,
2005; Via et (11., 2010; http://www.icgc.org/). Many computational

 

*To whom correspondence should be addressed.

tools have been developed for single nucleotide polymorphism
(SNP), insertion/deletion (indel) and other types of genetic
variation discovery in individuals sequenced using high-throughput
sequencing (HTS) platforms (Chiang et (11., 2009; Hormozdiari
et (11., 2009; Li et (11., 2008; also see Dalca and Bmdno, 2010 and
Medvedev et (11., 2009 for reviews). The results of these analyses are
being integrated into large-scale datasets, annotating each variant
with the allele frequency in various populations, and enabling
demographic and association studies.

Simultaneously, HTS has also revolutionized functional
genomics, where the ability to sequence RNA and DNA to
extremely high coverage has made possible RNA-seq and ChIP-seq
(Pepke et (11., 2009), methodologies that help discover rare RNA
transcripts, identify the location of transcription factor binding sites
on the genome, as well as discover the locations of nucleosomes.
RNA-seq and ChIP-seq data also consist of many reads aligned to
a reference genome, which are then binned and analyzed for peaks
that indicate putative transcription factor binding sites and exons,
respectively. Additionally, anomalously mapped reads or pairs from
RNA-seq experiments can suggest alternative splicing or fusion
transcripts.

The capacity of new sequencing technologies to generate huge
volumes of raw sequence data has made its analysis a substantial
informatics Challenge. Sequencing machines typically output ﬁles
containing a nucleotide sequence and quality values for each read,
which can be tens to hundreds of gigabytes in size due to the sheer
number of reads sequenced in a single run. These ﬁles can be easily
parsed line-by-line by downstream computer programs because of
their structured textual format, but are not intended for direct manual
or visual analysis. While downstream analysis programs, such as
read mappers, SNP callers and peak ﬁnders can identify regions of
interest to the bench scientist, a visual analysis of the supporting data,
as well as other, orthogonal, information is usually warranted before
costly wetlab experiments are performed to conﬁrm the biological
validity of the prediction.

Visualization of genomic data gives researchers the beneﬁt of
looking at information in a more natural and interpretable way
compared with a textual representation. There are many different
tasks that are facilitated by visualization including: (i) integration of
multiple related datasets into a single View, to gain insight into the
interaction between genomic features, (ii) algorithm development,
where visualization of many putative calls (e.g. genomic variants,
promoter sites, intron—exon boundaries, etc.) helps with debugging
and identiﬁcation of true and false positives; and (iii) exploration
of various genomic regions for speciﬁc signatures of functional
sites that may be difﬁcult to describe within a computer program,
e.g. two Closely spaced peaks in ChIP-seq data indicating adjacent

 

1938 © The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org

112 ﬁlo's[Bruno[pJOJXO'souBurJOJurorqﬂ:duq 11101} papeolumoq

9103 ‘{g anﬁnv 110::

Savant genome browser

 

Table 1. Savant feature list

 

Feature categories Features

 

Data formats FASTA. BED. SAM/BAM. WIG. GFF and any
tab-delimited text ﬁle containing positional
annotations

Speed and efﬁciency Fast data access

Scalable to very large input ﬁles

Small memory footprint

Zooming. panning and seeking using range controls
or keyboard and mouse

Layout Dockable modules supporting show/hide.

rearrangement. maximize. ﬂoat and close

Navigation

Visualization Compact View of sequence. point. interval and
continuous tracks
Multiple display modes for speciﬁc track types
Language Implemented in Java

Operating systems Works on Windows. Linux. Mac and any other
platform having support for Java Virtual Machine
Plugin framework allows access to data. tracks and
UI for extensive customization
Others Bookmarking favorite locations
Locking overview tracks
Novel representation of paired-end reads making

structural variations easy to identify

Extensibility

 

binding sites. Without the convenience of a visualization tool, in each
of these settings all regions of interest would have to be painstakingly
considered via manual analysis of the supporting data.

A number of tools have been developed for visualizing genome-
based annotations. The UCSC and Ensembl genome browsers,
for example, are popular online tools that have traditionally been
used to display various biological datasets, such as genomic
variants, expressed sequence tag (ESTs) and ﬁinctional genomic
data, in the context of high-quality, manually curated annotations
(Hubbard et (11., 2009; Kent et (11., 2002). While both have been
recently updated to support display of HTS data, their use for
this purpose is onerous because: (i) a large amount of locally
stored data must be uploaded to servers across the intemet,
(ii) once uploaded, the data being visualized cannot easily be
manipulated or computed with; and (iii) server-side browsers are
typically slow and non-interactive. Other visualization programs
such as the Integrative Genomics Viewer, Artemis and Tablet
(http://www.broadinstitute.org/igv; Milne et (11., 2010; Rutherford
et (11., 2000) are designed to run on conventional desktop computers
and thus make use of local storage capacity and computing resources
to overcome the shortcomings of web-based browsers. While these
popular browsers allow for interactive visualization of HTS data,
they have limited analytic capability, and are not extensible through
user-contributed modules. A substantial barrier for researchers who
use genomic visualization tools, for all types of data, is the
disconnect between the processes of visualization and computer-
intensive analyses (Nielsen et (11., 2010), a void which is caused by
visualization tools being programmatically inaccessible.

Here, we introduce Savant, the Sequence Annotation
Visualization and ANalysis Tool, which combines visualization of
HTS and other genome-based data with powerﬁil analytic tools.
The Savant feature set (summarized in Table l) was guided by three
key design principles. (i) Ease of use: users can easily install the
application, obtain and load data, and navigate to speciﬁc regions

of interest. The general layout of data mirrors the stande genome
browsers to shorten the learning curve. (ii) Speed and efﬁciency: the
program quickly and dynamically sifts through very large datasets
while maintaining a reasonable memory footprint. (iii) Access and
extensibility: the underlying data is readily accessible from within
the tool itself, and users can extend the application by adding any
number of plug-ins for speciﬁc tasks.

2 INTERFACE

Savant has a simple and intuitive interface, which is customizable
through the use of a modular docking framework. Figure 1 shows
a screenshot of Savant, and illustrates its various components,
expanded upon in the following subsections.

2.1 Navigation

There are several ways a user can specify the genomic region to
be displayed by the viewer. Coarse navigation is made possible
through a range selection panel whose horizontal length represents
the length of the loaded genome, from which subranges can be
Chosen using the mouse. Alternatively, ﬁne navigation is possible
by entering the desired genomic range into text ﬁelds. Neighboring
buttons enable zooming in and out and panning left and right. Each
of these ﬁinctions can also be engaged through mouse and keyboard
shortcuts. Savant also uses a bookmarking framework to allow the
user to switch between many regions of interest, as described lower.

2.2 Modules and docking framework

Savant uses a modular docking framework, similar to those
used in most Integrated Development Environments (IDEs). Each
module within the application appears as a separate window that
can be shown, hidden, maximized, minimized, resized, Closed or
rearranged in any conﬁguration the user desires. Modules can also be
detached from the main interface and moved to a separate location,
which is useful for maximizing screen usage on setups having
multiple displays. Savant includes a number of modules which are
described in subsections that follow. To demonstrate the power and
utility of Savant’s plug-in framework the Table View module was
implemented as a plug-in.

2.3 Tracks

A track is a visual representation of one dataset. Each track shows
data of a single type, such as a genome, read alignment, gene set
or generic annotation. A user can specify the region of the loaded
tracks to be displayed via the browser’s many navigation controls.
By default, multiple tracks are stacked on top of each other so that
positions along their horizontal axes correspond to the same location
of the genome, which is standard for genomic viewers (Gordon et (11.,
1998, Staden et (11., 2000). Simultaneously, Savant enables the user
to look a certain track, while updating the others, as is described in
Section 3.1

2.4 Bookmarks

It is often useﬁil to make note of interesting regions while using the
browser, or to load a set of such regions in order to quickly navigate
between them. The Bookmarks module helps keep track of such
locations. Users may add, remove or seek to a bookmarked region by

 

1 939

112 ﬁlo's[BumoIpJOJXO'sorwurJOJurorq”:duq 11101} papeolumoq

9103 ‘{g isnﬁnv 110::

M.Fiume et al.

 

Save nt Ge name B rows a!

File Edit View Window Help

 

_ (mun-m-

r ‘\
Track

  
    
 
  
  
  
  
  
  
  
  
  
 
  
 
 
 
 
  
  
  
  
    
 
   
  

D D D 2.NA12I?!.IhlumIJLLUKthRMWHJODBIJISbIM

3. (hr “taunt

Iniormlunn I Anll'psli
| Table View lnnkmark

   

Track;' "£128T8.I:hruml.ILLUMINﬂ.hwa.5RPD... 5

   

 

mm“: K: 50‘“: item: Name Sam-mu Length First of Palr Posluon A Strand 4
__...._._._._._‘ ERI0039TT... MMGTI'IT” T6 E 50026171 E
ERRO03982... WET—TIT... T6 E 50026171 E
ERI0039T6... TCCCUW... T6 '_ 50026180 E
SRRUDIIIE....MAAGMTC... 4T _ 50026191 E
[80.00398]... MOWER... T6 '__ 50026193 __
ERR001T35...TGMM... 36 ._ 50026198 _
5811001251....NANMNIA... 36 50026200 E
ERROOITTS... MGMRTIT... 36 50026203 E
5311001601....MGMRTRT... 4T ' 50026203 H

0 From: 50,026,232 To: 50.026331 “111500

90 0.9.. ICﬁIOOI

.ﬂ. MW“ ._____.
06 | Add | Delete |
from To annotation
48901410 48901500ul:001:ru.2_nnn
49105449 49105489uc001:lu.2_2):nn

4928 3842 059 ul:001:ru.2_emn

49484028 123 uc001zlu.2_9):nn.

4993552] 696 ul:001:lu.2 own
9

50089654 7?? uc001zru.2_2mn
5026202] 50262213 ul:001uu.2_e):0n
48822128 48825425 u:001:rv.1_ex0n
48829091 48829244 ul:001rrv.1_ex0n
48822251 48872863 uc001:rv.l_exon
48891595 48891?10uc001:rv.l_exon
48901410 48901500 ut001:rv.l_exon
49105449 49105489uc001:rv.1_exun
49283842 49284059uc001:w.1_exon
48966126 48966302 ul:001:n:.2_emn ’
48914491I 48974111uc001ux.2_emn ‘~
48980881 489810300c001ux.2_emn
48992158 48997543 uc001ux.2_exon
48999595 48999?29uc001ux.2_emn
49014864 49015134 ul:001ux.2_exon
48966126 48966302 ut001mu.2_ex0n
48914491!I 439?4?11ur001:m.2_¢xon.
48980881 48981030 ut001m4.2_exon
4899TI58 48997625 u(001:rw.2_e:<on

48999 595
490 I4864

48999729 ul:001:rw.2_e awn

   

503832 I 5 50383456 ut001:rv.2_exon
504 I 5345‘I 50415451 uc001crv.2_exon
504 32023 5043217? 0(001crv.2_exon
50433819 50434045 uc001crv.2_ewon
5043568? 50435726 0(001crv.2_emon
504 39 I09 50439641 UCDDICWJJWH
50 342 I68 50342259 ut001clz.2_emn
503832 I 5 50383456 ut001m.2_emn
5041534? 50415451 «0010223106
504 32023 5043217? ut001m.2_emn
50453819 50434045 ut001crz.2_eron
50435681I 50435116 ut001m.2_emn
50439109 50439641uc001uz.2_emn
50344550 50344652 ut001csa.z_exan
50383215 50353456 u(001(sa.z_exan
1uc001csa.2_exan
? u(001(sa.z_exan

.-
l 5 ut001csa.2_exan i,

I! Bet ns

1" .4qu Update Export _  Load  Save 
Mapping Qua... CIGAR Mane Position Strand + Inlerren lnse... r PM
60 76M 50025T03 E! -544\._ b—‘v‘é
32 76M 500261Tl '_ 0
60 76M 50025T54 _ -502
25 47M --1 '_ 0
60 76M 50026562 '__ 445
60 36M 5002630T '_ .145
12 1535M e '._ D
46 36M 50026055 E! -.164 ‘
37 47M —1 ' 0:

Number of records: 511 tshowmg ﬁrst 500:

 

Fig. 1. Screenshot of Savant. (A) Range controls. Selection, zoom and pan controls for coarse navigation; text ﬁelds for ﬁne navigation. Zooming and
panning are also possible Via keyboard and mouse commands. (B) Tracks. These represent the data in current range. Top: read alignments, with colored pixels
representing differences between the reads and the reference. Bottom: color representation of the genome sequence. (C) Table View module, detached from
the main interface. The table View module is displaying the mapped reads with SAM format ﬁelds. (D) Bookmarks module.

using buttons within the module or keyboard shortcuts. Furthermore,
bookmarks may be tagged with a description and exported for future
use or for sharing among colleagues.

2.5 Table View

Finally, while Savant aims to provide the user with the ability
to compute on the underlying data directly, through the plug-in
framework described in Section 5, in many cases the user may wish
to identify the underlying data elements for export to an external
program, e.g. identifying the genomic sequence within a window to
align against another genome, or downloading all of the supporting
reads for a SNP to make sure they do not align elsewhere in the
genome. In Savant, the user can display the underlying textual data
from any loaded track within the Table View. This module displays
records as rows and ﬁelds as columns in a spreadsheet. For each

read mapping, for example, the Table View displays the read name,
mapped position, CIGAR string and other SAM ﬁelds. The data can
be sorted in either ascending or descending order with respect to any
ﬁeld. The spreadsheet can also be exported for further analyses.

3 VISUALIZATION

Savant retrieves and renders data every time a range change is
requested by the user. Together, these processes happen quickly so
as to confer seamless navigation around the genome. The renderer
for each track is adaptive to both the display mode and the length
of the Viewed region chosen by the user.

3.1 Dynamic resolution changes

Savant dynamically adjusts its resolution—the amount of
information it displays—to optimize both nucleotide- and

 

1940

112 /8.IO'S[BHmOprOJXO'SOIJBLUJOJIIIOIq”Idllq urorr papeommoq

910z‘1918n8nvuo ::

Savant genome browser

 

 

Fig. 2. Read alignments. Visualized at various resolutions and using two
modes. (A) Chromosome-wide View of read mappings. showing the overall
coverage (with no coverage in the centromere). (B) Regional View. still
Visualized as a coverage map. showing higher coverage in certain regions
of the genome. (C) Local View. the reads are shown separately and
differences between the reads and the reference genome are colored. Reads
on the forward and reverse strand are shown with different shades of blue.
(D) Matepair (arc) mode. showing the relative distance between the two
reads of a pair. Taller arcs indicate larger distances between the pairs.

genome-scale visualization of tracks. For example, read alignments
can be visualized as a coverage track when the number of base
pairs within a region is too large to enable the visualization of
individual reads. Once the region is small enough, Savant seamlessly
switches to a read-alignment view, as shown in Figure 2. In addition
to presenting a more intuitive visualization, this feature also reduces
the program’s memory footprint and improves overall speed.
Individual tracks can also be locked to a particular range so that
they are not updated until they are unlocked. Locked tracks can be
used as overview proﬁles from which subregions can be selected to
specify range Changes for other tracks. Track locking also enables
simultaneous viewing of high- and low-resolution proﬁles.

3.2 Display modes

Particular data types can be displayed in different modes. For
example, interval annotations can be squished together on a single
line or packed neatly so that none overlap (mimicking the squish
and pack modes of the UCSC browser). The representation can be
dynamically toggled within the browser, with each representation
option emphasizing different aspects of the data. The variant and
strand modes for read alignments, for instance, use colors to
emphasize mismatches in reads and the strands to which reads
are mapped, respectively. A novel mode for representing matepairs
shows arcs between the mapped locations of paired reads, where the
height of each arc is proportional to the inferred insert size. Arcs for
anomalously mapped pairs, such as those suggestive of inversions
or duplications, are colored differently. The various modes for read
alignments are illustrated in Figure 2.

4 FILE FORMATTING AND PERFORMANCE

Savant supports a number of common text-based formats, which
are described in Table 2. However, because text-ﬁles do not enable
fast random access, Savant formats and saves each ﬁle so as to
provide very efﬁcient search operations at runtime. The speed with
which Savant can sift through large datasets is enabled by the way in

Table 2. Supported ﬁle formats

 

File Format Description

 

FASTA Standard format for nucleotide sequences
BED Format for describing coordinates of localized
features on genomes. such as genes
Relatively standard format for large sets of
nucleotide sequence alignments
WIG Standard format for continuous-valued data.
Useful for GC percent. probability scores and
transcriptome data
GFF General feature format for annotations of ranges
Tab delimited Any tab-delimited ﬁle containing point. interval
or continuous genome annotations

SAM/BAM

 

which it formats and indexes data. In particular, formatting involves
converting text records into an indexed binary data structure speciﬁc
to each data type. Sequence and continuous tracks are stored as
ﬁxed-width records, enabling direct lookup of records of interest.
Annotation ranges (such as genes) are stored using a binning scheme
similar to the one used in the UCSC Browser (Kent et (11., 2002) and
in BAM ﬁles (Li et (11., 2009), so retrieving all ranges corresponding
to some region usually requires only one, and at most 0(logn) disk
seeks. File formatting can be done directly through the application
itself. Savant keeps its memory usage low by adjusting its sampling
rate depending on the size of the visualized range.

The time and space requirements for the processes of data
formatting and visualization were measured for a collection of
human Chromosome 1 datasets, including a genetic sequence,
genes, SNPs, mammalian conservation and alignments of sequenced
reads from an individual from the 1000 Genomes Project (~40><
coverage). The tests were performed on a Lenovo T61p laptop
computer with an Intel Core 2 Duo CPU at 2.40GHz and 3.0 GB
of RAM. The results are summarized in Table 3. Formatting of
the gene, SNP, sequence and conservation tracks took less than
10min total, while the computation of a coverage track from a
large set of read alignments took about an additional 40 min. The
latter conversion is optional, and allows for dynamic switching
between an alignment view and a coverage view as illustrated in
Figure 2. Runtime performance was assessed by measuring the time
taken to navigate to ranges of various sizes. Each measurement
was performed on a newly started instance of Savant and the start
location of the range was randomized. For seeking arbitrary ranges
of sizes 10 million to 10K bp, Savant took less than a second to fetch
and render data. The performance was worst for ranges just slightly
shorter than 10K long, where the large number of BAM records that
are displayed require 2s to be fetched from disk. Savant renders
virtually instantaneously for regions having sizes on the order of
hundreds of base pairs, where most ﬁne-scale visualization is done.

5 PLUG-IN FRAMEWORK

Savant is able to integrate user-deﬁned plug-ins, allowing one to
accomplish very speciﬁc tasks. Each plug-in can be one of two
general types. Interactive plug-ins are allocated dockable modules
on which graphical user interface (GUI) elements such as buttons or
text ﬁelds can be placed to respond to user input and retrieve data.
Non-interactive plug-ins are not designated a GUI component but

 

1941

112 ﬁlo's[BumoIpJOJXO'sorwurJOJurorq”:duq 11101} pQPBOIII/lAOG

9103 ‘{g isnﬁnv 110::

M.Fiume et al.

 

Table 3. Time and space requirements for ﬁle formatting and Visualization

 

 

 

 

Data ﬁles Formatting Retrieval and Visualization
10M 100K 1K 100
File name Size Records Out size Time #Recs. Time (s) #Recs. Time (s) #Recs. Time (s) #Recs. Time (s)
chr1.genes.bed 1.1 MB 7.5K genes 970 KB 2 s 423 0.18 10 0.05 7 0.03 5 0.00
chr1.snps.point 26 MB 1.5M SNPs 26 MB 4 s 7 7 559 0.01 12 0.00 6 0.00
chr1.sequence.fasta 242 MB 249M nucs 237 MB 11 s 7 7 7 7 1000 0.00 100 0.00
chr1.conservation.wig 1.2 GB 249M vals 1.2 GB 6 m 10Ma 0.32 100Ka 0.18 1000 0.02 100 0.01
NA12878.chr1...barn 25 GB 262M reads No formatting req. Coverage shown at these ranges 1101 0.05 150 0.04

NA12878.chr1...cov Computed from BAM ﬁle 1.2 GB 42 m 10Ma

TOTAL 53 m

0.32 100Ka 0.18 Read alignments shown at these ranges
0.82 s 0.40 s 0.10 s 0.05 s

 

The Data Files section describes input ﬁles. The Formatting section shows time required to format each input ﬁle and the resulting formatted
ﬁle size. The Retrieval and visualization section shows the time taken to retrieve data from ranges of various sizes and the number of records

retrieved and drawn. All operations require <50 MB of memory.

aTracks with continuous values are smoothed before rendering at large ranges. Sequence and point tracks are not rendered beyond certain
ranges, denoted with a hyphen (7). Read alignments (BAM ﬁle) are replaced by coverage (precomputed from the BAM ﬁle) when visualizing

longer regions.

Table 4. Helper functions provided to plug-ins

 

 

Category Function descriptions
Range Change range
Tracks Add. remove. retrieve data. change display

modes and resolutions

Bookmarks Add. remove and seek
UI Rearrange modules
Other Take screenshot. export data. etc.

 

still have extensive access to the innards of the browser. A number of
helper functions are provided to plug-ins which are summarized in
Table 4. Plug-ins can be used, for example, to prototype a SNP ﬁnder
by identifying variable columns currently in view, or for computing
genome-wide statistics, such as the fraction of SNPs in exons.

Plug-in development is straight-forward and requires
implementation of one Java interface. The Bookmark Intersection
Plug-in, shown in Figure 3, is an example of an interactive plug-in.
The plug-in allows the user to select two tracks, intersect them and
load the intersecting regions into the list of bookmarks, enabling
easy navigation to all of the regions of interest. Once developed,
plug-ins can be shared among users through the Plugin section of
the Savant web site.

6 EXAMPLE USES

In this section, we demonstrate example usages of Savant to identify
and visualize various polymorphisms between the reference human
genome and a Yoruban genome (HapMap individual NA18507)
sequenced with the Illumina platform (Bentley et (11., 2008). The
raw reads and MAQ mappings (in BAM format) were downloaded
from the 1000 Genomes web site, while the conservation track (in
WIG format), gene annotations and dbSNP data were obtained from
the UCSC database. Figure 4A shows two likely SNP variants in

public class BookmarkIntersectionPlugin
implements InteractivePlugin {

H set by 01
Genericlnterval'l'rack sourceTrack, target'l‘rack;

RangeController rc;
BookmarkController be;

{I constructor
public BookmarkIntersectionPlugin{JPanel p,
SavantPluginAdapter pluginAdapter) {
/* UI Setup Code:
* Create 3 UI in JPanel to select a era and a
*xtarget track. Details skipped for simplicity
*

rc
be
l

/* called on button press */
public static void bookMarkTrackIntersections() {

pluginﬁdapter . getRangeController ll] ;
pluginjtdapter . gstBookmarkControllsr (I ;

List sourceIntervals =
sourceTrack . getRecords (rc . getMaxRange () ) ,'

for (GenericIntervalRecord ): : sourceIntervals) {
Range sourceRange = :.getInterval(J .getRangeD:

List targetIntervals =
target'l‘rack . getRecards (sourceRange) ;

if [targetIntervals.size(} > 0) {
be . addBoolunark {new Bookmark (sourceRange ,
target-intervals.getDescriptiont) ) ) ;

Fig. 3. Code used to make Bookmark Intersection Plug-in. The details of the
UI that allows the user to select two tracks have been omitted. Once the two
tracks are selected. the bookMarkTrackIntersections() method is run. which.
for each interval of one track. ﬁnds overlapping intervals of the other. and
saves intervals with overlap to the bookmark panel.

the NA18507 genome. SNPs are typically supported by consistent
mismatches in aligned reads with respect to the reference at the
variant positions. The reads support the existence of a transition

 

1942

112 ﬁlo's[BumoIpJOJXO'sorwurJOJurorq”:duq 11101} papaolumoq

9103 ‘{g isnﬁnv 110::

Savant genome browser

 

(an— m...— m

 

OI.
file Edit View may.» Help

hack F4081 2.075 To 1 I'll “III! 114

 

so 9.3.1.0901

       
      

» 4 clue-m menu-r

‘_i‘

C CO s.miasnuumsmumuoos_nl.ban

 

 

’5‘ ‘.‘O 1.0" Jim
l?‘ 'C‘ {l 1.:va "FUD-W

       
  
  

  

am”; imam: um n;

(In! 1| ! :-.I

 

 

e e a. e. «- «TS—4T

 

 

 

 

 

 

     
   

    

P'.‘ 0 much _
_ an my mum
1mm In AnmI-Ilnn
20111155 201113251Lallrm1mnel
._ E! O a nut gunk-damn- 1 1469442 214891135 1 can mu mnel
21457387 214976141C:|I.W1.mﬂel
21458012 2119825! 1 Call. W1.Illﬂel
254118522 2149874416111
27255155 222985161CIII
15178669 51128610 6 Call [NI 141081
19531492 395nm itau (Pl-'1 mm
s 1 1 "32012-1 423206451Call (Ph‘l lmI-el
57062216 51052-143 1 Call our mﬂel
‘ ’ ’ 52102510 62103034 1 call that mnel
> > > 62133646 52333333 5 (all. 1:61 mdel
u; __ _ rev-3m isnsnncgn m1 mnel
99544152 955443481Lall.mt1.mﬂel
-+- +- e 115238905 I112 59131 5 C:|l.mr1.lllnel
1150115105 1150053501CIII'W1JlIﬂeI
120255691 120285915 2 Call. “1.141081
120736051 I20755152 4 Call [N1JIIIII
Laid Save
n 0 narmnnnenmm
_ WEI! Trill“ _
Some men
(NIAXII'I!

  
 

(H1_nulen:ln.nunr

  
 
     
  

   

I ll 1
| |

|
l

lll w  ll
'.l l

1 ll 1 l 'l' I'

( "l

I“
|

  
 
 

 

(N1.nulln:lrs.nunl

O

  

 

' m" 'mii-‘E Mlle-450606145 "

 

 

mum. :1: 36,414,038 r? 8 Dam-In: wmf Incl-um: .Il'

 

M ml I’m.- 4

Fig. 4. (A) Visualization of two SNP Variants. The displayed tracks are, top to bottom, Conservation, Gene Models, Read Alignments, the Genome sequence
and known SNPs from dbSNP. Two potential SNP Variants are indicated by consistent mismatching colors within a column, with the downstream SNP
previously known, while the upstream one, a heterozygous Variant, not in dbSNP. (B) Identiﬁcation and Visualization of MoDlL indel Variants that overlap
exons Via the plug-in framework. The Visualized tracks are Gene Models, read mappings (Visualized in the matepair mode) and MoDlL predictions. The panel
on top right is the Bookmark module, while on the bottom right is the BookMarkIntersection plug-in described in Figure 3. To identify Variants of interest,
the user selects the two tracks in the BookMarkIntersection window, and those Variants that overlap exons are added to the list of bookmarks. The user can
then easily go through this list. In this particular case the indel likely occurs in the intron between the exons, but because of MoDlL’s inability to accurately
identify borders of Variants, the Variant is shown as overlapping.

 

1r: ﬁho's[Bruno[p103x0'sorim103urorq/:dnq mm; popeommoq

910g ‘19 isanV 110::

M.Fiume et al.

 

mutation (C to T) at a known SNP site, indicating a likely common
variant in the human population. There is also considerable evidence
(3/12 reads) for another transition (G to A) slightly upstream,
indicating a putatively novel SNP. Both of these SNPs fall in an
exon of a gene, as shown by the annotation, while the conservation
appears to drop-off in the immediate vicinity of the SNPs, indicating
weakened evolutionary constraint.

We also demonstrate the use of the plug-in framework to identify
and investigate biologically interesting indel predictions made using
an external tool. We used the dataset of predicted insertion and
deletion (indel) polymorphisms predicted by MoDIL (Lee et al.,
2009), which identiﬁes these variants by analysis of matepair data. In
particular, MoDIL identiﬁes regions of the genome with a signiﬁcant
number of discordant matepairs (those with a distance between the
mappings of the reads signiﬁcantly different from the expected
insert size of the library). We built a plug-in to identify those
indels that overlap exons, the code of which is shown in Figure 3.
Figure 4B displays the result of running this plug-in, together with
one such region of interest. In this case, the deletion lies directly
between two exons, and likely creates a genomic variant with a
much shorter intron, or with the intron completely spliced out of
the gene sequence. Taller arcs in the read visualization mode are
indicative of ‘stretched’ matepairs that conﬁrm the deletion, while
the lack of read mappings within the deleted region indicates that
the deletion is homozygous.

7 DISCUSSION AND FUTURE WORK

In this article, we introduce Savant, a genome browser customized
for visualization of HTS data. In addition to dynamic visualization
and support for multiple data types, Savant supports multiple
novel features meant to simplify the analysis of genomic data,
including a Bookmarks module to keep track of regions of interest,
a Table View module to allow researchers access to the raw
data underlying the visualizations and a plug-in framework that
allows developers extensive access to the browser, enabling them to
program novel analysis methods and extend the browser to support
new visualization and data types.

In the near future, we plan to expand Savant by supporting
additional ﬁle formats, while also allowing users to automatically
download annotation tracks from various public resources, such
as the UCSC Genome Browser and the 1000 Genomes Project.
Additional ﬁinctionality, for example, to save/restore user sessions,
enabling novel visualization modes, such as superimposition of
tracks, and combining the matepair and regular read alignment
views in a single panel will also be added in subsequent
releases. Savant is an open source tool, freely available at
http://compbio.cs.toronto.edu/savant/. We are also working to build

a user community, accessible through the same web site. The
community can be used to share Savant plug-ins with other
researchers, as well as to communicate with the development team,
to report bugs and to suggest new functionality and improvements.

ACKNOWLEDGEMENTS

We would like to thank Misko Dzamba, Seunghak Lee and Paul
Medvedev for assistance with this manuscript. We are also indebted
to the scientists at The Centre for Applied Genomics (Toronto,
Canada) for feature and design suggestions. MB is an Alfred P.
Sloan Research Fellow.

F unding: CIHR Catalyst Grant (to M.B .); an NSERC Undergraduate
Student Research Award for (M.F.).

Conﬂict of Interest: none declared.

REFERENCES

Bentley,D.R. et at. (2008) Accurate whole human genome sequencing using reversible
terminator chemistry. Nature, 456, 53759.

Chiang,D.Y. et at. (2009) High-resolution mapping of copy-number alterations with
massively parallel sequencing. Nat. Methods, 6, 997103.

Dalca,A.V. and Brudno,M. (2010) Genome variation discovery with high-throughput
sequencing data. Brief Bioinform., 11, 3714.

Gordon, D. et at. (1998) Consed: a graphical tool for sequence ﬁnishing. Genome Res.,
8, 1957202.

Hormozdiari,F. et at. (2009) Combinatorial algorithms for structural variation detection
in high-throughput sequenced genomes. Genome Res., 19, 127071278.

Hu-Lince,D. et at. (2005) The autism genome project: goals and strategies. Am. J.
Pharmacogenomics, 5, 2337246.

Hubbard,T.J.P. et al. (2009) Ensembl 2009. Nucleic Acids Res, 37 (Suppl. 1),
D6907D697.

Kent,W.J. et at. (2002) The human genome browser at UCSC. Genome Res., 12,
99671006.

Lee,S. et at. (2009) Modil: detecting small indels from clone-end sequencing with
mixtures of distributions. Nat. Methods, 6, 473474.

Li,l-I. et al. (2008) Mapping short dna sequencing reads and calling variants using
mapping quality scores. Genome Res, 18, 185171858.

Li,l-I. et at. (2009) The sequence alignment/map format and samtools. Bioinformdtics,
25, 207872079.

Medvedev,P. et al. (2009) Computational methods for discovering structural variation
with next-generation sequencing. Nat. Methods, 6, S 13520.

Milne,I. et at. (2010) Tabletinext generation sequence assembly visualization.
Bioinformdtics, 26, 401402.

Nielsen,C.B. et at. (2010) Visualizing genomes: techniques and challenges. Nat.
Methods, 7 (Suppl. 3), $5515.

Pepke,S. et at. (2009) Computation for chip-seq and RNA-seq studies. Nat. Methods,
6 (Suppl. 11), 5227532.

Rutherford,K. et at. (2000) Artemis: sequence visualization and annotation.
Bioinformdtics, 16, 9447945.

Staden,R. et at. (2000) The staden package, 1998. Methods Mol. Biol., 132, 1157130.

Via,M. et at. (2010) The 1000 genomes project: new opportunities for research and
social challenges. Genome Med., 2, 3.

 

112 /3.Io's[Bumo[pJOJXO'sorJBuJJOJurorq//:duq moi; papeolumoq

9103 ‘{g isnﬁnv 110::

