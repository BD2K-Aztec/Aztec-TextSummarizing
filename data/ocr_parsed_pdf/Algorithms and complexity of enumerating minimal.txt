ORIGINAL PAPER

Vol. 28 no. 19 2012, pages 2474—2483
doi: 10. 1 093/bioinformatics/bts423

 

Systems biology

Advance Access publication July 10, 2012

Algorithms and complexity of enumerating minimal precursor

sets in genome-wide metabolic networks

Vicente Acuﬁal'z'B'i'*, Paulo Vieira Milreul'B'i'*, Ludovic Cottret4,
Alberto Marchetti-Spaccamela5, Leen Stougie6 and Marie-France Sagotl'a’i

1Université de Lyon, F-69000 Lyon, Université Lyon 1, CNRS, UMR5558, Laboratoire de Biométrie et Biologie Evolutive,
F-69622 Villeurbanne, France, 2Mathomics, Center for Genome Regulation (Fondap 15090007) and Center for
Mathematical Modeling (UMI 2807 CNRS), University of Chile, Santiago, Chile, 3INRIA Rhéne-Alpes, 38330 Montbonnot
Saint-Martin, France, 4Laboratoire d'lngénierie des Systemes Biologiques et des Procédés (LISBP), UMR CNRS 5504,
INRA 792, Toulouse, 31000, France, 5Dip. di Informatica e Sistemistica, University of Rome La Sapienza, 00184, Rome,
Italy, and 6Department of Economics and Business Administration, VU University, 1087 HV Amsterdam and Centrum
voor Wiskunde en Informatica (CWI), 1098 XG Amsterdam, The Netherlands

Associate Editor: Trey ldeker

 

ABSTRACT

Motivation: In the context of studying whole metabolic networks and
their interaction with the environment, the following question arises:
given a set of target metabolites T and a set of possible external
source metabolites S, which are the minimal subsets of S that are
able to produce all the metabolites in T. Such subsets are called the
minimal precursor sets of T. The problem is then whether we can
enumerate all of them efficiently.

Results: We propose a new characterization of precursor sets as the
inputs of reaction sets called factories and an efficient algorithm to
decide if a set of sources is precursor set of T. We show proofs of
hardness for the problems of finding a precursor set of minimum size
and of enumerating all minimal precursor sets T. We propose two new
algorithms which, despite the hardness of the enumeration problem,
allow to enumerate all minimal precursor sets in networks with up to
1000 reactions.

Availability: Source code and datasets used in our benchmarks are
freely available for download at http://sites.google.com/site/pitufosoft
ware/download.

Contact: vicente77@gmail.com, pvmilreu@gmail.com or marie-france.
sagot@inria.fr

Received on February 16, 2012; revised on June 6, 2012; accepted on
June 29, 2012

1 INTRODUCTION

We recently introduced the concept of a minimal precursor set
which corresponds to a set of metabolites that an organism may
obtain from its environment and that enables it to produce a set
of metabolic targets of interest (see Cottret et a]. (2008) for the
initial deﬁnition of this concept). In this model, we propose a
deﬁnition of precursor set which does not consider the stoichi-
ometry of reactions. Indeed, the values given for such stoichiom—
etry may often not be accurate. For instance, 51% of the

 

*To whom correspondence should be addressed.
7‘The authors wish it to be known that, in their opinion, the ﬁrst two
authors should be regarded as joint First Authors.

reactions in the Kyoto Encyclopedia of Genes and Genomes
(KEGG) were considered to be unbalanced in 2004 (Feist
et al., 2009) and solving these cases may become challenging
for more complex reactions (Thiele and Palsson, 2010). To over-
come this problem, we propose instead a model based only on
the topology of a metabolic network, that is that considers the set
of substrates and products of each reaction without considering
the amounts involved. The collection of precursor sets deﬁned
should therefore be considered as potential/candidate solutions
which could be conﬁrmed or discarded a posteriori by other
sources of information.

The method we developed in Cottret et a]. (2008) to enumerate
all minimal precursor sets for a given set of targets was then
applied in Cottret et al. (2010a) to a relatively complex symbiotic
system. In this case, the environment was represented by an
insect. Homalodisca coagulata, which hosts within its cells two
bacteria, respectively, Baumanm‘a cicadellinicola and Sulcia muel—
Ieri. The identiﬁcation of the precursor sets for the sets of metab-
olites each bacterium gives to the symbiotic system (host and
co-resident endocytobiont), enabled to reﬁne the analysis that
had been done previously (McCutcheon and Moran, 2007) of
the complementarity between the metabolisms of the two bacteria
and their host. It also suggested that both B. cicadellinicola and
S. muelleri might be completely independent of the metabolites
output by the co-resident endocytobiont to produce the carbon
backbone of the metabolites provided to the symbiotic system.

The algorithms in Cottret et al. (2010a) and Cottret et al.
(2008) suffered of a memory problem due to the necessity to
construct a huge treeicalled the ‘replacement tree’. Moreover,
the enumeration procedure followed using such a tree was not
the most efﬁcient way either to enumerate all minimal precursor
sets. For small networks (<250 nodes), the previous method runs
in a acceptable time, but for bigger networks it usually runs out
of memory.

In this article, we present new algorithms for enumerating all
minimal precursor sets that address both memory requirements
and time efﬁciency (Section 4). We also provide full proofs for
the complexity results that were just indicated in Cottret et a].
(2008) (Section 3). We use for this a simpler characterization of a

 

2474 © The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com

112 /310's112u1n0[p10}x0"sorJBurJOJurorq/ﬁduq 11101} popcolumoq

9103 ‘Og anﬁnv uo ::

Algorithms and complexity of enumerating minimal precursor sets

 

precursor set that makes the concept, and the subsequent proofs,
formally easier to grasp (Section 2). Finally, we show by exten-
sive tests that the new algorithms are indeed able to deal with
much larger networks, up to 1000 reactions (Section 5).

2 DEFINITIONS AND CHARACTERIZATIONS

A metabolic network is modelled as a directed hypergraph
G = (C. R) with C the set of vertices corresponding to metabolites
(also called compounds) and 7?, the set of hyperarcs correspond-
ing to reactions. A directed hyperarc of a reaction r e 7?, is an
ordered pair of metabolite sets r = (Subs(r), Prod(r)), where
Subs(r) is the set of substrates of r and Prod(r) is the set of
products of r. Reactions are supposed to be irreversible: each
originally reversible reaction is replaced by two irreversible reac-
tions of opposite direction.

We consider also a set of sources 8 g C representing the me-
tabolites that are potentially available in inﬁnite external supply.
Sources used as substrates of reactions produce other metabol-
ites, thereby increasing the set of available ones. In addition, the
set T g C denotes the target set, that is a set of metabolites that it
is interesting to produce. Given a source set S and a target set T
of metabolites, the aim is to ﬁnd subsets of S which are able to
produce all metabolites of T. We need now to formally define the
meaning of: being able to produce the target.

When stoichiometric information is missing or not (fully) re-
liable, two deﬁnitions have been proposed to model this concept
that can give different solutions to a particular instance.

Before comparing the two approaches, we introduce some
notation. Let M be a set of metabolites of C. We deﬁne
Reac(lll) as the set of reactions that can be ﬁred when the
metabolites in M are present. In other words,
Reac(lll) = {r e 7?, | Subs(r) g M}. For a given set of reactions
R g R, we deﬁne the sets Subs(R) = U,.eRSubs(r) and
Prod(R) = U,.ERProd(r).

2.1 Sequencial production of the target

The forward propagation of M, denoted by Fwd(lll), is the set of
metabolites successively produced from M using the reactions of
the network. Formally, Fwd(lll) is the result of the recursion
MM 2 M U Prod(Reac(M,-)) starting from M0 = M and until
a fixed point is reached. For instance, in the network of Figure
l, ifMo = {a, b, c} then M1={a.b.c.e}.M2 = {a. b. c. e. h} and
so on until the ﬁxed point {a, b, c, e, h, i, t} is reached. Thus,
Fwd({a, b, c})= {a, b, c, e, h, i, t}.

Romero and Karp (2001) considered a subset X of the sources
8 as a precursor set of a target T, when T g Fwd(X). For in-
stance, the set of sources X: {a, b, c} is a precursor set of the
target set T={t} since Fwd({a, b, c}) contains t. This iterative
way to calculate what is available from X may however not be
enough to model some real cases. Indeed, the network could
have cycles whose metabolites need to be consumed and pro-
duced all at the same time. For instance, in Figure 1 reactions
r1 and r2 form a cycle that consumes metabolites c and d to
produce f and g. However, Fwd({c, d}) = {c, d}, that is it contains
neither f nor g.

 

Fig. 1. A metabolic network. Nodes represent metabolites and hyperarcs
represent reactions. Grey nodes are sources while the black node is the
target.

2.2 Including cycles in the target production

In our work, we used the model proposed in Cottret et al. (2008)
which deﬁnes a precursor set using a different approach. Instead
of starting the propagation from a subset of the sources, the
authors allow from the beginning the inclusion of other metab-
olites (called internal supply) provided that such metabolites are
produced by some reaction in a future step of the forward
propagation (besides production of the target). Formally,

the authors deﬁne Fwdz(lll), the forward propagation of M

with Z (as internal supply), as the result of the recursion
MM 2 M U Prod(Reac(M,- U Z)) starting from M0 = M and
until a ﬁxed point is reached. A subset X of the sources is a
precursor set of T if T and Z are both included in Fde(X).
For instance, in the network of Figure l, Fwdm({c, d}) =
{c, d,f, g, e, h, i, t}. Thus, it produces t but also re-producesfto
maintain the cycle working.

DEFINITION l. A set of sources X g S is a precursor set of

TE C if there exists a set Z g C such that TUZ g Fde(X).
In this case, we say that Z is an internal supply of the precursor
set X.

Of course, the internal supply may be not unique for a given
precursor set. In Figure 1, both Z: { f } and Z: {g} are internal
supplies for the precursor set X: {c, d }. Observe also that any
set of metabolites which is a precursor set by the Romero and
Karp deﬁnition will continue being a precursor set for this def-
inition just considering Z = 0.

Suppose now that the target is a set of metabolites whose
production we want to avoid. In this case, we can deﬁne the
notion of a precursor cut set or simply cut set, that is a subset
X of sources such that, if they are not present, then the target
cannot be produced by any combination of the remaining
sources. This concept has a biological application, for instance,
in the case where we want a bacterium to avoid producing some

given metabolite while providing it with a maximal set of

resources that enables it to continue doing its other specific
tasks. As an example, in Figure l, the set {a, d} is a out set of {t}.

DEFINITION 2. A set ofsources X g S is a out set of T g C if

and only if the set S \ X is not a precursor set of T.

If the target contains more than one metabolite, a cut will
avoid the production of the whole target set but could still

 

2475

112 /310's112u1n0[p10}x0'sonuIJOJuIOIq/ﬁduq quII papeolumoq

9103 ‘Og isnﬁnv uo ::

V.Acur'ia et al.

 

produce some of their elements (a strict subset of T). If we want
to block each element of the target, we can modify slightly the
network in the following way: given T: {t1,...,t3}, we can
deﬁne a new target metabolite tiargei and reactions r,,, . . . , r,,
with Subs(r,,.) 2 {ti} and Prod(r,,.) = {tiargei}. Clearly, a out set
of the new target T/ = {tiargei} must block the production of
each metabolite in T.

2.3 New characterization using factories

We give now a simpler and more natural way to grasp the char-
acterization of a precursor set X of T by considering, instead of
metabolites, a set of reactions F g 7?, that connects X with T.
Clearly, the reactions must verify these two properties:

1. (Feasibility of reactions) Each substrate of the reactions in
F is contained in X or is produced by some reaction in F;

2. (Production of target) Each metabolite in the target T
(which is not in X) is produced by some reaction in F.

These two conditions can be summarized in one:
TU Subs(F) g X U Prod(F). In this case, we say that F is a fac-
tory from X to T.

THEOREM 1. A set of sources X g S is a precursor set of T g C
if and only if there exists a factory from X to T.

PROOF. If X is a precursor set of T, there exists Z g C
such that TU Z g Fde(X) = X U Prod(Reac(Fde(X))). The
set of reactions F: Reac(Fde(X)) is such that
T g X U Prod(F) and Subs(F) g Fde(X) g X U Prod(F).
Therefore, F is a factory from X to T. Inversely, let F be a set
of reactions such that TU Subs(F) g X U Prod(F). Deﬁning
Z: Subs(F), we have Fwdz(X) = X U Prod (Reac(Fwdz
(X) U Subs(F))) which clearly contains X U Prod(F). Therefore,
TU Z g Fde(X). D

In the example of Figure 1, the set {c, d} is a precursor set of
{t}, since the set of reactions F: {r1,r2,r3,r6} is such that

01 U {6. dif, g, h} E {6. d} U {ﬁg 11. i. t}-

3 COMPLEXITY RESULTS

Given a metabolic network G = (C,7?,) with S g C a set of
sources and Tg C a set of target metabolites, we address the
theoretical complexity of the following three problems:

MINIMALPS(T): find a minimal precursor set X g S of T.
MINSIZEPS(T): find a minimum size precursor set X g S of T.
ALLPS(T): enumerate all minimal precursor sets X g S of T.

We also consider the analogous problems where what is
searched are precursor cut sets: MINIMALPCS, MINSIZEPCS and
ALLPCS.

3.1 Finding a minimal precursor set and a minimal cut set

Given a set X g S of sources, we can compute the maximal set of
reactions Fmx that satisfy the first condition of the factory def-
inition (feasibility of reactions). Thus, to decide whether X is a
precursor set of a given T, we can compute Fmx of X and check
whether Tis included in the products of Fmax. To obtain this set,

we use the following recursion: starting from the whole set of
reactions F0 2 7?,, compute the set FM 2 Reac(X U Prod(F,-))
until a ﬁxed point is reached. Deﬁning K: max,.eR
(|Subs(r)| + |Prod(r)|), we have the following result.

THEOREM 2. Given a subset X g S of sources and a target set
T g C, we can decide in polynomial time 0(|C||7?,| + |7?,|2K)
whether X is a precursor set of T.

PROOF. We show the maximality of Fmax. Let F’ be another set
of reactions such that Subs(F/) g X U Prod(F/). Clearly, if
F l g F,- then F l g Reac(X U Prod(F/)) E Reac(X U Prod(F,-))
2 1+1, Since we start with F0 2 7?,, we conclude that F l g Fmax.

The algorithm iterates at most |7?,| — |Fmax| times. Computing
F,- takes 0(|C| + |7?,|K) time. Therefore, the running time of the
whole procedure is 0(|C||7?,| + |7?,|2K). D

This method provides also a way to ﬁnd a minimal precursor
set of T. Starting from X = S, we successively check if removing
a metabolite of X the target is still produced, maintaining in X
only those that are needed to produce T. We obtain a minimal
precursor set in |S| iterations. A similar procedure is also valid to
find a minimal out set starting from X l = 0 and adding sources
while the target is not produced. The set X = S \ X l is a minimal
out set.

COROLLARY 3. Both MINIMALPS(T) and MINIMALPCS(T) can be
solved in polynomial time 0(|C||7?,||8| + |7?,|2|S|K).

3.2 Minimum size precursor set and cut set

Although ﬁnding one minimal precursor set of a target is easy,
obtaining a (minimal) precursor set of minimum size is NP-hard.
This result is proved by a reduction from the NP-complete prob-
lem HITTINGSET (Garey and Johnson, 1979): given a ﬁnite set of
elements U and a collection of subsets I = {11, .. . , In} of U, find
a minimum cardinality subset of elements H Q U such that H
intersects all the subsets in I.

THEOREM 4. The problem MINSIZEPS(T) is NP—hard.

PROOF. We show hardness by proving completeness of the
decision version where we ask if a precursor set of size at most
k exists. Theorem 2 implies that this decision version is in NP.

We make a polynomial time reduction from the decision ver-
sion of HITTINGSET, asking if there exists a hitting set of size at
most k. Consider H, I and k a hitting set instance with
I = {11, . . . , In}. For each element h in H, we create a vertex h
in C, and for each set I]- in I, we create a vertex 1]- in C (Fig. 2).
We create an extra vertex t in C. For each h e If, we create in 7?,
an arc rhj going from h to Ij. Moreover, we create the hyperarc r,
having Subs(r,) = {11, .. . , In} and Prod(r,) = {t}. We deﬁne t to
be the only target metabolite, and we deﬁne the vertices corres-
ponding to the elements of H as the sources 8 of G. D

Observe that in the above reduction, there is a one-to-one
relation between hitting sets and precursor sets, and a related
pair is of the same size. This implies that MINSIZEPS is as hard
to approximate in polynomial time as HITTINGSET, which is
known to be APX—hard (Ausiello et al., 1999). Namely, no poly-
nomial time algorithm for MINSIZEPS can have approximation
ratio o(log n) unless P=NP (Raz and Safra, 1997).

 

2476

112 /310's112u1n0[p101x0'sonuIJOJIIIOIq/ﬁduq quII pap1201um0q

9103 ‘0g isnﬁnv uo ::

Algorithms and complexity of enumerating minimal precursor sets

 

  

Fig. 2. Reduction of an instance of the hitting set problem. Each hitting
set of I = {11,12,13} corresponds to a precursor set of {t} (and vice
versa).

   

Fig. 3. Modiﬁcation of the hitting set reduction to the proof of hardness
of MINSIZEPCS (left) and to the proof of Proposition 5 (right).

A similar proof shows NP-hardness for the problem of finding
a minimum size out set. We consider in this case the same reduc-
tion but with two modiﬁcations (Fig. 3, left): (i) replace the
hyperarc r, (from {11, . . . , In} to t) by n separate reactions,
from each I]- to t, forj e {1, . . . , n} and (ii) replace, for each Ij,
the set of reactions producing I]- by a single reaction rj producing
I]- from the whole set of elements of Ij. In this case, each hitting
set corresponds to a out set. Therefore, MINSIZEPCS(T) is
NP-hard and APX—hard.

Related hardness results are as follows:

PROPOSITION 5. Given a precursor set X of T, the following two
problems are NP—hard.‘

1. Find a minimum cardinality set of metabolites Z such that Z
is an internal supply of X.

2. Find a minimum cardinality set of reactions F such that F is
a factory from X to T.

PROOF. We modify the reduction presented in the proof of
Theorem 4 as follows (Fig. 3, right): for each element h in H, we
create another extra vertex h/ in C, and two reactions rm and rm,
from h to h/ and from h/ to h, respectively, the set of sources 8 is
empty and the remaining of the construction stays the same. It is
easy to see that the only minimal precursor set of Tis the empty set.
Using similar arguments as in the previous reduction, we have that
any possible set Z corresponds to a hitting set. Analogously, any
possible factory F corresponds also to a hitting set. D

3.3 Enumerating all minimal precursor sets and cut sets

We showed that MINIMALPS(G, S, T) can be solved in polyno-
mial time. Nevertheless, if we are interested in ﬁnding all minimal
precursor sets of T, the number of solutions can grow

Fig. 4. Graphical representation of the reduction presented in Theorem 6.

exponentially. We are therefore interested in knowing whether
ALLPS can be solved in polynomial total time, that is, polynomial
in the size of the input and output (Johnson et al., 1988).

Given a boolean /\, V—formula f (that is with no negation), a
prime implicant is a minimal set of variables such that if they are
all TRUE then f is TRUE (for instance, {p, s} is a prime implicant of
f = (p V q) /\ (r V (p /\ s)) /\ s ). Enumerating the set of all prime
implicants of f cannot be done in polynomial total time unless
P = NP (Gurvich and Khachiyan, 1999). We show that this prob-
lem can be reduced to ALLPS.

THEOREM 6. The enumeration problem ALLPS cannot be solved
in polynomial total time unless P: NP.

PROOF. Let f be an A, V-formula. The set C of metabolites
corresponds to the set of variables plus one metabolite for each
conjunction and disjunction inside the formula (Fig. 4). The
sources are the metabolites corresponding to each single variable.
The set of hyperarcs is as follows: for each metabolite represent-
ing a conjunction c in f, there is a single hyperarc from the
clauses of c to the metabolite c, and for each metabolite repre-
senting a disjunction d, there are arcs from each term of d to the
metabolite d. The target set is a singleton containing the metab-
olite representing f. Clearly, a minimal precursor set of T corres-
ponds to a prime implicant of f and Vice versa. D

Observe that the reduction holds even in the case of networks
without cycles (for any reasonable deﬁnition of cycle). This result
is also valid if we consider the enumeration of all minimal pre-
cursor cut sets of T. Indeed, in the reduction of Theorem 6, a
minimal out set corresponds exactly to a prime implicate of the
boolean function f, that is to a minimal set of variables such that
if all are FALSE then f is FALSE. As for prime implicants, enumer-
ating the set of prime implicates cannot be done in polynomial
total time unless P=NP (Gurvich and Khachiyan, 1999). Thus,
the enumeration problem ALLPCS cannot be solved in polyno-
mial total time unless P: NP.

3.4 Simultaneous enumeration of precursor sets
and cut sets

Although enumeration of minimal precursor sets and enumer-
ation of minimal cut sets are both hard problems, we now show
that the enumeration of both problems simultaneously can be
done in quasi-polynomial total time (that is in time N0((l°gW)
for some c fixed and N the size of the input and output). Indeed,
we can represent any set of sources X g S as a vector of {0, 1}'8'.
We denote by IPT the collection of all minimal precursor sets of

 

2477

112 /310's112u1n0fp101x0'sonuIJOJIIIOIq/ﬁduq quII pap1201um0q

9103 ‘0g isnﬁnv uo ::

V.Acur'ia et al.

 

T, and by CT the collection of all minimal cut sets of T. We
deﬁne the function F: {0, 1}ISI —> {0, 1} as F(X)= 1 iins a pre-
cursor set of Tand F(X) = 0 otherwise. It is easy to see that F is a
monotone boolean function (although it is not explicitly ex-
pressed as a conjunction and disjunction of literals) whose
prime implicants are exactly IPT and whose prime implicates
are exactly CT.

In GurVich and Khachiyan (1999), the authors show an incre-
mental method to enumerate both prime implicants and prime
implicates of a monotone boolean function at the same time.
Roughly, given a collection IF” U C of solutions already found
(with I?“ g IPT and C Q CT), the method ﬁnds a set X g S such
that X is not superset of any minimal precursor set in IP/ and
S \ X is not superset of any minimal out set in C. Since either X
is a precursor set or S \ X is a out set, we have found a new
solution not in IF“ U C.

The algorithm ﬁnds this new solution in
0(l’t(‘t'+l’l)) +m0(l°g’”), where n is the number of variables, m
the number of solutions already found and ‘l.’ is the time to com-
pute the value F(X). By Theorem 2, ‘l.’ is 0(|C||7?,| + |7?,|2K).
Therefore, given m solutions in IPT U CT, we can obtain a new
solution in time 0(|8||C|2 + |8||C||7?|K+ isiz) + m0<l°gm>.

COROLLARY 7. The collections IPT and CT can be jointly enum-
erated in quasi-polynomial incremental ( and hence total ) time.

Observe that applying the same method to enumerate only one
collection (i.e. discarding the solutions of the other) can be very
inefﬁcient. Some instances can have exponentially more out sets
than precursor sets (that is ||PT|<<|CT|), and thus obtaining all
precursor sets can take more than quasi-polynomial time com-
pared with ||PT|. Analogously, there are instances where
|CT|<<|IPT|. In the next section, we present algorithms to enu-
merate all precursors sets by taking advantage of the network
topology.

4 PRECURSOR SETS ENUMERATION

We present two new algorithms that compute the collection of all
minimal precursor sets of a target set T. To facilitate the expos-
ition, we suppose that the metabolic network studied has the
following properties: (i) each source x e S is not produced by
any reaction and (ii) each reaction belongs to at least one factory
from the sources to the target. It is not difﬁcult to see that by
applying the following steps, we transform any network in order
to satisfy these conditions without changing the collection of
precursor sets of a target T:

1. Sources are not products: rename as x’ each x in S that is
the product of at least one reaction. Then, add a new re-
action with substrate a new metabolite labelled x and
product x/. The set of sources continues to be 8.

2. All reactions in a factory: compute the maximal factory
(see proof of Theorem 2) and remove all reactions in the
complement. Remove all unconnected metabolites.

4.1 Backtracking from the target to the sources

The general approach to enumerate IPT (the collection of all
minimal precursor sets of T) proceeds by backtracking: starting

from the target, the method performs a kind of depth-ﬁrst search
on the hypergraph using reactions in opposite direction. In this
way, the factories that produce T starting from any minimal
source sets are covered. Since we are considering hyperarcs,
each factory is composed by more than one path of the
depth-ﬁrst search from the target to the sources. We thus
obtain the whole set of solutions only at the end of the algorithm,
when all paths have been travelled.

A similar idea was already presented in Cottret et al. (2008).
The algorithm PITUFO was proposed to enumerate all minimal
precursor sets by building a replacement tree which represented
all paths obtained by going from T to the sources by using the
reactions in reverse order. In a second step, this tree was com-
pacted from the sources to the target until it reaches depth 2, on
which the solutions were easily recognizable. The main problem
of this method is the huge amount of memory needed to build
the replacement tree, which made the algorithm useful only for
small networks.

4.2 Decomposing into subproblems

We decompose the problem into subproblems where each sub-
problem has M as target set. Starting from M := T, two kinds of
subproblem decompositions are successively applied:

1. Target decomposition: given a target M: {m1, . . .,mk}
and X a precursor set of M, then X can be written as
X: ULIXi, where each X,- is a precursor set of
M,- 2 {mi}. Thus, we can enumerate PM by enumerating
PM (the minimal precursor sets of {m}) for each metab-
olite m e M and taking all the corresponding unions of
solution sets (one set from each collection).

2. Reaction decomposition: if the target is a singleton
M: {m} and r1, . . . , re is the set of all reactions producing
m (which is not empty if m is not a source), then X is a
precursor set of M if and only if X is a precursor set of
some M,- = Subs(r)) with ie {1, . . . ,Z}. Thus, to enumer-
ate IPW}, we can enumerate IP’Subw.) for all the reactions r
that produce m, and then take the union of the collections.

In both decompositions, solutions are obtained after discard-
ing the possible non-minimal sets obtained. Successively alternat-
ing these decompositions, the aim is to have subproblems where
the target is a singleton source {s}, which has the set {s} itself as
the only precursor set, that is PM = {{s}}.

4.3 Including available metabolites in the input

The difﬁculty in implementing the above described approach is
given by the presence of cycles in the network. Indeed, cycles can
make the algorithm enter into an endless loop. For this reason,
we must include explicitly in the input of the subproblems the set
of available metabolites, that is the metabolites already analysed
in previous steps of the algorithm. In this way, we can avoid
continuing the search for precursor sets of these metabolites.

Thus, given a set A of available metabolites, we conveniently
consider the following generalization of the precursor set
deﬁnition.

 

2478

112 /310's112u1n0fp101x0'sonuIJOJIIIOIq/ﬁduq 111011 pap1201um0q

9103 ‘0g isnﬁnv uo ::

Algorithms and complexity of enumerating minimal precursor sets

 

DEFINITION 3. Given a set of sources 8, a target M and a set A
of available metabolites, we say that a set X g S is a precursor set
of M when A is available if there is a factory from X U A to M.

Observe that, if PM(A) denotes the collection of all precursor
sets of M when A is available, then IPT(0) is exactly the collection
of all minimal precursor sets of T. Thus, starting from T and
having A = 0 available, we successively apply the target and re-
action decompositions increasing, at each step, the set of avail-
able metabolites. We ﬁnally need to solve the subproblems
P1m}(A) which are composed of one of these two base cases:

(a) m is available: if m is in A, then P1m}(A) contains only the
empty set as element, i.e. P1m}(A) = {0}.

(b) m is not available but is a source: if m e S \ A, then
lel(A) = {{m}}-

4.4 Increasing the set of available metabolites

We show how the set of available metabolites can be increased in
each subproblem decomposition. Observe that increasing the set
A of available metabolites is not only necessary to avoid cycling.
The bigger is this set, the shorter are the factories that produce
the given target when A is available, that is we can arrive faster to
the base case (a). Thus, in each decomposition, we try to maxi-
mize the set of available metabolites that can be added without
changing the solution of the original problem.

As mentioned before, to enumerate the collection IPM(A),
we can enumerate the collections P{mi}(A) for each m,- e M
and compute all possible unions of its elements (one from each
collection). In fact, in the enumeration of the solutions of
P1m,}(A), we can include as available any other metabolite in
M different from m,-, that is P1m,}(A U (M \ {m[})). Indeed, we
know that these metabolites will be produced by the precursor
sets given by the other parallel subproblems called. In the next
lemma, for a given collection of sets X, minimal[X] is the collec-
tion of all sets of X that are not supersets of any other set of X.

LEMMA 8. Given the sets M 2 {m1, . . . ,mg} g C andA g C, we
have the following relation:

2
IPM(A) = minimalHU X,-s.t.X,- 6 mm} (A u (M\ {m})) 
i=1
PROOF. Given X e IPM(A), there is a factory F such that
M U Subs(F) g X U A U Prod(F). Therefore, {m,}U Subs(F)
g XU A U Prod(F) for all m,- e M. Adding (M\ {m,}) to the
right side, we conclude that F is a factory from
XU (M\ {m[}) U A to {m,-} for all m,- e M.

Conversely, given for all m,- e M the sets
X,- e P{mi}((M \ {m,}) U A), there exist sets F,- such that
{m,-} U Subs(F,-) g X,- U (M\ {m,}) U A U Prod(F)) for all
m,- e M. This implies that m,- e X,- U A U Prod(F,), and also
implies that M U Subs(F) g X U M U A U Prod(F), where
F = U,-F,- and X = U,-X,-. These two relations in turn imply
M U SubS(F) g X U A U Prod(F). D

In the case of reaction decomposition, computation of P{m}(A)
(when we are not in one of the base cases) requires to compute
PSMbS(,.)(A) for any reaction r producing m. Clearly, since r

produces m, we can include m as available in the subproblems,
that is IPSMMMA U {m}) (which avoids getting into an endless
loop). Furthermore, we can also include any other product of
r, that is PSubX(,.)(A U Prod(r)).

LEMMA 9. Given m e C and A g C, ifm¢ S U A, then we have
the following relation:

P1m}(A) 2 minimal[ U

W producing m

PSubs(r) (A U Prod

PROOF. Consider X e S and F g 7?, such that Subs(r) U
Subs(F) g A U Prod(r) U X U Prod(F). Since m e Prod(r), we
have {m} U Subs({r} U F) g A U X U Prod({r} U F). Hence,
{r} UF is a factory from A UX to {m}. Conversely, consider
and F g 7?, a factory from X UA to the target {m}. Then, F
must contain a reaction r that produces m. Therefore,
Subs(r) U Subs(F) = Subs(F) g A U X U Prod(F) g A U Prod(r)
U X U Prod(F). F is also a factory from X UA U Prod(r) to
Subs(r).

Hence, the collection of sets X having a factory from X U A to
the target {m} is the same as the collection of sets of X having a
factory from X U Prod(r) U A to Subs(r) for any r producing m.
By considering minimality on each side, we conclude the
proof. D

4.5 Pruning solutions by minimality

While performing reaction decomposition, there might exist re-
actions that can be a priori discarded because they do not give
any minimal solution. Indeed, if r and r/ produce m, and further-
more if the set of substrates of r that are not in A is a subset of
the set of substrates of r/ that are not in A, then for any solution
to the subproblem deﬁned on Subs(r’), we have a solution smal-
ler or equal on Subs(r). In other words, any solution given by r/ is
not minimal or is included in the solutions given by r. Therefore,
we can avoid computing PSMbs(,J)(Prod(r/) UA) without losing
minimal precursor sets.

LEMMA 10. Let r and r/ be two reactions producing m such that
Subs(r) \ A g Subs(r/) \ A. Then for any solution
X7 e |P(Subs(r/), Prod(r/) U A), there is a solution
X e IP(Subs(r), Prod(r) U A) such that X g X’.

PROOF. Since X e Psubs(,4)(Prod(r/) U A), there exists X such
that Subs(r/) U Subs(F) g Prod(r/) U A U X7 U Prod(F). There-
fore, Subs(FU {r/}) U A g A U X7 U Prod(FU {r/}).

By hypothesis, Subs(r) g Subs(r/) U A, and then we can add
Subs(r) to the left side of the previous equation: Subs(r) U
Subs(FU {r/}) U A g A U X’ U Prod(FU {r/}). By removing the
union of A on the left and adding the union of Prod(r) on the
right, we obtain Subs(r) U Subs(F U {r/}) g A U Prod(r)
UX7 U Prod(F U {r/}). In other words, F U {r/} is a factory from
A U Prod(r) U K to Subs(r). We conclude that there exists
X g X such that X e P5ub1%,.)(Prod(r) U A). D

Thus, if we compute the solutions of P{m}(A) by using Lemma
9, we can first compute Subs(r) \ A for all reactions r producing
m and not consider those reactions where this set is not minimal.

 

2479

112 /310's112u1n0fp101x0'sonuIJOJIIIOIq/ﬁduq 111011 pap1201um0q

9103 ‘0g isnﬁnv uo ::

V.Acur'ia et al.

 

Algorithm TRD: target—reaction decomposition

Our ﬁrst algorithm, called TRD, consists in successively applying
target and reaction decompositions using the procedures
TDecomp and RDecomp below until reaching the base cases.
The ﬁrst method uses the subroutine CrossUnions(UJ, IPm)
that computes the collection of all unions of one set of U
and one set of IR”. Running TDecomp(M, A), we obtain exactly
all the minimal precursor sets of M when A is available.
Algorithm TRD is therefore given by the execution of
TDecomp(T,@).

TDecomp(M g C, A g C):

"J 1= [II];

For each metabolite m e M do
Ifm is in A then Pm :2 [{}]
else ifm is in S then Pm :2 [{m}]
else

Pm :2 RDecomp(m, A U (M \ {m}));

U :2 CrossUnions(UJ, Pm);

Return the collection minimal(UJ).

RDecomp(m e C, A g C):
P 2= I];
For each reaction r producing m with Subs(r) \ A minimal do
U. 2: TDecomp(Subs(r), A U Prod(r));
IP :2 IF” U U;
Return the collection minimal(|P).

4.6 Including factories as pseudo-reactions

A main limitation of TRD is the following. Method RDecomp(m, A)
outputs all precursor sets of {m} when A is available. This
means that, if X is a set included in the output, we know that
there exists a factory from X U A to {m}. If RDecomp is called
again as a subproblem on the same metabolite m with a similar
available set A/, then most of the successive decompositions
will be repeated again until the base cases are reached. In this
sense, the algorithm has no memory about the factories previously
computed.

We propose a new algorithm that, each time that a decompos-
ition is finished, includes this information in the network by
adding pseudo-reactions representing the previously computed
factories. For instance, if in the network there is a factory
from X U A to {m} given by reactions r1 and r2, then we include
a pseudo-reaction 171+2 with Subs(171+2) = X UA and
Prod(f1+2) = {m}. Clearly, this operation is safe: the precursor
sets of T do not change.

Moreover, we do not want to lose the information about
the remaining of the metabolites produced by the factory,
which are used to increment the set A of available metabol-
ites. For this reason, we associate to each pseudo-reaction 17 a
set Int(f) of internal available metabolites which contains any
metabolite produced by the reactions represented by 17. Thus,
if we use this reaction in a future decomposition, we can
consider this set as available. If we deﬁne Int(r) = Prod(r)
for any original reaction r of the network, then we do not
need to distinguish between reactions and pseudo-reactions.
In the previous example, we have then that Int(f1+2) =
Int(rl) U Int(r2).

 

Fig. 5. Example of the application of Replace to reaction r0. Left:
reaction r0 has internal production m and f (enclosed in a rectangle).
The substrates of r0 are s (which is a source), a and b. The collection
Rmin(r0) contains the minimal sets of reactions that produce a and b, that
is Rm,n(r0) = [{r1, r3}, {r2, r3}]. Right: we replace r0 by new reactions cor-
responding to the merge of r0 to each set of reactions of Rm,n(r0). Thus,
reaction r0 is replaced by reactions 7013 and 7023. Notice that the sub-
strates of 7013 do not include substrates of r3 since they are internally
produced by r1 and r0.

4.7 Reaction replacement

Adding new pseudo-reactions to the network decreases the
number of reactions of the factories from X to {m}. However,
to really decrease the time, we need to ensure that the algorithm
will not consider again the original factory. Otherwise, if m is
revisited, the algorithm would analyse both the original factory
and the new one containing the new added reactions. To avoid
this, we delete the original reaction producing m but while guar-
anteeing that the collection of minimal precursor sets of T is
maintained.

Suppose that we want to delete a reaction r producing m.
Notice that any factory from X to m that contains r must also
contain at least one reaction producing each substrate of
r (except the sources). Thus, if r is merged with each set of
such reactions then r can be removed without modifying the
minimal precursor sets.

More formally, given a reaction r, we say that a set of reac-
tions R is a predecessor reaction set of r, if R produces all the
substrates of r that are not sources, that is Prod(R) 2 Subs(r) \ 8.
Let 7?,m,-,,(r) be the collection of all minimal predecessor reaction
sets of r. Clearly, any factory containing r must also contain a
set R e Run-Ar). The following method Replace(r) removes
reaction r and adds pseudo-reactions corresponding to the
merge of r with every reaction set R e 7?,m,-,,(r) (Fig. 5).

Replace(r e 7?,)
Compute 7?,m,-,,(r) = min{R g 7?, | Prod(R) 2 Subs(r) \ S};
For each set R e 7?,mm do
Add a new reaction 17R to the network with

Prod(fR) :2 Prod(r),
Int(fR) :2 Int(R) U Int(r);
Subs(fR) :2 (Subs(R) U Subs(r)) \ Int(fR),

Remove r from the network

 

2480

112 /310's112u1n0fp101x0'sonuIJOJIIIOIq/ﬁduq 111011 pap1201um0q

9103 ‘0g isnﬁnv uo ::

Algorithms and complexity of enumerating minimal precursor sets

 

LEMMA 11. Let r e 7?, be a reaction of the network G and let G/
be the network that results from applying the procedure
Replace(r). Then, X is a precursor set of T in G and only  X
is a precursor set of T in G/.

PROOF. The factories in G which do not include r are factories
also in G/. Let F g 7?, be a factory from X to T in G which
contains r. Clearly, F must contain a set R e 7?,m,,,(r). Thus,
the set F/:FU{17R}\{r} is a factory from X to T in G/.
Conversely, if F l is a factory from X to T in 0 containing the
set Rnew : {17R,,...,17Rk} of new reactions added by
Replace(r), then F: (F/ \ Rnew) U {r} U U1; R,- is a factory
from Xto Tin G. D

Algorithm Ns: network shortcutting

We deﬁne a new algorithm ns to compute all precursor sets of
a target T based on reaction replacement. The following
preprocessing of the network is required: a new metabolite t
and a new reaction r, are created, such that Subs(r,) : T and
Prod(r,) : {t}. Clearly, the minimal precursor sets of {t} are
exactly the minimal precursor sets of T.

Starting from r :: r,, Ns traverses the network in the same way
that TRD does. However, instead of computing the minimal so-
lutions, Ns goes deep in the recursion until ﬁnding a reaction r
satisfying the following two conditions: (a) not all substrates of r
are in the base cases and (b) all substrates of all reactions in the
next level of the recursion are in the base cases. When such a
reaction is found, then it is replaced by new reactions.

Successively removing and adding reactions in this way, we
decrease the size of the factories from S to {t}. Finally, the last
reaction removed is r, which is replaced by new reactions produ-
cing t and having only sources as substrates. The sub-
strates of each reaction correspond exactly to a minimal
precursor set of {t}.

Running NS(r,, 0) we obtain a network where the minimal pre-
cursor sets are exactly the substrate sets of all the reactions that
produce t. The network can also contain many other reactions,
but they are not even connected to t.

NS(ro e 7?,, A g C):
M :: Subs(ro);
If M contains a metabolite not in A U S then
For each metabolite m e M \ (A U 8) do
NewA :: A U (M\ {m});
For each r producing m with Subs(r) \ NewA minimal do
NS(r, NewA U Int(r));
Replace(ro);

5 PERFORMANCE ANALYSIS

Extensive tests were performed in order to measure the perform-
ance of the different algorithms on real metabolic networks.
These algorithms were compared for several different singleton
target sets (for instance, amino-acids, metabolites related to the
synthesis of the cell wall, DNA, RNA, membranes, etc.) in seven
networks of different sizes and topologies downloaded from
MetExplore (Cottret et al., 2010b). Ubiquitous metabolites

were ﬁltered out and the split reactions using pairs of co-factors
option was chosen.

We adopted an automatic process to deﬁne the set of sources
based on the topology of the network. A metabolite m is con-
sidered a source if it satisﬁes one of these two conditions: (a) m is
not the product of any reaction or (b) m is involved in only two
reactions corresponding to both directions of an originally re-
versible reaction (i.e. m is substrate in one and product in the
other). The target sets were chosen based on their role:
amino-acids, metabolites related to the synthesis of the cell
wall or DNA, etc.

5.1 Removing bad cycles

There are some cycles that we know a priori that are not realistic
since they are able to produce compounds outside the cycle with-
out the need of any input. In particular, the two directions of an
originally reversible reaction form a cycle which can produce its
metabolites without using any external source. These bad cycles
must be avoided in factories since they may create fake solutions
in which an empty set of metabolites produces the target.

In order to avoid bad cycles in factories, we preprocess the
input network breaking this kind of cycles by removing some
reactions. Specifically, starting from a set M of metabolites con-
taining only the target and an empty set R of reactions, we in-
clude in R a randomly chosen reaction producing a metabolite of
M unless its inclusion generates a bad cycle. The substrates of the
added reactions are included in M. Successively repeating this
process we obtain a network with no bad cycles. Notice that this
process corresponds to a heuristic whose result depends on the
order in which reactions are chosen to be included in R.

5.2 Benchmarks

Table 1 presents an extract of the results for PITUFO, the algo-
rithm described in Cottret et al. (2008) and the two different
algorithms described in this article (TRD and Ns) with and without
the test of minimality. The targets presented are those for which
ﬁnding the minimal precursor sets required more time for the
new algorithms with minimality check. The table shows, for each
network, the size of the sets of metabolites and reactions, and for
each target, the size of the preprocessed network, the number of
precursor sets found and the time in seconds that each algorithm
spent.

All algorithms have been implemented in Java and the running
times were collected using a cluster for the computation and
setting a limit of 1 GB of RAM memory for each process.
Although PITUFO may be fast for small networks, its use is limited
since, as the size of the networks grows, the method takes a long
time to ﬁnish, and for some targets, it does not ﬁnish in the given
time limit of 24h. This already justiﬁes the new methods pre-
sented in this work, since they do not present the same behaviour
for larger networks.

Concerning the minimality check, we may observe that it is not
necessarily true that it improves the running time. In some cases,
doing the check may even lead to worse results (example Yeast,
target FADH2, Ns method), while in others it may have a strong
positive impact on the execution time of the algorithm which
becomes 700 times faster (example, Escherichia coli, target L-as-
partate, TRD method).

 

2481

112 /310's112u1n0fp101x0'sonuIJOJIIIOIq/ﬁduq 111011 pap1201um0q

9103 ‘0g isnﬁnv uo ::

V.Acur'ia et al.

 

Table 1. Runtime (in seconds) for computing minimal precursor sets of three singleton targets in seven different networks using five methods: PITUFO,
TRD without and with the minimality pruning (respectively All and Min) and Ns without and with the minimality pruning (respectively All and Min)

 

 

Network (|C|/ |7?|) PITUFO TRD Ns

Target (|C|/ |7?| after preprocess) A11 Min A11 Min
S. muelleri (75/65)

L-Arginine (33/22) 0.017 0.062 0.02 0.015 0.018
L-Isoleucine (32/21) 0.008 0.069 0.02 0.015 0.016
L-Lysine (31/20) 0.014 0.084 0.019 0.021 0.016
Carsonella Ruddii (114/126)

L-Leucine (86/56) 0.005 0.106 0.046 0.035 0.047
L-Isoleucine (83/49) 0.055 0.105 0.032 0.036 0.040
L-Valine (83/49) 0.037 0.091 0.030 0.028 0.035
B. cicadellinicola (236/229)

Octapremyl diphos, (149/160) 0.726 0.283 0.209 0.221 0.195
Tetrahydrofolate (148/149) 0.337 0.227 0.170 0.237 0.179
Heme-O (150/161) 1.164 0.319 0.208 0.217 0.172
B. aphidicola (396/338)

Pyruvate (219/87) 0.082 0.131 0.105 0.105 0.104
dGTP (206/76) 0.099 0.138 0.126 0.118 0.101
UTP (219/87) 0.113 0.117 0.099 0.148 0.104
Yeast (703/1010)

FADH2 (444/314) * 14.39 5.55 7.27 14.55
L-Histidine (415/269) * 5.55 4.80 5.02 6.62
L-Aspartate (410/ 274) 176.40 4.53 4.65 4.82 4.66
Human (997/1225)

L-Alanine (710/359) 5058.27 5.15 3.34 10.76 10.78
Seriapterine (698/329) * 3.19 2.96 6.85 2.88
L-Cysteina (150/161) 5579.85 3.32 3.32 4.22 3.17
E. coli (1010/1164)

L-Aspartate (714/507) * 2139.01 3.32 10.57 47.72
L-Metionine (737/545) * 632.20 13.62 14.08 14.17
Glycine (706/503) * 553.21 11.55 11.01 13.90

 

All methods were applied to the same preprocessed network on each target. In the cases marked ‘*’, the algorithm did not ﬁnish within 24h. For each target, the size of
metabolites and reactions after bad cycle deletion is indicated.

Notice also that as the size and complexity of the networks
increase, the number of different minimal precursor sets found
increases also, and it does this at a rate faster than the increase of
the time needed to compute them.

5.3 Computing solutions for several preprocessed
networks

As mentioned before, the network free of bad cycles that is given
by the heuristic proposed depends on the order in which reac-
tions are added to R. Thus, different orders can generate differ-
ent minimal precursor sets. To recover as many solutions as
possible, we can repeat the search for precursors on several dif-
ferent results of the preprocessing part. In order to analyse the
effect of this heuristic on the algorithms, we successively repeated
this random process while computing, at each repetition, the
number of new precursor sets obtained. The process stops

Table 2. Computation of minimal precursor sets of the E. coli network
for three targets, using several different preprocessed networks

 

 

Target Convergency Prec. Iteration reaching
sets X % of Prec. sets
Iteration Time (s) 25% 50% 80% 95%
L-Aspartate 71 3128 267 1 6 49 57
L-Metionine 94 2738 399 1 5 46 80
Glycine 73 2693 242 1 4 19 56

 

Each iteration corresponds to repeating the heuristical random preprocessing and
computing the minimal precursor sets using trd with minimality. For each target, we
show the iteration where the convergence is reached, the time required, the total
number of different minimal precursor sets (at the convergence), and the iterations
in which a given percentage of this total number of solutions is recovered.

 

2482

112 /310's112u1n0fp101x0'sonuIJOJIIIOIq/ﬁduq quIi pap1201um0q

9103 ‘0g1sn8nv uo ::

Algorithms and complexity of enumerating minimal precursor sets

 

when no new precursor set is recovered in 10 consecutive repeti-
tions. Analysing the results for three different targets of E. coli,
this convergence criterium was reached in <100 iterations. In the
three cases, >50% of the solutions were recovered in the ﬁrst six
repetitions and >80% in the ﬁrst 50 iterations (Table 2).

6 CONCLUSON

Despite the proved hardness of enumerating all precursor sets of
a given target, the algorithms presented in this article can ﬁnd all
solutions for networks of up to around a 1000 reactions. If we
restrict ourselves to the benchmark built for this article, the TRD
method with minimality check is the one that presented the
best behaviour on average. However, the methods vary widely
depending on the target chosen. Our benchmark does not
allow us to conclude which algorithm has a better performance
between TRD with a minimality test and Ns with and without
minimality test for bigger networks. This justiﬁes the utility of
each method individually and leaves an open space for further
improvements.

Funding: This work was partially funded by the following pro-
jects: the French project ANR MIRI BLAN08-1335497, the
French project ANR NEMO ANR-08-BLAN—0304—01, the
ERC Advanced Grant Sisyphe held by Marie-France Sagot,
the INRIA Associated Team SIMBIOSI, the INRIA
International Partnership AMICI, the Dutch NWO-CLS
MEMESA project and the Chilean FONDAP 15090007 project.

Conflict of Interest: none declared.

REFERENCES

Ausiello,G. et al. (1999) Complexity and Approximation: Combinatorial Optimization
Problems and Their Approximability Properties. Springer, Berlin.

Cottret,L. et al. (2008) Enumerating precursor sets of target metabolites in a meta—
bolic network. In Proceedings of the 8th International Workshop on Algorithms in
Bioinformatics ( WABI). Karlsruhe, Germany, September 15717, 2008, Lecture
Notes in Computer Science, 5151, Springer Verlag, Berlin, pp. 233244.

Cottret,L. et al. (2010a) A Graph—based analysis of the metabolic exchanges be—
tween two co—resident intracellular symbionts, Baumannia cicadellinicola and
Sulcia muelleri, with their insect host, Homalodisca coagulata. PLoS Comput.
Biol., 6, e1000904.

Cottret,L. et al. (2010b) Metexplore: a web server to link metabolomic experiments
and genome—scale metabolic networks. Nucleic Acids Res., 38, 1327137.

Feist,A.M. et al. (2009) Reconstruction of biochemical networks in microorganisms.
Nat. Rev. Microbiol., 7, 129413.

Garey,M. and Johnson,D. (1979) Computers and Intractability: A Guide to the
Theory of NP—Completeness. Series of books in the mathematical sciences.
W.H. Freeman, New York.

Gurvich,V. and Khachiyan,L. (1999) On generating the irredundant conjunctive
and disjunctive normal forms of monotone boolean functions. Discrete Appl.
Math, 96—97, 3637373.

Johnson,D.S. et al. (1988) On generating all maximal independent sets. Inform.
Process. Lett., 27, 1197123.

McCutcheon,J.P. and Moran,N.A. (2007) Parallel genomic evolution and metabolic
interdependence in an ancient symbiosis. Proc. Natl Acad. Sci. USA, 104,
19392719397.

Raz,R. and Safra,S. (1997) A sub-constant error—probability low—degree test, and a
sub—constant error—probability PCP characterization of NP. In Proceedings of
the T wenty—Ninth Annual ACM Symposium on Theory of Computing. STOC’97,
pp. 4757484.

Romero,P. and Karp,P.D. (2001) Nutrition—related analysis of pathway/genome
databases. In Pacific Symposium on Biocomputing’OI. pp. 470—482.

Thiele,I. and Palsson,B.O. (2010) A protocol for generating a high—quality
genome—scale metabolic reconstruction. Nat. Protoc., 5, 175(k2799.

 

2483

112 /310's1cu1n0fp101x0'sonuIJOJIIIOIq/ﬁduq quII pap1201um0q

9103 ‘0g1sn8nv uo ::

