Vol. 28 no. 14 2012, pages 1919—1920
APP N doi:10.1093/bioinformatics/bts277

 

Genome analysis

Advance Access publication May 9, 2012

BEDOPS: high-performance genomic feature operations

Shane Neph1’*’l, M. Scott Kuehnlal, Alex P. Reynolds”, Eric Haugenl,
Robert E. Thurmanl, Audra K. Johnson‘, Eric Rynesl, Matthew T. Mauranol,
Jeff Vierstral, Sean Thomasl, Richard Sandstroml, Richard Humbert1 and

John A. Stamatoyannopoulosla2a*

1Department of Genome Sciences and 2Department of Medicine, University of Washington, Seattle,

Washington, DC 98195, USA

Associate Editor: Alfonso Valencia

 

ABSTRACT

Summary: The large and growing number of genome-wide datasets
highlights the need for high-performance feature analysis and data
comparison methods, in addition to efficient data storage and
retrieval techniques. We introduce BEDOPS, a software suite for
common genomic analysis tasks which offers improved flexibility,
scalability and execution time characteristics over previously
published packages. The suite includes a utility to compress large
inputs into a lossless format that can provide greater space savings
and faster data extractions than alternatives.

Availability: http://code.google.com/p/bedops/ includes binaries,
source and documentation.

Contact: sjn@u.washington.edu and jstam@u.washington.edu
Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on September 27, 2011; revised on March 24, 2012;
accepted on May 3, 2012

1 INTRODUCTION

Experimental genomic data and subsequent analysis results are
frequently stored in variations of the browser extensible data
(BED) format (Kent et (11., 2002). Many BED analyses require
set-like operations using genomic coordinates. Others require
nearest-element associations between feature sets and quantitative
calculations across related genomic segments. Simple examples
include selecting transcription factor binding sites >500 base pairs
away from any gene, identifying the closest transcriptional start site
for every putative replication origin and computing the average exon
expression value per gene. The BEDOPS tool suite addresses these
and other typical analysis questions. The suite operates efﬁciently in
memory with BED inputs of any size and number, in sharp contrast
to the BEDTools (Quinlan and Hall, 2010) and feature-rich Galaxy
(Giardine et al., 2005) packages.

Compressing a large ﬁle can save valuable disk space and
facilitate data transfers, typically at the expense of data access
performance. BEDOPS offers high-quality BED compression into
a format that actually reduces access times to the vast majority of
data relative to any sequential processing approach.

 

*To whom correspondence should be addressed.
lThe ﬁrst three authors contributed equally.

2 PRINCIPAL BEDOPS UTILITIES

The BEDOPS suite consists of a small number of ﬂexible command-
line utilities, most of which we introduce here. Several usage
examples are shown in Supplementary Information, while a more
extensive set of examples (with data) is available at the BEDOPS
website. More advanced cases are also included to show various
tools working together in typical pipeline fashion.

To brieﬂy summarize the constituent utility programs, the bedops
utility offers set operations, including union, subset and difference;
closest-features matches nearest elements between datasets; and
bedmap maps source information onto genomically related target
regions and calculates one or more statistics or summaries per
target region. With standard input and output stream support, these
principal utilities can be linked together to create more complex
operations while maintaining efﬁciency and scalability. The starch
utility compresses BED ﬁles into a concise archive format, while its
counterpart, unstarch, streams data from such an archive.

3 PERFORMANCE AND METHODS

Principal BEDOPS utilities require sorted inputs and produce sorted outputs.
Each BEDOPS utility minimizes memory consumption by retaining only
the information required to compute the next line of output. In contrast.
alternative tools load all data from a ﬁle into memory and create an index
before computing results (Quinlan and Hall. 2010). incurring longer run times
and higher memory costs that can lead to failures on large inputs (Fig. la
and Supplementary Fig. S l). The performance disparity between approaches
widens in typical workﬂows. where tools are chained together to form
more complex operations. Connecting two programs with a pipe increases
memory consumption in a simple additive manner. For tools that read all data
into memory. this poses even greater scalability concerns (Supplementary
Fig. 52). In contrast. the memory overhead of principal BEDOPS utilities is
typically independent of data input sizes. Thus. BEDOPS pipelines scale to
dense datasets over a wide range of hardware devices. from modest personal
workstations to high-performance cloud-based servers.

For unsorted data. we provide a speed-optimized sorting utility for data
that ﬁt into memory. as well as a method to sort datasets of any size
(Supplementary Fig. S3 and Supplementary Methods).

BEDOPS offers a data compression format. starch. that achieves a
smaller footprint on disk than popular alternatives. such as compressed
bedGraph or WIG format (Fig. lb). The starch utility transforms a
BED ﬁle into a more compressible form before applying a standard
compression technique (Supplementary Methods). Under the assumption
that chromosomes provide a very natural data partition for many genomics

 

© The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 1919

112 /3.Io's[Bumo[pJOJXO'sotwurJOJurorqﬂ:duq 11101} papBOIII/lAOG

9103 ‘0g1sn8nv uo ::

S.Neph et al.

 

 

 

 

 

(a)
2043 — sen-mos:
mm _ mergelalleduﬂu ‘ 1 — 10000
512 _ mm“ dﬁ/a’ 0’0] — 5000
255 —
A
123 — 069$”; ’yw g
_. ad— ‘I‘ @2‘ I“ “m” m
.L". 69‘ A O a
a: 32 T l «of, 0’ — 500 C1
E 15 - a $5” I 2
I= I a O H
0 — ‘ I of E
I A I E
A T L ‘f o — 100
2 T A 0’ — 50
1 0/
0.5 — I‘ 0’ “00me
025 _ 0‘0-o-o-o-o-o-o-o-o-o-o-c-}_ m
I - I - l - I - I I I - I
2 8 32 123 512 2043 3192

Input file size flunk-rows]

 

 

 

 

 

 

 

 

(b) 55 — — 55
I
50 — — 50
E 45 — w 45
 40 — — 40
u _ had ._
E 35 - . . (Er-1mm” 35
Ta 30 — "'"'--..__ — 30
'0. “"h-
': 25 — x '— 25
e . WIG,varIableStep all .
20 ~ ""'"--0 ' “2 — 20
IS :I—C‘ .
3 15 — . """H-u... — 15
£3 N. .
Ill 10 _ BE 5" ' 1”
I; 5 — °°P55tarch ""--. _
n.
0 — — 0
I ' I ' I ' I
1 100 10000 1000000
29kB 2.9MB 288MB 2363
Input ﬁle size (lit-rows I disk space]
(6)
50000 — — 5000!]
IF: 0
_ Step-b1 ...——- _
10000 wiﬁluana’ﬂif 10000
5000 — . — 5000
~2- a hjhﬂp .#
a '/ “66“ if
_E 1000 — If rwe! ._.....—-. — 1000
E 500 — ' ‘1"sz - 500
.D '10-”
E I .
E
5 1m ' ' ""'--..../ _ 100
5° _ BEDDPSstarth ‘ 50
O
10 — — 10
I I I I I
chrl chr14 chrZD chr6 u:th

Chromosomes [hg19, lexicographic sorting]

Fig. 1. Performance results using subsets of 46-way phyloP (Pollard et al..
2010) human conservation data as inputs. (3) The time and memory resources
used to merge overlapping and adjoining genomic segments as a function
of input size. (b) Compressed ﬁle sizes on disk as a percentage of original
uncompressed sizes. (c) Single-chromosome data extraction times from ﬁles
containing > 2.8 X 109 sorted records. BEDOPS accessed target chromosome
data only. whereas conventional approaches processed inputs sequentially

analyses. the concise starch format is organized around a chromosome-
speciﬁc indexing scheme. enabling fast single-chromosome data extractions
with improved performance even over a sequentially processed BED ﬁle
with no compression (Fig. 1c). BEDOPS also includes bedextract. a utility
that quickly retrieves information by chromosome directly from a sorted
BED ﬁle.

4 FILE FORMATS

BEDOPS supports a relaxed variation of the BED speciﬁcation,
to which several popular formats, including WIG, SAM/BAM
(Li et al., 2009), VCF (Danacek et al., 2011) and GFF
(http://www.sanger.ac.uk/Software/formats/GFF), readily convert
(Supplementary Methods). Thus, data currently stored in any of
these formats can be transformed and analyzed using features offered
by BEDOPS.

5 CONCLUSION

Computing overlap and proximity relationships between datasets is
fundamental to many genomic analyses. Working with large datasets
complicates computations and necessitates scalable solutions. The
BEDOPS suite facilitates common analysis tasks and ﬁlnctions
efﬁciently with inputs of arbitrary size. The suite also includes
efﬁcient data storage and retrieval techniques to help manage and
query sizable datasets.

F unding: National Institutes of Health Grants (1U54HG004592 and
5U01ES017156).

Conﬂict of Interest: none declared.

REFERENCES

Danacek,P. et at. (2011) The variant call format and VCFtools. Bioinformaties, 27,
215G268.

Giardine,B. et at. (2005) Galaxy: a platform for interactive large-scale genome analysis.
Genome Res., 15, 145171455.

Kent,W.J. et at. (2002) The human genome browser at UCSC. Genome Res., 12,
99671006.

Li,l-l. et al. (2009) The sequence alignment/map format and SAMtools. Bioinformaties,
25, 207872079.

Pollard,K.S. et al. (2010) Detection of nonneutral substitution rates on mammalian
phylogenies. Genome Res., 20, 1107121.

Quinlan,A.R. and Ha11,I.M. (2010) BEDTools: a ﬂexible suite of utilities for comparing
genomic features. Bioinformaties, 26, 8417842.

 

1 920

112 /3.Io's[Bumo[pJOJXO'soIJBurJOJquIqﬂ:duq wort pepeolumoq

9103 ‘0g1sn8nv uo ::

