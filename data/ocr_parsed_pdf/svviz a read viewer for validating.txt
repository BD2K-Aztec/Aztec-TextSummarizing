Bioinformatics, 31124), 2015, 3994—3996

doi: 10.1093/bioinformatics/btv478

Advance Access Publication Date: 18 August 2015
Applications Note

 

Sequence analysis

svviz: a read viewer for validating structural
variants

Noah Spies1'2'3'*, Justin M. Zook4, Marc Salit3 and Arend Sidow1'2

1Department of Genetics, Stanford University, 2Department of Pathology, Stanford University, 3Genome Scale
Measurements Group, National Institute of Standards and Technology, Stanford, CA, USA and 4Genome Scale
Measurements Group, National Institute of Standards and Technology, Gaithersburg, MD, USA

*To whom correspondence should be addressed.
Associate Editor: Inanc Birol

Received on May 15,2015; revised on July 20, 2015; accepted on August 10, 2015

Abstract

Summary: Visualizing read alignments is the most effective way to validate candidate structural
variants (SVs) with existing data. We present svviz, a sequencing read Visualizer for SVs that sorts
and displays only reads relevant to a candidate SV. svviz works by searching input bam(s) for po—
tentially relevant reads, realigning them against the inferred sequence ofthe putative variant allele
as well as the reference allele and identifying reads that match one allele better than the other.
Separate views ofthe two alleles are then displayed in a scrollable web browser view, enabling a
more intuitive visualization of each allele, compared with the single reference genome—based view
common to most current read browsers. The browser view facilitates examining the evidence for
or against a putative variant, estimating zygosity, visualizing affected genomic annotations and
manual refinement of breakpoints. svviz supports data from most modern sequencing platforms.

Availability and implementation: svviz is implemented in python and freely available from http://

 

svviz.github.io/.
Contact: nspies@stanfo rd.edu

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

The human eye has an unparalleled ability to identify patterns from
visual representations of data. Although the identification of muta-
tions from high-throughput sequencing has been largely automated,
visual inspection of putative variants using tools such as the integra-
tive genomics viewer (IGV; Robinson et (11., 2011) remains an im-
portant step in ensuring the quality and relevance of these variant
calls. However, existing read visualizing tools such as IGV are
largely constrained by a reference-genome-centric display model.
Hence, point mutations can he represented easily as mismatched
hases within sequencing data but more complex structural variants
(SVs) including insertions, deletions, translocations and inversions
are more difficult to parse visually against the linear reference gen-
ome sequence. Newer tools are able to represent short indels within
sequencing data but do not help in representing larger SVs
(Edmonson et (11., 2011; Gymrek, 2014).

Support for SVs can be displayed within IGV by highlighting
reads with certain characteristics, including read-pairs mapping to
distant regions of the genome or in unexpected orientations, or trun-
cated alignments. However, it is difficult to identify from these high-
lighted, discordantly mapping reads whether they all agree with a
putative variant, and if so, which variant. Furthermore, IGV relies
on the quality and completeness of the alignments provided in input
BAM files, which are produced en masse against a huge reference
genome and hence may not optimally represent read support for a
given variant. Finally, most existing viewers (a notable exception
being TargetSquiew; Halper—Stromberg et (11., 2014) show all read
data in the vicinity of a putative SV, making it difficult to discrimin-
ate reads supporting the SV, reads supporting the reference allele
and reads that are not relevant to an SV.

To overcome these limitations, we present svviz, a read visu-
alizer for SVs that sorts and displays only reads relevant to the

Published by Oxford University Press 2015. This work is written by US Government employees and is in the public domain in the US. 3994

/310‘slcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

Bentley
Cl .21., 2008
Bid El (1]., 2009

Supplementary Figure 51

No reads found

A51?
245‘:

155

Zhao cl (1].,
2013

 

Ilalper-Stromherg cl (1]., 2014

Zook cl (1]., 2014

 

 

/810'sleumo'fp1oixo"sotmuuogutotqﬂ:duq

3996

N.Spies et al.

 

colored maroon and blue, suggestive of a SV but difficult to interpret
as an inversion.

Additional visualization examples are shown in the supple—
ment: a putative 1200 bp deletion for which svviz shows very lit—
tle supporting evidence, and which we thus estimate is a false—
positive (Supplementary Fig. S2); an inversion with PacBio reads
spanning both breakpoints (Supplementary Fig. S3); svviz being
used to refine imprecisely called breakpoints (Supplementary Fig.
S4); a mobile—element insertion (Supplementary Fig. S5); a fusion
gene present in a cancer sample but not the matched normal
sample (Supplementary Fig. S6); a heterozygous deletion with
reads in flanking regions shown to demonstrate the reduction in
read coverage within the deletion (Supplementary Fig. S7) and a
screenshot of the web view, zoomed in to show a single nucleo—
tide polymorphism (SNP) present only in the alternate allele
(Supplementary Fig. S8).

3.1 Usage

svviz can be installed on OS X and Linux using the single command
‘sudo pip install svviz’ (requires python and pip to be installed; see
the online documentation at http://svviz.github.io/ for detailed in—
stallation instructions). It takes ~10—305 to analyze and visualize a
single variant in a single sample on a 2014 Mac Pro. The number of
samples that can be visualized simultaneously is limited only by
practical concerns; processing time scales with the number of sam—
ples and reads as well as the size of the variant and lengths of the
reads.

The inversion shown in Figure 1 can be visualized using the
command ‘svviz demo” and the mobile—element insertion in
Supplementary Figure S5 can be visualized using the command
‘svviz demo 2’.

Acknowledgements

The authors thank the Genome in a Bottle Consortium and Complete
Genomics for making the data publicly available. Certain commercial equip-
ment, instruments or materials are identiﬁed in this document. Such identiﬁ-
cation neither does imply recommendation or endorsement by the National
Institute of Standards and Technology nor does it imply that the products
identiﬁed are necessarily the best available for the purpose.

Funding

NS was funded by a National Research Council Postdoctoral Fellowship.

Conﬂict oflnterest: none declared.

References

Bentley,D.R. et al. (2008) Accurate whole human genome sequencing using re-
versible terminator chemistry. Nature, 456, 53—59.

Edmonson,M.N. et al. (2011) Bambino: a variant detector and alignment
Viewer for next-generation sequencing data in the SAM/BAM format.
Biomformatics, 27, 865—866.

Eid,]. et al. (2009) Real-time DNA sequencing from single polymerase mol-
ecules. Science, 323, 133—138.

Gymrek,M. (2014) PyBamView: a browser-based application for Viewing
short read alignments. Bioinformatics, 30, 3405—3407.

Halper-Stromberg,E. et al. (2014) Visualization and probability-based scoring
of structural variants within repetitive sequences. Bioinformatics, 30,
15 1 4—15 21.

Robinson,J.T. et al. (2011) Integrative genomics viewer. Nat. Biotechnol., 29,
24—26.

Zhao,M. et al. (2013) SSW library: an SIMD Smith-Waterman C/C++ library
for use in genomic applications. PLOS One, 8, e82138.

Zook,].M. et al. (2014) Integrating human sequence data sets provides a re-
source of benchmark SNP and indel genotype calls. Nat. Biotechnol., 32,
246—25 1.

/3.IO'S[EIIm0[p.IOJXO'SOIJEIIIJOJIIIOIq/ﬂduq

