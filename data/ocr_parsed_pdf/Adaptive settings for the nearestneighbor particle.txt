Advance Access Publication Date: 4 December 2014

Bioinformatics, 31 (8), 2015, 1279—1285
doi: 10.1093/bioinformatics/btu793

Original Paper

 

 

Bioimage informatics

Adaptive settings for the nearest-neighbor

particle tracking algorithm

Javier Mazzaferri1'*, Joannie Roy1, Stephane Lefrancois1'2 and Santiago

(Zostantino1'3

1Centre de Recherche de l'H6pital Maisonneuve-Rosemont, Montréal, Canada H1T 2M4, 2Département de
Médecine, Université de Montréal, Montréal, Canada H3T 3J7 and 3Département d'Ophtalmologie et Institut de

Génie Biomédical, Université de Montréal, Montréal, Canada H3T 1J4

*To whom correspondence should be addressed.
Associate Editor: Robert F. Murphy

Received on May 5, 2014; revised on October 29, 2014; accepted on November 25, 2014

Abstract

Background: The performance of the single particle tracking (SPT) nearest—neighbor algorithm is
determined by parameters that need to be set according to the characteristics of the time series
under study. Inhomogeneous systems, where these characteristics fluctuate spatially, are poorly

tracked when parameters are set globally.

Results: We present a novel SPT approach that adapts the well—known nearest—neighbor tracking
algorithm to the local density of particles to overcome the problems of inhomogeneity.

Conclusions: We demonstrate the performance improvement provided by the proposed method
using numerical simulations and experimental data and compare its performance with state of the

art SPT algorithms.

Availability and implementation: The algorithms proposed here, are released under the GNU
General Public License and are freely available on the web at http://sourceforge.net/p/adaptivespt.

Contact: javier.mazzaferri@gmail.com

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

Single particle tracking (SPT) has become an essential tool to charac—
terize movement in live cell imaging experiments (Meijering et al.,
2012). Typical applications span the dynamics of single molecules
within the cell membrane (Weigel et al., 2011), cell migration
(Suraneni et al., 2012) and intracellular trafficking (Akita et al.,
2010; Mazzaferri et al., 2013). SPT methods extract the individual
trajectories of objects registered in time—lapse images and provide in—
formation about both their individual and collective behavior.
Although several studies track objects manually, the big leap for
exploiting this technique has been brought by automatic multiple—
tracking algorithms, because they can process large number of ob—
jects simultaneously (Kalaidzidis, 2009).

The vast majority of the implementations separate particle detec-
tion, i.e. the identification and location of particles in each image of
the time series, from tracking. The latter assigns particle positions

that result from detection, to individual trajectories. The simplest
tracking approach, often named nearest neighbors, is based on mini—
mizing the distance travelled globally by all particles. That is, object
locations that are close enough in space and time are assigned to the
same trajectory. However, the sole criterion of proximity is not
enough under challenging experimental conditions. Tracking
densely packed objects, and particles that merge, split or blink,
requires additional information to uncover the real underlying
tracks. In recent years, several methods have been proposed to ad—
dress several of these shortcomings, which have been reviewed in
detail (Kalaidzidis, 2009; Meijering et al., 2012). Typically, these
methods employ sophisticated image processing and statistical
tools, as well as a priori knowledge about the systems, to overcome
clutter, noisy detection and eventual particle disappearance.
The downside of methods that assume specific dynamical models
is that they can bias the tracking results if they are used early on

©The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 1279

112 /310'S[BIIJHO[pJOJXO'SOlJBLUJOJIIlOlq”K1111] r1101} papeolumoq

9103 ‘Og anﬁnv uo ::

1280

J. Mazza ferri et al.

 

systems where the dynamics is still unknown (Supplementary Note
S5). In such cases a more secure procedure is to start the analysis
with a conceptually simple tracking approach, such as the nearest—
neighbor algorithm.

Regardless of how complex the method, its performance relies
invariably on tuning accurately a set of parameters, which depend
on the experimental details of the system (Chenouard et al., 2014).
If the features of the system fluctuate spatially it is unlikely that a
unique set of parameters are optimal across the entire image.
Systems such as, neutrophil migration assays, intracellular traffick—
ing of vesicles, particles diffusing in media with heterogeneous vis—
cosity, and tracking of receptors unevenly distributed on the cell
membrane are examples where this problem is particularly import—
ant (Manley et al., 2008; Valentine et al., 2001). Typically, this is
partially addressed by limiting the analysis to small regions of inter—
est, where conditions are approximately homogeneous. However, if
trajectories are long, this workaround cuts tracks and biases the de—
scription of the system’s dynamics.

In this work, we propose a new SPT method for inhomogen—
eous systems that adapts automatically to the local density of par—
ticles, based on the popular nearest-neighbor tracking algorithm.
One of the most cited and used nearest—neighbor algorithms was
proposed by Crocker and Grier (C&G) 1996), and has a simple
code and free open source implementations in IDL, Matlab, Phyton
and Image] (Bricard et al., 2013; Lund and Wustner, 2013; Manley
et al., 2008; Theves et al., 2013). Despite its simplicity, a method
based on this algorithm (Celler et al., 2013) has shown to render a
good performance in a recent study that makes a widespread and
quantitative comparison of SPT techniques (Chenouard et al.,
2014)

Nearest—neighbor algorithms minimize the global displacement
of the particles, and thus need to consider all possible combinations
of particle positions from one frame to the following, which can be
computationally too expensive. Therefore, it is necessary to intro—
duce a parameter called maximum displacement (mD), which repre—
sents the largest distance that a particle can move from one frame to
the next one, to discard unlikely bonds and reduce the computation
time. If this parameter is not carefully adjusted according to par—
ticles’ speed and their density, either the trajectories are interrupted
or the computation time is prohibitive. Therefore, in systems
where particle density is inhomogeneous, there is no global value
of mD that can be optimal everywhere. The method we propose
is especially well suited for this kind of problem. We perform a sys—
tematic analysis of the problem, based on numerical simulations, as
well as a thorough comparison of the proposed method with the
standard nearest—neighbor algorithm. We finally demonstrate the
advantage of applying the adaptive method to the classic under—
agarose neutrophils migration assay (Nelson et al., 1975; Sackmann
et al., 2012).

2 Methods
2.1 Tracking algorithm and mD

Tracking algorithms identify which locations at frame t, and t,+1
correspond to the same particle. In nearest-neighbor methods, this
correspondence is established by creating unique bonds between
particle locations based on proximity. These algorithms consider all
possible assignments and choose the combination that yields the
minimal total displacement for all particles. However, if each frame
holds P particle positions, the network of bonds has O(P!) possible
combinations, which makes the solution impractical even for small
values of P (Fig. 1A).

 

 

 

100

Cdf(%)
or
o

 

 

 

2 4 6 8 10 12

Fig. 1. Nearest-neighbor bond assignment: (A) The assignment of exclusive
bonds between P locations at consecutive frames is computationally expen-
sive because there are 0(P!) possible combinations to consider. (B) Using the
search radius mD, the algorithm only needs to consider bonds that are
shorter than mD, thus significantly reducing the number of combinations to
O(Pln(P)). (C) The value of mD can eventually be reduced to improve further
the computation time. (D) If m0 is smaller than the typical one-frame dis-
placement of the particles, most bonds are discarded and the trajectories are
interrupted. (E) Top: schematic probability density functions (pdfs) for 6 and
0/2. Bottom: cumulative density functions corresponding to the distributions
above. Shaded regions below each distribution illustrates the trade off made
when setting a value for mD(vertical dashed line). In this example, due to the
overlap between distributions, for mD:7 pix, 99.8% of real bonds are de-
tected (vertical lines shadow) at the cost of also detecting 16% of spurious
bonds to neighboring particles (horizontal lines shadow)

As a workaround, nearest—neighbor methods limit the possible
bonds to only those that are shorter than the preset parameter ‘mD’
(Fig. 1B, dashed circle). In this way, the problem is reduced to solve
a set of smaller sub—networks, where the number of combinations re—
duces to O(P ln(P)), that has a significantly lower computational
cost (Crocker and Grier, 1996).

However, mD has to be set wisely. It has to be small enough
to discard false bonds, but large enough to detect all bonds
that represent real particle displacements. It has been suggested that

112 £10slouino[pioixo'sormuuogurorq//:dnq r1101} papmjumoq

9103 ‘Og anﬁnv uo ::

Adaptive settings for the nearest—neighbor particle

1281

 

the optimal magnitude of mD (Crocker and Grier, 1996) should
satisfy:

D
(S<WZD<E7 

where 5 is the typical displacement of the particles during one frame
(particle velocity times inter—frame interval), and D is the typical in—
ter—particle distance. The first inequality ensures that real particle
steps are detected, and the second inequality discards spurious bonds
to nearby particles.

In practice, particle speeds (5) are typically unknown a priori
and it is customary to set mD as large as possible to minimize the
risk of missing fast displacements. Although this strategy do not dis—
card spurious bonds, while 5 < D the algorithm will make the right
connections. The real problem is that increasing mD boosts the
number of candidate bond combinations, and computation time be—
comes too long. Figure 1A—D depicts the effect of different mD
choices on the configuration of candidate bonds: while an overesti—
mated mD yields an excessive number of bond combinations
(Fig. 1A), when mD is too small trajectories are interrupted because
real particle displacements are excluded (Fig. 1D). In summary, mD
is typically chosen as large as possible while computation time re—
mains practical.

Additionally, both 5 and D ﬂuctuate from particle to particle
and in time, and they are distributed as schematized in Figure 1E. If
the 5 and D distributions are well separated, a value of mD between
them is enough, but when they overlap a trade—off is required (see
Fig. 1E and F). When the overlap of these distributions is extensive,
the system is ill—conditioned because the computationally affordable
value of mD is not large enough for all 5, and some trajectories will
necessarily be interrupted.

Specifically, the systems where D is spatially inhomogeneous are
challenging for tracking because dense regions broaden and shift the
D/2 distribution to the left, increasing the overlap and hampering
the performance. Although this limitation originates from dense re—
gions, the impact on performance is ubiquitous, because mD is
chosen globally.

2.2 Locally adaptive SPT

Instead of using a global value of mD to determine the set of candi—
date bonds, we propose to build a function mD(x,y,t), that adapts to
local space and time ﬂuctuations of the nearest—neighbor distance
D(x,y,t). In this way, we restrict the length of candidate bonds
mostly within crowded regions, where it is more necessary, but
allow particles in low density regions to make longer bonds.

In order to satisfy the needs of high—content studies, we propose
an algorithm that computes mD(x,y,t) from previously detected par—
ticle locations {(xi, 3),, t,-)}. In order to keep computation time prac—
tical, the algorithm chooses mD(x,y,t) to render a number of
candidate bonds combinations (CBC) that the computer system can
process in viable time.

We set mD,-2 mD(x,-,y,~,t,~) at each particle location to be propor—
tional to the distance to the nearest—neighbor particle Di: D(x,-,y,~,t,~)
(see Fig. 2A and B). However, fast fluctuations of D yield unneces—
sary oscillations of mD, that can be avoided by replacing D,- with an
averaged version

134496730: <{Di/(xir3’i) E B(xryr¢>) AVti}>

where B (x,y, (1)) is a circular neighborhood centered at (x,y) of diam—
eter <1). The operator <.> indicates set average.

 

 

mD [pix]

N

 

 

 

Fig.2. (A) Unevenly distributed particles. (B) Color coded example of function
mD for particles in (A), 01:1, and mDmax: 12 pixels. (C) Bond sub-networks
for a specific mD function at two consecutive frames. Lines of the same color
denote bonds in the same sub-network. Unconnected particle positions are
due to either bonds longer than mD,-or trivial one-to-one bonds

The number CBC for a given mD(x,y, t) depends, not only on the
number of bonds, but also on how they intertvvine with one another
in sub—networks (Fig. 2C). Because the tracking algorithm solves
these sub—networks sequentially, what ultimately limits CBC is the
size of the largest sub—network.

Because the quantity and structure of the sub—networks are hard
to predict, we approached the selection of mD(x,y,t) using an heuris—
tic and exhaustive method. We introduce a multiplicative factor or to
scale D4, at each frame, so that

mD(xryr t) : “(t)D¢(-xry)

Then, for each pair of consecutive frames we search iteratively
the value of or for which the largest sub—network has the size of CBC.
For an Intel Core i7—4770K processor running Matlab under linux
OS, CBC : 5 X 104 ensures that they can be processed in a few mi—
nutes, but this is a parameter that has to be set according to the
available computing power.

A bisection algorithm is used to choose the value of or that ren—
ders a number of combinations as near as possible to predefined tol—
erance. For each candidate value of or, the whole set of candidate
bonds is restricted to include only those shorter than mD, and all
uniquely determined one—to—one bonds are discarded. Then, remain—
ing bonds that are connected to each other by sharing a starting or
ending position, are ﬂagged as belonging to the same sub—network
(Fig. 2C). We estimate the number of combinations for each sub—net—
work by multiplying the number of candidate bonds for each par—
ticle in the sub—network as:

11:, #({br})

where P is the number of particle positions that belong to the sub—
network, {b,-,-} is the set of candidate bonds starting in position i and
ending in j, and #(.) denotes set cardinality.

To always ensure track termination, we constrain mD so that it
never exceeds the parameter mDma.X that is determined by visual in—
spection of data.

112 /310'S[BIIJHO[pJOJXO'SOIJ’BLUJOJIIIOICI”K1111] r1101} papeolumoq

9103 ‘Og anﬁnv uo ::

1282

J. Mazza ferri et al.

 

At the end, we use mD(x,y,t) to reduce the set of candidate bonds
with which the CSCG algorithm builds the trajectories.

2.3 Performance assessment of tracking

In order to evaluate quantitatively the performance of tracking algo—
rithms we compared their outcomes against a set of numerically
simulated trajectories T;a : {(xf,yf,t), t : 1.. .Fk, which we con—
sider ground—truth (GT). For each test, a set {Trak : 1.. .N} of N
trajectories is produced, where each one is a sequence of particle
locations along F]z time points. The initial coordinates for all trajec—
tories are homogeneously distributed in a hexagonal lattice with in—
ter—particle distance D (Fig. 3A). Each trajectory evolves with
normally distributed step sizes (mean value <5> and standard devi—
ation 05), during FmX frames or until it exceeds the image bounda—
ries. Also, the direction of movement changes from frame to frame a
certain amount 0 that is uniformly distributed between 0 and 21:.
Pseudo random number generation is done with the Matlab
(R2013a) implementation of Mersenne Twister algorithm, using
specific initialization seeds in order to make the simulations
repeatible.

All the locations {(x,y, t/x,y, t) E T;a /\ T;a E G}, without repeti—
tions, are processed with the tracking algorithm under analysis, ren—
dering the estimated trajectories E : {T,,, q : 1. . .M}. Because our
study focuses only on the tracking step of SPT, we concentrate on
evaluating the performance of making bonds between locations, and
not in the detection of objects. To this end, we represent the trajecto—
ries in G and E as a sequence of bonds T;a : {b5}, where b,,- repre—
sents the bond between locations (xf, yf, i) and (ac/’9, yf, i).

To characterize the tracking performance at the level of individ—
ual bonds we computed the number of them present in the G that
are not in E (false negatives), and the number of bonds in E that are
not present in the G (false positives). Additionally, to measure the
ability to estimate whole trajectories, we computed the average

lTl
f—<TZ> (2)

where T1z E G, Tq is the longest (in time) and continuous segment in

tracked fraction

E that matches T12. Operator  denotes duration in frames. Angle
brackets indicate average over G. Because our analysis does not in—
volve detection uncertainties, there is no ambiguity determining the
matching locations between T, and T1,.

3 Results and discussion

3.1 Tracking performance is determined by mD

The tracking performance of nearest—neighbors algorithms is
strongly affected by the choice of mD. To explore this, we numeric—
ally simulated trajectories of particles with parameters <5> : 4 pix,
a‘; : 1 pix, N : 400 particles, Frmx : 100 frames, and D : 24 pixels
(Fig. 3A). We process them with the standard CSCG algorithm
(Crocker and Grier, 1996) implemented in Matlab (Mathworks,
Inc.) using several values of mD (Fig. 3B and C). For mD above 7
pix, the performance of the tracking shows a plateau, but below this
value the performance decreases: There are more false negatives and
the average tracked fraction f gets smaller. This effect can be ex—
plained by comparing the value of mD with the particle step distri—
bution (Fig. 3C, bottom panel). The value mD:7 pix represents
<5> + 3 (7,5, that is >99% of particle possible steps, so most of the
real bonds are detected and the performance is almost optimal. On
the contrary, as mD gets smaller than <5> + 3 a5, a greater fraction

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

C D
100 100
— False —
— False +
80 —f 80
60 /i 60
a\“ ¢\"
40 40
20 20
_—
0
04 pdf ( 5 )
0.2
0 ..
2 4 6 8 10 12 6 8 10 12
mD [pix] DIZBI'XI

Fig. 3. Performance of nearest-neighbors algorithm versus m0 and inter-par-
ticle distance. All trajectories sets Gwere numerically generated with n: 400,
Fm“: 100 frames,<6> : 4 pixels, 05:1 pixel and several values of inter-par-
ticle distance D. (A) Distribution of particles at t:0 for 0:24 pixels. (B)
Snapshot trajectories Eobtained with C&G algorithm using mD: 12 pixels at
frame 40 for the same time series of (A). (C) Descriptors of tracking perform-
ance on trajectories generated with 0:24 pixels versus mD used by C&G al-
gorithm (top panel), and pdf of 6 (bottom panel). The green vertical line
indicates percentile 99.7% of 6. Error bars indicate the SD for time series gen-
erated with seeds 2, 4—8, 10 and 12—14. (D) Descriptors of tracking perform-
ance versus D/2 (top panel). Each set of trajectories was tracked with mD
computed with the automatic algorithm described in Section 2.2 by setting
D¢(X,y) constant and choosing the minimal or among all frames (bottom
panel). Error bars indicate the SD for time series generated with seeds 1—10

of the particles get out of the search radius and the performance de—
creases (see also Fig. 1E).

In summary, the performance gets better by increasing mD, but
this also requires longer computation time because a larger number
of linking candidates fall inside the search radius. Additionally, com—
putation time grows when particles get near one another. Therefore
the choice of mD is also related to the interparticle distance
(Equation 1). To study this, we generated time series, similar to
those above, but in this case we varied the interparticle distance D.
We performed particle tracking on each time series, computing mD
with the algorithm described in Section 2.2 by setting D4, (x,y) con—
stant and choosing the minimal or among all frames (Fig. 3D, bottom
panel). In the top panel of Figure 3D, we plotted the performance
descriptors versus the inter—particle half distance. The inter—particle
distance has a strong impact, not only on the false negatives percent—
age, but also on the false positive fraction. In fact, as the inter—par—
ticle distance gets smaller, mD has to be reduced in order to keep
computation time low, what yields an increase of false negatives.
Additionally, as particles get too close to each other, the probability
of making bonds to nearby trajectories is larger, resulting in more
false positives.

112 /310's1rzu.rn0[p.rq1x0'sopeuiJOJutotq/ﬁduq r1101} pap1201umoq

9103 ‘0g15n8nv uo ::

Adaptive settings for the nearest—neighbor particle

1283

 

In summary, when the particles are densely distributed, two ef—
fects limit the tracking performance: higher false negatives (and
lower tracked fraction 1‘) produced by smaller values of mD, and
higher false positives due to more frequent bonds to nearby par—
ticles. The latter is an intrinsic problem of time series where the in—
ter—particle half distance is similar to the typical particle step.
Algorithms that use more sophisticated criteria for assigning bonds
can improve the performance in these cases (Jaqaman et al., 2008;
Serge et al., 2008).

3.2 Tracking performance is low for inhomogeneous
distributions of particles
The effects mentioned above are also observed when only part of the
image has densely packed particles. In such cases, the regions of
high density limit the maximum value of mD, and this has an impact
in the performance of the tracking everywhere. To study such sys—
tems, we simulated time series in which the particle density varies
along the horizontal coordinate x (see Fig. 4B—D). We generated
such movies by modifying the initial position of trajectories with a
gamma transformation applied to x coordinates of all particle pos—
itions (Equation 3, Fig. 4A):

x, Z  /(xmax _ xmin) + xminr 

(xmax _ xmin)

where x is the horizontal coordinate of the particles in an homoge—
neous distribution (Fig. 3A), xmin and 3cmX are the minimum and
maximum values of x, and x’ are the transformed x coordinates of
particles. We generated time series with parameters similar to those
studied in Section 3.1 for several values of y.

We tracked each one of them with the standard CSCG algorithm
and plot the performance descriptors versus v in Figure 4E (top,
solid lines and Supplementary Video S1). For each movie we com—
puted the global value of mD (Fig. 4E, bottom) with our automatic
algorithm by setting D4,(x, ) constant and choosing the minimal or
among all frames.

For the homogeneous case (v : 1) both false negatives and false
positives are ~3.5% while the mean tracked fraction f is 63%.
However, the performance progressively worsens as v increases be—
cause the region on the left of the image becomes crowded with par—
ticles, which force the automatic algorithm to choose smaller values
of mD (Fig. 4E, bottom).

3.3 Adaptive algorithm improves tracking performance
The decrease of performance observed on inhomogeneous systems
(Fig. 4E, top panel) can be mostly explained by the small values of
mD (Fig. 4E, bottom panel) imposed by the regions of high density
of particles. The effect is similar to the one observed in dense sys—
tems (Fig. 3D) but the tracking in the inhomogeneous system can be
improved because the particles located on the right are sparse
enough to afford larger mD. We propose using the spatially adaptive
approach for optimizing the value of mD locally, according to the
local density of particles. To test this idea, the same set of time series
processed with the standard algorithm (Fig. 4E, solid lines), was pro—
cessed with the adaptive algorithm described in Section 2.2 (Fig. 4E,
dashed lines, and Supplementary Video S2). The parameter (1), was
set equal to 10 pixels (see Supplementary Note S4).

Although the overall performance is reduced as v increases, it is
clearly better than for the standard algorithm. The difference be—
tween the two approaches shows mostly in the false negatives frac—
tion and the tracked length, although there is also a slight
improvement on the fraction of false positives. This is consistent

with the fact that the performance improvement for the adaptive al—
gorithm is mostly due to better matching between mD and the local
particle density.

In Figure 4F we plot the performance descriptors for both track—
ing methods within different spatial regions for inhomogeneous time
series with v : 6. Essentially, the trajectories studied in Figure 4E,
are now analyzed within five intervals of x: R1 : [0, 20), R2: [20,
40), R3 : [40, 60), R4: [60, 80) and R5 : [80, 100], for values of x
expressed in percentage of 3cmX (Fig. 4D). Although in R1, the per—
formance improvement is modest because particles are densely
packed in R5 the improvement is dramatic. Due to the ability of
adapting the value of mD to the local density, the tracking perform—
ance in the sparse regions on the right of the image are not limited
by the high density of particles that happens on the left. In this way,
the performances are greatly optimized.

In order to test the adaptive algorithm in typical challenging con—
ditions, and to compare its performance with state of the art meth—
ods, we used the tools developed for the SPT challenge (Chenouard
et al., 2014). The results, described in Supplementary Note S1, show
that the adaptive method, using a simple detection algorithm
(Supplementary Note S2), presents a performance that is fairly com—
parable with state of the art SPT methods. However, these tests are
not designed to evaluate performance under inhomogeneous condi—
tions, which is the main advantage of the proposed method.
Additionally, we compared the adaptive algorithm with u—track
tracking which has open source code (Jaqaman et al., 2008). This
analysis, described in Supplementary Note S6 shows that u—track
performs very similarly to the adaptive algorithm for systems similar
to those in Figure 4E, although it shows a small improvement for
very inhomogeneous conditions. However, when particles undergo
abruptly long displacements, the adaptive algorithm renders better
performance than u—track (Supplementary Notes S5 and S6).

3.4 Adaptive algorithm improves biophysical
measurements

Inaccurate particle tracking may produce biased biophysical meas—
ures like particle speed and mean square displacement (MSD)
(Chenouard et al., 2014; Sackmann et al., 2012; Weimann et al.,
2013). According to the performance analysis in Sections 3.2 and
3.3, it is expected that the accuracy of these biophysical measures
may also be hampered in inhomogeneous systems.

We analyzed the distribution of one—frame displacements 5 (in—
stantaneous speed) and MSD curves, since they are biophysical de—
scriptors typically derived from SPT analyzes. We compared the
results of analyzing the GT and trajectories estimated with both
CSCG and the Adaptive algorithm. Because the improvement pro—
vided by the adaptive method is mostly within regions where par—
ticle density is not extremely high (see Fig. 4F), we compared only
trajectories placed in the rightmost 80% of the movie (Fig. 5A). In
Figure 5B, we compare the distributions of 5 using boxplots.
Although the median of 5 distributions on both GT and Adaptive
trajectories match the parameter <5> of generated trajectories, the
values estimated with CSCG are clearly biased towards zero.
Similarly, the MSD curve generated from CSCG tracking reveals that
this method underestimates particle displacement (Fig. SC) in in—
homogeneous movies. Also, since most trajectories are interrupted
by missing bonds, the obtained trajectories are short, making it im—
possible to compute the MSD at large time delays (At). The linear
fits of the MSD curves yield diffusion coefficients of:
DGT : (1.69 i 0.002), Dead}: (0.65 i 0.1), Dadap : (1.59 i 0.04),
all expressed in pix2/frame, that also show the inaccuracy of the

112 /310's1rzu.rn0[p.rq1x0'sopeuiJOJutotq/ﬁduq r1101} pap1201umoq

9103 ‘0g anﬁnv uo ::

1284

J. Mazza ferri et al.

 

   

 

 

 

 

 

A

1
_ 0.75
X

0.5

0.25

0.25 0.5 0.75 1
X

C

 

512:3

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

E

80 -
60 I -
o\° o\° {1 False -

4o 40 -

20 20 -

0 0 -

E 12 g

Q a g 

E 4 z

 

 

 

 

 

 

 

Fig. 4. Tracking performance of spatially inhomogeneous time series. All tra-
jectories sets G were numerically generated with n: 400, Fmax: 100
frames,<6> : 4 pixels, 05:1 pixel and D: 24 pixels. The initial positions of
particles were redistributed with Equation (3) for several values of y. (A)
Gamma curves of Equation (3) for 1121—6. (B—D): Initial particle locations for
11:1, 3 and 6, respectively. (E) Performance descriptors for the standard C&G
(full lines) and Adaptive (dashed lines) algorithms as a function of 11 (top), and
values of mD used for the C&G algorithm computed with the automatic algo-
rithm by setting D¢(X,y) constant and choosing the minimal or among all
frames (bottom). Error bars indicate the SD for time series generated with
seeds 1—10. (F) Top: local tracking performance at regions depicted in (D).
Bottom: number of tracks analyzed in each region

global CSCG in this case. All these results confirm the problems that
arise from using CSCG algorithm in inhomogeneous movies with
global parameters, and that the method presented here can solve
them.

3.5 Adaptive algorithm for Neutrophils migration assay

We used the adaptive algorithm to track the movement of neutro—
phils in the classical under—agarose chemotaxis assay (Nelson et al.,
1975), using the detection algorithm described in Supplementary
Note S3. In this assay, neutrophils migrate by squeezing between a
coverslip and a layer of agarose where a diffusing peptide produces
a graded concentration of a chemotactic cue. The neutrophils,

Adaptive

 

 

 

 

 

 

 
 
   
 

0 GT
I C&G
A Adaptive

5 [pixels]
MSD [pixelzl
N
8

l—I N w J> U1 0‘
.
I

 

 

 

 

 

o

 

GT C&G Adaptive 0 5 10 15 20
At [frames]

Fig. 5. Performance of biophysical measures. Ten trajectories sets Gwere nu-
merically generated (seeds: 1—10) with n: 400, Fmax: 100 frames, <6> :3
pixels, 05:1 pixel, D: 17 pixels and y: 5. (A) Snapshots of trajectories esti-
mated with C&G and Adaptive algorithms at frame 50 of the same time ser-
ies. (B) Boxplots of 6 for particles placed in the rightmost 80% of the movies,
for GT, and trajectories estimated with C&G and Adaptive algorithm. The
horizontal dotted line indicates the value of <6> used to generate the trajecto-
ries. (C) MSD curves with corresponding linear fits for the same trajectories
analyzed in (B). Error bars for MSD of GT trajectories indicate the SD of
squared displacements

 

  
  

1, B 10“ 'C&G

3 -Adaptive
g 'E

L- E 103

2 I

._ “.3

E dEM)2 '

= w

E _

a 101

 

 

 

'rr::u:r pm 40 30 20 10 0
track length [min]

 

Fig. 6. Adaptive algorithm applied to neutrophils migrating in an under-agar-
ose assay imaged at 4 frames per minute: (A) Sample frame with superim-
posed trajectories. See Supplementary Video S3. (B) Cumulative tracked
length (in minutes) of the trajectories of neutrophils versus length of individ-
ual trajectories (in minutes): C&G (continuous line), Adaptive (dashed line)

tagged with a ﬂorescent dye, enter the system from the left (Fig. 6A)
and migrate towards the right, where the peptide concentration in—
creases. The density of cells is remarkably inhomogeneous and they
become difficult to track as explained in previous sections. Using the
adaptive algorithm, long trajectories are detected despite the high
concentration of cells on the left (see Fig. 6A, and Supplementary
Video S3). To quantify the improvement of performance obtained
with the proposed method, we also tracked the cells with the stand—
ard CSCG algorithm. We computed the cumulative tracked length
(in time) starting from the longer trajectories, and we plotted it ver—
sus the trajectory length (in minutes) for both SPT methods (see
Fig. 6B). These results show that the trajectories obtained with the
adaptive algorithm are remarkably longer than those obtained with
CSCG, rendering less biased and more accurate description of the
neutrophil migration dynamic system. We finally compared the

112 /310's1rzu.rn0[p.rq1x0'sopeuiJOJutotq/ﬁduq r1101} pap1201umoq

9103 ‘0g anﬁnv uo ::

Adaptive settings for the nearest—neighbor particle

1285

 

algorithm with u—track (Supplementary Note S6). The u—track ren—
ders shorter trajectories possibly because it fails to detect unusually
long displacements. For tracking objects in dense environments,
u—track restricts the search radius using a priori knowledge of par—
ticle dynamics. However, this feature comes at the price of missing
unexpectedly long displacements while the adaptive algorithm is
more ﬂexible for these types of dynamics.

4 Conclusion

The field of particle tracking has evolved significantly during the last
two decades, allowing to perform in very challenging conditions
such as dense systems, blinking particles and low—quality images.
Several methods assume dynamic models of particle movement to
face some of these challenges, but these assumptions may in certain
cases bias results if the behavior of the system is not fully character—
ized a priori.

In this work, we propose a novel approach for optimizing the
performance of the popular nearest—neighbor SPT algorithm by
CSCG in systems with inhomogeneous particle density. This method
adapts the parameter mD to the local density of the particles both in
space and time, boosting the tracking performance dramatically.
Furthermore, even in systems that are not manifestly inhomogen—
eous, the standard nearest—neighbor algorithm is unstable due to
slight variations of density that make the computation time to in—
crease abruptly. Our improvement prevents these situations, provid—
ing the robustness needed for high content studies. Finally, this
approach can be applied to more complex methods (Iaqaman et al.,
2008) and potentially other algorithms that depend on a parameter
equivalent to mD (Chenouard et al., 2013).

We demonstrate quantitatively the advantages of the adaptive
method by comparing it with the standard CSCG algorithm and
other state of the art methods using numerical simulations and ex—
perimental data.

Funding

This work was funded by grants from the Fondation de l’Hépital
Maisonneuve Rosemont (La nephrologie et son Impact) to S.L., and the
National Sciences and Engineering Research Council (NSERC) to S.C. S.C.
and 5.1.. are recipients of salary awards from Fonds de la Recherche en Sante
du Quebec (FRSQ). I.M. is a recipient of a postdoctoral fellowship from the
Fondation de l’Hépital Maisonneuve—Rosemont (La nephrologie et son
Impact). I.R. was supported by funds from the NSERC-CREATE Training
Program in Neuro-Engineering and an FRQS doctoral scholarship.

Conﬂict of Interest: none declared.

References

Akita,H. et al. (2010) Particle tracking of intracellular trafﬁcking of octaargi—
nine-modiﬁed liposomes: a comparative study with adenovirus. Mol Ther,
18, 955—964.

Bricard,A. et al. (2013) Emergence of macroscopic directed motion in popula—
tions of motile colloids. Nature, 503, 95—98.

Celler,K. et al. (2013) Single particle tracking of dynamically localizing TatA
complexes in Streptomyces coelicolor. Biochem Biophys Res Commun,
438, 38—42.

Chenouard,N. et al. (2013) Multiple hypothesis tracking for cluttered biolo-
gical image sequences. IEEE Trans Pattern Anal Mach Intell, 35,
2736—3750.

Chenouard,N. et al. (2014) Objective comparison of particle tracking meth—
ods. Nat Meth, 11, 281—289.

Crocker,I.C. and Grier,D.G. (1996) Methods of digital video microscopy for
colloidal studies. I Colloid Interf Sci, 179, 298—310.

Iaqaman,K. et al. (2008) Robust single—particle tracking in live—cell time—lapse
sequences. Nat Methods, 5, 695—702.

Kalaidzidis,Y. (2009) Multiple objects tracking in ﬂuorescence microscopy.
IMath Biol, 58, 57—80.

Lund,F.W. and Wustner,D. (2013) A comparison of single particle tracking
and temporal image correlation spectroscopy for quantitative analysis of
endosome motility. I Microsc, 252, 169—188.

Manley,S. et al. (2008) High—density mapping of single—molecule trajectories
with photoactivated localization microscopy. Nat Methods, 5, 155—15 7.

Mazzaferri,I. et al. (2013) Analysis of AQP4 trafﬁcking vesicle dynamics using
a high-content approach. Biophys I, 105, 328—337.

Meijering,E. et al. (2012) Methods for cell and particle tracking. Method
Enzymol, 504, 183—200.

Nelson,R.D. et al. (1975) Chemotaxis under agarose: a new and
simple method for measuring chemotaxis and spontaneous migration of
human polymorphonuclear leukocytes and monocytes. I Immunol, 115,
1650—165 6.

Sackmann,E.K. et al. (2012) Microﬂuidic kit—on-a—lid: a versatile platform for
neutrophil chemotaxis assays. Blood, 120, e45—e53.

Serge,A. et al. (2008) Dynamic multiple-target tracing to probe spatiotemporal
cartography of cell membranes. Nat Methods, 5, 687—694.

Suraneni,P. et al. (2012) The Arp2/3 complex is required for lamellipodia
extension and directional ﬁbroblast cell migration. I Cell Biol, 197,
23 9—25 1.

Theves,M. et al. (2013) A bacterial swimmer with two alternating speeds of
propagation. Biophys I, 105, 1915—1924.

Valentine,M.T. et al. (2001) Investigating the microenvironments of inhomo—
geneous soft materials with multiple particle tracking. Phys Rev E Stat
Nonlin Soft Matter Phys, 64, 061506.

Weigel,A.V. et al. (2011) Ergodic and nonergodic processes coexist in the
plasma membrane as observed by single-molecule tracking. Proc Natl Acad
Sci U S A, 108, 6438—6443.

Weimann,L. et al. (2013) A quantitative comparison of single—dye tracking
analysis tools using Monte Carlo simulations, Plos One, 8, e64287.

112 /810's1rzu.rn0[p.rq1x0"sorreuiJOJutotq/ﬁduq r1101} pap1201umoq

9103 ‘0g anﬁnv uo ::

