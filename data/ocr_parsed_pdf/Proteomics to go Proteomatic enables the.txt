APPLICATIONS NOTE

Vol. 27 no. 8 2011, pages 1183-1184
doi:10. 1 093/bioinformatics/btr081

 

Data and text mining

Advance Access publication February 16, 2011

Proteomics to go: Proteomatic enables the user-friendly creation
of versatile MS/MS data evaluation workflows
Michael Specht*, Sebastian Kuhlgert, Christian Fufezan and Michael Hippler

Institute of Plant Biology and Biotechnology, Department of Biology, University of Muenster, Muenster, Germany

Associate Editor: John Quackenbush

 

ABSTRACT

Summary: We present Proteomatic, an operating system
independent and user-friendly platform that enables the construction
and execution of MS/MS data evaluation pipelines using free and
commercial software. Required external programs such as for
peptide identification are downloaded automatically in the case
of free software. Due to a strict separation of functionality and
presentation, and support for multiple scripting languages, new
processing steps can be added easily.

Availability and Implementation: Proteomatic is implemented
in C++/Qt, scripts are implemented in Ruby, Python and PHP.
All source code is released under the LGPL. Source code and
installers for Windows, Mac OS X, and Linux are freely available at
http://www.proteomatic.org.

Contact: michael.specht@uni-muenster.de

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on January 19, 2011; revised and accepted on February 7,
2011

1 INTRODUCTION

Mass spectrometry has evolved as a powerful tool for the
high-throughput analysis of complex protein mixtures, producing
immense amounts of data (Aebersold and Mann, 2003). Dedicated
software is essential for the identiﬁcation of peptides and proteins
from tandem mass spectra (MS/MS). In addition to commercial
software, the increasing availability of free tools for different
purposes allows for manifold alterations in the Choice of individual
programs and their arrangement in an MS/MS data evaluation
pipeline. Most programs are controlled via the command-line
interface (CLI), which is necessary in order for the program to
be included into an automated pipeline. On the other hand, this
mode of interaction makes the program less accessible to users.
Some programs are delivered with a dedicated graphical user
interface (GUI), which facilitates Changing parameters and running
the program. However, in order to create an automated processing
pipeline in which multiple programs are Chained together, CLI tools
must be used and programming knowledge is required.

Here, we report on Proteomatic, a versatile and user-friendly
platform for the construction of MS/MS data processing pipelines.
Although alternatives exist (Keller et al., 2005; Kohlbacher et al.,
2007), we Chose to design a system that implements a strict
separation of functionality and the GUI, where new processing steps

 

*To whom correspondence should be addressed.

can be provided using various programming languages. Proteomatic
enables the incorporation of programs such as BLAST (Altschul
et al., 1990), PEAKS (Ma et al., 2003) or OMSSA (Geer et al.,
2004) and provides a GUI to adjust the parameters of each program.

In contrast to other workﬂow management systems like Taverna
(Oinn et al., 2004) and Galaxy (Goecks et al., 2010), Proteomatic
operates in a decentralized fashion. Web servers are not required, and
all programs are executed locally on the user’s machine. Whenever
freely available external programs are required, Proteomatic will
download and unpack the appropriate packages automatically, thus
facilitating the application of such programs.

2 METHODS

On the conceptual level. albeit transparent to the user. Proteomatic is split into
three distinct parts: (i) program descriptions (CLI tools atlas). (ii) processing
scripts (Proteomatic scripts) and (iii) the Proteomatic GUI.

The separation of functionality from the GUI is achieved through the use
of the external program descriptions. which provide all necessary information
to automatically construct a GUI for a certain external program and to allow
its incorporation into a pipeline.

2.1 CLI tools atlas

Information about various free and commercial mass spectrometry-related
programs is stored as YAML-formatted descriptions. These descriptions
contain information about parameters. input/output ﬁles and download
locations in the case of free software. Possible parameter types include
integer and real numbers. strings. text ﬁelds. drop-down boxes and boolean
ﬂags.

2.2 Proteomatic scripts

The Proteomatic scripts implement all functionality available in Proteomatic.
Features such as automatic software downloading and output ﬁle tracking are
provided by a framework implemented in Ruby. Scripts implemented in other
languages implicitly access the same functionality through an ‘any language
hub”. which acts as an abstraction layer between the Ruby framework and
scripting languages other than Ruby. As available for external programs. a
YAML-formatted description also exists for every Proteomatic script. If a
script acts as a wrapper around an external program. its description may
reﬂect the external program’s parameters by including its description from
the CLI tools atlas.

The implementation of a Proteomatic script is straightforward. regardless
of the actual scripting language used (Ruby. Python and PHP are
currently supported). In general. a Proteomatic script deﬁnes a subclass of
ProteomaticScript and implements the Virtual run ( ) method. The
underlying framework collects user-provided input ﬁles and parameters.
as well as the requested output ﬁles and makes this information available
in the three instance variables input. param and output. A complete
developer’s documentation can be found on the web site.

 

© The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 1183

112 /3.Io's[BumoIpJOJXO'sotwuiJOJutotq”:duq wort papBOIII/lAOG

9103 ‘Og anﬁnv uo ::

M.Specht et al.

 

O OMSSA nip-Hm-wmumtk “.0105qu xriptsomsj
Ir‘Inol-ne. Imdxnpt. ﬁmdfllc‘i. ('31 - Showall - Prowt‘mfixes L'RL‘INSI" Vsteﬁ .‘ r‘wﬁles \aeset .a Preferences
I known
FIIelIil || file} -
File llsm ﬁlel Pyaineters Outputm’ an

m _ Hvd_tmN_u-io JOB _ w-no-ms 1 .m Mng

 

—— 4
I ’ MEWS“ ' CmttuquWIﬁubuu

v y

OMSSA remix; “mamas! database
> rinérwm ' WilhﬂTMLllporl
v
I ‘

rum-d mm E mm apart

igi -th|an1ydomonns-A_ 1 ram

lhi'i M rim-1m: OMSSA on d awe" wt of 5|!th “It”; and
databases

input film:

'at least ssputranle [.ata | mail—moan | .mzdaLale
mm.“qu nudnlaan mm.” nvml hm numlmy]
mzml riDI mzxmll mzxml hr: Iniuml or | .mzxml zivl
.xml | ﬁnimz l :mlgz | .KmLzIo]

'a( tear). Iaatanasehle [.rajJaat me | .rasta | .pm | .pinl
WI]

Ulll9\'.¢lao\.|[pul iiueitmyinpmmd. 111»th him will be
written to (he amtary or one of ['19 spectra files.

v Ham and lnlermez

Preturmuu. my: tolerant-e. 2.000 Da
Prooutt rm mln'i tolerance: 0.900 Da
Pretursotion search tyne: monument:

Mannie (rat keraef-iled.

Fig. 1. Proteomatic screenshot demonstrating a simple MS/MS data processing pipeline. The pipeline shown implements a protein identiﬁcation pipeline,
using a target/decoy approach in conjunction with OMSSA. The processing pipeline can be seen on the left-hand side of the window, composed of existing
input ﬁles (blue font), yet to be created output ﬁles (gray font) and scripts in between. The right-hand side of the window contains the user-adjustable parameters
of the Run OMSSA script. Once a pipeline has been constructed, it can be saved and rerun on a different set of input ﬁles at a later time.

2.3 Proteomatic GUI

The Proteomatic GUI is implemented as a C++/Qt application, enabling
seamless integration with Windows, Mac OS X and Linux desktops.
The application itself does not provide any MS/MS data evaluation
functionality but acts as a user interface layer on top of the Proteomatic
scripts.

Users may choose various processing steps from a menu. Every script
is depicted as a box on a canvas and its parameters can be modiﬁed in the
right-hand pane (Fig. 1). Files can be added to the canvas and speciﬁed as
input ﬁles to a script by connecting both boxes Via an arrow. By connecting
the output ﬁles of one script to another script, increasingly complex pipelines
can be constructed. Once a pipeline has been created, it can be executed by
clicking the Start button.

Although the Proteomatic GUI does not provide any means to inspect
result ﬁles, output ﬁles can be opened Via a double-click, thereby delegating
the handling of the output ﬁle to the underlying operating system.

3 RESULTS

Proteomatic contains more than 70 scripts for various purposes, e.g.
peptide and protein identiﬁcation at a user-deﬁned false discovery
rate using a target/decoy approach (Elias and Gygi, 2007; Kall et al.,
2008). In addition, protein groups can be determined, thus reducing
the amount of peptides matching to multiple sequences (Nesvizhskii
and Aebersold, 2005). Proteomatic can also be used for peptide
and protein quantitation using a novel quantitation tool, qTrace
(Specht,M. et al., manuscript in preparation), as demonstrated in
Terashima et al. (2010). Detailed documentation of Proteomatic and
all available scripts can be found on the Proteomatic web site.

4 CONCLUSIONS

Proteomatic provides a high-throughput data evaluation platform for
protein identiﬁcation, using a variety of freely available programs
that are downloaded automatically when required, thus providing a
straightforward system to evaluate large MS/MS datasets.

Through the use of scripting languages, existing ﬁinctionality
can easily be adjusted and new processing steps can be added

using Ruby, Python, PHP or potentially any other operating system-
independent scripting language (see Supplementary Material for a
detailed example). The storage of program descriptions and source
code for Proteomatic scripts and the GUI in separate, publicly
accessible Git repositories facilitates the enhancement of the system.
We hope that the variety of supported scripting languages and the
straightforward deployment to the Proteomatic GUI encourages
community contributions and fuels the development of novel
MS/MS data evaluation tools.

Funding: Deutsche Forschungsgemeinschaft [FU780/2-1 to C.F.];
Bundesministerium fiir Bildung und Forschung (0315265C to
M.H.).

Conﬂict of Interest: none declared.

REFERENCES

Aebersold,R. and Mann,M. (2003) Mass spectrometry-based proteomics. Nature, 422,
1987207.

A1tschu1,S.F. et al. (1990) Basic local alignment search tool. J. Mol. Biol, 215, 403410.

E1ias,J.E. and Gygi,S.P. (2007) Target-decoy search strategy for increased conﬁdence
in large-scale protein identiﬁcations by mass spectrometry. Nat. Met/1., 4, 2077214.

Geer,L.Y. et al. (2004) Open mass spectrometry search algorithm. J. Proteome Res., 3,
9587964.

Goecks,J. et al. (2010) Galaxy: a comprehensive approach for supporting accessible,
reproducible, and transparent computational research in the life sciences. Genome
Biol, 11, R86.

K'a11,L. et al. (2008) Assigning signiﬁcance to peptides identiﬁed by tandem mass
spectrometry using decoy databases. J. Proteome Res., 7, 29734.

Keller,A. et al. (2005) A uniform proteomics MS/MS analysis platform utilizing open
XML ﬁle formats. Mal. Syst. Biol, 1, 2005.0017.

Kohlbacher,O. et al. (2007) TOPP 7 the OpenMS proteomics pipeline. Biolnformaties,
23, e1914197.

Ma,B. et al. (2003) PEAKS: powerful software for peptide de novo sequencing by
tandem mass spectrometry. Rapid Commun. Mass Speetmm, 17, 233772342.

Nesvizhskii,A.I. and Aebersold,R. (2005) Interpretation of shotgun proteomic data: the
protein inference problem. Mol. Cell. Proteomics, 4, 141971440.

Oinn,T. et al. (2004) Taverna: a tool for the composition and enactment of bioinformatics
workﬂows. Blolnformatlcs, 20, 3045 73054.

Terashima,M. et al. (2010) Characterizing the anaerobic response of Chlamydomonas
reinhardtii by quantitative proteomics. Mol. Cell. Proteomics, 9, 151471532.

 

1184

112 /3.Io's[BumoprOJxosoneuiJOJutotq”:duq wort papeolumoq

9103 ‘Og isnﬁnv uo ::

