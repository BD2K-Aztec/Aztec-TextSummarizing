BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

Fast construction of FM-index

 

 

Algorithm 2: Insert one string to RLO/RCLO-BWT

Input: BRLO (C) (or BRCLO (0)) and a string P
Output: BRLO(C o {P}) (or BRCL0(C u {P}))
Function INSERTRL01(B, P, is_comp) begin
1 1M) e [0, |{2' : Bm = $}l)
forz‘ <— |P| — 1 to 71 do
L [1,u) <—INSERTAUX(B, PM, l, u, P[i + 1], is_comp)
_ return B
Function INSERTAUX(B, c’, l, u, c, is_comp) begin
[9 <— I
if is_comp is true and c’ gé “N” then
L fora = $orc’ < a < “N” do

 

L k <— k + [rank(a, u; BC) — rank(a, l; 36)]

else
for $ 3 a < c’ do
L k: <— k + [rank(a, u; BC) — rank(a, l; 33)]

l’ (— rank(c’,l; BC); u’ (— rank(c’,u; BC)
insert(c’, It; Be)

m ‘— za<c Hi 1 Bali] = C/}|
return [l/ + m,u’ + m)

 

 

 

Algorithm 3: Insert multiple strings

Input: Existing BWT B and a list of strings {P1C }k
Output: Updated BWT B with strings inserted in the speciﬁed order

 

Function INSERTMULTI(B, {Pk}k, is_sot“ted, is_comp) begin
f01‘0 S J' < |{Pk}k| '10

A(j).c (— $; A(j).i <— j

if is_sorted is true then

I_ [A(j)-Z:A(j)-u) <- [0111' = 311‘] = $}l)

else
L A(j)-l <— AUW <— |{i131i1 = $}| +J'
d <— 0
while |A| 75 0 do
1 Stable sort array A by A(-).c
2 forOSj<|A|do

C <— A(j)-C; A(j)-C <— PA(j).i[|PA(j).i| — 1 — d]
[A(j)'l7A(j)'u)

 

 

3 (—INSERTAUX(B, A(j).c, A(j).l, A(j).u, c, ts_comp)
Remove A(j) ifA(j).c = $
_ d <— d + 1
_ return B

 

3 RESULTS AND DISCUSSION

We implemented the algorithm in ropeBWT2 and evaluated its
performance together with BEETL (http://bit.ly/beethH), the
original on—disk implementation of BCR and BCRext,
ropeBWT—BCR (https://github.com/lh3/ropebwt), an in—
memory reimplementation of BCR by us, and NVBio (http://
bit.ly/nvbioio), a GPU—based algorithm inspired by CXl (Liu
et al., 2014). Table 1 shows that for ~100 bp reads, ropeBWT2
has comparable performance to others. For the ~875 bp Venter
dataset, NVBio aborted due to insufﬁcient memory under vari—
ous settings. We did not apply BCR because it is not designed for

Table 1. Performance of BWT construction

 

 

Dataa Algorithm RCLO Real CPU% RAMb Comments
(GB)
worm nvbio 7 316 s 138 12.9 See notec
worm ropebwt-bcr 7 480 s 223 2.2 -thRf
worm Algorithm 3 Yes 506 s 250 10.5 -erm10g
worm Algorithm 3 No 647 s 249 11.8 -me10g
worm beetl-bcr 7 965 s 259 1.8 RAM diskd
worm beetl-bcr 7 2092 s 122 l .8 Network6
worm Algorithm 1 7 5125 s 100 2.5 -me0
worm beetl-bcrext 7 5900 s 48 0.1 Network6
12 878 ropebwt-bcr 7 3.3 h 210 39.3 -thRf
12 878 nvbio 7 4.1 h 471 63.8 See notef
12 878 Algorithm 3 Yes 5.0 h 261 34.0 -erm10g
12 878 Algorithm 3 No 5.1 h 248 60.9 -me10g
12 878 beetl-bcr 7 11.2 h 131 31.6 Network6
Venter Algorithm 3 Yes 1.4h 274 22.2 -erm10g
Venter Algorithm 3 No 1.5 h 274 22.8 -me10g
mol Algorithm 3 No 6.8 h 285 20.0 -me10g

 

"Datasets7worm: 66M X 100 bp Caenorlzabditis elegans reads from SRR065390;
12878: 1206M X 101 bp human reads for sample NA12878 (Depristo et al., 2011).
Venter: 32M X 875 bp (in average) human reads by Sanger sequencing (Levy et a].
2007; http://bit.ly/levy2007); mol: 23M X 4026 bp (in average) human reads by
Illumina’s Moleculo sequencing (http://bit.ly/mol12878).

bHardware7CPU: 48 cores of Xeon E5—2697v2 at 2.70GHz; GPU: one Nvidia
Tesla K40; RAM: 128 GB; Storage: Isilon IQ 72000x and X400 over network.
CPU time, wall—clock time and peak memory are measured by GNU time.

CRun with option ‘—R —cpu—mem 4096 —gpu—mem 4096’. NVBio uses more CPU and
GPU RAM than the speciﬁed.

dResults and temporary files created on in—RAM Virtual disk ‘/dev/shm’.

6Results and temporary files created on Isilon’s network file system.

fRun with option ‘—R —cpu—mem 48000 —gpu—mem 4096’.

long reads of unequal lengths. Only ropeBWT2 works with this
data set and the even longer moleculo reads.

Funding: NHGRI U54HG003037; NIH GM100233.

Conﬂict of Interest: none declared.

REFERENCES

Bauer,M.J. et a]. (2013) Lightweight algorithms for constructing and inverting the
BWT of string collections. Theor. Comput. Sci., 483, 1347148.

Chan,H.—L. et a]. (2004) Compressed index for a dynamic collection of texts. In:
Sahinalp,S.C. Muthukrishnan,S. and Dogrusoz,U. (eds) CPM, Volume 3109 of
Lecture Notes in Computer Science. Springer, Berlin Heidelberg, pp. 4454156.

Cox,A.J. et a]. (2012) Large—scale compression of genomic sequence databases with
the burrows—wheeler transform. Bioiry’ormatics, 28, l4lyl4l9.

Depristo,M.A. et a]. (2011) A framework for variation discovery and genotyping
using next—generation DNA sequencing data. Nat. Genet., 43, 4914198.

Levy,S. et a]. (2007) The diploid genome sequence of an individual human. PLoS
Biol., 5, e254.

Liu,C.—M. et a]. (2014) GPU—accelerated BWT construction for large collection of
short reads. arXiv:1401.7457.

Simpson,J.T. and Durbin,R. (2012) Efficient de novo assembly of large genomes
using compressed data structures. Genome Res., 22, 5497556.

 

3275

ﬁrospzumol‘protxo'sopeuuoturorq/ﬁdnq

