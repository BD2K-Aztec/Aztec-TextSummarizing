Vol. 27 no. 17 2011, pages 2433-2434
APP S N O  doi:10.1093/bioinformatics/btr368

 

Sequence analysis

Advance Access publication June 20, 2011

SpEED: fast computation of sensitive spaced seeds

Lucian ||ie1’*, Silvana Ilie2 and Anahita Mansouri Bigvand1

1Department of Computer Science, University of Western Ontario, London, ON N6A 587 and 2Department of
Mathematics, Ryerson University, Toronto, ON M5B 2K3, Canada

Associate Editor: John Quackenbush

 

ABSTRACT

Summary: Multiple spaced seeds represent the current state-of-the-
art for similarity search in bioinformatics, with applications in various
areas such as sequence alignment, read mapping, oligonucleotide
design, etc. We present SpEED, a software program that computes
highly sensitive multiple spaced seeds. SpEED can be several orders
of magnitude faster and computes better seeds than the existing
leading software programs.

Availability: The source code of SpEED is freely available at
www.csd.uwo.ca/~ilie/SpEED/

Contact: ilie@csd.uwo.ca

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on April 6, 2011; revised on June 9, 2011; accepted on
June 10, 2011

1 INTRODUCTION

Approximate string searching is at the core of many fundamental
algorithms in bioinformatics. Since the quadratic-time dynamic
programming algorithm of Smith—Waterman is too slow, heuristic
methods have to be used. The most popular of those is implemented
in BLAST (Altschul et (11., 1990) and uses the hit-and-extend
approach: 11 consecutive matches are considered a hit and the
neighborhood is investigated ﬁirther for potentially local similarity.
Such a match is called a seed. It has been noticed by Califano and
Rigoutsos (1993) that requiring the matches to be non-consecutive
increases the chance of ﬁnding similarities, and Ma et (11. (2002)
introduced the idea of optimal spaced seeds, that is, seeds where
the matches are distributed so as to maximize the sensitivity (i.e.
probability to ﬁnd a local similarity). Multiple spaced seeds (Li et (11.,
2004) go much ﬁirther and approach perfect sensitivity. Since then
multiple spaced seeds have been used in many software programs in
a variety of applications, such as sequence alignment (Li et (11., 2004;
Ma et (11., 2002; Noe and Kucherov, 2005) read mapping (David et
(11., 2011; Homer et (11., 2009), oligonucleotide design (Feng and
Tillier, 2007), to name a few.

It is therefore very important to compute seeds with very high
sensitivity. The relevant problems are hard (Ma and Li, 2007) and all
heuristic algorithms for computing seeds require exponential time
with the exception of the one of Ilie and Ilie (2007). Our goal in
this note is to engineer this algorithm into an efﬁcient software for
computing multiple spaced seeds. The new program, SpEED, has
two execution modes, fast and best. We have compared SpEED with
the two leading software programs, Mandala (Buhler et (11., 2005)

 

*To whom correspondence should be addressed.

min: k:10

   

Fig. 1. Min and max values (k = 10) by Matlab’s cubic spline interpolation.

and Iedera (Kucherov et (11., 2006) for a variety of seeds used in
practice. SpEED-best computes always the best seeds with SpEED-
fast coming often in the second place, whereas SpEED-fast is three
to ﬁve orders of magnitude faster than all the other ones.

2 METHODS

A spaced seed s is a string over the alphabet {l,>i<}. where l is a match and
>i< a don’t care. The number of 1’s in s is called the weight of s. A multiple
spaced seed is a set of seeds S ={s1 ,s2,...,sk}. In the Bernoulli model (Li
et al.. 2004). an alignment is represented as a (random) sequence R of 1’s
and 0’s (matches and mismatches) where the probability p of a match is
called similarity. The length of R will be denoted by N. A seed s hits R if
aligning s with R at some position causes each 1 in s to be aligned with
a l in R. A multiple seed S hits R if there exist seS so that s hits R. The
sensitivity of S is the probability that S hits R. It depends on S . p. and N. A
dynamic programming (exponential) algorithm is given by Li et al. (2004)
that computes the sensitivity of a given (multiple) seed.

Finding optimal seeds by exhaustive search is feasible only for single
seeds. The only polynomial-time heuristic algorithm (Ilie and Ilie. 2007)
uses overlap complexity. a polynomial-time computable measure which is
very well correlated with sensitivity. To avoid testing all possible seeds. the
algorithm successively improves a ﬁxed starting seed based solely on overlap
complexity.

The algorithm of Ilie and Ilie (2007) has the drawback of requiring the
lengths of the seeds as input parameters. We have addressed this issue in
SpEED by computing a number of good length sets and then interpolating
those in order to produce good lengths for a wide range of parameters.
To make the preprocessing feasible. we have developed an algorithm that
computes all seed lengths from the minimum and maximum ones. (See
Supplementary Material for details.) These values for k: 10 are shown in
Figure l. SpEED-ﬁrst is the multiple seed computed using these lengths.
SpEED-best is the most sensitive seed obtained after a number of restarts
with random lengths and seeds between the given min and max.

3 RESULTS

We have compared SpEED with the two leading software programs,
Mandala (Buhler et (11., 2005) and Iedera (Kucherov et (11., 2006)

 

© The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 2433

112 /3.Io's[Bumo[pJOJXO'sorwuiJOJurorqn:duq 11101} papeolumoq

9103 ‘Og isnﬁnv uo ::

L.Ilie et al.

 

Table 1. Sensitivity comparison (darker colour indicates higher sensitivity)

 

W p Original Mandala Iedera SpEED
seeds
First Best

 

 
     

89.6113 90.6608
10 0.80 97.3159 97.7316
0.85 99.6613 99.7283
Time (s) 261 2706 . 1300
0.75 81.6772 83.0512
11 0.80 94.1141 94.7845
0.85 99.0145 99.1929
Time (s) 714
0.80 89.3037 90.2580
12 0.85 97.7253 98.0786
0.90 99.8330 99.8633
Time (s) 2092 10476
0.85 84.0995 84.3838
16 0.90 97.1676 _ 97.2806
0.95 99.9260 99.9287
10218 10220
71.1961 72.1695
92.5652 93.0442
0.95 99.6299
Time (s)

 

 

 

 

 

 

 

   
 
    
   
 
 
 
  
    
 
   
   

 

   

 

 

92.3811 92.0708
98.4289 _ 98.3391
99.8448 99.8366

123.26

  

 

58.6907

87.3359
0.95 99.2196

Time (s) >1 day 62 683 18.8 29 298

 

Seeds were computed by Mandala, Iedera and SpEED (fast and best) with the same
parameters as those of SHRiMP, PatternHunter II and BFAST. The number of iterations
was: 100 000 for Iedera and 10 for Mandala (both according to the authors’ instructions)
and 5000 for SpEED-best. The maximum time allowed for all programs was 1 day; we
give the times until the best seed was obtained.

for computing seeds with some of the most challenging parameters
used in practice: SHRiMP (David et al., 2011), PattemHunterII (Li
et al., 2004) and BFAST (Homer et al., 2009). Table 1 gives the
sensitivities, all of which were computed using the algorithm of Li
et al. (2004). SpEED-best is the best in all cases considered with
SpEED-fast coming often in second place. SpEED-ﬁrst (times in
bold) is three to ﬁve orders of magnitude faster than all the others,
since it is polynomial-time. The improvement of the original seeds is
signiﬁcant. (A 1% improvement in sensitivity implies that, for 100x
coverage of the human genome, an additional 3 billion nucleotides
could be mapped by using the better seed.)

An experimental evaluation of the SpEED seeds is given in Table 2
by comparison with the optimal for three cases, where the parameters
have been chosen such that exhaustive search is feasible and the

Table 2. Comparison between the sensitivity of the SpEED seeds and the
optimal ones for three sets of parameters

 

Optimal SpEED

k W N p el’m’ek seeds

First Best

 

2 14 35 0.88 17,21 0.829910 0.827 472 0.828 856
3 10 35 0.78 12,14,16 0.818325 0.813 690 0.818 325
4 6 35 0.60 8,9,10,11 0.850258 0.845 523 0.848 790

 

sensitivities are in the low 80s to maximize the difference to the
optimal. The SpEED-best sensitivities are very close or even the
same as the optimal.

4 CONCLUSION AND FUTURE RESEARCH

SpEED-ﬁrst is suitable for on-the-ﬂy computation of seeds, whereas
SpEED-best computes the best seeds, apparently very close to
the optimal. Further development includes modifying the overlap
complexity so that seeds of different lengths can be compared as
well as addressing models different than Bernoulli, such as Markov.

ACKNOWLEDGEMENTS

We would like to thank an anonymous referee for pointing out a
case when our software failed to work.

Funding: Natural Sciences and Engineering Research Council of
Canada (NSERC to SI. and LL).

Conﬂict of Interest: none declared.

REFERENCES

A1tschu1,S.F. et al. (1990) Basic local alignment search tool. J. Mol. Biol., 215, 403410.

Buhler,J. et al. (2005) Designing seeds for similarity search in genomic DNA. J. Comput.
Syst. Sci., 70, 3427363.

Ca1ifano,A. and Rigoutsos,l. (1993) FLASH: fast look-up algorithm for string
homology. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Rec., pp. 353359.

David,M. et al. (2011) SHRiMP2: sensitive yet practical short read mapping.
Bioinformatics, 27, 101171012.

Feng,S. and Tillier,E. (2007) A fast and ﬂexible approach to oligonucleotide probe
design for genomes and gene families. Bioinformatics, 23, 119541202.

Homer,N. et al. (2009) BFAST: An alignment tool for large scale genome resequencing.
PLoS ONE, 4, e7767.

Ilie,L. and Ilie,S. (2007) Multiple spaced seeds for homology search. Bioinformatics,
23, 296972977.

Kucherov,G. et al. (2006) A unifying framework for seed sensitivity and its application
to subset seeds. J. Bioinform. Comput. Biol., 4, 5534569.

Li,M. et al. (2004) Pattern-Hunterll: highly sensitive and fast homology search.
J. Bioinform. Comput. Biol., 2, 417440.

Ma,B. and Li,M. (2007) On the complexity of the spaced seeds. J. Comput. Syst. Sci.,
73, 102441034.

Ma,B. et al. (2002) PatternHunter: faster and more sensitive homology search.
Bioinformatics, 18, 440445.

Noé,L. and Kucherov,G (2005) YASS: enhancing the sensitivity of DNA similarity
search. Nucleic Acids Res, 33, W5407W543.

 

2434

112 /3.IO'SIBIIII’IO[p.IOJXO'SOTJBLUJOJIIlOlq”Idllq 11101} popeonrmoq

9IOZ ‘OE ISUEHV Ho ::

