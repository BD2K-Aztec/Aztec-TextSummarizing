Bioinformatics, 3213), 2016, 453—455

doi: 10.1093/bioinformatics/btv587

Advance Access Publication Date: 9 October 2015
Applications Note

 

 

Sequence analysis

CSSSCL: a python package that uses combined
sequence similarity scores for accurate
taxonomic classification of long and short

sequence reads

Ivan Borozan* and Vincent Ferretti

Informatics and Bio-computing, Ontario Institute for Cancer Research, MaRS Centre, 661 University Avenue, Suite

510, Toronto, Ontario, Canada

*To whom correspondence should be addressed.
Associate Editor: John Hancock

Received on July 3, 2015; revised on September 14, 2015; accepted on October 2, 2015

Abstract

Summary: Sequence comparison of genetic material between known and unknown organisms
plays a crucial role in genomics, metagenomics and phylogenetic analysis. The emerging long—
read sequencing technologies can now produce reads of tens of kilobases in length that promise a
more accurate assessment of their origin. To facilitate the classification of long and short DNA se—
quences, we have developed a Python package that implements a new sequence classification
model that we have demonstrated to improve the classification accuracy when compared with
other state of the art classification methods. For the purpose of validation, and to demonstrate its
usefulness, we test the combined sequence similarity score classifier (CSSSCL) using three differ—
ent datasets, including a metagenomic dataset composed of short reads.

Availability and implementation: Package’s source code and test datasets are available under the

GPLV3 license at https://github.c0m/oicr—ibc/cssscl.
Contact: ivan.b0rozan@oicr.on.ca

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

One important problem in computational molecular biology is the
correct classification of unknown DNA sequences, given a database
of sequences of known origin. Next-generation sequencing technolo-
gies have dramatically accelerated the study of microbial and viral
genomes with the promise of uncovering thousands of previously
unknown species. These high-throughput studies have, however,
produced mostly short-read data (i.e. reads between 100 and 400 bp
in length) that present a great challenge for phylogenetic classifica-
tion (and other related metagenomic analysis (Brady and Salzberg,
2009; Rosen et (11., 2011; Wood and Salzberg, 2014) or automated
genome assemblies (Koren and Phillippy, 2015). Emerging long read
sequencing technologies such as PacBio RS and Oxford Nanopore
MinION can already generate sequences over tens of kb in length
that for the first time allow highly accurate automated assemblies of

(C7 The Author 2015. Published by Oxford University Press.

finished bacterial genomes (Koren and Phillippy, 2015; Loman et
(11., 2015). In this article, we introduce the CSSSCL package for
taxonomic classification of DNA sequences that implements the
classification model presented in our recent paper (Borozan et (11.,
2015), we describe its features and show its effectiveness at classify-
ing sequences using three different datasets.

2 Package description

The CSSSCL package consists of two modules (i) the buildidbs
module that creates all the necessary databases and (ii) the
classify module that performs the classification.

2.1 Database creation
Before sequence classification can be performed, the user needs first
to specify the collection of reference genomes composing the

453

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits
unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

/310‘slcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

454

/.Borozan and V.Ferretti

 

training set. Using sequences in the training set, the build_dbs
module then creates three different databases (i) the BLAST data—
base (using the blast algorithm), (ii) the kmer database [using the
Jellyfish (Marais and Kingsford, 2011) multi—threaded k—mer coun—
ter] and (iii) the compression database (using the multi—threaded
plzip compression algorithm). During this stage, the taxon informa—
tion (from the NCBI taxonomy flat files) for each sequence is stored
in the CSSSCL’S MongoDB a scalable, high—performance, open
source document—oriented database allowing for fast retrieval and
analysis of taxonomic information.

2.2 Sequence classification

The classify module classifies sequences in the test set using the
combined sequence similarity scores (CSSSS) (as described in
Borozan et al., 2015) calculated based on the information stored in
its pre—computed databases. The four measures implemented in the
package are (i) the BLAST (BLASTN or MEGABLAST) —based
measure (expressed in terms of the BLAST bit scores), (ii) the
Euclidean distance (based on the relative abundance of kmers in
each sequence), (iii) the Jensen Shannon Divergence (based on the
relative abundance of kmers in each sequence) and (iv) the compres—
sion—based measure. The classify module allows users to specify
one of the taxonomic levels (such as species, genus, family, order,
class or phylum) at which the classification of sequences is to be per—
formed. Prior to performing the classification, the module finds opti—
mum values for its parameters [such as the optimum k—mer size and
removes sequence similarity measures with the low predictive power
(Borozan et al., 2015 )] based on the information obtained from the
sequences in the training set and provides an estimate of the overall
accuracy with which sequences are to be classified using a leave—
one—out cross—validation procedure. Note that the module also
allows users to specify which measures should be used by the model
prior to the optimization phase. Finally, the module assigns the
taxonomic label to each sequence in the test set by using the nearest
neighbor algorithm and the CSSSs (Borozan et al., 2015). CSSSCL is
written in Python, is fully parallelized and should run on most
UNIX—like systems.

3 Results

We use three different datasets (one viral and two bacterial) to dem—
onstrate the ability of the CSSSCL program to accurately classify
DNA sequences. The first dataset consists of viral nucleotide se—
quences that due to their considerable variability are expected to
pose a greater challenge to most phylogenic classification algo—
rithms. The entire set of viral genomes was downloaded from the
NCBI RefSeq database. From a total of 5808 viral genomes, we se—
lected 263 different genera with at least three different sequence
entries per taxon label, producing a total of 3917 different complete
viral sequences. This set of sequences was then split into two using
the 2/3 (training) and 1/3 (test) splits (we also required that the
training set contains at least two entries per taxon label at the genus
level). The training and test sets produced in this way contained, re—
spectively, 2900 and 1017 viral sequences. The second dataset con—
sists of bacterial nucleotide sequences (Bacterial dataset I). The
entire set of 5242 bacterial sequences was downloaded from the
NCBI RefSeq database containing 2647 RefSeq complete genomes.
From the entire set, we selected 277 different genera with at least
three different sequence entries per taxon label, producing a total of
4601 different microbial sequences. These sequences were then split
into the training and test sets (as explained above) containing,

Table 1. The classification performance across three datasets obtained with CSSSCL, NBC (Rosen etal., 2011) and Kraken (Wood and Salzberg, 2014)

 

Bacterial II (precision, recall,

Bacterial I (precision, recall,

Viral (precision, recall, [gp/min,

Classifiers

(hzm), time_cl (h:m))

time_db

[rp/min, RAM (GB)],

(hzm), time_cl (h:m))

time_db

[gp/min, RAM (GB)],

(hzm), time_cl (h:m))

time_db

RAM (GB)],

 

NA

NA“‘

95.0, 94.0, [2, 4], 12h 34 m, 7h 41 m
91.0, 90.0, [254, 4], 1 h 23 m, 0h 4m

CSSSCL(blast, kmers, compression)

CSSSCL(blast, kmers)
CSSSCL(kmers)
CSSSCL(blast)

NBC

NA

87.0, 87.0, [51, 24], 12h 16m, Oh 23m

NA

85.0, 86.0, [62, 50], 1h 50m, Oh 19m

77.0, 76.0, [254, 4], 1h 7m, 0h 4m

95.0, 88.0, [2500, 12], 2h 7m, 0h 4m

77.8, 77.8, [3, NA], NA

89.0, 89.0, [591, 24], 7h 27m, Oh 2m

NA “‘

92.0, 90.0, [3390, 4], 0h 31 m, 0h 0.3m

83.0, 77.0[0.9, 0.04], 0h 18m, 18 h 30m

94.7, 73.5, [892 472, 70], NA

91.0, 82.0, [204, 50], 4h 3m, 0h 6m

65.0, 45.0, [686, 13], 0h 4m, Oh 1.5m

Kraken

 

In the case of the Bacterial dataset I (full length bacterial sequences), we do not present the results for the NBC and the CSSSCL (but only when the compression measure is included) classiﬁers due to the very long run time

(>4 weeks, marked with NA"r ), in the case of the Bacterial dataset II (short reads) the CSSSCL program selects only the blast-based similarity measure, since kmer and compression based measures are eliminated (marked with

NA) during the optimization phase. In the table, gp/min indicates genomes processed per minute, rp/min indicates reads processed per minute, RAM indicates the maximum RAM usage in GB, time_db indicates the time to pro-

y sequences in the test set—after the reference database has been processed. The Viral dataset was run on a 16 core AMD 64-bit processor with 16 GB of RAM, while the

Bacterial datasets were run on a 16 core AMD 64-bit processor with 100 GB of RAM (see also the Supplementary Data for parameter value settings used to run the algorithms).

cess/train the reference database and time cl to classif

[BJO'SWHIHOIPJOJXO'SOplZIIJJOJLIIOIQ/[idnq

CSSSCL

455

 

respectively, 3420 and 1181 bacterial sequences. To demonstrate
that our program can also classify short reads, we use the metage—
nomic dataset Bacterial dataset II (MiSeq) introduced in Kraken
(Wood and Salzberg, 2014) consisting of 10 000 reads with an aver—
age read length of 156 bp (the training set for this dataset is com—
posed of the entire set of 5242 bacterial sequences mentioned
above). In Table 1, we compare the performance of CSSSCL to two
other classifiers namely NBC (Rosen et al., 2011) and Kraken using
the identical training and test sets. We chose NBC for its high accur—
acy and for being the most sensitive metagenomics classifier accord—
ing to Bazinet and Cummings (2012) and Kraken for being currently
the fastest metagenomics classifier according to Wood and Salzberg
(2014). The results presented in Table 1 show that CSSSCL achieves
higher precision and recall (or sensitivity) than either NBC or
Kraken when classifying viral genomes and higher recall (or sensitiv—
ity) when classifying bacterial genomes. For short reads, CSSSCL
outperforms in recall/sensitivity both NBC, Kraken and Kraken—GB
(Sensitivity: 86.23 as presented in Wood and Salzberg, 2014) and
achieves identical high precision as Kraken but a slightly lower pre—
cision than Kraken—GB (Precision: 98.84 as presented in Wood and
Salzberg, 2014) that uses a much larger database.

4 Conclusion

We propose a new Python package called CSSSCL to facilitate the
accurate taxonomic classification of long and short DNA sequences.
By using three new datasets, we confirm the results of our previous
findings and show that the implementation of our model presented
in Borozan et al. (2015) is correct and capable of classifying both
viral and bacterial sequences with high precision and recall and
within a reasonable time frame. Future work will include assessing
the performance of additional similarity measures that could be
added to the CSSSCL package.

Acknowledgements

The authors would like to thank Aly Hassan for setting up the VM and Shane
Wilson, Junjun Zhang and Bob Tiernay for testing the software.

Funding

This work was supported by the Ontario Institute for Cancer Research
through funding provided by the Government of Ontario.

Conﬂict oflnterest: none declared.

References

Bazinet,A.L. and Cummings,M.P. (2012) A comparative evaluation of se-
quence classiﬁcation programs. BMC Bioinformatics, 13, 92.

Borozan,I. et al. (2015) Integrating alignment-based and alignment-free se-
quence similarity measures for biological sequence classiﬁcation.
Bioinformatics, 31: 1396—404.

Brady,A. and Salzberg,S.L. (2009) Phymm and PhymmBL: metagenomic
phylogenetic classiﬁcation with interpolated Markov models. Nat.
Methods, 6, 673—676.

Koren,S. and Phillippy,A.M. (2015) One chromosome, one contig: complete
microbial genomes from long—read sequencing and assembly. Curr. Opin.
Microbiol, 23, 110—120.

Loman,N.]. et al. (2015) A complete bacterial genome assembled de
novo using only nanopore sequencing data. Nat. Methods, 12,
733—735.

Marais,G. and Kingsford,C. (2011) A fast, lock-free approach for efﬁ-
cient parallel counting of occurrences of k-mers. Bioinformatics, 27,
764—770.

Rosen,G.L. et al. (2011) NBC: the naive Bayes classiﬁcation tool webserver
for taxonomic classiﬁcation of metagenomic reads. Bioinformatics, 27,
127—129.

Wood,D.E. and Salzberg,S.L. (2014) Kraken: ultrafast metagenomic sequence
classiﬁcation using exact alignments. Genome Biol., 15, R46.

/3.IO'S[EIIm0fp.IOJXO'SOIJEIIIJOJIIIOIq”Zduq

