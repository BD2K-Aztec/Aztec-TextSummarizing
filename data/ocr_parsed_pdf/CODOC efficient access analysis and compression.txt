APPLICATIONS NOTE V°" 327%.lggiiliiféiiiiféiﬁgg

 

Sequence analysis

Advance Access publication May 28, 2014

CODOC: efficient access, analysis and compression of depth

of coverage signals
Niko Popitsch

Center for Integrative Bioinformatics Vienna (CIBIV), Max F Perutz Laboratories, University of Vienna and Medical

University of Vienna, Dr. Bohrgasse 9, 1030 Vienna, Austria

Associate Editor: John Hancock

 

ABSTRACT

Summary: Current data formats for the representation of depth of
coverage data (DOC), a central resource for interpreting, filtering or
detecting novel features in high-throughput sequencing datasets,
were primarily designed for visualization purposes. This limits their
applicability in stand-alone analyses of these data, mainly owing to
inaccurate representation or mediocre data compression. CODOC is a
novel data format and comprehensive application programming inter-
face for efficient representation, access and analysis of DOC data.
CODOC compresses these data ~4—32x better than the best current
comparable method by exploiting specific data characteristics while at
the same time enabling more-exact signal recovery for lossy compres-
sion and very fast query answering times.

Availability and implementation: Java source code and binaries are
freely available for non-commercial use at http://purl.org/bgraph/codoc.
Contact: niko.popitsch@univie.ac.at

Supplementary information: Supplementary data and usage exam-
ples are available at Bioinformatics online.

Received on March 16, 2014; revised on April 30, 2014; accepted on
May 21, 2014

1 INTRODUCTION

Depth of coverage (DOC) data are one-dimensional discrete ge-
nomic signals describing the number of reads from a high-
throughput sequencing (HTS) experiment covering each position
in a reference genome. DOC is determined by traversing short-
read alignments column-wise and counting the number of
mapped reads overlapping with each individual position (i.e. its
coverage). DOC is a primary source of information for the de-
tection of structural variants where it is assumed that a gain/loss
of genetic material results in increased/decreased coverage. The
same fundamental assumption is exploited in RNA sequencing
where estimated expression rates are calculated from normalized
coverage signals. DOC also plays a central role in, e. g. identify-
ing novel transcripts, characterizing the alternative splicing land-
scape of a sample or comparing multiple SNP—calling datasets
where it is required to determine what genomic regions are suf-
ﬁciently covered in all considered datasets to be comparable
among each other (Ameur et al., 2011; Duan et al., 2013;
Meynert et al., 2013; Teo et al., 2012).

Current data formatsiBroad’s tiled data file format, TDF,
and UCSC’s BigWig format (Kent et al., 2010; Thorvaldsdottir
et al., 2013Fwere optimized for efﬁcient display of DOC in gen-
omic browsers but not for their stand-alone analysis.

Consequently, they are not optimized for strong data compression
or result in very lossy signal reconstruction, which makes them
unfavorable for storing, processing and sharing large amounts of
such data. Therefore, we developed CODOC, a novel data format
and application programming interface (API) especially focusing
on good data compression and exact signal reconstruction.

2 COMPRESSION ALGORITHM

CODOC supports lossy and lossless data compression.
Generally, DOC data are compressed by run-length encoding
(RLE), exploiting several HTS data characteristics to get longer
and thus overall fewer run-lengths, which ﬁnally requires less
storage space. This is achieved by using quantization intervals
(‘corridors’) that define an upper and a lower bound for coverage
values. A corridor interval is calculated from an initial coverage
value coy,- at a genomic position pas,- = (chm, oﬁ), consisting of a
chromosomal identiﬁer and an offset value, and possibly add-
itional parameters. Starting from posi, CODOC iterates over sub-
sequent positions p0si+1,p0s,-+2,  until it ﬁnds a value cove at
position pose that lies outside of the corridor. Next, a new code-
word consisting of this chromosomal position, the coverage right
before the corridor was left (covezl) and the current coverage cove
is created. This latter value then acts as the initial coverage of the
next corridor. By this, CODOC creates codewords only at pos-
itions showing a substantial signal change and stores exact cover-
age values and signal slopes at such ‘key positions’.

Quantization corridors. CODOC supports several different and
even user-deﬁned quantization corridor schemas, including uni-
form and non-uniform alternatives (Supplementary Material).
An example for the latter is our proposed default corridor
schema (Fig. l).

Cdgf(p, covi) = [R0und(c0v,~ x (l — p)), R0Lmd(c0v,~ x (l +p))]
with p e [0, 1] being a parameter to control compression
‘lossyness’. In this schema, the corridor height shrinks with low
and grows with high initial coverage values. Consequently, the
signal in low-coverage regions can be reconstructed more accur-
ately, as already small changes will make it leave the (narrower)
corridors, which results in more fine-grained sampling in
such areas. Note that p = 0 actually results in lossless data com-
pression, while larger values for p compress the data in an in-
creasingly lossy manner.

External information. Users may pass lists of genetic variants
(e. g. VCF files) to our compressor, which considers these variant
positions as ‘key positions’ without storing corresponding code-
words, as the respective information (including variant

 

2676 © The Author 2014. Published by Oxford University Press. All rights resen/ed. For Permissions, please e—mail: journals.permissions@oup.com

112 /310's112u1nofp10}x0"sorwurJOJurorq/ﬁduq wort pQPBOIII/lAOG

91oz ‘Og anﬁnV uo ::

CODOC

 

 

— Original signal

   
  

 

 

 

 

 

 

g — — Reconstructed signal
g X SNP -> \ g ‘
g Corridor T ‘
8 \
‘4— \
0
E.
S
o 9 9
-) -
1‘ 1‘ 1‘

1.
Genomic position

Fig. 1. Proposed non-uniform quantization schema. Original and recon-
structed DOC signals are shown as bold blue and dashed black lines,
respectively. Horizontal and vertical arrows denote key positions and
their coverage values that initiate new quantization corridors (depicted
as dashed, gray boxes) and codewords. In this schema, the height of a
corridor is a percentage of its initial coverage value. The red X marks a
SNP that was read together with its DOC value from a VCF ﬁle. This
external information results in a new quantization corridor but no new
codeword. Pseudocode describing the compression algorithm can be
found in the Supplementary Material

coverages) can be read from these external lists at decompression
time (Fig. 1). This further reduces the number of required code-
words while at the same time preserving (near-) exact DOC
values at/close to variant positions.

Blocked encoding and compression. Codewords are converted to
byte representations using different encoders: chromosome iden-
tiﬁers are stored by standard RLE, position offsets by differential
Golomb/Rice encoding (Golomb, 1966), and coverage values are
stored unencoded. Eventually, all encoded bytes are additionally
compressed by a general-purpose compression algorithm (gzip or
bzip2). The data are then split into blocks (BITs) that contain a
conﬁgurable maximum of codewords (100 000 by default), which
enables efﬁcient random access at decompression time.

Decompression. Signal reconstruction is done by linear inter-
polation at neighboring key positions. Decompression starts by
constructing an in-memory interval tree (Cormen et al., 2001) of
BITs and their byte offsets. When a particular genomic position
is queried, CODOC consults this index and loads the BIT con-
taining the queried position from disk, ﬁnds the key positions
and their coverage values by binary search and reports the inter-
polated result. CODOC caches accessed BITs using a least-
recently used strategy to exploit spatial locality of queries to
close genomic positions.

3 RESULTS AND DISCUSSION

In our evaluation, CODOC outperforms BigWig (~5(%70><),
lossless TDF (~4e32x) and lossy TDF (~&l4x) considerably
with respect to compression ratios (Supplementary Material). In
lossy mode, our method provides better signal reconstruction in
low-coverage regions at the cost of less accuracy for higher cover-
age values when compared with lossy TDF. This is by design, as
we consider exact reconstruction of low-coverage (especially un-
covered) regions as more important because most thresholds (e. g.
for SNP filtering) are also established in this range. CODOC also
extracts/compresses data considerably faster (275x for lossless
modes) than TDF, being slower only for some lossy conﬁgur-
ations. Our API answered random-access queries to uncached
regions in ~0. 1414 s and queries to cached BITs in the sub-milli-
second range.

API functions. In addition to good data compression, our Java
API supports efﬁcient random and sequential access to com-
pressed DOC data and provides several useful access methods
that distinguish it from other toolsets, thereby facilitating the
development of novel data analysis tools. Notable functions in-
clude strand-speciﬁc DOC extraction, querying of regions above/
below given coverage thresholds, calculation of minimum/aver-
age coverage per region of interest, signal rescaling (normaliza-
tion) or pairwise combination of multiple DOC signals (e.g. for
calculating average, difference or minimum signals). CODOC
also enables users to choose from various quantization strategies
(which allows balancing of signal reconstruction accuracy and
required storage space) or to implement own corridor functions.
One special API feature is that it reports strict upper and lower
error bounds for returned interpolated values based on the
quantization corridor at this position. This enables applications
to estimate potential errors and react respectively.

Conclusions. DOC helps to answer central questions of many
HTS data analyses: How abundant is a certain transcript in my
data? What genomic regions are sufﬁciently covered/accessible
for certain analyses? What sequenced genomic regions in my
data are ampliﬁed/deleted? CODOC helps researchers to
answer these questions in a fast and accurate way. It is, to the
best of our knowledge, the ﬁrst open data format and API that
was specially designed for the computational analysis of such
data; by this it complements current formats developed with
highly speciﬁc application scenarios (e.g. display in a genomic
browser) in mind. Besides its comprehensive API functionalities,
it is particularly the efﬁcient compression of CODOC that proves
beneﬁcial when dealing with the enormous amounts of data pro-
duced by current HTS technologies.

ACKNOWLEDGEMENTS

The author thanks Stefan Leitich for helpful discussions about
audio compression methods and several CIBIV colleagues and
the reviewers for critically reading the manuscript.

Funding: This work was supported by the CIBIV household
budget.

Conﬂict of interest: none declared.

REFERENCES

Ameur,A. et a]. (2011) Total rna sequencing reveals nascent transcription and wide—
spread co—transcriptional splicing in the human brain. Nat. Struct. Mol. Biol.,
18, 143$1440.

Cormen,T.H. et a]. (2001) Introduction to Algorithms. 2nd edn. MIT Press,
Cambridge, Massachusetts, USA.

Duan,.l. et a]. (2013) Comparative studies of copy number variation detection
methods for next—generation sequencing technologies. PLoS One, 8, e59128.

Golomb,S. (1966) Run—length encodings. IEEE T ram. Inf. Theory, 12, 3997401.

Kent,W.J. et a]. (2010) BigWig and bigbed: enabling browsing of large distributed
datasets. Bioinformatics, 26, 22042207.

Meynert,A.M. et a]. (2013) Quantifying single nucleotide variant detection sensitiv—
ity in exome sequencing. BMC Bioinformatics, 14, 195.

Teo,S.M. et a]. (2012) Statistical challenges associated with detecting copy number
variations with next—generation sequencing. Bioinformatics, 28, 271172718.
Thorvaldsdéttir,H. et a]. (2013) Integrative genomics viewer (IGV): high—
performance genomics data visualization and exploration. Brief Bioinform,

14, 1787192.

 

2677

112 /310's112u1nofp10}x0"sorJBMJOJurorq//:d11q 11101} papeolumoq

9103 ‘Og isnﬁnV uo ::

