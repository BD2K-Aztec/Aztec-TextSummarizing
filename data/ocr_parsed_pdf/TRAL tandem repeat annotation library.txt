Bioinformatics, 31 (18), 2015, 3051—3053

doi: 10.1093/bioinformatics/btv306

Advance Access Publication Date: 18 May 2015
Applications note

 

 

Sequence analysis

TRAL: tandem repeat annotation library

Elke Schaper1'2'3'*, Alexander Korsunsky“, Jﬁlija Peéerska2'3'5,

Antonio Messinas, Riccardo Murri6, Heinz Stockingerz, Stefan Zoller2'3,
loannis Xenarios1'2 and Maria Anisimovaz'7

1Vital-IT group, SIB Swiss Institute of Bioinformatics, Quartier Sorge, 1015 Lausanne, Switzerland, 2SIB Swiss
Institute of Bioinformatics, Quartier Sorge, 1015 Lausanne, Switzerland, 3Department of Computer Science, ETH
Ziirich, 8092 Ziirich, Switzerland, 4Graz University of Technology, Institute of Molecular Biotechnology, 8010 Graz,
Austria, 5Department of Biosystems Science and Engineering, ETH Ziirich, 4058 Basel, Switzerland, 6Services and
Support for Science IT, University of Ziirich, 8057 Ziirich, Switzerland and 7Institute of Applied Simulations, School of
Life Sciences und Facility Management, Ziirich University of Applied Sciences, 8820 Wéidenswil, Switzerland

*To whom correspondence should be addressed.
Associate Editor: John Hancock

Received on March 25, 2015; revised on April 24, 2015; accepted on May 8, 2015

Abstract

Motivation: Currently, more than 40 sequence tandem repeat detectors are published, providing
heterogeneous, partly complementary, partly conflicting results.

Results: We present TRAL, a tandem repeat annotation library that allows running and parsing of
various detection outputs, clustering of redundant or overlapping annotations, several statistical
frameworks for filtering false positive annotations, and importantly a tandem repeat annotation
and refinement module based on circular profile hidden Markov models (cpHMMs). Using TRAL,
we evaluated the performance of a multi—step tandem repeat annotation workflow on 547 085
sequences in UniProtKB/Swiss—Prot. The researcher can use these results to predict run—times for
specific datasets, and to choose annotation complexity accordingly.

Availability and implementation: TRAL is an open—source Python 3 library and is available, to—
gether with documentation and tutorials via http://www.vital—it.ch/software/tral.

Contact: elke.schaper@isb—sib.ch

 

1 Introduction implemented in TRAL—an open source Python 3 TR annotation li—
brary. TRAL is highly modularized, such that a researcher can use the
implemented methods or customize them by adding other TRDs, over—
lap criteria, statistical tests or model—based annotation methods. The

Tandem repeats (TRs) are sequence features, where motifs, or TR
units, are found right next to each other, often as imperfect repetitions
(Fig. 1A). Currently, more than 40 TR detector (TRD) programs exist,
each focusing on different TR types and using different methodologies.
We have shown that currently available TRDs do not provide exhaust—
ive detections, and combining TRs from several TRDs is essential for
reliable TR annotation (Schaper et (11., 2012). Therefore, a researcher
interested in TRs needs to handle all of the following tasks: (i) 2 Features and methods
Executing and parsing results of several TRDs, despite no commonly
accepted file format; (ii) Validating TR predictions and clustering re—
dundant or overlapping results; (iii) Filtering out false positive TR pre—
dictions in a robust statistical framework; (iv) Annotating known TRs 2.1 Annotate With sequence profile models

homogenously across homologous sequences, and discerning variation A common task is to annotate sequences with TRs of a known
among the TRs (Anisimova et (11., 2015). Each of these tasks is motif. This allows to study the evolution of the TR across sequence

software is designed to run efficiently and user—friendly on single ma—
chines as well as on large computing clusters. For a variety of work—
ﬂows, scripts and tutorials are available online.

An overview of the structure of TRAL is shown in Figure 1B.

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 3051

9103 ‘Og JSanV 110 salaﬁuv soc] ‘BTIIJOJTIBD 30 AJtSJQAtuf] 112 /3.IO'S[BHJnOprOJXO'SOTJBLUJOJIITOTq/ﬂduq 11101} popcolumoq

3052

E.Schaper et al.

 

A l‘lATLEKLHKAFESLKSmPPPPTPSDSSEIVLDGTDNQYQLPQPPPK 

 

-SSHALQQAHLLKNI‘ISHCRQPSDSSV...

llllllllll ,- E11 ran - - E 1:1 - 

 

 

 

 

 

 

 

 

 

 

 

 

B HATLEKLHKAFESLKSFQQQ...
Class Sequence —1 TR list —1 TR 4 (pH MM

_ _____ “iii.” """"" '53- """" "2' I. """ "ii—2'4  25y" '2'.'1'.'2'.'5‘: """  "" '5'1.

Funcrion Eternath :: Matth fabrer :l ﬁtter'l'E 1 Tee??? I;Alrgr : arid : Bridﬁtm
anMMs demom . 01.61610 :l I {Wines lmHMMl . Mara-ﬁrmer ,
_ _ _ _ _ _ _ _ _ _ _ a a _ _ _ __£_____ -.____________ »__________ -________' -.___+___"-..__1___ _____________

External - :

software I . -

Fig. 1. (A) A sequence with two TRs: a poly-Q track (green), and a short TR (blue). (B) Illustration of TRAL structure together with the four most important data
classes: a sequence can contain TR lists; a TR list can contain TRs; a TR can contain a cpHMM. For different use cases, different workflows can be build using
these classes. For each class, input/output methods for a variety of formats are available. External software is described in the online documentation

homologues, or to check whether a common motif occurs in tandem
within a sequence.

TRAL implements a circular profile hidden Markov model
(cpHMM), adapting popular sequence profile models, e.g. from
HMMER (Eddy, 1998; Finn et al., 2011) to TRs (Bucher et al., 1996;
Schaper and Anisimova, 2015; Schaper et al., 2014; Uricaru et al.,
2007). Accurate TR annotation in the maximum likelihood frame—
work is realized with the Viterbi algorithm, such that homologous
TRs are homogenously annotated. As all TR annotations are
described by the same profile model, they are comparable in terms of
their characteristics (TR unit number, length, indels), enabling evolu—
tionary studies (Schaper et al., 2014). cpHMMs can be created from
single sequences, TRs or sequence profile models from databases.

2.2 Annotate with de novo tandem repeat detectors

For de novo annotations, we implemented a scaffold for executing
and parsing external TRD software. Six current TRDs are currently
integrated:

HHrepID (Biegert and Soding, 2008), Phobos (www.ruhr—uni—
bochum.de/ecoevo/cm/cm_ph0b0s.htm), TRED (Sokol et al., 2007),
T—REKS (Jorda and Kajava, 2009), TRF (Benson, 1999), TRUST
(Szklarczyk and Heringa, 2004) and XSTREAM (Newman and
Cooper, 2007). Further TRDs can easily be added to the framework.
As we noted that some TRDs sometimes propose TRs that are not
part of the input sequence, an automatic sanity check discards these.

Importantly, profile HMMs can be used to refine de novo TR an—
notations. For example, a TRD may correctly identify a TR, but not
capture all its TR units or the correct TR unit boundaries. The re—
finement can then be achieved by re—annotating with cpHMMs.

2.3 Identify and filter overlapping annotations

Different TRDs often predict overlapping TRs, and congruent pre—
dictions are very rare (Schaper et al., 2012). The user may be inter—
ested in discarding redundant TRs. However, not all overlapping
predictions describe a TR redundantly (Anisimova et al., 2015). We
included a flexible system to establish overlap and clustering of TRs
in TRAL. Two definitions of overlap for a pair of TRs are currently
implemented: (i) having at least some characters in common and (ii)
having a common ancestry of at least one pair of characters in align—
ments of multiple TR units for both TRs. In the next step, the clus—
tered TR annotations can be filtered to contain only the best TR
representative from a cluster according to user—defined criteria.

2.4 Test and filter for statistical significance
Distinguishing true from false positive TR annotations is another
important task, which requires evaluating the statistical significance

Table 1. Performance evaluation of TR annotation

 

 

Task Runtime (5) Memory (MB)
Annotate with 0.3 i 0.5 1.0 i 0.9
cpHMMs
Annotate with HHrepID 2.8 i 2.6 0.5 i 0.2
de novo TRDs
T—REKS 0.90 i 0.37 0.11 i 0.06
TRUST 1.9 i 2.5 1.1 i 2.1
XSTREAM 0.24 i 0.08 0.07 i 0.01
Reﬁne de novo 1.1 i 1.3 0.3 i 0.4
TRs with cpHMMs
Identify and ﬁlter 0.00 i 0.00 0.05 i 0.02
overlapping TRs
Test and ﬁlter for 0.36 i 0.23 0.22 i 0.02

statistical signiﬁcance

 

TR annotation requirements per sequence on UniProtKB/Swiss-Prot (VIII
2014; 547085 sequences, 1000 sequence per evaluated batch) on standard
Intel Xeon hardware, e.g. E5 family. Total computation time including over—
heads was ~50 days.

of a TR annotation. Several ad [706 and model—based statistics based
on the multiple alignment of TR units have been proposed for this
purpose (Schaper et al., 2012). TRAL implements these statistics, as
well as their null—distributions for random TRs, such that the statis—
tical significance of each TR (P—value) can be calculated.

2.5 Retrieve tandem repeat characteristics

For each putative TR, TRAL provides access to characteristics such
as TR unit alignments, TR unit length, number, divergence and indel
distribution. The TR unit alignment can be optimized with attached
external multiple sequence alignment software. Finally, TRAL can
be used to build cpHMMs from each TR for annotation of homolo—
gous TRs on other sequences, or for iterative optimization of the TR
annotation (see Section 2.1 ).

3 Performance evaluation

We evaluated the performance (runtime and memory requirements)
of different TR annotation tasks with TRAL for 547 085 sequences
in UniProtKB/Swiss—Prot (Table 1). TRs were annotated with four
TRDs and with cpHMMs based on PFAM models (Punta et al.,
2011), and filtered for statistical significance and overlap. On aver—
age, such annotation required ~8 s per protein sequence, mostly de—
pending on the number and type of de novo TRDs used. For large
annotation projects requiring parallelization, TRAL includes an an—
notation workﬂow, which can be run with GC3Pie—an open—source

9103 ‘Og isnﬁnv uo seleﬁuv 50'] ‘BTIIJOJTIBD JO AJtSJQAtuf] 112 /3.IO'S[BHJnOprOJXO'SOTJBLUJOJIITOTq/ﬂduq 11101} popcolumoq

Tandem repeat annotation library

3053

 

workﬂow management system for diverse local, grid, cluster and
cloud—based computing resources (Maffioletti and Murri, 2012;
https://www.s3it.uzh.ch/s0ftware/gc3pie/).

Funding

ZHAW Anschubfinanzierung to M.A. be the SIB Swiss Institute of Bioinformatics
is supported by the Swiss State Secretariat for Education, Research, and
Innovation. The computation has been performed on the Vital—IT HPC.

Conﬂict of Interest: none declared.

References

Anisimova,M. et al. (2015) Statistical approaches to detecting and analyzing
tandem repeats in genomic sequences. Front. Bioeng. Biotechnol., 3, http://
doi.org/10.3389/fbioe.2015.00031.

Benson,G. (1999) Tandem repeats ﬁnder: a program to analyze DNA se—
quences. Nucleic Acids Res., 27, 5 73—5 80.

Biegert,A. and Soding,J. (2008) De novo identiﬁcation of highly diverged pro—
tein repeats by probabilistic consistency. Bioinformatics, 24, 807—814.

Bucher,P. et al. (1996) A ﬂexible motif search technique based on generalized
proﬁles. Comput. Chem., 20, 3—23.

Eddy,S.R. (1998) Proﬁle hidden Markov models. Bioinformatics, 14, 755—763.

Finn,R.D. et al. (2011) HMMER web server: interactive sequence similarity
searching. Nucleic Acids Res., 39, W29—W37.

Jorda,J. and Kajava,A.V. (2009) T-REKS: identiﬁcation of Tandem REpeats
in sequences with a K—meanS based algorithm. Bioinformatics, 25,
2632—2638.

Mafﬁoletti,S. and Murri,R. (2012) GC3Pie: a Python framework for high—
throughput computing. In: Proceedings of the EGI Community Forum
2012/EMI Second Technical Conference (EGICFIZ—EMITCZ), 26—30
March, 2012. Munich, Germany.

Newman,A.M. and Cooper,J.B. (2007) XSTREAM: a practical algorithm for
identiﬁcation and architecture modeling of tandem repeats in protein se—
quences. BMC Bioinformatics, 8, 382.

Punta,M. et al. (2011) The Pfam protein families database. Nucleic Acids Res.,
40, D290—D301.

Schaper,E. and Anisimova,M. (2015) The evolution and function of
protein tandem repeats in plants. New Phytol., 206, 397—410.

Schaper,E. et al. (2012) Repeat or not repeat? Statistical validation of tandem
repeat prediction in genomic sequences. Nucleic Acids Res., 40, 10005—
10017.

Schaper,E. et al. (2014) Deep conservation of human protein tandem repeats
within the eukaryotes. Mol. Biol. Evol., 31, 1132—1148.

Sokol,D. et al. (2007) Tandem repeats over the edit distance. Bioinformatics,
23, e30—e35.

Szklarczyk,R. and Heringa,]. (2004) Tracking repeats using signiﬁcance and
transitivity. Bioinformatics, 20, i311—i317.

Uricaru,R. et al. (2007) A new type of hidden Markov models to pre-
dict complex domain architecture in protein sequences. In: IOBIM’07,
pp. 97—102.

9103 ‘Og isnﬁnv uo seleﬁuv 50'] ‘BIIIJOJIIBD JO AJtSJQAtuf] 112 /310'S[BHJnOprOJXO'SOIJBLUJOJIIIOICI”Zduq 11101} popcolumoq

