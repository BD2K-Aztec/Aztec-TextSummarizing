Bioinformatics, 3215), 2016, 722—729

doi: 10.1093/bioinformatics/btv628

Advance Access Publication Date: 31 October 2015
Original Paper

 

 

Systems biology

Enumeration and extension of non-equivalent
deterministic update schedules in Boolean
networks

Eduardo Palma1, Lilian Salinas1'3'* and Julio Aracenaz'3

1Departamento de lngenieria lnformética y Ciencias de la Computacién, Universidad de Concepcion, Piso 3,
Concepcion, Chile. 2Departamento de lngenieria Matemética, Universidad de Concepcion, Casilla 160-C,
Concepcion, Chile and 3Centre de lnvestigacién en lngenieria Matemética, CIZMA, Casilla 160-C, Concepcion,
Chile

*To whom correspondence should be addressed.
Associate Editor: Igor Jurisica

Received on March 13, 2015; revised on October 13, 2015; accepted on October 25, 2015

Abstract

Motivation: Boolean networks (BNs) are commonly used to model genetic regulatory networks
(GRNs). Due to the sensibility ofthe dynamical behavior to changes in the updating scheme (order
in which the nodes of a network update their state values), it is increasingly common to use differ—
ent updating rules in the modeling of GRNs to better capture an observed biological phenomenon
and thus to obtain more realistic models.

In Aracena et al. equivalence classes of deterministic update schedules in BNs, that yield exactly
the same dynamical behavior ofthe network, were defined according to a certain label function on
the arcs of the interaction digraph defined for each scheme. Thus, the interaction digraph so
labeled (update digraphs) encode the non—equivalent schemes.

Results: We address the problem of enumerating all non—equivalent deterministic update sched—
ules of a given BN. First, we show that it is an intractable problem in general. To solve it, we first
construct an algorithm that determines the set of update digraphs of a BN. For that, we use divide
and conquer methodology based on the structural characteristics of the interaction digraph. Next,
for each update digraph we determine a scheme associated. This algorithm also works in the case
where there is a partial knowledge about the relative order of the updating of the states of the
nodes. We exhibit some examples of how the algorithm works on some GRNs published in the
literature.

Availability and implementation: An executable file of the UpdateLabel algorithm made in Java
and the files with the outputs ofthe algorithms used with the GRNs are available at: www.inf.udec.
cl/ ~|ilian/UDE/

Contact: lilisalinas@udec.cl

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 IntrOdUCt'on data, qualitative logical models have been used for a better under-

Gene regulation networks (GRNs) consist of interacting genes and standing and simulation of GRNs. Examples of these models are the
gene products, which give rise to complex cell behaviors. Due Boolean networks (BNs), which despite their simplicity are able to
mainly to the lack of detailed kinetic information and quantitative capture key dynamical features and predict some activation patterns

(63 The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 722

/310‘srcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

Non—equivalent update schedules in Boolean networks

723

 

of GRNs (Albert and Othmer, 2003; Davidich and Bornholdt,
2008).

Boolean networks were introduced by Stuart Kauffman in
Kauffman (1969) to model GRNs. The gene expression level, in this
case, is modeled by binary values, 1 or 0, indicating two transcrip—
tional states, either active or inactive, respectively, and this level
changes in time according to some local activation function which
depends on the states of a set of nodes (genes or gene products).
The interactions between the elements of a BN is represented by a
directed graph (digraph), named interaction digraph, where there is
an arc (i, j) in the interaction digraph if the state value of the node
/ depends on the state value of the node i. The dynamics of the net—
work, is governed by an update schedule which determines when
each node has to be updated.

In the original model, the updating scheme was considered to be
synchronous, that is at each time step, the state of all nodes is
updated at the same time. Some examples of GRNs modeled by syn—
chronous Boolean networks are exhibited in Albert and Othmer
(2003), Kauffman et al. (2003), Li et al. (2004), Davidich and
Bornholdt (2008) and Singh et al. (2012). However, due to the syn—
chronous scheme is considered not being very realistic many GRN
modelers have used other update schedules with different levels of
asynchronism (Fauré et al., 2006; Mendoza and Alvarez—Buylla,
1998; Thomas, 1973).

The difficulty of determining time delays of updating in a GRN
makes modelers often sample different update schedules to better
capture an observed biological phenomenon. In this context, some
used schemes are the deterministic update schedules, where the set
of nodes of a network is partitioned into blocks, which are updated
sequentially while within the blocks, the nodes are updated syn—
chronously in every time step, (see for example Demongeot et al.,
2014; Goles et al., 2013; Ruz and Goles, 2013; Ruz et al., 2014a,b;
Meng and Feng, 2014). This family of update schedules, introduced
by F. Robert in Robert (1986), includes the sequential schedules
(each group has size one), the parallel schedule (there is only one
group) and the block—sequential schedules. In the past, a lot of ana—
lytical work has been done about the dynamical behavior of BNs
with this kind of scheme (Aracena et al., 2013a; Goles and Noual,
2012; Elena, 2009; Goles and Salinas, 2008; Mortveit and Reidys,
2001; Robert, 1986).

In BNs with deterministic update schedules the relative order of
updating of two nodes interacting can be represented by a label on
the respective arc of the interaction digraph. More precisely, we put
on the arc (i, j) the label 69 if the node i is updated after or at the
same time than /, according to a given update schedule of the net—
work, and the label 3 otherwise. The interaction digraph of a BN
labeled in this way is called update digraph (Aracena et al., 2009).
In this paper we also deal with deterministic update schedules which
are not fully defined, that is, the relative order of updating for some
pairs of nodes is unknown. In such cases we put on the correspond—
ing arcs the label 0.

In Aracena et al. (2009) was proved that given a BN with two
different deterministic update schedules, if the schemes have the
same update digraph associated, then the dynamical behaviors of
the networks under these schemes are equal. Hence, equivalence
classes of deterministic update schedules in a given BN can be
defined according to the update digraph associated, and such that
two equivalent schemes yield exactly the same dynamical behavior
of the network. Thus, in order to know the different dynamical be—
haviors of a BN (for example to study the robustness of the dy—
namics against to changes in the updating scheme), modelers of
GNRs need to test only non—equivalent update schedules, being this

set of schemes usually much smaller than the total set (see
Supplementary information and Aracena et al., 2013b). Similarly, if
someone wants to determine the dynamics of a BN with updating
schemes that are compatible with a set of constraints (on the relative
order of updating of some pairs of nodes) then it is sufficient to test
the non—equivalent extensions of this update schedule partially
defined; this is useful, for example, when there are constraints that
come from wanting to keep some dynamical property of a BN.

In this way, two important problems to solve are determining all
non—equivalent deterministic update schedules of a BN and the non—
equivalent extensions of an updating scheme partially defined. In
this paper, we address both problems and construct efficient algo—
rithms to solve them. For that, we first build algorithms that deter—
mine the update digraphs associated to a given BN, which encoding
the non—equivalent updates schedules. Next, we use the algorithm
introduced in Aracena et al. (2011 ), and shown in Supplementary in—
formation, to determine in polynomial time a scheme associated to
each found update digraph and hence to enumerate all non—
equivalent update schedules of the network.

The algorithms designed to calculate the update digraphs associ—
ated to a BN use two strategies. The first one is to avoid infeasible
solutions using a polynomial algorithm. The second one is to make
use of the structural characteristics of the digraph of interaction
associated to a BN, as the presence of bridges, to divide the problem
into subproblems, with smaller instances, which can be solved inde—
pendently and whose solutions can be combined to determine the
general solution. This procedure significantly reduces the total exe—
cution time of the main algorithm.

As example of application of the constructed algorithms we
determined in few seconds the whole set of non—equivalent determin—
istic schemes of four Boolean models of GRNs published in the
literature: Arabidopsis Thaliana regulatory network (Sanchez—
Corrales et al., 2010), Yeast transcriptional network (Kauffman
et al., 2003), the network for Body segmentation in Drosophila
Melanogaster (Albert and Othmer, 2003) and Mammalian Cell
Cycle network (Fauré et al., 2006). Besides, for this latter network
we determine the non—equivalent extensions of an update schedule
partially defined, whose restrictions are necessary in order to keep
the unique limit cycle of the network synchronously updated.

2 Definitions and notation

A Boolean network N : (13.5) is defined by a finite set V of n elem—
ents; n state variables xv E {0.1}. u E V; a function F : (ﬁx/6V :
{0.1}” —> {0.1}” called global activation function, where its com—
ponent functions fv : {0.1}” —> {0.1} are called local activation
functions, and an update schedule defined by a function
5: V —> {1. ... .n}, where 5(u) :16 means that in each unit of time
the state of node v is updated in the kth place (see an example in
Supplementary information). An update schedule 5 is also denoted
bys : {u : 5(u) : 1}{u : 5(u) : 2} - - - {u : 5(u) : n}.

The state values in a Boolean network with update function 5
are given by x5“ : fv(x£: : u E V), where luzk if 5(u) 35(u) and
1,, : k + 1 if 5(u) > 

Given a digraph G we will denote its set of vertices as VG and its
set of arcs as AC.

The digraph associated to a function F : (ﬁx/Ev, called inter-
action digrap/a, is the directed graph GP, where VGr : V and (u, u)
E AGE if and only if f, depends on x“, i.e. if there exists x E {0.1}”
such that fv(x) 9E fvﬁ“), with E“ different of x only in position u
(see an example of an interaction digraph in Fig. 1).

/3.IO‘SI€III[10[p.IO}X0‘SDDEIIIJOJIIIOIQ/[Zdllq

Supplementary information

Aracena at al. (2009)

Supplementary information

Figure 2

Supplementary information

Figure 3

Aracena at al. (2011)

 

 

99999 =.=‘r99

:Z\

0 9 a  9 9r‘0

 

Figure 3

Fig. 2

Aracena at al.

(2011)

Supplementary information

/3.IO'S[BIIm0[p.IOJXO'SOIJEIIIJOJIIIOIq/ﬂdnq

Non—equivalent update schedules in Boolean networks

725

 

the related existence problem is known to be polynomial (Aracena
et al., 2011).

4 Algorithms

In this section we present the theoretical results that lead to design
an algorithm that solves the UDE problem. In first place, we focus
on verify the existence of one solution, then we reduce our problem
contracting each positive strongly connected component (i.e.
strongly connected component in the digraph induced by the posi-
tive arcs of the labeled digraph) in one vertex. In second place, we
present the two main results of this article: they are the effect of
forcing arcs, that allows to eliminate infeasible solutions in polyno-
mial time, and the division of our problem into smaller pieces using
algorithms to find bridges and strongly connected components.

4.1 Verify

First, we verify whether the labeled digraph is an update digraph.
To check this, we use the ReversePaths algorithm to search any for-
bidden cycle. ReversePaths algorithm is an adaptation of Floyd—
Warshall algorithm, where instead of finding minimum weight
paths, we determine the existence of reverse paths and negative re-
verse paths between each pair of vertices. The algorithm returns the
matrix M where: M(u, v) : —1 if there exists a negative reverse path
from u to v; M(u,v) : 1 if there is a reverse path from u to v, but
not a negative one and M(u, v) : oo otherwise. See details of
ReversePaths and Verify algorithms in Supplementary information.

4.2 Reducing the size of the instances of UDE problem
As we mentioned above, the UDE problem belongs to a class of
problems for which there are not known polynomial algorithms that
solve them. Hence, the decrease in size of an instance of UDE prob-
lem is very important. In this way, we define the reduced digraph of
an update digraph which involves replacing each positive strongly
connected by a single vertex.

The following lemma is a property of the update digraphs which
allows to define correctly the reduced digraph of an update digraph.

Lemma 2: Let (G, lab) be an update digraph, GLand G2 two posi-
tive strongly connected components of G, and lab a full extension
such that (G, 13;?) is a fully labeled update digraph. Then
Va,a’ 6 AG ﬂ (VGl >< VGZ): lab(a) : lab(a’).

The proof of this lemma (detailed in Supplementary information)
uses the fact that if 1%(a) 9E 1.173(a’) then there exists a forbidden
cycle in the labeled digraph.

From the previous lemma we know that we can preliminarily
label some arcs. This help us to avoid a multidigraph when we ob-
tain the reduced digraph or problems in its label function.

Definition 1: Let (G, lab) be an update digraph and {G1, . .. ,Gk}
its positive strongly connected components. We define its reduced
labeled digraph R(G,lab) by R(G,lab) : (GrdJabrd), where Grd
: (Vrd,Ard), Vrd : {v1,  ,vk} and
Ard : {(vi,v,-)(E|(u,v) 6 AG W (Va, >< VG/)}

Furthermore, [abrd(vi,v,~) : lab(u,v), if 3(u,v) E (VG, >< VG/)
ﬂSupUab) and [abrd(v,-, vy) : 0 otherwise. We say that a labeled di-
graph (GJab) is reduced if (G, lab) : R(G, lab).

Note that if (GJab) is connected, then obviously R(G,lab) is
also connected. Furthermore, as (GJab) is an update digraph, then
R(G, lab) is an update digraph, since otherwise there would be a for-
bidden cycle.

 

(a) ('3)

G and
T910??? T969032-
.‘6 z‘9\. .‘é/oe/

4;

Fig. 4. (a) An update digraph. (b) The reduced digraph

Example 2: In Figure 4 an example of a reduced digraph is shown.
The nodes 4, 5 and 6 are in a positive strongly connected compo-
nent, so in the reduced digraph they are all represented by node V4.

Theorem 3: The elements of the solution set of the UDE problem
for (GJab) are in bijection with those of the UDE problem for
R(G,lab).

The proof of this theorem uses the previous lemma (details in
Supplementary information). In fact, if we have an unlabeled arc be-
tween nodes in the same positive strongly connected component, this
must be labeled positive to avoid a forbidden cycle. In terms of update
schedule, that means that every node in the positive strongly con-
nected component is updated at the same time, so we can represent all
these nodes in one. Also, the arcs between different positive strongly
connected components must have the same direction in the reverse di-
graph to avoid forbidden cycles, hence we can represent all of them
by just one that has the right direction in the reverse digraph.

The application of this results leads to Algorithm 1. In this algo-
rithm we use SCCT, i.e. the algorithm that returns the positive
strongly connected components of a digraph. This is very easy to
construct using, for example, Tarjan algorithm (Tarjan, 1972).

 

Algorithm 1 Reduce

 

Require: An update digraph (GJab).
Ensure: The reduced digraph (Grd, lab“).

1: {61,  ,Gk} <— SCC+(G,lab)

2: VGrd <— {wh  ,wk}
AGrd <— 0
:fori:1tok do
for j: 1 to k do

if 21(u,v) 6 AG with u 6 Val and v 6 V9 then
AGrd (— AGrd U (witwl)

: for all do(wi,u/y) E AGrd
if 2114 E VGMv E VG, and lab(u,v) : 9 then
10: [abrd(u,v) <— e
11: else if Elu E VG,,v E VG, and lab(u,v) : 69 then
12: [abrd(u, v) <— 69
13: else
14: [abrd(u,v) <— O
15: return (GrdJabrd)

§W$?S{‘4‘S‘P

 

4.3 Force

Given an update digraph (G, lab) with Sup(lab) 9E Ac, there are
situations in which an unlabeled arc (i,/) 6 AG may be labeled just
in one way to keep the update digraph property. In fact, if every un-
labeled arc is forced to have a unique label the solutions of the UDE
problem is unique.

Example 3: In Figure 5a we see that there exist negative reverse
paths (marked for gray arrows) from 3 to 2 (3,1,2) and from 2 to 4
(2,4), then the unlabeled arcs (2,3) and (2,4) must be labeled nega-
tive and positive respectively, as shown in b.

/3.IO'S[BIIm0[p.IOJXO'SOIJEIIIJOJIIIOIq/ﬂdnq

9%

No

9=——9

tion

Figure 6

Supplementary informa-

/810'sreumo'fp1o1xo'sopeuuogurorqﬂ:duq

9999909999
@9999wggga

99999 99
99 99999

Figure 7

Supplementary information

Table 1

Fig. 8

Table 1

/810'sreumo'fp1o1xo"soueuuogurorqﬂ:duq

et al., 2006
Corrales et al., 2010
al., 2003

Albert and Othmer, 2003
Pita and Rocha, 2013

information

Table 2

Faure
Sanchez-
Kauffman et

Marques-

Supplementary

Supplementary information

Supplementary information
Table 2 Table 2

Table 1

Supplementary information

Supplementary information

Table 2

Supplementary information Aracena et al. 2013b

Table l

/3.IO'S[BIIm0[p.IOJXO'SOIJBIIIJOJIIIOIq/ﬂdnq

Non—equivalent update schedules in Boolean networks

729

 

introduced in Aracena et al. (2011) and exhibited in Supplementary
information. We illustrate the application of our algorithms on four
GRNs published in the literature. The results obtained and exhibited
in Table 2 show that in few seconds we can obtain the whole set of
non—equivalent update schedules of each studied network, whose car—
dinals correspond to the maximum number of possible dynamical be—
haviors of the studied networks when they are modeled by BNs with
deterministic update schedules. It is important to note that despite the
UpdateLabel algorithm with divisions on the interaction digraph is
faster, it is limited by the RAM memory of the computer. So for large
networks is advisable to use simply the UpdateLabel algorithm with—
out division, when the number of non—equivalent schemes so allows.

Funding

This work was partially supported by project Fondecyt 1131013 (].A. and
LS.) and Master’s scholarship CONICYT (E.P.).

Conﬂict of Interest: none declared.

References

Albert,R. and Othmer,H.G. (2003) The topology of the regulatory inter-
actions predicts the expression pattern of the drosophila segment polarity
genes]. Theor. Biol., 223, 1—18.

Aracena,]. et al. (2009). On the robustness of update schedules in Boolean net-
works. Biosystems, 97, 1—8.

Aracena,]. et al. (2011). Combinatorics on update digraphs in Boolean net-
works. Discrete Appl. Math, 159, 401—409.

Aracena,]. et al. (2013a) Limit cycles and update digraphs in Boolean net-
works. Discrete Appl. Math, 161, 1—2.

Aracena,]. et al. (2013b) On the number of different dynamics in boolean net-
works with deterministic update schedules. Matli. Biosci., 242, 188—194.
Davidich,M.I. and Bornholdt,S. (2008) Boolean network model predicts cell

cycle sequence of ﬁssion yeast. PloS One, 3, e1672.

Demongeot,]. et al. (2014) Stability, complexity and robustness in population
dynamics. Acta Biotheoretica, 62, 243—284.

E1ena,A. (2009) Robustesse des re’seaux d ’automates boolee’ns a seuil aux
modes d’ite’ration. Application a la mode’lisation des re’seaux de regulation
génétique. Ph.D. thesis, Universite Joseph Fourier (Grenoble I), Grenoble,
France.

Fauré,A. et al. (2006) Dynamical analysis of a generic Boolean model for the
control of the mammalian cell cycle. Bioinformatics, 22, 124—131.

Goles,E. and Noual,M. (2012) Disjunctive networks and update schedules.
Adv. Appl. Math, 48, 646—662.

Goles,E. and Salinas,L. (2008) Comparison between parallel and serial dy-
namics of Boolean networks. Theor. Comput. Sci., 396, 247—253.

Goles,E. et al. (2013) Deconstruction and dynamical robustness of regulatory
networks: application to the yeast cell cycle networks. Bull. Math. Biol., 75,
939—966.

Kauffman,S. (1969) Metabolic stability and epigenesis in randomly connected
nets.]. Theor. Biol., 22, 437—67.

Kauffman,S. et al. (2003) Random Boolean network models and the yeast
transcriptional network. Proc. NatlAcad. Sci., 100, 14796—14799.

Li,F. et al. (2004) The yeast cell-cycle network is robustly designed. PrOc. Natl
Acad. Sci. USA, 101, 4781—4786.

Marques-Pita,M. and Rocha,L.M. (2013) Canalization and control in
automata networks: Body segmentation in drosophila melanogaster. PLoS
ONE, 8, e55946.

Mendoza,L. and Alvarez-Buylla,E. (1998) Dynamics of the genetic regulatory
network for arabidopsis thaliana ﬂower morphogenesis.  Theor. Biol.,
193, 307—319.

Meng,M. and Feng,]. (2014) Function perturbations in Boolean networks
with its application in a d. melanogaster gene network. Eur. ]. Control,
20(2), 87—94.

Mortveit,H. and Reidys,C. (2001) Discrete, sequential dynamical systems.
Discrete Math, 226, 281—295.

Robert,F. (1986) Discrete Iterations: A Metric Study. Springer—Verlag, Berlin.

Ruz,G.A. and Goles,E. (2013) Learning gene regulatory networks using the
bees algorithm. Neural Comput. Appl., 22, 63—70.

Ruz,G.A. et al. (2014a) Dynamical and topological robustness of the mamma-
lian cell cycle network: A reverse engineering approach. Biosystems, 115,
23—32.

Ruz,G.A. et al. (2014b) Neutral space analysis for a boolean network model
of the ﬁssion yeast cell cycle network. Biol. Res., 47, 64.

Sénchez-Corrales,Y.-E. et al. (2010) The arabidopsis thaliana ﬂower organ
speciﬁcation gene regulatory network determines a robust differentiation
process.]. Theor. Biol.,264, 971—983.

Singh,A. et al. (2012) Boolean approach to signalling pathway modelling in
hgf—induced keratinocyte migration. Bioinformatics, 28, i495—i501.

Tarjan,R. (1972) Depth-ﬁrst search and linear graph algorithms. SIAM 
Comput, 1,146—160.

Thomas,R. (1973) Boolean formalization of genetic control circuits. ]. Theor.
Biol., 42, 563—585.

ﬁm'srcumol‘piqxo'sopcuuowtotq/ﬁdnq

