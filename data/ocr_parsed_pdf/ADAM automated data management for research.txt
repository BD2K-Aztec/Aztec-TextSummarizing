BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

ADAM

 

Table 1. Supported ﬁle formats

 

Type Supported formats Example metadata

 

Publication Journal article PDF
Document Word, Excel, PowerPoint
Script Python, MATLAB, R
Image JPEG, GIF, Zeiss LSM,
Leica LIF, SimplePCI CXDa
Affymetrix CEL, Waters
MS, Bruker NMR

Author, journal, DOI, date
Word count, named entities
Language, line count
Image count, dimensions

Dataset Acquisition parameters

 

"Formats list additionally includes those accessible using the Bio—Formats library.

producing a URL that can be distributed to users without an
account on the system. This link can be revoked at any time, thus
enabling ad hoc data sharing with minimal effort.

Importantly, the use of the web interface is entirely optional
and no manual steps are required to import data into the ADAM
repository beyond copying ﬁles to the server. The interface can
be used whenever a user wishes to take advantage of the features
that the system provides over and above a traditional networked
drive.

In addition to the features designed for end users, there are
also clear beneﬁts to infrastructure providers in having access to
aggregated resource of data and the associated systematically
derived metadata. It enables, for example, the determination of
the most widely used ﬁle formats, and, by deduction, the kinds of
experimental techniques and high—throughput assays being per—
formed, and which instruments were used for acquisition. This
should enable better planning including targeted use of hardware
resources and development of analysis software to satisfy
demand. It would also allow, with user consent, for alerts to
be provided if researchers have uploaded ‘similar’ datasets or
articles as a means to initiate collaboration.

3 IMPLEMENTATION

ADAM consists of several loosely coupled components:

0 A network—accessible file system (SMB using Samba).
0 File system monitoring daemon written using Java/inotify.

Metadata database stored in the MongoDB system.

c Full—text index provided using the ElasticSearch library.
0 J SON HTTP API written using the Java/Play Framework.
0 Web interface implemented with HTML/CSS/Javascript.

The principal components are the data store, which will typ—
ically be located on a disk array mounted on the ADAM server
and the metadata store, which is implemented using a
high—performance document—oriented database well suited to
ad hoc schema changes. All indexed ﬁles are assigned a globally
unique identiﬁer so that they can be unambiguously linked to
their metadata and referenced externally even if their location
changes.

Data type classiﬁcation, metadata extraction and format con—
version are performed using the Apache Tika, LOCI

Bio—Formats (Linkert et al., 2010) and Apache PDFBox
libraries. The system additionally attempts to perform
named—entity recognition using the Whatizit (http://www.ebi.ac.
uk/webservices/whatizit/) or Reﬂect (O’Donoghue et al., 2010)
web services and generates repository content statistics using
MongoDB MapReduce queries, which it makes viewable on
the web to administrators.

The ADAM system architecture is modular by design, with a
decoupled user interface. The HTTP API provides access to all
search and retrieval functionality, meaning that custom inter—
faces can easily be developed to supplement the provided web
application. The file type detection module of the server consists
of pluggable components, making it straightforward for an
experienced developer to extend the system to support new
types. Simple HTML view templates allow the web interface to
be customized to display these types.

The simplest deployment strategy for ADAM involves instan—
tiating a provided VirtualBox machine image that bundles the
core components with a CentOS Linux installation and includes
scripts to start/stop the server and to add new users. The only
required post—installation step is to conﬁgure any user—facing
ﬁrewall and to mount a remote drive to act as the data store,
if required.

4 DISCUSSION

ADAM is designed to encourage the usage of centralized storage
in preference to potentially unreliable local facilities. It achieves
this by providing access to valuable additional features without
restricting researchers in how they organize their working data. It
is not an alternative to established public repositories for pub—
lishing data associated with peer—reviewed research, nor does it
eliminate the need for the types of manual annotation that fa—
cilitate data integration. It does, however, assist researchers in
dealing with increasingly overwhelming digital data volumes by
providing a powerful search interface and promotes data re—use
by making it easy to share datasets with collaborators long
before publication. It can additionally provide administrators
with a means to analyse the nature and quantity of data being
generated by users of the system and so ultimately benefit
researchers and their supervisors too.

ACKNOWLEDGEMENTS

Funding: This work was funded by the Biotechnology and
Biological Sciences Research Council grant [BB/C519670/ 1]:
a Centre for Integrative Systems Biology at Imperial College
(CISBIC).

Conﬂicts of Interest: none declared.

REFERENCES

Allan,C. et a]. (2012) OMERO: ﬂexible, model—driven data management for experi—
mental biology. Nut. Met/1043', 9, 2457253.

Linkert,M. et a]. (2010) Metadata matters: access to image data in the real world.
J. Cell. Biol., 189, 7777782.

O’Donoghue,S.I. et a]. (2010) Reﬂect: a practical approach to web semantics. Web
Semant, 8, 1827189.

 

147

ﬁm'spzumofpmﬂo'sopeuuopuotq/ﬁdnq

