BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

Z.Gu et al.

 

plotted together in a track as a batch mode or separately in a cell—
by—cell fashion.

2.1 Low-level graphics functions

Generally, figures are composed from basic graphical elements,
such as points, lines and regions. Our package, circlize, imple—
ments all these low—level functions (e.g. circos .points,
circos . lines) to plot graphics in a circular layout so that
more complicated graphics can be easily generated by different
combinations of low—level graphics functions. These functions
expect data points measured in the data coordinate system.
The usage for the functions is almost the same as the functions
in the traditional graphics system, which demonstrates the simple
and user—friendly features of circlize.

2.2 Enhancement

Theoretically, based on the low—level graphics functions, users
are able to draw most kinds of graphics (including basic graphics
such as scatter plot and more complicated graphics) in the cir—
cular layout. Therefore, types of graphics are not restricted by
the software itself and users can create circular graphics for their
own purposes.

Under R’s elegant statistical environment, data transform—
ation can be first applied before visualization that enables circlize
to support a large number of new types of graphics. For
example, in Supplementary Figure SlA, smoothing by loess
method is performed, and then smoothed lines as well as error
regions are added to each cell implemented by circos . lines
and circos .polygon. In Supplementary Figure SlE, cluster—
ing is performed to determine the order of elements in which
heatmaps are drawn by circos . rect, and dendrograms are
implemented by circos . lines.

With R’s powerful graphics engine, more complicated graphics
can be easily generated. For example, in Supplementary Figure
SlB, two circos plots are drawn on the same graphical device
represented as a nested circular layout. Such type of graphic is
useful because it can zoom in a speciﬁc region on the outer circle.
In Supplementary Figure SlD, two parts of circos plots are
drawn together so that direct comparisons on the same genomic
regions between two experimental conditions become achievable.
For more detailed description of higher level techniques, users
may refer to the main vignette of the package.

2.3 Genome graphics

The widest use of circular layouts today is to display genomic
information. circlize particularly implements functions that facili—
tate genomic data visualization. The functions are built on gen—
eral circos graphics functions and expect BED—like format of
input data. Among them, there are low—level graphics functions
such as circos .genomicPoints that add basic graphics and
high—level functions such as circos . initializewith
Ideogram that initialize and organize genome circos plot.

Additionally, circlize provides customized functions circos .
genomicDensity and circos . genomicRainfall for
better visualizing genome—wide distributions of genomic features.
For examples of basic and complex genome graphics, please refer
to Supplementary Figure S1.

2.4 Examples

The process for drawing circular layouts in circlize is simple. It
follows the sequence of (i) initializing the layout using circos .
initialize or circos . initializeWithIdeogram to
allocate different categories into sectors; (ii) creating plotting
regions for the new track by circos . trackPlotRegion or
circos . genomicTrackPlotRegion, and adding basic
graphics with low—level graphics functions; (iii) repeating the
second step to draw multiple tracks; (iv) flnally calling circos .
clear to do cleanings.

A typical chunk of code for drawing a circular layout would
look like (pseudo code):

circos.initialize(factors, xlim)
circos.trackPlotRegion(factors, x.data, y.data,
panel.fun = function(x, y) {
circos.points(x, y, pch = 16, cex = 0.5)
circos.lines(x, y, lwd = 0.5, type = “h”)
})

circos .clear ()

3 CONCLUSION

circlize provides a general and ﬂexible solution for the circular
layout. It provides basic low—level graphics functions, so that
more complicated graphics can be easily implemented by users.
Together with the R environment, the ﬂexibility and enhance—
ment make the package powerful in visualizing and deciphering
genomic information, as well as in other related areas.

Funding: Funded by DKFZ—Heidelberg Center for Personalized
Oncology (DKFZ—HIPO).

Conﬂict of Interest: none declared.

REFERENCES

Hu,Y. et a]. (2014) OmicCircos: a simple—to—use R package for the circular visual—
ization of multidimensional omics data. Cancer Inform, 13, 13720.

Krzywinski,M. et a]. (2009) Circos: an information aesthetic for comparative gen—
omics. Genome Re.\'., 19, 163971645.

Schroeder,M.P. et a]. (2013) Visualizing multidimensional cancer genomics data.
Genome Med, 5, 9.

Yin,T. et a]. (2012) ggbio: an R package for extending the grammar of graphics for
genomic data. Genome Biol, 13, R77.

Zhang,H. et a]. (2013) RCircos: an R package for Circos 2D track plots. BMC
Bioiry’ommtizn‘, 14, 244.

 

2812

ﬁm'spzumofpmﬂo'sopnuuopuorq/ﬁdnq

