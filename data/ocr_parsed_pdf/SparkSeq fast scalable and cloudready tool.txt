BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

SparkSeq

 

A completely new MapReduce paradigm implementation,
Apache Spark (Zaharia et al., 2012), addresses both of those
problems. It introduces a new Application Programming
Interface (API), suitable for both high—level data processing
workﬂow definition as well as low—level code tuning, using the
concise Scala language. Apache Spark includes also a new stor—
age primitive: resilient distributed datasets. It lets the users cache
precomputed data in memory and / or disk across queries. Apache
Spark has also much lower launching overheads, which is im—
portant for running ad hoc queries. Another advantage of
Apache Spark is its REPL (read—eval—print—loop) environment:
Spark—shell.

To study the utility of Apache Spark in the genomic context,
we created SparkSeq. SparkSeq is a general—purpose tool for
RNA and DNA sequencing analyses, tuned for processing in
the cloud big alignment data with nucleotide precision. It com—
bines Picard Java Development Kit for Sequence Alignment/
Map format (SAM) (Picard SAM JDK) via Hadoop—BAM li—
brary and Apache Spark to introduce versatile sequencing ana—
lyses in MapReduce environment. It currently implements
operations on many alignment files at a time, falling into three
categories: filtering of reads, summarizing genomic features and
statistical analyses. It can be run directly with Scala, or in R
using the RSparkSeq package. The scalability study done with
the prototype has proven that by using big enough computa—
tional infrastructure, it is possible to handle the constantly grow—
ing number of alignment files with base—pair resolution in a
manageable time. Much shorter processing time due to scalabil—
ity can lead to more interactive analysis with a deeper biological
insight for the genomics researchers. The computing infrastruc—
ture for the tests included cluster nodes equipped with 8—core
CPU and 16 GB RAM running Linux Ubuntu 12.04 virtual
machines with Apache Hadoop 1.2.1, Apache Spark 0.8.0 and
Scala 2.9.3 installed. Scalability and performance has been eval—
uated by increasing the number of worker nodes from 1 to 10 (8
to 80 cores in total) and comparing this with samtools and
SeqPig on the coverage/pileup function of a multi—sample data—
set. In separate tests, such parameters as HDFS block size and
the use of caching have been examined to find the optimal pro—
cessing time. Implemented analysis pipelines include the calcula—
tion of read coverage for all the nucleotides in the reference
genome and the counts of reads within all exons, that can be
processed then by the standard statistical methods for RNA
sequencing (Anders et al., 2013). Testing of SparkSeq has been
done mainly using two datasets: one 30 GB BAM file from mul—
tiple—amplicon sequencing experiment and 32 BAM files
(~40 GB) from a whole—transcript RNA—sequencing experiment.

The results presented in Figure 1 show that SparkSeq outper—
forms SeqPig in terms of speed (8449.15 times) and that finding
the coverage for all the nucleotides scales up well. The cache
experiments described in detail in the Supplementary File show
that using a fast data serializer (like KryoSerializer) instead of
the Java built—in one together with LZF or Snappy compression
can speed up multi—pass data querying up to 110 times and
reduce memory consumption by a factor of 13. HDFS block
size adjustment can also result in a performance boost.

The tests done on SparkSeq clearly prove the utility of Apache
Spark/Hadoop—BAM—based solution for high—performance ana—
lysis of sequencing alignment files. The efﬁciency is comparable

spcaduu

speedup vs samlocls
l 2 a 4 5 s 1 a 9 IO

   

123A57m 12545515910
wovksv nodes kaav nodes

Fig. 1. Speedup (A) and scalability (B) of SparkSeq and SeqPig on
8BAM ﬁles RNA-sequencing dataset (total 9GB) and a different
number of worker nodes. The benchmark consists of the filtering out
duplicates and reads with low quality or gaps in CIGAR string, then
calculating the coverage/pileup for all the samples. samtools used as a
baseline

with standards (samtools) on a standalone machine and it offers
the added value of horizontal scalability. Similar implementa—
tions can be done for other types of analyses and other type of
genomic alignment ﬁles. The beneﬁt for biology researchers will
be the speeding up of the long analyses and getting even the
nucleotide precision of multi—sample results in non—prohibitive
time. This will enable unsupervised searches for novel genomics
phenomena in many samples in parallel, as well as optimizing
standard analyses by running them many times, tuning their par—
ameters in an interactive way.

ACKNOWLEDGEMENTS

The authors thank Christian Panse, Riccardo Murri, Tyanko
Aleksiev and Martin Ryan for the valuable discussions.

Funding: Scientif1c Exchange Programme NMS—CH (grant no.
12.289) and in part by the Swiss National Science Foundation
(grant 31000(L116502).

Conﬂicts of Interest: none declared.

REFERENCES

Anders,S. et a]. (2013) Count—based differential expression analysis of RNA sequen—
cing data using R and Bioconductor. Nat. Pr()t()c., 8, 176571786.

Borthakur,D. (2007) The Hadoop Distributed File System: Architecture and Design.
Hadoop Project Website 11 (2007): 21.

Frazee,A.C. et a]. (2014) Differential expression analysis of RNA—seq data at single—
base resolution. Biostutistics, 15, 4134126.

Langmead,B. et a]. (2010) Cloud—scale RNA—sequencing differential expression ana—
lysis with Myrna. Genome Biol., 11, R83.

Lesniewska,A. and Okoniewski,M.J. (2011) rnaSeqMap: a Bioconductor package
for RNA sequencing data exploration. BMC Bi()inﬁ)mmtics, 12, 200.

Li,H. et a]. (2009) The Sequence Alignment/Map format and SAMtools.
Bioinﬂﬁnmtics, 25, 207872079.

Niemenmaa,M. et a]. (2012) Hadoop—BAM: directly manipulating next generation
sequencing data in the cloud. Bi()inﬁ)mmtics, 28, 87(r877.

Schumacher,A. et a]. (2014) Seqpig: simple and scalable scripting for large sequen—
cing data sets in hadoop. Bioinﬁ)rnmtics, 30, 1197120.

Taylor,R.C. (2010) An overview of the Hadoop/MapReduce/HBase framework
and its current applications in bioinformatics. BMC Bioinﬁ)rnmtics, 11
(Suppl. 12), SI.

Zaharia,M. et a]. (2012) Resilient distributed datasets: a fault—tolerant abstraction
for in—memory cluster computing. In: Proceedings of the 9th USENIX
Conference. San Jose.

 

2653

/3.IO'S[BIIm0[p.IOJXO'SOIJBIIIJOJIIIOIq/ﬂdnq

