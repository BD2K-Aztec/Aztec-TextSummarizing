Bioinformatics, 31 (20), 2015, 3371—3373

doi: 10.1093/bioinformatics/btv386

Advance Access Publication Date: 25 June 2015
Applications Note

 

 

Sequence analysis

damidseq_pipeline: an automated pipeline for
processing DamlD sequencing datasets

Owen J. Marshall* and Andrea H. Brand

Wellcome Trust/Cancer Research UK Gurdon Institute, Cambridge, CBZ 10N, UK

*To whom correspondence should be addressed.
Associate Editor: Inanc Birol

Received on January 21, 2015; revised on May 31, 2015; accepted on June 20, 2015

Abstract

Summary: DamlD is a powerful technique for identifying regions of the genome bound by a DNA—
binding (or DNA—associated) protein. Currently, no method exists for automatically processing
next—generation sequencing DamlD (DamlD—seq) data, and the use of DamlD—seq datasets with nor—
malization based on read—counts alone can lead to high background and the loss of bound signal.
DamlD—seq thus presents novel challenges in terms of normalization and background minimiza—
tion. We describe here damidseqipipeline, a software pipeline that performs automatic normaliza—
tion and background reduction on multiple DamlD—seq FASTO datasets.

Availability and implementation: Open—source and freely available from http://owenjm.github.io/
damidseqipipeline. The damidseqipipeline is implemented in Perl and is compatible with any

Unix—based operating system (e.g. Linux, Mac OSX).
Contact: 0.marshall@gurd0n.cam.ac.uk

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

DamID is a well-established technique for discovering regions of
DNA bound by or associated with proteins (van Steensel and
Henikoff, 2000). It has been used to map the genome-wide binding
of transcription factors, chromatin proteins, nuclear complexes
associated with DNA and RNA pol II (for e.g. Choksi et (11., 2006;
Filion et (11., 2010; Singer et (11., 2014; Southall et (11., 2013). The
technique can be performed in cell culture, whole organisms (van
Steensel and Henikoff, 2000) or with cell-type specificity (Southall
et (11., 2013), and requires no fixation or antibody purification.
DamID involves the fusion of a bacterial DNA adenine methyl-
ase (Dam) to any DNA-associated protein of interest. The bacterial
Dam protein methylates adenine in the sequence GATC and, given
that higher eukaryotes lack native adenine methylation, the DNA-
binding footprint of the protein of interest is uniquely detectable
through isolating sequences flanked by methylated GATC sites.
However, a major consideration with DamID is that any Dam pro-
tein within the nucleus will non-specifically methylate adenines in
GATC sequences at accessible regions of the genome. For this rea-
son, DamID is always performed concurrently with a Dam-only

(C7 The Author 2015. Published by Oxford University Press.

control, and the final DNA-binding profile is typically presented as
a logz(Dam-fusion/Dam-only) ratio.

Although the majority of published DamID experiments have used
tiling microarrays for data analysis, next-generation sequencing
(NGS) allows greater sensitivity and higher accuracy. Although sev-
eral recent studies have used NGS with DamID (Carl and Russell,
2015; Clough et (11., 2014; Lie—A—Ling et (11., 2014; Wu and Yao,
2013), these have relied upon a comparison of peak binding intensities
between read-count-normalized Dam-fusion and Dam samples.
Depending on the characteristics of the Dam-fusion protein (see later)
this approach may lead to real signal being lost, and correct normal-
ization of the datasets is required to detect all binding by many Dam-
fusion proteins. Here, we describe a software pipeline for the auto-
mated processing of DamID-sequencing (DamID-seq) data, including
normalization and background reduction algorithms.

2 Algorithms

Although DamID-seq data can be aligned and binned as per all NGS
data, two issues arise that are specific to DamID. The first major

3371

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/Iicenses/by/4.0/), which permits
unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

/310‘Sjcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

_l:|'_"l :l
(ID"'|=I :I

RNA pol ll [microarraycI data from Sou all at al.. 2013!

I: u ‘L..HJALJMW ﬂ.

RNA pol ll [damidseq_pipeline processed]

 

An automated pipeline for DamID—seq processing

3373

 

degree of noise. Such noise can potentially obscure peak detection.
In order to mitigate this effect we add pseudocounts to both data—
sets. In order to maintain equivalence between replicates with differ—
ing numbers of reads (assuming that genomebound << genomeunbound)
the number of pseudocounts added is proportional to the sequencing
coverage, thus 6 ﬁgs, where c is a constant. (Supplementary Table 51
for a comparison of gene calls with different read—depths). Adding

 

pseudocounts increases the number and the total genomic coverage
of detected peaks and increases the signal:noise ratio
(Supplementary Figs 51—54).

The combination of these two methods compares favorably with
previously published microarray data [Fig. 1B (iv)] or DamID—seq
data (Supplementary Figs 51—54; Supplementary Fig. SS).

3 Implementation

The damidseq_pipeline software is implemented in Perl, and will
process multiple single—end read sequencing files in FASTQ or BAM
format. The pipeline can match sequencing adaptors to sam—
ple names, automatically identifies the Dam—only control, and per—
forms alignment, read—length extension, normalization, background
reduction and ratio file generation. (Supplementary Methods for
details).

A large number of user—configurable options are provided,
including the ability to adjust the normalization algorithm param—
eters, generate read—count normalized files and add a user—specified
number of pseudocounts. Parameters specified on the command—line
can be saved as defaults if the user desires.

The damidseq_pipeline software is open—source and freely avail—
able at http://owenjm.github.io/damidseq_pipeline. A detailed set of
installation and usage instructions are provided at the above web—
site, along with a small example dataset.

Acknowledgements

We thank Charles Bradshaw for helpful comments on the software. This
work was funded by a BBSRC Project Grant (BB/L00786X/1) and a
Wellcome Trust Programme Grant (092545) to A.H.B. A.H.B acknowledges
core funding to the Gurdon Institute from the Wellcome Trust (092096) and
CRUK (C6946/A14492).

Conﬂict of Interest: none declared.

References

Carl,S.H. and Russell,S. (2015) Common binding by redundant group B Sox
proteins is evolutionarily conserved in Drosophila. BMC Genomics, 16,
1—22.

Choksi,S.P. et al. (2006) Prospero acts as a binary switch between self-renewal
and differentiation in Drosophila neural stem cells. Dev. Cell, 11, 775—789.

Clough,E. et al. (2014) SeX- and tissue-speciﬁc functions of drosophila double-
seX transcription factor target genes. Dev. Cell, 31, 761—773.

Filion,G.J. et al. (2010) Systematic protein location mapping reveals ﬁve prin-
cipal chromatin types in Drosophila cells. Cell, 143, 212—224.

Lie-A-Ling,M. et al. (2014) RUNXl positively regulates a cell adhesion and
migration program in murine hemogenic endothelium prior to blood emer-
gence. Blood, 124, ell—e20.

Silverman,B.\X/. (1986) Density Estimation for Statistics and Data Analysis.
Chapman and Hall, London.

Singer,R. et al. (2014) Drosophila COP9 signalosome subunit 7 interacts with
multiple genomic loci to regulate development. Nucleic Acids Res., 42,
9761—9770.

Southall,T.D. et al. (2013) Cell-type-speciﬁc proﬁling of gene expression and
chromatin binding without cell isolation: assaying RNA Pol II occupancy in
neural stem cells. Dev. Cell, 26, 101—112.

van Steensel,B. and Henikoff,S. (2000) Identiﬁcation of in Vivo DNA targets of
chromatin proteins using tethered dam methyltransferase. Nat. Biotechnol.,
18, 424—428.

Wu,F. and Yao,]. (2013) Spatial compartmentalization at the nuclear periph-
ery characterized by genome-wide mapping. BMC Genomics, 14, 591.

ﬁlO'SWHmOprOJXO'SODBIIIJOJIIIOICV/Idnq

