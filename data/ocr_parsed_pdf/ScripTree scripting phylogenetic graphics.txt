APPLICATIONS NOTE

Vol. 26 no. 8 2010, pages 1125-1126
doi: 1 0. 1 093/bioinformatics/btq086

 

Phylogenetics

Advance Access publication March 1, 2010

ScripTree: scripting phylogenetic graphics
Fran ois Chevenet1’2’*, Olivier Croce3, Maxime Hebrard2, Richard Christen3

and Vincent Berry:2

1GEMI, IRD/CNRS UMR 2724, 911 avenue Agropolis, 34394 Montpellier, 2MAB, LIRMM, CNRS, Universit
Montpellier, 161, rue Ada, 34392 Montpellier and 3CNRS UMR 6543 and Universit Nice, Centre de Biochimie. Parc

Valrose. 06108 Nice, France
Associate Editor: Martin Bishop

 

ABSTRACT

Summary: There is a large amount of tools for interactive display
of phylogenetic trees. However, there is a shortage of tools for the
automation of tree rendering. Scripting phylogenetic graphics would
enable the saving of graphical analyses involving numerous and
complex tree handling operations and would allow the automation
of repetitive tasks. ScripTree is a tool intended to fill this gap. It
is an interpreter to be used in batch mode. Phylogenetic graphics
instructions, related to tree rendering as well as tree annotation, are
stored in a text file and processed in a sequential way.

Availability: ScripTree can be used online or downloaded at
www.scriptree.org, under the GPL license.

Implementation: ScripTree, written in Tcl/T k, is a cross-platform
application available for Windows and Unix-like systems including
08 X. It can be used either as a stand-alone package or included in
a bioinformatic pipeline and linked to a H'I'I'P server.

Contact: chevenet@ird.fr

Received on November 17, 2009; revised on February 22, 2010;
accepted on February 23, 2010

1 PHYLOGENETIC GRAPHICS

Phylogenetic graphics deals with basic operations on trees
(e.g. rooting) and tree rendering processes (e.g. annotation) in
the context of large trees and/or collection of trees. Phylogenetic
graphics resorts to dynamic information visualization techniques
such as ‘focus +Context’ magnifying features. Tree annotation
consists in the highlighting (coloring, posting of text or symbols)
of subtrees or leaf labels according to additional information
(e.g. taxonomy, geography, gene function, etc.) related to the
entities under study (molecular sequences, species, etc.). Tools like
TreeJuxtaposer (Munzner et (11., 2003), TreeDyn (Chevenet et (11.,
2006), Dendroscope (Huson et (11., 2007) are examples of tree editors
with phylogenetic graphic capabilities. A new Challenge in the ﬁeld
is the automation of a graphical analysis encoded as a sequence of
operations that precisely describes the way to display and tag trees
with additional information. These operations are stored in a script,
usable on the same or different datasets. Moreover, scripting is a
ﬂexible approach allowing computations to be run either as a local
stand-alone process or incorporated within a pipeline and potentially
accessible through a web interface. Currently, there is a need for
such automation of phylogenetic graphics as we see more and more

 

*To whom correspondence should be addressed.

web sites that provide access to bioinformatic analyses displaying
trees, e.g. PhylomeDB (Huerta-Cepas et (11., 2007), phylogeny.fr
(Dereeper et (11., 2008), PhyloExplorer (Ranwez et (11., 2009). Yet,
few existing tools have scripting capabilities—ATV/Archeopteryx
(Zmasek et (11 ., 2001), TreeGraph (Muller et (11., 2004), Ape (Paradis
et (11 ., 2004), TreeDyn (Chevenet et (11 ., 2006), Dendroscope (Huson
et (11., 2007) or ETE (Huerta-Cepas et (11., 2010). Archeopteryx
displays single trees in interactive manipulations. Hence, this is not
the tool of Choice for automatically rendering tree collections with
complex annotations. ETE offers elaborated features for analysis
of trees as well as automation and visualization of trees. It is a
powerful programmable toolkit, but requires object oriented Python
programming skills to annotate trees in an automated way. ScripTree
has tree annotation features more elaborated than the TreeDyn ones.
ScripTree is a higher level interpreter, including numerous and
speciﬁc annotation commands. It is dedicated to automation and,
hence, does not contain a graphical user interface.

2 SCRIPTREEINPUT/OUTPUT

The basic ScripTree command line is scriptree —tree
file .nwk [options]. The —tree argument refers to a ﬁle
containing one or more newick strings encoding trees. Without any
other speciﬁcation, ScripTree uses default settings for rendering
these trees. Different output ﬁle formats are available: PostScript,
SVG, PNG and TGF. The SVG format can be displayed by web
browsers and edited with drawing programs such as InkSCape.
The TGF format is useﬁil for an interactive post-processing
using the TreeDyn editor. A ﬁrst optional ﬂag is —script
file . txt indicating the ﬁle containing rendering and annotation
commands. The speciﬁcity of ScripTree is to take into account
additional information into the tree rendering process, indicated
by a second optional ﬂag, —annotation file . txt. This
information is given in a tabular CSV format: annotation variables
as columns, and rows related to leaves or internal nodes of the
trees. Separating annotations from the tree encoding allows the latter
to be compatible with the newick format outputted by common
phylogenetic inference programs and the former to be reused on
other tree collections.

3 SCRIPTREE COMMANDS

ScripTree commands are divided into three families: edition,
projection and identiﬁcation. In the following, we present examples
of commands belonging to these families (Fig. la) and apply them

 

© The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org 1125

112 /3.Io's[Bumo[pJOJXO'sotwuiJOJutotqﬂ:duq 11101} pQPBOIII/lAOG

9103 ‘{g anﬁnv 110::

EChevenet et al.

 

(a) 1} Inc width Bl] 41639111 1.50 columns 2 {adamantan 1 mt {Cn‘}
‘2} l_aymbul_annolnﬁon what npatd -syrnbul I12
‘2') I_hmcket_annulalian what a
‘3] query_newlck 41 {NF} -hl {4: Is] -symbal {03 :l 3 orange orange”
3'] query_annotation -q {Genus 1!: NPV and Capsld W M} -hi {-0 {Ito sin} 4: #FW}

 

wJ————£ﬂ :Im ———77m 9"”
.  PI I
: __ ' Ado o
: 3! NF'U s  : H .
. plr . :- NPV
E NPV
o
c
o ..
.'

   
    

 

   

  

swig

 

 

00.00.00...
2
'ﬂ
4

Fig. 1. Sample of a script (3) and image generated by its interpretation by
ScripTree (b) for four gene trees of 19 Virus species (Simon et al.. 2005).
ScripTree’s input is (i) a tree ﬁle containing four newick strings; (ii) a script
ﬁle with the commands; (iii) an annotation ﬁle with two variables: Genus
and Capsid. The Genus variable stores taxonomic information related
to two genera. Nucleopolyhea’rovirus (NPV) and Granulovirus (GV). The
Capsid variable codes for single (S) or multiple (M) Virion nucleocapsids.

to a collection of four newick strings. Assembling these commands
yields Figure lb.

The edition family acts on trees as a whole, specifying: (i) global
tree rendering such tree size, leaf label font, organization of a
tree collection into rows and columns; (ii) tree manipulations such
as branch swapping and rerooting. For instance, command (1) in
Figure la sets the size of the trees to 80 X 150 pixels, organizes
them as a two-by-two matrix, displays them with a rectangular shape
accounting for branch lengths (—conformation 1) and ﬁnally
roots the trees at the smallest subtree containing all leaf labels that
begin with Cn (CnA and/or CnB depending on the trees).

The projection command family allows posting information
onto trees. It is organized according to three criteria concerning
annotation: (i) its kind (e.g. text, symbol, bracket, arc), (ii) its object
(e.g. leaf, edge, subtree) and, (iii) its source, i.e. either the newick
string itself (e.g. branch lengths) or the annotation ﬁle. Commands
(2) and (2’) in Figure la put two columns of annotations next to each
tree: l_symbol_annotation inserts colored circles (—symbol
02) in regards of taxa depending on their value for the Caps id
variable (—what ﬂag). The l_bracke t_annotation command
puts brackets (i.e. colored bars) in regards of speciﬁc subtrees. Each
bracket corresponds to a maximal subtree whose leaves all share a
same value for a given variable. Here, the bracket column is related
to the Genus variable which contains two modalities (GV and NPV).
Several variables can be listed as arguments in a single —what ﬂag.

The identiﬁcation commands which enable to highlight only
parts of the trees, identiﬁed by a query, operate either on the

newick string itself (pattern matching allowed) or on the information
contained in an annotation ﬁle. Each query returns a list of matching
labels to which one or several highlighting operations are then
applied. Identiﬁcation commands comprise two parts: selection
(—ql or —q ﬂag) and highlighting (—hi ﬂag). For instance,
the query_newick command (3) in Figure la ﬁrst selects the
Maco—A and Maco—B leaf labels (Fig. lb), i.e. those matching
the M* pattern. Then, the is j highlighting operation (—0 ﬂag), a
shortcut for 1 ea f_symbol_j uxtapos i ti on, posts a symbol in
regards of these leaf labels. These symbols can be of different shapes
(here 03 for diamonds), size (here 3 X 3 pixels) and color (orange
for border and ﬁll). Lastly, command (3’) of Figure 1a illustrates
how a query command based on annotations selects labels having
values NPV for the Genus variable and M for the Caps id variable
(—q ﬂag). Then, the command highlights (—hi ﬂag) tree parts by
several operations (—0 ﬂag) switching the leaf label foreground color
(1 fg) and that of corresponding subtrees (s f g) to the orange color,
here encoded by its hexadecimal value (—c #F83).

4 CONCLUSION

ScripTree is a tool for scripting phylogenetic graphics. It allows the
management of multiple trees and usual kinds of annotations. It can
be used either as a stand-alone package or included in a pipeline and
linked to a HTTP server. ScripTree is under continuous development,
and suggestions of new ﬁinctionnalities are welcome.

ACKNOWLEDGEMENTS

We thank V. Guignon and A. Dereeper for comments.

F unding: IRD-SPIRALES 2007; ANR PhylAriane project ANR-08-
EMER-01 1-01 ; ANR-Biodiversite Aquaparadox project.

Conﬂict of Interest: none declared.

REFERENCES

Chevenet,F. et al. (2006) TreeDyn: towards dynamic graphics and annotations for
analyses of trees. BM C Bioinformatics, 7, 439.

Dereeper,A. et al. (2008) Phylogenyfr: robust phylogenetic analysis for the non-
specialist. Nucleic Acids Res., 36, 465469.

Huerta-Cepas,J. et al. (2007) PhylomeDB: a database for genome-wide collections of
gene phylogenies. Nucleic Acids Res. 36, 491496.

Huerta-Cepas,J. et al. (2010) ETE: a python environment for tree exploration. BMC
Bioinformatics, 11, 24.

Huson,D. et al. (2007) Dendroscope: an interactive viewer for large phylogenetic trees.
BMC Bioinformatics, 8, 460.

Muller,J. and Muller,K. (2004) TreeGraph: automated drawing of complex tree ﬁgures
using an extensible tree description format. Mol. Ecol. Notes, 4, 7867788.

Munzner,T. et al. (2003) TreeJuxtaposer: scalable tree comparison using focus+context
with guaranteed visibility. ACM Trans. Graphics, 22, 453462.

Paradis,E. et al. (2004) APE: analyses of phylogenetics and evolution in R language.
Bioinformatics, 20, 2897290.

Ranwez,V. et al. (2009) PhyloExplorer: a web server to validate, explore and query
phylogenetic trees. BMC Evol. Biol, 9, 108.

Simon,O. et al. (2005) Physical and partial genetic map of Spodoptera frugiperda
nucleopolyhedrovirus (SfMNPV) genome. Virus Genes, 30, 403417.

Zmasek,C.M. et al. (2001) ATV: display and manipulation of annotated phylogenetic
trees. Bioinformatics, 17, 3837384.

 

1126

112 /3.Io's[Bumo[pJOJXO'sotwuiJOJutotqﬂ:duq wort pQPBOIII/lAOG

9103 ‘{g isnﬁnv 110::

