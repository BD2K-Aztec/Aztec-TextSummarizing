APPLICATIONS NOTE

Vol. 27 no. 9 2011, pages 1309—1310
doi:10. 1093/bioinformatics/btr1 14

 

Genome analysis

Advance Access publication March 3, 2011

GBOOST: a GPU-based tool for detecting gene—gene interactions
in genome—wide case control studies
Ling Sing Yung*, Can Yang, Xiang Wan and Weichuan Yu*

Laboratory for Bioinformatics and Computational Biology, Department of Electronic and Computer Engineering,
The Hong Kong University of Science and Technology, Clear Water Bay, Kowloon, Hong Kong, China

Associate Editor: Alfonso Valencia

 

ABSTRACT

Motivation: Collecting millions of genetic variations is feasible
with the advanced genotyping technology. With a huge amount of
genetic variations data in hand, developing efficient algorithms to
carry out the gene—gene interaction analysis in a timely manner
has become one of the key problems in genome-wide association
studies (GWAS). Boolean operation-based screening and testing
(BOOST), a recent work in GWAS, completes gene—gene interaction
analysis in 2.5 days on a desktop computer. Compared with central
processing units (CPUs), graphic processing units (GPUs) are highly
parallel hardware and provide massive computing resources. We are,
therefore, motivated to use GPUs to further speed up the analysis of
gene—gene interactions.

Results: We implement the BOOST method based on a GPU
framework and name it GBOOST. GBOOST achieves a 40-fold
speedup compared with BOOST. |t completes the analysis of
Wellcome Trust Case Control Consortium Type 2 Diabetes (WTCCC
T2D) genome data within 1.34h on a desktop computer equipped
with Nvidia GeForce GTX 285 display card.

Availability: GBOOST code is available at http://bioinformatics.ust
.hk/BOOST.html#GBOOST.

Contact: timyung@ust.hk; eeyu@ust.hk

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on December 30, 2010; revised on February 24, 2011;
accepted on February 26, 2011

1 INTRODUCTION

Interaction patterns of single-nucleotide polymorphism (SNP) can
be used to interpret genetic disease risks in individuals. With the
advances of technologies, the burden of collecting genome-wide
DNA sequence variations has been lifted. The burst of genotype
data leads to an urge of efﬁcient algorithms to analyze many
genome-wide association studies (GWAS) data in a reasonable
period of time. A comprehensive review (Cordell, 2009) summarized
some popular methods in detecting gene—gene interactions. PLINK
was recommended as the most computationally feasible method
for detecting gene—gene interactions in genome-wide data. It was
reported that PLINK ﬁnished the pairwise interaction examination
of 89 294 SNPs selected from the WTCCC Crohn disease dataset
with ~5000 samples in 14 days (Cordell, 2009).

 

*To whom correspondence should be addressed.

Recently, Wan et a1. (2010) proposed a fast method, named
BOOST, to examine all pairwise interactions in genome-wide
case—control studies. BOOST completed the pairwise interaction
analysis of human genome data with ~350 000 SNPs and ~5000
samples on a computer with 3 GHz central processing unit (CPU)
and 4 GB memory in 60h.

However, we can foresee that the growth of data will overwhelm
BOOST in the near future. Ma et a1. (2008) suggested that
the analysis time in GWAS can be largely reduced by parallel
computing. The development of graphical processing units (GPUs)
enables modern display cards to have hundreds of cores, providing
a high memory bandwidth at a low price. A recent GPU
implementation of the multifactor dimensionality reduction (MDR)
method (Greene et al., 2010) has signiﬁcantly reduced the time
required for detecting gene—gene interactions. The demand of
massive memory operations in collecting contingency tables and
independence of analyzing different SNP pairs in BOOST make it
suitable to implement BOOST in GPU. Here we propose GBOOST,
a GPU implementation of BOOST. GBOOST is able to ﬁnish the
genome-wide interaction analysis of a typical dataset on a single
workstation within a few hours.

2 METHODS

GBOOST is a software package targetng at geneigene interaction analysis
of large genome data. It is a C++ parallel implementation of the BOOST
method using Compute Uniﬁed Device Architecture runtime application
programming interface (Corporation. 2008).

BOOST GBOOST

Input Stage
0 Load and convert data into bit representation.
Screening and Testing
For each SNP pair: This screening step is parallelized by applying
0 (Step 1) Collect the contingency table by the following GPU techniques:
bitwise operations with a pre-computed O Maximize coalesced memory access for the

 

 

 

look-up table. data in global memory.
0 (Step 2: Screening) Approximate the 0 Use Hamming weight for bit string
likelihood ratio test statistic. If the score counting.

is smallerthan a pre-def'ined threshold, 0 Use branch prediction for consistent
then skip step 3. computer instructions.

0 (Step 3: Testing) Evaluate the exact The testing step is the same as that in BOOST.
solution using the classical likelihood
ratio test.

Output Stage

0 Output the SNP pair indexes and interaction scores.

 

 

 

 

 

 

Fig. 1. Main steps in BOOST and GBOOST. GBOOST parallelizes the
screening step in BOOST to achieve a speedup of 40.

 

© The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 1309

112 ﬁlo's[sumo[pJOJXO'sotwuiJOJutotqﬂ:duq 11101} popcorn/hog

9103 ‘Og anﬁnv uo ::

L.S.Yung et al.

 

 

i mmmm_n anilalﬂssoclntnnéhs!
g nmam. .|_ «:e-amnm w 04

mm m : A 1 .1 sar
.— mun : .'J. m
g No Llst

; Illﬂlmml2: ﬂl'ﬂllﬂ ‘
mmrmsmmmzmt
mmwmmmnnsm
IlInlmmlmﬂ'Slm
mmrmmmsmam
Imam-«isms: rams
Imll'BIJm: I'I'IJEI'
utmcmmmsm
“mum-moms: 54.125
IIMH'IBI'IIINH'HMZEXM
ImMIIMWZEEIHﬂ
Immmnmrm:n.m
IW‘WIOIMW: 5&5”
IHIIHITJmMSE HJ'MII
nmmmnmammam
nmtmmssm: 53.99213 N, _ _.
INIZSTIJIIWZEZI'H
ummmemamzm.m
:wrwurmsm :num
ImMIIMEIEJZS-
[5042]! {MM‘ES : {LEDSM
M I I 7Iﬂl|6\!£iul'iﬂﬁﬁﬂl IﬁJﬂI E
H40Iﬂj‘4 IJSJNFBE :JEJBI I49
[5‘ III!“ f 115‘ 153.135: “1.7112
I5 I Nlﬁé-I I I‘M? LITE: ‘ﬁJﬂSI
[5109??6HJS-HH'12I (‘8: IEJHMQ
[SIWII I imam; ‘3 1'8: Jud-1?!
[£1 NJT’DUKI I'IITIIIlN . 15.3“
[I FHEDWISZG‘E! HEJIHMS
[HZZIHHYIJS4GDZEIBE Imam
“6 Q5319; I16930053: 16.0566
tiIWIIIIJ-lwﬁII'FIIIWElERBI9 '6‘}ﬂ."f§J-I
HMHHJI'JBI-tMIEHI'EIDJE-IW' I

u .

Israel?

sonny: wNamﬂ
autumn-e?
. 8mm
sued Ton: .'J Eat mane-:4
seven new . -
sum" Ducted" "‘l'ﬁ‘ﬁ“ 
Search "‘° “I” u-.-' mm :3

mm WHEN

'— :-. u:

   
     

Mlkllﬂ Mann :

. Ilalsloullllll
written 0 Inch.“
I mum-mug
Wllxex'mim

Show Me. -Io|wﬂ l>¥||..

 

v Slum Rm“ name
slum «mum
r W mum wmuu _

[g

.-—:4-' :13 I :Ir:
. rm:- vent"

 

I'Inu'IJnlIon
EIIESIW
__ . um um
,. "ll-191522 mmnui
ﬁwwﬂIﬂEMIr
I . ' MIDI! ENE

. - ,_.
maniac: " 5"

Emnh Vertex Iln
Wrtrl Home: mznmoa
-:-'1_- :33! «max van: 1:355:11!
nominal" Pull-aw: Ullhmm"
Pllwo! ti!

mums: Unit“ in
F:slc name vane

s: 151702-

 

 

Fig. 2. A snapshot of a pathway graph generated from 20 interaction pairs from one GBOOST result. Each node is labeled by its SNP name and the node
value is the marginal association score from the association analysis. The edge value is the interaction score of the linked nodes (i.e. SNP pairs). Scaling,
rotation and translation are available in the pathway graph. Various functions are also avaliable to remove or highlight components in the pathway graph. The

layout can be interactively customized.

The computational burden of BOOST lies in the screening stage. Thus,
GBOOST modiﬁes input data structures and parallelizes computations in
the screening stage. Figure 1 gives the key differences between BOOST
and GBOOST. Please refer to the Supplementary data for the detailed
implementation of GBOOST.

3 RESULTS AND DISCUSSION

Table 1 shows the performance of BOOST and GBOOST
on different datasets. It also provides basic visualization by
using two publicly available libraries JFreeChart (http://www.jfree
.org/jfreechart) and JUNG (http://jung.sourceforge.net/). Figure 2
presents a pathway graph example generated from one GBOOST
result.

In our ﬁiture work, we plan to extend GBOOST to support
execution on multiple GPUs and explore new memory optimization
techniques.

ACKNOWLEDGEMENTS

We thank the editor and the anonymous reviewers for their
constructive suggestions and comments.

Funding: This work was partially supported with grants
RPClOEG04 and PCF004.09/ 10 from the Hong Kong University
of Science and Technology.

Conﬂict of Interest: none declared.

Table 1. Running time of BOOST and GBOOST on different datasets

 

 

BOOST GBOOST
n=5000, p=5000 425 1.045
n=5000, p=10000 1705 4.115
n=5003, p=351542 60h 1.34h

 

BOOST is tested on a computer with 3 GHz CPU. GBOOST is tested on a computer
with a GTX 285 display card. Here n denotes sample size and p denotes number of
SNPs.

REFERENCES

Cordell,H. (2009) Detecting geneigene interactions that underlie human diseases. Nat.
Rev. Genet., 10, 392404.

NVIDIA. (2008) NVIDIA compute uniﬁed device architecture programming guide
version 2.1. Technical report. Availabel at: http://developer.download.nvidia.com/
compute/cuda/2_1/toolkit/docs/NVIDIA_CUDA_Programming_Guide_2. 1 .pdf.

Greene,C. et a]. (2010) Multifactor dimensionality reduction for graphics
processing units enables genome-wide testing of epistasis in sporadic ALS.
Bioinfomtatics, 26, 694.

Ma,L. et a]. (2008) Parallel and serial computing tools for testing single-locus and
epistatic SNP effects of quantitative traits in genome-wide association studies. BMC
Bioinfomtatics, 9, 315.

Wan,X. et a]. (2010) BOOST: A boolean representation-based method for detecting
SNP-SNP interactions in genome-wide association studies. Am. J. Hum. Genet, 87,
3257340.

 

1310

112 /3.IO'SIBIIII’IO[p.IOJXO'SOTJBLUJOJIITOTq”Idllq mot} pepeommoq

910Z ‘OE ISUEHV Ho ::

