APPLICATIONS NOTE V°" 2305-135.123%;iiiiialiifgliég

 

Sequence analysis

Advance Access publication April 28, 2013

BioBIend: automating pipeline analyses within Galaxy

and CloudMan

Clare Sloggett‘, Nuwan Gioonasekeral'2 and Enis Afgan1'3'*

1Victorian Life Sciences Computation Initiative (VLSCI), University of Melbourne, Melbourne, Australia, 2Victorian
eResearch Strategic Initiative (VeRSI), University of Melbourne, Melbourne, Australia and 3Center for Informatics and
Computing (CIR), Ruder Boskovic Institute (RBI), Zagreb, Croatia

Associate Editor: Alfonso Valencia

 

ABSTRACT

Summary: We present BioBIend, a uniﬁed API in a high-level language
(python) that wraps the functionality of Galaxy and CloudMan APls.
BioBIend makes it easy for bioinformaticians to automate end-to-end
large data analysis, from scratch, in a way that is highly accessible to
collaborators, by allowing them to both provide the required infrastruc-
ture and automate complex analyses over large datasets within the
familiar Galaxy environment.

Availability and implementation: http://bioblend.readthedocs.org/.
Automated installation of BioBIend is available via PyPl (e.g. pip install
bioblend). Alternatively, the source code is available from the GitHub
repository (https://github.com/afgane/bioblend) under the MIT open
source license. The library has been tested and is working on Linux,
Macintosh and Windows-based systems.

Contact: enis.afgan@unimelb.edu.au

Received on November 30, 2012; revised on March 12, 2013;
accepted on April 22, 2013

1 INTRODUCTION

With the continuous inﬂux of high-throughput genomic sequen-
cing data, automation of complex analyses has become essential
to reduce repetitive effort by researchers. Genomics increasingly
involves running computationally intensive analyses, each of
which may take days, over large numbers of samples. These ana-
lyses use a broad landscape of tools and usually require the skills
of both biologists and bioinformaticians.

Galaxy (Nekrutenko and Taylor, 2012) is a popular applica-
tion for bioinformatics analysis. It provides a web-based inter-
face that allows interactive analysis and Visualization of large
complex data while automatically tracking all the analysis
steps. It is thus an excellent tool for designing analyses, recording
provenance and facilitating collaboration between bioinformati-
cians and biologists. However, the graphical point-and-click
interface is less than ideal for the execution of the resulting pipe-
lines over large numbers of samples, or for handling complex,
sample-dependent workﬂow logic. To remedy this, Galaxy also
offers a programmatic API. This makes it possible to (i) use
Galaxy to design an analysis in a Visual and integrated setting;
(ii) automate reuse of the created pipeline in a ﬂexible scripted
manner; and (iii) retain all of the results in Galaxy’s interactive
environment.

 

*To whom correspondence should be addressed.

In addition to a framework for composing pipelines, there is
a need for computational infrastructure capable of doing
the processing and data storage in a scalable manner. Galaxy
supports the notion of executing entirely within a cloud comput-
ing environment Via the CloudMan platform (Afgan et al., 2011).
The CloudMan platform enables a complete deployment of
Galaxy, including the Galaxy application itself, the underlying
bioinformatics command-line tools and the reference data,
to be easily provisioned and managed on a cloud infrastructure
(Afgan et al., 2010). CloudMan works with Amazon, OpenStack,
OpenNebula and Eucalyptus-based clouds and can be used
with applications other than Galaxy. CloudMan also exposes
an API through which it can be programmatically manipulated,
allowing provisioning and scaling of the compute platform
for automated parallelized pipeline processing.

Currently, the Galaxy and CloudMan APIs are available as
HTTP-based REST interfaces, which are arguably difficult for
bioinformaticians to discover and interact with. Most bioinfor-
maticians are comfortable writing automation scripts in a high-
level scripting language. They are typically much less interested
in writing direct HTTP requests or using low-level constructs.
With that in mind, we have developed a Python library for
Galaxy and CloudMan, called BioBlend that provides a high-
level interface for interacting with the two applications. This
promotes faster interaction with those applications, facilitates
reuse and sharing of scripts and eases collaboration between
bioinformaticians and biologists. Extensive API documentation
is provided for the library while the source code repository con-
tains speciﬁc examples.

2 METHODS

The BioBIend library is implemented in Python and provides
Python bindings for Galaxy and CloudMan. The library needs to be
installed on a local system and imported into a runtime environment
(or a script) before use. The library functionality is then available via regu-
lar method calls on objects. When invoked, the methods return data as
Python dictionaries, encapsulating the return state of the method
invocation.

Structurally, at the top-most level, the library is divided into
two main modules, representing the two applications, Galaxy
and CloudMan. Within the module for each application, further 10-
gical structure has been created to match the concepts and functionality
available within the application. Figure 1 illustrates this structure.

The CloudMan bindings allow cloud resources to be provisioned and
managed. By default, this will happen on the Amazon EC2 infrastructure

 

© The Author 2013. Published by Oxford University Press. All rights resen/ed. For Permissions, please email: journals.permissions@oup.com 1685

112 /310's112u1nofp10}x0"sotwurJOJutotq/ﬁduq 11101} pQPBOIIIAAOG

91oz ‘Og isnﬁnV uo ::

C.Sloggett et al.

 

 

 

 

 

 

 

Galaxylnsrama
mm
Ilbrﬂ'las LIblaryCiBn‘I
gu_llruhq]
um Imi
mrﬂlm mm N
\ 11 In .1
ﬁlm ‘ . _ _ _ _ _ 1
\ him-Isa Hum-Klimt '-------
\ r _ _ _ _ _ _ .‘ _ _ — — — —.
‘ '- ...Cliarlt I
“WWW” L _ _ _ _ _ _ a I _ _ _ _ _ -1
MWnConﬁu mum
awn-nan W
P. in . “L n

 

 

 

Fig. 1. Logical structure of BioBIend library modules

but support for other clouds exists. For instance, with the following code,
we launch a new CloudMan platform:

from bioblend.cloudman import CloudManConfig, CloudManInstance

cfg : CloudManConfig(access_key, secret_key, c1uster_name, ami_id,
instance_type, password, block_till_ready=True)

cmi : CloudManInstance.launch_instance(cfg)

cmi.initialize(cluster_type=’Galaxy’, initia1_storage_size=50)

print cmi.get_status()

The launch_instance method is a blocking call (conﬁgurable),
which will return once the CloudMan instance is provisioned and ready
for use. Next, we enable CloudMan’s auto-scaling feature, which will
keep the size of the compute infrastructure proportional to the given
workload:

cmi . enable_autoscaling(min_nodes:0, max_nodes:10)

The Galaxy bindings allow users to import data, user histories or
workﬂows to Galaxy, and to interact with existing objects. For
instance, we can import a workﬂow that has been archived as JSON
using

gi : galaxy.GalaxyInstance(url:cmi,galaxy_url, key:ga1axy_api_key)
my_workflow : gi.workflows. import_workflow_‘From_json(json_string)

where my_workﬂow will be returned as a Python dictionary encapsu-
lating the imported workﬂow’s state.

We can import data from local or remote systems. For instance, to
import data into a Galaxy Data Library from a URL:

my_dataset = gi.libraries.upload_file_from_url(library_id, url)

or from the local machine:

my_dataset : gi . libraries . upload_fi1e_from_local_path(library_id,
local_path)

This will return a dictionary encapsulating the dataset parameters.
We can then execute the workﬂow using:
datamap : {input_id: {'src’: 'ld’, 'id’: my_dataset['id']}}
gi .workflows. run_workf'low(my_workf'low[ ’ id ' ], datamap,
history_name:"Example output")

This call mirrors the structure of the data types used by the
underlying Galaxy REST API. It will call the imported workﬂow
with the imported data as input, and the Galaxy workﬂow engine will
execute the workﬂow’s tasks in a correct and, if possible, parallelized
order, taking advantage of the parallel compute infrastructure.
The output ﬁles can be viewed in or retrieved from the persistent
user-owned History, which, in this case, we have created and named
Example output. In a scripting context, we can of course scale this
up to high-throughput or more complex analysis easily. The online
documentation includes more complete examples. As calling run_work-
ﬂow submits a series of jobs to Galaxy and returns immediately, we can
leave job queuing, parallelization and dependency checking to the work-
ﬂow engine and write our scripts in a straightforward procedural manner.

3 DISCUSSION

Pipeline automation is becoming a necessity to reduce repetitive
effort performed by bioinformaticians [e.g. Ruffus (http://code.
google.com/p/ruffus/), Nesoni (http://Vicbioinformatics.com/
nesoni.shtml)]. The high-level API made available by BioBlend
allows researchers to combine the ﬂexibility and automation of a
scripting language with the accessibility of Galaxy’s environment
and CloudMan-managed infrastructure. This makes it possible
for a bioinformatician to perform a scripted analysis and then to
follow it up with a biologist in the Galaxy setting, leveraging
Galaxy’s capabilities for interactive analysis, Visualization and
direct publishing of data or workﬂows. This ﬁlls an increasingly
important gap between the need to make analyses accessible and
reproducible, and the need for an automated and ﬂexible analysis
environment that handles all the corner cases of a research
project.

As a scripting library, BioBlend opens the door for the auto-
mation of not only pipeline processing but also infrastructure
provisioning and management. As a result, it is uniquely pos-
itioned to streamline pipeline automation and to become a stand-
ard library for interacting with CloudMan and Galaxy:
CloudMan can be used to provision and manage the infrastruc-
ture required to run a high-throughput analysis, whereas all
the processing is done through Galaxy. At the end of a run,
the compute infrastructure can be automatically released,
whereas all the data and performed steps are retained within
Galaxy, enabling easy reuse, Visual interaction, sharing and
further analysis. Furthermore, it is possible to envision
BioBlend as a ﬁrst step toward defining a Galaxy Shell, which
would allow a more integrated access to Galaxy internals for
advanced usage.

Since the release of BioBlend, two new complementary
libraries based on BioBlend have emerged from the commu-
nity: Blend4j (https://github.com/jmchilton/blend4j) and clj-
blend (https://github.com/chapmanb/clj-blend). These provide
comparable functionality but for different languages, Java
and Clojure, respectively. BioBlend is also demonstrated in
production use in BioCloudCentral (http://biocloudcentral.
org/), where BioBlend is used to launch CloudMan clusters
on different clouds.

ACKNOWLEDGEMENTS

Galaxy, CloudMan and BioBlend have been developed by the
Galaxy (http://wiki.galaxyproject.org/GalaxyTeam) and LSCC
teams (http://www.Vlsci.org.au/page/lscc).

Funding: This work was, in part, supported by the Genomics
Virtual Laboratory (GVL) grant from the National eResearch
Collaboration Tools and Resources (NeCTAR).

Conﬂict of interest: None declared.

REFERENCES

Afgan,E. et a]. (2010) Galaxy CloudMan: delivering cloud compute clusters. BMC
Bioinformatics, ll (SuppL 12), S4.

Afgan,E. et a]. (2011) Harnessing cloud computing with Galaxy Cloud.
Nat. Biotech., 2‘), 9727974.

Nekrutenko,A. and Taylor,J. (2012) Next—generation sequencing data
interpretation: enhancing reproducibility and accessibility. Nat. Rev. Genet.,
13, 667$72.

 

1686

112 /310's112u1nofp10}x0"sotJBurJOJutotq/ﬁduq 11101} papaolumoq

91oz ‘Og isnﬁnV uo ::

