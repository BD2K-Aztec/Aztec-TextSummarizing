Bioinformatics, 31 (24), 2015, 4026—4028

doi: 10.1093/bioinformatics/btv490

Advance Access Publication Date: 26 August 2015
Applications Note

 

Gene expression

HiXCorr. a portable high-speed Xcorr engine for
high-resolution tandem mass spectrometry

Hyunwoo Kim1, Hosung J01, Heejin Park2'* and Eunok Paek2

1Department of Electronics and Computer Engineering and 2Department of Computer Science and Engineering,

Hanyang University, Seoul, Korea

*To whom correspondence should be addressed.
Associate Editor: Ziv Bar-Joseph

Received on March 26, 2015; revised on August 12, 2015; accepted on August 14, 2015

Abstract

Summary: Peptide identification is an important problem in proteomics. One of the most popular
scoring schemes for peptide identification is XCOrr (cross—correlation). Since calculating XCOrr is
computationally intensive, a lot of efforts have been made to develop fast XCOrr engines. However,
the existing XCC,rr engines are not suitable for high—resolution MS/MS spectrometry because they
are either slow or require a specific type of CPU. We present a portable high—speed XCOrr engine for
high—resolution tandem mass spectrometry by developing a novel algorithm for calculating XCO".
The algorithm enables XCOrr calculation 1.25—49 times faster than previous algorithms for 0.01 Da
fragment tolerance. Furthermore, our engine is easily portable to any machine with different types
of CPU because it is developed in C language. Hence, our XCOrr engine will expedite peptide identifi—

cation by high—resolution tandem mass spectrometry.

Availability and implementation: Available at http://isa.hanyang.ac.kr/HiXCorr/HiXCorr.html.

Contact: hjpark@hanyang.ac.kr

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

Proteomics (Wilkins et (11., 1997) is the study of proteins, particu—
larly expression, structures, functions and interactions of proteins.
Because proteins play important roles in a human body, correct pro—
tein (sequence) identification (Steen et (11., 2004) is very important.
High—throughput protein identification is generally done by cleaving
a protein into peptides, getting tandem mass (MS/MS) spectra of the
peptides and analyzing the spectra to identify peptide sequences.

SEQUEST (Eng et (11., 1994) is one of the most widely used
computer programs for peptide identification from MS/MS spectrum
analysis. It compares an experimental spectrum with theoretical spec—
tra computationally created from sequences in peptide database, and
finds the theoretical spectrum most similar to the experimental spec—
trum. To measure the similarity between the theoretical and experi—
mental spectra, SEQUEST uses a sophisticated scoring scheme chrr
(cross—correlation).

However, calculating XCUrr can be very slow and consumes most
of the running time of SEQUEST. Thus, a lot of efforts have been

made to overcome this speed issue. The original SEQUEST used fast
Fourier transform algorithm (Cormen et (11., 2001) to make the
XCm calculation faster. Later, Crux (Eng et (11., 2008) improved the
calculation speed of XCm by using a precomputation table, which is
also used in modern SEQUEST and TurboSEQUEST. Faster XCUrr
calculation is performed by Tide (Diament and Noble, 2011). It was
optimized for x86 machine by including the x86 assembly code.
Later, a portable Tide was developed in C language with exact
P—value computation capability. (Hobert and Noble, 2014). To dis—
tinguish these two Tide versions, we will call the earlier version with
x86 assembly code Tide-x86 and the later portable version Tide-C.
Modern processors have multicores and support multithreading.
Comet (Eng et (11., 2013), an open—source MS/MS search tool by
Xcom supported multithreading for chH calculation. Thus, the
more processors and cores a machine has, the faster the Comet runs.

Nowadays, more and more spectra are being acquired by high—
resolution mass spectrometers. For example, Q—Exactive Orbitrap
hybrid mass spectrometers (Thermo Scientiﬁc, Bremen, Germany)

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 4025

 

91oz ‘Og JSanV 110 saloﬁuv soc] ‘BtHJOJtIBQ 30 AJtSJQAtuf] 112 /310'slcu1n0[p103x0"sotJBuiJOJutotq/ﬁduq 11101} popcolumoq

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

HiX Corr: 6 portable high—speed Xcorr engine 4027
la) :51 lb} (:1

1300 — —— a me i 800 — — r. ‘0 Comet-50m

- - - - - - 1109-1186 1' Comet-H1
1600 — Tina-Hi _r we — .

I
1400 — If m _ I,
1200 — , 500 _ l,
1000 — i ,
1 400 — z
300 — .1 , ’
600 — 1 3m _ ,’
400 — t J 200 — I f
I __ t '
200— 1” 100— _ _ _ _ _ ._--""
o _ I111 _ _ _ A . . - - - . . . — — — I . . - - v ' ‘ ' v. U _
1 1 1 1 1 I 1 r r 1 1 1 I 1 r 1
1 0.5 0.2 0.1 0.05 0.02 0.01 0.005 0.002 0.001 (Pa? 0.05 0.02 0.01 0.005 0.002 0.001 "353

Fig. 1. (a) Compares the total running times of Tide-C, Tide-x86 and Tide-Hi and (b) compares the total running times of Comet-Sparse and Comet-Hi. The MS/MS
data were generated by the Clinical Proteomic Tumor Analysis Consortium (NCI/NIH) and are explained in detail in the Supplementary Data

generate massive MS/MS high—resolution spectra whose fragment ion
mass accuracy is within 0.01 Da. In addition, ultra high—resolution
spectra whose fragment ion mass accuracy is <0.01 Da are expected
to be generated in the near future. For high—resolution MS/MS spec—
tra, calculating XCUrr becomes much slower and consumes most of the
running time of peptide identification program. For example, the
XCUrr engines in Tide—x86 and Tide—C run 6.6 and 20 times slower,
respectively, when the fragment tolerance is 0.01 Da than when the
tolerance of 0.1 Da (Fig. 1a and Supplementary Table S1). Comet
shows similar behavior as the resolution gets higher (Fig. 1b,
Supplementary Table S2, and Supplementary Fig. S1).

The existing XCm engines run slower for high—resolution spectra
because they require more memory as the resolution gets higher:
They create an O (m/f)—sized mass bin array for chU calculation
where m is the precursor mass and f is the fragment ion mass accur—
acy. For example, for a low—resolution spectrum whose precursor
mass is 1000 Da and fragment tolerance is 1 Da, they create an array
whose size is around 1000. However, for a high—resolution spectrum
whose precursor mass is 1000 Da and fragment tolerance is 0.01
Da, they create an array whose size is around 100 000. Comet sug—
gested a partial solution for this. When it runs with
“use_sparse_matrix:1” in the parameter file, it first creates a huge
mass bin array and then compresses the array. We will call this
Comet-Sparse.

2 Results

In this article, we present a portable hi—speed chrr engine, which
does not create a mass bin array altogether, instead, calculates XCUrr
directly from the peak list. Thus, it runs in C(17) time where p is the
number of peaks in a spectrum, while all the previous engines are
based on XCUrr algorithms running in O(m/f) time where m is the
precursor mass and f is the fragment tolerance (pseudocodes are
available in the Supplementary Data).

We compared our XCm engine with previous engines on a
machine with an Intel Core i7—3770K CPU (3.50GHz) and 32 GB
RAM under the CentOS 6.6 operating system and the GNU C
compiler 4.4.7. First, we implanted our XCUrr engine into Tide—C
and named it Tide—Hi. We compared Tide—Hi, with Tide—C, and
Tide—x86. Since Tide—x86 does not calculate the exact P—value, we
compared them without exact P—value calculation. Figure 1a and
Supplementary Table S1 show that Tide—Hi is 49 times faster than
Tide—C in XCm calculation and 45 times faster in total running time
when the fragment tolerance is 0.01 Da. The running time gap
between Tide—Hi and Tide—C gets bigger as the resolution gets
higher. Tide—Hi is even 1.25 times faster than Tide—x86 in both

chrr calculation and total running time for 0.01 Da fragment
tolerance. (Note that Tide—Hi is developed in C language and
Tide—x86 includes x86 assembly code.) Second, we implanted our
XCm engine into Comet—Sparse and named it Comet—Hi. (Comet
without sparse option requires much more memory to run on high—
resolution data.) Figure 1b and Supplementary Table S2 show that
Comet—Hi runs 2.4 times faster than Comet—Sparse for 0.01 Da frag—
ment tolerance when eight threads were enabled. The gap between
Comet—Hi and Comet—Sparse also gets bigger as the resolution gets
higher when eight threads were used. Supplementary Figure S1
shows similar patterns for one, two and four threads.

3 Conclusion

We present a portable high—speed XCm engine for high—resolution
tandem mass spectrometry by developing a novel algorithm, which
enables chrr calculation 1.25—49 times faster than before for 0.01
Da fragment tolerance. When the fragment tolerance is 0.001 Da,
our engine runs 1000 times faster than Tide—C’s XCm engine, 20
times faster than Comet—Sparse’s and 11 times faster than Tide—
x86’s XCm engine (Fig. 1 and Supplementary Data). Furthermore,
our engine is easily portable to almost every machine because it is
developed in C. Optimizing our engine for x86 machines by embed—
ding an x86 machine code can be a future research topic. Since
chrr score is widely used in peptide identification, this article may
be useful for the community. Finally, we did not trade correctness
for efficiency. Our XCUrr engine calculates the same XCUrr score as
Tide and Comet do (Supplementary Theorem 2).

Funding

This work was supported by Basic Science Research Program through the
National Research Foundation of Korea (NRF) funded by the Ministry of
Education, Science and Technology (2012—0006999) and also by the National
Research Foundation of Korea [NRF—2012M3A9B9036676, NRF-
2014R1A2A1A11054147, NRF—2012M3A9D1054452].

Conﬂict of Interest: none declared.

References

Cormen,T.H. et al. (2001) Introduction to Algorithms, 2nd edn. MIT Press,
Cambridge, MA.

Diament,B.J. and Noble,W.S. (2011) Faster SEQUEST searching for peptide
identiﬁcation from tandem mass spectra. ]. Proteome Res., 10, 3871—3879.

9103 ‘01; isanV uo salaﬁuv 50'] ‘BtHJOJtIBQ JO AJtSJQAtuf] 112 /310'S[BIIJHO[pJOJXO'SOIJBLUJOJIIIOICI”Idllq 11101} popcolumoq

4028

H.Kim et aI.

 

Eng,I.K. et al. (1994) An approach to correlate tandem mass spectral data of
peptides with amino acid sequences in a protein database. I. Am. Soc. Mass
Spectrom, 5, 976—989.

Eng,I.K. et al. (2008) A fast SEQUEST cross correlation algorithm.
I. Proteome Res., 7, 4598—4602.

Eng,I.K. et al. (2013) Comet: an open—source MS/MS sequence database
search tool. I. Proteomics, 13, 22—24.

Hobert,I.I. and Noble,W.S. (2014) Computing exact p-values for a cross-correlation
shotgun proteomics score function. I. Mol. Cell. Proteomics, 13, 2467—2479.

Steen,H. et al. (2004) The ABC’s (XYZ’s) of peptide sequencing. Nat. Rev.
Mol. Cell Biol., 5, 699—711.

Wilkins,M.R. et al. (1997) Proteome Research: New Frontiers in Functional
Genomics, 1st ed. Springer, New York.

9103 ‘01; isanV uo salaﬁuv 50'] ‘BtHJOJtIBQ JO AJtSJQAtuf] 112 /310'S[BIIJHO[pJOJXO'SOIJBLUJOJIIIOICI”Idllq 11101} popcolumoq

