BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

Large scale analysis of signal reachability

 

 

Fig. 1. A probabilistic network (top) and two of the deterministic net-
works corresponding to it (bottom). Each of the deterministic networks is
obtained from the probabilistic network with some probability deter-
mined by the probabilities of the edges that are included or not in the
deterministic network. p,- denotes the probability of edge 8,- being present.
q,- = 17 p,- is the probability of the edge being absent. The expression
above each deterministic network is the probability of observing it

Figure l, the probabilistic network shown on top corresponds to
16 deterministic networks since it contains 4 probabilistic edges.

In this article, we address the problem of characterizing the
signaling reachability in transcription regulatory networks
(TRNs). Unlike most of the existing literature, we eliminate the
limitations of the classical assumption that all interactions are de—
terministic and adopt the more descriptive probabilistic network.
More speciﬁcally, given a set of source genes S = {s1, s2,  ,sa}
and a set of target genes T={t1, t2,...,t;,}, we compute the
reachability profile of that network as a doubly indexed vector
R where, for all i,j such that l g i g a, l gj g b, the entry R[i,]]
is the probability that a signal originating at s,- can reach t,- (i.e., s,-
regulates t,). We show that the reachability proﬁle can help us
understand how different disorders that alter the cellular func—
tions based on the signaling patterns of the gene regulatory net—
works. We particularly focus on leukemias, which is challenging
due to the heterogeneity of the transcription patterns.

Summary of related work. The problem of computing reach—
ability in uncertain network topologies has drawn signiﬁcant
attention in the context of network reliability. Various exact
methods, as well as approximate methods, have been proposed.
We refer interested readers to several surveys on the topic
(Aggarwal et al., 1975; Hwang et al., 1981). Theoretical results
on the complexity of the problem reveal that it is #P complete
(Brown and Colbourn, 1996; Husfeldt and Taslaman, 2010;
Provan and Ball, 1983). The problem is signiﬁcantly simpliﬁed
in the case of acyclic graphs. This type of graphs can be repre—
sented as Bayesian Networks, for which various inference
algorithms exist. However, for this simple case sophisticated in—
ference algorithms are unnecessary. In the context of biological
networks, the problem for general graphs was first addressed by
Ourfali et al. (2007). The goal of these authors was to infer the
structure of the signaling network that best explains a set of gene
knockout pairs, given a proteiniprotein interaction network. To
achieve this goal, they developed a method to compute the reach—
ability probability for each knockout gene pair. Their method is
an exact solution based on the inclusionwxclusion principle (van
Lint and Wilson, 1992). However, due to its high time complex—
ity, this method works accurately only for very small networks
(i.e., those with a few tens of nodes). PReach (Gabr et al.,
2013) computes the exact reachability probability based on

polynomial multiplication. It is significantly faster than the in—
clusionaexclusion method of Ourfali et al. (2007) for networks
where there are many paths. However, it does not scale to large
networks. Thus, the existing solutions cannot be used to study
entire T RNs, and there is a great need for accurate yet efficient
methods.

Contributions. Here, we develop a novel method that computes
the probability that a signal originated at a given source gene can
reach to a given target gene in a given probabilistic network.
Unlike existing methods, our solution is both precise (i.e., it
computes this probability without error) and it scales to large
networks. Our method follows a divide—and—conquer approach.
We partition the given probabilistic network into a sequence of
loosely connected clusters of nodes. On the boundary between
two such consecutive clusters lies a set of nodes called node sep—
arators. Any signal which originates from the source node and
arrives at any node in the latter cluster must visit the node sep—
arators. Similar to PReach (Gabr et al., 2013), we model the
given probabilistic network using polynomials. The form of the
polynomials of our method however differs from that of PReach
in a way that allows us to collapse the polynomial to very small
size that is determined by the size (number of interactions) of the
clusters and the number of nodes in a given boundary. Each term
in our polynomial evaluates the existence probability of a collec—
tion of subsets of interactions. In brief, instead of computing the
reachability probability from the given source node to the target
node, we incrementally compute the reachability probability
from the source node to each node separator in sequential
order. That allows us to avoid storing a massive fraction of
terms of the polynomial (i.e., the terms corresponding to the
nodes in earlier clusters). Our experimental results on real and
synthetic datasets demonstrate that our method scales to very
large network sizes while the inclusioniexclusion method
(Ourfali et al., 2007) and PReach (Gabr et al., 2013) fail. We
also observe that the reachability proﬁles provide a valuable re—
source for characterizing leukemias and differentiating the cen—
trality of the genes across different leukemias as well as healthy
control groups.

In summary, the key contributions of this work are:

c We introduce a new quantity for evaluating the state of a
biological network, the reachability proﬁle.

0 We introduce a novel, fast and scalable method to compute
the reachability profile of large networks, based on polyno—
mials and polynomial collapsing operators.

0 We demonstrate the usefulness of reachability proﬁles in
detailed analysis of different types of leukemias.

The rest of the article is organized as follows. Section 2 de—
scribes our method. Section 3 presents our experimental results.
Section 4 concludes with a brief discussion.

2 METHOD

In this section we present our method in detail. We ﬁrst deﬁne the essen-
tial theoretical concepts in Section 2.1. We then present an overview of
our method in Section 2.2. We discuss how to compute intermediate
reachability probabilities in Section 2.3. We elaborate on how to partition
the network in Section 2.4.

 

i97

ﬁm'spzumol‘pmﬂo'sopeuuopuorq/ﬁdnq

A.Todor et al.

 

2.1 Preliminary deﬁnitions

We start by formally deﬁning the probabilistic network concept.
We provide a list of notations used throughout the article in the
Supplementary Material.

DEFINITION l (probabilistic network). A probabilistic network is a graph
g=(V, E, P), where V is the set of nodes, E is the set of edges and P : E
—> (0, I] is a function that associates to each edge a probability value.

In our context, each node in V represents a gene, each edge in
E represents an interaction between two genes and P associates to each
edge the probability of the existence of the interaction it represents. For
instance, in Figure 1 (top ﬁgure), V= {a,b,c,d} and E = {e1,e2,e3,e4}.
We assume that each edge exists independent of all other edges.
This assumption is commonly used in the literature for similar problems
(Ceol et al., 2010; Szklarczyk et al., 2011). We limit our description
to directed networks, although undirected networks can be dealt
with by replacing each undirected edge with two edges in opposite
directions.

Given a probabilistic network g=(V, E, P), we call the deterministic
network G = (V,E) the maximal deterministic network of g. In other
words, the maximal deterministic network is the deterministic network
in which all possible interactions of g are present.

The computational problem we address in this article is: given a prob-
abilistic network, g=(V, E, P), a source node s e V and a target node
t e V, what is the probability that the t can be reached from s?

Next, we deﬁne a graph concept, node separator, which will help us in
explaining our method.

DEFINITION 2 (Node Separator). Let G = ( V,E) be a deterministic net-
work and s, t e V be two of its nodes. An s-t node separator of G is a set of
nodes K g V whose removal disconnects t from s in G.

Figure 2 illustrates this concept. Here, the source node s and the target
node t are labeled with l and 8, respectively. The set of nodes {4, 5} is an
s-t node separator. We say that a node separator is minimal if none of its
proper subsets is a node separator.

A node separator partitions the nodes of that network into three dis-
joint subsets:

(l) The left nodes are the nodes that are reachable from the source, but
the target cannot be reached from any of them without going
through the node separator (e.g., nodes 1, 2 and 3 in Figure 2,
for the node separator {4, 5}).

(2) The node separator itself (e.g., nodes 4 and 5 in Fig. 2).

(3) The right nodes are the remaining nodes (e.g., nodes 6, 7 and 8 in
Fig. 2). Notice that these are the nodes from which the target can
be reached, but they are not reachable from the source without
passing through the node separator.

A node separator K also partitions the edges of the given network into
three subsets:

(l) The left edges are the edges between the nodes in the union of
left and separator nodes (e.g., edges e1,e2,e3,e5 and e6 in Fig. 2).
We denote the set of left edges with L(K).

(2) The right edges are the edges between right nodes or from a sep-
arator node to a right node (e.g., edges 87,89,810,811 in Fig. 2).

(3) The backward edges are the edges from right nodes to the sep-
arator nodes or from right nodes to left nodes (edges e4,e8 in
Fig. 2).

THEOREM 1. Let G = ( V,E) be a deterministic network. Given two nodes,
s, t e V, let K be an s-t node separator. For any right node u of K, it is
guaranteed that K is also an s-u node separator.

 

Fig. 2. A network with an s-t node separator. The source is node 1 and
the target is node 8. The dotted rectangle indicates an s-t node separator

We prove Theorem 1 in the Supplementary Material.

If a node separator does not yield backward edges, we call it a good
node separator. We only use good node separators in the rest of the
article. So, in what follows by node separator we refer to a good node
separator, unless otherwise speciﬁed. Finally we deﬁne the concept of
subset reachability in probabilistic networks.

DEFINITION 3 (Subset Reachability). Let g=(V, E, P) be a probabilistic
network. Let s and t (s, t e V) be source and target nodes in 9. Consider
two s-t node separators K,- and  of 9 such that for all nodes u e Kj\K,», u is
a right node of K,-. Let S and Tbe two subsets of K,- and respectively. We
say that K) is T-reachable from S  all nodes in T are reachable from at
least one node in S and none of the nodes in Kj\T is reachable from any
node in S. We denote the probability that  is T-reachable from S by
p(S,T,K,~).

2.2 Overview of the method

Our method works in two steps.

Step 1. Given a probabilistic network 9 = ( V, E, P) and source and target
nodes s and t, in the ﬁrst step, we partition 9 into a sequence of subnet-
works that are connected to each other through node separators. In gen-
eral terms, let us denote the sequence of node separators with K0,
K1,  KC, KM], where K0 = {s} and K”, = {t}. We choose these
node separators such that Vi < j, for all nodes u e Kj\K,», u is a right
node of K,-. Following from Deﬁnition 3, the problem we solve in this
article is equivalent to computing p(K0, K” 1, KC+1)=p({s}, {t}, {t}).

Step 2. At this step we compute the reachability probability from s to t.
More speciﬁcally, using this notation above, for any i (0<i 5 c), we write
the probability p({s},T,K,-+ 1) as

12({s}.T.K.»+1>= Z 12({s}.S.K.»)p(S. Mm) (1)
599.5%?)

The case i = 0 is a special one. Since K0 contains s, we have T = {s}.
Thus the probability to reach the source node is 1. Following from
Equation (1), our algorithm iteratively computes p(K0,K(.+1,K(.+1) by
moving from one node separator to the next, starting from K).

The correctness of Equation (1) follows from the deﬁnition of node
separator and Theorem 1. More speciﬁcally, in order to reach to any
node in T g KH 1, we have to visit at least one node in K,-. The product
p({s},S,K,-)p(S,T,K,-+1) in Equation (1) is the probability that a signal
reaches T by visiting all the nodes in S and no other node in K,» S.
The summation in this equation enumerates all possible subsets S g Kl».
Thus, it is accumulates the probability of all possible alternative routes
from s to T defined by all possible subsets S.

Figure 3 illustrates our method. In this example, the set of edges in E is
split into three non-overlapping sets using four node separators K0, K1, K2
and K3 where K0 = {s} and K3 = {t}. These sets are L(K1), L(K2)\L(K1),
and L(K3)\L(K2). Each of these sets deﬁne a subnetwork of 9. Once the
network is partitioned this way, instead of computing the reachability

 

i98

ﬁlO'SIlZIImOprOJXO'SOplZILLIOJLIIOIQ/[idnq

Large scale analysis of signal reachability

 

 

Fig. 3. A hypothetical network with two disjoint s-t node separators,
K, = {2,3} and K2 = {4,5,6}. Source and target nodes are labeled with
s = l and t = 7. For uniformity, we consider K0 = {l} and K3 = {7} also
to be node separators

probability directly from s to t, we compute it incrementally by advancing
from one node separator to the next. For the example in Figure 3, we ﬁrst
consider the separator K, then K2, ﬁnally K3. At each node separator, we
only consider the subnetwork which contains the left edges of that
separator.

To understand Equation (1) better, consider the separators K1 and K2
in Figure 3. There are three possible scenarios to reach to a subset T of
K2, say T = {4} from s = 1. Each of these scenarios corresponds to a
nonempty subset of K, = {2, 3}.

(1) Visit S = {2} and do not visit K1\S= {3}. This happens with prob-
ability 17({1},{2},K1)17({2},{4},K2)-

(2) Visit S = {3} and do not visit K1\S= {2}. This happens with prob-
ability 17({1},{3},K1)17({3},{4},K2)-

(3) Visit both nodes in S = {2, 3}. This happens with probability
17({1},{2,3},K1)P({2,3},{4},K2)-

The sum of the three probabilities above yields the probability
17({1},{4},K2)-

In Section 2.3, we explain how we compute Equation (1) efﬁciently for
i >0 (Step 2). In Section 2.4, we explain how we choose the node separ-
ators (Step 1).

2.3 Computing the reachability probability

In Equation (1), we presented an iterative formula to compute the reach-
ability probability p({s},{t},{t}) by splitting the network using cuts
K0, K1, . . . , Ki.+ 1. Although this equation reduces the scale of the problem
to the subnetworks between consecutive cuts, computing it efﬁciently still
remains to be a challenge. Here, we describe how we compute this prob-
ability efﬁciently yet provably correctly. More speciﬁcally, given two con-
secutive node separators K,- and K,“ (0<i: c) and given p({s},S,K,-)
for all subsets S g K,», we discuss how we compute p({s},T,K,-+1) for all
subsets T g KH].

From the deﬁnition of left edges, we know that the probability
p({s},S,K,-) depends only on the edges in L(K,-). This is because L(K,-)
contains all the edges that can lie on a path from s to any node in K,-.
Let us denote the set of edges in L(Kj)\L(KJ-,1) with E) for any 0<j (i.e.,
left edges of K) which are also right edges of KL 1). Thus, the probability
p({s},T,K,-+1), depends only on the edges in EH1 whenp({s},S,K,-) is given
for all S. This implies that it is possible to compute the probability
p({s},T,K,-+1) by considering only the edges in EH1 when p({s},S,K,-) is
known VS g Kl». Below, we compute this probability by transforming the
probabilistic network into a collection of polynomials.

Transformation into polynomial space. Assume that the given probabilistic
network, g=(V, E, P), contains n edges and m nodes, denoted with
E = {e1,e2,...e,,} and V: {v1,v2,...v,,,}, respectively. As the ﬁrst step
of the transformation, we associate to each edge a polynomial called
the edge polynomial. More precisely, for edge e,» e E, let p,- = P(e,-) and
q,- = 17 p,- denote the existence and absence probability of e,-, respectively.

We deﬁne the edge polynomial of e,- as the ﬁrst degree polynomial of two
variables, X,- and y,-, F,-(X,-,y,-) = pix,- + qiyi.

Consider a subset E ’ of the edges in E. We deﬁne the edge aggregation
polynomial for E ’, denoted with F(E’), as the product of all the edge
polynomials associated with the edges in E ’:

F(E’)= H E(xi.yi)= Z Hm H qjyj- (2)

met” SEE’ meg c/EE’\5

Notice that each term in the summation above corresponds to one of
the possible deterministic conﬁgurations for the network topology. The
coefficient of the term He‘d XiHe/EE/\5 yj in F is the probability of obser-
ving all the edges in 6 and not observing any edge in E’\£. To understand
this better, consider the network in Figure 1 (network on the top). In the
edge aggregation polynomial of this network, the term X3X4y1y2 corres-
ponds to the deterministic instance where only edges e; and e4 are present
(i.e., bottom left network in Fig. l). The coefﬁcient of this term is q1q2p3p4
which is the probability of observing that network instance.

Reachability in polynomial space. As we explain in Equation (2), the terms
of the edge aggregation polynomial represent different deterministic net-
work conﬁgurations. Thus, the probability p({s},T,K,-+1) is equal to the
sum of the coefﬁcients of a speciﬁc subset of the polynomial terms: The
terms which yield a topology where K,“ is T—reachable from {s}.

At this point, the polynomial transformation seemingly makes the
reachability problem as complicated as exhaustively enumerating all net-
work topologies. This is because, (i) the edge aggregation polynomial has
as many terms as the number of network topologies; and (ii) ﬁnding the
subset of polynomial terms which yield the desired topologies will incur
additional computational cost. Below, we build a novel algebra on the
edge aggregation polynomial to compute this value by enumerating only
a tiny fraction of the polynomial terms.

Algorithm 1 presents a pseudocode that describes our algorithm for
constructing the polynomial needed to compute p({s},T,K,-+ 1). The algo-
rithm takes the existing edge aggregation polynomial for the edges in
L(K,-) as input. At each iteration it grows that polynomial by aggregating
it with the edge polynomial of a new edge in EH 1 (Step 2). It then reduces
the size of the resulting polynomial by collapsing it (Step 3). Brieﬂy, the
collapsation step merges all terms which correspond to conﬁgurations in
which K,-+ 1 is T—reachable from s, for each possible subset T of K,-+ 1,
into a single term by replacing the variables in these terms with a
single variable denoted with 2T. Thus, the coefﬁcient of 2T is the
sum of the coefﬁcients of the original terms that were collapsed. In the
rest of this section, we elaborate on these steps, particularly the collapsa-
tion step.

 

Algorithm 1 Compute the edge aggregation polynomial for L(K,-+1)

Require: Probabilistic graph 9 = ( V, E , P)
Require: Node separators K,- and K,“
Require: Edge aggregation polynomial F ’ = F(L(K,-)).
l: for all ej e EH1 do
2: Aggregate edge polynomial of e) as F ’ = F ’>< F,(X,~,y,~)
3: Collapse F ’
4: end for

 

 

We start by introducing some notation which will simplify our poly-
nomial algebra below. For a subset of edges 6 g E, we denote the set of
indices of the edges in 6 by Ind(£). For instance, for 6 = {e2, e3, e3}, we
have Ind(£) = {2, 3, 8}

Let us denote the subset of edges of E,-+ 1 which have been multiplied
into the edge aggregation polynomial so far with 6 g EH1 and its set of
indices with O = Ind(£).

Following from Equation (2), since 6 and L(K,-) are disjoint, we can
write the edge aggregation polynomial of the edge set 6 U L(Kl») as

 

i99

ﬁm'spzumol‘pmjxo'sopauuopIIoIq/ﬁdnq

A.Todor et al.

 

F(£)F(L(K,»)). To simplify our notation of F(E), for all I g O, we denote
Hie, X,» and Hie(_,\1yi with x1 and yml, respectively. We denote the coef-
ﬁcient of x[y(_,\I with 011. Thus, we can write the ﬁrst polynomial as
17(5): Z1g~)‘¥1XIY(~)\I-

For each node separator K,-, we deﬁne a unique collapsing operator
and denote it with p,(). This is a linear operator; it acts on the terms of the
given edge aggregation polynomial for the edges in L(K,-) independently.
Brieﬂy, the collapsed polynomial contains a new variable, ZS, for each
subset S of K,-. The form of this polynomial is pl»(F(L(K,»))) = ZSCKI 13525.
In this representation, ZS corresponds to the case where K,- is S-reachable
from K0 (i.e., the original source node), and the coefﬁcient ﬁg is the
probability of observing that case. In other words ﬁg is equal to
p({s},S,K,-) in Equation (1). We explain how this operator works and
how we compute it in detail later in this section. For the moment,
assume that we have already applied it for the edge set L(K,-). Therefore
we replace the polynomial, F(L(K,)) in the product F(£)F(L(K,»)) with its
collapsed version, denoted by p,(F(L(K,-))).

After multiplying the ﬁrst polynomial and the collapsed version of the
second polynomial, we get

F(£)p.(F(L(Ki)»=Zamwa 532s. (3)
19a SEK;
Since this product includes edge polynomials from the edge set 6, we
further reduce its size by applying the collapsing operator pi+1() on it
and thus obtain pi+1(F(£)pi(F(L(K,»)))).

Next, we explain how the collapsing operator works. Given two nodes
u, v e V, let 7'! be a path from u to v in the maximal deterministic network
G = (V,E) of the given probabilistic network. Here, by path we mean the
set of edges traversed to reach from u to v. Let I be a subset of indices,
I g {1, . . . , n}. We deﬁne two set indicator functions XW() and wu,v() for
the node pair (u, v). The ﬁrst one takes the value XW(I) = 1 if there is a
path 7'! from u to v such that Ind(rr) g I and 0 otherwise. For instance, in
Figure 2, XL8({1,2,5,6,7,10,11}) = 1. This is because {e2,e5,e6,e7,e10} forms
a path from 1 (source) to 8 (target) and its set of indices {2, 5, 6, 7, 10} is a
subset of the input set {1, 2, 5, 6, 7, 10, 11}. Similarly, the second indicator
function takes the value cowﬂ) = 1 if there is a minimal u- v cut K such
that Ind(K) g land 0 otherwise. For example, w1,8({2,3,4,5}) = 1, because
{e3,e5} forms a minimal cut between nodes 1 and 8 and its set of indices
{3, 5} is a subset of input set {2, 3, 4, 5}.

Next, we extend the deﬁnitions of the set indicator functions x and a)
to multiple source nodes. The extended function XSVV(I) evaluates to 1 if
there is a path 7'! from at least one node u in S to v such that Ind(rr) g I
and 0 otherwise. Similarly, wSVV(I) evaluates to 1 if for all nodes u e S
there is at least a minimal u- v cut K such that Ind(K) g I and 0 otherwise.
Formally, we compute these functions as

m0) = 1 — 1‘10 — mum) and coma) = 1‘1 new) (4)
s65 sES
Next, we formalize T-reachability of the node separator K,-+ 1. For this
purpose, we deﬁne a new set indicator function CS,T() which evaluates to
1 only if K,-+ 1 is T—reachable from S. Otherwise, it evaluates to 0. We
compute this function as

mm = 1‘1 mu) 1‘1 ws.v(@\1)- (5)
ueT \‘EK;+[\T

We prove the correctness of Equations (4) and (5) in the
Supplementary Materials.

Now we are ready to put all the pieces together and compute the
collapsing operator pH 1. Recall that each term of the given edge aggre-
gation polynomial indicates a deterministic subnetwork topology for the
edges in 6, combined with all deterministic topologies of the edges in
L(K,-) in which K,- is S-reachable from K), for every S g Kl». If that com-
bination ensures that K,-+ 1 is T—reachable from K0, then the collapsing
operator p,“ replaces all the variables of that term with 2T. More spe-
ciﬁcally, consider a term in Equation (3) after the product has been

expanded, in the form yLleyMIzS, where yLS =o1ﬁ5. We compute the
collapsing operator pi+1() on this term as

pi+1(y1,SXIy(~)\IZS): Yrs 2 CS.T(I)ZT-

TEKHI
(6)
+ Vis< H (1 — CS»T(I)))XIy(~)\IZS

TEKHI

The collapsing operator pH 1() [see Equation (6)] transforms each term
of the polynomial into a single term. The resulting term either contains
the variable 2T, where T g KH 1 , or remains unchanged. This is because
CST either takes the value 0 or 1. Thus, pH 1() leaves the term unchanged
only if 651:0 for all T. When, 651:1 for some T g KH], the coefﬁ-
cient of ZS becomes 0. It returns yLSzT in this case. Furthermore, from
Equation (5), we know that if 651:1, then for all T7ET (T g Ki“),
CST = 0. Thus, the function pH 10 returns no other term containing vari-
able z’T.

Now suppose that a term has collapsed to 2T and a new edge e) is
added in Step 2 of Algorithm 1. From a polynomial point of view, the 2T
variable will be multiplied with X) and y), respectively, resulting in two
new terms. From the graph reachability point of view, we know that the
edges added prior to e) already ensure T—reachability, so e) does not make
any differece: both its presence and its absence lead to reachable graph
conﬁgurations. In the polynomial, the coeﬁcients of ZTXf and ZTyf have to
be added together to obtain the reachability probability. To take advan-
tage of this observation, we introduce a special multiplication rule for the
2T variables: both ZTXf and zTy/ are replaced with 2T, for all ej e EH1, so
that their coefﬁcients are added together.

The collapsing operator is very powerful as it ensures that the size of
the edge aggregation polynomial never exceeds 2‘K“+‘E"*" in the worst
case (i.e., when the indicator function C SVT() always returns 0 until the last
edge in L(K,-+ 1) is aggregated). More importantly, it guarantees to reduce
the polynomial size down to 2‘KH" once the edges in L(K,-+1) are all
aggregated. This is a signiﬁcant improvement as without the collapsation
function, the size of the edge aggregation polynomial 2‘L(K"+')‘ after con-
sidering K,“ and it goes up to 2‘E‘ after including all the edges.

So what is the reachability probability? After all the edges in EH] have
been added, all the terms will collapse, and the polynomial will be
pi+1(F(L(K,»+1)))= ZKKM yTzT. When K”, = {t} is reached, the poly-
nomial will have only two terms: ymzm +j/ijp). The coefﬁcient ym is
equal to the probability that the target node is reachable from the
source node. We prove the correctness of our method in the
Supplementary Material.

2.4 How to choose node separators

Depending on the topology of the maximal deterministic network there
can be many alternative sequences of node separators between the source
and target nodes. Regardless of how we choose the node separators, our
method guarantees to return the correct result. The node separator choice
however can affect the size of the intermediate polynomials and thus the
running time of our method in two ways. (i) Ideally, each node separator
K,- should contain a small number of nodes as it will produce 2"“ vari-
ables of the form ZS. (ii) Each consecutive node separators should contain
a small number of edges between them (i.e., E,- should be small). This is
because, in the worst case, they yield 2‘19“ terms. Finding an optimal
sequence of node separators that minimizes the overall computation
time is in itself an intriguing area worth investigating. The right balance
between the separator size, the size of the edge sets between the separators
and the amount of computation we are willing to spend on ﬁnding the
solution is hard to ﬁnd. Here, we use a greedy approach to ﬁnd good
node separators.

We consider the ﬁrst node separator (K0) to be the source node itself.
We determine the next node separator from the current one by

 

i100

ﬁm'spzumol‘pmjxo'sopauuopIIoIq/ﬁdnq

Large scale analysis of signal reachability

 

considering all nodes that are one edge further from the current node
separator. The set of nodes identiﬁed in this way is a minimal node sep-
arator, but it is not necessarily good, because it may contain nodes with
incident backward edgesisee Section 2.1. To make it good, we ﬁrst
identify the nodes that have incident backward edges and replace each
of them with all the nodes that are reachable from them in one hop. Thus
we advance the node separator toward the target keeping it minimal, and
stop as soon as we encounter a good minimal node separator. This way,
we aim to keep the size of E,- small. We repeat this process to select more
good node separators until we reach the target.

3 RESULTS

In this section we experimentally evaluate our method.
Section 3.1 presents the datasets and the experimental setup.
Section 3.2 examines the running time of our algorithm.
Section 3.3 presents the reachability profiles obtained with our
method. Section 3.4 evaluates gene centrality based on the reach—
ability profiles. Section 3.5 analyses the stability of the human
TRN.

3.1 Datasets and implementation details

We evaluate our method using both synthetic and real biological
networks.

Synthetic dataset. We generated the synthetic network dataset
using the BarabasieAlbert random network model (Barabasi and
Albert, 1999). We chose this model because it is the de facto
standard for the scale—free networks, which best describe most
biological networks (Jeong et al., 2000; Todor et al., 2012; Yook
et al., 2004). We created six sets of random networks. In each set,
we created 10 networks with the same number of nodes: 50, 100,
150, 200, 250 and 300, respectively. The number of edges is twice
the number of nodes in each network.

Real dataset. For experimentation on real biological networks
we used the human regulatory network of Gerstein et al. (2012).
From this network, we selected only the reliable interactions by
taking the intersection with those present in the DIP database
(Xenarios et al., 2002). The resulting network has 130 nodes and
172 edges. To assess the interaction conﬁdence for each edge in
this intersection, we used the logistic regression method used by
Sharan et al. (2002). This strategy is used often in the literature to
compute interaction confidence (Bader et al., 2004; Ourfali et al.,
2007; Sharan et al., 2002; Shlomi et al., 2006). We obtained the
gene expression data of 575 leukemia patients from Zhang et al.
(2012). We obtained control gene expression data in early pro—
genitor cells from Laurenti et al. (2013). Both control and leuke—
mia expression datasets are normalized using quantile
normalization (Amaratunga and Cabrera, 2001). Each leukemia
sample in our dataset belongs to one of eight different subtypes
of leukemia: hyperdiploid, TCF3—PBX1, ETV6—RUNX1, MLL,
Ph, Hypo, T—ALL and Other, or to non—leukemia sample types
CD10CD19 and CD34. We do not include samples from the last
two categories in our experiments, since they contain only four
samples each. We trained eight different logistic regression
models, one for each leukemia subtype to compute interaction
probabilities for each subtype separately. Also, we classiﬁed the
early progenitor cell samples into three categories: primitive
(hematopoietic stem cells), lymphoid (ETP, MLP, ProB and
B_NKpre) and myeloid (the rest of the samples). We trained a

0.0065
0.006
0.0055
0.005
0.0045
0.004
0.0035
0.003
0.0025
0.002

 

Average time [sec]

 

 

 

50 100 150 200 250 300
Number of nodes
Fig. 4. Average running time of our method on BarabasieAlbert net-
works for growing network sizes

different logistic regression model for each type. Thus, we ob—
tained different probability values for the edges of the human
regulatory network, depending on the cancer or control group
subtype in which the gene expression levels were measured. This
in turn results in different reachability probabilities. We identi—
ﬁed all the source and all the target genes in our network using
the hierarchical decomposition obtained by HIDEN (Gulsoy
et al., 2012). This resulted in 9 source genes and 88 target genes.

We used C+ +, Matlab and R for implementation. We ran
our experiments on an AMD Opteron processor with 256 GB of
memory and 1.9 GHz speed.

3.2 Evaluation of the running time

In order to evaluate the performance of our method systematic—
ally, we ran it on the synthetic networks of different sizes. We
measured the running time for each synthetic network and each
sourceetarget pair. We have taken each node, in turn, as a source
an then as a target. Thus, computing the reachability proﬁle for
the largest network size requires 300 x 299 = 89700 reachability
probability computations per network. In total, we computed
the reachability proﬁle for 10 x 6 = 60 networks, for a total of
2264500 reachability probabilities. In Figure 4, we report the
average running time to compute the reachability probability
for one sourceetarget pair for each set of networks. We report
the average running time over all networks in the set and over all
sourceetarget pairs.

The figure shows that the running time of our method in a
scale—free network grows at most linearly in terms of number of
nodes. Even for networks as large as 300 nodes and 600 edges,
the average running time of our method per sourceetarget pair
remains in milliseconds. This small running time allows us to com—
pute the entire reachability profiles in practical time for a large
number of networks, which was not possible before.

For comparison, the inclusion/exclusion method (Ourfali
et al., 2007) and PReach (Gabr et al. 2013) fail to complete exe—
cution on the same dataset because they exhausted the 256 GB of
memory available in the system even for a single sourceetarget
node pair of the smallest network in our dataset.

For the real dataset investigated in this article, we computed
ll reachability proﬁles, one for each leukemia or control group
subtype. For each subtype, we computed 9 x 88 reachability
probabilities (for 9 sources and 88 target nodes), thus 8712 prob—
abilities in total. Our method computed each of these

 

i101

ﬁm'spzumol‘pmjxo'sopauuopIIoIq/ﬁdnq

 

033:. :

 

 

duq

/810'spzumofp10}xo'soImLuIOJuIOIq”

u:':n|r:._|

l:'|:[l|ﬂ:-_ll'_ pl:

 

/3.IO'S[BIIJI’10[pJOJXO'SOINZLUJOJIIIOIq/ﬂdnq

A.Todor et al.

 

our solution and Bayesian Network inference. However, as we
mentioned in Section 1, this alternative is limited to acyclic net—
works. We see a possible application of the Bayesian Network
alternative in combination with the reduction of strongly con—
nected components to single nodes, but this solution deserves a
careful examination by itself.

Funding: NSF CCF—l251599, NSF DBI—l262451, NSF IIS—084—
5439.

Conﬂict of Interest: none declared.

REFERENCES

Aggarwal,K.K. et al. (1975) Reliability evaluation: a comparative study of different
techniques. Microelectron. Reliab., 14, 49756.

Amaratunga,D. and Cabrera,J. (2001) Analysis of data from viral DNA microchips.
J. Am. Stat. Assoc., 96, 116171170.

Armstrong,S.A. et al. (2002) MLL translocations specify a distinct gene expression
proﬁle that distinguishes a unique leukemia. Nat. Genet, 30, 4147.

Bader,J.S. et al. (2004) Gaining conﬁdence in high—throughput protein interaction
networks. Nat. Biotechnol, 22, 78785.

Barabasi,A.—L. and Albert,R. (1999) Emergence of scaling in random networks.
Science, 286, 50%512.

Brown,J.I. and Colbourn,C.J. (1996) Non—stanley bounds for network reliability.
Journal of Algebraic Combinatorics, 5, 13736.

Bu,Z. and Callaway,D.J. (2011) Proteins move! Protein dynamics and long—range
allostery in cell signaling. Adv. Protein Chem. Struct. Biol, 83, 1637221.

Ceol,A. et al. (2010) MINT, the Molecular INTeraction database: 2009 update.
Nucleic Acids Res., 38, D5327D539.

Deng,M. et al. (2003) Assessment of the reliability of protein—protein interactions
and protein function prediction. Pac. Symp. Biocomp., 1407151.

Gabr,H. and Kahveci,T. (2013) Characterization of probabilistic signaling networks
through signal propagation. In: CISE Technical Report REP—2013—567.
University of Florida.

Gabr,H. et al. (2013) PReach: reachability in probabilistic signaling networks.
ACM—BCB.

Gerstein,M.B. et al. (2012) Architecture of the human regulatory network derived
from ENCODE data. Nature, 489, 917100.

Gulsoy,G. et al. (2012) HIDEN: hierarchical decomposition of regulatory networks.
BMC Bioinﬂ)rmatics, 13, 250.

Holmfeldt,L. et al. (2013) The genomic landscape of hypodiploid acute lympho—
blastic leukemia. Nat. Genet, 45, 2427252.

Husfeldt,T. and Taslaman,N. (2010) The exponential time complexity of computing
the probability that a graph is connected. International Synyiosium on
Parameterized and Exact Computation, 6478, 1927203.

Hwang,G.L. et al. (1981) System—reliability evaluation techniques for complex/large
systems 7 a review. IEEE Trans. Reliab., R-30, 416—423.

Jeong,H. et al. (2000) The large—scale organization of metabolic networks. Nature,
407, 651454.

Kornberg,R.D. (2007) The molecular basis of eukariotic transcription. Proc. Natl
Acad. Sci. USA, 104, 12955712961.

Krivtsov,A.V. et al. (2009) Gene expression proﬁling of leukemia stem cells.
Methods Mol Biol, 538, 2317246.

Laurenti,E. et al. (2013) The transcriptional architecture of early human hemato—
poiesis identiﬁes multilevel control of lymphoid commitment. Nat. Immunol, 14,
75(r763.

Liang,D.C. et al. (2010) Frequencies of ETV6—RUNX1 fusion and hyperdiploidy in
pediatric acute lymphoblastic leukemia are lower in far east than west. Proc.
Natl Acad. Sci. USA, 55, 430433.

Los,M. et al. (2009) Switching Akt: from survival signaling to deadly response. Bio
Essays, 31, 492495.

Mattick,J.S. et al. (2009) RNA regulation of epigenetic processes. Bio Essays, 31,
51759.

Nesbit,C.E. et al. (1999) Prochownic. MYC oncogenes and human neoplastic dis—
ease. Oncogene, l8, 3004~3016.

Neuman,E.S. et al. (1996) Structure and partial genomic sequence of the human
E2F1 gene. Gene, 173, 1637169.

Ourfali,O. et al. (2007) SPINE: a framework for signaling—regulatory pathway in—
ference from cause—effect experiments. Bioinformatics, 23, i3597i366.

Paulsson,K. et al. (2010) Genetic landscape of high hyperdiploid childhood acute
lymphoblastic leukemia. Proc. Natl Acad. Sci. USA, 107, 21719721724.

Provan,J.S. and Ball,M.O. (1983) The complexity of counting cuts and of comput—
ing the probability that a graph is connected. SIAM J. Comput, 12, 7777788.

Sharan,R. et al. (2002) Conserved patterns of protein interaction in multiple species.
PNAS, 102, 19744979.

Shlomi,T. et al. (2006) QPath: a method for querying pathways in a protein—protein
interaction network. BMC Bioinformatics, 7, 199.

Suthram,S. et al. (2006) A direct comparison of protein interaction conﬁdence as—
signment schemes. BMC Bioinformatics, 7, 360.

Szklarczyk,D. et al. (2011) The STRING database in 2011: functional interaction
networks of proteins, globally integrated and scored. Nucleic Acids Res., 39,
D5617D568.

Talpaz,M. et al. (2006) Dasatinib in imatinib—resistant Philadelphia chromosome—
positive leukemias. N. Engl. J. Med., 354, 253172541.

Todor,A. et al. (2012) Uncertain interactions affect degree distribution of biological
networks. BIBM.

Todor,A. et al. (2013) Probabilistic biological network alignment. TCBB, 10,
1097121.

Valk,P.J. et al. (2004) Prognostically useful gene—expression proﬁles in acute myeloid
leukemia. N. Engl. J. Med, 350, 161771628.

van Lint,J.H. and Wilson,R.M. (1992) A Course in Combinatorics. Cambridge
University Press, Cambridge, UK.

von Mering,C. et al. (2002) Comparative assessment of large—scale data sets of
protein—protein interactions. Nature, 417, 399403.

Xenarios,I. et al. (2002) DIP, the Database of Interacting Proteins: a research tool
for studying cellular networks of protein interactions. Nucleic Acids Res. 30,
3037305.

Yook,S.H. et al. (2004) Functional and topological characterization of protein inter—
action networks. Proteomics, 4, 9287942.

Zhang,J. et al. (2012) The genetic basis of early T—cell precursor acute lymphoblastic
leukaemia. Nature, 481, 1577163.

 

ﬁm'spzumol‘piqxo'sopauuopIIoIq/ﬁdnq

