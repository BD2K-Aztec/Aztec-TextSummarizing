Bioinformatics, 32(15), 2016, 2396—2398

doi: 10.1093/bioinformatics/btw120

Advance Access Publication Date: 2 March 2016
Applications Note

 

 

Systems biology

AlgoRun: a Docker—based packaging system for
platform-agnostic implemented algorithms

Abdelrahman Hosny”, Paola Vera-Licona1'2'3”,

Reinhard Laubenbacher1'2'3'4'* and Thibauld Favre5

1Center for Quantitative Medicine, 2Department of Cell Biology, 3Institute for Systems Genomics, UConn Health, CT,
USA, 4Jackson Laboratory for Genomic Medicine, CT, USA and 5Democratech, Paris, France

*To whom correspondence should be addressed.
Associate Editor: Jonathan Wren
TThe authors wish it to be known that, in their opinion, the first two authors should be regarded as Joint First Authors.

Received on December 23, 2015; revised on February 25, 2016; accepted on February 26, 2016

Abstract

Motivation: There is a growing need in bioinformatics for easy—to—use software implementations of
algorithms that are usable across platforms. At the same time, reproducibility of computational
results is critical and often a challenge due to source code changes over time and dependencies.
Results: The approach introduced in this paper addresses both of these needs with AlgoRun, a
dedicated packaging system for implemented algorithms, using Docker technology. Implemented
algorithms, packaged with AlgoRun, can be executed through a user—friendly interface directly
from a web browser or via a standardized RESTful web API to allow easy integration into more
complex workflows. The packaged algorithm includes the entire software execution environment,
thereby eliminating the common problem of software dependencies and the irreproducibility of
computations over time. AlgoRun—packaged algorithms can be published on http://algorun.org, a
centralized searchable directory to find existing AlgoRun—packaged algorithms.

Availability and implementation: AlgoRun is available at http://algorun.org and the source code
under GPL license is available at https://github.com/algorun

Contact: laubenbacher@uchc.edu

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 IntrOducuon adoption rates (Gil et (11., 2007). The second approach is the use of

Using software tools developed by the bioinformatics community
presents several challenges, beginning with the installation of the
software itself and its dependencies. Reproduction of computational
results by others faces the challenge of frequent modifications in ei—
ther the implementation of the algorithm itself or in one of its
dependencies, or both (Boettiger, 2015; Peng, 2011). Although code
sharing is possible through online code repositories like GitHub, it is
hard to share the entire computational environment that a given
software implementation of an algorithm depends on. Boettiger
(2015) investigated the two main approaches to overcome these
issues. The first approach is workﬂow software (Altintas et (11.,
2004; Hull et (11., 2006). Although it provides technical solutions to
the challenges of dissemination, it is marked by relatively low total

virtual machines (VMs) running on cloud services (Dudley and
Butte, 2010; Howe, 2012). While this approach addresses the prob—
lem by capturing the entire software environment, it is sometimes
perceived as being a ‘black box’ not well suited to ensuring reprodu—
cibility. Also, researchers cannot easily build on virtual machines in
a consistent and scalable way (Boettiger, 2015). A more recent ap—
proach to solve this problem is to use software containers, particu—
larly Docker, an open source technology used to package
applications and their dependencies into a standardized software
container. Boettiger (2015) showed that using Docker will overcome
the problems related to dependency, documentation inaccuracy and
code changes. In this paper, we present an enhancement to the soft—
ware container approach by introducing AlgoRun. AlgoRun is a

©The Author 2016. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 2396

9103 ‘Og JSanV uo sereﬁuv soc] ‘BtHJOJtIBQ JO AJtSJQAtuf] 112 /310'S[BIIJHO[pJOJXO'SOTIBLUJOJIITOTCIHK1111] 11101} pQPBOIHAAOG

AlgoRun

2397

 

131 new: I.I.2 x

(- C (i _' bomie.a|gomn.org o

 

 

Run

Enter ﬂpul data below and ill! "18‘ RUN button ID launch the computation
INPUT see sample Input 9  if ,9

1 R‘I'GCA'I'EATGCGCEAT
2 3

 

Parameter Conttg uration a

1. Skip 0 1D. Nign.) 28
2. Only-align all 11 Align-l o
3. Trim-L211 D 12. Align-X 250
4. TH m-nght g 13 Report-h _1
5. PhreaOuamy a; 14 Report-all on
6. Salem 011 15 Report-m I104||TIII
r. AIIgn—t.‘ o 15. Report-best 011'
3 Alignn 2 1? Report-strata 011'
9. Allgn—e to 15 suppress q
_

 

Load sample data .9 '1 CI Change parameters

 

 

OUTPUT see sample output a

 

11 Reset computation RUN COMPUTATION ®

Fig. 1. Example of web interface for the AlgoRun Bowtie software package: (1) Easy access through web browser instead of command line; (2) load a sample in-
put; (3) upload dataset file; (4) click to see a sample of the output format; (5) save computation result to a file; (6) input box filled with data; (7) parameter configur-
ation window; (8) algorithm output box filled with result; (9) input box with sample data; (10) parameter configuration window; (11) clear the input and output

boxes; (12) run the algorithm on the given dataset

Docker—based software container template designed to provide trad—
itional command—line algorithms with standard web capabilities: a
web user interface and a RESTful web API to allow easy integration
of algorithms into complex workﬂows. In the following sections, we
introduce AlgoRun and we show how it can be used to package
Bowtie (Langmead et (11., 2009), a well—known bioinformatics soft—
ware. For better readability, the term ‘AlgoRun container’ will now
be used to refer to a ‘Docker—based software container created with
the AlgoRun template’.

2 Methods

AlgoRun is built on top of Docker, an open source technology used
to package applications and their dependencies into a standardized
and environment—agnostic software container. AlgoRun allows the
efficient creation of software containers dedicated to making algo—
rithms re—usable and making computational results reproducible by
the scientific community. AlgoRun requires no or minimal source
code changes, and is compatible with all programming languages.
To aid the dissemination of implemented algorithms, AlgoRun con—
tainers can be published on http://algorun.org. Building an AlgoRun
container requires installing Docker, providing information about
the algorithm and its dependencies in the package template, and, fi—
nally, building the AlgoRun container. Supplementary File 1 pro—
vides detailed instructions.

AlgoRun Features

AlgoRun containers provide implemented algorithms with:

Remote execution ability: AlgoRun enables users to run implemented
algorithms via the web API or via the web user interface (Fig. 1).
Ease-of—use: AlgoRun containers automatically generate a graphical
web interface that requires minimal technical expertise.

Portability and compatibility: AlgoRun inherits Docker’s main bene—
fits by removing issues related to code changes, dependencies and
backward compatibility over time.

Programmability and reusability: AlgoRun favors implemented al—
gorithms’ reusability to create more complex workﬂows by provid—
ing a standard RESTful web API.

3 Application examples

As examples of how AlgoRun makes packaging, running and pub—
lishing algorithms a straightforward process, Supplementary File 2
shows the AlgoRun container creation process for the following im—
plemented algorithms: Bowtie (Langmead et (11., 2009), REACT
(Vera—Licona, 2014) and KS (Kavvadias and Stavropoulos, 2005).
To run these today, users need to download and install the necessary
packages, their dependencies and run them from the command line.
With AlgoRun however, users simply need to navigate to the dedi—
cated AlgoRun web URL to start running computations, with no in—
stallation required. Instructions are provided for the option to run
the container on the user’s local machine.

4 Conclusions

AlgoRun containers enable authors of algorithms to build a fully re—
usable software package for their work. The software package can
be used immediately over the web or deployed in any computer en—
vironment, providing a friction—less access to computational capabil—
ities. Taking the well—known Bowtie open—source software as an
example, along with REACT and KS algorithms, we have demon—
strated that the creation of such a software package requires min—
imal effort.

AlgoRun, with its robust web architecture, paves the way for
building pipelines and networks of parallel and sequential computa—
tions. AlgoRun containers can be used in a distributed environment,
which will greatly improve collaboration. Thus, AlgoRun has the
potential to become the core architecture for computational soft—
ware tools in the future.

9103 ‘Og tsnﬁnv uo soroﬁuv soc] ‘BtHJOJtIBQ JO AJtSJQAtuf] 112 /310'S[BHJHOFPJOJXO'SOIJ’BLUJOJIIIOICI”K1111] 11101} pQPBOIII/lAOG

2398

A.Hosny et al.

 

Fu ndi ng
R. Laubenbacher has been partially supported by Grant NSF DBI-1146819.

Conﬂict of Interest: none declared.

References

Altintas,I. et al. (2004). Kepler: an extensible system for design and execution of
scientiﬁc workﬂows. In: Proceedings 16th int. conference on scientiﬁc and stat—
istical database management. Washington, DC: IEEE Computer Society.

Boettiger,C. (2015 ) An introduction to Docker for reproducible research.
ACM SIGOPS Oper. Syst. Rev., 49, 71—79.

Dudley,J.T. and Butte,A.J. (2010) In silico research in the era of cloud comput-
ing. Nat. Biotechnol., 28, 1181—1185.

Gi1,Y. et al. (2007) Examining the challenges of scientiﬁc workﬂows.
Computer, 40, 24—32.

Howe,B. (2012) Virtual appliances, cloud computing, and reproducible re—
search. Comput. Sci. Eng., 14, 36—41.

Hull,D. et al. (2006) Taverna: a tool for building and running workﬂows of
services. Nucleic Acids Res., 34, W729—W732.

Kavvadias,D. and Stavropoulos,E. (2005) An efﬁcient algorithm for the trans-
versal hypergraph generation. ]. Graph. Alg. Appl., 9, 23 9—264.

Langmead,B. et al. (2009) Ultrafast and memory-efﬁcient alignment of short
DNA sequences to the human genome. Genome Biol., 10, R25.

Peng,R.D. (2011) Reproducible research in comp science. Science, 334,
1226—1227.

Vera-Licona,P. (2014) An algebra-based method for inferring gene regulatory
networks. BMC Syst. Biol., 8, 37.

9103 05 tsnﬁnv uo sopﬁuv soc] ‘BIIIJOJIIBD JO AJtSJQAtuf] 112 /310's112u1n0[p10}x0"sotwuiJOJutotq/ﬁduq 11101} pQPBOIII/lAOG

