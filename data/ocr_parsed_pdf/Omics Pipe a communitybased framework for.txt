Bioinformatics, 31 (1 1), 2015, 1724—1728

doi: 10.1093/bioinformatics/btv061

Advance Access Publication Date: 30 January 2015
Original Paper

 

 

Sequence analysis

Omics Pipe: a community-based framework for
reproducible multi-omics data analysis

Kathleen M. Fisch”, Tobias Meiisner”, Louis Gioia‘,
Jean-Christophe Ducomz, Tristan M. Carland3, Salvatore Loguercio1 and
Andrew I. Su1'*

1Department of Molecular and Experimental Medicine, The Scripps Research Institute, 10550 North Torrey Pines
Road, La Jolla, CA 92037, USA, 2The Scripps Research Institute, 10550 North Torrey Pines Road, La Jolla, CA 92037,
USA and 3Department of Human Biology, J. Craig Venter Institute, 4120 Capricorn Lane, La Jolla, CA 92037, USA

*To whom correspondence should be addressed.
TThe authors wish it to be known that, in their opinion, the first two authors should be regarded as Joint First Authors.
Associate Editor: John Hancock

Received on November 13, 2014; revised on January 12, 2015; accepted on January 25, 2015

Abstract

Motivation: Omics Pipe (http://sulab.scripps.edu/omicspipe) is a computational framework that
automates multi—omics data analysis pipelines on high performance compute clusters and in the
cloud. It supports best practice published pipelines for RNA—seq, miRNA—seq, Exome—seq, Whole—
Genome sequencing, ChlP—seq analyses and automatic processing of data from The Cancer
Genome Atlas (TCGA). Omics Pipe provides researchers with a tool for reproducible, open source
and extensible next generation sequencing analysis. The goal of Omics Pipe is to democratize
next—generation sequencing analysis by dramatically increasing the accessibility and reproducibil—
ity of best practice computational pipelines, which will enable researchers to generate biologically
meaningful and interpretable results.

Results: Using Omics Pipe, we analyzed 100 TCGA breast invasive carcinoma paired tumor—normal
datasets based on the latest UCSC hg19 RefSeq annotation. Omics Pipe automatically downloaded
and processed the desired TCGA samples on a high throughput compute cluster to produce a re—
sults report for each sample. We aggregated the individual sample results and compared them to
the analysis in the original publications. This comparison revealed high overlap between the ana—
lyses, as well as novel findings due to the use of updated annotations and methods.

Availability and implementation: Source code for Omics Pipe is freely available on the web
(https://bitbucket.org/sulab/omics_pipe). Omics Pipe is distributed as a standalone Python package
for installation (https://pypi.python.org/pypi/omics_pipe) and as an Amazon Machine Image in
Amazon Web Services Elastic Compute Cloud that contains all necessary third—party software
dependencies and databases (https://pythonhosted.org/omics_pipe/AWS_installation.html).
Contact: asu@scripps.edu or kfisch@ucsd.edu

Supplementary Information: Supplementary data are available at Bioinformatics online.

 

1 IntrOducuon applications to personalized medicine and diagnostics (Nocq et (11.,

Next—generation sequencing (NGS) has presented researchers with the 2013). These technologies have resulted in the development of a large
opportunity to collect large amounts of sequencing data (Mardis, number of computational tools and analysis pipelines, necessitating
2011), which has accelerated the pace of genomic research with the creation of best practices and reproducible integrative analysis

©The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 1724

112 /310'slcu1nofp103x0"sotwurJOJutotq/ﬁduq 11101} popcolumoq

91oz ‘Og anBnV uo ::

Multi—omics data analysis

1725

 

frameworks (Nekrutenko and Taylor, 2012). Several automated pipe—
lines have been developed to tie together individual software tools
such as bcbio—nextgen (https://github.com/chapmanb/bcbio—nextgen),
Galaxy (Goecks et 41]., 2010) and others (Golosova et 41]., 2014; Nocq
et 41]., 2013). In addition, several groups have published step—by—step
directions for well—established best practices in NGS analysis.
Examples include the Broad Institute’s best practices for variant calling
using the Genome Analysis Toolkit (GATK) (McKenna et 41]., 2010)
and ENCODE’s standardized data—processing guidelines (ENCODE
Project Consortium, 2012).

Despite the establishment of best practices and analysis pipelines,
there exists a need for a platform that provides researchers with an
analysis tool that can be easily understood and reproduced by other
researchers in a variety of computational environments (Nekrutenko
and Taylor, 2012). Galaxy, a widely known platform for perform—
ing reproducible computational analyses, has been designed to make
computational analyses accessible to non—programmers (Goecks
et 41]., 2010). It allows the user to pipeline together various software
tools pre—wrapped by Galaxy without the need to learn the imple—
mentation details of any single tool in a web—based interface. Other
biologist—oriented NGS software tools include Unipro UGENE NGS
pipelines (Golosova et 41]., 2014) and the workﬂow management sys—
tem Taverna (Wolstencroft et 41]., 2013). While these tools are ex—
tremely useful for biologists and other non—programmers, more
advanced users may have a need for a tool that supports program—
matic access to the individual tools, is easily extensible and is repro—
ducible. Several tools exist to allow developers to pipeline together
functions, such as Bpipe (Sadedin et 41]., 2012), Snakemake (Koster
and Rahmann, 2012) and Ruffus (Goodstadt, 2010), although de—
velopers are still required to develop their own pipelines using
these frameworks. A complete analysis pipeline, Bcbio—nextgen
(https://github.com/chapmanb/bcbio—nextgen), is designed for bio—
informaticians to implement high throughput optimized NGS ana—
lysis pipelines and requires familiarity with command—line
programming. The focus of bcbio—nextgen is on variant calling using
a variety of software tools that have been performance optimized
for use in bcbio—nextgen. This makes bcbio—nextgen a powerful tool
for implementing variant calling pipelines; however, customizing
and extending a bcbio—nextgen pipeline requires extensive program—
ming knowledge. In addition, there are several other pipelining
tools, although many focus only on a single NGS platform, require
computational expertise, require commercial licenses and/or are
poorly documented, necessitating the need for an open—source
computational tool that provides researchers with a reproducible
framework to democratize NGS analyses (Nekrutenko and
Taylor, 2012).

To address this need, we developed Omics Pipe (http://sulab.
scripps.edu/omicspipe), an open—source, modular computational plat—
form that provides a community—curated framework for automating
best practice multi—omics data analysis pipelines with built—in version
control for reproducibility (Fig. 1). It currently supports several best
practice NGS pipelines (Fig. 2). A non—programmer with basic unix
command—line programming experience can easily execute the sup—
ported pipelines within Omics Pipe, although the target users for
Omics Pipe are computational biologists and bioinformaticians that
require full programmatic access to the individual software tools and
parameters. The Omics Pipe framework is modular, which allows re—
searchers to easily and efficiently add new analysis tools with scripts
in the form of Python modules that can then be used to assemble a
new analysis pipeline. Detailed tutorials (http://pythonhosted.org/
omics_pipe), documentation and source code are hosted in an open
source repository that will allow community contribution to the

 

 

Fig. 1. Schematic diagram of Omics Pipe demonstrating the parallel execution
of pipelined tasks and samples. Omics Pipe requires a parameter file in YAML
format, and can be run on a local compute cluster or in the cloud. Each run of
Omics Pipe is logged with the version and run information for reproducibility

 

 

 

 

Fig. 2. Pre-built best practice pipelines and the third party software tools
supported by Omics Pipe. Users can easily create custom pipelines from the
existing modules and they can create new modules supporting additional third
party software tools

source code as well as transparency for reproducibility and accuracy
(https://bitbucket.org/sulab/omics_pipe).

One advantage of a robust and simple to use framework is
the ability to easily reanalyze existing datasets using the most
recent algorithms and annotations. To illustrate this point, we
used Omics Pipe to reanalyze a subset of the breast invasive car—
cinoma RNA—seq dataset (N2100) paired tumor—normal samples
generated by the TCGA Research Network (http://cancergenome.
nih.gov) using the count—based differential expression analysis
best practice protocol (Anders et 41]., 2013) and updated UCSC
RefSeq annotations (V57). Omics Pipe automatically downloaded
the desired TCGA samples and ran the selected pipeline on a
high throughput compute cluster. We performed paired differen—
tial expression analysis, signaling pathway impact analysis (Tarca
et 41]., 2009) and consensus clustering analysis (Wilkerson and
Hayes, 2010). We aggregated the individual sample results to
compare the results of our analysis with the original dataset,
which revealed high overlap between the analyses, as well as
novel findings due to the use of updated annotations and meth—
ods. In conclusion, Omics pipe enables researchers to analyze
NGS data with little development overhead to provide reprodu—
cible, open source and extensible use of established multi—omics
analysis methods by providing researchers with a community—
curated best practice NGS analysis framework.

112 /310'S[BHmO[pJOJXO'SOIJBLUJOJIIIOIq/ﬂduq 11101} popcolumoq

91oz ‘Og anBnV uo ::

1726

K.M.Fisch et al.

 

2 Implementation

Omics Pipe is a Python package that creates a framework for assem—
bling scripts into an automated, version controlled, parallelized
pipeline for bioinformatics analyses. Omics Pipe uses the Python
package Ruffus (Goodstadt, 2010) for running the pipeline steps,
Sumatra (Davison, 2012) for version control and run tracking, and
Python DRMAA (https://github.com/drmaa—python) for distributed
computing. Omics Pipe is distributed as a standalone Python pack—
age for installation on a local cluster. Third party software depend—
encies and reference databases must be available on the local cluster
for Omics Pipe to run. Omics Pipe is also distributed as an Amazon
Machine Image (AMI) in Amazon Web Services (AWS) Elastic
Compute Cloud that contains all necessary third—party software
dependencies and databases. The AWS distribution of Omics Pipe
runs on MIT’s StarCluster (http://star.mit.edu/). A Docker container
(https://www.docker.com/) is provided to configure and boot up
StarCluster with the preconfigured Omics Pipe AMI.

Users can either choose from a predefined set of supported
pipelines, or specify the path to a custom Python script containing a
custom pipeline. Users have full control to define relevant param—
eters for running the pipeline, including the command line options
for each tool and other customizable settings, through a parameter
file in YAML format. All of the parameters have default values to
enable the user to run the supported pipelines with minimal start up
time. More advanced users can customize every option possible
from each of the pipelined tools.

Omics Pipe can be extended by the user to create custom pipe—
lines from built—in modules and by creating simple module wrappers
for new tools. It is language agnostic, so existing scripts written in
any programming language can be included as an Omics Pipe mod—
ule. Omics Pipe executes the scripts on the cluster or in the cloud
using DRMAA to allocate resources and manage job execution.
Omics Pipe checks that each job in a pipeline finishes successfully
and creates a flag file upon successful completion, allowing the user
to rerun only incomplete steps in the pipeline. Ruffus (Goodstadt,
2010) provides functionality for parallel execution of pipeline steps.
Each time Omics Pipe is executed, Sumatra (Davison, 2012) creates
a database entry to log the specifics of the run, including the param—
eters, input files, output files and software versions for version
control and run tracking.

Omics Pipe currently supports six published best practice pipe—
lines—two RNA sequencing (RNA—seq) pipelines (Anders et 41].,
2013; Trapnell et al., 2012), variant calling from whole exome
sequencing (WES) and whole—genome sequencing (WGS) based on
GATK (McKenna et 41]., 2010), and two ChIP—seq pipelines (Feng
et 41]., 2012; Heinz et 41]., 2010). It also includes custom RNA—seq
pipelines for personalized cancer genomic medicine reporting
(MeiBner et 41]., 2014) and analysis of The Cancer Genome Atlas
(TCGA) datasets (Cancer Genome Atlas Network, 2012; Fig. 2).
The steps in each method have been adapted exactly as described in
the associated publications, allowing the user to easily execute these
methods on their own datasets. The command—line options for each
tool in each pipeline are exposed to the user in the parameters file.

3 Methods

To demonstrate its utility for efficiently processing samples using
best practice pipelines, we used Omics Pipe to reanalyze 100 paired
tumor/normal samples from 50 patients in the TCGA breast invasive
carcinoma dataset. We automatically downloaded the raw RNA—seq
fastq files and processed the files using the count—based differential

(a) TCGA 11919 201.1 TCGA hg19 2013

    
  

TCGA hg19 2013

I”) BE Genes

(algorithms)

TCGA h919 2011
DE Genes

(new annotations)

Fig. 3. Comparison of the number of genes annotated in two different UCSC
RefSeq releases and the number of DE genes identified by different algo-
rithms and annotations. (a) Venn diagram of the number of genes annotated
in the UCSC RefSeq hg19 2011 Generic Annotation File and the UCSC RefSeq
hg19 2013 annotation (Release 57) (b) Venn diagram of the comparison of the
number of DE genes identified between raw counts generated with the TCGA
UNC V2 RNA-seq Workflow using the UCSC RefSeq hg19 2011 Generic
Annotation File and raw counts generated with the count-based pipeline in
Omics Pipe using the UCSC RefSeq hg19 2013 annotation (Release 57)

expression analysis best practice protocol (Anders et 41]., 2013) to
quantify gene expression.

Brieﬂy, sequencing reads were aligned to the human genome
(hg19) using the STAR aligner (Dobin et 41]., 2012). Gene expression
quantification was performed at the exon level using the
htseq—count function within the Python HTSeq analysis package
(Anders et 41]., 2015) with UCSC RefSeq hg19 annotation (Release
57). The 50% most variable genes were used in the differential
expression analysis after TMM normalization (Robinson and
Oshlack, 2010). Differential gene expression was performed using a
paired design matrix with the Bioconductor package edgeR
(Robinson et 41]., 2010). Genes with a false discovery rate <0.01 and
log2(FoldChange) > |2| were considered differentially expressed (DE).

For comparison, we also downloaded the raw count files gener—
ated from the TCGA UNC V2 RNA—seq Workflow for the same 100
samples. These counts were generated using the UNC V2 RNA—seq
Workflow and were based on the UCSC RefSeq hg19 Generic
Annotation File from June 2011. We performed differential expres—
sion analysis of these raw counts as described above.

3.1 Identification of novel genes, pathways and
clustering in TCGA breast invasive carcinoma

We compared the DE genes in the reanalysis of the TCGA dataset
using Omics Pipe to the raw counts originally produced by TCGA to
assess the utility of rerunning previous analyses with updated gene

11; /310'S[BHmO[pJOJXO'SOIJBLUJOJIIIOIq/ﬂduq 11101} popaommoq

9IOZ ‘OE ISUEHV Ho ::

Multi—omics data analysis

1727

 

    
   
 

{a} k = 2 Consensus (e) k = 2 Consensus
Clusters - Cluslers
TumorlNormal Tumon'Normal

I Tumor I Tumor
I Normal NormaI

 

b
I I k = 3 Consensus  k = 3 Consensus
' Clusters Clusters
--—-  =- - :-

TumorfNorrnal

I I Tumor
I I Normal

Tu morINormal

Tun
I Normal

 

 

{G} k = 4 Consensus I9) k = 4 Consensus
: Clusters Clusters
"'r— —r——‘-' '  E;  ' ' -- E:
TumorlNormal TumorlNormal
ormal I I NormalI
dl
I k = 9 Consensus Consensus
! ' “— Clusters Clusters
a  E '. E:
Tumon'Normal . TumorlNormal
' I Tumor Turner
- 
_.

 

Fig. 4. Consensus clustering analysis of the TCGA breast invasive carcinoma
paired tumor-normal samples performed with the reanalyzed count data
(a—d) and the original raw counts downloaded from TCGA (e—h) for cluster
sizes of k:2, k:3, k:4 and k:10. The heat map displays sample
consensus

annotations and algorithms. We updated the gene identifiers pro—
vided with the original raw count data using the Bioconductor pack—
age mygene (Wu et (11., 2014) and we extracted newly annotated DE
genes identified in the reanalyzed dataset.

We identified significantly dysregulated pathways in each gene
set with the Bioconductor packages SPIA (Tarca et (11., 2009) and
Graphite (Sales at 111., 2012) based on the Biocarta, KEGG, NCI and
Reactome databases. We performed this analysis once on each data—
set, using the DE genes in each dataset as input, and setting the back—
ground genes to all genes included in the differential expression
analysis for each dataset.

We identified relationships among the samples based on gene ex—
pression data in each dataset using the Bioconductor package
ConsensusClusterPlus (Wilkerson and Hayes, 2010) with 80%
resampling from 2 to 20 clusters and 1000 iterations of hierarchical
clustering based on a Pearson correlation distance metric.

Consensus Mlkix CDF:

 I Consensus Malrix CDFs 

I'm-

 

Cnnsgnms Index ['nnscnau Index

 Change In Area under CDF  Change In Area under CDF

.1):

 

 

 

I off'lnsla‘slk] v «If Inner! [kl

[tom Consensus It - 2

[Iain Come-Isl: It - J

[Inn Cnnselsns It = 4

[fun Census“ It = 9

 

 

 

ltm Consensus k - 9
u‘ ‘i III-l 

 milrrnnm  {thrillth

Fig. 5. Measurements of consensus for different cluster sizes (k) from the con-
sensus clustering analysis on the reanalyzed (a—c) and original counts (d—f)
from the TCGA paired tumor-normal breast invasive carcinoma samples. The
empirical cumulative distribution (CDF) plots (a) and (d) indicate at which k
the shape of the curve approaches the ideal step function. Plots (b) and (e)
depict the area under the two CDF curves. Item consensus plots (0) and (f)
demonstrate the mean consensus of each sample with all other samples in a
particular cluster (represented by color)

 

 

We compared the DE gene sets, pathways and clusters between the
previously published results and the current analysis using updated
annotations to identify novel DE genes and pathways relevant to
breast cancer.

4 Results

We reanalyzed 100 samples in 80 hours using 10 Dell Poweredge
M600 blades with two 2.66GHz Intel quad core E5430 XEON—
EMT processors and 32 GB of ECC DDR2 memory (6—8 h per sam—
ple). Runtime on other systems will vary depending on the hardware
specs and the number of nodes used. The updated UCSC RefSeq
V57 annotations contained 3475 additional genes compared to the
UCSC RefSeq General Annotation Format from 2011 used to origin—
ally analyze the TCGA data (Fig. 3a). The reanalysis of the TCGA
breast invasive carcinoma samples using Omics Pipe revealed 761
DE genes compared to the original TCGA analysis, which resulted
in 410 DE genes (Supplementary Tables S1 and S2). There were 394
DE genes shared between the two analyses (Fig. 3b). In the reana—
lyzed dataset, 367 DE genes were unique, 14 of which were due to
new annotations. This result is expected, as different algorithms and

112 /310'S[BHJHOIPJOJXO'SOIJBLUJOJIIIOICI”Zduq 11101} popaommoq

9IOZ ‘OE ISUEHV Ho ::

1728

K.M.Fisch et al.

 

annotations are used in this study compared to the original analysis.
One of the newly annotated DE genes, DSCAM—AS1, was upregu—
lated 256x in tumor versus normal samples and has been implicated
in the malignant progression of breast carcinomas by an estrogen—
independent mechanism (Liu et al., 2002).

Consensus clustering was performed to determine the number
and membership of possible clusters within the dataset. Consensus
clustering of the original TCGA counts resulted in four clusters,
with each cluster containing both tumor and normal samples
(Figs. 4 and 5). Consensus clustering of the reanalyzed counts re—
sulted in 10 clusters, with tumor and normal samples clustering sep—
arately, with the exception of one normal sample clustering with
two tumor samples in Cluster 7 (Figs. 4 and 5). These results indicate
that improved quantification of genes common to both datasets and
the addition of the 3475 genes in the new annotation provide add—
itional information to improve the separation of tumor and normal
samples. Twenty significantly dysregulated pathways were identified
from the DE genes from the original TCGA counts, and 29 signifi—
cantly dysregulated pathways were identified in the reanalyzed data—
set. Eleven newly identified pathways were primarily related to
RNA polymerase activity (Supplementary Tables S3 and S4), dysre—
gulation of which has been implicated in mediating malignant trans—
formation in cancer (Bywater et al., 2013). The reanalysis of the
TCGA data using a best practice pipeline and updated annotations
demonstrates the utility of Omics Pipe as a tool for conducting re—
producible NGS analyses that can lead to novel biological insights.

5 Discussion

Omics Pipe is an automated and reproducible community—based
framework that can be used to efficiently analyze newly generated
data, to reanalyze publically available data, and to serve as a
framework for community—curated NGS analysis pipelines.
It currently supports several best practice pipelines for RNA—seq,
WES, WGS and ChIP—seq. This list of pipelines will continue to be
updated, and we invite the broader community to participate in
the development of Omics Pipe through our open source code
repository. Pull requests for new components and new pipelines
will be promptly reviewed. Future development of Omics Pipe will
include hosting community—curated pipelines and modules. In add—
ition, the built—in version control system allows for the reproduci—
bility of analyses performed within the Omics Pipe framework,
which is important as new versions of software tools and annota—
tions are released. It can be easily extended as new tools become
available, and it can be implemented on a local machine, a com—
puter cluster or the cloud. The goal of Omics Pipe is to democra—
tize NGS analysis by dramatically increasing the accessibility and
reproducibility of best practice computational pipelines, which
will enable researchers to generate biologically meaningful and in—
terpretable results.

Funding

This work was supported by the National Center for Advancing
Translational Sciences (Grant UL1TR001114), the National
Cancer Institute (Grant CA92577), the National Institute
on Alcohol Abuse and Alcoholism (Grants AA007456,
AA013525), the National Institute on Drug Abuse (Grant
DA030976), and by a fellowship from the National Foundation
for Cancer Research.

Conflict of Interest: none declared.

References

Anders,S. et al. (2013). Count—based differential expression analysis of
RNA sequencing data using R and Bioconductor. Nat. Protoc., 8,
1765—1786.

Anders,S. et al. (2015). HTSeq—a Python framework to work with high—
throughput sequencing data. Bioinformatics, 31, 166—169.

Bywater,M.J. et al. (2013). Dysregulation of the basal RNA polymerase tran-
scription apparatus in cancer. Nat. Rev. Cancer, 13, 299—314.

Cancer Genome Atlas Network. (2012). Comprehensive molecular portraits
of human breast tumours. Nature, 490, 61—70.

Davison,A. (2012). Automated capture of experiment context for easier repro-
ducibility in computational research. Comput. Sci. Eng., 14, 48—5 6.

Dobin,A. et al. (2012). STAR: ultrafast universal RNA—seq aligner.
Bioinformatics, 29, 15—21.

ENCODE Project Consortium. (2012). An integrated Encyclopedia of DNA
elements in the human genome. Nature, 489, 5 7—74.

Feng,J. et al. (2012). Identifying ChIP-seq enrichment using MACS. Nat.
Protoc., 7, 1728—1740.

Goecks,J. et al. (2010). Galaxy: a comphrehensible approach for supporting
accessible, reproducible, and transparent computational research in the life
sciences. Genome Biol., 11, 1—13.

Golosova,O. et al. (2014). Unipro UGENE NGS pipelines and components for
variant calling, RNA—seq and ChIP-seq data analyses. Peer]., 2, 1—15.

Goodstadt, L. (2010). Ruffus: A lightweight Python library for computational
pipelines. Bioinformatics, 26, 2778—2779.

Heinz,S. et al. (2010). Simple combinations of lineage-determining transcrip—
tion factors prime cis—regulatory elements required for macrophage and
B cell identities. Mol. Cell, 38, 5 76—5 89.

Koster,J. and Rahmann,S. (2012). Snakemake — A scalable bioinformatics
workﬂow engine. Bioinformatics, 28, 2520—2522.

Liu,D. et al. (2002). Identiﬁcation of mRNAs differentially—expressed between
benign and malignant breast tumour cells. Br. ]. Cancer, 87, 423—431.

Mardis,E.R. (2011). A decade’s perspective on DNA sequencing technology.
Nature, 470, 198—203.

McKenna,A. et al. (2010). The Genome Analysis Toolkit: a MapReduce
framework for analyzing next-generation DNA sequencing data. Genome
Res., 20,1297—1303.

MeiBner,T. et al. (2014). OncoRep: An n-of—l reporting tool to support gen—
ome-guided treatment for breast cancer patients using RNA-sequencing.
bioinv.

Nekrutenko,A. and Taylor,J. (2012). Next—generation sequencing data inter—
pretation: enhancing reproducibility and accessibility. Nat. Rev. Genet, 13,
667—672.

Nocq,J. et al. (2013). Harnessing virtual machines to simplify next-generation
DNA sequencing analysis. Bioinformatics, 29, 2075—2083.

Robinson,M.D. and Oshlack,A. (2010). A scaling normalization method for
differential expression analysis of RNA—seq data. Genome Biol., 11, 1—9.

Robinson,M.D. et al. (2010). edgeR: a Bioconductor package for differential
expression analysis of digital gene expression data. Bioinformatics, 26,
139—140.

Sadedin,S. et al. (2012). Bpipe: A tool for running and managing bioinfor-
matics pipelines. Bioinformatics, 28, 1525—15 26.

Sales,G. et al. (2012). graphite—a Bioconductor package to convert pathway
topology to gene network. BMC Bioinformatics, 13, 20.

Tarca,A.L. et al. (2009). A novel signaling pathway impact analysis.
Bioinformatics, 25, 75—82.

Trapnell,C. et al. (2012). Differential gene and transcript expression analysis
of RNA—seq experiments with TopHat and Cufﬂinks. Nat. Protoc., 7,
562—578.

Wilkerson,M.D. and Hayes,D.N. (2010). ConsensusClusterPlus: a class dis-
covery tool with conﬁdence assessments and item tracking. Bioinformatics,
26,1572—1573.

Wolstencroft,K. et al. (2013). The Taverna workﬂow suite: designing and exe-
cuting workﬂows of Web Services on the desktop, web or in the cloud.
Nucleic Acids Res., 41, W55 7—W5 6 1.

Wu,C.W. et al. (2014). MyGene.info: gene annotation query as a service.
bioinv.

112 /310'S[BHJHOIPJOJXO'SOIJBLUJOJIIIOICI”Zduq 11101} popcorn/nag

9103 ‘Og anBnV uo ::

