BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

Inferring gene ontologies

 

G0 is structured as a rooted, directed acyclic graph (DAG),
where gene annotations propagate up the hierarchy from child
terms to parent terms through ‘is a’ and ‘part of relations. For
example, in the biological process (BP) branch, ‘M phase of
mitotic cell cycle’ and ‘interphase of mitotic cell cycle’ are
child terms beneath ‘mitotic cell cycle’. Since G0 is a DAG,
any term can have multiple parents and/or multiple children.
Allowing for multiple children per term is necessary to capture
the biological truth that many molecular machines have more
than two subunits, or that a BP such as the interphase of cell
cycle can be split into more than two phases (G1, S, G2).
Multiple parents are necessary to capture the biological prin—
ciple of pleiotropyithe reuse of genes and/or subunits, or the
classiﬁcation of a BP into multiple higher categories of process
(e.g. ‘Sulfur Amino Acid Metabolic Process’ is a child of both
‘Cellular Amino Acid Metabolic Process’ and ‘Sulfur
Compound Metabolic Process’). In order to faithfully infer an
ontology of genes like GO, we need an algorithm able to infer a
DAG.

In previous work, we developed a multistep algorithm for con—
structing a Network Extracted Ontology (NeXO), which infers a
DAG structure from data summarized in the form of a molecular
interaction or gene similarity network (Dutkowski et al., 2013).
This algorithm first infers a binary tree using the HAC—ML al—
gorithm (Park and Bader, 2011). Then, splits without network
support are collapsed, creating nodes with more than 2 children.
Finally, a post—processing step searches for additional parenti
child relationships between existing nodes, allowing for a single
node to have multiple parents.

The NeXO algorithm does not use quantitative information
about gene interaction or similarity, i.e. it assumes an input net—
work for which the edges are unweighted. However, typical
genome—scale data such as gene expression correlation populate
a full matrix of similarity scores between pairs of genes where all
of the information is contained in the weights. While threshold—
ing these data is one way to interpret them as unweighted net—
works, this results in information loss not only below but also
above the threshold, as hierarchical structure embedded in the
weights is collapsed. Furthermore, when combining multiple
types of data (as will be undoubtedly required for construction
of a complete ontology of gene function), it is useful to give
greater weight to gene pairs which have evidence of similarity
in multiple datasets (Kim et al., 2014). Since the NeXO algorithm
is unable to use valuable information contained in the weights of
edges in an input network, it is instead forced to rely on setting a
proper threshold below which all information is ignored and
above which relative weights are lost.

The essence of the DAG inference problem is to detect com—
munities of genes that span a wide range of sizes/scales and can
nest hierarchically as well as share arbitrary subsets of members.
Furthermore, the algorithm should be able to construct a DAG
using the information contained in weighted networks, and it
should be capable of operating on a nearly complete, weighted
graph with a genome—scale number of nodes (thousands) and
edges (millions). A number of existing clustering algorithms ad—
dress parts of this challenge. For example, there are many com—
monly used hierarchical clustering algorithms which use
similarity or distance scores as input and infer a nested hierarchy
of clusters (Florek et al., 1951; Sneath and Sokal, 1973; Sokal

and Michener, 1958; Sorensen, 1948; Ward, 1963). These meth—
ods, however, rely on iterative joining of pairs of terms, resulting
in forced construction of a binary tree. Clusters cannot overlap
(i.e. have multiple parents for a single node) or have >2 children,
and the number of clusters inferred is fixed at n —1 where n is the
number of terminal nodes.

There have recently been a handful of algorithms which con—
struct hierarchies with overlapping clusters, by creating a first
level of overlapping clusters with terminal nodes and then com—
bining these base clusters into higher level clusters (Becker et al.,
2012; Kovacs et al., 2010; Kumpula et al., 2008; Sales—Pardo
et al., 2007). These algorithms all present solutions that allow
multiple parents and multiple children at the initial level of clus—
ters, and some operate on weighted networks. However, these
methods restrict each higher level cluster to having a single
parent. This aspect inherently limits the types of relations that
can be discovered by these methods.

Another relevant method has been proposed that hierarchic—
ally clusters links in a graph rather than edges (Ahn et al., 2010).
This method is quite ﬂexible and allows for each node in the
graph to appear in multiple clusters via participation in multiple
edges. Such a method still restricts the types of clusters it creates,
however. First, an edge can only participate in a single cluster at
each level of the hierarchy (although a pair of nodes may inci—
dentally participate in multiple clusters via other edges).
Secondly, the hierarchical clustering of the edges allows only
for binary joins between edges and therefore each lower level
cluster will be joined with exactly one other cluster at each
step. This process creates e—l clusters, where e is the number
of edges in the input graph. While the original paper proposes a
method for determining a single optimal cut in the hierarchy for
determining clusters, how to determine all levels of the hierarchy
that are meaningful and not an artifact of construction remains
an open question.

The LocalFitness algorithm, which has recently been proposed
in the physics community, is to our knowledge the only previous
approach that constructs a DAG from an unweighted or
weighted network and has a principled way of determining
which clusters are robust (Lancichinetti et al., 2009). This
method constructs clusters at a given level in the hierarchy by
optimizing a fitness function for each of many potentially over—
lapping clusters built out from multiple seed nodes. The fitness
function includes a parameter that is tuned to ﬁnd clusters at
multiple levels of the hierarchy. Graph partitionings that are
stable across comparatively wide ranges of this parameter are
used.

Here we present a basic formulation of the ontology inference
problem followed by a description of a new method, called
Clique Extracted Ontology (CliXO), for ontology inference
based on progressive identiﬁcation of maximal cliques. We evalu—
ate CliXO in comparison with LocalFitness as well as several
other methods such as the NeXO algorithm and standard clus—
tering. Methods are evaluated based on their ability to recon—
struct the GO from two starting datasets: (a) pairwise semantic
similarities, which are derived directly from GO itself, and
(b) three different —omics datasets (genetic interaction prof11e cor—
relation, gene expression correlation and an integrated —omics
dataset for yeast).

 

i35

ﬁm'spzumofpmﬂo'sopeuuopnorq/ﬁdnq

a BCDEFGH
1 A
3 a c
0390969$ D
I

O F
I.

‘9‘!) ‘90) ‘3‘?) ‘90) ‘90) ‘9‘!)
6 430 .36 436 .36 436 43
Geewgeewgeemgeeﬁ’gee‘wee"

m

2 1 2 1 a
E B E 3 E E E 3 E E E 3 E a E 3 E a E
eeeoeeeeeeooeeeeeeooeeeeeeooeeeeeeooeeeeeeooeeee

O'SOlIBLUJOJIIlOlq/ﬂduq

spaumoprOJX

£10"

Inferring gene ontologies

 

2.1.3 Distance versus similarity scores We note that in many cases,
the relationship between terms is presented in the form of a similarity
matrix, rather than a distance matrix. The two are interchangeable for the
algorithms proposed below. For example, subtract the similarity scores
from a large constant to get a valid distance function between two terms.

2.2 CliXO algorithm

We consider a simple heuristic as described in Figure 1C. Consider an
undirected graph U with nodes 6 T and no edges. Let S be a stack of all
pairs (a, b) sorted by distances M(a, b), with the smallest value at the top.

 

Algorithm CLIXO (S)

 

Input: Stack S of sorted distances

Output: Non—terminal nodes in the ontology—graph
1. CG = {}

2. while (S75 {H

.(a, b) = top(S); t = M(a, b)

. whi1e(M(a, b) == )

(a, b) = Pop(S)

Add edge (a, b) to U

. Ccur = Set of maximal cliques in U

. CG = CG U Ccur

. (CG forms the set of non—terminal nodes in G)

koooqowmtbw

 

Note that each maximal clique in U corresponds to a node of the
ontology graph, with an obvious hierarchy. We use an algorithm pro-
posed by Chiba and Nishizeki (1985) to compute all maximal cliques in
time 0(mp, a( U)) where m is the number of edges in U, a is the number of
maximal cliques in U and a(U) is the arboricity of U (a(U)<n where
n = |T|). While output-efﬁcient, the number of cliques can be large.
Moreover, the algorithm may output the same cliques repeatedly.

We modify the algorithm above to maintain only informative maximal
cliques deﬁned as follows. At any time in the algorithm, a pair of terminal
nodes a, b is explained if a and b are both elements of a single clique which
is already in Cg. A clique is necessary if it contains a pair of terminal
nodes 6, d which is not contained in any other single clique in Cour.
A clique C e Ccur is informative if it is both necessary and contains at
least one pair of non-explained terms. Only informative cliques are added
to C6.

Next, we check cliques dynamically for maximality and informative-
ness. Deﬁne N(a) as the set of vertices adjacent to a in U. Let C, represent
the set of maximal cliques in Ccur containing a. Consider Steps 5 and 6,
where (a, b) is popped off S and edge (a, b) is added to U. For each clique
C’ 6 Cu, we create a new clique C’ F) N(b) U {h}. Similarly, for each clique
C’ e C,,, we will create a new clique C’ F) N(a) U {a}. These are the only
new cliques. Each new clique Cnew is checked for maximality. If maximal,
add each Cnew to Cour, and remove from Ccur all cliques in Cu or in C],
that are contained in (i.e. a subset of) a Cnew. Finally, when we are ready
to increase the threshold [all (a, b) matching the current threshold have
been popped], we check all cliques in CCur and retain only the informative
ones. CliXO with dynamic checking for maximality and informativeness
can compute all informative maximal cliques in 0(Mny) where M is the
number of non-zero edges in M, n = |T| and y is the number of inform-
ative cliques in the ﬁnal output G. Practically, y << n, where p, is the total
number of all maximal cliques at each unique t in U, and this results in
signiﬁcant performance increase.

2 .2.1 Imperfect case In the imperfect case, the only change is in Step 8
of the CliXO algorithm. Instead of adding all informative cliques in Ccur
to C5 each time a new threshold is reached, we add to C5 only those
informative cliques C in Ccur for which max“), 6 C M(a, b)<t— at.

This algorithm can perfectly distinguish between signal and noise when
at is smaller than s, the smallest distance between any childiparent node
pair in the ontology and larger than a noise value n(G), determined by the
following procedure. For each term a e G, order by value all M(a, b)
where a, b e u. n(u) for a non-terminal node a is the maximum difference
between adjacent values in this ordered list and n( G) = max“E N n(u). It
is not possible to directly determine n(G) without knowing the true ontol-
ogy structure, but it is a useful concept for understanding oz. On a con-
ceptual and practical level, n(G) can be estimated as roughly 2>< the
standard error of measured pairwise distances (e.g. when the experiments
used to measure distance are replicated both technically and biologically).
oz can be set to this estimated n(G).

It may not always be possible to set at so that n(G)<oi<s because
sometimes n(G)>s. In this case, if oz<n(G), it will result in the creation
of extraneous terms that are a subset of a ‘real’ term. If oz>s then any
‘real’ child node 6 that is close to its parent node 17, i.e. 2(w(p) — W(C))<Ol,
will not be included in the ontology. One practical strategy for dealing
with this case is for the user to focus on a particular small, well-known
section of the ontology (e.g. a molecular machine like the proteasome)
and observe it over various levels of at. If many extraneous terms seem to
be being created, then at is likely too low. If known levels of the hierarchy
are being collapsed, then at is likely too high.

2.2.2 Missing edges (false negatives ) We expect that in real mo-
lecular data, there will be a number of missing edgesiie. measurements
for a, b e Twhere M(a, b) >> w(a, b) in the ‘true’ ontology. These missing
edges will cause splitting of maximal cliques into highly overlapping
smaller cliques. For example, a ‘true’ term of size k with just one missing
edge in the measured distances M will result in two smaller terms of size
k + 1 in the DAG inferred from M.

2.2.3 Algorithm: Missing Edges We maintain the properties of the
noisy measurements case. However, we now add a user-deﬁned param-
eter )3 and the ability to edit M, the input distance matrix, when we infer
that an edge is likely missing (i.e. is a false negative). )3 is a parameter
where 0< )3 5 1. Two cliques C ,- and C / are considered highly overlapping
by the algorithm if for all a e C,- U C),

|N(a) ﬂ (Ci U Cj)|

lCiUle—l Zﬁ'

We modify the CliXO algorithm, again in Step 8. Before an informative,
maximal clique C,- e Ccur is added to C6, we check all other C / e CCur for
high overlap with C,-. For any C / found to be highly overlapping with C,-,
we also check for any Ck e Ccur that are highly overlapping with C).
Recall w(C) = maxurhec M(a, b). For all such highly overlapping pairs
of cliques C,- and C), we then set M(a, b) = max(w(C,-), w(C,~)) for all a, b e
(C,- U C ,) with M(a, b)>max(w(C,-), w(C,~)). We add all edges adjusted in
M to U and update Cour.

2.2.4 Other algorithms considered We evaluate ontologies inferred
using the NeXO algorithm (Dutkowski et al., 2013), the Local Fitness
Algorithm (Lancichinetti et al., 2009), and several standard hierarchical
clustering algorithms including the Unweighted Pairwise Group Method
(UPGMA; Sokal and Michener, 1958), the Weighted Pairwise Group
Method (WPGMA; Sneath and Sokal, 1973), Ward’s minimum variance
method (Ward, 1963), Complete Linkage (Sorensen 1948), and Single
Linkage (Florek et al., 1951).

2.3 Evaluation of reconstructed ontologies

2.3 .1 Ontology alignment Ontologies were aligned as in Dutkowski
et al. (2013). Brieﬂy, given two ontologies 01 with n, terms and 02 with n2
terms, an ontology alignment A is a mapping of terms between ontologies
such that each term in 01 maps to at most one term in 02 and vice versa.
Term mapping in our alignment procedure is evaluated using a score

 

i37

ﬁre'spzumofpmjxo'sopeuuopnorq/ﬁdnq

M.Kramer et al.

 

function that considers the similarity of the sets of genes assigned to terms
(intrinsic similarity) and the similarity of the ontology hierarchy sur-
rounding each term (relational similarity). Each pair of terms which is
aligned receives an alignment score ranging from 0 to 1 where 1 represents
identity in both intrinsic and relational similarity.

To calculate false discovery rate (FDR) of term alignment, we ﬁrst
create n ontologies with the same structure as the inferred ontology 0,- but
with all gene labels randomly permuted. The FDR of a term alignment at
a given score t is then:

I!
i Z IVs-(l)
_ i=1
FDR(t) 7 W
Where N R,(t) is the number of terms in the random permutation i that
have an alignment score it, and N(t) is the number of terms in the
ontology 0,- that have an alignment score it. Terms are binned by size
for the FDR computation, and we set a minimum score threshold value
t z 0.1 for large terms and higher threshold values for small terms so as to
maintain an FDR <5% within each size group.

The alignment procedure also respects the preservation of structural
relationships across ontologies being aligned. It does this by ensuring that
there are no conﬂicts between individual mappings in the ﬁnal alignment.
There are two versions of the alignmentiin the permissive version, a
conﬂict exists between mappings (e1, e2) and (el’, ez’) where e1, el’ 6 01
and e2, e2’ 6 02 if there is a parentwhild criss-crossithat is, either e1 is a
descendant of el’ in 01 and e2 is an ancestor of ez’ in 02, or el’ is a
descendant of e1 in 01 and ez’ is an ancestor of e2 in 02. In the strict
version, there is a conﬂict if e, is a descendent of el’ in 01 and e2 is not a
descendent of ez’ in 02. The permissive version places most value on the
alignment between individual nodes, whereas the strict version also re-
quires that the relations between nodes are preserved.

2.3.2 Precision and recall of inferred ontologies For evaluating
inferred ontologies, we ﬁrst align the inferred ontology I to the gold
standard ontology G, in our case GO. This gives us an alignment A.
We then determine precision and recall as

A
precision = u , recall = E
III |G|

where |A| is the number of terms aligned with t: 0.1 and FDR <5%.

3 RESULTS AND DISCUSSION

3.1 Ontology inference from semantic similarity

We began by testing performance using input similarity data
that are perfectly consistent with the target ontology. For this
task, we calculated the Resnik semantic similarity (Resnik, 1995)
of all gene pairs in the BP branch of GO to form a complete,
weighted graph. Using these data, CliXO was able to nearly
identically infer the original ontology, with >98% of BP terms
identically reconstructed (Fig. 2A) and 100% of inferred terms
aligned to a term in BP (Fig. 2B). The other algorithms tested,
including several common hierarchical clustering methods which
build trees and a method for directly creating a DAG (Local
Fitness), struggled with this task by comparison. The Local
Fitness algorithm, while capable of operating on a complete,
weighted graph, struggles to distinguish the borders of terms,
instead joining true terms into larger groups which do not recap—
itulate the true ontology (recall <5%, precision <30% by align—
ment). The hierarchical clustering methods behave similarly to
each other (with the exception of single linkage which performs

worse). While these methods often reconstruct BP terms (recall
of ~20% terms identical, ~70% terms aligned), these methods
suffer from the creation of numerous extra terms. Since they
create a binary tree, they are forced by construction to create
terms even if they are not supported by the data. This greatly
damages the precision of these methods. The ontologies created
by these methods contain roughly 3 x as many terms as the true
ontology. CliXO, on the other hand, finds the borders of each
term from the dataiit is not forced to create terms where they
do not exist.

The NeXO algorithm, while not able to operate on a complete
graph, can be run on these data by applying a threshold at a
semantic similarity value and keeping only edges above this
threshold. While this results in information loss, especially
about larger ontology terms and substructure of smaller terms,
NeXO is capable of at least approximating many terms (~40%
recall, ~70% precision by alignment) when using a network with
edges consisting of the top 10000 semantic similarity scores
(these top scores actually perfectly specify the terms of size 10
genes or fewer, as the vast majority of edges in the semantic
similarity network are due to larger terms). Still, the terms pro—
duced by the NeXO algorithm are only an approximation of the
true terms (precision, recall <10% by identity). Furthermore, the
precision slips dramatically with almost no gain in recall as
the threshold is lowered and NeXO uses more edges (recall
42%, precision 62% by alignment using the top 20 000 edges;
recall 43%, precision 49% by alignment using the top 100 000
edges).

The 83 GO BP terms not identically reconstructed by CliXO
are those where information loss occurs in the conversion to
semantic similarities. There are two such possible cases. First,
two highly overlapping terms are indistinguishable from one
larger term if the genes in the overlap already belong to a term
with higher similarity. For example, if {a, b, c, d} = T1,
{a, b, c, e} = T 2, {(1, e} e T 3, then CliXO cannot distinguish T1
from T2. Therefore, one term with {a, b, c, d, e} will be created.
Second, a term is ‘invisible’ in the semantic similarity data if all
gene pairs in that term also belong to higher similarity terms.
CliXO cannot discover these ‘invisible’ terms.

3.2 Accounting for noise

Of course, we cannot expect to have experimental data that
exactly model a semantic similarity measure. We expect three
types of noise in experimental dataifalse positives, false nega—
tives and Gaussian noise.

The simplest of these cases is false positives (cases where a gene
pair is falsely assigned a high similarity). Assuming that false
positives are randomly scattered throughout the network, we
can expect that these false positives are unlikely to form and/ or
complete a clique. Rather, these will lead to the creation of small
maximal cliques, usually containing only the two genes with the
false positive measurement between them. In some cases, a par—
ticularly well—placed false positive may create an extraneous
clique of size 3. For this reason, we choose to ignore terms of
size 2 and 3 when our algorithm is run on experimental data.

Gaussian noise in measurement will cause gene pairs that all
belong to the same ontology term to have slightly different mea—
sured similarities. To simulate this, we added Gaussian noise
centered at 0 with varying SDs to the calculated Resnik semantic

 

i38

ﬁre'spzumofpmjxo'sopeuuopnorq/ﬁdnq

:39\Ewowsmoaﬁmowoxmoagoﬁsambaﬁ

 

 

 

 

III.

I
|||III
IIII-III

I:-
III
I I
ll '
III II
El...
coo

\ a = 0.015
‘\

’ a=0.01

\ a = 0.005
‘q = 0.001

/3.IO'S[BIIm0[p.IOJXO'SOIJBIIIJOJIIIOIq/ﬂdnq

55,2kgogmoddmmowoio~&o:~=£¢o~m\

IA @

 

M.Kramer et al.

 

entities into a hierarchical DAG where terms represent groups of
entities which are similar to each other and a single entity may
belong to more than one term. The exact meaning of the result—
ing structure will change depending on the similarity measure—
ment used, but in general there will be an intuitive understanding
of the result. For example, one could take a similarity measure—
ment between cancer patients’ genomes and then use the CliXO
algorithm to construct a hierarchical DAG where each term rep—
resents a group of patients that are genetically similar to each
otheriie. genetic subtypes of cancer. As another example, one
could take measurements of connection similarity in a social
network and use CliXO to discover social groups in this network.
We leave these applications for future work.

4 CONCLUSON

Here we have explored the requirements for inferring an ontol—
ogy from a similarity matrix and available methods for doing so,
as well as proposed a new method, CliXO. We found that CliXO
outperforms other methods when a reliable similarity matrix is
available. When using —omics data, we found that CliXO outper—
forms other methods on two of three datasets tested and ties the
NeXO algorithm on the third, where both were able to success—
fully infer an ontology similar to GO BP. Furthermore, CliXO
proved signiﬁcantly more stable than NeXO to changes in par—
ameters. This study provides the algorithmic foundation for
building gene ontologies by capturing hierarchical and pleio—
tropic structure embedded in biomolecular data.

Funding: National Resource for Network Biology and the
Cytoscape Project (National Institutes of Health grants
P41GM103504 and R01GM070743); Department of Defense
(DoD) through the National Defense Science & Engineering
Graduate Fellowship (NDSEG) Program (to M.K.). VB was
supported in parts by grants from the National Science
Foundation (CCF—1115206 and IIS—1318386), and from the
NIH (U54 HL108460, 1P01HD070494).

Conﬂict of Interest: none declared.

REFERENCES

Ahn,Y.Y. et al. (2010) Link communities reveal multiscale complexity in networks.
Nature, 466, 7617764.
Alterovitz,G. et al. (2010) Ontology engineering. Nat Biotechnol, 28, 1287130.

Ashburner,M. et al. (2000) Gene ontology: tool for the uniﬁcation of biology. The
Gene Ontology Consortium. Nat Genet, 25, 25729.

Becker,E. et al. (2012) Multifunctional proteins revealed by overlapping clustering
in protein interaction network. Bioinformatics, 28, 84ﬁ90.

Carvunis,A. and Ideker,T. (2014) Siri of the cell: what biology could learn from the
iPhone. Cell, 157, 53¢538.

Chiba,N. and Nishizeki,T. (1985) Arboricity and subgraph listing algorithms.
SIAM J. Comput, 14, 2107223.

Costanzo,M. et al. (2010) The genetic landscape of a cell. Science, 327, 4254131.

Dolinski,K. and Botstein,D. (2013) Automating the construction of gene ontologies.
Nat Biotechnol, 31, 34e35.

Dutkowski,J. et al. (2013) A gene ontology inferred from molecular networks. Nat
Biotechnol, 31, 38415.

Florek,K. et al. (1951) Sur la liaison et la division des points d’un ensemble ﬁni.
Colloq. Math, 2, 2827285.

Gene Ontology Consortium. (2001) Creating the gene ontology resource: design and
implementation. Genome Res, 11, 142571433.

Holmans,P. et al. (2009) Gene ontology analysis of GWA study data sets provides
insights into the biology of bipolar disorder. Am. J. Hum. Genet, 85, 13724.

Hubble,J. et al. (2009) Implementation of GenePattern within the Stanford
Microarray Database. Ntwleic Acids Res, 37, D898rD901.

Kim,H. et al. (2014) YeastNet v3: a public database of data—speciﬁc and integrated
functional gene networks for Saccharomyces cerevisiae. Nucleic Acids Res, 42,
D7317D736.

Kovacs,I.A. et al. (2010) Community landscapes: an integrative approach to deter—
mine overlapping network module hierarchy, identify key nodes and predict
network dynamics. PLoS One, 5, e12528+.

Kumpula,J.M. et al. (2008) Sequential algorithm for fast clique percolation. Phys
Rev. E Stat. Nonlin. Soft Matter Phys, 78, 026109.

Lancichinetti,A. et al. (2009) Detecting the overlapping and hierarchical community
structure in complex networks. New J. Phys, 11, 033015.

Park,Y. and Bader,].S. (2011) Resolving the structure of interactomes with hier—
archical agglomerative clustering. BM C Bioinformatics, 12 (Suppl. 1), S44.
Pena—Castillo,L. et al. (2008) A critical assessment of Mus musculus gene function

prediction using integrated genomic evidence. Genome Biol, 9 (Suppl. 1), S2.

Resnik,P. (1995) Using information content to evaluate semantic similarity in a
taxonomy. Int Joint Conf. Artif., 1, 4487453.

Sales—Pardo,M. et al. (2007) Extracting the hierarchical organization of complex
systems. Proc. Natl Acad. Sci. USA, 104, 152244 5229.

Sneath,P.H. and Sokal,R.R. (1973) Numerical Taxonomy. The Principles and
Practice of Numerical Classiﬁcation. W. H. Freeman, San Francisco, USA.
Sokal,R.R. and Michener,C.D. (1958) A statistical method for evaluating
systematic relationships. The University of Kansas Scientiﬁc Bulletin, 38,

140971438.

Sorensen,T. (1948) A method of establishing groups of equal amplitude in plant
sociology based on similarity of species and its application to analyses of the
vegetation on Danish commons. Biol. Skr., 5, 1734.

Wang,K. et al. (2010) Analysing biological pathways in genome—wide association
studies. Nat Rev. Genet, 11, 8437854.

Ward,J.H. (1963) Hierarchical grouping to optimize an objective function. J. Am.
Stat. Assoc, 58, 23(r244.

Yan,H. et al. (2010) A genome—wide gene function prediction resource for
Drosophila melanogaster. PLoS One, 5, e12139.

 

i42

ﬁre'spzumol‘pmjxo'sopeuuoynotq/ﬁdnq

