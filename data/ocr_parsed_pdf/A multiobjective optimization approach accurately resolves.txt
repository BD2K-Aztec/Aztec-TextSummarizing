Bioinformatics, 32(3), 2016, 345—353

doi: 10.1093/bioinformatics/btv582

Advance Access Publication Date: 12 October 2015
Original Paper

 

Sequence analysis

A multi-objective optimization approach
accurately resolves protein domain
architectures

J.S. Bernardes1'*, F.R.J. Vieira3'4, G. Zaverucha4 and A. Carbone1'2'*

1Sorbonne Universités, UPMC Univ-Paris 6, CNRS, UMR 7238, Laboratoire de Biologie Computationnelle et
Quantitative, 15 rue de l'Ecole de Médecine, 75006 Paris, 2lnstitut Universitaire de France, 75005 Paris, 3CNRS,
UMR 7606, Laboratoire d'lnformatique de Paris 6, 75005 Paris, France and 4COPPE-UFRJ, Programa de Engenharia
de Sistemas e Computacao, Rio de Janeiro, Brazil

*To whom correspondence should be addressed
Associate Editor: Alfonso Valencia

Received on January 26, 2015; revised on September 13, 2015; accepted on October 2,2015

Abstract

Motivation: Given a protein sequence and a number of potential domains matching it, what are the
domain content and the most likely domain architecture for the sequence? This problem is of
fundamental importance in protein annotation, constituting one of the main steps of all predictive
annotation strategies. On the other hand, when potential domains are several and in conflict
because of overlapping domain boundaries, finding a solution for the problem might become diffi—
cult. An accurate prediction of the domain architecture of a multi—domain protein provides import—
ant information for function prediction, comparative genomics and molecular evolution.

Results: We developed DAMA (Domain Annotation by a Multi—objective Approach), a novel ap—
proach that identifies architectures through a multi—objective optimization algorithm combining
scores of domain matches, previously observed multi—domain co—occurrence and domain overlap—
ping. DAMA has been validated on a known benchmark dataset based on CATH structural domain
assignments and on the set of Plasmodium falciparum proteins. When compared with existing
tools on both datasets, it outperforms all ofthem.

Availability and implementation: DAMA software is implemented in C++ and the source code can
be found at http://www.lcqb.upmc.fr/DAMA.

Contact: juliana.silva,bernardes@upmc.fr or alessandra.carbone@lip6.fr

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

 

Sequence-based domain recognition represents one of the most con-
venient and practical approaches to understand evolution and func-
tion of proteins. Domains are sequence fragments that can be
independently stable and folded, they have a shape and a function,
they occur alone or in groups and are the building blocks of all pro-
teins. To account for the great diversity of domain contexts, several
efforts were made in categorizing coding regions into protein
domains and domain families. Some resources, like SCOP (Murzin
et (11., 1995) and CATH (Sillitoe et (11., 2013), organize domains

(63 The Author 2015. Published by Oxford University Press.

according to their structural classes, while others, such as Pfani
(Finn et (11., 2010) and PROSITE (Sigrist et (11., 2013), are purely se-
quence hased. These databases are the starting point of annotation
pipelines that are commonly organized into three steps: (i) a prob-
ahilistic model or a set of models is built to represent each functional
domain; (ii) the model lihrary representing all domains in the data-
base is used to scan query sequences identifying potential domains
and (iii) conflicting predictions are resolved to propose a domain
architecture (domain arrangement) for each protein to he annotated.
Domain architecture prediction (step iii) can he used to improve the

345

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/Iicenses/by-nc/4.0/),
which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact

journals.permissions@oup.com

/310‘srcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

346

J. S. Bernardes et al.

 

performance of annotation methods, since homologous proteins
might share their architectural context. The problem though can be
complex when a query sequence matches several models, producing
a set of conflicting predictions with overlapping domain boundaries.
A simple strategy to resolve domain architecture in multi—domain
proteins is to consider highest confidence domains without overlap—
ping (Finn et al., 2010). However, some overlapping must be admit—
ted to increase the number of correct domain predictions, as
demonstrated by the Multi—Domain Architecture (MDA) approach
(Yeats et al., 2010). In this approach, the set of potential domains in
a query sequence is represented as a weighted graph (where nodes
are domains and edges connect non—overlapping domains) and the
heavier clique—finding algorithm is used to detect the most probable
domain architecture. More recently, other approaches have explored
domain combinations (co—occurrences) to improve architecture pre—
diction. They all consider domains to be co—occurring on the same
protein, not necessarily as consecutive one of the other. Domain
co—occurrence is expected to enhance the level of confidence in a pre—
diction (Geer et al., 2002; Vogel et al., 2004) mainly because (i) the
majority of proteins are multi—domain and (ii) we observe fewer
combinations than the statistically expected ones (Coin et al., 2003;
Moore et al., 2008; Vogel et al., 2004). Intuitively, co—occurrence
suggests functional cooperation, i.e. two or more domains can inter—
act to determine the protein function (Apic et al., 2001; Marcotte
et al., 1999; Wuchty and Almaas, 2005). Domain co—occurrence has
been explored by two methods: CODD (Co—Occurrence Domain
Discovery) (Terrapon et al., 2009) and dPUC (domain Prediction
Using Context) (Ochoa et al., 2011). Both methods are based on the
Pfam database and, for a given protein sequence, they detect a set of
potential domains by setting a permissive Pfam threshold and by
allowing overlaps. They also compute and use a list of known do—
main architectures from UniProtKB sequences (Leinonen et al.,
2004). CODD starts by assigning to the query sequence non—
overlapping domains detected with a restrictive Pfam threshold.
Then, it iteratively tries to add new non—overlapping domains that
co—occur with the old ones according to the list of known architec—
tures. dPUC differs in strategy from CODD. It represents potential
domains as nodes of a graph, where edges connect non—overlapping
domains. It weights each node with normalized Pfam scores, and it
weights edge with a special context score that captures the propen—
sity of pairwise domain combinations in the list of known architec—
tures. Then, similar to MDA approach, dPUC finds a domain
architecture for a given query sequence by looking for the max—
imum—weighted clique in the graph.

dPUC presents two advantages over CODD: it takes into ac—
count co—occurrence of repeated domains and penalizes higher confi—
dence domains with no co—occurrence. However, we believe that
there are two points into dPUC’s approach that could be improved.
First, it did not consider multi—domain co—occurrence to compute
domain architectures. Second, dPUC combines individual domain
scores and co—occurrence information into a very simplified func—
tion, which is then optimized. We argue that this combination is
non—trivial and that the function could be more complex or alterna—
tively, could be split into several sub—functions to be optimized.

Here, we present DAMA (Domain Annotation by a Multi—
objective Approach), a novel algorithm that treats protein domain
architecture prediction as a multi—objective optimization problem.
DAMA combines a number of criteria including multi—(possibly
pairwise—) domain co—occurrence and domain overlapping. By taking
into account known architectural solutions, DAMA identifies them
within the protein sequence and integrates new domains into them
whenever possible. DAMA has been evaluated over a benchmark

containing protein sequences extracted from the Protein DataBank
(PDB), over the genome of the poorly annotated malaria parasite
Plasmodium falcipamm and over two datasets collecting known se—
quences characterized by large domain architectures and repeated
blocks of domains. Our results show that, for all datasets, DAMA
outperforms existing computational methods and detects domain
architectures presenting co—occurrences.

2 Methods

2.1 Data

2.1.1 The PDB benchmark

To evaluate DAMA performance, we have used the benchmark con—
structed for the evaluation of MDA. It contains 2523 multi—domain
proteins extracted from the PDB, where each domain is classified in
a CATH superfamily. The dataset is available at ftp://ftp.biochem.
ucl.ac.uk/pub/gene3d_data/DomainFinder3/RC1/Benchmark/. Since
this dataset is based on CATH superfamilies, we have extracted the
list of known domain architectures by parsing the file
CathDomainDescriptionFile containing CATH superfamilies
(domains) for all proteins in PDB database. This file is available at
ftp://ftp.bi0chem.ucl.ac.uk/pub/cath/latest_release/.

2.1.2 The P. falciparum protein dataset

All data were extracted from PlasmoDB (http://PlasmoDB.org), the
official repository of the P. falcipamm proteins used as a reference
database by malaria researchers (Aurrecoechea et al., 2009; Bahl
et al., 2003). PlasmoDB v11 contains 5542 proteins. To provide a
list of potential domains for P. falciparum protein sequences, we
used Pfam v27 (downloaded from http://pfam.sanger.ac.uk), con—
taining 14 831 domains. The list of known domain architectures
was extracted from Pfam—A.full, as well as the list of allowed do—
main overlaps. HMM profiles, required to produce the list of poten—
tial domains for P. falciparum, were downloaded directly from the
Pfam web site. To identify potential domains, we run HMMER 3.0
(hmmscan) on all protein sequences (Eddy, 2011). See Section 2.5.
The distribution of the number of domains in P. falciparum proteins
is reported in Supplementary Figure 51.

2.1.3 DAMA time complexity on P. falciparum protein sequences
We computed the run time of DAMA, MDA, CODD and dPUC on
the set of domain hits provided by HMMER 3.0 and selected with
an E value ﬁle—3. All experiments run time have been obtained on a
one core single—user linux (kernel 2.6.32—431.11.2.el6.x86_64 — Red
Hat 4.4.7—4) Intel(R) Xe0n(R) CPU E5—2650 v2 2.60 GHz, with 64
GB of RAM. Single user mode was used to minimize the number of
system activities.

2.1.4 Three benchmarks to test DAMA time complexity on long
proteins

The TitinLikeDB was constructed by considering three Pfam fami—
lies (PF00041: fn3, PF09042: Titin_Z, PF07679: I—set; Titin_Z is
known to strongly co—occur with I—set and fn3 with I—set). From
these families, we selected proteins with at least 1000 amino acids:
we included all Titin_Z proteins (53), randomly selected 750 pro—
teins from fn3 and 750 from I—set. The number of proteins (1553)
was determined by disk space limitations, since, on these large se—
quences, hmmscan was executed with permissive parameters and it
produced a large amount of domain hits. The SilkWormSet was con—
structed from the SilkWormDB (Xia et al., 2005) and it collects 324
proteins whose architecture is characterized by consecutive domain

[310'sp2umofp105xo'sopeuHOJIItotq/ﬁdnq

Domain architectures

347

 

block repeats. For instance, these are proteins of the form
DE[ABC]13FD, where ABCDEF are domains and where the block of
domains ABC is repeated 13 times consecutively (Moore et al.,
2013). SilkWormSet contains all proteins with such repeated pat—
terns found among the 14 623 proteins of the silkworm genome. A
third dataset is constituted by long generated sequences. From the
14 831 domain families constituting Pfam27, we built hundred ran—
dom sequences with 11 domains, for each n : 3 . . . 99 taken by steps
of 3. Namely, for each random sequence to be generated, we ran—
domly selected 11 domains within the Pfam27 set, used HMMEmit
(Eddy, 1998) to generate 11 sequences close to the original ones and
concatenated the n generated sequences following the order of do—
main extraction. For each n, DAMA has been run on the concaten—
ated random sequences, the average computational time has been
evaluated for each n and plot in Supplementary Figure S4. Over the
three datasets, experiments were performed on a one core single—
user machine as indicated in Section 2.1.3.

2.2 Parameter settings forthe optimization step

To find the best domain architecture for a given query sequence, the
algorithm (described in Section 3) generates a set of feasible archi—
tectures based on domain co—occurrence constraints and finds the
most likely one by optimizing the five objective functions F1 . . . F5
above. The tolerance values 5, for each function F, ([34) in Equation
(6) are set by the user depending on the dataset considered. For the
51 value, aimed to introduce some flexibility on the selection of the
domains, the idea is to evaluate not only domains with best E—value
score but also those with good E—value score that are well supported
by known co—occurrence. This required to set 51 : 0 for the two
datasets we analyzed, one based on CATH and the other on Pfam.
Then, for each domain database, the notion of ‘higher confidence
domain” for the optimization function F1 was modeled accordingly.
For CATH, we wanted the model to fit the spirit of the database by
allowing a selection of several potential hits for the final architec—
ture, among the ones suggested by multiple probabilistic models (for
a given domain, these hits overlap and are characterized by different
boundaries and E—value scores), and we set 51 : 40 to expand the
region of optimal solutions for our PDB benchmark. This permissive
51 value allows to select a large number of overlapping hits with ac—
ceptable E value among which to find the one that accommodates
best the other domains of the architecture. In contrast, for Pfam, the
higher confidence domain is modeled by the domain hit with the
best score. Because of this, we set a much less permissive 51 : 10 to
assure hits with the highest E—value scores to belong to the final
architecture for the P. falciparum annotation. To maximize the num—
ber of domain co—occurrences and the number of distinct domains,
we set 5; : 0 for j > 1 for both datasets.

2.3 Measuring prediction accuracy

As was done for MDA in Yeats et al. (2010), a predicted MDA is
considered correct if the superfamily types and the number of occur—
rences of domains are predicted correctly, irrespective of whether
the boundary positions are correct. The overall accuracy is then cal—
culated over the whole dataset. If too many domains of the correct
superfamilies (the CATH level H corresponding to Homologous
superfamilies is used) are predicted then this is termed a ‘semi—false
positive”, while if the extra domains belong to an incorrect super—
family, it is termed a ‘false positive”; if DAMA is missing a domain,
it is a ‘false negative”. Note that the false negative rate is due to the
E—value cut—off 0.001, used both in DAMA and MDA. A single pre—
dicted MDA can potentially contain errors in all three classes.

2.4 Estimating false discovery rate

The estimation of the number of false predictions is an essential step
for evaluating the performance of domain identification methods.
The two strategies that we used to estimate the false discovery rate
(FDR) were both employed before. The first one estimates the prob—
ability that a potential domain has been randomly predicted, and it
was employed for the evaluation of dPUC (Section 2.4.1). The se—
cond strategy estimates the number of false co—occurrence certifica—
tions in architectures and it was proposed in the evaluation of
CODD (Section 2.4.3).

2.4.1 FDR over domain prediction

The FDR over domain predictions was estimated by comparing the
number of predictions on real and shuffled sequences. Intuitively,
domain predictions on shuffled sequences arise by chance alone,
whereas predictions on real sequences provide the total number of
domains (true or false). Therefore, the ratio between these two val—
ues should approximate the FDR. To compute FDRs, real sequences
were concatenated to shuffled ones, where these latter were gener—
ated according to two different hypothesis or random models. The
first random model (1—mer) takes a real sequence and generates a
reshuffled one that has the same residue content of the original se—
quence and the same length. The second random model (4—mer)
takes a real sequence but generates reshuffled sequences of succes—
sive k—mers, for k :4. This implies that the same residue content
and the same length are preserved. The idea behind this last model is
that protein sequences are made by small fragments of residues play—
ing a relevant structural and functional role and that small k—mers
approximate these potential patterns in a protein. Both random
models were applied to each sequence 20 times, and the random
reshuffling was realized with the perl function
List: :Util: :shuffle(). If P is the original set of protein se—
quences and S its associated shuffled sequence, let P + S be the set of
concatenated sequences. Note that the set P +S is a set containing
20 times more sequences than P because from each sequence in P,
we generated 20 sequences. Then, we computed the number of do—
main predictions within the P—portion (saying R) and the number of
predictions within S—portion (saying A) of the P +S sequences and
set the FDR : A/R for the dataset. The same strategy was used in
(Ochoa et al., 2011) (see Section 2.4.2 and the legend of
Supplementary Fig. S6).

2.4.2 FDR curves

The FDR can be controlled by modulating the E—value threshold
used to filter potential domains. To construct the FDR curve, we
followed the method in Ochoa et al. (2011). Namely, we consider
several input sets of domain hits produced by HMMER 3.0 with a
threshold < M, for different E—value thresholds M. Then we run
each tool on each set and compute FDR and number of domains
per protein for the resulting sets of architectures. This calculation
allows the construction of the curves in the figure. Best performing
methods present higher curves. In each plot, the FDR curves of all
methods were computed by using the same set of shuffled
sequences.

2.4.3 FDR over domain architectures

The FDR over domain architectures estimates the probability of de—
tecting co—occurrent domains by chance. Given the list of known
architectures, a set of validated domains (obtained by applying
hmmscan with restrictive thresholds) and a set of potential domains
(i.e. new domains detected by a tool with permissive threshold),

ﬁm'srcumol‘pquo'sopcuuowtotq/ﬁdnq

Fig. i
Terrapon et [11. (2009) Fig. 1
Fig. i
Yeats et [11. (2010)

Ochoa et [11. (2011)

—_ o o o
— - O O O O
— _ -_

- _ ---

- _ - _ -
«u «o «o
“'9 one «u
«o no. «u

u 9'

/3.IO'S[BIIm0[p.IOJXO'SOIJEIIIJOJIIIOIq/ﬂdnq

Figure 1

Fig.

Marler and Arora, 2004

Fig. i

I

Waltz, 1967

Fig. 1

Figure 2

Figure 2

Figure 1

Figure 1

Figure l

Waltz, 1967

/3.IO'S[BIIm0[p.IOJXO'SOIJEIIIJOJIIIOIq/ﬂdnq

350

J. S. Bernardes et al.

 

In practice, the algorithm starts with the set of architectures
£0 : U and maximizes the list of objective functions, one after the
other, by selecting, after the optimization of the first / functions, a
set of optimal architectures £y+1 C Q satisfying the (/+ 1)th func—
tion. Such optimal architectures are required to satisfy all / objective
functions evaluated until that point, up to some tolerance constant.
The final selected architecture is the one that satisfies all opti—
mization functions (Fig. 1F).

The algorithm returns a single architecture as the best one. In
case multiple architectures happen to maximize F 5, they will all be
provided as best solutions.

4 Results

We evaluated the performance of DAMA on two datasets: a bench—
mark containing multi—domain proteins and the genome of the mal—
aria parasite P. falciparum. The PDB benchmark was proposed in
Yeats et al. (2010) to measure the performance of the MDA ap—
proach, and we used it to compare DAMA and MDA (Section 4.1).
This benchmark is useful for optimizing parameters and evaluate the
robustness of the algorithm, but it does not constitute a realistic case
study, made of a large set of highly divergent sequences, as often en—
countered in the annotation of new genomes. To address these diffi—
culties, we considered the set of P. falciparum proteins, known to be
hard to annotate and we compared the performance of DAMA,
MDA, dPUC and CODD on its domain annotation (Section 4.2).

4.1 The PDB benchmark

The PDB benchmark contains only multi—domain proteins extracted
from the PDB (see Section 2) and was proposed to measure the per—
formance of MDA (Yeats et al., 2010). We have reproduced the same
experiment and compared DAMA with MDA. Table 1 lists precision,
recall and F—measure for DAMA and MDA on the PDB benchmark.
Both tools present high accuracy being DAMA slightly better. The
table also shows the number of true positives, false positives, false
negatives and semi—false positives obtained for each tool. Semi—false
positives are additional domains that were detected by DAMA or
MDA and that belong to the same CATH superfamilies. DAMA
seems to be more permissive than MDA detecting more true positives
and a high number of semi—false positives. The high accuracy obtained
by both methods is due to the high similarity between the query se—
quences and the seed sequences used to construct CATH models. In
fact, we expect each domain in a query sequence to be identified by a
model constructed from close sequences, since query sequences and
CATH superfamilies are both extracted from the PDB.

4.2 Annotation of the P. falciparum proteins

To account for a realistic dataset, made of a large pool of highly di—
vergent sequences, we tested DAMA, MDA and two more available
tools, CODD (Terrapon et al., 2009) and dPUC (Ochoa et al.,
2011), on the P. falciparum genome. Since we do not know the exact
number of domains present in proteins of P. falciparum, it is not pos—
sible to measure the rate of true positives, false positives and false
negatives for computing standard measures (precision, recall and F—
measure) as done for the PDB benchmark. However, we can esti—
mate the proportion of false positives, i.e. the FDR, among domain
predictions obtained for P. falciparum and then plot the number of
domain predictions against the FDR at various thresholds. We have
computed the FDRs according to two different strategies, over do—
main predictions (Section 2.4.1) and over domain architecture pre—
dictions (Section 2.4.3). We expect the best methods to detect more

Table 1. Performance of MDA and DAMA on a PDB benchmark

 

 

Performance measures MDA DAMA
Precision 0.99 0.99
Recall 0.96 0.98
F measure 0.97 0.99
True positives 5914 6044
False positives 25 52
Semi-false positives 67 1030
False negatives 262 132

 

domains at the same ‘noise” level and with ‘noise” increase. The dis—
tribution of the number of domains per protein of the P. falciparum
sequences is reported in Supplementary Figure 51, where most of the
sequences have no domain or one domain.

The first strategy computes the FDR as the ratio between predic—
tions obtained on shuffled sequences concatenated to real sequences
and predictions obtained on real sequences only. Shuffled sequences
were generated according to two different hypotheses both preserv—
ing the same amino—acids composition of the original sequence. The
first hypothesis, named 1—mer, reshuffles all amino—acid positions in
a sequence, while the second one reshuffles consecutive 4—mers in a
sequence. Figure 3A shows that DAMA predicts more domains over
a large range of FDRs for both the 1—mer (Fig. 3A, left) and the
4—mer (Fig. 3A, right) hypotheses than the other tools. Note that
dPUC outperforms MDA on 1—mer, while on 4—mer the opposite
holds. This is due to MDA better handling of false positives (see le—
gend of Supplementary Fig. S6AB). CODD displays a stable behav—
ior on both cases, but its performance remains poor. We also report
hmmscan behavior and its poor results are due to the fact that over
Pfam, it adopts a Pfam curated ‘gathering” threshold (GA) cutoff to
control the rate of false positives (see Section 2.5). (See
Supplementary Fig. S6 for an alternative evaluation strategy recon—
firming DAMA behavior.)

The second strategy measures the FDR over domain architec—
tures by computing the probability of obtaining them randomly. For
this, we assume that the architectures provided by hmmscan are the
true ones. (As highlighted above, hmmscan uses restrictive domain—
dependent thresholds guaranteeing a low false—positive rate.)
Therefore, domains in an annotated protein sequence are split into
two groups: domains assigned by hmmscan (true domains) and do—
mains detected by another tool (potential domains). We randomly
permute the potential domains of all proteins preserving the number
of domains in each protein. Then, the FDR is the number of certified
random domains over the number of certified true domains, where a
certified domain is a potential domain that co—occurs with a true do—
main according to the list of known architectures (see details of
FDR computation in Section 2.4.3). It is noteworthy to say that al—
though the shuffling leads to ‘random” contexts, the nature of this
FDR definition might disadvantage methods that use domain scores
in picking a best set of domains (including DAMA and dPUC) as
opposed to just considering contexts (such as CODD). However, as
shown in Figure 3B, DAMA predicts more certified domains than
the other tools for the same FDR value. Also, note that MDA, a
method that does not explore domain co—occurrence, achieves a bet—
ter performance than dPUC and CODD.

We verified whether DAMA detects architectures having more
co—occurrent domains than other tools. For this and for a given
FDR, we have computed the number of proteins having 2, 3, 4 and
at least 5 co—occurrent domains. Figure 3C shows the number of
proteins having co—occurrents domains at FDR : 2e—4 for 1—mer

ﬁm'srcumol‘pquo'sopcuuowtotq/ﬁdnq

Fig. 3
Figure 4
Fig. 4
Fig. 4
S2

Fig. 4

Fig. 3

Figure 3

Supplementary Fig.

M

II - Ill .l «I _JI

Supplementary Fig. S3c d
Supplementary
Fig. 3g h
Supplementary Fig. S3e f
Supplementary Fig. 83g h

Basu et al., 2008 Weiner et al., 2008

Supplementary Figure 83a b

Supplementary Figure 83a b

/3.IO'S[EIIm0[p.IOJXO'SOIJEIIIJOJIIIOIq”Zduq

2005

Figure3

Moore at al., 2013

Supplementary Figure 55

Table 2

Table 2

Supplementary Figure S4
at al., 2011

Yeats at al., 2010

Pasek (#211,, 2006

Yeats (#211,, 2010

Bjorklund at al.,

Ochoa

/3.IO'S[BIIm0[p.IOJXO'SOIJEIIIJOJIIIOIq/ﬂdnq

Domain architectures

353

 

dataset that we constructed from P. falciparum sequences, allowed
to verify again that DAMA performs the best followed by MDA.
The difference between MDA and DAMA with CODD and dPUC is
striking, especially when considering the high number of domains
certified by the tools.

New improvements, leading to a higher accuracy, might be
envisageable by looking at specific failures of DAMA, by replacing
some of the optimization functions F, with some alternative defin—
ition, by redefining tolerance parameters 5, as functions of specific
architecture characteristics (as the number of domains) or by inte—
grating other architecture characteristics like the high frequency of
certain pairs of domains that was ignored in this version of the tool.

Acknowledgements

We thank A. Ochoa and N. Terrapon, authors of dPUC and CODD, for hav-
ing made accessible to us their implementations (for use with Pfam27) and for
their help in running the tools. We thank the referees for making very insight-
ful suggestions and remarks. Experiments were carried out using the comput-
ing grid Grid’5000 (https://www.grid5000.fr) and the UPMC MESU machine
(ANR-lO-EQPX—29—01).

Funding

This work was undertaken (partially) in the framework of CALSIMLAB, sup-
ported by the public grant ANR-ll-LABX-0037-0 from the ‘Investissements
d’Avenir’ program (ANR-ll-IDEX-0004-02) (to A.C. and ].S.B.); Institut
Universitaire de France (A.C.) and Brazilian National Research Agencies
CNPq, CAPES, FAPER] and FACEPE (to F.R.].V. and G.Z.).

Conﬂict of Interest: none declared.

References

Apic,G. et al. (2001) Domain combinations in archaeal, eubacterial and eu—
karyotic proteomes. ]. Mol. Biol., 310, 311—325.

Aurrecoechea,C. et al. (2009) PlasmoDB: a functional genomic database for
malaria parasites. Nucleic Acids Res., 37, D539—D543.

Bah1,A. et al. (2003) PlasmoDB: the Plasmodium genome resource. A database
integrating experimental and computational data. Nucleic Acids Res., 31,
212—215.

Basu,M. et al. (2008) Evolution of protein domain promiscuity in eukaryotes.
Genome Res., 18, 449—461.

Bjorklund,A. et al. (2005) Domain rearrangements in protein evolution.
]. MOl. Biol, 353, 911—923.

Coin,L. et al. (2003) Enhanced protein domain discovery by using language
modeling techniques from speech recognition. Proc. Natl Acad. Sci. U S A,
100, 4516—4520.

Eddy,S. (1998) Proﬁle hidden Markov models. Bioinformatics, 14, 755—763.

Eddy,S.R. (2011) Accelerated proﬁle HMM searches. PLoS Comp. Biol., 7,
e1002195.

Finn,R. et al. (2010) The Pfam protein families database. Nucleic Acids Res.,
38, D211—D222.

Geer,L. et al. (2002) CDART: Protein homology by domain architecture.
Genome Res., 12, 1619—1623.

Leinonen,R. et al. (2004) Uniprot archive. Bioinformatics, 20, 3236—3237.

Marcotte,E. et al. (1999) Detecting protein function and protein-protein inter-
actions from genome sequences. Science, 285, 751—753.

Marler,R. and Arora,]. (2004) Survey of multi-objective optimization methods
for engineering. Struct. Multidiscip. Optimization, 26, 369—395.

Moore,A. et al (2008) Arrangements in the modular evolution of proteins.
Trends Biochem. Sci., 33, 444—451.

Moore,A. et al. (2013) Quantiﬁcation and functional analysis of modular pro-
tein evolution in a dense phylogenetic tree. Biochim. Biophys. Acta, 1834,
898—907.

Murzin,A.G. et al. (1995) SCOP: a structural classiﬁcation of proteins data-
base for the investigation of sequences and structures. ]. Mol. Biol., 247,
5 36—540.

Ochoa,A. et al. (2011) Using context to improve protein domain identiﬁca-
tion. BMC Bioinformatics, 12, 90.

Pasek,S. et al. (2006) Gene fusion/ﬁssion is a major contributor to evolution of
multi—domain bacterial proteins. Bioinformatics, 22, 1418—1423.

Sigrist,C.J.A. et al. (2013) New and continuing developments at prosite.
Nucleic Acids Res., 41, D344—D347.

Sillitoe,I. et al. (2013) New functional families (funfams) in cath to improve
the mapping of Conserved functional sites to 3D structures. Nucleic Acids
Res., 41, D490—D498.

Terrapon,N. et al. (2009) Detection of new protein domains using co-
occurrence: application to Plasmodium falciparum. Bioinformatics, 25,
3077—3083.

Vogel,C. et al. (2004) Supra-domains: evolutionary units larger than single
protein domains. ]. Mol. Biol., 336, 809—823.

Waltz,F. (1967) An engineering approach: hierarchical optimization criteria.
IEEE Trans. Autom. Control, 12, 179180.

Weiner,]. et al. (2008) Just how versatile are domains? BMC Evol. Biol., 8,
285.

Wuchty,S. and Almaas,E. (2005) Evolutionary cores of domain co-occurrence
networks. BMC Evol. Biol., 5, 24.

Xia,Q. et al. (2005) Silkdb: a knowledgebase for silkworm biology and gen-
omics. Nucleic Acids Res., 33, D399—D402.

Yeats,C. et al. (2010) A fast and automated solution for accurately resolving
protein domain architectures. Bioinformatics, 26, 745—75 1.

ﬁm'srcumol‘pquo'sopcuuowtotq/ﬁdnq

