APPLICATIONS NOTE

Vol. 29 no. 8 2013, pages 1089—1091
doi:10. 1093/bioinformatics/bttOS5

 

Systems biology

Advance Access publication February 17, 2013

Nozzle: a report generation toolkit for data analysis pipelines
Nils Gehlenborgl‘z, Michael S. Noblez, Gad Getzz, Lynda Chin2‘3 and Peter J. Park”

1Center for Biomedical Informatics, Harvard Medical School, Boston, MA 02115, USA, 2Cancer Program, Broad
Institute, Cambridge, MA 02142, USA and 3Department of Genomic Medicine, MD Anderson Cancer Center, Houston,

TX 77230, USA
Associate Editor: Martin Bishop

 

ABSTRACT

Summary: We have developed Nozzle, an R package that provides an
Application Programming Interface to generate HTML reports with
dynamic user interface elements. Nozzle was designed to facilitate
summarization and rapid browsing of complex results in data analysis
pipelines where multiple analyses are performed frequently on big
datasets. The package can be applied to any project where
user-friendly reports need to be created.

Availability: The R package is available on CRAN at http://cran.r-
project.org/package=NozzIe.R1. Examples and additional materials
are available at http://gdac.broadinstitute.org/nozzIe. The source
code is also available at http://www.github.com/park|ab/Nozzle.
Contact: peter _park@hms.harvard.edu

Supplementary information: Supplementary data are available at
Bioinformatics online.

Received on January 10, 2013; revised on February 10, 2013;
accepted on February 13, 2013

1 INTRODUCTION

Owing to the increasing size and complexity of biological data, a
considerable portion of bioinformatics analyses are implemented
as (semi-)automated pipelines. The main task of these pipelines is
to control the flow of large datasets through a series of analysis
modules, which are often independent applications. These ana-
lyses typically need to be performed repeatedly over time as data
are accumulated gradually. GenePattern (Reich et al., 2006),
Galaxy (Goecks et al., 2010) and Taverna (Hull et al., 2006)
are popular workﬁow management systems used to implement
such pipelines for high-throughput analysis of genomics data.
Another common approach is to use shell scripting to tie to-
gether different tools into an analysis pipeline. Although pipe-
lines greatly reduce the effort required to apply different
algorithms to large datasets, they often result in a multitude of
ﬁgures, lists and tables at varying levels of detail. This presents
significant challenges for the biologists who must sift through a
large amount of information to identify potentially interesting
ﬁndings. In the use case we describe, each run of the pipeline
results in more than 11 000 figures and tables. In some cases, this
problem can be addressed by feeding these results into a database
with a dynamic query interface. Although databases are capable
of supporting powerful exploration tools and interactive Visual-
izations, their development and maintenance require a significant
investment of resources and their data model is less ﬂexible than

 

*To whom correspondence should be addressed.

reports. This is particularly problematic when the tools in the
pipeline are replaced as requirements change. Alternatively, the
results can be summarized in reports. Several R libraries exist
that can be used to generate reports for analysis pipelines.
R2HTML (Lecoutre, 2003) and hwriter (http://cran.r-project.
org/packagezhwriter) are low-level libraries for writing HTML
ﬁles. Sweave (Leisch, 2002), knitr Oiie, 2012) and related tools
for reproducible research can be used to generate PDF or
HTML documents from within R scripts. However, none of
these tools provide support in generating reports with dynamic
user interface components for the presentation of extensive and
complex analysis results. To address these limitations, we have
developed the Nozzle R package, which supports pipeline devel-
opers in creating comprehensive and user-friendly HTML re-
ports to describe the results of analysis pipelines.

2 NOZZLE REPORTS

Nozzle reports are generated bottom-up (Fig. l): in Phase 1
report elements are generated, e.g. a table and a paragraph of
text, in Phase 2 they are assembled into larger structures, e. g. the
table and the paragraph are added to a titled section, which is
added to the report, and in Phase 3 the report is rendered into
HTML.

The guiding principle for the design of the Nozzle package is
to enable report authorsiusually pipeline developersito focus
on the content rather than on the layout or generation of the
report. We achieve this through the high-level R Application
Programming Interface (API) that enables authors to create
report elements such as ﬁgures, tables, paragraphs of text, bib-
liographic or web references, lists, sections and subsections using
regular R commands without knowledge of the technologies
used for the presentation of the final report.

Nozzle reports provide a rich user interface (Fig. 2). All ﬁgures
support dynamic switching between a thumbnail View and a
detail View. They also have a caption and can be linked to a
high-resolution or PDF version of the figure. All tables are
sortable and support automatic trimming of floating point num-
bers to a user-deﬁned number of signiﬁcant digits. Tables also
include a caption and can be linked to external ﬁles that contain
additional information. Text and the content of table cells can be
marked up semantically using the Nozzle-speciﬁc ‘result’ style as
well as common styles such as ‘parameter’, ‘link’ or simply ‘em-
phasis’. The ‘result’ markup indicates that the corresponding text
represents an analysis result (Fig. 2b). When a result is ﬂagged as
signiﬁcant, Nozzle uses this information to guide readers to

 

© The Author 2013. Published by Oxford University Press. All rights resen/ed. For Permissions, please e—mail: journals.permissions@oup.com 1089

112 /310'S[BIIJHO[pJOJXO'SOIJ’BLUJOJIIIOICI”Idllq 11101} papaolumoq

91oz ‘Og anﬁnV uo ::

N.Gehlenborg et al.

 

 

Phase 1: create report elements

r <— newCustomReportC “My Report" D;

s <— newSectionC "My Section" D;

ssl <— newSectionC "My Subsection 1" D;

552 <— newSectionC "My Subsection 2" D;

t <— newTable( iris[45:55,], "Iris data." D;
p <— newParagraphC "Some sample text." D;

 

 

Phase 2: assemble report structure bottom-up

ssl <— addTo( ssl, t D; # parent, ChildJ,  chiidm
552 <— addTo( 552, p D;

s <— addTo( s, ssl, 552 D;

r' <— addTo( r', s D;

 

 

Phase 3: render report to file
writeRepor‘tC r', filename="my_r‘eport" D; # w/o extension

 

 

 

Fig. 1. Sample R script to create a basic Nozzle report that illustrates the
three phases of the bottom-up approach. See Supplementary Figure SI
for the HTML report

.- "n “nae-“mm...—--..,.........,..-.»m-
me. ...muhn - o

Gliablaatama Multlforme: Copy number anatyals {661102)
- Overview

.  "3

ram mm 1mm  33mm: unn-IUWIWIIIIB. Maicniﬁun: Iurll'lxmﬁﬁrulimu ".446

mnimmrn—wmi esults

   

 

Results

 

mum. rammwmum ,
IMImIl} mam...» Mmmm «Mama-mm“. Dunn—3y.

 

L4" '—
791112 I

INN-l uﬁuullﬂr Mxisnirunurmnu.unrw.‘c1mlxl.4ixu I “A menu
In... mu m" uni-ma wiIIL-I u.- was. ammu- Wlni

 

 

 

41112 Lybhnl um": mauled... mid-mum ll'-u
Mn n n ,s:yw;.:ymm nILUI'R
n~||l \wm mow-us mnmww—aamw- (I
a: “mu—mu Jumbo-nu rut‘ww’d-Wmma

 

 

mm. truck-I: .mnmu rm.wwwulwvun

 

' Gone: .r. win. Dun
Mulbempldlmlunollmgllﬂldmulnﬂxmdewlfur uqu... a

I Iihleah 0::InhllurulﬁulﬂI*hlulhmswrIIIlEI'JIK'IIkMICurtIn-nnfil.
Fig. 2. A sample Nozzle report. (a) Red markers indicate statistically
signiﬁcantias deﬁned by the report authoriresults in this section. (b)
Red boxes indicate signiﬁcant results. (c) Underlined results have asso-
ciated supplementary information. Choking opens the ((1) Supplementary
Information panel

sections containing signiﬁcant results by highlighting the corres-
ponding section (Fig. 2a). This is particularly useful in compre-
hensive reports with many sections or in situations when readers
must frequently review large numbers of reports and would like
to focus first on significant ﬁndings.

Results can also be linked to Supplementary Information
(Fig. 2c and d), which may contain any report elements including
sections, figures and tables. These are shown on demand using a
split-screen approach, allowing the readers to View main results
and Supplementary Information side by side. This is a powerful

tool for creating reports that focus on the key ﬁndings while still
providing access to more detailed information.

3 RAPI

R was chosen over other programming languages for the Nozzle
API owing to its large user base and high popularity among
practitioners in the computational biology and bioinformatics
communities. Many biological data analysis pipelines contain
components implemented in R, making integration of the
Nozzle library straightforward.

The Nozzle R API was intentionally kept simple with only
four key classes of methods: constructor (e.g. newFigure,
newSection) and formatter methods (e.g. asResuZt, asParameter)
to create and format content during the first phase, assembly
methods (e. g. addTo, addToResuZts) to combine elements
during the second phase and finally a single writeReport
method to render the assembled report in the third phase.
Additionally, Nozzle provides a set of advanced features that
give developers more control over the content and structure of
reports. For example, the API contains several setter/getter
methods to modify parameters of the report, e.g. maintainer or
copyright information, logos or Google Analytics tracking iden-
tiﬁers. Report authors may also overwrite the default report
styles such as fonts and colors by providing a Cascading Style
Sheets (CSS) ﬁle. Furthermore, developers can define the Visibil-
ity of report elements using three privacy levels (private, group
and public) and exclude pertinent sections in the final report by
providing a corresponding Visibility ﬂag when rendering to
HTML. This feature allows developers to easily censor sensitive
information in public reports.

4 IMPLEMENTATION

Nozzle works with R 2.10 or later. Internally, reports are repre-
sented as a tree of report elements and implemented as nested R
list objects. These lists are rendered into HTML files that include
a set of JavaScript functions to support dynamic features of the
user interface. For this purpose, JQuery (http://www.jquery.com)
and the J query Table Sorter plugin (http://www.tablesorter.com)
are embedded, making Nozzle reports independent of external
library files. Likewise, default CSS deﬁnitions are embedded in
the HTML and used for layout and styling of the reports. The
reports are compatible with Firefox 4+, Chrome 12+, Safari 5+,
Opera 11+ and Internet Explorer 9+.

5 USE CASE: THE CANCER GENOME ATLAS

We have deployed Nozzle in the context of the Firehose pipeline
management system developed at the Broad Institute (http://
gdac.broadinstitute.org). Firehose is used for comprehensive
automated and reproducible analyses of the data generated by
The Cancer Genome Atlas (TCGA; http://cancergenome.nih.
gov). In December 2012, the analysis workﬂow comprised ap-
proximately 35 different modules. They cover a wide range of
analyses on different data types, including clustering of messen-
ger RNA, microRNA and methylation data, copy number ana-
lysis with GISTIC 2.0 (Mermel et al., 2011), mutation analysis,
correlation analyses between clinical and various molecular data,

 

1090

112 /310'S[BHJHOIPJOJXO'SOIJ’BLUJOJIIIOICI”Idllq 11101} papBOIII/IAOG

91oz ‘Og anﬁnV uo ::

Nozzle

 

as well as pathway analyses. In this project, a team of 10 software
developers and computational biologists from four institutions
(Broad Institute, Dana-Farber Cancer Institute, Harvard
Medical School and Institute for Systems Biology) used Nozzle
to implement reports for individual pipelines. The complete ana-
lysis workﬂow is currently run once per month for each of 27
disease cohorts studied in TCGA, generating close to 500 re-
ports. These reports are publicly available on the website of
the TCGA Genome Data Analysis Center (GDAC) at the
Broad Institute (see above URL) and archived by the TCGA
Data Coordination Center. Between 1 February 2012 and 31
December 2012, more than 2700 Viewers have accessed more
than 17 000 reports in approximately 6000 Visits.

ACKNOWLEDGEMENTS

We thank Dan DiCara, Lihua Zou, Douglas Voet and the mem-
bers of the TCGA GDAC at the Broad Institute for helpful
comments.

Funding: The Cancer Genome Atlas program of the National
Cancer Institute, U24 CA143867.

Conflict of Interest: None declared.

REFERENCES

Goecks,J. et a]. (2010) Galaxy: a comprehensive approach for supporting accessible,
reproducible, and transparent computational research in the life sciences.
Genome Biol., 11, R86.

Hu11,D. et a]. (2006) Taverna: a tool for building and running workﬂows of services.
Nucleic Acids Res., 34, W7297W732.

Lecoutre,E. (2003) The R2HTML Package. R News, 3, 33736.

Leisch,F. (2002) Sweave: dynamic generation of statistical reports using literate data
analysis. In: Hardle,W. and R6nz,B. (eds) Compstat 20027Pr0ceedings in
Computational Statistics. Physica Verlag, Heidelberg, Germany, pp. 5757580.

Mermel,C.H. et a]. (2011) GISTIC2.0 facilitates sensitive and conﬁdent localization
of the targets of focal somatic copy—number alteration in human cancers.
Genome Biol., 12, R41.

Reich,M. et a]. (2006) GenePattern 2.0. Nat. Genet, 38, 50(P501.

Xie,Y. (2012) Making reproducible research enjoyable. ICSA Bull, 24, 8%90.

 

1091

112 /310's112u1n0fp10}x0"sotwuuoiutotq/ﬁduq 11101} papeolumoq

9103 ‘Og isnﬁnV uo ::

