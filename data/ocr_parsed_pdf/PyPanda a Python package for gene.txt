Bioinformatics, 2016, 1—3

doi: 10.1093/bioinformatics/btw422

Advance Access Publication Date: 10 July 2016
Applications Note

 

 

Systems biology

PyPanda: a Python package for gene regulatory

network reconstruction

David G.P. van lJzendoorn1, Kimberly Glassz, John Quackenbus

3,4,*

and Marieke L. Kuijjer

h3,4,5

1Department of Pathology, Leiden University Medical Center, 2300RC Leiden, The Netherlands, 2Channing Division
of Network Medicine, Department of Medicine, Brigham and Women's Hospital, Harvard Medical School, Boston,
MA 02215, USA, 3Department of Biostatistics and Computational Biology, Dana-Farber Cancer Institute, Boston,
MA 02215, USA, 4Department of Biostatistics, Harvard T.H. Chan School of Public Health, Boston, MA 02215, USA
and 5Department of Cancer Biology, Dana-Farber Cancer Institute, Boston, MA 02215, USA

*To whom correspondence should be addressed.
Associate Editor: Jonathan Wren

Received on May 3, 2016; revised on June 13, 2016; accepted on June 27,2016

Abstract

Summary: PANDA (Passing Attributes between Networks for Data Assimilation) is a gene regula—
tory network inference method that uses message—passing to integrate multiple sources of ’omics
data. PANDA was originally coded in C++. In this application note we describe PyPanda, the
Python version of PANDA. PyPanda runs considerably faster than the C++ version and includes

additional features for network analysis.

Availability and implementation: The open source PyPanda Python package is freely available at

http://github.com/davidvi/pypa nda.

Contact: mkuijjer@jimmy.harvard.edu or d.g.p.van7ijzendoorn@lumc.nl

 

1 Introduction

Accurately inferring gene regulatory networks is one of the most im-
portant challenges in the analysis of gene expression data. Although
many methods have been proposed (Altay et (11., 2011; Ernst et (11.,
2008; Faith et (11., 2007; Lemmens et (11., 2006), computation time
has been a significant limiting factor in their widespread use.
PANDA (Passing Attributes between Networks for Data
Assimilation) is a gene regulatory network inference method that
uses message passing between multiple ‘omics data types to infer the
network of interactions most consistent with the underlying data
(Glass et (11., 2013). PANDA has been applied to understand tran-
scriptional programs in a variety of systems (Glass et (11., 2014,
2015b; Lao et (11., 2015).

Here we introduce PyPanda, a Python implementation of the
PANDA algorithm, following the approach taken in Glass et al.
(2015a) and optimized for matrix operations using NumPy (van
der Walt et (11., 2011). This approach enables the use of fast matrix
multiplications using the BLAS and LAPACK functions, thereby
significantly decreasing run-time for network prediction compared

(63 The Author 2016. Published by Oxford University Press.

with the original implementation of PANDA, which was coded in
C ++ and used for-loops (Glass et 111., 20153). We observe further
speed increase over the C ++-code because PyPanda automatically
uses multiple processor-cores through the NumPy library. We have
also expanded PyPanda to include common downstream analyses
of PANDA networks, including the calculation of network in- and
out-degrees and the estimation of single-sample networks using the
recently developed LIONESS algorithm (Kuijjer et (11., 2015).

2 Approach

2.1 Comparing PANDA C ++—code to Python—code

We compared the C ++-code and Python-code versions of PANDA
using several metrics. First, we assessed the two implementations by
comparing the number of lines of code. Using the doc utility we
counted the number of lines of C++-code and Python-code. The
C++-code counted 1132 lines of code. The Python-code counted
258 lines of code, significantly shorter (4.4 times) than the
C++-code. The Python-code also includes features such as the

1

This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/Iicenses/by/4.0/), which permits
unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.

/310‘slcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

2015a

H C++-code
o o Python—code

Glass (7/ 11/. (2015.1

Fig. 1A

 

Fig. 1B

(7/ 111., 2015

Glass (71111., 2014

Kuiiicr

/310'SIBan0[pJOJx0"sotJBuiJOJutotqﬂ:duq

Pypanda: a package for regulatory network reconstruction

 

References

Altay,G. et al. (2011) Differential c3net reveals disease networks of direct
physical interactions. BMC Bioinformatics, 12, 296.

Ernst,]. et al. (2008) A semi-supervised method for predicting transcription
factor—gene interactions in escherichia coli. PLOS Compnt. Biol., 4,
e1000044.

Faith,].]. et al. (2007) Large-scale mapping and validation of escherichia coli
transcriptional regulation from a compendium of expression proﬁles. PLOS
Biol., 5, e8.

Glass,K. et al. (2013) Passing messages between biological networks to reﬁne
predicted interactions. P105 One, 8, e64832.

Glass,K. et al. (2014) Sexually-dimorphic targeting of functionally-related
genes in copd. BMC Syst. 3101., 8, 118.

Glass,K. et al. (2015a). High performance computing of gene regulatory net-
works using a message-passing model. High Performance Extreme
Computing Conference (HPEC), 2015 IEEE, 1—6.

Glass,K. et al. (2015b) A network model for angiogenesis in ovarian cancer.
BMC Bioinformatics, 16, 115.

Kuijjer,M.L. et al. (2015) Estimating sample-speciﬁc regulatory networks.
arXiU, preprint 1505.06440.

Lao,T. et al. (2015) Haploinsufﬁciency of hedgehog interacting protein causes
increased emphysema induced by cigarette smoke through network rewir-
ing. Genome Med., 7, 12.

Lemmens,K. et al. (2006) Inferring transcriptional modules from chip-chip,
motif and microarray data. Genome 3101., 7, R37.

van der Walt,S. et al. (2011) The numpy array: a structure for efﬁcient numer-
ical computation. Comput. Sci. Eng., 13, 22—30.

/810'sleum0fp103x0"sotJBuIJOJutotqﬂ:duq

