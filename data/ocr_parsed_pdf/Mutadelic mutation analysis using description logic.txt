Bioinformatics, 31123), 2015, 3742—3747

doi: 10.1093/bioinformatics/btv467

Advance Access Publication Date: 12 August 2015
Original Paper

 

Genome analysis

Mutadelic: mutation analysis using description
logic inferencing capabilities
Matthew E. Holford1 and Michael Krauthammer1'2'*

1Program in Computational Biology and Bioinformatics and 2Department of Pathology, Yale University School of
Medicine, New Haven, CT, USA

*To whom correspondence should be addressed.
Associate Editor: John Hancock

Received on September 30, 2014; revised on July 31, 2015; accepted on August 4, 2015

Abstract

Motivation: As next generation sequencing gains a foothold in clinical genetics, there is a need for
annotation tools to characterize increasing amounts of patient variant data for identifying clinically
relevant mutations. While existing informatics tools provide efficient bulk variant annotations, they
often generate excess information that may limit their scalability.

Results: We propose an alternative solution based on description logic inferencing to generate
workflows that produce only those annotations that will contribute to the interpretation of each
variant. Workflows are dynamically generated using a novel abductive reasoning framework called
a basic framework for abductive workflow generation (AbFab). Criteria for identifying disease—
causing variants in Mendelian blood disorders were identified and implemented as AbFab services.
A web application was built allowing users to run workflows generated from the criteria to analyze
genomic variants. Significant variants are flagged and explanations provided for why they match
or fail to match the criteria.

Availability and implementation: The Mutadelic web application is available for use at http://

 

krauthammerlab.med.yale.edu/mutadelic.
Contact: michael.krauthammer@yale.edu

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

Distinguishing harmful from benign variants in clinical exome or
whole genome sequencing is comprised of two steps: Variant anno-
tation and interpretation. Annotation involves the labeling of vari-
ants with diverse features, including population frequencies and
effect on amino acid composition, which then guide interpretation
for finding variants with damaging effect on protein function (what
we call variant prioritization).

There are several annotation systems that assist medical geneti-
cists in the prioritization of a patients variants. Some of the existing
systems, including Annovar and VAX (Wang et (11., 2010; Yourshaw
et (11., 2014), can accommodate custom annotations for guiding
a geneticists decision process. As most annotations can be pre-
computed and efficiently retrieved, these systems can rapidly anno-
tate most or all variants in a human genome.

While these existing systems are an invaluable tool for medical
geneticists, they do have some shortcomings. First, they do not ad-
dress the need to accommodate several variant filters based on dis-
ease-, and often expert-dependent interpretation rules. Second, as
some annotations cannot be easily pre-computed, like complex
Indels, or substrate binding properties, the computational cost of
generating annotation for all observed variants is high. Third, as the
number of annotations increases, storing the complete set of annota-
tions for all variants is progressively costly. Fourth, as data resources
are changing over time, there is a need to recompute the entire set of
variants for retrieving the most current annotations. Fifth, there is
little emphasis on using standards or provenance when generating
variant annotations.

What we propose in this article is a fresh look at how we per-
form variant prioritization. Rather than annotating all observed

(63 The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 3742

/310‘srcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

Figure l

SiftAnnotatedVariant

_ is_described_by
Variant I
An notatlon

has_locus is m°de"9d by refers_to

 

/8.IO'S[BIImOFp.IOJXO'SOtJBLUJOJIItth/ﬂdnq

Figure 2

SERVICE

SERVICE

@@
C)
C)

SERVICE

@113.

(j

SERVICE

1313.-

(:

 

INPUT

INPUT
fact1 (prowl)

 

INPUT

fact1 (prov‘l)
fact2 (prov2)

INPUT

fact‘l (prov1)
fact2 (prov2)
fact3 (prov3)

 

GOAL OUTPUT

Figure 3

SERVICE

@1 @
C)

SERVICE
.@ (Q
C)

CDC)

   

INPUT INPUT
fact1 (prov1) factz (prov2)

INPUT

fact1 prov1
fact2 prov2
facl3

 

p rov3

GOAL OUTPUT

 

SERVICE

@@

C)
C)

INPUT

factS (prov3)

 

INPUT

SERVICE

[3 [Q

 

 """""" "
C)

INPUT INPUT

fact1 (prov1) faCtZ (prov2)

SERVICE

@113
C:

SERVICE

C)

GOAL OUTPUT

 

/310'S[BHm0[pJOJXO'SOIJBIIIJOJIIIOIq/ﬂdnq

Mutadelic

3745

 

versions we wish to implement cost values that are dynamically as—
signed based on input to the service. Another type of case is one in
which multiple Services are capable of fulfilling a goal criteria.
Suppose, for example, that an arbitrary ServiceA consumes more re—
sources but yields more precise or reliable results than a less costly
version, ServiceB. It may be preferable in some cases to prefer the ac—
curacy of ServiceA and in others the speed of ServiceB. The inclusion
of a quality metric to the cost function is an area of future research.
In the execution phase, the initial input IndividualPlus is passed
down the chain of services, acquiring axioms from each step as it
goes. At each level, the IndividualPlus is tested using consistency
checking to make sure that it matches the criteria to continue and in
the case of a condition whether to attempt a different fork. Since DL
reasoner operations such as consistency checking are potentially
time—consuming and computationally expensive, a variety of opti—
mizations are made to keep AbFab performing efficiently. These 0p—
timizations are discussed in Supplementary Methods section.

2.4 Services for Mutadelic

A number of AbFab Services were defined in this project to corres—
pond with tasks commonly used for variant analysis. These include
Services which obtain Sift scores (measuring impact of a DNA vari—
ant on protein formation), PhyloP scores (measuring the level of evo—
lutionary conservation of a genomic region), allele frequencies
(measuring the rarity of a variant in healthy populations) and infor—
mation about critical protein domains obtained from the PFAM
database. Typically these services are written in Java and will ac—
quire the data from a local database and attach it to the set of OWL
axioms held by the input object. A large amount of data is required
locally for these services. For example, the PhyloP database assigns a
score to every base on the gene—coding regions of the chromosome.
The Sift database calculates scores for all nucleotide substitution
possibilities at each exonic position. We store these large collections
of data in MongoDB (http://www.mongodb.org), one of the better—
established of a number of ‘No—SQL’ databases that have recently
come into vogue. In MongoDB, data are stored in large document—
like structure rather than relational tables; schema are flexible and
dynamic. Data can be retrieved rapidly as it is stored in simple
indexed key—value pairs. We found the combination of performance
and flexibility offered by MongoDB to be ideal for our purposes.

3 Results

3.1 Mutadelic implementation

3.1.1 Motivation

The most notable disorders of red cell membranes in humans are
hereditary spherocytosis (HS), hereditary elliptocytosis (HE) and
hereditary pyropoikilocytosis (HPP). They are inherited disorders,
marked by genetic heterogeneity, that are linked to hemolytic an—
emia (Mohandas and Gallagher, 2008). HS is characterized by
erythrocytes that are spherical in shape rather than the expected
olive—shaped conformation (Perrotta et al., 2008). HS is a fairly
common disorder, especially among Northern European popula—
tions where it occurs in 1:1000—25 00 individuals. It most frequently
manifests itself in the form of mild to moderate anemia, although se—
vere anemia can occur in some cases. HS is characterized by muta—
tions in the following genes: ANK1 (ankyrin 1, erythrocytic),
SLC4A1 (solute carrier family 4, anion exchanger, member 1
[erythrocyte membrane protein band 3, Diego blood groupll, SPTB
(spectrin, beta, erythrocytic), SPTA1 [spectrin, alpha, erythrocytic 1
(elliptocytosis)] and EPB42 (erythrocyte membrane protein band

4.2). Of these five, mutations in ANK1 are most frequent, followed
by SLC4A1 and SPTB (Gallagher, 2004a). HE results in elongated,
cigar—shaped erythrocytes. It is most frequently asymptomatic but
will occasionally lead to mild or even severe anemia (Gallagher,
2004b). It is also fairly common (1:2000—4000), with higher inci—
dence in African populations (estimated as high as 1:100). HPP is
related to HE but is much more severe. It is characterized by large
numbers of fragmented and misshapen erythrocytes and results in
severe hemolytic anemia. Mutations in SPTA1, SPTB and EPB42 are
associated with HE and HPP, with SPT1 being the most frequent.
Most documented mutations modify the self—association regions of
spectrin proteins which causes damage to cell membrane structure
(Zhang et al., 2001).

3.1.2 Criteria
An initial test workflow was created which would prove useful for
the analysis of variants on a set of five genes associated with
Mendelian blood cell disorders. The workflow defines a potential
mutation as one that either (i) has been recognized as a disease—caus—
ing mutation by the Red Cell Membrane Disorder Mutations
Database (http:// research.nhgri.nih.gov/RBCmembrane) or (ii) is
extremely rare in healthy populations (<0.01 MAP) and either (a)
occurs at a splice site, (b) is considered severely damaging to the re—
sulting protein (<0.05 SIFT score), (c) occurs in a highly conserved
region (>1.0 PhyloP score) or (d) occurs in a region that codes for a
critical domain of the protein.

Specific services to perform these checks are implemented as (i)
)

TranscriptLocalSpliceService, (iib) PhylopConservedService, (iic)

KnownMutationService, (ii) VariantFrequencyRareService, (iia

SiftSevereService and (iid) InCriticaIDomainService. In addition, a
handful of services are required which perform prerequisite
tasks. For example, the Red Cell Mutations database identifies vari—
ants by position relative to the transcript rather than genomic pos—
ition so a preliminary conversion from genomic to transcript—based
position is required. This conversion is handled by the
AlignVariantService. AlignVariantService is also a prerequisite for
TranscriptLocalSpliceService. Each of PhylopConservedService,
SiftSevereService and InCriticaIDomainService need consider only
non—synonymous variants. Hence, a prerequisite service
(AAChangeNonSynonymous) is required. This in turn requires
the determination that a variant occurs in the protein—coding
region of a transcript. Again a prerequisite service
(TranscriptLocaleProteinCodingService) is required, which in turn
requires AlignVariantService as a prerequisite. Finally as part of the
optimization process, two marking services are generated by AbFab.
This process is discussed in detail in the Supplementary Methods
section. The first (MarkedUniqueVariantService) marks the disjunc—
tion of TranscriptLocaleSpliceService, PhylopConservedService,
SiftSevereService and InCriticaIDomainService; the second
(MarkedRareAndUniqueVariantService) marks the conjunction of
VariantFrequencyRareService and MarkedUniqueVariantService.
The full criteria for interesting variants is illustrated in Figure 4.

3.1.3 Web application

Mutadelic has a web application front end. A RESTful Web Service
(Fielding and Taylor, 2002) was implemented using (http://jersey.
java.net), a library implementing the Java JAX—RS standard. The fol—
lowing resources are defined: Users, Workflows, Inputs, Variants,
Outputs and AnnotatedVariants. Workﬂows define the criteria that
is used to determine whether a variant is significant. They are owned
by Users. Inputs are bound by a Workﬂow and hold the collection

ﬁle'spzumol‘pmJXO'sopeuuowtotq/ﬁdnq

Variant

AlignedVariant

AACharIgeNonSyrIonymous

)

ITranscriptLocaleSplice y
x _________ __/

VariantFrequencyRare

 

,_ _ _ _ _ _ _ __
I PhylopConserved
\ ________ __/

InterestingVariant

\ r
I

TranscriptLocaleProteinCoding

\ I ‘‘‘‘‘‘ “\
were; I‘lnCriticaIDomain)
________ __1

MarkedUnusualVariant

 

Fig. 5

ﬁtﬁdb
tﬂﬁﬁt
GGG

Zhao and Paschke, 2012
Kopecky et (11., 2007

Gil et 111.,

2010 2011 Oinn et 111., 2004

Deelman et (11., 2005

Sirin et (11., 2004

Nau et (11., 2003

Wilkinson et (11., 2010

[310‘SIIZIIIHOIPJOJXO‘SDDEIIIJOJIIIOIQ/[Zdllq

Mutadelic

37 47

 

AbFab, OWL classes with restrictions on input and output are used
to model services. The Semantic Health And Research Environment
(SHARE) SPARQL query client also functions by connecting ser—
vices to form a path of execution. Mutadelic/AbFab and SADI/
SHARE differ however in terms of their focus and their means of im—
plementing service paths. The focus of the SHARE is on answering
queries where data is spread out across multiple locations. AbFab
focuses instead on generation of workflows to process data where
services are defined locally. SHARE matches services based upon
whether execution of them adds the predicate requested by the query
to the KB (Vandervalk et al., 2009). AbFab uses consistency check—
ing to determine fulfillment of input and output constraints. This ap—
proach allows for more flexible matching and it does not require the
user to know the specifics of what triples services add to the KB.
The SHARE method requires that a step be executed before the next
step may be determined. AbFab generates the full path before execu—
tion, potentially saving considerable expense if a path to the goal cri—
teria cannot be reached. AbFab also offers the additional features of
a cost—based determination of optimal path and structures (Branches
and Conditions) to support complex paths. The ability to change
execution flow based upon runtime output allows AbFab to support
use cases beyond workflow generation, including decision trees and
the sort of query answering targeted by SADI/SHARE. Due to their
similar structure, it would be relatively straightforward to create
AbFab services that act as wrappers for SADI services.

The criteria used to highlight mutations of interest in Mutadelic
represents a single expert view on mutation prioritization within a
particular context, in this case Mendelian blood disorders. Different
criteria could be applied to the same context or criteria could be es—
tablished for different contexts, e.g. a different disease or family of
diseases. It is easy to imagine a scenario in which multiple criteria
co—exist. In such a scenario, researchers could compare different
methodologies for the same context or analyze patient data from
multiple contexts. To do so, we hope, in the near future, to provide
a U1 framework to allow users to define their own criteria to identify
significant variations. This would facilitate comparison of
approaches to variant prioritization. The challenge would be creat—
ing a user—friendly interface with the OWL representation of the 10—
gical constraints. This would be achieved using the current set of
defined services allowing for (i) modification of the faceted restric—
tions (e.g. changing significant SIFT value from 0.05 to 0.01) and
(ii) different combinations of conjunction, disjunction and negation
(AND, OR and NOT). Another optimization would be a frame—
work, either a U1 tool or an API for definition of new service classes.
Again, there is the challenge of hiding the complexity of OWL repre—
sentation from the user/developer.

5 Conclusion

This article describes a new variant annotation paradigm that is
based on the idea of generating the minimum necessary annotations
for reaching a diagnostically relevant conclusion. It is a departure
from existing solutions, which seek to annotate all observed vari—
ants. It is also, to our knowledge, the first attempt to use semantic
workflows and abductive reasoning for this purpose. We believe
that our solution will contribute to a more scalable informatics

infrastructure that is appropriate for next—generation sequencing—
based clinical genetics.

Acknowledgements

We thank Drs Jon Morrow and Pei Hui (Department of Pathology) and Drs
Patrick Gallagher and Vincent Schulz (Department of Pediatrics) for their
valuable input and guidance in designing Mutadelic. We are especially grate-
ful for their input into the crafting of genetic rules for identifying disease
variants.

Funding

Dr. Krauthammer was partially supported by the Yale SPORE in skin cancer
(NCI/5P50CA121974) and Dr. Holford was supported by the NLM biomed-
ical informatics training grant at Yale (NLM/T15LM007056)

Conﬂict of Interest: none declared.

References

Deelman,E. et al. (2005) Pegasus: a framework for mapping complex scientiﬁc
workﬂows onto distributed systems. Sci. Program., 13, 219—237.

Fielding,R.T. and Taylor,R.N. (2002) Principled design of the modern web
architecture. ACM Trans. Internet Technol. (TOIT), 2, 115—150.

Gallagher,P. (2004a) Update on the clinical spectrum and genetics of red blood
cell membrane disorders. Cnrr. Hematol. Rep, 3, 85—91.

Gallagher,P.G. (2004b) Hereditary elliptocytosis: spectrin and protein 4.1 r.
Semin. Hematol., 41,142—164.

Gil,Y. et al. (2010) Assisting scientists with complex data analysis tasks
through semantic workﬂows. In: AAAI Fall Symposium: Proactive Assistant
Agents.

Gil,Y. et al. (2011) A semantic framework for automatic generation of compu-
tational workﬂows using distributed data and component catalogues.
]. Exp. Tbeor. Artif. Intell.,23, 389—467.

Kopecky,]. et al. (2007) Sawsdl: Semantic annotations for wsdl and xml
schema. Internet Compnt. IEEE, 11, 60—67.

Mohandas,N. and Gallagher,P.G. (2008) Red cell membrane: past, present,
and future. Blood, 112, 3939—3948.

Nau,D.S. et al. (2003) Shop2: An htn planning system. ]. Artif. Intell. Res.
(]AIR), 20, 379—404.

Oinn,T. et al. (2004) Taverna: a tool for the composition and enactment of
bioinformatics workﬂows. Bioinformatics, 20, 3045—3054.

Perrotta,S. et al. (2008) Hereditary spherocytosis. Lancet, 372, 1411—1426.

Sirin,E. et al. (2004) th planning for web service composition using shop2.
Web Semantics Sci. Services Agents World Wide Web, 1, 377—396.

Vandervalk,B.P. et al. (2009) Share: a semantic web query engine for bioinfor-
matics. In: Gomez-Perez,A. et al. (eds.) The Semantic Web, pp. 367—369.
Springer, Berlin Heidelberg.

Wang,K. et al. (2010) Annovar: functional annotation of genetic variants from
high-throughput sequencing data. Nucleic Acids Res., 38, e164—e164.

Wilkinson,M.D. et al. (2010) Sadi, share, and the in silico scientiﬁc method.
BMC Bioinformatics, 11, S7.

Yourshaw,M. et al. (2014) Rich annotation of DNA sequencing variants by
leveraging the ensembl variant effect predictor with plugins. Brief. Bioinﬂ,
16, 255—264.

Zhang,Z. et al. (2001) Dynamic molecular modeling of pathogenic mutations
in the spectrin self-association domain. Blood, 98, 1645—1653.

Zhao,Z. and Paschke,A. (2012) A survey on semantic scientiﬁc workﬂow.
Semantic Web]. IOS Press, 1—5.

ﬁle'spzumol‘pmJXO'sopeuuowtotq/ﬁdnq

