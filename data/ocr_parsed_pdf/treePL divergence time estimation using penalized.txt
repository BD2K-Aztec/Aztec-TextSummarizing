BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

treePL

 

does not account for all sources of uncertainty (e.g. calibration uncer-
tainty or branch length errors).

2.2.1 Cross—validation The penalized likelihood approach requires
the identiﬁcation of a smoothing parameter that affects the penalty for
rate variation over the tree. A cross-validation procedure is used to de-
termine the best smoothing parameter. We provide two options for
cross-validation: leave one out cross-validation (LOOCV) and random
subsample and replicate cross-validation (RSRCV). The LOOCV ap-
proach is described in Sanderson (2002) and requires iteratively removing
each terminal node, recalculating rates and dates, and recording the error
between the predicted value from the estimate and the observed value.
RSRCV randomly samples, with replacement, multiple terminal nodes,
recalculates rates and dates with these terminal nodes removed and cal-
culates the average error over the sampled nodes. RSRCV replicates this
procedure a number of times, with 10 times being typical. Potential sets of
terminal nodes that cause the removal of internal nodes (such as a set of
terminal nodes that form a clade) are not allowed. This procedure is
much faster than LOOCV and produces similar results. Cross-validation
can be unstable, but subsampling procedures such as RSRCV may im-
prove this behavior (Kohavi, 1995).

2.2.2 Implementation The above algorithm is implemented in
treePL, which is open source and available at https://github.com/black-
rim/treePL. Auto-differentiation uses RAD (Gay, 2005; Griewank et al.,
1996) on a single cores and ADOL-C for multiple cores. Likelihood cal-
culations and cross-validation analyses may be distributed on multicore
machines using the OpenMP library.

3 SIMULATIONS

We test the performance of treePL, r8s and PATHd8 (Britton
et al., 2007) on simulated datasets with up to 10000 taxa. Two
empirical examples, including comparisons to BEAST, may be
seen in the Supplementary Materials, as can details of the
simulations.

To measure the performance of each method, we measured
the R2 of the estimated node ages against the known node ages
(Fig. 1). r8s and treePL perform quite similarly and both perform
better than PATHd8. Some of the slight performance decrease of
treePL as tree size increases may be explained by numerical error
with treePL adding nonzero values to effectively zero branch
lengths. The poor performance of PATHd8 for many of these
trees may be a result of how it resolves conﬂicting dates and
rates. In these cases, PATHd8 allows the conﬂicting branches
to have the same height, thus sinking the branch to its parent,
leading to a zero branch length.

The time it took to run each analysis was also recorded (Fig. 1
inset). PATHd8 analyses are almost instantaneous. treePL is far
faster than r8s but slower than PATHd8 . Nevertheless, r8s performs
well for smaller datasets. The runtime for treePL is highly dependent
on the nature of the dataset, the settings for the stochastic phase of
the run, and the optimization method used for the greedy phase.
Parallelization in treePL was not used for the simulation runs.

The simulated analyses demonstrate that, at least under the
particular settings of the simulator, r8s and treePL perform well
with treePL being significantly faster than r8s (see Supplemental
Materials for performance with empirical datasets). Both pro—
grams perform better than PATHd8 in terms of accuracy when
compared with the ‘true’ simulated tree. The simulated analyses
also demonstrate that divergence—time analysis with penalized
likelihood is reasonable on trees of over 10000 taxa.

 

1.00

f

“A

\+//4

\/

0'95
/

 

R2 of estimate against known

 

 

 

 

 

 

 

 

 

O
O
8 —B— r83 N
o' —A— treePL 5
3
+ pathd8 E
.E
a)
.E
m o x—x x—x
g— 0 tree size 10000
I I I I I I
0 2000 4000 6000 8000 1 0000
tree size

Fig. 1. The performance of r8s, treePL and PATHd8 on the simulated
datasets as measured by R2 of estimated node ages against known ages.
The inset shows average runtimes of r8s, treePL and PATHd8 in minutes
on simulated datasets. Error bars represent 95% confidence intervals

ACKNOWLEDGEMENTS

The authors acknowledge the ‘Floral assembly’ working group at
NESCent, helpful discussions with Michael Alfaro, Jeremy
Beaulieu, Jonathan Eastman, and David Tank and treePL
testers.

Funding: National Evolutionary Synthesis Center (NESCent),
NSF #EF—0905606. iPlant Collaborative NSF #EF—0735191 (to
S.A.S.).

Conﬂict of Interest: None declared.

REFERENCES

Britton,T. et al. (2007) Estimating divergence times in large phylogenetic trees. Syst.
Biol, 56, 7417752.

Edwards,A.W.F. (1992) Likelihood. 2nd edn. Johns Hopkins University Press,
Baltimore, MA.

Gay,D.M. (2006) Semiautomatic differentiation for efficient gradient computations.
In Bucker,H.M. et al. (eds) Automatic DWrentiation: Applications, Theory, and
Tools. Lecture Notes in Computational Science and Engineering. Springer, New
York, NY, 1477158.

Goloboff,P.A. et al. (2009) Phylogenetic analysis of 73060 taxa corroborates major
eukaryotic groups. Clatlistics, 25, 1720.

Griewank,A. et al. (1996) Algorithm 755: ADOL—C: a package for the automatic
differentiation of algorithms written in C/C++. ACM Trans. Mat/i. Software,
22, 1317167.

Kohavi,R. (1995) A study of cross—validation and bootstrap for accuracy estimation
and model selection. In Proceedingsof the 14th International Joint Conference on
A.I.. Vol. 2, Morgan Kaufmann Publishers Inc. San Francisco, CA, USA,
Canada, pp. 113771143.

Sanderson,M.J. (2002) Estimating absolute rates of molecular evolution and diver—
gence times: a penalized likelihood approach. Mol Biol. Evol, 19, 1017109.
Smith,S.A. et al. (2009) Mega—phylogeny approach for comparative biology: an

alternative to supertree and supermatrix approaches. BMC Evol Biol, 9, 37.

Thorne,J.L. and Kishino,H. (2005) Estimation of divergence times from molecular
sequence data. In Nielsen,R. (ed.) Statistical Methods in Molecular Evolution.
Springer—Verlag, New York, pp. 2337256.

 

2690

ﬁre'spzumol‘pmﬂo'sopeuuopuotq/pdnq

