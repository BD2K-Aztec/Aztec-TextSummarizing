Bioinformatics, 31112), 2015, 2056—2058
doi:10.1093/bioinformatics/btv107

Advance Access Publication Date: 19 February 2015
Applications Note

 

Databases and ontologies

The GPMDB REST interface

David Fenyo1 and Ronald C. Beavisz'*

1Department of Biochemistry and Molecular Pharmacology, New York University Langone Medical Center, New
York, NY, USA and 2Department of Biochemistry and Medical Genetics, The University of Manitoba, Winnipeg, MB,
Canada

xTo whom correspondence should be addressed.
Associate Editor: Janet Kelso

Received on November 19, 2014; revised on February 2,2015; accepted on February 11,2015

Abstract

Summary: The Global Proteome Machine and Database (GPMDB) representational state transfer
(REST) service was designed to provide simplified access to the proteomics information in GPMDB
using a stable set of methods and parameters. Version 1 0fthis interface gives access to 25 meth—
ods for retrieving experimental information about protein post—translational modifications, amino
acid variants, alternate splicing variants and protein cleavage patterns.

Availability and implementation: GPMDB data and database tables are freely available for com—
mercial and non—commercial use. All software is also freely available, under the Artistic License.
http://rest.thegpm.0rg/1 (GPMDB REST Service), http://wiki.thegpm.0rg/wiki/GPMDB,REST
(Service description and help), and http://www.thegpm.0rg (GPM main project description and
documentation). The code for the interface and an example REST client is available at ftp://ftp.

 

thegpm.org/repos/gpmdbirest
Contact: rbeavis@thegpm.0rg 0r david@feny0|ab.0rg

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

The Global Proteome Machine and Database (GPMDB,
http://thegpm.org) is a project to collect and disseminate
in2formation derived from raw data generated by proteomics ex-
periments that use tandem mass spectrometry to analyze protein
samples (Craig et (11., 2004). It currently contains the results of
analyzing over 270 000 proteomics datasets and more than 1.8
billion peptide identifications. The system uses a combination of
data analysis servers, an XML file storage repository and a set
of MySQL database servers to generate and record the results of
proteomics experiments. It has become part of a larger, informal
system of data repositories and information systems widely used
by proteomics investigators (Perez—Riverol et (11., 2014).

The original design of the system allowed investigators to use a
conventional web browser/HTML system to select information of
interest about individual peptides or proteins as well as information
about particular datasets using forms and URL links. While this
style of interface has proven to be very useful for individuals brows-
ing the information, it has become increasingly cumbersome for
automated information retrieval systems, where the HTML pages

are being parsed to generate summary information for calculations.
The REST interface described here is web service specifically
designed to simplify data access and automate some common tasks
in bioinformatics and computational biology research.

2 GPMDB REST interface design and
implementation

The version 1.0 design was initiated by the results of a request for
comment made in June 2012 to the GPMDB user community.
Following consultation with the users and a series of test implemen-
tations, 25 methods were selected to comprise the initial version of
the interface. The base URL for the service, http://rest.thegpm.org/l,
has the version number as an integral part of the call: subsequent
versions will end in the appropriate version number so the service
can be updated without altering the functionality available in a par-
ticular version. The methods were selected to be as atomic as pos-
sible, so that a complex query could be composed of serial requests,
rather than creating a large number of special-purpose methods. Of
the major proteomics data resources, PRIDE (Vizcaino et (11., 2013)

(C7 The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 2056

/310‘srcumo[p10}xo‘soucuHOJIItotq/ﬁdnq

The GPMDB RESTinterface

2057

 

has recently added a REST interface and PeptideAtlas (Deutsch
et al., 2008) does not yet have REST—style web services. Hopefully
our design may serve as an example for the creation of a standard
set of services that would simplify obtaining information from such
systems.

The service was implemented in object—oriented PERL 5 and run
by Apache HTTPD server in response to URL—based Common
Gateway Interface (CGI) GET requests. All responses to requests are
made in Javascript Object Notation (JSON) with the MIME header
‘Content—type: application/json’. Three separate modules were cre—
ated: (i) rest.pl—handles the CGI request and returns the JSON text,
(ii) gpm_rest.pl—handles requests for information contained in indi—
vidual data set analysis files and (iii) gpmdb_rest.pl—handles all
requests to the GPMDB MySQL relational database.

The REST interface was designed to return information involv—
ing protein biochemistry. Information associated with mass spectra
or the details of specific peptide—to—spectrum assignments will con—
tinue to be available through the main GPMDB web interface.

3 Rest Service

The 25 methods chosen for the web service fall in four general cate—
gories: interface, model, peptide and protein. Calls to a particular
method have the category type included in the URL, e.g. to call the
‘help’ method, the string ‘/interface/help’ is appended to the base
URL. The specification of all methods and their parameters is avail—
able at http://wiki.thegpm.org/wiki/GPMDB_REST.

Information available from GPMDB is held in both a large set of
XML files and a relational database system. The XML files (in
BIOML format, Fenyo, 1999) contain the original results of analyz—
ing experimental raw data, while the database contains information
and indexes derived from those files and external information sour—
ces. The model category was reserved for accessing information
from the XML files directly, while the peptide and protein categories
access information from the relational database.

3.1 Interface methods

The interface method category was meant to contain calls associated
with generic information regarding the technical specifications of
the web service. Two methods were implemented, ‘/interface/laelp’
and ‘/interface/Uersion’. The ‘laelp’ method returns a JSON—format—
ted text string containing a listing of the available methods and the
documentation URL. The ‘Uersion’ method returns the service’s cur—
rent implementation date.

3.2 Model methods

The model category accesses information about individual data ana—
lyses from the original XML file output by the peptide identification
search engine (Supplementary Material). It has seven methods, all of
which require the XML file accession number as an input param—
eter. This accession number (a unique file identifier generated at run
time) is in the format ‘GPMddddddddddd’ (d is any digit 0—9). The
model methods retrieve the metadata about the original sample and
identification process, as well as the peptides, proteins, posttransla—
tional modifications and amino acid variants detected by the ana—
lysis. These methods query the original XML files directly, without
reference to the database. XML files are not either altered or deleted
once they are registered with the system: any information updates
(e.g. changes to the sample metadata) are performed on the database
only and therefore the results of model queries should be considered
to be permanent records.

3.3 Peptide methods

The peptide category retrieves summary information relevant to spe—
cific peptide sequences. There are three methods, each of which re—
quires the specification of the peptide sequence of interest in the
standard upper—case, single—letter amino acid code, including the
rare genome—encoded amino acids pyrolysine (O) and selenocysteine
(U). Some legacy peptide sequences may use the B (D or N) and Z
(E or Q) ambiguity symbols for residues, if it was specified in the ori—
ginal protein sequence listing FASTA file used for data analysis. This
version does not have any provision for wild card or peptide se—
quence similarity searches: only the specified sequence can be used
to obtain information.

The three peptide methods allow the retrieval of the total number of
observations of a peptide, the number of observations of a peptide as a
function of the parent ion charge assigned to the tandem mass spectrum
and a list of all of the protein accession numbers that have been assigned
to that sequence. The list of accession numbers can be used to formulate
more specific queries using one or more of the protein methods.

3.4 Protein methods

The protein category methods request information relevant to a par—
ticular protein sequence, using its accession number and additional
query—specific parameters. These accession numbers were all ob—
tained from publicly available protein sequence sources, such as
ENSEMBL (Flicek et al., 2014). These accession numbers are as—
signed at the time of analysis, based on the annotation provided in
FASTA files. No attempt has been made to provide translation be—
tween different accession number schemes: e.g. proteins assigned to
ENSEMBL accessions cannot be retrieved directly using UniProt
identifiers. For cases where a peptide sequence is known, the ‘/pep-
tide/accessions’ method can be helpful finding a desired protein. A
keyword search method (/protein/keyword) is also available to gen—
erate a list of available accession numbers. Resources that allow the
retrieval of accession number mappings to ENSEMBL, such as
BIOMART, may also be helpful. There are no plans to include ac—
cession number mapping in the REST interface.

Thirteen protein methods have been made available. Some of
these methods return general information about a protein (sequence,
keyword and description). Sequence—specific posttranslational modi—
fications(modifications) can be queried as well as sequence variants
(polymorphisms), with information about the frequency of observa—
tion. Due to the complexity of residue modification information,
each type of modifications (e.g. phosphorylation, acetylation) must
be queried individually. All amino acid variant information for a
protein is returned via a single query, in the ‘:p.’ format suggested by
den Dunnen et al. (2000). The other protein methods return sum—
mary information about the peptides observed for an accession num—
ber and quality control statistics required by for the Human
Proteome Project (Lane et al., 2014).

Acknowledgements

The authors would like to thank John Cortens, Brett Phinney, Yasset Perez-
Riverol, Paul Rudnick, Attila Csordas and Emanuele Alpi for their helpful

suggestions and discussion.

Funding

This work was supported by the George and Fay Yee Centre for Health Care
Innovation (to R.C.B.) and the University of Manitoba.

Conﬂict of Interest: none declared.

ﬁm'spzumol‘pmyo'sopcuuowtotq/ﬁdnq

2058

D. Fen yo and R. C. Beavis

 

References

Craig,R. et al. (2004) An open source system for analyzing, validating and
storing protein identiﬁcation data. ]. Proteome Res, 3, 1234—1242.

den Dunnen,].T. et al. (2000) Mutation nomenclature extensions and sugges-
tions to describe complex mutations: a discussion. Ham. Matat., 15, 7—12.

Deutsch,E.W. et al. (2008) PeptideAtlas: a resource for target selection for
emerging targeted proteomics workflows. EMBO Reports, 9, 429—434.

Feny6,D. (1999) The biopolymer markup language. Bioinformatics, 15,
339—340.

Flicek,P. et al. (2014) ENSEMBL 2014. Nucleic Acids Res, 42, D749—D755.

Lane,L. et al. (2014) Metrics for the Human Proteome Project 2013—2014 and
strategies for ﬁnding missing proteins. Proteome Res, 13, 15—20.

Perez-Riverol,Y. et al. (2014) Making proteomics data accessible and reusable:
Current state of proteomics databases and repositories. Proteomics, 15,
930—949

Vizcaino,].A. et al. (2013) The PRoteomics IDEntiﬁcations (PRIDE) data-
base and associated tools: status in 2013, Nucleic Acids Res, 41,
D1063—D1069.

/3.IO'S[BIImOfp.IOJXO'SOIIBLUJOJIIIOICV/Idllq

