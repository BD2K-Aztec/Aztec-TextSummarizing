BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

I.Rodchenkov et al.

 

Use cases: The validator can be used as web application (online),
locally from command line (batch mode) or integrated into third
party software (library mode). The validator is accessible for
online and/or non—Java applications as a web service. Batch
mode is required for checking large BioPAX models, such as
complete database exports, whereas library mode is typically
used to check for correctness as a BioPAX model is being im—
ported or manipulated by software tools.

The reference (standard) BioPAX Validator can be accessed as
a web application via biopax.org/validator. Alternatively, and
for batch checking file directories or large ﬁles (e.g. >100 Mb
in total size), one can also download and run it as a console
application locally. Users can also conﬁgure and deploy it on
their own application server.

Use of external vocabularies: BioPAX uses a number of external
controlled vocabularies, often deﬁned as ontologies, (e. g. Gene
Ontology cellular component subtree to specify the cellular loca—
tion of physical entities). The validator currently uses seven OBO
ontologies (as recommended in the BioPAX L3 speciﬁcation):
PSI—MI (molecular interactions), PSI—MOD (post—translational
modiﬁcations), GO (gene ontology), CL (cell type), BTO
(BRENDA tissue ontology), PATO (phenotypes) and SO (se—
quence ontology). To verify that terms from these ontologies
are correctly used, the validator caches each controlled vocabu—
lary locally for performance purposes. These caches can be auto—
matically updated or configured to always use the latest web—
based version.

Normalization: BioPAX allows significant syntactic freedom for
data producers to facilitate data export. For example, data pro—
viders often assign non—standard local RDF identiﬁers (unique
for each instance in a BioPAX document) for some utility classes.
The normalizer can then replace private URIs of abstract
BioPAX Level3 objects with standard Identiﬁers.org URIs as
long as valid external references (Uniﬁcatioanef) to standard
databases, such as UniProt and NCBI taxonomy, are available in
the ﬁle. Similarly, generic physical entities (e. g. the class of Wnt
proteins) may be represented in multiple ways and these can be
normalized to a standard form that is easier to use.

BioPAX normalization is not yet part of the formal BioPAX
speciﬁcation and guidelines; however, it is desired for data inte—
gration and required for semantic web and linked data use cases.
The validator and normalizer bridge the gap between evolving
BioPAX Level3 community best practices and multiple use cases
from the community. Future work will involve extending the sys—
tem to identify and ﬁx additional errors, such as checking that
the standard names of all human gene entities are valid HGNC
gene symbols, all UniProt references are expressed in a standard
manner and that post—translational modiﬁcations at speciﬁc pro—
tein positions are biologically valid (e. g. phosphorylation occurs

at S, T or Y residues). Many of these features require access to
large external databases.

Tiered customizable reporting: Rule violations are reported either
in a human readable HTML format or XML. Three error levels
are deﬁned: error and warning for invariants and best practices,
respectively, and ignore when a rule is not to be used. Users can
configure rule behavior (i.e. ignore, warning, error) by deﬁning a
proﬁle, and multiple proﬁles can be deﬁned in a configuration ﬁle.
Two pre—defined proﬁles are default and notstrict. Four error
categories are used: syntax, specification, recommendation and
information. Rules can report more than one error code (type).
Other than the level, category and error code, the report involves
an explanation of the error, common possible reasons that may
lead to it and the list of cases with links (URIs) to the problem—
atic model elements.

3 IMPLEMENTATION

BioPAX Validator is implemented in Java using the Spring
framework and depends on the Paxtools API (Demir et al.,
2013) to read and manipulate BioPAX. We chose Java because
some of the more complex rules (e. g. algorithmic) were easier to
deﬁne in Java compared with other languages (e.g. OWL, rule—
based languages).

ACKNOWLEDGEMENTS

The authors thank the BioPAX community and pathway data—
base groups for valuable feedback about rule deﬁnitions and
systems design, in particular the NCI PID, Panther, Reactome,
PhosphoSite, NetPath and BioCyc database groups.

Funding: This tool was developed with funding from the US.
National Institutes of Health, National Human Genome
Research Institute, grant number [1U41HG006623].

Conflict of Interest: none declared.

REFERENCES

Bader,G.D. et ul. (2006) Pathguide: a pathway resource list. Nucleic Acids Ram, 34,
D50¢D506.

Bornstein,B.J. et ul. (2008) LibSBML: an API library for SBML. Bioinformuticx, 24,
88(k881.

Czauderna,T. et ul. (2010) Editing, validating and translating of SBGN maps.
Bioinfommticx, 26, 234072341.

Demir,E. et ul. (2010) The BioPAX community standard for pathway data sharing.
Nat. Biotechnol, 28, 9357942.

Demir,E. et ul. (2013) Using Biological Pathway Data with Paxtools. PLOS
Computational Biology, in press.

Montecchi—Palazzi,L. et ul. (2009) The PSI semantic validator: a framework to
check MIAPE compliance of proteomics data. Proteomicx, 9, 511275119.

 

2660

ﬁle'sreumofpmJXO'sopeuuowrorq/ﬁdnq

