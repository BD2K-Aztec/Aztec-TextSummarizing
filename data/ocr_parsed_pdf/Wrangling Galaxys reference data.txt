BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

D.Blankenberg et al.

 

and values. These values are enabled in real time and persisted to
disk. Restarting the Galaxy server is not required for enabling
the new entries; however, the new entries will remain after a
restart. Although the Data Manager framework negates the
need for the manual curating of reference data, it is compatible
with any previously existing policy or process in—use for a Galaxy
installation.

2 METHODS

A Galaxy Data Manager is composed of two primary components: a
Data Manager tool and a Data Manager conﬁguration. Similar to stand-
ard Galaxy tools, the Data Manager tool component is responsible for
deﬁning the user configurable components as well as the command line
and scripts used to generate the actual underlying data (e.g. download a
FASTA genome, run the BWA binary to build index ﬁles). The Data
Manager conﬁguration component instructs the framework on how to
process the output of the Data Manager tool into new entries into
Galaxy’s built-in data registry. Although a Data Manager can add any
number of new entries to any number of data tables, the most common
case is to add a single new entry to a single data table. Whereas the
examples listed here involve reference genomes or reference genome
indexes, it is worth noting that any type of preconﬁgured Galaxy data,
such as BLAST databases and protein or pathway domain databases, can
be incorporated into a Data Manager.

2.1 Data Manager tools

Data Manager tools were implemented as an extension to
standard Galaxy tools. A Galaxy tool can be loosely deﬁned as being
composed of two parts: (i) an XML-based tool description that deﬁnes the
input parameters and settings, the manner in which to assemble a com-
mand line to be executed, the output ﬁles generated by the command line
and on-screen help and (ii) the underlying command-line executable(s).
The only difference between deﬁning a standard Galaxy tool and a
Data Manager tool is the inclusion of the type = ‘data_manager’ attribute
to the <tool> element; this declaration has the affect of instructing
Galaxy to provide a JavaScript Object Notation (J SON) encoded diction-
ary of parameter and server settings to be optionally used by the execut-
able and to trigger the Data Manager framework to process the tool
output into new data table entries. By design, Data Manager tools can
only be executed by a Galaxy administrator. There is no requirement of
the underlying executable to parse the input JSON, but using this JSON
input can greatly simplify the command-line arguments that need to be
deﬁned and parsed by the underlying command-line executable.

The only requirement of the underlying executable is that it provides as
output a J SON-encoded description of the new entries to add to Galaxy’s
built-in data registry. These values provided by the tool need not be the
ﬁnal values that will be stored, but may represent base values that will be
modiﬁed by the Data Manager framework. At no point does the
underlying executable need to interact directly with a data table or loca-
tion ﬁle; entries are always created using this abstract communications
layer. Often, the underlying executable is a wrapper script that handles
parsing the input parameters, calling a set of binary executables and
writing out the JSON-encoded new entry values. For example, the
BWA indexer Data Manager calls a script that handles the tool input
(e.g. determining the indexing algorithm to use: either declared explicitly
by the user in the Galaxy interface or by guessing based on the size of the
speciﬁed input genome), executes the ‘bwa index’ command and writes a
JSON ﬁle containing the new data table entry values (a dictionary con-
taining an ID, dbkey, display text and ﬁles path).

2.2 Data Manager conﬁgurations

Data Manager conﬁgurations are XML-based descriptions that deﬁne
the actions of the Data Manager. Each conﬁguration element speciﬁes
a single Data Manager, with name and id, the tool used by the Data
Manager, the data tables that may be modiﬁed by this Data Manager,
how to modify, if necessary, the raw entry values provided by the tool
into the ﬁnalized values to be stored and how to handle the actual index
ﬁles on disk (e.g. move a directory of ﬁles into the permanent built-in
data store location). In the BWA example, the provided ID, dbkey and
display text are used as-is, but the Data Manager framework modiﬁes the
ﬁle path value. Here, the path value provided by the executable is the
FASTA ﬁle base name (e.g. genome_build.fa), which will be modiﬁed to
match the ﬁnal path on disk as conﬁgured by the administrator. These
value modiﬁcations are handled using an extensible collection of value_
translation tags.

3 CONCLUSIONS

The Data Manager framework represents a major improvement
to Galaxy’s handling of built—in reference data. Previously,
adding reference data to Galaxy was a manual process, relying
entirely on an administrator to build reference data on the com—
mand line. It was solely the responsibility of the administrator to
externally record the source of the data and the steps taken to
prepare the data if provenance was desired. All correctness of the
reference data or the manual addition of entries to location ﬁles
required the careful attention of the administrator.

In addition to automating the administration of Galaxy’s
built—in data cache, the Data Manager framework provides a
pluggable approach for ensuring reproducibility and provenance
tracking of reference data. By extending the capability of stand—
ard Galaxy tools, the Data Manager framework gains all the
power that is available to the tool integration framework while
providing a lower entry barrier to developers who are already
familiar with deﬁning Galaxy tools. The Data Manager frame—
work is fully supported by the Galaxy ToolShed. New Data
Manager tools can be deﬁned by community members and in—
stalled into any Galaxy instance by the administrator. Particular
attention has been paid to ensure that the conﬁguration settings
available will allow effective use of Data Manager tools across
varying server environments and on the Cloud. Data Manager
tools can be accessed using the GUI within Workﬂows or by
using the application programming interface (API).

ACKNOWLEDGEMENT

Efforts of the Galaxy team were instrumental for making this
work happen.

Funding: This work was supported through grant number
HG005542 from the National Human Genome Research
Institute, National Institutes of Health, as well as grants
HG005133, HG004909 and HG006620 and NSF grant DBI
0543285. Additional funding is provided by Huck Institutes for
the Life Sciences at Penn State and, in part, under a grant with
the Pennsylvania Department of Health using Tobacco
Settlement Funds. The Department specifically disclaims respon—
sibility for any analyses, interpretations or conclusions.

 

1918

ﬁm'spzumofpmﬂo'sopeuuopnorq/ﬁdnq

Wrangling Galaxy’s reference data

 

REFERENCES

Blankenberg,D. et a]. (2010) Galaxy: a web—based genome analysis tool for experi—
mentalists (edited by Frederick M Ausubel, et al). Curr. Proton. Mol. Biol.
89:19.10.1719.10.21. John Wiley & Sons.

Giardine,B. et a]. (2005) Galaxy: a platform for interactive large—scale genome ana—
lysis. Genome Re.\'., 15, 145171455.

Goecks,J. et a]. (2010) Galaxy: a comprehensive approach for supporting accessible,
reproducible, and transparent computational research in the life sciences.
Genome Biol., 11, R86.

Li,H. and Durbin,R. (2009) Fast and accurate short read alignment with
Burrows—Wheeler transform. Bioiry’ormuticx, 25, 17544760.

 

1919

/3.IO'S[BIImO[p.IOJXO'SOIJBLUJOJIIIOIq/ﬂduq

