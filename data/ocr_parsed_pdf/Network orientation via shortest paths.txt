ORIGINAL PAPER

Vol. 30 no. 10 2014, pages 1449—1455
doi:1 0. 1093/bioinfonnatics/btu043

 

Systems biology

Advance Access publication January 27, 2014

Network orientation via shortest paths

Dana Silverbush and Roded Sharan*

The Balavatnik School of Computer Science, Faculty of Exact Sciences, Tel Aviv University, Tel Aviv 69978, Israel

Associate Editor: Igor Jurisica

 

ABSTRACT

The graph orientation problem calls for orienting the edges of a graph so
as to maximize the number of pre-specified source—target vertex pairs
that admit a directed path from the source to the target. Most algorith-
mic approaches to this problem share a common preprocessing step, in
which the input graph is reduced to a tree by repeatedly contracting its
cycles. Although this reduction is valid from an algorithmic perspective,
the assignment of directions to the edges of the contracted cycles be-
comes arbitrary, and the connecting source—target paths may be arbi-
trarily long. In the context of biological networks, the connection of
vertex pairs via shortest paths is highly motivated, leading to the follow-
ing problem variant: given a graph and a collection of source—target
vertex pairs, assign directions to the edges so as to maximize the
number of pairs that are connected by a shortest (in the original
graph) directed path. This problem is NP-complete and hard to approxi-
mate to within sub-polynomial factors. Here we provide a first polyno-
mial-size integer linear program formulation for this problem, which
allows its exact solution in seconds on current networks. We apply
our algorithm to orient protein—protein interaction networks in yeast
and compare it with two state-of-the-art algorithms. We find that our
algorithm outperforms previous approaches and can orient consider-
able parts of the network, thus revealing its structure and function.
Availability and implementation: The source code is available at
www.cs.tau.ac.il/~roded/shortest.zip.

Contact: roded@post.tau.ac.il

Received on June 4, 2013; revised on January 11, 2014; accepted on
January 21, 2014

1 INTRODUCTION

Proteiniprotein interactions (PPIs) form the skeleton of signal
transduction in the cell. Although many of these interactions
carry directed signaling information, current PPI measurement
technologies, such as yeast two hybrid (Fields, 2005) and co-
immunoprecipitation (Gavin et al., 2002), reveal the presence
of a signal flow but not of its directionality. Identifying this dir-
ectionality is fundamental to our understanding of how signaling
networks function. Although some interactions are naturally dir-
ected, such as kinaseisubstrate and phosphataseisubstrate inter-
actions (KPIs), the directions of the vast majority of PPIs remain
unknown.

From a theoretical point of View, graph orientation problems
have been studied by several authors. In the following, we em-
phasize algorithmic results pertaining to mixed graphs (i.e.
graphs with both directed and undirected edges), which are the
focus of this work. Arkin and Hassin (2002) showed that the

 

*To whom correspondence should be addressed.

problem of orienting a mixed graph so that it admits directed
paths for a given set of sourceitarget vertex pairs is NP-com—
plete. Elberfeld et a]. (2013) showed that the corresponding maxi-
mization problem is NP-hard to approximate to within a factor
of 7/8, and provided a sublinear approximation for it. Recently,
Blokh et a]. (2013) studied the problem of orienting the edges of
an undirected graph so as to maximize the number of pre-speci-
ﬁed sourceitarget pairs that admit a directed shortest path be-
tween them (i.e. a directed path whose length is equal to the
distance between them in the unoriented graph). They showed
that for an undirected graph with a vertex set of size n, edge set of
size m and p source-target pairs the problem is NP-hard to
approximate within factors of 0(pl’e) and 0(m1/3’6) for any
ﬁxed e>0, and provided an approximation algorithm with a
factor of 0(max{n,p})l/‘/§. For the k—length—bounded orienta-
tions in a weighted undirected graph, which aims to maximize
the weight of all satisﬁed paths between sources and targets with
length at most k, Gitter et a]. (2011) showed that while the
resulting problem is NP-hard, it can still be approximated to
within a factor 0(2k/k).

In the biological domain, previous work to infer interaction
directionality has mostly used unsupervised methods, with the
exception of Vinayagam et a]. (2011), which represents each dir-
ected interaction using topological features and trains a classiﬁer
to predict the directions of unseen interactions. Speciﬁcally, pre-
vious unsupervised methods relied on information from perturb-
ation experiments, in which a gene is perturbed (cause) and as a
result other genes change their expression levels (eﬂects), to guide
the inference (Yeang et al., 2004). They assumed that for an
effect to take place, there must be a directed path in the network
from the causal gene to the affected gene. As there are many
paths that can link two proteins in the interaction network, pre-
vious solution methods relied on either length-bounded paths
(Gitter et al., 2011; Ourfali et al., 2007; Yeang et al., 2004) or
parameterized and integer programming techniques (Dorn et al.,
2011; Medvedovsky et al., 2008; Silverbush et al., 2011). The
former are limited by the length of the considered paths (at
most ﬁve). The latter, while producing highly precise predictions,
are limited in their coverage, as they start by contracting cycles of
the input network, eliminating the vast majority of the inter-
actions (>92% on the network) from further consideration.

It is likely that biological responses are controlled by relatively
short signaling cascades (Gitter et al., 2011; Navlakha et al.,
2012; Vinayagam et al., 2011); however, in a large-scale network,
enumerating all possible paths between two vertices can still be
computationally intractable, even when considering only paths
of limited length. In this article, we propose an orientation
method that overcomes the limitations of previous approaches
by focusing attention on shortest paths, which allows the efﬁcient

 

© The Author 2014. Published by Oxford University Press. All rights resen/ed. For Permissions, please email: journals.permissions@oup.com 1449

112 /310's112u1n0[p10}x0"sotJBurJOJutotq/ﬁduq 11101} pQPBOIII/lAOG

91oz ‘Og isnﬁnV uo ::

D.Silverbush and R.Sharan

 

representation of all such paths and avoids the contraction prob-
lem. The method aims to orient the edges of an input graph G so
that a maximum number of input sourceitarget pairs admit a
directed source-to-target path whose length is the shortest pos-
sible (i.e. equal to distance between the two vertices in G). Our
algorithm builds on a ﬁrst efﬁcient (for realistic instances) integer
linear program (ILP) formulation of the problem, allowing the
computation of optimal solutions in seconds on current net-
works. We applied our method to large-scale datasets of yeast
physical interactions and evaluated it using cross-validation
experiments. Our method outperformed two previous state-
of-the-art orientation methods (Gitter et al., 2011; Silverbush
et al., 2011) by a signiﬁcant margin.

2 MATERIALS AND METHODS
2.1 Problem deﬁnition and the shortest-paths graph

We focus on simple graphs with no loops or parallel edges. A mixed
graph is a triple G = (V, EU,ED) that consists of a set of vertices V, a
set of undirected edges EU g {e g V : |e| = 2} and a set of directed edges
ED g V x V. A path of length Z in G is a sequence of distinct vertices
(v1, ...,vl+1) such that (v,-, v,-+1) 6 EU U ED for every 1 5 i: Z. We
denote the distance between vertices s and t in G by dg(S, t). An orienta-
tion of G is a directed graph G on the same vertex set V whose edge set
contains all the directed edges of G and a single directed instance of every
undirected edge, but nothing more. We say that a pair of vertices (s,t) is
satisfied by an orientation G when the latter graph contains at least one
directed path from s to t whose length is d0(S, t), i.e. equal to the length of
a shortest s to t path in G. The Maximum Shortest-path Orientation
(MSPO) problem is deﬁned as follows:

Input: A mixed graph G = (V, EU, ED) with non-negative edge weights
w(e) for every e 6 EU U ED, and a collection of sourcetarget vertex pairs
P = {(S1,t1), . . .,(Sk,tk)}.

Objective: An orientation of G that satisﬁes (via shortest paths) a max-
imum number of pairs from P.

MSPO was shown to be NP-hard in Blokh et a]. (2013). Here we
provide a polynomial size ILP for it that allows solving it to optimality
in seconds on current networks. For ease of presentation, we focus on
unweighted graphs but the algorithm can be easily generalized to the
weighted case.

A key component of the algorithm is an efﬁcient representation of
shortest paths. For an ordered pair (s,t) of vertices, we deﬁne their short-
est paths graph Gcw = (V, EQ,’ 0) to be a directed graph on V, which
consists of all edges that reside on a shortest path from s to t in G.
GW) can be efﬁciently constructed by using breadth-ﬁrst searches from
s and t (the latter, after reversing all the directed edges). Now for every
edge (u,v) such that u is reachable from s and such that t is reachable from
v, we include it in GW) if and only if d0(S, t) = dg(S, u) + dg(v, t) + 1. It is
easy to see that each shortest path in G is a shortest path in G6,”.
Furthermore, each path in G6,” is a shortest path in G by deﬁnition of
its edges.

2.2 The integer program

The ILP formulation is based on checking pair connectivities via ﬂow-
based computations. The basic observation is that a pair (s, t) e P is
satisﬁed by a given orientation if and only if t is reachable from s in
GM). The latter condition can be rephrased as allowing us to send one
unit of ﬂow from s to t. Our ILP consists of a set of binary orientation
variables describing the edge orientations, ﬂow variables describing the
ﬂow on edges of G6,” for every (s, t) e P and binary closure variables
describing reachability of every pair in P.

Formally, the variables are as follows:

{0(u,v)a0(v,u) E {0,1}I(u,v) 6 EU U ED} (1)
{12523 e [0. 1]l(s, t) e p A (u, v) 6 EM} (2)
{CM 6 {0, 1}|(s, t) e P} (3)

The orientation variables in (1) are used to encode orientations of the
edges: an assignment of 1 to 00“) means that the undirected edge {u, v} is
oriented from u to v. We set 00“) = 1 and 00,“) = 0 for every directed
edge in ED. The ﬂow variables in (2) are used to measure the existence of
ﬂow on every edge of G6,” for every pair (s, t) e P. Unlike traditional
ﬂow problems, the amount of ﬂow does not concern us, but rather its
existence. The closure variables in (3) are used to represent which vertex
pairs of the graph are satisﬁed: an assignment of 1 to cc“) will imply that
the orientation satisﬁes (s, t).

The objective is as follows:

maximize Z q, ,) (4)

(s, 061’

The constraints are as follows:

0(u,v) + 0(v,u) = l for all (“a v) E EU 
0(u,v) = 1,0(v,u) = 0 for all (11, V) E ED (6)
 S 0(u,v) for all (S, t) E Pa (“a v) E E(s, t) 
(‘ , t)  , t)
f(uY, v) 5 Z fol“) 
w:(w, WEEW)

for all (s, t) e P, (u, v) e E(,,,,),u 7e s
C(s, t) E 2 f6“) for all (s, t) e P (9)

w, t)
(w, t)EE(57,)

Constraints in (5) ensure that each undirected edge is oriented in
exactly one direction. In case an interaction is unlikely to be directed
(e.g. a co-complex interaction), the constraints in (S) can be modiﬁed
to allow both directions. As we show in the sequel, the assignment of
conﬁdence scores to edge orientations allows us to automatically refrain
from assigning directions to the vast majority of such interactions.
Constraints in (6) ensure that the chosen orientations are consistent
with the directed edges of G. Constraints in (779) ensure that for every
pair (s, t) e P the closure variable cc“) can be set to 1 only if there is a
ﬂow from s to t in G6,”. In detail, the constraints in (7) ensure that the
ﬂow respect the edge directions; the constraints in (8) ensure that no edge
carries a flow from a vertex u if there is no incoming ﬂow to u and the
constraints in (9) ensure that the pair (s, t) e P is not satisﬁed if there is
no ﬂow from s to t in G6,”. The overall size of the ILP is
0(IPI IE1) U EUl)-

2.3 A more efﬁcient formulation

The above ILP formulation can be made more efﬁcient by observing that
in a biological knockout experiment one measures simultaneously all the
effects of a certain knockout (cause), and thus, many pairs in P share the
same source. We show below how to unify all the ﬂow computations of a
given source, thus signiﬁcantly reducing the number of variables and
subsequently the time of solving the ILP.

Let S(P) be the set of source vertices in P and denote by
M , = {(s, t1), . . . , (s, t,)} the set of pairs with source s. Let

G), = ULI G0, ,1.) be the union of all shortest path graphs with s as a

 

1450

112 /310's112u1n0fp10}x0"soiJBuiJOJuioiq/ﬁduq 11101} papeolumoq

91oz ‘Og isnﬁnV uo ::

Network orientation

 

source. Denote its set of edges by ES. We introduce the following updates
to the ﬂow variables and constraints of the program:

{121, ,, e mu 6 S(P) and (u, v) e  (10)
fa“) 5 00“) for all s e S(P), (u, v) e EY (11)
fit,» 5 Z fat.) (12)

(w,u)EEs

for all s e S(P), (u, v) e E,,u 7e s
C(s, t) E Z fgw) for all (s, t) e P (13)

(w, net.

Clearly, any (s, t) path identiﬁed by the previous ILP can be used in
this formulation as well. Thus, correctness of this formulation depends on
showing that any (s, t) path it identiﬁes must be a shortest path. Suppose
to the contrary that there exists an (s, t) path [3 e G, such that 13¢ G6,”.
Let p be the maximal preﬁx of [L that is a preﬁx of some shortest path in
G6,” and let (u,v) be the ﬁrst edge on [L that is not included in p (i.e. p
diverges at u). As (u,v) belongs to some G0,“ (by deﬁnition of G), p is
also a preﬁx of a shortest (s, t’) path that traverses (u, v). By our assump-
tion, (u,v) is not on a shortest path to t and, hence, the same property
holds for all the remaining edges on [3 including the last one 7 (w,t). This
results in a contradiction, as the presence of (w,t) in G, implies it must be
on a shortest (s, t) path.

2.4 Computing orientation conﬁdence

In principle, there could be many optimal solutions to the orientation
problem. Hence, some of the edges may be arbitrarily oriented in the
sense that both of their directions can be used in some optimal solutions.
Let sop, be the value of an optimal solution. To compute a measure of
conﬁdence in a given orientation of an edge e = (v, w), we rerun the ILP
while forcing e to carry the opposite orientation (w,v). We set its conﬁ-
dence value to cc 2 sop, — s6, where se is the maximum number of satisﬁed
pairs for the modiﬁed instance. If ce>0, then the direction of e is the same
in all optimal solutions; thus, we keep ce as the edge’s conﬁdence. If
cc 2 0 and e = (v, w) is on a shortest s to t path, then there are two
cases to consider: (i) the opposite edge is on a shortest s’ to t’ path; in
this case an orientation of e may be arbitrary and both (v,w) and (w,v) will
be assigned with a conﬁdence of 0. (ii) The opposite edge (w,v) does not
participate in any shortest path; thus, there must be some parallel path
from s to t that does not visit e, allowing it to be oppositely oriented
without altering the objective. In this case, e is assigned a positive conﬁ-
dence according to its contribution to satisfying pairs. Precisely, each pair
p that e = (v, w) is used to satisfy contributes 1 MP to its conﬁdence, where
np is the number of vertices u e G], such that d(s, u) = d(s, w) (reﬂecting
the number of alternatives to using e). Now a cutoff may be deﬁned, and
an edge e is said to be oriented with conﬁdence if and only if its conﬁdence
exceeds the cutoff

2.5 Iterative expansion

In an application of our orientation algorithm, edges that are assigned
zero conﬁdence remain undirected. To expand our orientation to include
some of those edges, we run several iterations of the algorithm. In each
iteration, the directions of edges that were conﬁdently oriented in the
previous iteration are held ﬁxed, while the criteria for satisfying the
source-target pairs are modiﬁed to allow additional orientations.
Speciﬁcally, let G,- = (V,-, Eui, EDI.) be the input graph at iteration i. For
a given source-target pair (s, t), let E,-(s, t) g ED, be the set of all directed
edges occurring on directed paths from s to t in G,-. Then we deﬁne (s, t)
to be satisﬁed by a given orientation of G,- if and only if it admits a
directed path under this orientation such that: (i) the path does not

intersect E,-(s, t); and (ii) its length is equal to the length of a shortest s-
to-t path in (V,-, Eui, ED,\E,-(s, t). The algorithm terminates when no new
edges are oriented with conﬁdence.

3 RESULTS

3.1 Data acquisition and integration

We gathered physical interactions and causeieffect pair inf orma-
tion for Yeast Saccharomyces cerevisiae from different sources.
We used the PPI dataset ‘Y2H-union’ from Yu et a]. (2008),
which contains 2930 highly reliable undirected interactions be-
tween 2018 proteins. ProteiniDNA interactions (PDI), which are
directed by nature, were taken from MacIsaac et al. (2006), an
update of which can be found at (http://fraenkel.mit.edu/
improved_map/). We used the collection of PDIs with
P<0.001 conserved over at least two other yeast species,
which consists of 4113 unique PDIs spanning 2079 proteins.
KPIs were collected from Breitkreutz et al. (2010) by taking
the directed kinaseisubstrate interactions out of their dataset.
This results in 1361 KPIs among 802 proteins. We used a set
of 14427 knockout pairs between 2870 genes and proteins from
(Hu et al., 2007) by taking their set of unreﬁned and unﬁltered
knockout pairs and filtering all pairs with P<0.001.

We integrated the data to obtain a physical network of undir-
ected and directed interactions. We removed self loops and par-
allel interactions; for the latter, whenever both a directed and an
undirected edge were present between the same pair of vertices,
we maintained the former only. Pairs of edges that are directed in
opposite directions were integrated as an undirected edge. The
resulting physical network spans 3686 proteins, 2655 PPIs, 4091
PDIs and 1359 KPIs.

3.2 Application and performance evaluation

We implemented our algorithm, which we call SHORTEST, in c++
using BOOST c++ libraries (version number 1.43.0) and the
commercial IBM ILOG CPLEX optimizer (version number 12.5) to
solve ILPs.

To evaluate the orientations suggested by our algorithm, we
ran the algorithm in a cross-validation setting, hiding the direc-
tions of the larger subset of known directed interactions, the
PDIs. This subset was considered as undirected test edges.
Guided by the set of knockout pairs, our program computes
orientations for all undirected edges, including the test edges.

We tested our algorithm using the efﬁcient version of Section
2.3, taking advantage of the fact that the knockout pairs were
derived from a small set of shared sources. When using 10 ex-
pansion rounds, the algorithm oriented with conﬁdence 3379
(82.6%) of the test edges, orienting correctly 2283 (67.6%) of
them (hypergeometric P<2.7’159). When restricting the confi-
dence cutoff to 2 (c8 3 2) and preforming a single iteration (i.e.
no expansion rounds), the algorithm oriented with conﬁdence
902 (22%) of the test edges with confidence, orienting correctly
714 (79.2%) of them (hypergeometric P: 0). To further evaluate
our algorithm, we deﬁne precision and recall as deﬁned in
Vinayagam et a]. (2011): we considered each interaction as two
different instances, where the interaction from A to B is deﬁned
twice, as A —> B representing its positive instance, and B —> A
representing its negative instance. If an orientation A —> B

 

112 /310's112u1n0fp10}x0"soiJBuiJOJuioiq/ﬁduq 11101} papeolumoq

91oz ‘Og isnﬁnV uo ::

D.Silverbush and R.Sharan

 

0.8

 

 

0.6

 

 

0.5 . '

 

0.4

 

0.3

0.2

 

0.1

 

o precision

I recall
0 i . . . i i
0 2 4 6 8 10 12

it Expansion Rounds

 

 

Fig. 1. Performance as a function of the number of expansion rounds
used. The conﬁdence cutoff in these experiments is set to 0

exceeds the confidence cutoff then it is classiﬁed as positive.
As expected, a higher conﬁdence cutoff yields a higher precision
[TP/(TP+ FP)] and lower recall [TP/(TP+ FN)]. More rounds
of expansion increase recall and lower the precision. The
performance of the algorithm for different choices of a conﬁ-
dence cutoff and number of expansion rounds is summarized
in Figures 1 and 2.

As discussed earlier, co-complex interactions are not likely to
have a preferred orientation. To test how frequently our algo-
rithm assigns directions to such interactions, we evaluated our
results against a list of 393 known complexes as annotated by the
Gene Ontology (GO) (Ashburner et al., 2000) and downloaded
from Saccharomyces Genome Database (SGD) (Cherry et al.,
2012) (June 2011). We found that 9% (720) of the interactions
in the network lie within known complexes. Using a conﬁdence
cutoff of 0, 50% of all interactions in the network are assigned a
direction, but only 3.4% of those (139 interactions) lie within
known complexes. This number is significantly small compared
with the random expectation (hypergeometric P<1.17’70) test-
ifying the quality of our predictions.

To study the effect of the amount of causewffect pairs on the
orientation, we applied the algorithm with increasing portions
(chosen at random) of pairs. As evident from Figure 3, the
more pairs the higher are the measured recall and precision, sup-
porting our use of the causewffect pairs to guide the orientation.
A high percentage (~93%) of the knockout pairs are satisﬁed
throughout the experiments. Our results seem more robust to
variations in the percentage of directed interactions in the
input network. Even when eliminating the KPIs, an F-measure
of 0.26 was attained (cutoff: 0, no expansion rounds).

To evaluate the scalability of the method, we downloaded the
full set of PPIs from BioGrid (Stark et ai., 2006) (October 2013),
containing 89 512 unique interactions. Although the preprocess-
ing time increased to 5min, the ILP solution was still obtained in
under a second. The orientation obtained had high quality: 2061
(50%) of the 4091 PDIS were oriented with confidence, and 1691

0.8

 

0.7

 

 

0.6

0.5

 

0.4

 

 

0.3

0.2

 

0.1

 

o preciosn

I recall
0 i . . .

0 0.5 1 1.5 2

 

 

Conﬁdence Cutoff

Fig. 2. Performance as a function of the conﬁdence cutoff used. The
number of expansion rounds for all experiments is 10 (11 iterations)

0.8

 

0.7 . °

 

0.6

 

0.5

 

 

0.4

0.3 - '

 

0.2

 

0.1

 

6 precision
I recall

 

 

0% 20% 40% 60% 80% 100%
% pairs

Fig. 3. Performance as a function of the percentage of cause-effect pairs
guiding the orientation. The conﬁdence cutoff in these experiments is set
to 0 and there are no expansion rounds

(82%) of the orientations were accurate (cutoff: 0, no expansion
rounds). Expectedly, using a higher conﬁdence cutoff yielded
higher precision values (e.g. 90% for a cutoff of 1).

3.3 Comparison to previous work

We compared our approach with two previous state-of-the-art
methods: the MIXED algorithm (Silverbush et al., 2011) and the
random orientation followed by local search algorithm of (Gitter
et al., 2011). Below we provide precision, recall and F-measure
values for each approach, where the latter combines both

 

1452

112 /310's112u1n0fp10}x0"soiJBuiJOJuioiq/ﬁduq 11101} papeolumoq

91oz ‘Og isnﬁnV uo ::

Network orientation

 

precision and recall into a single value of their harmonic mean:

_ _ precision * recall
F measure _ 2 * (precision+ recall ‘

The results of the comparison to MIXED are shown in Figure 4,
where SHORTEST was applied in its maximum coverage setting.
The 8-fold recall increase by SHORTEST is dramatic, albeit at the
price of lower precision. To investigate the precision differences
further, we compared both algorithms performances over the
subset oriented by both. In this subset, both approaches inferred
identical orientation, achieving 94.8% precision over this evi-
dently easier subset.

We used an analogous procedure to infer the directions of the
smaller subset of KPIS, hiding its directions while keeping the PDIS
as a directed subset and guided by the same set of knockout pairs
as in the previous experiment. We were able to orient with con-
ﬁdence 1077 (79.2%) of them, orienting correctly 600 (56%) with
an F-measure of 0.49. In comparison, the MIXED approach ori-
ented 52 (3.8%) of the edges, orienting correctly 46 (88.4%) with
an F-measure of 0.065. As before, within the easier subset of

4,500 4,091 4.091

4,000

 

3,379
3,500

3,000
2,233 El all test edges
2,500 I covered
2,000 I precnse

1,500

Number of test edges

1,000

 

300

500 285

mixed shortest

F-measure: 0.13 0.61

Fig. 4. Performance comparison of MIXED and SHORTEST

edges oriented by both methods, a much higher precision of
85.4% was obtained.

To compare with the method of (Gitter et al., 2011), we used
the same data and network used in their article (A.Gitter, private
communication). The unweighted PPI network was extracted
from (Stark et al., 2006) spanning 3446 proteins and 10945 un-
directed interactions. To guide our orientation, we used the same
sourceetarget pair set manually chosen by Gitter et a]. (2011). A
test set was extracted from KEGG (Kanehisa and Goto, 2000)
and the Science Signaling Database of Cell Signaling. It contains
91 directed interactions among 69 proteins. Gitter et al. (2011)
oriented 2447 interactions of the initial network. Their orienta-
tion oriented 55 of the 91 tested directed interactions (60.4%), of
which 37 orientations were accurate (67.3%). Applying our al-
gorithm in its maximum recall setting, resulted in orienting 5458
interactions among 2221 proteins, >2-fold increase compared
with Gitter et al. (2011). On the test set, our method oriented
with confidence 79 interactions (86.8%), of which 61 orientations
were accurate (77.2%), providing both higher recall (67.0% ver-
sus 40.7%), higher precision (77.2% versus 67.3%) and achieving
a higher F-measure of 0.71 compared with 0.51. The comparison
is summarized in Tables 1 and 2 and depicted in Figures 5 and 6.

As pointed out by Gitter et a]. (2011), scalability is an import-
ant issue for methods analyzing high-throughput datasets, espe-
cially because current data are incomplete and networks for
other organisms may be larger than those for yeast. Thus
Gitter et al. (2011) had examined their running time using the
different algorithms suggested in their paper. We compared our
running time when using the same dataset. Running our
algorithm one iteration only (which includes running the ILP
for each test edge to determine confidence), reaching next to
identical recall as Gitter et al. (2011) and much higher
precision, took 8s on average, faster than all algorithms used
in Gitter et al. (2011).

Running our approach when allowing the maximum number
of expansion rounds up to exhaustion (reaching ﬁve iterations in
total), reaching higher recall and higher precision, took 75s,

Table 1. A comparison of GITTER and SHORTEST for different numbers of expansion rounds. The best score for each measure is

 

 

highlighted

Performance measure SHORTEST#0 SHORTEST#1 SHORTEST#2 SHORTEST#3 SHORTEST#OO GITTER
Precision (%) 81.6 79.0 79.5 76.9 77.2 67.3
Recall (%) 44.0 53.8 63.7 65.9 67.0 40.7
F-measure 0.57 0.64 0.71 0.71 0.72 0.51

 

Table 2. A comparison of GITTER and SHORTEST for different conﬁdence cutoffs. The best score for each measure is highlighted

 

 

Performance measure SHORTESTconf> 0 SHORTEsrcmrZ 1 SHORTEsrmnrZ 2 SHORTEsrmnrZ 3 GITTER
Precision (%) 77.2 74.6 82.0 90.9 67.3
Recall (%) 67.0 58.2 45.1 33.0 40.7
F-measure 0.72 0.65 0.58 0.48 0.51

 

 

1453

112 /310's112u1n0fp10}x0'sonuIJOJuIOIq/ﬁduq quII papeolumoq

91oz ‘Og isnﬁnV uo ::

D.Silverbush and R.Sharan

 

1.0

O Shortest
O Gitter
0.9
2
1 2
0.8 . . 3°C
99
C
.9
u.
‘g 0.7
3.: O
0.6
0.5
0.4
0.4 0.5 0.6 0.7 0.8 0.9 1.0
RecaH

Fig. 5. Performance comparison of GITTER and SHORTEST using different
number of expansion rounds. Labels denote the number of expansion
rounds used by SHORTEST

23
O
22.5 22
O O 21.5 20.5
0.8 o 21 ..>0
0
O
0.6
C
.9
.2
U
E
D.
0.4
0.2
o Shortest
O Gitter

0
0.00 0.10 0.20 0.30 0.40 0.50 0.60 0.70 0.80

Recall

Fig. 6. Performance comparison of GITTER and SHORTEST using different
conﬁdence cutoff Labels denote the conﬁdence cutoff used by SHORTEST

challenged only by the random approach. Running time is pre-
sented in Table 3.

4 DISCUSSION

The orientation of a network is key to understanding its func-
tion. Here we have presented the SHORTEST approach, which
allows us for the ﬁrst time to conﬁdently orient the majority of
the edges in a network. The most natural use of such an orien-
tation is in enhancing methods for pathway inference.
Speciﬁcally, current pathway inference algorithms, like Scott
et al. (2006), receive as input an undirected PPI network and
search for likely paths that start and end at speciﬁc proteins.

Table 3. Running time comparison

 

 

SHORTEST Gitter et al.

No Unlimited RANDOM MIN-SAT MAX-CSP
Expansion Expansion

8.0 75.0 16.2 2742.5 10806.7

 

Note: Algorithm run times in seconds. The full dataset was used, with 256 sourceL
target pairs.

The search space of such methods can be greatly reduced by
the orientation information.

To test the potential utility of our orientation method in a
pathway inference context, we checked its power in ﬁltering can-
didate pathways by their agreement with the predicted orienta-
tions. To this end, we inspected the sourceetarget pairs connected
by more than one possible pathway within the networks in
Section 3.3: (i) In the orientation instance because of Gitter
et al. (2011), there are 740 possible shortest paths from source
to target (6.2 paths per sourceetarget pair). However, when ﬁl-
tering these paths against the conﬁdent orientation predictions,
only 589 (4.9 on average per pair) remain. (ii) In the orientation
instance because of Silverbush et al. (2011) there are 46 782 short-
est paths from source to target (11.9 on average per pair), of
which only 28 273 (7.2 on average per pair) agree with the con-
fident orientations. Thus, the use of our method can potentially
reduce the search space by up to 40%.

ACKNOWLEDGEMENTS

The authors would like to thank Dr. Anthony Gitter for his help
in the comparison to Gitter et al. (2011).

Funding: R.S. was supported by a research grant from the Israel
Science Foundation (grant no. 241/ 1 1). This study was supported
in part by a fellowship from the Edmond J. Safra Center for
Bioinformatics at Tel-Aviv University.

Conﬂict of Interest: none declared.

REFERENCES

Arkin,E.M. and Hassin,R. (2002) A note on orientations of mixed graphs. Discrete
Appl. Math., 116, 2717278.

Ashburner,M. et a]. (2000) Gene ontology: tool for the uniﬁcation of biology. The
Gene Ontology Consortium. Nat. Genet., 25, 25729.

Blokh,D. et a]. (2013) The approximability of shortest pathbased graph orientations
of proteineprotein interaction networks. J. Comput. Biol., 20, 9457957.

Breitkreutz,A. et a]. (2010) A global protein kinase and phosphatase interaction
network in yeast. Science, 328, 104}1046.

Cherry,J.M. et a]. (2012) Saccharomyces genome database: the genomics resource of
budding yeast. Nucleic Acids Res., 40, D7007D705.

Dorn,B. et a]. (2011) Exploiting bounded signal ﬂow for graph orientation based on
cause—effect pairs. Algorithms Mol. Biol., 6, 21.

Elberfeld,M. et a]. (2013) Approximation algorithms for orienting mixed graphs.
Theor. Comput. Sci., 483, 9&103.

Fields,S. (2005) High—throughput two—hybrid analysis. FEBS J., 272, 53915399.

Gavin,A. et a]. (2002) Functional organization of the yeast proteome by systematic
analysis of protein complexes. Nature, 415, 1417147.

 

112 /310's112u1n0[p10}x0'sonuIJOJuIOIq/ﬁduq quII papeolumoq

91oz ‘Og isnﬁnV uo ::

Network orientation

 

Gitter,A. et a]. (2011) Discovering pathways by orienting edges in protein inter—
action networks. Nucleic Acids Res., 39, e22.

Hu,Z. et a]. (2007) Genetic reconstruction of a functional transcriptional regulatory
network. Nat. Genet., 39, 683$87.

Kanehisa,M. and Goto,S. (2000) Kegg: kyoto encyclopedia of genes and genomes.
Nucleic Acids Res., 28, 27730.

MacIsaac,K. et a]. (2006) An improved map of conserved regulatory sites for sac—
charomyces cerevisiae. BMC Bioinformatics, 7, 113.

Medvedovsky,A. et a]. (2008) An algorithm for orienting graphs based on cause—
effect pairs and its applications to orienting protein networks. In: Crandall,K.
and Lagergren,J. (eds) Algorithms in Bioinformatics. Lecture Notes in Computer
Science. Vol. 5251, Springer, Berlin, Heidelberg, pp. 227232.

Navlakha,S. et a]. (2012) A Network—based approach for predicting missing path—
way interactions. PLoS Comput. Biol., 8, e1002640.

Ourfali,O. et a]. (2007) SPINE: a framework for signaling—regulatory pathway in—
ference from cause—effect experiments. Bioinformatics, 23, i35%i366.

Scott,J. et a]. (2006) Efﬁcient algorithms for detecting signaling pathways in protein
interaction networks. J. Comput. Biol., 13, 1337144.

Silverbush,D. et a]. (2011) Optimally orienting physical networks. J. Computat.
Biol., 18, 143771448.

Stark,C. et a]. (2006) Biogrid: a general repository for interaction datasets. Nucleic
Acids Res., 34 (SuppL 1), D5357D539.

Vinayagam,A. et a]. (2011) A directed protein interaction network for investigating
intracellular signal transduction. Sci. Signal, 4, rs8.

Yeang,C.—H. et a]. (2004) Physical network models. J. Comput. Biol., 11,
2437262.

Yu,H. et a]. (2008) High—Quath binary protein interaction map of the yeast inter—
actome network. Science, 322, 104410.

 

1455

112 /310's112u1n0[p10}x0'sonuIJOJuIOIq/ﬁduq quII papeolumoq

91oz ‘Og isnﬁnV uo ::

