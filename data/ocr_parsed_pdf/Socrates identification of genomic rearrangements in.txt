BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

 

 

 

 

 

 

55,2\Ewowsmoddmmowoio~&o:~=£¢o~m\

J.Schr6der et al.

 

mapping reads and low-quality alignments. This stage is highly
conﬁgurable via command line arguments. For further details,
refer to the Supplementary Material and the software documenta-
tion. Preprocessing produces a FASTQ ﬁle of long soft clip se-
quences and a BAM ﬁle of reads with short soft clips. The
threshold between long and short soft clips is a user-deﬁned par-
ameter (25 nt by default).

(2) Re-alignment: In this stage, the algorithm uses on a short read
aligner to re-map the long soft clipped parts of reads. In the
output BAM ﬁle, Socrates maintains the associations between
the new alignment region of the long soft clipped sequence,
which we refer to as the re-aligned locus, and the original alignment
region, which we term the anchor.

(3) Split read clustering: This works on the re-aligned soft clip ﬁle and
produces a data structure of split-read clusters that share the same
anchor and re-aligned regions. A cluster may contain one or more
reads. Clustering is the most computationally expensive stage. See
Section 2.1 for details.

(4) Cluster pairing: Clusters are parsed, and cluster pairs are formed
when two clusters provide reciprocal support for a potential re-
arrangement. This step produces part of the algorithm’s ﬁnal
output. See Section 2.2 for details.

(5) Matching short soft clips: Short soft clip sequences are used to try
to ﬁnd reciprocal support for the remaining unpaired clusters by
directly searching the cluster anchor region using short soft clip
sequences derived from the re-aligned locus. This stage adds extra
cluster pairs to the output, further improving sensitivity. Further
details follow in Section 2.3.

2.1 Split read clustering

The clustering stage groups split reads that support a putative genomic
rearrangement involving a pair of break points from one side of the fusion.
It identiﬁes a cluster of anchored reads on one side and associated re-
aligned soft clips on the other side of the fusion. Socrates parses the
BAM ﬁle of the re-aligned long soft clips, creating new clusters and, if
necessary, merges them with already existing clusters that support the
same break point. Clusters are merged if (i) their anchor loci overlap
and include the same break point, and (ii) their re-aligned loci overlap
and include the same break point. However, a small degree of ‘wobble’
in the soft clip start locations is observed in a low proportion of reads
(beginning too soon or too late with respect to the actual break point or the
consensus of soft clip starts). This appears to be associated with sequencing
errors and bases with low-quality scores. To account for this, we allow
merging of two clusters even if their soft clip positions are slightly different
(up to 5 nt apart by default). To perform clustering a data structure con-
taining the anchor locus (including a speciﬁc break pointithe last aligned
position before the soft clipping starts), the re-aligned locus (including a
break point) and a voting matrix for the re-aligned and anchor locus
consensus sequence is used. The voting matrix is used to call the consensus
sequence on either side of the break point. The clusters are kept in a sorted
data structure to keep the search operation efﬁcient.

2.2 Cluster pairing

Reciprocal support of break point events is at the core of the Socrates
algorithm and is key to reducing false-discovery rates. A potential fusion
will be predicted only if reads from both sides of the break points show
soft clip evidence to support the event. This technique reduces false-
positive SVs resulting from singular stochastic events such as chimeras.
The cluster pairing stage of the algorithm identiﬁes such reciprocal sup-
port. If we consider two clusters C1 and C2, which consist of anchor and
re-aligned regions, there are three cases to deal with:

Blunt end joining: Blunt end joining of two loci is the most straight-
forward case to identify (Fig. 1A). Two clusters are paired if the re-a-
ligned region of C1 ends at the C2 anchor region start. In other words, the
re-aligned C1 soft clips map to the C2 anchor region, immediately adja-
cent to the C2 soft-clip site. Additionally, C2 re-aligned region must co-
incide with the C1 anchor region with single nucleotide stringency.

Micro-homology: Micro-homologies are short (lilOnt) identical se-
quences, which may be found at either side of break points. If the true
break point is in a region of micro-homology, its exact location cannot be
determined. Furthermore, the reciprocal support for the break point does
not identify exactly the same location. Thus, in the presence of a micro-
homology, the resolution is no longer single nucleotide. The reads that
contribute to C1 clip exactly at the end of the micro-homology (Fig. 1B).
In C2, the reads again clip after the region of micro-homology (at its start
on the negative strand). As a result, the procedure for blunt end joining
described above will not sufﬁce to pair the two clusters. The break points
identiﬁed by each cluster are A1 and A2 bases apart. In this case, Socrates
tests whether (i) the difference in break points is consistent (A1 = A2) and
(ii) the homologous sequence (the stretch between the anchor break
points and re-aligned loci) is identical in both clusters (here we use the
consensus sequence for comparison). If both conditions are fulﬁlled, the
micro-homology is identiﬁed, and the two clusters are paired up.

Untemplated sequence: A third possible scenario is the presence of
untemplated sequence between the two break points fusion (Fig. 1C).
These are short sequences that are part of the normal genome that are
generated during DNA repair. In this case, the extracted soft clip contains
untemplated sequence and when re-aligned to the reference, the re-aligned
soft clip sequences will themselves be soft-clipped (by 6) nt). There is an
upper limit to the size of the untemplated sequence that Socrates can deal
with, which depends on the read length. Socrates keeps track of this
inserted sequence and includes it in the output. The insertion of untem-
plated sequence at a break point can also coincide with micro-homologies
(Supplementary Fig. S2). In this case, the break point detection again has
single-nucleotide resolution.

Finally, we point out that this scenario also applies if there are two
break points in proximity to each other (fusion A to B1 and fusion B2 to C
with B1 and B2 in proximity, say). In this case, the re-aligned soft clips will
be placed on locus A and C omitting B as soft clips of the re-aligned
locus. As a result, Socrates will detect a break point A to C with novel
insertion sequence equal to B17B2.

After successfully pairing two clusters, Socrates will parse the short
soft clip input ﬁle and search directly for additional read support. This
step accumulates more evidence supporting the break point and may be
useful for genotyping. Every soft clip in the data that clips at the anchor
loci and then matches the re-aligned consensus sequences is noted as a
supporting read for the break point event.

2.3 Short soft clip cluster pairing

In the ﬁnal stage of the algorithm, Socrates handles all clusters that have
not been matched up as pairs in the previous stage. Socrates attempts to
ﬁnd supporting evidence for existing clusters by means of reciprocal short
soft clip support (similar to the gathering of short soft clip support in the
previous stage). This is necessary if a particular break point has long (and
therefore remapped) soft clips on one side only. This may occur if there is
low coverage on one side of a break point due to low mappability or high
or low GC content.

In the short soft clip cluster pairing stage, the short soft clips from the
re-aligned locus of unpaired clusters are extracted from the BAM ﬁle.
More speciﬁcally, reads that overlap the re-aligned break point of the
cluster are extracted. The algorithm then follows the same principles as
the regular cluster pairing with the following difference. Because short
soft clips are not remapped to the reference genome (due to the high
probability of multi-mapping), they have to be compared by direct
search with the cluster’s anchor locus. This is efﬁciently done because

 

1066

ﬁm'spzumol‘pmJXO'sopeuuopuorq/ﬁdnq

Socrates

 

Socrates keeps track of the anchor locus consensus sequences. All short
soft clips that match the cluster’s anchor sequence with at least 90%
identity are considered as reciprocal support to the cluster. If sufﬁcient
support can be gathered this way, Socrates considers the cluster as a valid
break point and includes it in the output. The level of support is included
in the output for use in ﬁltering. The same details that arise in the event of
micro-homologies and untemplated sequence have to be considered in
short soft clip cluster pairing as well. Short soft clip cluster pairing pro-
vides a mechanism to further increase Socrates’ sensitivity. On testing
data, we found the sensitivity of the algorithm to increase by up to
15% compared with using cluster pairing only. The trade-off is a likely
increase in false positives, but the minimum support parameters can
be used to keep this under control. At the cost of reduced sensitivity,
short soft clip pairing may be ignored by setting the short soft clip pair
threshold to 0.

2.4 Implementation and algorithmic complexity

The main Socrates algorithm is implemented in java. A driver script and
several utilities are implemented in python. Socrates includes a program
that identiﬁes somatic SVs from matched-tumour normal pairs, which the
driver script can call. Additionally, it can also annotate whether predicted
break points overlap known repeats. Socrates is designed to run efﬁ-
ciently on modern computing resources. The implementation supports
parallelization, scaling to any number of processors on a shared
memory machine and memory mapping of intermediate ﬁles, allowing
for efﬁcient usage of memory and improved speed. During preprocessing,
all chromosomes are processed in parallel; in the clustering stage,
chromosomal segment pairs are processed in parallel with the space dis-
tributed evenly between processors.

The most complex stages of the algorithm are the cluster pairing and
short soft clip cluster pairing steps: both of them are bound by 0(N2),
where N is the size of the input data [comparing 0(N) clusters with 0(N)
reads]. However, the constants for these steps are small. The most time-
consuming stage of the algorithm is actually the cluster generation [which
is an 0(N log N) search for matches for 0(N) new clusters in a sorted list].
A detailed breakdown of the theoretical complexities of Socrates’ differ-
ent stages and the implementation is presented in the Supplementary
Material.

2.5 Testing and simulated SVs

To assess Socrates’ ability to detect structural variations and to compare
it objectively with other methods, we ran Socrates on simulated data for a
variety of types of genomic rearrangements. To achieve this, we de-
veloped a software tool that simulates random SVs of various types
and sizes. It divides the reference genome into bins of equal sizes and
creates one SV at a random location within each bin. Deletions, trans-
locations (either moving or duplicating a random segment into the bin),
inversions and tandem duplications are simulated with equal probability.
The SV feature size is also chosen randomly from small (10(P200 nt),
medium (50071000 nt), large (200(P10 000 nt) and extra large (20 00(P
100 000 nt). Additionally, tiny (5730 nt) novel insertions were also simu-
lated. From the resulting somatic genome, we simulated reads using
SimSeq (John, 2010). These reads are then mapped to the reference
genome using Bowtie2 (using the flocal ﬁag). We compared Socrates
to BreakDancer (1.3) (Chen et al., 2009), CLEVER (2.0rc1) (Marschall
et al., 2012), CREST (0.0.1) (Wang et al., 2011), DELLY (0.0.9) (Rausch
et al., 2012), Pindel (0.2.4t) (Ye et al., 2009) and PRISM (1.1.6) (Jiang
et al., 2012). These methods sample a wide range of approaches in using
PE and/or SR evidence. The algorithms were typically run with default
parameters (for more details see Supplementary Section S5). It should be
noted that we used a consistent set of SV features to test each method. In
some cases, methods did not perform well because they were not

speciﬁcally designed for all SV types. We have noted this carefully
where it occurs.

We also applied Socrates to several real cancer datasets: an Eprmyc
mouse lymphoma, a human melanoma and prostate cancers sequenced
on an Illumina HiSeq platform using PE 100 nt reads. The Eprmyc mice
were maintained according to Peter Mac Animal Experimentation Ethics
Committee protocol E352. Matched normal (buffy coat) and melanoma
tissues were obtained from a consenting patient via Peter Mac Human
Research Ethics Committee protocol 10/02. Experimental validation is
described in the Supplementary Materials.

3 RESULTS

3.1 Evaluation on simulated SVs

To assess the performance of Socrates and several other meth—
ods, we simulated SV data and applied each tool. Simulated
events were treated as genomic intervals, and we classiﬁed a pre—
dicted SV as a true positive (TP) and recalled if both ends were
correct to within a small margin. For single—nucleotide resolution
methods (Socrates, Pindel, CREST and PRISM), this was set to
10 bp to allow for micro—homologies around the break point
sites, which unavoidably leads to loss of accuracy. For the PE
methods, BreakDancer and CLEVER, which do not have single—
nucleotide resolution in general, we allowed a tolerance of
250 bp. If there are redundant calls for a single event, only one
was counted as a TP, the remainder were tallied (see
Supplementary Table S1) and disregarded. Break points not
identiﬁed are counted as false negatives (FN), and all remaining
calls predicted by the algorithms as false positives (FP).

3.1.1 Escherichia coli simulations We ﬁrst simulated rearrange—
ments in the E.coli reference genome (K12 strain). Escherichia
coli was chosen for initial simulations because it has a simple and
short (4.6 Mbp) genome, which should make the detection of
rearrangements and other variations easy. The parameters for
this simulation were 110 kbp bins (42 events in total), 300 bp
DNA fragment size and a standard deviation of 30 bp. We re—
peated the experiment 10 times at each average coverage of 7.5,
15 and 30x.

Figure 2A (ﬁrst and third panels) summarizes the precision (or
positive predictive value, deﬁned by TP/ (T P + FP)) and recall (or
sensitivity or true—positive rate, defined by TP/(TP + FN)) of
each method on a consistent set of simulated genomic rearrange—
ments in the E.coli genome. Increasing the coverage improves the
recall for most of the methods. Pindel and PRISM particularly
benefit from a higher read depth. Socrates performs well across
all coverage levels. The ranking of the algorithms stays consistent
across the coverage range, except for BreakDancer, which shows
more robust performance at low depth of coverage. The preci—
sion of several algorithms decreased with increasing sequencing
coverage. In particular, DELLY and PRISM have signiﬁcantly
higher false—positive rates at 30x compared with 7.5x. The pre—
cision of CREST, Pindel and Socrates is constant at about 1. We
speculate that the relatively high false—positive rates for DELLY
and PRISM were due to repeat events (and the misalignments
that they can cause) in the genome: they tend to be clustered in
focussed regions linking to various other loci in the genome. An
increase in coverage is likely to produce more spurious evidence
due to misalignments.

 

1 067

ﬁm'spzumol‘pmjxo'sopeuuopuorq/ﬁdnq

Precision: E. coli Precision: chr12 Recall: E. coli Recall: chr12

 

CLEVER CREST DELLY I PRISM

 

/3.10's112um0fp10}x0'sopBuiJOJuioiq”:duq

Socrates

 

best category. It achieves a recall of 82%. There is a signiﬁ—
cant spike for large deletions being missed by CLEVER (it is
designed to detect insertions and deletions from 2(P
50,000 bp). BreakDancer struggles with short deletions.

o Translocations: This category consists of both randomly
copied and moved genome segments. CLEVER and Pindel
were not designed to detect translocations. Unsurprisingly,
CLEVER ﬁnds no translocations, but Pindel does detect
some as insertions. The other algorithms were effective in
this category.

0 Inversions: DELLY is the most effective tool to predict in—
versions. It misses only 2 out of 180 break points. Socrates is
competitive and misses only 7. PRISM has low recall for
short inversions. CLEVER is not designed to predict inver—
sions and ﬁnds none.

0 Tandem duplications: DELLY, PRISM and CLEVER have
issues with short tandem duplications (shorter than the
simulated fragment length). This would be due to the map—
ping distance of paired ends not being evaluated as signiﬁ—
cantly discordant. CREST and Socrates also show lower
recall for short duplications (as it is difﬁcult for the aligner
to place reads within the sequence). BreakDancer shows the
best performance for tandem duplications (it misses only
two for the entire dataHespite having to rely exclusively
on paired end information, which can be difﬁcult to inter—
pret for short feature sizes. Despite not explicitly handling
them, CLEVER performs well on large tandem duplica—
tions, particularly > 100 nt, treating them as insertions.
Pindel does not predict any features in this category.

Novel insertions of tiny size were also simulated. Because they
occur in only one size category ($30 nt), we do not show these in
Figure 2. PRISM performs best for novel insertions and recalls
97% of them, followed by Pindel (93%) and Socrates (65%). The
other algorithms do not predict non—templated inserts at alli
most of the algorithms assessed here were not designed to predict
such features to begin with. We speculate that CREST fails at the
BLAT alignment stage, because small novel sequences compli—
cate the alignment results. BreakDancer is not able to detect a
significant aberration in insert sizes of PE reads at this small size
level, and this is just at the cusp of where CLEVER operates.
Socrates only comes third in this category but is the only algo—
rithm that actually outputs the inserted sequence, instead of just
flagging a break point.

3.1.4 Mapping algorithm dependency All the experiments dis—
cussed here are conducted with reads that were mapped with the
Bowtie2 (2.0.6). The ‘isensitive—local’ option was used (which is
the default conﬁguration for local alignments. The local align—
ment mode is beneﬁcial to obtaining good soft clipping results
around SVs). However, other aligners, such as BWA, can also be
used. We found BWA to be less sensitive to outputting soft
clipped reads when run with standard parameters. The recall of
Socrates in simulations on chr12 with 15>< coverage drops
from >81 to 67%. Similarly, the recall achieved by CREST de—
creases from 68 to 61%. DELLY did not suffer from the same
decrease in sensitivityiprobably due to its relying more on
paired end evidence than soft clipped reads. DELLY’s recall

remained the same or even increased slightly when using BWA
mappings. BWA can be run in the more sensitive alignment
mode ‘bwasw’ that employs SmithiWaterman style alignments
for increased accuracy, but we found it too slow for a whole
genome scale.

3.1.5 Simulation results summary A range of types of SV detec—
tion algorithms were tested on randomly generated variations in
two organisms. Experiments were replicated to ensure reprodu—
cibility of the results, and two different sequence simulators
[SimSeq and wgsim (data not shown)] were tested with consistent
results. The analysed algorithms can be broadly distinguished in
two classes: (i) methods that use and in some cases are primarily
reliant on fragment coverage (PE information) and (ii) methods
relying on sequence coverage (SR methods). Interestingly though
somewhat predictably, the results reveal that the sequence cover—
age—dependent algorithms (CREST, Pindel, Socrates) show a
larger decline in recall than the other tools as coverage decreases.
However, the speciﬁcity of the SR methods is better across the
experiments. We attribute this to the more stringent nature of the
evidence. SR methods require multiple reads to support an event
at (nearly) a single nucleotide location.

We were particularly interested in the comparison between
Socrates, CREST and Pindel. While distinct in their approaches,
they are most comparable in design (making use of sequence
coverage and soft clipping). The three methods are similar in
their overall precision and dependency of recall on coverage.
Socrates shows highest sensitivity between the three methods
throughout the experiments, which was a key focus of the algo—
rithm’s design. CREST and Pindel are more conservative meth—
ods that potentially require more evidence to recall
rearrangement events (for example, CREST struggles with
tandem duplication and inversion events at a size level that re—
duces the evidence available to the algorithms).

3.2 Application to tumour genome data

We next tested Socrates on several real cancer datasets. The first
was derived from the Euimyc transgenic mouse, which spontan—
eously develops lymphomas (Adams et al., 198 5). The structure
of the Euimyc transgene is well described (Adams et al., 1985;
Corcoran et al., 1985). It consists of the c—myc gene in a pUCl2
cloning vector with the Eu promoter of the IgH gene inserted
upstream and the <I>Xl74 bacteriophage inserted into the 3/ UTR
(Fig. 3). We sequenced the genome of an Euimyc tumour and a
DNA sample from the tail of the same mouse. The sequencing
data consisted of 100 nt paired end Illumina reads with coverage
of approximately 30>< for each sample and average fragment size
of 213nt. The small fragment size means that about half of the
fragments have overlapping PE reads, and this may be an issue

A B C [E F G H
chr19 chr15 chr12 chr15 ox pUCi 2
IgH Eu c-Myc

Fig. 3. Structure of the Euimyc transgene. Sizes of regions are not to
scale, but are indicative. A—H indicate fusions; BiF are known fusions; A
and H are novel. Fusion G is the end of the pUC12 reference sequence
and is due to the circular topology of the cloning vector. The break point
at A is promiscuous, linking chr15 to chr9 and H

 

1 069

/3.IO'S[BIIm0[p.IOJXO'SOIJBIIIJOJIIIOIq/ﬂdnq

J.Schr6der et al.

 

for methods using PE information. We applied Socrates and
several other break point—detection tools to the Euimyc data
(Table 1). Socrates detected the three known genomic fusions
(B, C and F), as did CREST and Breakdancer, while DELLY
did not detect any of these. Only Socrates and CREST were able
to identify the insertion site of the transgene into chr19. This is a
novel ﬁnding. Socrates also identiﬁed several novel fusions that
were not previously known. None of the methods detected the
<I>Xl74 insertion (Fig. 3, DE), because the <I>X genome was
omitted from the reference sequence. Overall, Socrates dramat—
ically outperformed the other methods on these data.

The main reason for the poor performance of the other meth—
ods is likely to be the unfortunately small average fragment size.
This means that the unsequenced region between reads is on
average only 13 nt long and that about half of the reads actually
overlap. This greatly reduces the usable coverage available to the
PE methods such as BreakDancer and the first stage of
DELLY’s alignment, thus reducing their sensitivity. DELLY in
particular is not designed to detect inter—chromosomal fusions, so
it can only detect the break point on the cloning vector. The
complexity of break point H is particularly challenging for
the methods; it is promiscuous (sharing one coordinate with
the fusion to chr19), and features a 10—bp novel insertion between
chr15 and pUC12. Only Socrates is equipped to recover this
break point from the data.

We also applied Socrates to six prostate cancer tissue samples
and six matched whole—blood samples. Each sample was
sequenced to an average of 40x coverage (100 bp paired end).
Tumour break point predictions were filtered using whole—blood
predictions to provide an average of 4360 break points per
sample using Socrates’ most sensitive settings (1 cluster contain—
ing 1 long soft clip and 1 cluster containing 1 short soft clip). In
addition to DNA sequencing, RNA sequencing was performed
using benign tissue as a matched normal, with an average of 120
million reads per sample (100 bp paired end). Gene fusion can—
didates for each sample were determined using defuse by
McPherson et al (2011) on the RNA reads. On average, 315
candidate fusions were predicted for each sample. After filtering
with default parameters to enrich for high—conﬁdence fusions
(McPherson et al., 2011), defuse predicted 86 fusions per
sample on average. This is expected to contain a large number
of false positives. To improve performance, Socrates’ break
points were used to determine true fusion events via support
by matched rearrangements in the DNA. As the RNA—based
fusions are determined using mature RNA transcripts, the
break point resolution is at exon level. To relate DNA break

points to RNA fusion points, we looked for break points be—
tween the fused exon, and the next annotated exon (unfused).
This resulted in an average of three fusions per sample that were
supported by both RNA and DNA. Interestingly, only 60% of
these validated fusions appeared in the high—conﬁdence enriched
list produced using RNA and defuse ﬁltering parameters. In this
case, Socrates provides the ability to find fusion events that
would not normally pass filtering. Furthermore, by using
Socrates predictions to ﬁlter fusions, we were able to detect
fusion events with as little as 4 reads support in the RNA.
This highlights the ability of Socrates to improve gene fusion
detection. Table 2 highlights the comparison results between
Socrates and defuse.

Socrates is designed to be highly sensitive. We have found this
to be extremely useful when integrating different sources of data
(e.g. the known and inferred fusions in the Euimyc transgene
and RNA—seq data in prostate cancer). Using simulated data, we
also found it to be highly speciﬁc; however, on real tumour se—
quence data using its most sensitive settings without additional
filtering, it generates large numbers of predicted break points and
we assume these contain a large number of false positives. On the
Euimyc tumour using the most sensitive parameter settings,
Socrates called >36000 break points. This is not an isolated
problem: DELLY predicted >385 000 and BreakDancer >5000.
In the absence of additional data or models, more stringent
thresholding of coverage is needed.

On a human melanoma, sequenced to 60x coverage with
matched normal sequenced to 30><, Socrates predicted about
105000 SVs in the tumour when run using its most sensitive

Table 2. Comparison of Socrates and defuse results

 

Sample All defuse Socrates
High conﬁdence

Overlap (%)

 

1 340 84 6 5 (83%)
2 183 38 4 1 (25%)
3 431 134 3 3 (100%)
4 276 72 2 0 (0%)

5 220 68 1 1 (100%)
6 440 121 2 1 (50%)
Average 315 86 3 2 (60%)

 

Note: Socrates adds increased sensitivity and single—nucleotide resolution to the
RNA—seq data analysis.

Table 1. Detection of fusions associated with the Epfmyc transgene by different methods

 

 

Algorithm A B C F G H

19715 15712 12715 1&pUC12 pUC127pUC12 pUC12715
Socrates ./ / / / / /
CREST / l l l X X
BreakDancer X / / / / X
DELLY X X X X / X

 

Note: Fusions BiF are known (Fig. 3); others are novel or inferred.

 

1070

ﬁm'spzumofpmjxo'sopcuuopuotq/pdnq

Sacra tes

 

Table 3. Summary of Socrates predictions in different classes of repetitive
regions

 

Repeat class Sensitive Filtered

 

Normal Somatic Normal Somatic

 

Non-repetitive 5509 10957 (13%) 3176 226 (33%)

LINE 2338 8630 (10%) 1114 123 (18%)
Low complexity 195 1483 (2%) 63 17 (3%)
LTR 1052 2726 (3%) 555 42 (6%)
Satellite 8759 36315 (43%) 214 69 (10%)
Simple repeat 2734 11069 (13%) 571 122 (18%)
SINE 1532 12461 (15%) 621 79 (12%)

 

Note: Sensitive means at least one long soft clip and one short soft clip supporting
the fusion. Filtered means at least two long soft clips on each side.

settings (in comparison Delly predicted ~150 000; BreakDancer
7800). Increasing the stringency to two long soft clips on each
side of the break point reduces the number of breakpoints to
6992, of which 678 were somatic. We randomly chose 10 break
points from these somatic events for validation. Seven were vali—
dated unambiguously by PCR and sequencing (Supplementary
Fig. S9); in one case the Sanger sequencing extended to just 1 bp
past the break point and the result is inconclusive, and in the
other two cases, further optimization to PCR conditions is
required. Sanger sequencing also validated short insertions of
untemplated sequence in between one of the break points that
was predicted by Socrates. DELLY recovered just two of the
validated break points, and BreakDancer recovered one.
Increasing the threshold to ﬁve long soft clips further reduces
the number of somatic events to 111, but three of the validated
break points are now missed. We are thus satisﬁed to work with
a threshold of two long soft clips. More careful control of false—
positive and false—negative rates awaits large scale unbiased val—
idation of break points. Short soft clips remain useful to more
accurately estimate the absolute support and the mutant allele
frequency (MAF) of break points.

It is interesting to examine the genomic context of the predicted
SVs. Table 3 shows the absolute and relative abundance of differ—
ent repeat classes overlapping the Socrates predictions. The labels
refer to repeats that contain either of the two cluster coordinates
(or are within 10 nt of these). The results show that a dispropor—
tionate number of events are predicted in repetitive regions: only
13% of the somatic break points are not affected by repeats. This
number increases to 33% after basic filtering. Satellite repeats
make up a large proportion of the raw output and are reduced
to 10% after ﬁltering. We also observed that break points in sat—
ellite regions and simple repeats tend to have low MAF, which are
inconsistent with expected copy number ratios. This may suggest
that they are false positives that arise due to stochastic events such
as chimeric sequence formation in these repetitive regions and
leads to the possibility of filtering based on MAF (see
Supplementary Material for further discussion).

3.3 Performance

Finally, we assessed the speed of Socrates. In the runtime experi—
ments presented here, we used up to eight threads in parallel for

Table 4. Resource consumption comparison between the competing
algorithms on simulated data and real sequencing reads from a cancer
data set

 

 

 

Algorithm Chr12 30>< simulation Epfmyc
Run Max Run Max
time (min) memory (Mb) time (h) memory (Gb)
CREST 87 483 >50a NA
DELLY 53 337 33 8.6
Socrates 3 550 4 10.1

 

"CREST failed during the soft clip extraction stage after running over 50 h, so the
timing represents a lower bound. Runtimes are wall clock measures.

the cluster—generation stage. All the experiments on Chrl2 were
run on different datasets to avoid caching advantages for one
algorithm over the other. The other two compared algorithms do
not offer ad hoc parallelization%REST is run in parallel on all
the chromosomes on the Euimyc tumour data, giving it 22
threads to compute. Table 4 summarizes the results. Socrates is
an order of magnitude or more faster than the other methods. In
terms of memory, all the algorithms are essentially bound by the
same theoretic complexityithe size of the input data. Socrates
uses slightly more than CREST and DELLY, but even on a
whole—genome scale analysis not more than a modern desktop
computer would provide.

4 DISCUSSION

Socrates is a new break point—detection method based on split
reads. It is fast and memory efﬁcient. The main innovations in
Socrates are the automatic detection of micro—homologies and
untemplated sequences at fusion sites, and some of the details of
its implementation leading to its high speed. On simulated data,
Socrates recovers rearrangements across a broad range of types
and sizes. It is speciﬁc and highly sensitive. Its high sensitivity
makes it a powerful tool in the presence of additional informa—
tion, and we ﬁnd it is complementary to more conservative meth—
ods. On real tumour data without additional information, we
ﬁnd it impractical to run at its most sensitive settings, but it is
easily tuned. In the future, we plan to incorporate additional
types of evidence into the rearrangement prediction.

As NGS read lengths have increased, rearrangement predic—
tion methods have evolved from PE methods towards split read
and more recently hybrid methods. As this trend continues, it is
becoming more difﬁcult to generate libraries of fragments that
are large enough. This is especially true with small quantities of
DNA and Formalin—Fixed Parafin—Embedded (FFPE) tumour
samples. Thus, we may see a resurgence of pure split read
approaches. These offer higher sensitivity over the RP—guided
hybrid approaches because they can analyze the smallest devi—
ations from the reference genome on a single nucleotide level. In
cancers, sensitivity is also key to detect, and make sense of, sub—
clonality. High sensitivity has been a key design principle behind
Socrates.

 

1071

ﬁm'spzumofpmjxo'sopcuuopuolq/pdnq

J.Schr6der et al.

 

Funding: This work was supported by a National Health and
Medical Research Council (NHMRC) Project Grant (637357),
Victorian State Government Operational Infrastructure Support,
Australian Government NHMRC IRIISS, the Melbourne
Melanoma Project, the Victorian Cancer Biobank and the
Victorian Cancer Agency. SE. was supported by a Cancer
Council of Victoria scholarship. GM. and MC. were supported
by NICTA. NICTA is funded by the Australian Government as
represented by the Department of Broadband, Communications
and the Digital Economy and the Australian Research Council
through the ICT Centre of Excellence program. R.W.J. was sup—
ported by an NHMRC Principal Research Fellowship, as well as
The Cancer Council Victoria, The Leukaemia Foundation of
Australia and the Victorian Cancer Agency. MS. was supported
by fellowships from Pﬁzer Australia and VESKI. ATP. was
supported by an NHMRC Career Development Fellowship
(1003856) and The Lorenzo and Pamela Galli Melanoma
Research Fellowship.

Conﬂict of Interest: none declared.

REFERENCES

Abyzov,A. et al. (2011) CNVnator: an approach to discover, genotype, and char—
acterize typical and atypical CNVs from family and population genome sequen—
cing. Genome Res., 21, 9747984.

Adams,J.M. et al. (1985) The c—myc oncogene driven by immunoglobulin enhancers
induces lymphoid malignancy in transgenic mice. Nature, 318, 5337538.

Campbell,P.J. et al. (2008) Identiﬁcation of somatically acquired rearrangements in
cancer using genome—wide massively parallel paired—end sequencing. Nat.
Genet., 40, 7227729.

Campbell,P.J. et al. (2010) The patterns and dynamics of genomic instability in
metastatic pancreatic cancer. Nature, 467, 110971113.

Chen,K. et al. (2009) BreakDancer: an algorithm for high—resolution mapping of
genomic structural variation. Nat. Methods, 6, 677%81.

Corcoran,L.M. et al. (1985) Transposition of the immunoglobulin
heavy chain enhancer to the myc oncogene in a murine plasmacytoma. Cell,
40, 71779.

Greenman,C.D. et al. (2012) Estimation of rearrangement phylogeny for cancer
genomes. Genome Res., 22, 3467361.

Jiang,Y. et al. (2012) PRISM: pair—read informed split—read mapping for base—pair
level detection of insertion, deletion and structural variants. Bioinformatics, 28,
257672583.

John,J.S. (2010) Simseq. https://github.com/jstjohn/SimSeq (17 January 2014, date
last accessed).

Karakoc,E. et al. (2011) Detection of structural variants and indels within exome
data. Nat. Methods, 9, 17(rl 78.

Langmead,B. and Salzberg,S.L. (2012) Fast gapped—read alignment with Bowtie 2.
Nat. Methods, 9, 3577359.

Li,H. and Durbin,R. (2009) Fast and accurate short read alignment with Burrows—
Wheeler transform. Bioinformatics, 25, 17544760.

Marschall,T. et al. (2012) Clever: clique—enumerating variant ﬁnder. Bioinformatics,
28, 287572882.

McPherson,A. et al. (2011) deFuse: an algorithm for gene fusion discovery in tumor
RNA—seq data. PLoS Comput. Biol, 7, e1001138.

Medvedev,P. et al. (2009) Computational methods for discovering structural
variation with next—generation sequencing. Nat. Methods, 6 (Suppl. 11).
8137820.

Medvedev,P. et al. (2010) Detecting copy number variation with mated short reads.
Genome Res., 20, 161371622.

Miller,C.A. et al. (2011) ReadDepth: a parallel R package for detecting copy
number alterations from short sequencing reads. PLoS One, 6, e16327.

Rausch,T. et al. (2012) DELLY: structural variant discovery by integrated paired—
end and split—read analysis. Bioinformatics, 28, i3337i339.

Suzuki,S. et al. (2011) ClipCrop: a tool for detecting structural variations with
single—base resolution using soft-clipping information. BMC Bioinformatics, 12
(Suppl. 14), S7.

Wang,J. et al. (2011) CREST maps somatic structural variation in cancer genomes
with base—pair resolution. Nat. Methods, 8, 652%54.

Ye,K. et al. (2009) Pindel: a pattern growth approach to detect break points of large
deletions and medium sized insertions from paired—end short reads.
Bioinformatics, 25, 286572871.

 

1072

ﬁm'spzumofpmjxo'sopcuuowrorq/pdnq

