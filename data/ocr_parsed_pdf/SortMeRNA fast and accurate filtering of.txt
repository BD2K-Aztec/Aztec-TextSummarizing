BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

1a. Burst trie lookup table

(1 .(I u  :u g
5] H  (L {I

{I - - - i 51
%,#v
sliding" window w of length :3

window
. or sufh
continue
currenc
to travel 11
for remain»
ing part of
window

 

 

I
I
I
I
I
I
I
I
I
I
I
I
I
I
V

’I‘rie on an rRNA database

IHHID

0#1  1#l  2#l  34%1  4#l

j

:HIIHMIHHL 1:11am]

 

 

 

accept the window reject the window

4. accept the read if suf—

ﬁcient number of accepted
windows

 

/310'S[BIIJHOIPJOJXO'SOIIBLUJOJIIIOICI”Idllq

SortMeRNA

 

number of trie nodes by 80% while maintaining performance
similar to a hash table (Askitis and Zobel, 2010). Given a se—
quence v2, the Burst trie can store the preﬁx v as a link of trie
nodes and the sufﬁx 2 as an array of characters appended to the
last trie node. Normally, subtrees become more sparse in the
depth of a trie, and representing them as reduced ‘buckets’ of
contiguous memory preserves space and boosts cache efficiency.
When the number of sequences sharing a common prefix v
reaches a ﬁxed threshold, the appended bucket of sufﬁxes
bursts to form a new trie node and smaller sub—buckets. To op—
timize memory access during subtree traversal, the threshold size
of a bucket should be less than the lower—level cache. A system—
atic use of this trie can be observed in the fastest sorting algo—
rithm for large sets of strings, the Burstsort (Sinha and Zobel,
2004).

Following a similar method of an array—structured trie as
described in Sinha et al. (2006), our Burst trie is assembled
exactly on the nucleotide alphabet {a, c, g, u}. As illustrated in
Figure 2, the trie stores every unique (s+ 1)mer substring in an
rRNA database, as we look at windows of length s with at most
one error between any two words. The information on whether
the (s+ 1)mer belongs to a forward strand, the reverse comple—
ment or both (strand), and its origin (hashid) follows each entry
in a bucket. When the exact location of the (s + 1)mer needs to be
found in an rRNA database, the hashid value serves as an index
in a complementary table storing this information. Nearly
one—quarter of the 16S rRNA positions are 997100% conserved
(Cannone et al., 2002; Mears et al., 2002), and this moderates the
size of the trie, as many identical or closely similar substrings are
shared between sequences.

We use an additional optimization to improve access into the
Burst trie. Because we consider at most one error between the
window and the database, we have this simple property: for every
two words such that the edit distance between them is bounded
by 1, there exists a common substring of length s 2, which is
either a preﬁx or a sufﬁx of the two words. We apply this
property to construct a lookup table storing all s 2mers existing
in the rRNA database. Note that for s in [14, 20], transposing
the nucleotide alphabet onto a binary equivalent, such that {a, c,
g, u} = {00, 01, 10, 11}, we can represent each s 2mer in s bits,
which maps to a unique integer value. On completion of the
forward and reverse Burst tries, a scan of each trie is performed
to record the existence of all s 2mers and, if present, associated
pointers to the trie node representing the immediate letter fol—
lowing the preﬁx. The precomputed lookup table quickly deter—
mines whether an exact match of the prefix or sufﬁx exists in the
Burst tries, and furthermore it provides us with direct access to
the remaining part of the word in the Burst trie.

The lookup table also allows us to take into account distribu—
tion of s 2mers in the rRNA database. A multiple sequence
alignment of an rRNA database can clearly deﬁne areas of
high nucleotide conservation and emphasize the evolutionary
origins shared between organisms. In a similar manner, the
lookup table deﬁnes highly conserved areas by keeping only fre—
quent s 2mer occurrences in the rRNA database. Before a
window is traversed in the Burst trie, its preﬁx or sufﬁx must
exist in the lookup table. This notion enforces that a read
matches closely to one region in a database rather than multiple

scattered ones leading to a false alignment (see Section 1.1 of the
Supplementary File).

2.3 The universal Levenshtein automaton

The classical non—deterministic Levenshtein automaton for a pat—
tern ]; and a number of errors k recognizes the set of strings that
are at most edit distance k to p (Fig. 3). This automaton is not
suitable for computation because of the presence of multiple
active states and epsilon transitions. This may be overcome by
transforming the automaton into an equivalent deterministic
form. However, the resulting automaton may be exponential in
the length of p and likewise dependent on it. In studies by Schulz
and Mihov (2002) and Mihov and Schulz (2004), a universal
Levenshtein automaton was characterized based on insightful
observations of the classical one. The term universal conveys its
one—time construction and independency of p. The intuition
arises from the symmetry of the non—deterministic automaton,
which applies the same set of transition rules to every new input
character, and each new set of active states is a subset of a known
bounded superset. A set of bitvectors symbolizing the homology
of p and a candidate string serve as input to the automaton. In
full generality, the size of the automaton is exponential in a func—
tion of k (Mitankin, 2005). In our case, as k: 1, it remains suf—
ﬁciently small. The set of bitvectors representing the similarity of
two strings is precomputed using the following deﬁnition.

Deﬁnition 2.1. (Mihov and Schulz, 2004 ) The characteristic
vector 20v, V) ofa symbol w e Z in a word V: VI . . . v" e 2*
is the bitvector of length n where the ith bit is set to 1  w = v,~.

The technical details of n 3 2k + 2 and the preﬁx of k symbols
of ‘$’ appended to the pattern p can be found in the article by
Mihov and Schulz (2004).

Example 2.1. Let k = I, the input word W = acaga and the pat—
tern p = $acuaga, then X1(a, $acu) = 0100, X2(c, acua) = 0100,
Me, wag) = 0010, X4(g, Maga) = 0010, Me, age) = 101 are
the computed characteristic bitvectors. It follows that
{X1, . . . , X5} is the characteristic bitvector array carrying the simi—
larity information of x and p.

Beginning from X1 to Xlsl, the bitvectors are sequentially
passed into the universal Levenshtein automaton. Each bitvector
leads to a transition between states (in constant time) corres—
ponding to the number of errors encountered thus far. If some
Xi reaches a failure state, greater than k errors exist between s
and p, and the strings are rejected. The automaton only recog—
nizes two strings if the input of the last bitvector Xlsl leads to a
ﬁnal state.

2.4 Match of a read with the dynamic bitvector table

At this point, matching a window w of length s on the read
against the rRNA database amounts to ﬁrst checking whether
the preﬁx or the sufﬁx of length s 2 of w is present in the lookup
table, then determining whether the universal Levenshtein au—
tomaton for w recognizes some word in the Burst trie. For the
second step, we have to implement a rapid traversal of the
Levenshtein automaton, which relies on the precomputation of
bitvectors for w. At every depth of the Burst trie, we assume that
the symbol (1 in x,(q, V) appears as one of {a, c, g, u} with equal

 

3213

ﬁm'spzumol‘pmﬂo'sopnuuopnoiq/ﬁdnq

('llilrlmurlr
 void* buck,

null  null 

ul 1

m pm .4 mm

9100 1001 ()010 0101
9010 0100 1000 0000
9000 0000 0001 0010
9001 0010 0100 1000

101
000
010
000

 

/3.10's112um0fp10}x0"soiwuuoiuioiqﬂ:duq

0100
0010
0000
0001

9001
9100
9000
9010

1001
0100
0000
0010

0010
1000
0001

(1pm 1; of «w

0010
1000
0001
0100

0101
0000
0010
1000

0101
0000
0010
1000

101;
0000
0100
0000

101
000
010
000

01;
000
100

 

/310's112um0fp10}x0"soiwuuoiuioiqﬂ:duq

E.Kopylova et al.

 

same manner as described in Section 2.5. The performance re—
sults can be viewed in Table 2. All programs have a selectivity
level >99.98%. The number of false positives for the
HMM—based programs remains comparable with SortMeRNA
for both Illumina and Roche 454 reads. The difference in the
simulated data results between Meta—RNA and rRNASelector
can be attributed to the number of bacteria versus archaea
rRNA sequences used in the construction of the HMMs, as
well as additional parameter settings in rRNASelector.
riboPicker* and BLASTN show the lowest selectivity.
Concerning the running time, the order of the fastest programs
is rRNASelector, Meta—RNA and SortMeRNA. Both
rRNASelector and Meta—RNA use the HMMER3 package,
which applies a prefilter to quickly reject sequences that would
score very low in the HMM. This acceleration heuristic gives
these programs a competitive advantage on the artiﬁcial dataset
for selectivity where all sequences are negative.

Results for 23S rRNAs are analogous in terms of accuracy and
running time. They can be found in Table A and Table B under
Section 3.3 of the Supplementary File.

4.3 Real data

The metatranscriptomic datasets SRR106861 of a photosynthetic
microbial community and SRR013513 of a tidal salt marsh creek
from 454 sequencing were downloaded from the NCBI Sequence
Read Archive. The results for 16S and 23S can be viewed in Tables
3 and 4, respectively, and the overlap of the results between tools

Table 1. Sensitivity

in Figures 6 and 7. The results obtained with SortMeRNA are
close to the ones obtained with HMM—based methods. riboPicker
finds only a fraction of all potential rRNAs, which conﬁrms its
low sensitivity for small databases. The majority of 16S reads
found only by riboPicker* (1298) map to mRNA. For 23S ana—
lysis in Table 4 and Figure 7, ~99% of the excess reads of
Meta—RNA (12112) and rRNASelector likewise map to 28S,
along with 83% of the (624) reads found only by BLASTN and
Meta—RNA. The (537) reads found only by BLASTN map to
mRNA, 16S rRNA and other non—coding RNA.

5 DISCUSSION

SortMeRNA has shown to be a rapid and efﬁcient ﬁlter that can
sort a large set of metatranscriptomic reads with high accuracy
comparable with the HMM—based programs. SortMeRNA im—
plements seeds with errors (substitution and indel), and this im—
portant characteristic renders the algorithm robust to errors of
different types of sequencers while providing the ability to dis—
cover new rRNA sequences from unknown species.

The method used by the algorithm is universal and ﬂexible.
The database can be constructed on any family of sequences
provided by the user. Moreover, the algorithm does not require
a multiple sequence alignment file to build the database, as
HMM—based programs do, and this is an advantage when se—
quences are hard to align or only partial sequences are available.
Another advantage of SortMeRNA is the small number of

 

 

 

Software Illumina Roche 454
rRNA Run time Latency Memory (%) Sensitivity (%) rRNA Run time Latency Memory (%) Sensitivity (%)

SortMeRNA 998615 1min 39 5 IX 8.5 99.861 299979 1 min 43 5 IX 6.3 99.993
riboPicker 558607 18min 45 s 11>< 6.8 55.860 123024 18 min 365 11>< 5.6 41.008
riboPicker* 999941 6 h 33 min 238 X 35.3 99.994 299999 9 h 314>< 34 99.999
BLASTN 995322 23 h 52 min 868 X 3 .0 99.532 299978 18 h 35 min 649 X 1.4 99.992
Meta-RNA 983332 2h 72>< 33.3 98.333 299980 1h 57 min 68>< 12.9 99.993
rRNASelector 974118 1h 47 min 64>< 17.4 97.411 299976 2 h 70>< 7 99.992
SSU-ALIGN 971221 6 h 49 min 248 X 0.1 97.122 299902 5 h 50 min 204>< 0.1 99.967

 

One million of MetaSim—simulated Illumina (100 nt) and 300 000 Roche 454 (3200nt) rRNA reads against a representative 16 S rRNA database of 7659 sequences.

Table 2. Selectivity

 

 

 

Software Illumina Roche 454
rRNA Run time Latency Memory (%) Selectivity (%) rRNA Run time Latency Memory (%) Selectivity (%)

SortMeRNA 17 2min9s 2>< 7.6 99.9983 13 3 min 425 1>< 10.2 99.9987
riboPicker 7 10 min 22 s 8 X 6.7 99.9993 3 29 min 45 s 9 X 16.8 99.9997
riboPicker* 158 56 min 37 s 42 X 35.1 99.9842 53 2 h 43 min 49 X 45.2 99.9947
BLASTN 33 14min 22s 11>< 0.3 99.9967 33 16min 12s 5>< 0.3 99.9967
Meta-RNA 11 1min 33 5 IX 0.1 99.9989 11 3 min 41 5 IX 0.2 99.9989
rRNASelector 10 1 min 20 5 IX 0.1 99.9990 11 3 min 21 5 IX 0.2 99.9989
SSU-ALIGN 8 3h 51 min 173>< 0.1 99.9992 11 10h 30 min 188>< 0.1 99.9989

 

One million of MetaSim—simulated Illumina (100 nt) and 1 million Roche 454 (3200nt) non—rRNA reads against a representative 16S rRNA database of 7659 sequences.

 

3216

ﬁm'spzumol‘pmjxo'sopnuuopnoiq/ﬁdnq

BLASTN

:27. 001 r: mix

Soi‘thIeRNA

0‘10 rt mls

S()rt.l\IeRNA

0-1. 3105 Ft (1th

l\Ieta—
RNA
27.11 1 H'tldN

riboPicker '

127.105 1': lldh

 

l\I(:tH—
RNA
106,1,

riboPicker ‘

S l, 1,51 re: 15

 

/310'S[BIIJHOIPJOJXO'SOlJBLUJOJIIlOlq/ﬂduq

