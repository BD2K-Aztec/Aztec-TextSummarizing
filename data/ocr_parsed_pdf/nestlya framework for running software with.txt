BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

C.O.McCoy et al.

 

run both algorithms on several 1000—leaf trees, varying the
number of leaves pruned from the trees (‘k’).
To set up a nested directory structure:

import glob
from nestly import Nest, stripext

n=Nest()

n.add(‘algorithm', [‘full’, ‘pam’])

n.add(‘tree’, glob.glob(‘/trees/*.tre’),
label_func = stripext)

n.add(‘k’, [50, 100, 250, 500, 750, 900, 950])

n.build(‘runs’)

This will do the following. It will create a runs directory, in
which there will be two subdirectories, full and pam. Within
each of these, there will be directories labeled with the name of
the tree. Within each of those, there will be directories for each
value of ‘k’, e.g. 50, 100, etc. Within each of those, there will be
a JSON file control .json, which contains the parameter
values corresponding to the directory hierarchy.

This example exhibits nestly on a parameter ‘Cartesian prod—
uct’; online examples show how to use it to build a more complex
subset.

3.2 Running a command

The JSON files thus created then serve as inputs to nestrun
for template substitution, for example:

nestrun —d runs

——template 2 ‘rppr min_adcl_tree {tree}
"algorithm {algorithm}
——all—adcls—file adcls.csv
——leaves {k} '

This command runs rppr min_adcl_tree in all of the tip
directories with the appropriate values for each parameter, for
example substituting 100 in place of {k} above. The results
we are interested in (——all—adcls—file) will be written to a
ﬁle named adcls .csv in each directory. nestrun can run a
user—speciﬁed number of jobs in parallel.

3.3 Aggregating results

Given a list of J SON ﬁles and the name of the delimited ﬁles to
combine, nestagg merges the results together into a single ﬁle,
adding columns that label the parameter choices used when gen—
erating those results. The call:

nestagg delim adcls .csv —d runs —0 all_adcls .csv

will aggregate data from all of the CSV ﬁles named adcl . csv,
one for each control ﬁle under runs, appending columns con—
taining the values of algorithm, tree and k from the control ﬁle.

For more general cases, a simple framework is available for
deﬁning custom aggregations.

3.4 SCons integration

SCons (http://scons.org) is a build system implemented in
Python that is analogous to make, in that an invocation only
runs what is necessary to fulﬁll specified dependencies. Our
nestly integration makes it easy to deﬁne targets for each
parameter combination that also become part of the control
dictionary.

For example, by including the code from Section 3.1 in an
SConstruct ﬁle, we can add our command (abbreviated here):

from nestly. scons import SConsWrap
w=SConsWrap(nest, ‘build’ )
@w. add_target ()
def min_adcl (d, control) :
# set SCons ‘action’ to template as done
# above using values from ‘control’
return Command(os.path. join(d, ‘adcl.csv’ ) ,
c[ ‘tree’ ] , action)

This will execute the same combination of commands as
before, but within the incremental build framework of the
SCons build tool. The result of this step is then available via
the control dictionary for future steps. The SCons integration
also has facilities for aggregating results, described in the
nestly documentation.

4 CONCLUSION

nestly is a simple yet powerful framework for running soft—
ware with combinatorial choices of parameters and aggregating
results of those runs. It has complete documentation and a suite
of examples.

ACKNOWLEDGEMENTS

We thank Brian Hodges for contributing to the first version of
nestrun, and to Brad Chapman and two anonymous reviewers
for valuable comments on this manuscript.

Funding: A.G., NH. and FM are supported in part by NIH R01
HG005966—01; CM. is supported in part by NIH R01 A1038518.

Conﬂict of Interest: none declared.

REFERENCES

Darriba,D. et a]. (2012) jModelTest 2: more models, new heuristics and parallel
computing. Nut. Met/1043', 9, 7727772.

Goodstadt,L. (2010) Ruffus: a lightweight python library for computational
pipelines. Bioiry’ormuticx, 26, 2778r2779.

Hoekman,B. et a]. (2012) msCompare: a framework for quantimtive analysis
of label—free LC—MS data for comparative biomarker studies. Mol. Cell.
Proteomicx‘, ll, Mlll.015974.

K6ster,J. and Rahmann,S. (2012) Snakemakeea scalable bioinformatics workﬁow
engine. Bioiry’ormuticx, 28, 252(k2522.

Matsen,F.A. et a]. (2012) Minimizing the average distance to a closest leaf in a
phylogenetic tree. Sun. Biol. (in press).

Sadedin,S.P. et a]. (2012) Bpipe: a tool for running and managing bioinformatics
pipelines. Bioiry’ormuticx, 28, 152?]526.

 

ﬁm'spzumofpmﬂo'sopeuuopnorq/ﬁdnq

