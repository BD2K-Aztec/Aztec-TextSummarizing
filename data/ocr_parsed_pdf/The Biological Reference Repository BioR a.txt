BIOINFORMA TICS

0'so;112u110}u101q//2duq

SIBumoprOJX

£10"

The biological reference repository

 

extracted from a TJSON and processed with JSON libraries in most
programming languages like Perl, Java and Python. BioR provides com-
mands necessary to retrieve nested values from J SON strings. An example
of TJSON, where ‘\t’ is a tab character (typically non-displaying) acting
as a column separator is here:

1024\tl45.6\t{"_type" : "gene", "_strand" : "+" ,
"_minBP" :10954, "_maxBP" :11507, "note" : "similarity
to: 1 Protein", "GeneID" : "100506145" }\t12 . 334

2.2 BioR toolkit

The BioR toolkit includes set of commands for the management of cata-
logs, extraction of annotation based on genomics coordinates, variant or
gene information. These stand-alone commands that are executed like
common UNIX commands leverage third-party JSON libraries to pro-
cess JSON strings. TJSON is intentionally used as standard input/output
by most of the BioR commands to enable the concatenation of multiple
BioR commands into a single UNIX command using standard piping
syntax. The user can add functions to the toolkit or operate on their data
using conventional UNIX tools as long as the function operates on
TJSON strings.

The BioR toolkit also includes commands to convert tab-delimited
input file into TJSON strings (such as VCF and BED files) or convert
TJ SON into tab-delimited output file. Any metadata recorded in VCF or
GFF style header (starting with ‘#’) in the input file will be carried
through by the BioR toolkit functions to be recorded in the output file.
The commands included in the BioR toolkit are listed in Supplementary
Table S1.

Finally, the BioR toolkit supports two command-line utilities for
annotating variants: (i) bior_snpeff, which integrates Sanff annotations
(Cingolani et al., 2012), and (ii) bior_vep to annotate files using
Ensemble’s variant effect predictor (www.ensembl.org/info/docs/vari-
ation/vep/).

2.3 BioR annotation catalogs

BioR catalogs are in a readable, indexable and schema-free format for
storing and rapidly accessing arbitrary structured data such as genomic
features, diseases, conditions, genetic tests and drugs. Catalogs are modu-
lar, based on specific data sources or tools, and can be built and queried
independently of other catalogs. They use the TJSON representation to
store annotation information and corresponding genomic coordinates.
The first tab-delimited field is used to store the origin of the sequence
(usually a chromosome). The next two fields record the start and end
coordinates of a genomic interval for position-dependent annotations.
These two fields are otherwise set to 0. These three fields are indexed
by Tabix (Li, 2011). The last field is a J SON string that contains all the
data from the original source.

To reduce storage footprint and accelerate coordinate-based searches,
catalogs are compressed using the open source BGZip (Danecek et al.,
2011) and indexed using Tabix. The Tabix index file is stored in the same
directory as the related catalog. BioR toolkit takes advantage of the
Tabix library to perform coordinate-based overlap searches. BioR can
also perform searches on identifiers that can be indexed using a BioR
toolkit command for fast querying. Finally, to accelerate coordinate-
based and variant-matching searches, a set of semantically consistent
identifiers called Golden Identifiers are automatically indexed. These
identifiers are implicitly used by some BioR commands (Supplementary
Table S2).

2.4 Building BioR catalogs

The complexity of building BioR catalogs depends on the organization of
data in the annotation source. Data available in tab-delimited text format

can be readily converted to a BioR catalog using the command
‘bior_create_catalog’ and a conﬁguration file describing each column.
When annotations are extracted from complex systems such as relational
databases, programming is required to reformat related tables into a
single tab-delimited text. BioR catalogs must be created for each set of
related tables the user wants to use.

2.5 BioR catalog library

BioR includes 19 documented catalogs built from the most
commonly used data sources (Supplementary Table S3). It also includes
a list of catalogs built from UCSC Genome Browser tracks (Kent at al.,
2002). To increase clinical applicability, pharmacogenomics catalogs built
from PharmGKB, DrugBank and Therapeutic Target Database are also
provided.

2.6 Example

The following example illustrates how sample variant rsIDs stored in the
file rsID.txt can be annotated with European frequency from the 1000
Genomes Project. First, using the ‘bior_lookup’ command, rsIDs in the
rsID.txt file are matched to entries in the dbSNP.tsv.bgz catalog contain-
ing the identifier ‘ID’. Matching entries in JSON format are piped to the
function ‘bior_same_variant’. This function uses the Golden Identifiers
present in the JSON string to look up allele frequencies in the
KGenomes.tsv.gz catalog. Finally, the function ‘bior_drill’ and the
Unix command ‘cut’ reformat the TJSON string into a tab-delimited
output.

$ cat rsIDs . txt | bior_lookup —p ID —d dbSNP . tsv.bgz |
bior_same_variant —d KGenomes . tsv.gz |
bior_drill —c —l —p INFO.EUR_AF | cut —f l, 3

This macro annotates 100 000 rsIDs in 2:23 min on a MacBook Pro
2.3 GHz Intel Core i7 with solid state drive and 8G RAM.

3 RESULTS

BioR is an open annotation tool. It includes a toolkit with a base
set of commands needed to build and index catalogs and retrieve
annotations. Annotations can be retrieved based on location
(genomic coordinates) or identiﬁers. The TJSON format is
used for catalogs and as input/output for most of the toolkit
functions facilitating the assembly of complex pipelines.
Because the TJSON format is readable, users can design their
own scripts to extract annotation from catalogs. Scripts can also
be intermixed with toolkit commands as long as the TSJON
format is maintained. This stream—based approach on which
BioR is based signiﬁcantly reduces memory footprint. In add—
ition, the BioR toolkit is inherently parallel and can be conﬁg—
ured to take advantage of computers with multi—core
architectures. BioR catalogs can easily be combined into new
catalogs to decrease retrieval time by avoiding multiple cross—
catalog queries. In conclusion, BioR is a rapid and ﬂexible
system for annotating high—throughput genomics experiments.

ACKNOWLEDGEMENT

The authors thank the Center for Individualized Medicine at
Mayo Clinic for funding the development of BioR.

Conﬂict of Interest: none declared.

 

1921

ﬁm'spzumofpmﬂo'sopeuuopuorq/ﬁdnq

J.-P.A.Kocher et al.

 

REFERENCES

Asmann,Y.W. et a]. (2012) TREAT: a bioinformatics tool for variant annotations
and visualizations in targeted and exome sequencing data. Bioiiy’ormntiex, 28,
2777278.

Belleau,F. et a]. (2008) Bio2RDF: towards a mashup to build bioinformatics know—
ledge systems. J. Biomed. Inform, 41, 70(r7l6.

Cingolani,P. et a]. (2012) A program for annotating and predicting the effects of
single nucleotide polymorphisms, Sanff: SNPs in the genome of Droxophiln
melanognster strain w1118; iso—2; iso—3. Fly (Austin), 6, 8&92.

Danecek,P. et a]. (2011) The variant call format and VCFtools. Bioiiy’ormntiex, 27,
215672158.

Kent,W.J. et a]. (2002) The human genome browser at UCSC. Genome Rec, 12,
99(r1006.

Li,H. (2011) Tabix: fast retrieval of sequence features from generic TAB—delimited
ﬁles. Bioinformutim‘, 27, 7187719.

Paila,U. et a]. (2013) GEMINI: integrative exploration of genetic variation and
genome annotations. PLoS Compnt. Biol., 9, e1003153.

Wang,K. et a]. (2010) ANNOVAR: functional annotation of genetic variants from
high—throughput sequencing data. Nucleic Aeidx Rec, 38, e164.

 

1922

/310'S[BHmO[pJOJXO"SOIJBLUJOJIIIOIq/ﬂdnq

