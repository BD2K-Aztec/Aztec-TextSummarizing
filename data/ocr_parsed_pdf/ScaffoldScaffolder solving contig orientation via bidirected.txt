Advance Access Publication Date: 17 September 2015

Bioinformatics, 3211 ), 2016, 17—24
doi: 10.1093/bioinformatics/btv548

 

Original Paper

 

Sequence analysis

ScaffoldScaffolder: solving contig orientation
via bidirected to directed graph reduction
Paul M. Bodi|y*, M. Stanley Fujimoto, Quinn Snell, Dan Ventura

and Mark J. Clement

Computational Sciences Laboratory, Department of Computer Science, Brigham Young University, Provo, UT

84602-6576, USA

*To whom correspondence should be addressed.
Associate Editor: John Hancock

Received on August 21, 2014; revised on September 9, 2015; accepted on September 11,2015

Abstract

Motivation: The contig orientation problem, which we formally define as the MAX—DIR problem,
has at times been addressed cursorin and at times using various heuristics. In setting forth a
linear—time reduction from the MAX—CUT problem to the MAX—DIR problem, we prove the latter is
NP—complete. We compare the relative performance of a novel greedy approach with several other

heuristic solutions.

Results: Our results suggest that our greedy heuristic algorithm not only works well but also out—
performs the other algorithms due to the nature of scaffold graphs. Our results also demonstrate a
novel method for identifying inverted repeats and inversion variants, both of which contradict the
basic single—orientation assumption. Such inversions have previously been noted as being difficult
to detect and are directly involved in the genetic mechanisms of several diseases.

Availability and implementation: http://bioresearch.byu.edu/scaffoldscaffolder.

Contact: paulmbodily@gmail.com

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

Accurate and efficient genome assembly algorithms are essential to
unlocking solutions to challenges posed by genetic disease.
Insufficient molecular sampling and repetitive regions in the DNA
prevent full chromosomal assembly from next-generation sequenc-
ing reads, causing assembly algorithms to produce a large set of par-
tially reconstructed chromosomes termed contigs. Contigs must be
oriented and positioned to reconstruct full chromosomes using
paired-read data to infer positional and orientational relationships
between contigs. We define a scaffolding of two contigs as the rela-
tive positioning and orientation of contigs weighted by the multipli-
city of supporting paired reads.

The problem of scaffolding is often modeled as a graph where
vertices are contigs and weighted edges indicate scaffoldings of con-
tigs. The goal in scaffolding is to find a Hamiltonian path that in-
corporates each non-repeat contig sequence once. As a subtask of
scaffolding, the contig orientation problem describes the challenge

of assigning each contig a single orientation (as per the single-
orientation assumption) so as to minimize conflicting orientation
evidence. More specifically, the goal is to remove the minimum
number of edges from the scaffold graph, so that the remaining
subgraph suggests a single consistent orientation of all vertices (Pop
et (11., 2004). Solving the contig orientation problem is one step to
reducing erroneous linking evidence in the scaffold data.

The contig orientation problem has been equated to the weighted
MAX-CUT problem (Dayarian et (11., 2010), the bipartite graph
problem (Pop et (11., 2004) and the odd cycle transferal problem
(Donmez and Brudno, 2013). Solutions have included energy cost
minimization (Dayarian et (11., 2010), a fixed-parameter algorithm
(Donmez and Brudno, 2013), mixed integer programming (Salmela
et (11., 2011), depth-first search (Nijkamp et (11., 2010) and greedy bi-
partite graph coloring (Pop et (11., 2004). Several solutions to the
more general problem of scaffolding do not explicitly solve the con-
tig orientation problem but provide implicit contig orientation

(6) The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 17

/310‘srcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

Batzoglou at a[., 2002 Butler at a[., 2008 Li at a[., 2010 Zcrbino

and Birncy, 2008
Edmonds and

Johnson (1970)
Edmonds and Johnson, 1970 Jackson and
Aluru, 2008 bdcdvcdcv at a[., 2007 1\4ycrs, 2005
Salmcla at a[., 2011

Niikamp at a[., 2010 Pop at a[., 2004 Zcrbino and
Birncy, 2008

Ding at a[., 2001
Sahni and Gonzalez, 1976
Rendl at a[., 2010 Gocmans and W’illiamson (1994)

Khot at al. (2007)

Edmonds and Johnson, 1970

 

/3.IO'S[BIImOfp.IOJXO'SOtJBLUJOJIItth/ﬂdnq

(b)

 yea-<1; b _'

MAX—DIR Construction

 

Corresponding Vertex—Orientation Assignment

20

P.M.Bodily et al.

 

we will create. The construction of G from M consists of the follow—
ing steps (Fig. 2):

1. Let V’ : V.

2. For each edge e E E linking vertices 19,11, 6 V, we create a bidir—
ected edge e’ linking U," and U," (in V’) where e is negative—
incident to both U," and 11,“.

Clearly the construction takes polynomial time.

First we show that if M has a cut of size k, then G has a vertex—
orientation assignment yielding k directed edges (Fig. 3). If M has a
cut of size k, then there is a partition of V into two distinct subsets S
and T such that there are k edges which have an endpoint in S and
an endpoint in T. By partitioning V’ into the same subsets, S and T,
and assigning forward—orientation to all vertices in S and reverse—
orientation to all vertices in T, k bidirected edges (those analogous
to the cut edges of M) are rendered directed edges. All others remain
either introverted or extraverted edges. It follows from the same line
of reasoning that if G has a vertex—orientation assignment yielding k
directed edges, then M has a cut of size k.

This completes the proof that MAX—DIR is NP—complete.

2 Systems and methods

Results were collected for nine different algorithms on six different
datasets using multiple assessment criteria.

Though several published scaffolding algorithms address the
contig orientation problem (Donmez and Brudno, 2013; Pop et al.,
2004), none provide sufficient metadata to easily recover their exact
contig orientation solution. We thus measure the relative perform—
ance of two novel MAX—DIR heuristics (Greedy and RandEdge) and
seven other MAX—CUT heuristics as applied to instances of the con—
tig orientation problem:

1. Greedy: Our novel greedy heuristic (see Algorithm 1).

2. RandEdge: Considers edges in a random order and greedily as—
signs an orientation to adjacent contigs that is consistent with
previous orientation assignments (similar to Algorithm 1 except
edge e at line 5 is random).

3. BiqMac: A Branch—and—Bound heuristic algorithm for solving
weighted MAX—CUT problems which uses SDP relaxation and a
relative bound precision criterion (Rendl et al., 2010).

4. LPSoliIe: lp_solve, a mixed integer linear programming heuristic
used by MIP Scaffolder (Salmela et al., 2011).

5. SCIP: A linear—optimization Branch—and—Bound MAX—CUT
solver (Achterberg, 2007).

6. GLPK: GNU Linear Programming Kit, a linear/mixed integer
programming solver (Makhorin, 2001).

7. SDP: A dual—scaling interior—point algorithm for solving sparse
semidefinite MAX—CUT programs (Benson et al., 2000).

8. Salam': A 1/2—approximation algorithm for MAX—CUT, which
adds vertices in random order to maximize the weight of the cut
(Sahni and Gonzalez, 1976).

9. Random: randomly orients contigs, retaining edges consistent
with assigned orientations (averaged over ten iterations).

 

Algorithm 1. MAX—DIR GREEDY HEURISTIC

 

Input: Weighted bidirected graph, G, and min edge weight,
Wmin

1: Create a forest, F

2: For each vertex U,‘ E G, add tree t, to F containing it,

 

 

3: Create a set S of all edges in G with weight we > wmin
4: while S is not empty do

5: Remove an edge e with maximum weight from S
6 if e connects two different trees, t1 and t2, then
7: add e to F, combining t1 and t2 into one tree
8 if e is not a directed edge then

9 for all vertices U2 in t2 do

10: Flip orientation assignment of 1’2

11: else if e is a directed edge then

12: add e to F

13: else

14: discard e

15: return F, a weighted directed subgraph

 

 

 

The algorithms were assessed on six scaffold graphs: two syn—
thetic genome scaffold graphs and four real scaffold graphs (see
Supplementary Material for details). ScaffoldScaffolder (Bodily et
al., 2012) was used to generate scaffold graphs.

1. Synthetic Genome (w/o Errors): A 1.25 Mb diploid genome was
synthesized from the zebra finch using HapMaker (Okuda et al.,
2013). The following were generated using ART v1.3.1 (Huang
et al., 2012): a set of 250 bp reads; a 4kb paired—end library and
a 20 kb paired—end library. Newbler 2.6 was used to assemble
contigs. Only 4 kb libraries were used in scaffolding.

2. Synthetic Genome (w/ Errors): Using the 1.25 Mb genome refer—
ence, a 200—bp paired—read library was generated from ART.
Contig assembly was performed using Newbler.

3. Raspberry Genome: Contigs for the Rubus idaeus cultivar heri-
tage genome were assembled by Newbler using reads from a
combination of Illumina HiSeq and 454 sequencing technolo—
gies. HiSeq reads were used for scaffolding.

4. Strawberry Genome: Contigs were assembled for Fragaria vesca
using Newbler on eleven 454 runs. Two 3—kb paired—end libra—
ries were used to scaffold.

5. Oyster Genome: Contigs for the Paciﬁc oyster Crassostrea gigas
were assembled using SOAPdenovo2 (Luo et al., 2012). Paired
Illumina reads from 170 bp inserts were used to scaffold.

6. Human Genome: Contigs for HapMap individual NA19240
chromosome X were assembled using SOAPdenovo2. Paired
Illumina reads from 550 bp inserts were used to scaffold.

Solutions were assessed on five metrics: the total count of edges
retained; the total weight of edges retained; the total count of edges
excluded; the total weight of edges excluded and (for real datasets)
the computation time required. A contig orientation solution does
not produce linear scaffolds. Thus, our evaluative metrics do not in—
clude typical scaffold evaluation metrics such as scaffold N50.

3 Algorithm

We developed a greedy heuristic algorithm to solve the weighted
MAX—DIR problem (see Algorithm 1). As a heavier—weighted edge
generally reflects greater confidence for the scaffolding which it rep—
resents, such an edge is likely to be valid, and therefore included in
the optimal solution. Thus a greedy algorithm, which maximally
favors heavier—weighted edges, approximates an ideal solution for
the contig orientation problem.

This algorithm starts by making each vertex in the graph its own
tree and then adds edges which combine distinct trees to form larger
trees. In combining trees t, and t, via edge e, we flip vertex orienta—
tions for all vertices in t, when needed, so that e is always directed.

[310'sp2umoip105xo'sopeuHOJIItotq/ﬁdnq

Synthetic wfo Errors

Figure 4
Supplementar) Adaterial

D RandEdg?

Synthetic w! Errors

Synthetic w} Errors

 Bit-(Mar: ill LPS.

Raspberry Strawberry
Total Edge Weight Retained

TlE-iqMai: ULF‘Sc-Ive ESCIP WISLPK

Raspberry Strawberry

Total Edges Retained

F=S|IZIP

Z“Sal'ini

FEE 11111

1 Random

Oyster

Fl Ra _

Oyster

 

Supplementar) Adaterial

Figures 4

/310'SIBanoprOJxo"sotJBuiJOJutotqﬂ:dnq

Contig A {reverse}

ContigA Contig B

Contig A ' Contig B Contig C

Contigs _. ' "_ ' I ' : Contigc
Edge

' | u m: "I

 

2000
Li (7/
al., 2010 Pop (7/ al., 2004

Figure 5

Fig. 4

Fig. 6

Antonacci (7/ al., 2009 Zod) (7/
al., 2008

Antonacci (7/ al., 2009

Altschul (7/ al., 1997

Supplementar) Adaterial

Fig. 6
Rio and Rubin, 1988
I\4uskens (7/ al.,

/310'SIBanoprOJxo"sotJBuiJOJutotqﬂ:dnq

 

Supplementar) Adaterial

Adartinez-Fundicheh

(7/ al., 2014
Aguado (7/ al., 2014

Fig.

\J

/310'SIBanoprOJxo"sotJBuiJOJutotqﬂ:dnq

24

P.M.Bodily et al.

 

Myers,E.W. (2005) The fragment assembly string graph. Bioinformatics,
21(Supp12),ii79—ii85.

Nijkamp,J. et al (2010) Integrating genome assemblies with MAIA.
Bioinformatics, 26, i433—i439.

Okuda,N. et al. (2013) HapMaker: synthetic haplotype generator. In:
Arabnia,H.R. and Tran,Q.-N. (eds), Proceedings ofthe 2013 International
Conference on Bioinformatics (7‘ Computational Biology. CSREA Press,
Las Vegas, Nevada, USA, pp. 370—374.

Pop,M. et al. (2004) Hierarchical scaffolding with Bambus. Genome Res., 14,
149—159.

Rendl,F. et al. (2010) Solving Max-Cut to optimality by intersecting semideﬁn-
ite and polyhedral relaxations. Math. Program., 121, 307—335.

Rio,D.C. and Rubin,G.M. (1988) Identiﬁcation and puriﬁcation of a Drosopllila
protein that binds to the terminal 31-base-pair inverted repeats of the P trans-
posable element. Proc. Natl Acad. Sci. USA, 85, 8929—8933.

Sahni,S. and G0nzalez,T. (1976) P-complete approximation problems.
]. ACM, 23, 555—565.

Salmela,L. et al. (2011) Fast scaffolding with small independent mixed integer
programs. Bioinformatics, 27, 3259—3265.

Zerbino,D.R. and Birney,E. (2008) Velvet: algorithms for de novo short read
assembly using De Bruijn graphs. Genome Res., 18, 821—829.

ZOdy,M.C. et al. (2008) Evolutionary toggling of the MAPT 17q21. 31 inver-
sion region. Nat. Genet., 40, 1076—1083.

/310'S[Bum0fplOJXO'SOIJBLUJOJIIIOICI”Zduq

