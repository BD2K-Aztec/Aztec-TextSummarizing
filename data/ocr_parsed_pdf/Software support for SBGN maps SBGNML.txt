ORIGINAL PAPER

Vol. 28 no. 15 2012, pages 2016-2021
doi:1 0. 1 093/bioinformatics/bts270

 

Systems Biology

Advance Access publication May 10, 2012

Software support for SBGN maps: SBGN-ML and LibSBGN

Martijn P. van Iersellazasai‘, Alice C. ViII ger4, Tobias Czauderna5, Sarah E. Boyde’,

Frank T. Bergmann7, Augustin Luna8’9, Emek Demirlo, Anatoly Sorokinll,

Ugur Dogrusole, Yukiko Matsuoka13, Akira Funahashil4, Mirit I. Aladjem15, Huaiyu M116,
Stuart L. Moodiel, Hiroaki Kitanolsala, Nicolas Le Nov re1 and FaIk Schreiber5’17

1EMBL European Bioinformatics Institute, Hinxton, UK, 2Netherlands Consortium for Systems Biology (NCSB),
Amsterdam, 3Department of Bioinformatios — BiGCaT, University of Maastrioht, Maastrioht, The Netherlands, 4School
of Computer Science, Faculty of Engineering and Physical Sciences, University of Manchester, Manchester, UK,
5Leibniz Institute of Plant Genetics and Crop Plant Research (IPK), Gatersleben, Germany, 6School of Mathematical
Sciences, Faculty of Science, Monash University, Melbourne, Australia, 7Control and Dynamical Systems, California
Institute of Technology, Pasadena, CA, 8National Cancer Institute, Bethesda, MD, 9Bioinformatics Program, Boston
University, Boston, MA, 10Computational Biology, Memorial Sloan Kettering Cancer Center, New York, NY, USA,

11 Institute of Cell Biophysics RAS, Pusohino, Russia, 12Computer Engineering Department, BiIkent University,
Ankara, Turkey, 13The Systems Biology Institute, Tokyo, 14Department of Biosoienoes and Informatics, Keio
University, Yokohama, Japan, 15Depatment of Preventive Medicine, Keck School of Medicine, University of Southern
California, Los Angeles, CA, USA, 16Okinawa Institute of Science and Technology, Okinawa, Japan and 17Institute of
Computer Sciences, Faculty of Natural Sciences III, University of HaIIe, HaIIe, Germany

Associate Editor: Trey Ideker

 

ABSTRACT

Motivation: LibSBGN is a software library for reading, writing and
manipulating Systems Biology Graphical Notation (SBGN) maps
stored using the recently developed SBGN-ML file format. The library
(available in C++ and Java) makes it easy for developers to add
SBGN support to their tools, whereas the file format facilitates the
exchange of maps between compatible software applications. The
library also supports validation of maps, which simplifies the task of
ensuring compliance with the detailed SBGN specifications. With this
effort we hope to increase the adoption of SBGN in bioinformatics
tools, ultimately enabling more researchers to visualize biological
knowledge in a precise and unambiguous manner.

Availability and implementation: Milestone 2 was released in
December 2011. Source code, example files and binaries are freely
available under the terms of either the LGPL v2.1+ or Apache v2.0
open source licenses from http://|ibsbgn.sourceforge.net.

Contact: sbgn-libsbgn@lists.sourceforge.net

Received on December 13, 2011; revised on April 24, 2012; accepted
on May 1, 2012

1 INTRODUCTION

The Systems Biology Graphical Notation (SBGN, Le Novere
et (11., 2009) facilitates the representation and exchange of complex
biological knowledge in a concise and unambiguous manner: as
standardized pathway maps. It has been developed and supported
by a vibrant community of biologists, biochemists, software
developers, bioinformaticians and pathway databases experts.

 

*To whom correspondence should be addressed.

SBGN is described in detail in the online speciﬁcations (see
http://sbgn.org/Documents/Speciﬁcations). Here we summarize its
concepts only brieﬂy. SBGN deﬁnes three orthogonal visual
languages: Process Description (PD), Entity Relationship (ER) and
Activity Flow (AF). SBGN maps must follow the visual vocabulary,
syntax and layout rules of one of these languages. The Choice of
language depends on the type of pathway or process being depicted
and the amount of available information. The PD language, which
originates from Kitano’s Process Diagrams (Kitano et (11., 2005) and
the related CellDesigner tool (Funahashi et (11., 2008), is equivalent
to a bipartite graph (with a few exceptions) with one type of nodes
representing pools of biological entities, and a second type of nodes
representing biological processes such as biochemical reactions,
transport, binding and degradation. Arcs represent consumption,
production or control, and can only connect nodes of differing
types. The PD language is very suitable for metabolic pathways,
but struggles to concisely depict the combinatorial complexity of
certain proteins with many phosphorylation states. The ER language,
on the other hand, is inspired by Kohn’s Molecular Interaction Maps
(Kohn et (11., 2006), and describes relations between biomolecules.
In ER, two entities can be linked with an interaction are. The
outcome of an interaction (for example, a protein complex), is
considered an entity in itself, represented by a black dot, which
can engage in further interactions. Thus ER represents dependencies
between interactions, or putting it differently, it can represent which
interaction is necessary for another one to take place. Interactions
are possible between two or more entities, which make ER maps
roughly equivalent to a hypergraph in which an arc can connect
more than two nodes. ER is more concise than PD when it comes to
representing protein modiﬁcations and protein interactions, although
it is less capable when it comes to presenting biochemical reactions.
Finally, the third language in the SBGN family is AF, which

 

© The Author(s) 2012. Published by Oxford University Press.

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non—Commercial License (http://creativecommons.org/Iicenses/
by—nc/3.0), which permits unrestricted non—commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.

112 /3.Io's[Bumo[pJOJXO'sorwurJOJurorqﬂ:duq 11101} popBoru/vxoq

9103 ‘Og anﬁnv uo ::

Software support for SBGN maps

 

represents the activities of biomolecules at a higher conceptual
level. AF is suitable to represent the ﬂow of causality between
biomolecules even when detailed knowledge on biological processes
is missing.

Efﬁcient integration of the SBGN standard into the research
cycle requires adoption by visualization and modeling software.
Encouragingly, a growing number of pathway tools (see http://
sbgn.org/SBGN_Software) offer some form of SBGN compatibility.
However, current software implementations of SBGN are often
incomplete and sometimes incorrect. This is not surprising: as SBGN
covers a broad spectrum of biological phenomena, complete and
accurate implementation of the ﬁlll SBGN speciﬁcations represents
a complex, error-prone and time-consuming task for individual
tool developers. This development step could be simpliﬁed, and
redundant implementation efforts avoided, by accurately translating
the ﬁlll SBGN speciﬁcations into a single software library, available
freely for any tool developer to reuse in their own project.
Moreover, the maps produced by any given tool usually cannot be
reused in another tool, because SBGN only deﬁnes how biological
information should be visualized, but not how the maps should be
stored electronically. Related community standards for exchanging
pathway knowledge, namely BioPAX (Demir et (11., 2010) and
SBML (Hucka et (11., 2003), have proved insufﬁcient for this role
(more on this topic in Section 4). Therefore, we observed a second
need, for a dedicated, standardized SBGN ﬁle format.

Following these observations, we started a community effort with
two goals: to encourage the adoption of SBGN by facilitating its
implementation in pathway tools, and to increase interoperability
between SBGN-compatible software. This has resulted in a ﬁle
format called SBGN-ML and a software library called LibSBGN.
Each of these two components will be explained separately in the
next sections.

2 THE SBGN-ML FILE FORMAT

SBGN-ML is a dedicated lightweight XML-based ﬁle format
describing the overall geometry of SBGN maps, while also
preserving their underlying biological meaning. SBGN-ML is
designed to fulﬁll two basic requirements:

(1) easy to draw (as a machine) and read (as a human) and

(2) easy to interpret (as a machine).

The ﬁrst set of requirement deals with the graphical aspect of
SBGN. It means it should be easy to render a SBGN-ML ﬁle to
the screen. Therefore, the format stores all necessary information,
such as coordinates, to draw the map faithfully, so that rendering
tools do not have to perform any complex calculations. Incidentally,
this implies the layout of the whole SBGN map has to be expressed
explicitly: the size and position of each graphical object and the
path of each arc. Various efforts have shown that generating a
layout for heterogeneous biological pathways is a computationally
hard problem, so a good layout is always worth preserving, if only
from a computational perspective. Besides, the Choice of a speciﬁc
layout by the author of a map is often driven by concerns related
to aesthetics, readability or to reinforce ideas of Chronology or
proximity. This information might be lost with automated layouts.
Layout conventions predate SBGN, and are not part of any standard,

 

<shgn xmlns="http:l/sbgn.arg/libsbgn/9.2">
<Ilp Ianguage:"pracess descriptinn">
<notes><p xmlns="http://ww. "3. org/1999/xhtml u>

       

Extracellular space

r— GLUT4

1
2

3

4 slucase impart fallwed by the first step 01‘ glycalysis.
5 </p></l|ates>
6

7

e

9

  
 

<glypll compartmentRef="e" id="g" class="simple chemical">
(label text:"61uc
<bbox y="25" -‘
</g1yph>

<g'lyph compartment
<labe‘L text=“GluC
(hhox y:“1§5" X:“
</glyph>
<glyph 1d

30" w=“38"/>

"' c1ass="simple Chemical ">

 

     

 

y_ 8..
"192.. X570“

 

quph compartmentRef="c“ id="k“ c1ass="simple chemical">
(label text=“ATP"/>

  

   

21 <:lnne/>
22 (hhox y:"175" x:“15" h:“36" warm)
23 </nlynh>
24 qtyph compartmentRef="c‘ 1d="m“ class="macramalecule">
25 (label text="Hexakinase"/>
26 '33" w="78"/>
27 ' cla state variable")
28 a "/>
<bbox ="179" x="96" h="12" w=“30" > -
g: «glyph: ’ Hexoklnase
31 </§I~YFI'>
32 <glyph compartmentorder:”2" 1d:“e" class:“:amparthenr">
33 <lahe‘l text=“Extracellular snace"/>
3, (W F... X”. "we. #16,. ,> .
as <ar: target="s" source="g" id="a" class="consumnt1‘an">
31 <start y=“55" X="7B"/)
31 (and y="102 av
a 1m
94 source:“r" id:“u" class:"product1'on“>
85 "70"/>
36 .. ..

99 Y—
91 <end y=
91 </arc>

93 </ma|l> Cytosol
94 <lshgn> L

 

 

 

 

J

 

Fig. 1. An example PD map (right) with the corresponding SBGN-ML code
(left). This example shows the import of glucose followed by the ﬁrst step
of glycolysis. The colors used have no special meaning in SBGN. here they
merely indicate the relation between each SBGN glyph and its SBGN-ML
representation; a process node in orange. a simple chemical (ATP) in green.
a production arc in cyan. a catalysis arc in purple. a compartment in yellow
and a state variable in blue

but they nonetheless play a large role in making it easier for other
human beings to understand the biological system being described.

The second requirement encompasses two perpendicular
Characteristics of SBGN as a language: semantics and syntax.
Beyond the picture itself, the format should capture the biological
meaning of an SBGN map. Therefore, SBGN-ML speciﬁes the
nature of graphical elements (glyphs), following the SBGN
terminology (e.g., macromolecule, process, etc.). For example, we
can distinguish between a ‘logic arc’ and a ‘Consumption arc’ even
though they have the same visual appearance. Supporting tools refer
to this terminology and draw the glyph according to the SBGN
speciﬁcations. In terms of syntax, SBGN-ML encodes information
on relationships between the various SBGN objects: the glyphs at
both ends of an arc, the components of a complex, the members of a
compartment and the ‘decorations’ (such as unit of information and
state variable) belonging to speciﬁc glyphs and arcs. This semantic
and syntactic information is essential to a number of automated
tasks, such as map validation, or network analysis (as the topology
of the underlying biological network can be inferred from the various
relationships encoded by the format).

To explain the syntax of SBGN-ML in more detail, consider
the example in Figure 1. This ﬁgure shows a PD map describing
the import of glucose by GLUT4, followed by the ﬁrst step of the
glycolysis. The root element is named ‘sbgn’ (line 1). Below that,
there is a ‘map’ element with an attribute indicating that the PD
language is used. Below the map element, one ﬁnds a series of
glyph and are elements. Each glyph carries a ‘Class’ attribute to
denote the meaning in SBGN terms. In this example, there is a

 

2017

112 /3.lo's[Bluno[plolxosolwullolulolqﬂ:duq uloll paplzorumoq

9103 ‘Og anﬁnv uo ::

M.F! van Iersel et al.

 

glyph with class ‘process’ (lines 14—18, in orange). Each glyph also
carries an ‘id’ attribute that can be referred from elsewhere in the
document, thus storing the network topology (in this case merely
the letter ‘f’ for the sake of brevity). Each glyph must deﬁne a
‘bbox’ or bounding box, which allows the glyph to be placed at the
correct position. Its coordinates denote the smallest rectangle that
completely encompasses the glyph. Consumption and production
arcs connect to process nodes at a so-called ‘port’ just outside the
glyph. ‘Port’ elements are part of the network topology, so they carry
identiﬁers as well (lines 16 and 17). Another glyph in this example
represents the active form of hexokinase (lines 24—31). It carries
a label element, which should be positioned in the center of the
parent glyph, unless otherwise deﬁned. Hexokinase also contains a
sub-glyph for a state variable (lines 27—30, in blue) to indicate that
it is the allosterically active form of the enzyme. ATP (lines 19—
23, in green) is a simple chemical, and uses a circle as its shape,
as opposed to macromolecules that use a rounded rectangle shape.
Small molecules often occur multiple times in a map, in which case
they must carry a clone marker, a black bottom half. In SBGN-
ML this is represented by the ‘Clone’ element (line 21). Cellular
compartments are represented by glyphs as well (lines 32—35, in
yellow). Entities refer to their surrounding compartment using a
‘compartmentRef’ attribute.

Just like glyphs, arcs must deﬁne a ‘Class’ attribute and an ‘id’
attribute. See for example the production arc (lines 84—87, in cyan).
Each arc must have a source attribute, referring to the identiﬁer of a
glyph that the arc points from, as well as a target attribute, referring to
the identiﬁer of the glyph that the arc points to. Source and target may
refer to identiﬁers of either glyphs or ports. Arcs must also deﬁne
start and end Coordinates. Arcs can optionally include waypoints for
path routing as with the ‘Catalysis’ arc (lines 88—92, in purple). It is
not possible to deduce the start and end coordinates from the source
and target glyphs, as there may be some white space between the
end of the arc and the border of the glyph.

Each element can be freely annotated with notes encoded with
valid XHTML elements (lines 3—5). Each SBGN-ML can also be
extended with elements in proprietary namespaces to add additional
features (not shown in this example).

3 THE LIBSBGN LIBRARY

A software library called LibSBGN complements the ﬁle format.
It Consists of two parallel implementations in Java and C++. The
libraries share the same object model, so that algorithms operating
on it can be easily translated to different programming languages.

The primary goal of LibSBGN is to simplify the work for
developers of existing pathway tools. To reach this goal we
followed three design principles. First, we avoided tool-speciﬁc
implementation details. Implementation artifacts that are speciﬁc
for one bioinformatics tool would impose difﬁculties for adoption
by others. We sought input from several tool developers into the
LibSBGN effort early on.

Second, we do not want to force the use of a single rendering
implementation (meaning the software routine that translates
from memory objects to screen or graphic format). Early in the
development of LibSBGN, it became clear that for most pathway
drawing tools, the rendering engine is an integral part that is not
easily replaced by a common library. The typical usage scenario is
therefore to let LibSBGN handle input and output, but to translate

File-f = I'IEN File. I"I.I.nest-‘I1les!adh_sbgn"];
Sbghl sbgn Sbgnuti‘l.readFromFllelf}; I. -
Hap lIIapI=I  H I
IorIJGlyph  : :map.-igetGI-lyph:tll
Systeh.out.§rih€ (" Glyph wlth cIass - + g.getId()J;

if Ig.getLabelH  null.) -

System.out.println I", and label ' + g.getLabelII.getTextU}:
else
System.out.println I". Wlthout label");

}
fornmrc: a} memeurctii

SysterhpuLprinﬁn I" Art with class " + a.getClazzllJ;

Fig. 2. Example of reading a ﬁle using the Java version of LibSBGN.
Here an SBGN-ML ﬁle named ‘adh.sbgn’ (included in the LibSBGN source
distribution) is read. and some basic information about each glyph in that
ﬁle is printed to standard output. The complete program can be found as
ReadExample.java in the LibSBGN source distribution

to the application’s own object model, and display using the
application’s own rendering engine. Enforcing a common rendering
library would hamper adoption of LibSBGN. We instead opted to
build a render comparison pipeline to ensure consistency between
various renderers (this pipeline is described in more detail in
Section 3.2).

Third, we wish to provide optimal libraries for each development
environment. For both the C++ and Java versions, code is
automatically generated based on the XML Schema deﬁnition
(XSD). The method of generating code from XSD has reduced the
effort needed to keep the Java and C++ versions synchronized during
development. The generated Java code plus helper classes form a
pure Java library. The alternative possibility, to create a single C++
library and a Java wrapper around that, is not preferable because it
complicates multi-platform installation and testing. Our experience
with a related project, LibSBML (Bornstein et (11., 2008), is that the
community has a need for a pure Java library in spite of existing
Java bindings for C++, which has led to the development of the
pure Java J SBML (Drager et (11., 2011) as an alternative. Although
both LibSBML and J SBML are successful projects, the maintenance
of two similar projects in different languages is costly in terms of
developer time. By generating native libraries for both environments
automatically, we hope to avoid that extra cost.

3.1 Code sample

See Figure 2 for an example of usage of LibSBGN in
practice. The Java library contains convenient helper ﬁlnctions
for reading, writing and validation. In the case of this example
the ﬁlnction readFromFile from the SbgnUtil class is used.
The source package contains example programs for common
operations, and the LibSBGN wiki includes a developer tutorial
(see http://sourceforge.net/apps/mediawiki/libsbgn/index.php?title=

 

2018

112 /3.lo's[Bluno[pJOJXO'solwulJOJHlolqﬂ:duq ulor} papBo1umoq

9103 ‘0g15n8nv uo ::

Software support for SBGN maps

 

Pathwsio

 

 

 

 

 

 

 

Fig. 3. Rendering comparison. A series of test-cases is rendered by all
supported tools in an automated render comparison pipeline. The rendering
results are compared with the reference map (top-left). in this case an
ER map. A couple of signiﬁcant differences have been highlighted with
red circles. In the PathVisio case (top-right). arrowheads are drawn where
none is expected. In the SBML Layout example (bottom-right). the wrong
arrowheads are drawn for absolute inhibition and stimulation arcs. Note
that these are historical images for illustration purposes. and the highlighted
issues have already been ﬁxed

Developer_tutorial) aimed at developers who want to include
LibSBGN into an existing bioinformatics application.

3.2 Rendering comparison

We created dozens of test-cases for each of the three languages
of SBGN, covering all aspects of the syntax. Each test-case
consists of a reference diagram in PNG format and a corresponding
SBGN-ML ﬁle. To test our software, all SBGN-ML ﬁles are
automatically rendered by the participating programs, currently
SBGN-ED (Czaudema et (11., 2010), PathVisio (van Iersel et (11.,
2008) and SBML Layout (Deckard et (11., 2006). The resulting
images are viewable side-by-side with the reference map. An
example of this can be found in Figure 3.

This pipeline was of tremendous value during development.
Typically, an observed difference between a given rendering and the
reference diagram could lead to several possible outcomes. Most
commonly, the difference indicated a mistake in the participating
renderer, which had to be ﬁxed by the author of that software. A
second possibility is that the mistake is due to an ambiguity in
the interpretation of SBGN-ML. This could lead to a correction
in the speciﬁcation or a clariﬁcation in the documentation, so that
all involved are in agreement. In several instances, the source
of ambiguity was derived not from SBGN-ML but from the
SBGN speciﬁcation. This way, LibSBGN has led to feedback
on SBGN itself. A ﬁnal possibility is that the difference was
deemed insigniﬁcant. Certain differences in use of color, background
shading and line thickness are not meaningful in terms of biological
interpretation of the SBGN map. An exception here is differences
in layout. As mentioned before, we consider layout valuable to
preserve even though it is not semantically signiﬁcant. This pipeline

is now fully automated, and runs automatically, whenever new test-
cases are added to the source repository. It can be viewed online
at http://libsbgn.sourceforge.net/render_comparison/. We encourage
developers of software to contact us to add their tool to the gallery.

3.3 Validation

For syntactic validation of SBGN-ML documents, we created an
XML Schema deﬁnition (XSD). Unfortunately, XSD is not sufﬁcient
to validate the many semantic rules deﬁned in the SBGN
speciﬁcation. To solve this we also developed higher level, semantic
validation using the Schematron (http://www.schematron.com)
language.

To give a few examples: in PD, a production arc should point from
a process towards an entity pool node. It is not allowed to draw the
arc in the other direction, or to connect two entity pools directly
without an intermediate process (see Figure 4). In ER, outcome
glyphs may be drawn on interaction arcs but not on inﬂuence arcs.
If such a rule were violated, the meaning of the map would be
ambiguous or contradictory.

LibSBGN provides functionality for users and developers to
validate diagrams against these rules. This validation capability is
built using Schematron language which has been previously used for
Molecular Interaction Map diagram validation (Luna et (11., 2011).
Schematron rules are assertion tests written using XPath syntax.
Each rule possesses a role to denote the severity of failure, a human-
readable message and diagnostic elements to identify the source of
the error or warning. Rules in Schematron can be grouped in phases;
this feature can be used to denote subsets of rules to be activated
during validation. Schematron makes use of XML stylesheet
transformations (XSLT) and the validation process occurs in two
steps. The ﬁrst step is the transformation of the rule sets written in
the Schematron language to an XSLT stylesheet, and the second step
is the transformation of an SBGN-ML ﬁle using the XSLT stylesheet
from the ﬁrst step. The product of this second transformation is
a validation report that uses the Schematron Validation Report
Language (SVRL). The usage of Schematron rule sets allows for
validation to be ﬂexibly incorporated into various environments
and using any programming language with an XSLT processor.
Command-line validation can be done using XSLT processors
such as Saxon (http://saxon.sourceforge.net/) by performing the
two transformation steps mentioned above. Alternatively, validation
can also be incorporated into automated pipelines using the Ant
task for Schematron (http://code.google.com/p/schematron/); an
example of this is provided in the distributed ﬁles. Lastly, validation
can be incorporated into projects by using provided utility Java
classes found in the LibSBGN API. The PathVisio-Validator plugin
(Chandan et (11., 2011) is an example of diagram validation using
LibSBGN and Schematron.

There are three rule sets for SBGN-ML, one for each of the
SBGN languages. These rule sets validate syntactic correctness of
SBGN maps. An example validation is shown in Figure 4, where
a stimulation arc is incorrectly drawn by pointing to an entity pool
node, rather than a process node.

Unfortunately software can have bugs, and if the validation
routine does not report any validity errors, this could indicate that
either the diagram is indeed correct (true negative), or that there is
a bug in the software encoding the rules (false negative). To ensure
correctness of the validation rules themselves, we have created

 

2019

112 /3.lo's[Bluno[pJOJXO'solwulJOJHlolqﬂ:duq ulorJ papBo1umoq

9103 ‘0g15n8nv uo ::

M.F! van Iersel et al.

 

 

 

Fig. 4. Typical validator benchmark. This particular example tests the
software for rule plel 10: in PD maps. catalysis arcs must point to a process
node (not to an entity pool node). In the negative test-case on the left. the
enzyme GPI appears to ‘catalyze’ a molecule rather than a reaction. This is a
logical impossibility. The positive test-case on the right shows correctly how
the enzyme GPI catalyzes the reaction from glucose-6P to fructose-6P. Taken
together. these test-cases help to prevent bugs in the validation software

 

 

 

Fig. 5. Screenshots of a number of tools that use LibSBGN. Clockwise.
from the top: CellDesigner. SBGN-ED. VISIBIOweb and PathVisio. These
tools are able to use SBGN-ML for import. export or both. At the time of
writing. for some of these tools a version with SBGN support has not been
ofﬁcially released. but is expected soon

benchmarks for each of them. For each rule there is a positive
test-case, for which the rule should pass, and a negative one, for
which the rule should fail, similar to the example given in Figure 4.

3.4 Supporting tools

As mentioned earlier, we seek support from a wide community of
tool developers. The following tools are already using LibSBGN:
PathVisio (van Iersel et (11., 2008), SBGN-ED (Czauderna et (11.,
2010), SBML Layout (Deckard et (11., 2006) and VISIBIOweb
(Dilek et (11., 2010). We are aware of two other tools with
LibSBGN support in development: Arcadia (Villeger et (11., 2010)
and CellDesigner (Funahashi et (11., 2008). Desktop applications
using LibSBGN are shown in Figure 5.

4 DISCUSSION

We have set out to fulﬁll the dual goals of simplifying SBGN support
as well as standardizing electronic exchange of SBGN. The ﬁrst goal

has been addressed with an open-source software library, which can
be used to read, write, manipulate and validate SBGN. The second
goal has been addressed with a ﬁle format named SBGN-ML.

SBGN-ML ﬁlls a pragmatic need for a format that can be mapped
directly to concepts from the SBGN speciﬁcation. We see the
rapid adoption of SBGN-ML by a number of tools as proof of the
pragmatic need for it.

A potential criticism of SBGN-ML is the addition of yet
another ﬁle format to the repertoire of ﬁle formats in systems
biology. Different approaches have been explored for electronically
representing SBGN: from graphical ﬁle formats such as SVG,
or graph representation stored as GraphML ﬁles, to additional
information on top of an existing model, such as the Systems
Biology Markup Language (SBML) layout extension (Gauges et (11.,
2006). All these approaches have limitations, as they have been
developed independently of SBGN. A new format was needed to
support all characteristics of SBGN maps (graphics, relationships
and semantics). The other formats could be extended to cover these
concepts, but at the expense of brevity and clarity.

So we created a new format for the following reasons. First,
SBGN-ML focuses on the domain of visualization of SBGN
concepts. This sets it apart from existing exchange formats for
pathways. BioPAX is a pathway exchange format that occupies
the domain of knowledge management, and has close relations to
the semantic web. SBML occupies the domain of computational
modeling of systems biology. The latter two could be extended to
accommodate SBGN concepts, but there is not a straight one-to-one
mapping. For example, there is no good equivalent for the AND/OR
gates which can be drawn in SBGN. Furthermore, omitted/uncertain
processes can be drawn in SBGN but have no direct equivalent in
BioPAX.

Second, SBGN-ML is easier to validate against the SBGN
speciﬁcation. As mentioned before, the complexity of SBGN makes
software support for validation a must. Rules describing validation
of SBGN-ML are simpler and more concise than they would be if
they were encoded on top of an existing format.

Third, the rendering comparison pipeline has ensured that
conversion of SBGN-ML to graphical formats is straightforward.
On the other hand, conversion from a graphical format such as SVG
to SBGN-ML requires inferring the meaning of lines, glyphs and
symbols, which is bound to lead to loss of information.

Fourth, by making SBGN independent, it is not tied to either the
SBML, BioPAX or any other research community. We observe that
currently LibSBGN is being used by both BioPAX-oriented tools
such as ChIBE and PaxTools as well as SBML-oriented tools such
as CellDesigner or GraphML-oriented tools such as SBGN-ED.

SBGN-ML is ofﬁcially endorsed by the SBGN scientiﬁc
committee as a reference implementation and the best way to
exchange diagrams between applications. It is orthogonal to speciﬁc
formats used to represent pathways and models such as BioPAX
(Demir et (11., 2010) and SBML (Hucka et (11., 2003), and thus follows
the vision of the COMBINE initiative (http://co.mbine.org/about).

In the ﬁeld of bioinformatics, it occurs all too often that the lack
of a feature in an existing piece of software is used to justify the
development of a complete new bioinformatics tool, which will in its
turn lack features in another area. The end result is the current state
of affairs: a balkanization of bioinformatics tools, or in other words,
many fragmented tools that integrate poorly. One of the goals of
LibSBGN is to improve existing software. LibSBGN could serve

 

2020

112 /3.lo's[Bluno[pJOJXO'solwulJOJHlolqﬂ:duq ulorJ papBo1umoq

9103 ‘0g15n8nv uo ::

Software support for SBGN maps

 

as a model to counter the balkanization trend. We prefer to see
the development of software libraries instead of incomplete tools.
Libraries, especially if they are open source, can be shared, re-used
and adopted by developers.

5 CONCLUSION

The SBGN-ML ﬁle format and LibSBGN library provide open-
source software support for SBGN maps. They have been adopted
by several tools already, and development is ongoing. It is expected
that the availability of a community-supported API will signiﬁcantly
expedite SBGN’s adoption. We use the word ‘Milestone’ for
versioning purposes—the latest release is Milestone 2, which was
released in December 2011.

LibSBGN is primarily focused on exchanging between SBGN
software. Other functionalities, such as conversion to other formats,
or generating suitable layout, are not currently supported. It is
certainly likely that some or all of these ﬁlnctionalities will be added
in the ﬁlture as optional modules. SBGN-ML will likely see the
addition of ﬁne-grained graphics speciﬁcation, support for linking
between ﬁles, and improved usage of ontologies. Additionally,
LibSBGN will see expansion to other programming languages
beyond Java and C++, such as for example Javascript.

The SBGN-ML ﬁle format is represented as an XML schema
(SBGN.XSD). Examples are available as test ﬁles (XML, PNG). The
accompanying documentation reﬂects the content of the schema,
and clariﬁes a number of additional rules and conventions (e.g.,
coordinate system). This set of resources constitutes the SBGN-ML
speciﬁcations. The LibSBGN library (in C++ and Java) and the
ﬁle format have been released on Sourceforge, under a dual license:
the Lesser General Public Licence (LGPL) version 2.1 or later, and
Apache version 2.0.

The development process is an active community effort, organized
around: regular online meetings, discussions on the mailing list, and
development tools on Sourceforge (bug tracker, SVN repository and
documentation wiki). New developers are very welcome.

ACKNOWLEDGEMENTS

The authors thank their individual sources of funding. Authors are
grateful for useﬁll feedback from the Path2Models project.

F unding: This work was in part supported by the Biotechnology and
Biological Sciences Research Council (BBSRC); the Netherlands
Consortium for Systems Biology (NCSB), which is part of
the Netherlands Genomics Initiative/Netherlands Organisation for
Scientiﬁc Research; BioPreDyn which is a grant within the Seventh
Framework Programme of the EU, the Intramural Research Program
of the NIH, National Cancer Institute, Center for Cancer Research;
and the German Ministry of Education and Research (BMBF).

Conﬂict oflnterest: none declared.

REFERENCES

Bornstein,B.J. et al. (2008) LibSBML: an API library for SBML. Bioinformatics, 24,
889881.

Chandan,K. et al. (2011) PathVisio-Validator: A rule-based validation plugin for
graphical pathway notations. Bioinformatics, 28, 8897890.

Czauderna,T. et al. (2010) Editing, validating, and translating of SBGN maps.
Bioinformatics, 26, 234e2341.

Deckard,A. et al. (2006) Supporting the SBML layout extension. Bioinformatics, 22,
296672967.

Demir,E. et al. (2010) The BioPAX community standard for pathway data sharing. Nat.
Bionic/11101., 28, 9357942.

Dilek,A. et al. (2010) VISIBIOweb: visualization and layout services for BioPAX
pathway models. Nucleic Acids Res., 38, W1507W154.

Dr'ager,A. et al. (2011) JSBML: a ﬂexible Java library for working with SBML.
Bioinformatics, 27, 216772168.

Funahashi,A. et al. (2008) CellDesigner 3.5: a versatile modeling tool for biochemical
networks. Proc. IEEE, 96, 125471265.

Gauges,R. et al. (2006) A model diagram layout extension for SBML. Bioinformatics,
22, 187971885.

Hucka,M. et al. (2003) The Systems Biology Markup Language (SBML): a medium
for representation and exchange of biochemical network models. Bioinformatics,
9, 52L531.

Kitano,H. et al. (2005) Using process diagrams for the graphical representation of
biological networks. Nat. Biotechnol., 23, 9617966.

Kohn,K.W. et al. (2006) Molecular interaction maps of bioregulatory networks: a
general rubric for systems biology. M01. Biol. Cell, 17, 1713.

Le Novere,N. et al. (2009) The systems biology graphical notation. Nat. Biotechnol.,
27, 7537741.

Luna,A. et al. (2011) A formal MIM speciﬁcation and tools for the common exchange
of MIM diagrams: an XML-Based format, an API, and a validation method. BM C
Bioinformatics, 12, 167.

van Iersel,M.P. et al. (2008) Presenting and exploring biological pathways with
PathVisio. BMC Bioinformatics, 9, 399.

Villeger,A.C. et al. (2010) Arcadia: a visualization tool for metabolic pathways.
Bioinformatics, 26, l47w147l.

 

2021

112 /3.lo's[Bluno[pJOJXO'solwulJOJHlolqﬂ:duq ulorJ papeo1umoq

9103 ‘0g anﬁnv uo ::

