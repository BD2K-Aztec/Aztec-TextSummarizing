Bioinformatics, 32, 2016, i209—i215
doi: 10.1 093/bioinformatics/btw258
ISM B 2016

 

thAlDER: Pattern-Hunter based Rapid Ab Initio
Detection of Elementary Repeats

Carly E. Schaeffer,” Nathaniel D. Figueroa,” Xiaolin Liu2 and
John E. Karro1'2'3'4'*

1Department of Computer Science and Software Engineering, 2Department of Cell, Molecular, and Structural
Biology, 3Department of Microbiology and 4Department of Statistics, Miami University, Oxford, OH, USA

*To whom correspondence should be addressed.
TThese authors contributed equally to this work.

Abstract

Motivation: Transposable elements (TEs) and repetitive DNA make up a sizable fraction of
Eukaryotic genomes, and their annotation is crucial to the study of the structure, organization, and
evolution of any newly sequenced genome. Although RepeatMasker and nHMMER are useful for
identifying these repeats, they require a pre—compiled repeat library—which is not always avail—
able. De novo identification tools such as Recon, RepeatScout or RepeatGluer serve to identify TEs
purely from sequence content, but are either limited by runtimes that prohibit whole—genome use
or degrade in quality in the presence of substitutions that disrupt the sequence patterns.

Results: thAlDER is a de novo TE identification tool that address the issues of excessive runtime
without sacrificing sensitivity as compared to competing tools. The underlying model is a new defin—
ition of elementary repeats that incorporates the PatternHunter spaced seed model, allowing for
greater sensitivity in the presence of genomic substitutions. As compared with the premier tool in the
literature, RepeatScout, thAlDER shows an average 10x speedup on any single human chromosome
and has the ability to process the whole human genome in just over three hours. Here we discuss the
tool, the theoretical model underlying the tool, and the results demonstrating its effectiveness.
Availability and implementation: thAlDER is an open source tool available from https://github.

 

com/karroje/thAlDER.
Contact: karroje@miamiOH.edu or

Supplementary information: Supplementary data are available at Bioinformatics online.

 

1 Introduction

Transposable elements (TEs) are genomic sequences that had (or
have) the capacity to insert themselves, or copies of themselves, into
other genomic locations. Present in almost every higher order genome,
and covering as much as 45% of the human genome and 90% of the
maize genome (Lander, 2001; SanMiguel et (11., 1996), TEs have
proved an important source of data in numerous studies of genomic
structure (Arndt and Hwa, 2005; Karro et (11., 2008; Mugal et (11.,
2008). They are also frequently a source of noise that needs to be
masked. Unfiltered TEs can disrupt annotation tools, resulting in large
false positive rates when subjected to automated gene finding tools, as
well as inflated runtimes for the annotation tools (Jiang, 2013).

The most commonly used tools for repetitive DNA identifica-
tion, such as RepeatMasker and nHMMER (Smit et (11., 2015;
Wheeler and Eddy, 2013), use precompiled descriptions of se-
quences in the family (e.g. an ancestral sequence or profile HMM)

© The Author 2016. Published by Oxford University Press.

to aid in the identification of more instances of that family. But
much like the question ‘How does the snow plow driver get to
work?’ (Pratchett, 2006), we might ask how these libraries are com-
piled. RepeatMasker requires these libraries to work, but we cannot
use RepeatMasker to generate them.

Initial libraries were compiled as a result of wet-lab work, using
TEs identified through sequencing and biological study
(MCClintock, 1950; Sanger and Coulson, 1975). In the era of
Bioinformatics, we would prefer an automated solution. When first
examining a newly sequenced genome we can frequently rely on a li-
brary already compiled for a closely related genome, if such a gen-
ome has already been sequenced and annotated. Within mammals
this works well, as such genomes are usually available. In plants we
are less likely to find a well-sequenced organism of sufficiently close
evolutionary distance to be of use. For example, a rice-based TE li-
brary will only lead to the identification of 25% of the TEs in the

i209

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/Iicenses/by-nc/4.U/),
which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact

journals.permissions@oup.com

/310‘srcumo[p10}xo‘sopcuHOJIIrorq/ﬁdnq

i210

C.E.Schaeffer et al.

 

maize genome (Jiang, 2013). Thus the need for tools which do not
require pre—compiled libraries to perform the initial analysis, or de
not/o TE identification tools.

The de nouo TE identification tools in the literature are described
and compared in both Saha et al. (2008) and Jiang (2013).
Approaches to the problem vary, but generally fall into the following
categories: k—mer searches [e.g. ReAS and RepeatScout (Li et al.,
2005; Price et al., 2005)], self—alignment techniques [e.g. RECON and
PILER (Rae and Eddy, 2002; Edgar and Myers, 2005 )], and variants
of DeBrujin Graphs (RepeatGluer; Pevzner et al., 2004; Zhi et al.,
2006). In their testing, both Saha et al. (2008) and Jiang (2013) found
RepeatScout to be the best tool overall for assembled genomes, and
we will thus use it as the basis for comparison in assessing our tool.

1.1 Elementary repeats

Zheng and Lonardi approached the de nouo identification problem
using elementary repeats (Zheng and Lonardi, 2005). Similar to the
RepeatGluer domains, elementary repeats are decompositions of
TEs into basic ‘building blocks”. Although it is notoriously difficult
to mathematically model TEs (Rae and Eddy, 2002), elementary re—
peats allow for an exact formal description. Specifically:

Definition 1 (Z&L). For given integer parameters 1 and f, a se—
quence p is an elementary repeat with respect to l and fin genome G
if it conforms to the four requirements:

° Structure: ,0 is at least length 1.

° Frequency: There are at least 7' copies of p properly contained in
G.

° Minimality: There is no proper substring of p of at least length I
that appears in G independently ofp.

° Maximality: There is no string such that every instance of p in
the genome is contained in an instance of.

In short: an elementary repeat has no (sufficiently) long substrings
that appear independently in the genome, and is not itself a compo—
nent of any larger sequence meeting the requirements.

Zheng and Lonardi (2005) developed an identification algorithm
with a runtime quadratic in the size of the scanned genome. This
was refined to linear time by both He (2006) and by Huo et al.
(2009) using suffix tree variations, but these approaches are limited
in their ability to handle changes in the sequence that have occurred
over time from accumulated substitutions and other changes at the
base level.

Our goal is to (i) devise an elementary repeat identification algo—
rithm that is both faster and more robust to base changes; and (ii)
demonstrate the utility of elementary repeats in TE identification.
Our initial tool, RAIDER, was a prototype that improved speed with
mixed results in its effect on quality (Figueroa et al., 2013; Figueroa,
2013). Here we discuss thAIDER, a new version of RAIDER which
improves sensitivity by incorporating the PatternHunter spaced seed
concept (Li et al., 2004) into its identification algorithm. The resulting
algorithm maintains a 10>< speedup on human chromosomal se—
quences, dropping the runtime on human chr. 1 from 70min using
RepeatScout to 8 min for thAIDER.

2 Approach

In this section, we define a model for elementary repeats in the con—
text of PatternHunter spaced seeds, a formalization of the ideas first
proposed by Figueroa et al. (2013) and Figueroa (2013). Following
this, we describe our algorithm, defined in detail in our

Supplementary appendix, and evaluate its effectiveness in identify—
ing TEs in the following section.

2.1 Spaced seeds

A spaced seed is a binary string used to specify a ‘match pattern” (Li
et al., 2004; Ma et al., 2002). Recall that when BLASTing (Altschul
et al., 1997) a nucleotide sequence against a database, the first step
is to find all sequences in the database that share a substring of a
fixed length with the query sequence. The insight of Ma et al. under—
lying PatternHunter is that sensitivity can be improved, without a
significant increase in runtime, by looking for a longer common sub—
string with mismatches allowed at certain specified positions. For
example, instead of looking for an exact shared substring of length
12, we might look for a substring of length 13 that was allowed to
mismatch in the seventh base—represented by the ‘match string”, or
seed, 1111110111111. (Indicating six required matches, an ignored
base and six required matches.) Any binary pattern can specify a
seed, and with the right seed (or set of seeds), Ma and Li (2007) and
Ma and Yao (2009) have shown that the number of false negatives
is significantly reduced without a major effect on false positives.
However, working with seeds is a computationally challenging
problem in terms of seed evaluation and optimal seed selection.

2.2 Model

Our goal is to redefine the concept of TEs to accommodate a spaced
seed strategy. We will start here with a sketch of our theoretical
model, and include a more detailed description in the Supplementary
appendix. But we first need to introduce some terminology:

° A sequence descriptor is a string over the alphabet, where ”“
serves as a wild—card character. A nucleotide sequence g is con-
sistent with a sequence descriptor r of the same length if g
matches r in all positions where r does not have a ’f. A seed 5 is
consistent with a sequence descriptor r of the same length ifs has
a 0 at all positions in which r has a ”“ character.

° Given a seed 5 of length l and a sequence descriptor r of length
21, we can decompose r w.r.t. 5 if we can break r into a set of
overlapping length l substrings such that every substring is con—
sistent with s and every base position of r is included in at least
one of the substrings.

° The sequence decomposition of r w.r.t. s is created by taking the
substrings of r covered by 5, replacing those bases that match to a
0 with a ’f, and creating a set of the results. (The decomposition
is undeﬁned if r cannot be decomposed w.r.t. s.)

For example, given the seed 5 : 1 1011:

° If r: AAAAA"GGGGG, then the decomposition of r w.r.t. s is
{AA’fAA, AA’fGG, GG"GG}.

° If r: AAAAA""GGGGG, then it is not decomposable with re—
spect to s, as there is no substring consistent with s that contains
either of the ”“ characters.

We can now modify the previous definition of elementary re—
peats as follows:

Definition 2 (Seeded Elementary Repeats). Given a genomic se—
quence G, an integer f, and a spaced seed 5, a sequence descriptor ,0
describes an elementary repeat if it meets the four (modified) re—
quirements of an elementary repeat:

° Structure: ,0 can be decomposed with respect to s.

/310‘srcumo[p10}xo‘sopcuuopnorq/ﬁdnq

Pattern—Hunter based rapid ab initio detection of elementary repeats i211

 

° Frequency: There are at least 7' substrings of G that are consistent
with ,0.

° Minimality: For every string t in the decomposition of p w.r.t. s, t
appears in the genome only as a part of a string consistent with ,0.

° Maximality: There is no sequence descriptor of ,0 that both contains
,0 as a proper substring and satisﬁes the previous three conditions.

Given a sequence descriptor p describing an elementary repeat,
the elementary repeat family is the set of substrings in G that are
consistent with p. The new definition encompasses the old, as shown
by the theorem proved in the Supplementary appendix:

THEOREM 1. When the seed 5 has no 0 characters, this definition of
elementary repeats is equivalent to the Z&L definition where l is the
length of the seed.

A proof for this theorem is presented in the Supplementary
appendix.

3 Methods

3.1 thAlDER algorithm

The thAIDER algorithm takes a genome G and a single fixed seed
5 of length l and performs a one—pass scan of G (with an optional
preliminary pass to reduce memory requirements). While scanning,
we maintain the following data structures:

° H: A (hash—table) mapping of sequence descriptors to the coord—
inate positions at which they have been seen.

° Q: A queue containing potential families we have encountered in
the last I bases.

° A family structure holds an ordered list of sequence descrip—
tors that comprise the decomposition of some sequence descrip—
tor r w.r.t. 5. At the end of the algorithm the set of families will
exactly describe the elementary repeat elements in G.

A pseudocode—form version of our algorithm is contained in the
Supplementary appendix, and here we give a high level description.
In our scan, when we reach coordinate i we do the following:

1. Knock off the front family in Q if its last seen sequence descrip—
tor starts more than I bases before i.

2. Take the length l substring at G,, seed it (replace bases matching
to a 0 in s with a ’f) to create it, and update the hash table entry
H[u] to add i to the list of coordinates at which it begins.

3. Now we consider what effect it has on our list of putative families:

° If this is the ﬁrst occurrence of u, it is not yet known to be
part of a family.

° If this is the second occurrence of it, either it overlaps a fam—
ily, or it is potentially the start of a new family:

° If u overlaps the family F in Q and has the same offset from
the start of the second instance of F that the ﬁrst instance of v
has from the ﬁrst instance of F’s ﬁrst l—mer, then mark it as a
part of the (potential) family.

° Otherwise, create a new family consisting only of l—mer u—
the ﬁrst l—mer in this family—and add it to Q.

° If v has been seen three or more times, then either:

0 u is the next l—mer in a family F we are currently expand—
ing: create F and add it to the back of Q.
u is the ﬁrst l—mer in some family: add F to the back of Q.

o u is a member of some family: but not the ﬁrst l—mer. Our
putative family F violates maximality, and needs to be
split into two families.

We end with a cleanup step to eliminate families that do not
meet the frequency threshold. That is, do not occur at least 7' times
in the genome.

THEOREM 2. For a genome G, a seed 5 and a frequency threshold f,
the thAIDER algorithm will identify all sequences corresponding
to any elementary repeat family (w.r.t. to s) in G.

A proof is outlined in the Supplementary appendix. We also de—
rive a worst—case runtime bound of O(n - s), where n is the size of
the genome and s is the size of the seed. Since the seed is generally
both short (<100 bases) and fixed, this leaves the algorithm as linear
in the size of the genome—consistent with our empirical result from
Figure 1.

4 Results

In this section we both explore the response of thAIDER to
changes in seed (Fig. 3), and compare the performance of
thAIDER against that of RepeatScout, using chromosomes se—
lected from Caenoharhditis elegans, arahidopsis, mouse, dog and
human. Performance is measured in terms of resource usage: run—
time and memory consumption, which are illustrated in Figures 1
and 2. We then measure result quality based on the metrics
described below. Figure 3 shows response to seed change, and Table
1 compares result quality against other tools.

4.1 Resource usage

We assessed thAIDER against RepeatScout (Price et al., 2005),
designated the leading TE identification tool by Saha et al. (2008)
and Jiang (2013). We found that thAIDER gives significant run—
time speedup over RepeatScout: an average 10>< speedup for indi—
vidual human chromosomes, dropping runtime from 70 to 8 min on
human chr. 1 and completing a whole—genome run in 3h 7 min.
RepeatScout could not complete a whole—genome run on the human
genome due to a memory error—a problem acknowledged in the
RepeatScout documentation (Price et al., 2005 ).

All testing was done on chromosome sequences obtained from
the UCSC Genome Browser (Kent et al., 2002) for C. elegans,
mouse, dog and human, and the TAIR browser (Berardini et al.,
2015) for arahidopsis. Figure 1 illustrates runtime and memory
usage for RepeatScout (0 symbols), thAIDER (+ symbols), and a
memory—efficient version of thAIDER (A symbols). RepeatScout
was run using default parameters, while thAIDER used one of the
selected seeds from the next section. thAIDER is clearly memory
intensive, which is primarily due to the necessity of storing every
genomic coordinate in the hash table. We can alleviate this with a
preliminary pass over the genome that allows us to filter out unique
sequence descriptors without changing our results. We see that while
this adds a small amount of runtime, both versions are significantly
faster than RepeatScout, and the memory—efficient version is com—
parable to RepeatScout in memory usage.

In Figure 2 we see the effect of varying seed length and density
on resource usage; the results are unsurprising.

4.2 Quality metrics
We evaluate the quality of tool results using two methods:

i. Masking metric: We tested the ability to selectively mask out re—
peat sequences. This is vital for the accurate performance of
other genomic analysis tools. The sensitivity of each tool was
determined by BLASTing (Altschul et al., 1997) the consensus

[310'sp2umolp105xo'sapeuuopnotq/ﬁdnq

i212 C.E.Schaeffer et al.

 

Runtime: thAIDER v. RepeatScout Memory: thAIDER v. RepeatScout

 

 

 

 

 

 

 

 

 

 

 

o RepeatScout c, A
0 m —
8 A thAIDER A
g _ + thAIDER.LM
0
oo
o m _ A
o N A
AA
0
8 - 0 A
A m 8 3 g _
In 0 o 0 g
1% 9:0 ,3 Amiga
8 o  A A A
JA 0 M
I a _ at a a — a“
.E 8 3 90 b A
E 6‘9 o e o o E AAA
CC f 0 ° w AAﬁA A
o 00 00 o O E e _ $A
go 0&0 0 AAA ‘H_ d’o
8 _ o a” + Hap
g 0 AM °
09 ++ m _ g “A 
A + $
AA AAA 0
. A M
o — a“  5' V o — W d,
l I I l l I I l l l
50 100 150 200 250 50 100 150 200 250

Genome size (Mb) Genome size (Mb)

Fig. 1. Runtime and memory usage for each tool, shown as a function of genome size for all autosomes from human, dog, mouse and C. elegans. All runs were
on a single core of a 12 core Intel Xeon x5650 CPU with 48 GB memory on equipment at the Ohio Supercomputer Center (Center, 1987). On the full human gen-
ome thAlDER.LM (which reduces memory requirements with a preliminary scan of the genome) required 3h 7 min; RepeatScout was unable to complete due
to a documented memory error

runtime v. seed length memory v. seed length

 

 

 

 

 

 

 

 

 

 

 

 

        

 

 

 

 

 

 

O
m. _
A m. _
A l!)
e 5
OJ
.E 5‘
 a o
n: g In‘ ‘
l!)
(r. _
o
I I I I I I I I I I
20 4O 60 80 100 20 4O 60 80 100
Seed length (density = 1) Seed length (density = 1)
r"2 = 0.610 r"2 = 0.970
runtime v. seed density memory v. seed density
0
O o Q _
3 _ e o O 0 st
° é
a o —
e 8 E E g g 9 o O
A 8 T 8 0 0 a 3 °°. —
L”, : a o o 0 0 g (3 V
a: o o 3 ° 0 V
E ' ' : >- . . S O 2' _
'e m ° ' é . =  r 8 ° 3 W
:1 a — 8 o z : . : . 0 a, O
D: a 8 g o g 3 5 3 8 E Ix, _
o - i ‘r
o g E g o ' ©
9. — o g g g E o _
§ 0 a _
I I I I I I I I ‘r I I I I I I I I
0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00
Seed density (weight = 40) Seed density (width = 40)
r"2 = 0.095 r"2 = -O.982

Fig. 2. Effect of seed weight and length on resource usage. We see seed weight (number of 1 characters) has significant effect on both runtime and memory,
while density has a small effect on memory. The stepped nature of the memory-to-length plot is an effect of the use of the C ++ standard template library un-
ordered map data structure, and its strategy of occasionally increasing the table size by large amounts

ﬁm'srcumol‘prqxo'sopeuuowrotq/ﬁdnq

Pattern—Hunter based rapid ab initio detection of elementary repeats i213

 

Sensitivity as a function of seed length and density
(c. elegans chr. V)

 

 

 

 

 

 

 

 

 

co
Ln 1‘. —M a
N. 0 ﬂ
3 O a _ .Q‘Qg
g 0 3E E. — a
.5 N .5 O
3 ° 3 ' mm A
o
 2  --- --- "21'"
0 o
m _ ............................................................... ..
o' I I I I I I I
0.4 0.5 0.6 0.7 0.8 0.9 1.0
seed length seed density
density = 1 weight = 32

Fig. 3. Variation in sensitivity due to seed length and seed density on (simulated) C. elegans chromosome 5. Specificity is near perfect (298%) in all cases, and
not shown here. Triangles represents the masking metric, circles the RepeatMasker metric and horizontal lines the RepeatScout results fore each metric
(dotted : masking, dashed :RepeatMasker). Length is the number of characters in a seed; weight is the number of 15 in a seed. Density is the weight-to-
Iength ratio. For seeds with density <1, weight was fixed at 32, with seeds chosen randomly within that constraint

Table 1. Improvement of RAIDER over RepeatScout as measured by masking-based sensitivity, as well as RepeatMasker-based sensitivity

 

 

Seed Organism Simulation Simulation Masking RM-based thaider RptScout Speedup
index basis size Sensitivity Sensitivity runtime runtime

(Mb) (v. RS) (v. RS) (seconds) (seconds)
Seeds selected to optimize Masking Sensitivity
537 arabidopsis chr5 2.91 0.51 0.06 1 26 260
516 C. elegans chrI 4.01 0.11 —0.11 1 120 1201
545 C. elegans chrII 3.18 0.12 —0.04 2 73 730
489 C. elegans chrIII 3.75 0.11 —0.13 1 114 1143
536 C. elegans chrIV 3.63 0.11 —0.09 1 117 1179
480 C. elegans chrV 4.90 0.14 —0.02 1 252 2522
512 human chr22 22.94 0.04 —0.02 41 474 114
545 mouse chr19 32.15 0.01 —0.05 47 2319 491
Seeds selected to optimize RepeatMasker sensitivity
537 arabidopsis chr5 2.99 0.08 0.06 1 26 260
154 C. elegans chrII 3.21 0.08 —0.02 1 73 730
154 C. elegans chrIV 3.66 0.07 —0.05 1 117 1175
70 C. elegans chrIII 3.75 0.04 —0.1 1 114 114
262 C. elegans chrI 4.03 0.08 —0.09 1 120 1209
262 C. elegans chrV 4.90 0.12 0.01 1 252 2521
508 human Chr22 37.96 0.04 —0.01 29 474 164
262 mouse Chr19 42.25 —0.02 —0.04 57 2319 401
537 human Chr18 43.11 0.03 —0.07 71 1412 191
Single seed picked for balance on all organisms
262 arabidopsis chr5 2.99 0.04 0.04 1 26 260
262 C. elegans chrII 3.21 0.1 —0.02 1 73 730
262 C. elegans chrIV 3.66 0.08 —0.06 1 117 1176
262 C. elegans chrIII 3.75 0.08 —0.11 1 114 1141
262 C. elegans chrI 4.03 0.08 —0.09 1 120 1209
262 C. elegans chrV 4.90 0.12 0.01 1 252 2521
262 human chr22 37.96 0.03 —0.02 37 474 124
262 human chr18 42.25 0.01 —0.08 85 1412 161
262 mouse Chr19 43.11 —0.02 —0.04 57 2319 401

 

Speciﬁcity is near identical (298%) in all cases. The seed index is an arbitrarily assigned index of the seed (see Supplementary appendix). Seeds were chosen by
using the best from a small random sampling over a range of weights and lengths.

sequence constructed from identiﬁed repeat against repeats listed detection of TEs for those interested in TE sequences themselves.
in RepBase (Jurka et al., 2005 ).

ii. RepeatMasker metric: We tested the utility of the toolit output

The sensitivity of each tool was determined by comparing the
RepeatMasker output against the RepBase identiﬁed repeat
as a library for RepeatMasker, allowing more comprehensive sequences.

ﬁm'srcumol‘prqxo'sopeuuowrotq/ﬁdnq

i214

C.E.Schaeffer et al.

 

Note that, as RepBase annotations are a collection of results
from many studies (Jurka et al., 2005 ), it is not realistic to expect
any one tool to find a large portion of the results; sensitivity will not
be high. What is important is the relative performance of the two
tools—indicating which will do better on the first pass over a newly
sequenced, or poorly studied, genome. Further, the applications of
RepeatMasker for result analysis were computationally intensive,
limiting the feasible size of test benchmarks. The problem is at least
in part due to the large number of overlapping elementary repeats
produced, and is one we expect to be alleviated with an assembly
tool we currently have under development.

In all analyses we report only sensitivity. Specificity is near per—
fect (20.98%) using both tools on all data sets in all cases. In short:
it is very easy to avoid false positives in this problem. The challenge
is to avoid false negatives.

4.3 Synthetic chromosomes

For resource testing we used full, unaltered chromosome sequences.
For quality testing we removed all TEs that occur only once, as no
tool can identify them as repeats. We left all other TEs intact, and
replaced inter—TE sequences with 1000 bp sequences generated using
a fifth—order Markov chain derived from the actual chromosomal se—
quence. This method of generating simulated sequences, used by
Saha et al. (2008), removes unannotated repeat sequences which
could incorrectly increase our false positive count, and reduces input
size while still requiring the tool to search for actual TEs. The result
is a ‘semi—synthetic’ sequence: one that is reduced in size, but still ac—
curately reflects the important characteristics of an actual sequence.

4.4 Quality of results

Although thAIDER is significantly faster than RepeatScout,
that is only of value if the quality of the results is at least compa—
rable with that of alternative tools. There is also the question of
the effect of the spaced seed selection on result quality—d0 they
make a difference, and if so, what are the optimal values? In the
following we use a C. elegans chr. V—based synthetic chromosome
to investigate the effect of parameter modification, then compare
the output of thAIDER against RepeatScout on selected
chromosomes from C. elegans, arabidopsis, mouse and human.
Although thAIDER is fast enough to allow for large—scale test—
ing on real chromosomes, the runtime required for the
RepeatMasker analysis of the results precluded this approach on
a chromosome scale—forcing us to use smaller semi—synthetic
sequences.

In PatternHunter, choice of seed has a significant effect on result
quality in homology—based search. Li et al. (2004) report that in one
case, the choice of seed can improve hit rate from under 30% to
over 80%. However, finding the optimal seed is a computationally
challenging problem (Ma and Li, 2007). Our first goal is to verify
that seeds are also useful in de nouo identification, and that their
structure had an impact on the results. We characterize our seeds
with three variables: length l is the number of characters in a seed,
weight w is the number of 1 characters in a seed, and density
d : %,with 0 S d S 1, where d: 1 indicates a seed with no wild—
card characters.

In Figure 3 we see the effect of varying seed length when density
is held at 1 (that is, no zero characters), as well as the effect of vary—
ing density while holding weight at 32 (using a small number of ran—
domly picked seeds at each density). In each case, triangles
represents our masking metric, circles our RepeatMasker metric,
and the horizontal lines indicate RepeatScout performance using

default parameters (dotted is masking, dashed is RepeatMasker).
We see from these results that seeds do impact result quality. It is
also evident that while length and density are factors in determining
a good seed, they are not sufficient in themselves to find optimal
seeds. Due to the runtime constraints of our analysis software we
were limited to randomly exploring a minuscule portion of the seed
space, leaving significant potential for improvement. Finding good
seeds will require greater resources or the development of an ana—
lytic approach, which is beyond the scope of this work, and cur—
rently under development in our lab.

Table 1 displays the results from our random exploration of the
seed space. In the first section of the table we see the best seed for
each tested chromosome, based on a sample of a few hundred ran—
domly picked seeds, shown in terms of their improvement over the
RepeatScout baseline tool (e.g. on ce10 chrV thAIDER sensitivity
is 14% higher than RepeatScout). In this table we see that results are
somewhat dependent on seed choice. But in general we see an im—
provement in the ability to mask, a range of results in using the out—
put as a RepeatMasker library, and a speedup of several orders of
magnitude.

5 Conclusion

thAIDER is a new tool for the de nouo identification of genome
repeat elements that is applicable to assembled genomes. We have
empirically demonstrated that it is orders of magnitude faster than
the premier tool in the literature (RepeatScout) yet still improves on
that tool’s ability to mask out TEs and other genomic repeats.
Specifically: we have developed a formal mathematical model com—
bining the concept of spaced seeds with that of elementary repeats;
in addition we have implemented a tool around this model, and we
have used that tool to demonstrate that:

i. The identiﬁcation of elementary repeats is useful in the context
of de nouo repeat masking.

ii. The introduction of spaced seeds improves results without sig—
niﬁcant adverse effects on runtime.

iii. The resulting tool produces results of a quality on par with the
leading tool in the literature but works at a speed signiﬁcantly
faster (with an average 10>< speedup over RepeatScout for the
human chromosome).

We have produced a freely available implementation of
thAIDER distributed from https://github.com/karroje/thAIDER
under the GNU General Public License (version 3). All code is imple—
mented in C ++ and tested on OS X and various flavors of Linux.
The tool will provide a list of elementary repeats with the coordin—
ates of each instance, and will optionally produce a masked genomic
sequence.

thAIDER is the first step towards a full identification tool
for TEs and repetitive DNA, but leaves considerable room for im—
provements. The use of multiple spaced seeds has been highly suc—
cessful in other applications and we are in the process of
implementing this—but doing so requires modifications to both
the algorithm and the underlying theoretical model, and is beyond
the scope of this work. We are also developing tools to aid in seed
selection, and to assemble elementary repeats into contiguous
TEs—thus implicitly addressing the problems with indels as well.
Preliminary tests indicate that this last improvement, while not
significantly increasing computation time, will considerably im—
prove thAIDER’s performance in generating RepeatMasker
libraries.

ﬁm'srcumol‘prqxo'sopeuuowrotq/ﬁdnq

Pattern—Hunter based rapid ab initio detection of elementary repeats i215

 

Acknowledgements

We would like to thank Laura Tabacca, Luke Skon, Craig Lovell and Greg
Gelfond for their help with manuscript preparation.

Funding

This research was conducted under funding from the National Science
Foundation grant 0953215.

Conﬂict of Interest: none declared.

References

Altschul,S. et al. (1997) Gapped BLAST and PSI-BLAST: a new generation of
protein database search programs. Nucleic Acids Res., 25, 3389.

Arndt,P.F. and Hwa,T. (2005) Identiﬁcation and measurement of neighbor-
dependent nucleotide substitution processes. Bioinformatics, 21, 2322—2328.

Bao,Z. and Eddy,S.R. (2002) Automated de novo identiﬁcation of repeat se-
quence families in sequenced genomes. Genome Res., 12, 1269—1276.

Berardini,T.Z. et al. (2015) The arabidopsis information resource: making
and mining the “gold standard” annotated reference plant genome. Genesis,
53, 474—485.

Center,O.S. (1987). Ohio supercomputer center. http://osc.edu/ark:/19495/
f5s1ph73.

Edgar,R.C. and Myers,E.W. (2005) PILER: identiﬁcation and classiﬁcation of
genomic repeats. Bioinformatics (Oxford, England), 21, i152—i158.

Figueroa,N. (2013). RAIDER: Rapid Ah Initio Detection of Elementary
Repeats. Master: RThesis, Miami University, Oxford, Ohio.

Figueroa,N. et al. (2013). RAIDER: Rapid Ab Initio Detection of Elementary
Repeats. In Advances in Bioinformatics and Computational Biology, pp.
170—180. Springer International Publishing, Cham.

He,D. (2006). Using sufﬁx tree to discover complex repetitive patterns in
DNA sequences. Conference proceedings: . .. Annual International
Conference of the I EEE Engineering in Medicine and Biology Society. IEEE
Engineering in Medicine and Biology Society. Annual Conference, vol. 1,
pp. 3474—3477.

Huo,H. et al. (2009). An Adaptive Sufﬁx Tree Based Algorithm for Repeats
Recognition in a DNA Sequence. 2009 International Joint Conference on
Bioinformatics, Systems Biology and Intelligent Computing. Shanghai,
China, pp. 181 —184.

Jiang,N. (2013) Overview of repeat annotation and de novo repeat identiﬁca-
tion. Methods Mol. Biol., 1057, 275—287.

Jurka,]. et al. (2005 ) Repbase Update, a database of eukaryotic repetitive
elements. Cytogenet. Genome Res., 110, 462—467.

Karro,].E. et al. (2008) Exponential decay of GC content detected by strand-
symmetric substitution rates inﬂuences the evolution of isochore structure.
Mol. Biol. Evol., 25, 362—374.

Kent,W.]. et al. (2002). The human genome browser at UCSC. Genome, 12,
996—1006.

Lander,E.S. et al. (2001) Initial sequencing and analysis of the human genome.
Nature, 409, 860—921.

Li,M. et al. (2004) Patternhunter II: highly sensitive and fast homology search.
]. Bioinformatics Comput. Biol., 2, 417—439.

Li,R. et al. (2005) ReAS: Recovery of ancestral sequences for transposable
elements from the unassembled reads of a whole genome shotgun. PLOS
Comput. Biol., 1, e43.

Ma,B. and Li,M. (2007) On the complexity of the spaced seeds. ]. Comput.
Syst. Sci., 73, 1024—1034.

Ma,B. and Yao,H. (2009) Seed optimization for i.i.d. similarities is no easier
than optimal Golomb ruler design. Inform. Process. Lett., 109, 1120—1124.

Ma,B. et al. (2002) PatternHunter: faster and more sensitive homology search.
Bioinformatics, 18, 440—445.

McClintock,B. (1950) The origin and behavior of mutable loci in maize. Proc.
Natl. Acad. Sci. USA, 36, 344—355.

Mugal,C.F. et al. (2008) Transcription-induced mutational strand bias and its
effect on substitution rates in human genes. Mol. Biol. Evol., 26, 131—142.
Pevzner,P.A. et al. (2004) De novo repeat classiﬁcation and fragment assem-

bly. Genome Res., 14, 1786—1796.

Pratchett,T. (2006). Hogfather: A Novel of Discworld. HarperPrism, New
York.

Price,A.L. et al. (2005) De novo identiﬁcation of repeat families in large gen-
omes. Bioinformatics, 21, i351—i358.

Saha,S. et al. (2008) Empirical comparison of ab initio repeat ﬁnding pro-
grams. Nucleic Acids Res., 36, 2284—2294.

Sanger,F. and Coulson,A.R. (1975) A rapid method for determining sequences
in DNA by primed synthesis with DNA polymerase.  Mol. Biol., 94,
441—448.

SanMiguel,P. et al. (1996) Nested retrotransposons in the intergenic regions of
the maize genome. Science), 274, 765—768.

Smit,A.F.A. et al. (2015). RepeatMasker Open 4.0. 2013—2015. http://www.
repeatmasker.org.

Wheeler,T.]. and Eddy,S.R. (2013) nhmmer: DNA homology search with pro-
ﬁle HMMs. Bioinformatics, 29, 2487—2489.

Zheng,]. and Lonardi,S. (2005). Discovery of Repetitive Patterns in DNA with
Accurate Boundaries. Fifth IEEE Symposium on Bioinformatics and
Bioengineering (BIBEame), pp. 105—112

Zhi,D. et al. (2006) Identifying repeat domains in large genomes. Genome
Biol., 7, R7.

ﬁm'srcumol‘prqxo'sopeuuowrotq/ﬁdnq

