Bioinformatics,31(12),2015,1913—1919

doi: 10.1093/bioinformatics/btv053

Advance Access Publication Date: 31 January 2015
Original Paper

 

Sequence analysis

Starcode: sequence clustering based on
all-pairs search

Eduard ZoritaI'Z, Pol CuscéI'2 and Guillaume J. Filion1'2'*

1Genome Architecture, Gene Regulation, Stem Cells and Cancer Programme, Centre for Genomic Regulation
(CRG), Dr. Aiguader 88, 08003 Barcelona and 2Universitat Pompeu Fabra (UPF), 08002 Barcelona, Spain

*To whom correspondence should be addressed.
Associate Editor: Inanc Birol

Received on July 5,2014; revised on January 25, 2015; accepted on January 26, 2015

Abstract

Motivation: The increasing throughput of sequencing technologies offers new applications and
challenges for computational biology. In many 0fthose applications, sequencing errors need to be
corrected. This is particularly important when sequencing reads from an unknown reference such
as random DNA barcodes. In this case, error correction can be done by performing a pairwise com—
parison of all the barcodes, which is a computationally complex problem.

Results: Here, we address this challenge and describe an exact algorithm to determine which pairs
of sequences lie within a given Levenshtein distance. For error correction or redundancy reduction
purposes, matched pairs are then merged into clusters of similar sequences. The efficiency of star—
code is attributable to the poucet search, a novel implementation of the Needleman—Wunsch algo—
rithm performed on the nodes of a trie. On the task of matching random barcodes, starcode outper—
forms sequence clustering algorithms in both speed and precision.

Availability and implementation: The C source code is available at http://github.c0m/gui11aume/

 

starcode.
Contact: guillaume.fili0n@gmail.com

 

1 Introduction

All sequencing technologies have a certain degree of imprecision.
For instance, the Illumina platform (Margulies et (11., 2005) has a
1—2% error rate consisting of substitutions (Dohm et (11., 2008;
Nakamura et (11., 2011) and the PacBio platform has a 15% error
rate consisting of insertions and deletions (Eid et (11., 2009). The
enormous throughput of such technologies has recently created add-
itional needs for developing efficient error correction algorithms.
Sequencing errors can be discovered by comparing the reads to a
reference genome. However, such a reference is not always available.
When the sequences are random or taken from an unknown source,
clustering is the main strategy to correct the errors. For instance, this
situation arises when using random barcodes to track cells or tran-
scripts (Akhtar et (11., 2013; Schepers et (11., 2008). Sequencing errors
will create erroneous (nonexistent) barcodes that have to be removed.
Sequence clustering can be viewed as a community detection
problem on graphs, where nodes represent sequences and edges

(63 The Author 2015. Published by Oxford University Press.

represent matches between related sequences. The process consists
of a matching phase (the most computationally intensive), where the
graph is constructed, and a clustering phase where communities are
identified.

Here, we describe a sequence clustering algorithm called
‘starcode’ in reference to clusters of random barcodes, which typic-
ally have a star shape. Starcode is based on all-pairs search, i.e. all
the pairs of sequences below a given Levenshtein distance are identi-
fied during the graph construction phase. Matching is carried out by
lossless filtration, followed by an exhaustive search on the branches
of a prefix trie. The novelty of the algorithm is the poucet strategy,
which uses the redundancy of alphabetically sorted sequences to
avoid unnecessary recomputations and gain speed.

In this article, we present and benchmark starcode. We show
that on real biological datasets, starcode is orders of magnitude
faster than existing sequence clustering software. Even though star-
code was designed for error correction, we also show that it can be

1913

This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/Iicenses/by-nc/4.0/),
which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact

journals.permissions@oup.com

/310‘srcumo[p10}xo‘sopcuHOJIItotq/ﬁdnq

Needleman and Wunsch,

Fig. 1

1970

Fig. 3

Figure 1

53x\Ewogmoizmnnw.oxmoagoﬁsiwbwﬁ

Wu and Manber (1992)

1995

s

Ukk onen

Fig. 2

 

 

 

 

 

 

 

 

 

4322223
5433323
6544432

 

 

 

 

Figure1

Figure 4

55,2kgogmoddmmowoio~&o:~=£¢o~m\

Figure 1

a).

Figure 1

Figure 1

6

 

 

 

 

 

 

 

 

 

 

 

 

 

Figure 2

 

2002

bdacKay,

Figure 5

Tables 1

Figure 5

Fig.

{Jr

/310'S[BHmO[pJOJXO'SOTJBLUJOJIITOTCI”Zduq

Fig. 5

Figure 5

Shimizu and Tsuda, 2011
Chong er [1]., 2012

Bao er [1]., 2011
Fu 61‘ (11., 2012

Fig. 6

Figure 6

Figure 6

Figure 6

Fig. 6

/810'S[Bum0_fp103x0"sotJBmJOJutotq/ﬁdnq

1918

E.Zorita et al.

 

Table 3. Summary of the biological datasets used for
benchmarking

Table 4. Running time (in seconds) of the software on three biolo-
gical datasets

 

 

 

 

 

Dataset Read count Read length Type Software SRR95 045 7 PRJEB7686 SRR95 0477
SRR950457 6 542 309 16 i 1 Single Starcode 5 2898 44
PRJEB7686 127 675 537 50 Single Seed — 60 374 —
SRR950477 2 460 226 100 + 1 00 Paired end Slidesort 4055 > 10 days —
Rainbow — — 306
All the datasets are Illumina reads. Cd.hit.est 170 512 591 _

output, starcode maintains a competitive performance in terms of
running time.

The performance on artificial data is not always in agreement
with the performance on experimental datasets. Typical experiments
present additional difficulties. For instance, the sizes of the clusters
may be uneven and the reads may contain near constant regions that
usually degrade the performance of filter—based algorithms. We
benchmarked sequence clustering algorithms on the problem of clus—
tering thousands of reporters integrated in parallel (TRIP) barcodes
(Akhtar et al., 2013). Briefly, the principle of TRIP is to tag reporter
transcripts with random barcodes and measure the abundance of
barcodes in the RNA as a proxy for gene expression. There is no
reference to match aberrant barcodes against, because the tagging
sequences are unknown.

The basic properties of the datasets used for benchmarking are
summarized in Table 3. Dataset 1 (SRR950457) has been pre—pro—
cessed to extract the barcode and remove the constant part of the
reads. Only barcodes between 15 and 17 nucleotides were included
in the file. Dataset 2 (PRJEB7686) consists of raw Illumina single
reads. These datasets differ by the read size, the total read count
and the empirical cluster sizes. According to the output of starcode,
the largest clusters of dataset 1 contain approximately 70 000
sequences, whereas dataset 2 contains four clusters with more
than 1 million sequences. Dataset 3 (SRR950477) has been included
to benchmark starcode against rainbow in paired—end clustering
mode.

The running times of starcode, seed, slidesort, rainbow and cd—
hit are summarized in Table 4. We accommodated the distance
threshold for the first dataset to compensate for the reduced se—
quence length. Both starcode and slidesort were executed with the
option ‘—d 2’ and the identity for cd—hit was set to ‘—c O . 85’. We
were not able to run seed on dataset 1 due to limitations on the min—
imum sequence length. Starcode was significantly faster than the
other tools on all the datasets. Seed and cd—hit came in second pos—
ition with a running time approximately 35 and 20 times greater on
datasets 1 and 2, respectively. Rainbow was nearly an order of mag—
nitude slower in the job of clustering paired—end reads. We did not
record the exact running times past 10 days since this is several
orders of magnitude higher than the running time of starcode.

The memory footprint of the different tools on the same datasets
is presented in Table 5. The values represent the peak memory usage
throughout the run on the datasets described above. On short reads
(dataset 1), starcode outperforms the other tools taking advantage
of the trie compaction. On dataset 3, starcode had a significantly
larger memory usage than rainbow. Starcode and cd—hit used similar
amount of memory on dataset 2. Both needed twice as much mem—
ory as slidesort, which has the advantage of not storing the complete
graph during the all—pair comparison.

3.3 Identifying enriched sequence motifs
As a sequence clustering algorithm, starcode can also be used for
other applications, such as the identification of enriched motifs.

 

Exact running time was not recorded past 10 days. A dash indicates that
the software cannot be used for this dataset.

Table 5. Memory usage (in GB)

 

 

Software SRR950457 PRJEB7686 SRR95 0477
Starcode 0.65 30.9 5.2
Seed — 53.9 —
Slidesort 1.30 13.9 —
Rainbow — — 0.5
Cd-hit-est 0.80 28.5 —

 

Sequence motifs are thought to play an important role in DNA me—
tabolism. Key regulators, such as transcription factors, nucleosomes
and non coding RNAs have sequence preferences targeting them to
the sites where they act. Identifying those sequences is a way to pin—
point the regulators and the mechanisms they are involved in.
However, the sequence motifs are not strictly identical at different
sites, hence they are better identified by inexact matching. This
problem becomes computationally difficult for long motifs (above
12—13 nucleotides) because of the combinatorial scaling.

We set up a test based on the meningitis—causing agent Neisseria
meningitidis. The genome of this bacterium is interspersed with a
frequent 12 bp sequence known as DNA uptake sequence (Smith et
al., 1999). We extracted the 12—mers from both orientations of the
2.19 Mb genome, yielding 4.39 million 12—mers, consisting of 2.77
million unique sequences. Clustering the 12—mers with starcode
Within a Levenshtein distance of 2, we identified the known DNA
uptake sequence of N.meningitidis (ATGCCGTCTGAA) as the
most abundant 12—mer, with 1466 exact and 2096 inexact hits. This
result testifies to the fact that starcode can be used to identify bio—
logically relevant motifs in bacterial genomes.

To test starcode on another application, we used the
RNA—protein interaction data produced by RNAcompete (Ray et
al., 2009). The mammalian splicing factor SRSF1 is known to bind
RNA GA—rich motifs, but there is some disagreement about the
motif that it recognizes (Pandit et al., 2013). For each replicate of
the human SRSF1 in the RNAcompete dataset, we replaced the
microarray signals by their rank and extracted the 10—mers from
the microarray probes. The 10—mers were given a score equal to the
rank of the probe they belong, and enriched motifs were found using
the sphere clustering of starcode with maximum Levenshtein dis—
tance 2. The score of the most enriched 10—mer is thus the sum of
the ranks of all 10—mers within this distance. Among the six repli—
cates, the most enriched 10—mers were AGGACACGGA,
AGGACACGGA, AGGACGGAGG, AGGACGGAGG, AGGAC
ACGGA and AGGATACAGG. Except for the last replicate, the
motifs consist of AGGAC and GGA, with a spacer of variable
length. This suggests that the binding of SRSF1 to RNA may involve
a spacer sequence, which would explain the disagreement between
the motifs derived from 6—mers or 7—mers.

ﬁm'spzumol‘pmyo'sopeuuowtotq/ﬁdnq

Sequence clustering by all—pairs search

1919

 

4 Discussion and conclusion

Starcode is a solid algorithm for sequence clustering based on all—
pairs matching. It achieves high precision, and on experimental
datasets it can be faster than popular heuristics. By design, starcode
is tailored to process high throughput sequencing data on multi—core
platforms with sufficient amount of memory. Because of its superior
precision and faster running time, it fills a gap among available soft—
ware, by allowing to take full advantage of middle to high end
hardware.

It is somewhat surprising that starcode is significantly faster
than competing tools on experimental datasets, whereas seed and
cd—hit are faster on artificial datasets. Starcode was de—
veloped ground up from TRIP experimental datasets and the pou—
cet search was selected for giving the best empirical results. We
speculate that the trie structure benefits from the entropy deficit
that is typically observed in experimental data versus pseudoran—
dom reads.

The speed and precision of starcode also makes it useful for other
clustering tasks, such as identifying enriched motifs in microbial
genomes and in experimental data. Here, we have given two ex—
amples of such applications. In the first, we recover a known en—
riched 12—mer in the genome of N.meningitidis. In the second, we
recover the motif of the human RNA binding protein SRSF1 and n0—
tice that it seems to consist of two halves separated by a linker. This
hypothesis is consistent with the fact that SRSF1 binds RNA
through two consecutive RNA—recognition motifs that are known to
bind 3—4 nucleotides in a row (Daubner et al., 2013). The
Levenshtein distance, which incorporates insertions and deletions, is
more likely to capture bi—partite binding motifs than position weight
matrix representations. The use of a clustering method to tackle this
problem is unusual, but it illustrates the potential advantages of dis—
tance—based approaches.

One of the reasons why starcode appears to be faster than alter—
native tools is that it is designed to cluster relatively similar
sequences. When clustering related sequences, the Levenshtein dis—
tance will have to be increased, leading to exponentially longer run—
ning times (Fig. 5b). However, for the important practical case of
correcting errors introduced by sequencing, starcode illustrates that
there is still room for developing algorithms that are both faster and
more accurate than the current state of the art.

Acknowledgements

We would like to thank Maria Chatzou for her precious feedback on the pre-
liminary version of this manuscript and Heng-Chang Chen for performing the
Drosophila TRIP experiments.

Funding

This research was supported by the Government of Catalonia (Dept. of
Economy and Knowledge) and the Spanish Ministry of Economy and
Competitiveness Plan Nacional BFU2012-37168 (Centro de Excelencia
Severo Ochoa 2013—2017) (SEV-2012-0208). P.C. fellowship was partly sup-
ported by the Spanish Ministry of Economy and Competitiveness [State
Training Subprogram: predoctoral fellowships for the training of PhD stu-
dents (FPI) 2013].

Conﬂict of Interest: none declared.

References

Akhtar,W. et al. (2013). Chromatin position effects assayed by thousands of
reporters integrated in parallel. Cell, 154, 914—927.

Bao,E. et al. (2011). SEED: efﬁcient clustering of next-generation sequences.
Bioinformatics, 27, 2502—2509.

Chong,Z. et al. (2012). Rainbow: an integrated tool for efﬁcient clustering and
assembling RAD-seq reads. Bioinformatics, 28, 2732—2737.

Daubner,G.M. et al. (2013). RRM-RNA recognition: NMR or crystallog-
raphy and new ﬁndings. Curr. Opin. Struct. Biol., 23, 100—108.

Dohm,].C. et al. (2008). Substantial biases in ultra-short read data sets from
high-throughput DNA sequencing. Nucleic Acids Res., 36, e105.

Eid,]. et al. (2009). Real-time DNA sequencing from single polymerase mol-
ecules. Science, 323, 133—138.

Fu,L. et al. (2012). CD-HIT: accelerated for clustering the next-generation
sequencing data. Bioinformatics, 28, 3150—3152.

MacKay,D.].C. (2002). Information Theory, Inference (7‘ Learning
Algorithms. Cambridge University Press, New York.

Margulies,M. et al. (2005). Genome sequencing in microfabricated high-dens-
ity picolitre reactors. Nature, 437, 376—380.

Nakamura,K. et al. (2011). Sequence-speciﬁc error proﬁle of Illumina sequen-
cers. Nucleic Acids Res., 39, e90.

Needleman,S.B. and Wunsch,C.D. (1970). A general method applicable to the
search for similarities in the amino acid sequence of two proteins. ]. Mol.
Biol., 48, 443—453.

Pandit,S. et al. (2013). Genome-Wide analysis reveals SR protein cooperation
and competition in regulated splicing. Mol. Cell, 50, 223—235.

Ray,D. et al. (2009). Rapid and systematic analysis of the RNA rec-
ognition speciﬁcities of RNA-binding proteins. Nat. Biotechnol, 27, 667—670.

Schepers,K. et al. (2008). Dissecting T cell lineage relationships by cellular bar-
coding. ]. Exp. Med., 205, 2309—2318.

Shimizu,K. and Tsuda,K. (2011). SlideSort: all pairs similarity search for short
reads. Bioinformatics, 27, 464—470.

Smith,H.O. et al. (1999). DNA uptake signal sequences in naturally trans-
formable bacteria. Res. Microbial, 150, 603—616.

Ukkonen,E. (1995). On-line construction of sufﬁx trees. Algorithmica, 14,
249—260.

Wu,S. and Manber,U. (1992). Fast text searching: allowing errors. Commun.
ACM, 35, 83—91.

ﬁm'spzumol‘pmyo'sopeuuowtotq/ﬁdnq

