Motivation: Membrane proteins are both abundant and important in cells, but the small number of solved structures restricts our understanding of them. Here we consider whether membrane proteins undergo different substitutions from their soluble counterparts and whether these can be used to improve membrane protein alignments, and therefore improve prediction of their structure. Results: We construct substitution tables for different environments within membrane proteins. As data is scarce, we develop a general metric to assess the quality of these asymmetric tables. Membrane proteins show markedly different substitution preferences from soluble proteins. For example, substitution preferences in lipid tail-contacting parts of membrane proteins are found to be distinct from all environments in soluble proteins, including buried residues. A principal component analysis of the tables identifies the greatest variation in substitution preferences to be due to changes in hydrophobicity; the second largest variation relates to secondary structure. We demonstrate the use of our tables in pairwise sequence-to-structure alignments (also known as 'threading') of membrane proteins using the FUGUE alignment program. On average, in the 10â€“25% sequence identity range, alignments are improved by 28 correctly aligned residues compared with alignments made using FUGUE's default substitution tables. Our alignments also lead to improved structural models. Availability: Substitution tables are available at: http://www.stats.ox .ac.uk/proteins/resources.
INTRODUCTIONMembrane proteins constitute  30% of human proteins (), and are important drug targets. Unfortunately, the structures of these proteins are hard to determine. As of January 2011, there are  70000 structures in the Protein Data Bank (PDB) (), of which fewer than 1500 are recognized as membrane proteins by the PDB_TM database (). Even these available structures are highly redundant. Thus, for most membrane proteins only a sequence is known: structural information must be inferred by modelling. Structure modelling can broadly be divided into template-free and template based methods (). Template based modelling makes use of 'homologous' proteins that are identified as having similar structures to that of the target sequence. Proteins are * To whom correspondence should be addressed. normally considered homologous if they share significant sequence similarity. Once a homologous protein with a known structure (the 'template') has been identified, it is aligned to the target sequence. This alignment between two sequences can be improved by the use of structural information from the template. This sequence-tostructure alignment forms the blueprint which coordinate generation programs such as MODELLER for soluble proteins (), or MEDELLER for membrane proteins () use to build a model. The accuracy of a model is primarily determined by the quality of the initial alignment (). The membrane is a radically different environment from the aqueous environment of soluble proteins. Most membrane bilayers are composed of phospholipids with hydrophobic tail groups and charged head groups. This suggests for example that substitutions from charged residues to hydrophobic ones are unlikely in head-contacting regions, and conversely that substitutions from hydrophobic residues to charged ones are unlikely in tail-contacting regions. Thus, membrane proteins will have unique patterns of substitutions (). However, due to lack of data, the alignment of membrane proteins is typically performed with substitution tables optimized for soluble proteins. Identifying appropriate tables for membrane environments is expected to improve methods that depend on them, particularly for sequenceto-structure alignment (). Environment-specific substitution tables (ESSTs) are one of the methods used to align target sequences with known structures. A substitution table tabulates the chances that an amino-acid in one protein is replaced by another in a second protein: for example that a glycine residue is replaced by an alanine. ESSTs are a set of substitution tables, each of which is to be used in a different environment. Environments are defined by features such as secondary structure and accessibility. ESSTs are used in sequenceto-structure alignment as the environments for each residue can be determined from the structure. To create an ESST, substitutions in each environment must be counted between a number of related proteins. In early studies tables were constructed by counting substitutions between homologous proteins of known structure (). More recently, tables have been made by counting substitutions between one structure and many sequences (). The latter method is used here. Environment independent substitution tables have previously been made for transmembrane regions. The JTT table () appears to be the earliest example, with the PHAT () and SLIM () tables following. These tables were intended to be used in conjunction with a nonmembrane table, such as BLOSUM62 (). This 'bipartite'scheme requires a separate algorithm to decide where to use each table. Sequence alignment has been attempted using PHAT, with both bad (), and good () results when compared with alignments using only BLOSUM62. The SLIM table is optimized for homology detection: its authors explicitly caution against using it for alignment. Two problems complicate the construction of ESSTs for membrane proteins: Firstly, it is difficult to determine the structural environment of residues even in known membrane structuresalthough secondary structure and accessible surface area can be determined as for soluble proteins, the location of a residue within the membrane bilayer cannot be inferred from the solved structure alone. Here we use the annotation program iMembrane () to determine these contacts. Secondly, once an ESST is created, it is difficult to assess if it is representative of its environment across all membrane proteins. How can we tell if we have made a 'good' table? We describe a metric of ESST quality that is robust against perturbations in the observed frequencies of individual substitutions. We create 'good' membrane ESSTs and analogous soluble ESSTs and make global comparisons between them. A dendrogram illustrates inter-table distances, and a principal component analysis is used to detect the dependence of substitution patterns on environment type. Membrane environments are found to be far more diverse than soluble protein environments. For example, any pair of lipid tail layer environments are more dissimilar than the corresponding pair of soluble environments. FUGUE () is a commonly used program to produce sequence-to-structure alignments with ESSTs. We compare several methods for sequence-to-structure alignment generation: default FUGUE, our membrane-based FUGUE, a bipartite PHAT/BLOSUM62 scheme, and the sequence-to-sequence alignment program MUSCLE (). Our membranespecific ESSTs consistently improve alignment quality, especially at low sequence identity. In the 1025% sequence identity range, compared with the next best method (the default FUGUE tables) 54 alignments are improved by at least 10 residues, whereas only 6 alignments are worsened by the same amount. In this range the average improvement per alignment is 28 more residues aligned correctly. These alignment improvements are found to lead to corresponding improvements in structure prediction.
METHODS
Environment descriptorsSecondary structure and accessible surface area are annotated using JOY (). We use 'a' to label inaccessible residues and 'A' to label accessible ones. By convention, a residue is deemed accessible when more than 7% of its surface area is exposed (). The secondary structure types used are helix (H), -strand (E), +ve  angle (P), and coil (C). In the case of membrane proteins, environments can also be defined depending on the part of the membrane a residue is contacting. iMembrane uses coarse-grained molecular dynamics simulation data from the CGDB. A schematic slice through a membrane protein (1YEW) in the membrane indicating the layer types used. 'N' is the region outside the membrane, 'T' and 'H' span the tail and head groups of the membrane lipids respectively, 'P' is the area lining the pore, and 'I' is the interface region between the tail and head groups. database () to annotate three contact environments. Residues that are in contact with the membrane for < 10% of the time are in the 'n' environment; of the remaining residues, those that spend more time in contact with the lipid heads are in the 'h' environment, and those that spend more time in contact with the lipid tails are in the 't' environment. By taking a consensus of these contact annotations, a membrane protein can be divided into layers corresponding to the lipid heads (H), lipid tails (T), and not-in-membrane (N) regions. There are thus 72 = 2433 distinct possible environments. Larger numbers of environments lead to more specific substitution tables, at the cost of each table being constructed with less data. It is desirable to combine environments so as to find a minimal set that encompasses as much variation in substitution patterns as possible. There are many possible valid minimal environment sets. Here we ignore the contact annotation, with two exceptions. Accessible residues that lie in the tail layer but rarely contact the membrane can be identified as residues that line a pore (P). Accessible residues that are annotated with head contacts but are in the tail layer, or with tail contacts but are in the head layer, define an interface region (I) spanning the hydrophilic and hydrophobic parts of the membrane. We add these to the existing layer types to give five labels: H(ead), N(ot in membrane), T(ail), P(ore) and I(nterface) regions (). It is convenient to refer to environments using a letter code e.g. 'IEA' = interface layer, -strand, accessible residues. Letter codes will always be built in the order Layer:Secondary Structure:Accessibility. An asterisk '*' will be used when the exact letter does not matter. Under this system 'I**' refers to all interface layer environments, whereas 'I*A' refers to accessible interface layer environments.
Alignments for table generationTransmembrane protein structures were identified from the PDB_TM database () and downloaded from the PDB (). Each was then split into its component protein chains. Redundant chainsthose with > 80% sequence similaritywere removed using Cd-hit (). Chains without iMembrane search hits were also removed, leaving 328 chains. For each chain, related sequences were obtained from 5 iterations of PSIBLAST () using an E-value threshold of 110 3 for keeping a hit, and a threshold of 110 5 for including a hit in the sequence profile of the next iteration. PSI-BLAST searches were made against the NCBI nr database. These sequences were then aligned to their correspondingAll combinations of letters are possible. The exception being that Pore-lining and Interface-region layers cannot be inaccessible as the definition of these layers requires them to have contacts with either the membrane or solvent. Positive  environments will later be merged into just two environments labelled 'NPA' and 'NPa' (see Section 3.2). structures with MUSCLE (), and the alignments used to generate the membrane substitution tables. Soluble tables were generated from four different alignment sets. The first of these was generated as abovethat is, by aligning multiple homologous sequences with each structure. The structures were obtained by taking the first structure from each family in the HOMSTRAD database (), and the sequences were found by searching the nr database. After filtering, this yielded 423 soluble chains which were used to produce our standard soluble tables. The other three alignment sets (SUB177, SUB371 and HOMSTRAD) are structure-to-structure alignments used only to validate our standard soluble tables. SUB177 and SUB371 are described in the original FUGUE paper (). SUB177 is a set of 177 protein families comprising 706 structures used to build the default tables of FUGUE. SUB371 is a set of 371 protein families comprising 1357 structures used to test the stability of the SUB177-derived tables. The HOMSTRAD set comprises 1032 families and more than 3000 structures.
i16
ESSTs improve membrane protein alignment
Table constructionMembrane ESSTs are constructed as follows. The number of times a particular substitution is observed in an environment is tabulated in an environment specific counts matrix A E (where E labels the environment). Environments are determined by the annotations from iMembrane and JOY. For each structure in our set of 328 membrane protein alignments, every time a structure residue 'a' in environment E has a corresponding residue 'b' in one of the aligned sequences, the matrix element A E ba is increased by unity. The entries of the ESST S E are obtained from the following formula:Given that the structure has a residue a, the numerator of the logarithm is the probability of a substitution a  b in the matched sequence. The denominator is the probability that any substitution in any environment will go to b rather than another residue. The prefactors (and the taking of the logarithm itself) are a standard rescaling. ESSTs are generally asymmetric, and are rounded to the nearest integer. The program JSUBST (a java derivative of SUBST available at http://www.stats.ox.ac.uk/proteins/resources) was used to construct the counts matrices A E. Counts were made between clusters of similar sequences (60% sequence identity) and the cluster containing the structure. Each cluster was weighted by the number of sequences it contained as described in. Substitutions to and from gaps were not counted, but all columns in the alignments were included when constructing the matrices. A constant of 1/100 of a count was added to each entry A E ba to prevent S E ba evaluating to  in rare cases. All sequences in the same cluster as the structure were annotated with its structural annotation for the purposes of matrix construction. Solubletables were built in an analogous manner for each of the four sets of soluble alignments.
Identifying consistent tablesHow can we identify substitution tables that are unrepresentative of their environments? A crude method is to label as unrepresentative all those tables with fewer than a minimum number of counts. However, this method can run into problemsa rare environment might be extremely consistent in the substitutions it allows, such that the number of counts is small, but the data is representative. Here we use a combination of a count threshold and a 'self-consistency' score. The latter is obtained as follows. By normalizing the columns of a counts matrix A E ba , we can interpret each entry as the probability that a  b in environment E. When a vector of amino acid counts is multiplied by this matrix, it changes according to the mutation probabilities encoded in the matrix. After a large number of rounds of mutation (matrix multiplications), the resulting vector of amino acid counts is invariant under mutation. Mathematically, this vector is the eigenvector of the matrix with eigenvalue +1. It is assumed that the distribution of amino acids in a given environment, averaged over all proteins, is stable over time. Thus, a representative table should have a limiting distribution of amino acids that is close to the distribution observed in the alignments used to construct it. The self-consistency score, 'Q' is calculated according to Equation 2:where v is the eigenvector of the probability matrix with eigenvalue +1, and w is a normalized vector of the observed amino acid frequencies, which can be estimated as shown. This has the desirable property of taking values between 0 (totally inconsistent) and 1 (identical). A simple interpretation of this score exists. It is the maximum fraction of residues that could remain the same if substitutions occurred according to the probabilities encoded in the counts matrix over many iterations. The self-consistency score is scale-invariant, so it provides a measure of table quality that is independent of the number of counts.shows a useful scheme for visually identifying poor tables. The fraction of the total number of counts and Q are plotted for each table with increasingly large subsets of the data. A stable counts matrix should tend to a stable level of Q as more data is included.
Table analysis and visualizationThe relative similarity of tables was visualized in two ways. Firstly a dendrogram was constructed based on the Euclidean distance between ESSTs. The dendrogram was built using single linkage clusteringmeaning that new branches join existing clades based on the smallest distance betweenPage: i18 i15i23
i17
J.R.Hill et al.a member of the clade and the new branch. This linkage has the advantage that the dendrogram does not change under a rescaling of the data. Secondly, following the example of, a principal component analysis () in multi-dimensional 'substitution space' was performed. This selects a set of 2 or 3 orthogonal axes that explain the greatest amount of variation in the data, and thus projects substitution space down into 2D or 3D with minimal distortion.
Sequence-to-structure alignmentTo test sequence-to-structure alignment, we take two homologous proteins of known structure and align the sequence of one (the target) to the structure of the other (the template). The alignments were made using FUGUE with the default tables, the PHAT/BLOSUM62 tables, and our membrane tables. The annotations from iMembrane () and JOY () determined where each table was to be applied. Pairwise alignments were also made using the sequence-tosequence alignment program MUSCLE. The quality of these alignments was assessed against the implicit sequence alignments generated by the structure-to-structure alignment program TM-align (). The MEDELLER test-set () consists of pairs of homologous membrane proteins of known structure. We use one element of each pair as the target sequence, and the other as the template structure. We filtered the set such that no two templates, and no two target sequences, had more than 80% sequence identity. This left 408 pairs of proteins ranging from 0 to 100% identity, with a median sequence identity of 14%. The alignment of each template residue in the structure-to-structure alignment produced by TM-align was compared with the alignment of the same residue produced by one of the methods. A schematic of this procedure is given below. In this example, 9 residues are correctly aligned over a total alignment length of 10 residues.
RESULTS
Validation of substitution tablesThe tables used in FUGUE were obtained by counting substitutions between homologous structures. Due to the scarcity of membrane protein structures, we count substitutions between a structure and related sequences, following a similar method to that of. To assess the validity of this procedure we compared eight soluble ESSTs generated by this method with those derived from the SUB177, SUB371 and HOMSTRAD structure sets (). From here onwards, soluble environments are labelled by a leading 's'. Of the eight tables, larger differences are seen in the sEa (soluble, -strand, inaccessible), sPa (soluble, +ve , inaccessible), and sPA (soluble, +ve , accessible) environments due to the greater number of rare substitutions in these environments. As the scores are logarithmic, small variations in the number of rare substitutions lead to disproportionately large effects on their log-odds scores. The small number of differences between the structure/structure and structure/sequence derived tables, particularly when larger
Membrane environment selectionMany +ve  angle tables (*P*) suffer from low self-consistency scores, low count numbers, and poor stability. For example, the TPa environment ofhas a Q score of 0.64 from 10 060 counts. Low self-consistency scores are to be expected: the majority of substitutions in these environments involve glycine, and other substitutions may be too rare to be representative. To increase table quality, the +ve  environments were merged into an accessible +ve  environment (NPA) and an inaccessible +ve  environment (NPa). These are labelled 'N' layer so as to maintain a consistent notation. Self-consistency scores and total numbers of substitutions for each table in the resulting environment set are shown in. Each of our membrane tables has a three letter code of the form layer (H,N,T,P,I) : secondary structure (H,E,P,C) : accessibility (a,A).
Clustering of tablesThe Euclidean distance between the log-odds tables is used to create a 'family-tree' of the different environments (). Tables i18Page: i19 i15i23for soluble proteins, labelled with a leading 's', are included for comparison. When calculating the distance, each substitution is normalized by its standard deviation across all the tables. This prevents the distance measure being dominated by a handful of extreme substitution changes. It has been suggested that loops of membrane proteins that extend above and below the bilayer behave similarly to loops in soluble proteins (e.g.). We also see this in our results, where each table of the form NC* clusters with its sC* counterpart. As might be expected, the not-in-membrane tables (N**) are most similar to their soluble equivalents (the notable exception being that sHA clusters with HHA rather than NHA). The tail-contacting environments are clear outliers, and do not cluster. Environments of the form T*A are dissimilar to both s*a and s*A. This is consistent with a number of other studies (e.g.) that have found little evidence for the early 'inside-out' hypothesis of membrane protein structure (). Additional outliers are +ve  environments (*P*), and some -strand environments (*E*). This lasts may be because much of our -strand data comes from outer-membrane porins of Gramnegative bacteria. In Gram-negative bacteria, the outer membrane is asymmetric: the inner leaflet is composed of phospholipids whereas the outer leaflet is composed of lipopolysaccharides. Additionally, inward-facing solvent-exposed residues are in contact with the periplasm rather than the cytosol. Evidence for the uniqueness of the -strand environments can also be seen in their composition. Accessible -strands within the membrane rarely contain cysteine, and the TEA environment is abundant in tyrosine. The remaining environments separate by accessibility. Surprisingly, within the inaccessible clade (, blue), the soluble secondary structure environments are more similar to each other than to their membrane equivalents. An accessible clade inis coloured red from the same level as the inaccessible clade. The pore-lining and interface environments lie just beyond these clades, suggesting that these environments have distinct properties, and therefore that their use is sensible. A PCA plot allows patterns in substitutions to be discerned.accounts for 48% of the variation in the data with 3 principal components.shows that the differences between accessible and inaccessible environments cause most of the variation between tablesthey are largely separated along the first principal component (the main exceptions being accessible tail-layer tables, T*A). This first component can broadly be identified as a measure of 'hydrophobicity'. Looking at the labelled points in, as the first principal component increases we move from tail layer to interface layer to head layer accessible environments, corresponding to decreasing hydrophobicity. The second principal component appears to relate to secondary structure. Moving from left to right in, we encounter the labelled points in the order TCa, TEa, THa as the second component increases. The same ordering is found for other layer types within the membrane. However, for soluble and not-inmembrane environments the order instead runs coil tables, helix tables, -strand tables (e.g. sCA, sHa, sEa). The bottom row of plots shows that different secondary structure environments cluster in the second and third components. The third principal component appears to be dominated by the differences between -strand environments.
ESSTs improve membrane protein alignment
Sequence-to-structure alignmentThe previous section discussed the variations in substitution preferences in different environments. Now we demonstrate that a knowledge of these differences improves sequence-to-structure alignment. Alignments were made with the sequence-to-sequence alignment program MUSCLE, and the sequence-to-structure alignment program FUGUE. Three different sets of substitution tables were used in the case of FUGUE (i) the default soluble tables, (ii) our membrane tables and (iii) the PHAT/BLOSUM62 tables in a bipartite scheme. In this last case, PHAT was applied to residues with a 'T' layer annotation (including pore-lining residues), and BLOSUM62 was used elsewhere. As the same program, FUGUE, was used with each set of tables, fair comparisons can be made between them. Gap penalties were determined separately for each set of tables.
Gap penalty determinationIn the case of FUGUE, the optimal alignment is that which maximizes the sum of the table entries S E ba for each pair of aligned residues. Not all residues will align, even between very similar proteins, and penalties to the alignment score must be determined for introducing gaps into the alignment. FUGUE distinguishes between i19The top row and the bottom row are views of the same data along different principal components. The columns colour-code the data-points by layer type, secondary structure and accessibility, respectively. This allows the three-letter table code of each point to be read off from left to right. The labelled tables are ordered by secondary structure in the second principal componentreading panel (e) from left to right we first encounter TCa, then TEa, then THa. A similar ordering holds for other layer and accessibility types. several types of gaps (seefor details). Gaps are penalized in order of severity as follows:
J.R.Hill et al.(1) Gap within a secondary structure element (H)(2) Gap at the end of a secondary structure element (L)(There are actually 8 types of gap penalty: each of the above categories can initiate a gap or be an extension of an existing gap. Initiating a gap results in a larger penalty than continuing an existing gap: the alignment is thus biased to a small number of large insertion/deletion events rather than a larger number of smaller events. A subset of 72 protein pairs was selected at random from the 408 pairs of proteins in the alignment dataset (see Section 2.6), and alignments made with perturbations of the default FUGUE gap penalties. Perturbations were made such that gap opening penalties were at least as large as gap extension penalties, and such that more 'severe' gaps had penalties at least as large as less 'severe' ones. The size of the perturbation steps ranged from 1 to 5 units and depended on the size of the default penalties. The alignment quality with the default FUGUE tables differed little as the penalties were changed. In view of this, and as most users are unlikely to change the gap penalties, the default penalties were kept.For the membrane tables, only two gap initiation penalties were found to substantially differ from the default values (). The increase of penalties in these cases is to be expected as the sizes of transmembrane secondary structure elements are constrained by the membrane thickness. The subsequent analysis uses these revised penalties, but membrane tables with the default gap penalties lead to similar results. The PHAT/BLOSUM62 tables are scaled differently from the others, so their penalties are not directly comparable.
Alignment accuracyAlignments were made for the remaining 336 pairs of proteins in the alignment dataset. None of the methods performed well in. Box plots of the fraction of residues aligned correctly as sequence identity increases. There are three boxes at each sequence identity, from left to right corresponding to membrane FUGUE (black), default FUGUE (blue) and MUSCLE (red). The green bars show the number of alignments divided by 100. For example, there are 78 alignments in the 510% sequence identity range. the 010% sequence identity range, but beyond this the membrane tables gave a consistent alignment advantage. At > 35% sequence identity, the alignments show few differences.compares the alignments of membrane specific tables to common alternatives. PHAT/BLOSUM62 is omitted for clarityits performance is comparable to that of default FUGUE. Consideration of the outliers inis informative. In the 3035% sequence identity range, the three methods in the figure appear to have correctly aligned only  30% of the residues in one sequence-structure pair [PDB codes 1SU4A (sequence), 1XP5A (structure)]. In fact, these proteins are an identical rabbit Ca 2+ ATPase in different conformations. In this case the structureto-structure alignment (by rigid-body superposition) from TM-align does not capture local similarities, leading to the 3035% sequence identity figure, and the low assessment of performance of the other alignment methods. Outliers in the 010% sequence identity range are mostly due to short alignment lengths.gives a broad picture of performance differences, but does not distinguish between a small alignment improvement on a short protein and a much larger improvement on a bigger protein.lists the number of times that membrane FUGUE correctly aligns at least 10 residues more (Win) or fewer (Loss) than another method. Membrane FUGUE often improved alignment by more than 10 residues.gives the number of correctly aligned residues across all the alignments in each sequence identity bracket. Membrane FUGUE outperforms all other methods in all brackets, except at > 35% sequence identity where the differences between the methods are marginal. If the alignment set is divided into  and  proteins the same trends in accuracy are seen for both, with membrane FUGUE outperforming the other methods. The principal difference is the scarcity of -type alignment pairs at higher sequence identities.For each sequence identity range, the number of alignments where membrane FUGUE correctly aligns at least 10 more (Win) or 10 fewer (Loss) residues than the named alternative method. For example, in the 1015% sequence identity range membrane FUGUE correctly aligns at least 10 more residues in 36 out of 49 alignments.
i20
ESSTs improve membrane protein alignment
J.R.Hill et al.method, already used in the literature, allows a small number of structures to be leveraged to build tables at the cost of increased error in table construction. To address this problem, we suggest a method of assessing the quality of tables constructed in this way which allows us to build tables that are stable and consistent with the data used to construct them. A principal component analysis of the individual tables revealed that residues in contact with lipid-tails have some substitution preferences typical of hydrophobic regions. However, the differences in other substitution preferences mean that membrane proteins are not simply 'inside out'. Globally, it appears that accessibility is the primary determinant of membrane substitution preferences, followed by secondary structure. Position within the membrane has a less clearly-defined, but substantial effect. For example, membrane tables showed greater variability than their soluble equivalents. This suggests that an environment-specific approach to membrane protein modelling will yield greater improvements than did the environment-specific approach to soluble protein modelling. Evidence for this supposition was found in a set of 336 alignments made by MUSCLE and FUGUE. MUSCLE is designed for sequence-to-sequence alignment, and so makes no use of structural information. It is unsurprising therefore that it performed worst at sequence-to-structure alignment. The default FUGUE tables and the bipartite PHAT/BLOSUM62 alignments performed better than MUSCLE and comparably to each other. Each makes use of different structural informationthe default tables take into account the accessibility, secondary structure and hydrogen-bonding of a residue; whereas PHAT/BLOSUM62 distinguishes between residues inside and outside the membrane. Conflicting accounts of the performance of PHAT have previously been reported. It has been suggested that this is due to bad alignments when PHAT is applied to non-transmembrane residues (). The good alignments here can most likely be attributed to the quality of the transmembrane annotation from iMembrane. Our membrane tables distinguish between both membrane location, and secondary structure and accessibility. Compared with the best performing alternative tables, the use of the membrane tables led to 104 of the 336 alignments having at least 10 more correctly aligned residues, with only 24 alignments being worse by the same margin. These improved alignments translate into predicted structures with a lower average RMSD (3.4  membrane FUGUE, 4.1  default FUGUE) within the 1535% sequence identity range. These results represent only a proof-of-principle for this approach. Here, to demonstrate the method we have considered only pairwise alignment, but multiple sequence information should further improve results. Alignment quality might also be enhanced by changes to the definition of when a residue is in contact with the head or tail layers of a membrane, or from the introduction of a bipartite scheme of gap penalties in which insertions and deletions are punished more severely in the transmembrane region. More radically, alignment might be improved by an iterative approach to table construction. The tables presented here were generated by counting substitutions between homologous sequences aligned to a single structure by MUSCLE. Instead, these alignments could be made by FUGUE using the membrane tables. The resulting improved substitution tables could then be used to realign the sequences. This procedure could be iterated until convergence. Our substitution tables, which take into account the environments of residues in membrane proteins, substantially improve alignments between membrane protein sequences and structures. In turn, these improved alignments lead to better structural models of membrane proteins.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from [19:44 6/6/2011 Bioinformatics-btr230.tex] Page: i17 i15i23
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
i23 at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
