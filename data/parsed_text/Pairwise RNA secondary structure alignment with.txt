Motivation: The regulatory functions performed by non-coding RNAs are related to their 3D structures , which are, in turn, determined by their secondary structures. Pairwise secondary structure alignment gives insight into the functional similarity between a pair of RNA sequences. Numerous exact or heuristic approaches have been proposed for computational alignment. However, the alignment becomes intractable when arbitrary pseudoknots are allowed. Also, since non-coding RNAs are, in general, more conserved in structures than sequences, it is more effective to perform alignment based on the common structural motifs discovered. Results: We devised a method to approximate the true conserved stem pattern for a secondary structure pair, and constructed the alignment from it. Experimental results suggest that our method identified similar RNA secondary structures better than the existing tools, especially for large structures. It also successfully indicated the conservation of some pseudoknot features with biological significance. More importantly, even for large structures with arbitrary pseudoknots, the alignment can usually be obtained efficiently. Availability and implementation: Our algorithm has been implemented in a tool called PSMAlign. The source code of PSMAlign is freely available at
IntroductionThe interest in RNA research was reinvigorated after discovering its regulatory and catalytic roles in many biological processes (). Those RNAs with such roles are called the noncoding RNAs (ncRNAs). They perform a diverse range of functions, such as regulating gene expression (), modifying ribosomal RNA (), and controlling muscle differentiation (). It is believed that a specific function of an ncRNA molecule is related to its structure (). Strong evidence is that ncRNAs are more evolutionarily conserved in their structures than their sequences (). Therefore, the two main studies in this area are the structure determination and the comparison among different structures. The former can be subdivided into experimental analysis () and computational prediction () using experimentally determined thermodynamics parameters (). On the other hand, structure comparison is purely computational. Moreover, since the structure is critical to the function, RNA molecules are compared with both structures and constituent base sequences. In this article, we are interested in the pairwise RNA secondary structure comparison problem. This problem can be further classified into the edit problem and the alignment problem (). The edit problem computes the minimum cost (distance) of modifying a given structure R 1 to another given structure R 2 ,that the total edition cost from R 1 and R 2 to R c is minimized. Early approaches model the RNA secondary structures as trees and consider the edit distance or similarity score among them (). Afterwards, various tools were developed, of which some produce optimal solutions, while the others are heuristics. RNA_align (), RNAForester () and Gardenia () are some examples that belong to the exact solution category. The average time complexity for the last two methods is O(n 2 ), where n is the length of the longer structure. () and the worst case complexity is O(n 4 ) (). MiGaL () and RNAStrAT () belong to the heuristics category. There are still two shortcomings impacting the usefulness and efficiency of these approaches. Firstly, most of them do not support pseudoknots since aligning structures with arbitrary pseudoknots is NP-hard (), but pseudoknots have already been known to perform diverse functions in many biological processes (). Significant comparison results could be obtained when such crossing motifs can be aligned, because they are usually highly conserved (). An approach allowing arbitrary pseudoknots for exact alignment has its time complexity dependent on the complexity of the input structures (). On the other hand, the polynomial time alignment algorithm is possible for a restricted set of pseudoknots (). However, both of them are still inadequate to compare the complex crossing motifs that have already been identified (). More importantly, none of them are available as a tool. Second, since ncRNAs often exhibit better conservation in their structures, exact alignment methods might not indicate some biologically significant structural features. This is because they consider both base sequences and structures equally, and hence some conserved structural motifs that are dissimilar in their sequences are difficult to align. Conversely, some motifs are spuriously aligned, disrupting the overall alignment. To overcome these limitations, we devised a heuristics, targeting the pairwise alignment of large RNA secondary structures with arbitrary pseudoknots.
Methods
Conserved stem pattern in similar RNA secondary structure pairOur proposition is that ncRNA secondary structures are more conserved than their sequences. Hence, a pair of similar secondary structures shares a conserved stem pattern. The stem pattern is a subset of all base pair stems in a given secondary structure, plus the structural relations among those in this subset. Our approach attempts to discover a conserved stem pattern between a pair of secondary structures, and constructs a structure alignment from it. Since an alignment function is applied to evaluate the alignment costs among stems and unpaired strands, our heuristics solves the ALIGN(CROSSING  CROSSING ! CROSSING) problem. The stem pattern is modeled by a stem graph (). This graph illustrates three structural relationships for every pair of base pair helices (stacks) in its edges, namely parallel (P), nested (N) and pseudoknotted (K). For any base pair (i 1 , j 1 ) in stack s 1 and any base pair (i 2 , j 2 ) in stack s 2 , s 1 and s 2 are parallel when i 1 < j 1 < i 2 < j 2. s 2 is nested in s 1 when i 1 < i 2 < j 2 < j 1 , and s 1 is a nesting stack. They are pseudoknotted and are called crossing stacks when i 1 < i 2 < j 1 < j 2 .illustrates these structural relationships in a stem graph of a sample secondary structure. Each vertex of the original stem graph models a stack, but we merge some nested stacks to a stem and model it by a single vertex to reduce graph order. The stack merging is introduced in the supplementary material. A stem graph G is defined as G  (V, E, l), where V is the vertex set, E  V  V is the edge set as G is complete, and l: E ! R is a function mapping every edge to its edge label. Given a predefined alignment function, the best conserved stem pattern is one such that the sum of alignment costs for all mapped stem pairs, plus the deletion cost for each unmapped stem, is minimized. Because each stem graph vertex represents a unique stem, the conserved stem pattern can be represented by a set of mapped vertex pairs between the two stem graphs. Assuming a bijective stem matching in the conserved stem pattern, this set is equivalent to a bijective function m: V map ! V 0 map where V map ( V, V 0 map ( V 0 , and V, V 0 are the vertex sets of the two stem graphs. m is called the error-correcting graph matching (ECGM) which was originally proposed for pattern recognition (). So, the best conserved stem pattern is graphically equivalent to a minimum cost ECGM (mcECGM), with its cost regarded as the edit distance between the two graphs. Denote G  (V, E, l, p) and G 0  (V 0 , E 0 , l 0 , p 0 ) to be the stem graphs for the two RNA secondary structures R and R 0 , respectively. The additional function p: V ! S maps each vertex to its corresponding base pair stem in the set S of all stems. For an ECGM m: V map ! V 0 map , the costs are defined for the specific edit operations suggested in () as follows:Vertex substitution cost, c vs (v, v 0 )  a(p(v),2.
Progressive stem matching to approximate the true conserved stem patternOn the other hand, the best conserved stem pattern defined above might be different from the true conserved stem pattern, because the edit distance of the stem pattern excludes the unpaired base regions (e.g. hairpin loops) that are also deterministic in structure alignment. Also, ECGM is in general NP-complete (). While an exact algorithm is scalable with some RNA families, for large RNA molecules, such as 16S and 23S ribosomal RNAs, the number of base pair stems and the stem graph order might exceed 100. An exhaustive search becomes intractable for such a graph order. It is then necessary to reduce the search space by selecting mapped vertex pairs that are more probable to appear in the ECGM representing the true pattern. We introduce a heuristics called progressive stem matching. It identifies similar nesting motifs and then non-nesting motifs in both input structures, and computes the mcECGM from these results afterwards. This mcECGM models the approximate true conserved stem pattern. The core algorithms for each of its phases are stated below. An example illustrating these phases is provided in the supplementary material.
Phase 1: InitializationWe adapt the definitions of stack and stem proposed in (), where a base pair stem consists of one or more base pair stacks joined by bulges or internal loops. Given a secondary structure, this phase first merges some of its nested stacks into stems (the merging mechanism is described in the supplementary material), and then generates its stem graph G  (V, E, l, p). By determining whether its underlying stem is nesting for every vertex, V is partitioned into V nest and V non-nest such that a stem represented by v in V nest is nesting; otherwise v is in V non-nest. A vertex in V nest is a nesting vertex, and a vertex in V non-nest is a non-nesting vertex. V 0 of another structure is partitioned into V 0 nest and V 0 non-nest .
Phase 2: Identifying highly similar non-nesting motifsThe underlying stem for a vertex in V non-nest or V 0 non-nest forms a non-nesting motif, which consists of the stem itself and the loop segment enclosed by it. The green boxes of Supplementaryprovide some examples. We identify highly similar non-nesting motifs in both structures, and then generate the mapped vertex pairs accordingly. These pairs are utilized to search similar nesting motifs in phase 3. The algorithm appended at the end of this sub-section is described as follows: The motif alignment cost ratio r h for every possible non-nesting motif alignment pair (line 1) is first calculated, where r h is defined as: r h v; v 0   ahpv; h 0 p 0 v 0  minfahpv; g; ah 0 p 0 v 0 ; gga is the alignment function returning the cost, h and h 0 extract nonnesting motifs bounded by the stem obtained from p(v) and p 0 (v 0 ) respectively. g is a null motif. r h is the alignment cost averaged by the lower motif removal cost. For each non-nesting motif in both structures, its lowest r h value (indicating best alignment) is kept as r h_min (lines 2  3). Its best and suboptimal aligned counterparts are added to L (line 4) such that their r h values are at most f times of r h_min. So, f controls the selection of the best and suboptimal aligned counterparts into L. mcECGMs are computed from L to remove outliers. For efficiency reasons, mcECGMs are obtained progressively with a selection range b  (b start , b end ]. b first selects highly similar motif pairs in L (lines 5  6) to build initial partial mcECGMs. Those with at least m pairs are kept (line 6), and m is the minimum size requirement of the initial mcECGMs for robust expansion to the final mcECGMs. When at least one qualified initial mcECGM is found, b is shifted to the next range of width D (line 7) to select the next less similar pairs in L for iterative expansion (line 10). Otherwise, b end is incremented by the step size D (line 7) to repeat the initial mcECGM finding (line 8). The one with the most vertex pairs in the final mcECGMs is reported as m h. The vertex edit operation costs in this phase are motif based, i.e. c vs (v, v 0 )  a(h(p(v)),), g), and the edge edit operation costs are identical to Section 2.1. When a nonnesting stem is crossing, the other stems with which it crosses are not considered during its motif alignment.The underlying stem for a vertex in V nest or V 0 nest forms a nesting motif, which consists of the stem itself, and any other motifs and loops nested in it. The red box of Supplementaryshows an example. This phase starts building mcECGMs from V nest and V 0 nest by identifying similar nesting motifs. However, such motifs are sometimes large, and nested pseudoknots may also be present, hence it is inefficient to align such motifs. Alternatively, a structure profile) is created for each v in V nest (v 0 in V 0 nest ) to estimate motif similarity using m h obtained in phase 2. The first set in Q(v), N(v), represents non-nesting stems nested in the underlying stem s of v. The second set C pv (v) represents non-nesting stems crossing s (i.e. they precede s in 5 0 to 3 0 direction), and the last set C sq (v) represents non-nesting stems crossed by s (i.e. s precedes them) (line 1). A match score and a mismatch score are evaluated for every nesting motif pair. The match score z match (v, v 0 ) is the number of mapped vertex pairs (u, u 0 ) in m h such that the structural relation (limited to the three relations defined in Q(v)) between u and v is identical to that between u 0 and v 0 (line 4). This score indicates how many non-nesting motifs in the profiles are conserved between the two nesting motifs. On the other hand, a mismatch between v and v 0 occurs when a non-nesting vertex u (or u 0 ) appearing in a set of Q(v) (or Q(v 0 )) belongs to a mapped pair (u, u 0 ) in m h , but u 0 (or u) is not in same set of Q(v 0 ) (or Q(v)). Because such mismatch can occur twice for a mapped vertex pair (u, u 0 ) in m h , 0.5 is multiplied to obtain the mismatch score z mismatch (v, v 0 ) (line 5). The net similarity score (z score) is then calculated (line 6). The more positive z score the more likely the underlying motif of v is similar to that of v 0. A nesting vertex pair (v, v 0 ) is added to the candidate list T when its z score is in top K for both v and v 0 (lines 810). mcECGMs M nest are obtained from T (line 11). The ECGM edit operation costs applied in this phase are defined in Section 2.1.), where N(v)  {u j u 2 V non-nest and l((v, u))   'N'}, C pv (v)  {u j u 2 V non-nest and l((u, v))   'K'} and C sq (v)  {u j u 2 V non-nest and l((v, u))   'K'} for each v 2 V nest 2 Repeat line 1 to obtain Q(v 0 ) for each v 0 2 V 0, u 0 ) 2 m h j (u 2 N(v) and u 0 2 N(v 0 )) or (u 2 C pv (v) and u 0 2 C pv (v 0 )) or (u 2 C sq (v) and u 0 2 C sq (v 0 ))}j 5 z mismatch (v, v 0 )  j{u j (u, u 0 ) 2 m h , (u 2 N(v) and u 0 6 2 N(v 0 )) or (u 2 C pv (v) and u 0 6 2 C pv (v 0 )) or (u 2 C sq (v) and u 0 6 2 C sq (v 0 ))}j  0.5  j{u 0 j (u, u 0 ) 2 m h , (u 6 2 N(v) and u 0 2 N(v 0 )) or (u 6 2 C pv (v) and u 0 2 C pv (v 0 )) or (u 6 2 C sq (v) and u 0 2 C sq (v 0 ))}j  0.5 6 z(v, v 0 )  z match (v, v 0 )-z mismatch (v, v 0 ) 7 End for 8 Select (v, v ) with top K highest positive z scores (only among those involving v) intoThe mismatch case in the last phase suggests that some partial mcECGMs in M nest can be in conflict with m h obtained in phase 2, so they cannot be merged. This phase expands each mapping m nest in M nest with non-nesting vertex pairs identified from similar nonnesting motifs. Using m nest , the original problem can be broken into smaller problems that are solved more efficiently. The algorithm at the end of this sub-section is explained below. The jm nest j vertices mapped in each of V nest and V 0 nest correspond to jm nest j nesting stems, as well as 2jm nest j stem (upstream and downstream) regions in each structure. The sequence backbones of R and R 0 can then be divided into 2jm nest j  1 non-overlapping backbone segments q t and q 0 t, respectively (line 3), some of which can be of length zero. The two stem regions of a non-nesting stem can be contained in the same or different segments. Hence, any vertex in V non-nest (V 0 non-nest ) can be assigned to partition V q (i, j) (V 0 q (i, j)), where i and j stand for the segment numbers containing the upstream and downstream regions of the non-nesting stem, respectively (line 4), with i j. Some non-nesting stems might cross with each other, and so their own partitions, say V q (i, j) and V q (k, n), as well as their counterparts V 0 q (i, j) and V 0 q (k, n) are merged (line 6).shows the six possible scenarios requiring partition merging. Afterwards, any vertex u in a partition can only have parallel relationship with any vertex v in another partition (i.e. l(u, v)  'P' or l(v, u)  'P') in both graphs. As a result, any mcECGM from a candidate space V q (i, j)  V 0 q (i, j) does not depend on the mcECGM outcomes in another candidate space. They are said to be independent. Moreover, the partitioning ensures the consistency between the mcECGMs with m nest. They are then merged as the outputs of this phase (line 7). The ECGM edit operation costs applied are identical to phase 2. Again, any interactions of the nested loop bases with other bases are ignored.Using the stem terminal regions of m nest , divide the backbones of R and R 0 into non-overlapping segments {q t j t  1, 2,. .. , 2jm nest j  1} and {q 0 t j t  1, 2,. .. , 2jm nest j  1}, respectively, with t increasing from the 5 0 end towards the 3 0 end 4 Based on stem p(v) for each v 2 V non-nest , add v to V q (i, j) when the upstream and downstream regions of p(v) are in segments q i and q j respectively (i j) 5 Repeat line 4 to obtain all sets, for i j k n 7 Merge m nest with all mcECGMs obtained from every nonempty V q (i, j)  V 0 q (i, j), and add all merged results to M all 8 End for 9 Return M all 2.2.5 Phase 5: Recovering missing vertex pairs in mcECGMs In phase 3, a small K value is used for efficiency reasons. However, it might happen that some nesting motif pairs appearing in the true mcECGMs are pruned. Moreover, although occasional, a nesting stem is matched to a non-nesting stem, but this is not considered in any previous phase. Given the mcECGMs M all from phase 4, this phase generates the candidate space T miss (line 3) and recovers all these missing vertex pairs from it (line 4). Because nesting stems are4 Obtain all mcECGMs by expanding m all with T miss , and add them to M psm 5 End for 6 Return M psm 2.3 Alignment function, non-bijective stem matching, and overall structure alignment generation) is used for vertex mapping between V non-nest and V 0 non-nest (phases 2 and 4), while stem align) is used when the vertex mapping involves those representing nesting stems (phases 3 and 5). The difference is that the former aligns single segments from the two structures while the latter aligns a pair of stem upstream and downstream regions. For a nesting stem, its upstream and downstream regions are disjoint in the structure. Our alignment function a is capable of performing these two types of alignment. Interested readers may refer to the supplementary material for details. It is possible for a stem in a structure to be matched with more than one stem in another structure. For example, if the hydrogen bonds in several contiguous base pairs in the middle of a long helix are broken, the helix becomes two helices connected by an internal loop. Meanwhile, mcECGM is a bijective mapping and has to be extended to model such non-bijective stem matching. This process and the secondary structure alignment generation from the extended mcECGM are described in the supplementary material.
Results
Experimental setupWe implemented our approach in a tool called PSMAlign using Perl, and its alignment function is modified from rna_align () in C. Two experiments were performed. The first experiment compared the performance of PSMAlign with other structure alignment tools in identifying similar structures. The second compared PSMAlign with the Needleman-Wunsch sequence alignment () for aligning pseudoknotted structures. Pairwise alignment results involving pseudoknots in at least one of the input structures are also presented. The default parameter values for PSMAlign are as follows: For phase 2, m  5, initial b start  1, initial b end  0.1, D  0.05 and f  2.3.2 Experiment 1: BRASERO benchmarks using SRP and 16S ribosomal RNA families BRASERO () evaluates the performance of various secondary structure alignment tools in identifying similar structures. Each of its testing datasets consists of a reference structure set R ref from an RNA family, and a sequence set S. S contains a positive class of various sequences in the same family as but not in R ref , and a negative class of some noise sequences with similar length distribution as R ref. For each sequence s in S, its optimal and suboptimal secondary structures are obtained using tools such as mfold (). Each of the predicted structures is aligned with every structure in R ref using the alignment tool examined. The best similarity score (or alignment cost depending on the tool) achieved is the score of s. All sequences in S are then sorted by their scores. Afterwards, every sequence can be classified as positive (structurally similar to those in R ref ) or negative (structurally dissimilar) according to a threshold. From the classification result, the proportion of correctly classified sequences in the positive class is the true positive rate (TPR); and the proportion of incorrectly classified sequences in the negative class is the false positive rate (FPR). A receiver operating characteristic (ROC) curve for this alignment tool is a plot of TPR versus FPR obtained by varying the threshold, and the area under the ROC curve (AUC) illustrates the average performance of the tool (). A higher AUC means it is more likely to give higher similarity scores or lower alignment costs to similar structures than to dissimilar structures, and hence a better performance. The maximum AUC is 1. PSMAlign was benchmarked with Gardenia (), MiGaL () and RNAForester (), which are standalone secondary structure alignment tools publicly available. The signal recognition particle (SRP) and the 16S ribosomal RNA (rRNA) datasets were selected for benchmarks due to their significantly long sequence lengths (>300 nucleotides).shows that PSMAlign exhibited the highest AUC in both SRP and 16S rRNA datasets, which are 0.764 and 0.931, respectively. Moreover, at a very low FPR (<0.01), it achieved a significantly higher TPR of 0.6 in the SRP dataset and 0.675 in the 16S rRNA dataset. This suggests that 60% of the positive class sequences in the SRP dataset, and 67.5% of those in the 16S rRNA dataset, are structurally more similar to the reference structures than over 99% of the noise sequences. An interesting observation is the performance comparison between exact approach and heuristics in different datasets. Both Gardenia and RNAForester are exact approaches, while MiGaL and PSMAlign are heuristics assuming better conservation in structure than in sequence. They construct alignment according to the similar local motifs identified. In the 16S rRNA dataset, the ROCs of the heuristic approaches are well above that of the exact methods, meaning that the proposition holds. On the other hand, in the SRP dataset, the ROC of PSMAlign falls below the ROCs of the exact methods in its middle segment. A small segment is even under the diagonal (denoting the ideal ROC of random guess), meaning that at some thresholds, TPR < FPR. MiGaL performed even worse in that its ROC is well below the ROCs of the exact methods, and below the diagonal for a large segment. We believe that some positive class instances were more conserved in their sequences than in their structures. Heuristics performed worse than exact methods when the proposition did not hold for some molecules. This is supported by the even worse performance in MiGaL which also takes this proposition. The abstract properties, such as the number of helices or base pairs, utilized at its first three levels of structure comparison limited its precision in this dataset.were not examined in the first experiment. Consequently, we aligned several pairs of structures from other RNA families, and at least one structure of any pair contains pseudoknotted motifs. The structures were all obtained from the RNA STRAND database (), with non-canonical base pairs removed. PSMAlign was also compared with the Needleman-Wunsch (NW) algorithm () for aligning a set of structures randomly selected from the 23S rRNA family. This family has been known to exhibit a diverse range of pseudoknot topologies categorized previously (). A molecule was randomly selected from each topology to form the testing dataset. A knot-free 23S rRNA molecule was also included.shows the running times of both approaches for pairwise alignments among the secondary structures in the testing dataset. The NW algorithm showed relatively steady running times as the algorithm takes O(n 2 ) time for alignment and O(n) time in backtracking a single alignment, where n is the sequence length. In contrast, the time performance of PSMAlign mainly relied on the stem graph order and the mcECGM candidate pruning. In most cases, the running time of PSMAlign is about double that for the NW algorithm in this dataset, and it varies from 9.79s 171.8s. It performed faster than the NW algorithm when the pairwise alignment involved 23S rRNA from Zea mays (molecule Id: CRW_00546), because it has a very long unpaired region, resulting in a smaller graph order than other molecules. Because the selected secondary structures are quite conserved in their sequences, many matched stem pairs identified by PSMAlign could also be found by the NW algorithm. However, when a certain portion of paired bases in a stem have been substituted, they become hard to be matched by pure sequence alignment. Section E of the supplementary material discusses this issue with an example from the testing dataset. Supplementaryshows the approximate true conserved stem pattern in the ribonuclease P RNAs of Mycoplasma genitalium (molecule Id: ASE_00194) and Streptococcus equi (molecule Id: ASE_00320). Their structure alignment is depicted in Supplementary. Supplementaryshows their alignment constructed from the best common stem pattern. An interesting observation is that the first alignment is likely to be a more reasonable alignment despite its higher alignment cost (281.25 versus 262). Even without the penalty for the unmapped stems, its alignment cost is still higher (201.75 versus 194.5). The alignmentPairwise RNA secondary structure alignmentof the nesting stems of the largest multi-loop in both structures are indicated by the black boxes in theThe highly conserved base sequences and base pairs strongly suggest that they are matched. This also shows that the best conserved stem pattern might not be the true conversed stem pattern. More importantly, exact structure alignment cannot reveal this conservation due to the nonminimum alignment cost. SupplementaryD in the supplementary material highlight the approximate true conserved stem pattern between the 23S ribosomal RNAs in Chlamydomonas reinhardtii (molecule Id: CRW_00520) and in Deinococcus radiodurans (molecule Id: PDB_00993). This pattern is very close to the true pattern since only a few stems are left unmatched. The overall alignment is shown in Supplementary.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
J.K.H.Chiu and Y.-P.P.Chen at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
.3 Experimental 2: Structural alignments involving pseudoknots On the other hand, only PSMAlign is able to align pseudoknotted RNA secondary structures. Also, since the sequence folding tools in BRASERO do not predict pseudoknots, pseudoknotted structures
Discussion Our progressive stem matching heuristics is similar to RNAStrAT (Guignon et al., 2005), since both decompose the input structures into stems, and construct a conserved stem pattern based on the stem alignment results. The major difference between them is that our heuristics applies mcECGM for pattern finding, while RNAStrAT utilizes dynamic programming and therefore does not allow pseudoknots in the input structures. Moreover, it only compares the similarity between the nesting stems without considering the similarities among other stems nested in them. Progressive stem matching employs a structure profile to also compare the nested components as well as aligning the nesting stem themselves. Although the experiment results suggest that true conserved stem pattern approximation works well for pairwise RNA secondary structure alignment, PSMAlign still retains the exact mcECGM algorithm finding the best conserved stem pattern. The reason is that there might not be enough highly similar non-nesting motif pairs (<m) at phase 2. Reducing the value of m appears to be a possible solution, however the results become trivial when m is set to just 1 or 2. When no result is found for the current m value, it turns to discover the mcECGMs for the best conserved pattern, and users can also specify which stem pattern to use for alignment. An interesting observation from the first experiment is that the average performance of PSMAlign in the SRP dataset is better than Gardenia and RNAForester, both of which are exact secondary structure alignment approaches. In the 16S rRNA dataset, both PSMAlign and MiGaL performed substantially better than the exact methods. The conclusion is that heuristics aligning RNA secondary structures by detecting similar structural motifs outperform exact approaches computing lowest cost global alignments. This is supported by our finding in experiment 2, in which the approximate true conserved stem pattern could result in a biologically more significant alignment despite its non-minimum alignment cost. This verifies that ncRNAs are, in general, more conserved in structures than in sequences. Because an alignment with the lowest edit distance or highest similarity score does not guarantee all important biological features to be aligned, it is therefore necessary to discuss the meaning of " optimal " secondary structure alignment, such as proposing new measures to quantify the pairwise similarity between the structures, or what types of base pair stacks or stems should be matched with a higher priority. mcECGM is effective in approximating a true conserved stem pattern with arbitrary crossing stems. The pattern shown in Supplementary Figure S8AD suggests that all the conserved crossing stems are matched correctly, no matter how complicated the underlying pseudoknots are. As the stem graph models the stem crossing relations with its edges, conserved crossing stems are able to be revealed by mcECGM. Meanwhile, it relies on a carefully designed candidate pruning scheme to reduce the computation time. Local alignment is also very important because many RNA secondary structures are only conserved in some of their structural motifs. Progressive stem matching adopts a local then global style to first search for highly similar non-nesting motifs such as hairpins. These similar motif pairs are sorted according to their similarity measures (r h in phase 2), and those with better values are more probable to be retained in the reference information (m h in phase 2) for the next phase matching nesting stems. A pair of nesting stems is only shortlisted for alignment when both stems nest certain nonnesting motifs that are regarded as similar, according to the reference information. As a result, the more similar the local nesting and non-nesting motifs, the more likely they can be identified. The true conserved stem pattern is then approximated from these identified motif pairs. Supplementary Figure S10AC shows the approximate true conserved stem pattern between the 23S ribosomal RNAs in Caenorhabditis elegans (molecule Id: CRW_00533) and Suillus sinuspaulianus (molecule Id: CRW_00544). Although both molecules differ significantly in length, three possible conserved local structural motifs (indicated by the red boxes) were identified from the pattern. The major limitation of PSMAlign is the imperfect overall alignment due to separate alignments of the stem regions and the sequence regions. Precautionary measures were devised to detect some cases of cross-region alignments, but there are still some complicated situations, such as the one shown in the green box of Supplementary Figure S9. The vertical line illustrates the boundary of the aligned sequence region (left) and aligned the stem region (right). The 'GCG' segments of both structures should be aligned instead of aligning the single base pair, but the detection approach proposed is unable to detect this, because the gap is not an edge gap. This is caused by the base pair shifting from the right G nucleotide in the first structure to the left G nucleotide in the second structure, and we call it 'base pair shift'. We are currently working towards new measures to mitigate these limitations.
