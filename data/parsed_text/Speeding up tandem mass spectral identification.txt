Motivation: Tandem mass spectrometry (MS/MS) has been routinely used in proteomics studies. Post-translational modification (PTM) identification is a challenging problem in tandem mass spectral analysis. Results: In this article, we define two scoring functions for identifying peptides/proteins with PTMs from MS/MS spectra: match scores and diagonal scores, as well as two spectral identification problems based on the two scores. We propose several index-based algorithms for the two problems. Both theoretical and experimental analyses show that the index-based algorithms significantly improve on speed when compared with existing algorithms. Contact:
INTRODUCTIONTandem mass spectrometry (MS/MS) has been routinely used in proteomics studies. In an MS/MS experiment, digested peptides (in bottom-up approaches) or intact proteins (in top-down approaches) are measured by mass spectrometers to generate tandem mass spectra, and the spectra are analyzed by software tools to identify the peptides or proteins (). In MS/MS spectral identification, query MS/MS spectra are searched against either a protein database or a spectral library. When the query spectrum is searched against a protein database, it is a common procedure to select a set peptides/proteins whose molecular masses are similar to the precursor mass of the spectrum (within an error tolerance), then convert the peptides/proteins to theoretical spectra which the query spectrum is actually compared with. In this case, searching against a protein database can be treated as searching against a theoretical spectral library. Given a query MS/MS spectrum S and a set T of MS/MS spectra, the spectral identification problem is to compute the similarity score between S and each spectrum in T and report the best-scoring spectrum in T. Post-translational modifications (PTMs) of proteins play a crucial role in generating the heterogeneity in proteins and also help in utilizing identical proteins for different cellular functions in different cell types. Many studies in mass spectrometry involve PTM identifications (). In the blind mode of PTM identification, where PTMs are unknown, the main task is to compute the similarity score between a spectrum from * To whom correspondence should be addressed.. Comparison between a spectrum S ={2,9,11,13} with a PTM and a spectrum T ={2,6,8,10} without PTMs. Spectrum S has a PTM of 3 when compared with spectrum T. The PTM is represented as three consecutive 0's in the shaded area in the vector representation of S. The second and third 1's in S are shifted by 3 to the right when compared with T. (a) There is only one matched mass pair between S and T (the mass pair is connected by a dotted line). (b) There are two matched mass pairs between S and T ( = 3) a modified form of a peptide and another (theoretical) spectrum from the unmodified form of the same peptide. We define match scores and diagonal scores, which are two similarity scores between a spectrum with PTMs and a spectrum without PTMs. Based on the two scores, we define the match spectral identification (MSI) problem and the diagonal spectral identification (DSI) problem for identifying spectra with PTMs. We used diagonal scores as a filter in top-down protein identification in () and found that existing algorithms are time consuming for computing diagonal scores when the spectral library is large. In the past several years, high-accuracy spectra have become available due to the advance of mass spectrometers, which makes it possible to use indexes to speed up the computation of match scores and diagonal scores. In this article, we propose several index-based algorithms for the MSI and DSI problems, which significantly improve on speed when compared with existing algorithms.
METHODSAn MS/MS spectrum generated from a peptide consists of a precursor mass and a list of peaks. The precursor mass corresponds to the molecular mass of the peptide. Each peak, represented as (m/z, intensity), is related to a fragment ion of the peptide with a mass-to-charge ratio (m/z) and abundance (intensity) in the sample. In preprocessing of MS/MS spectra, m/z values are converted to masses of fragment ions (by decharging). In addition, the fragment masses are converted into a prefix residue mass (PRM) spectrum () that represents various peptide prefixes supported by the masses. Only top t PRMs in each 100 Dalton (Da) interval are kept (t = 10 in the experiments). Precursor mass and PRMs are fractional numbers in PRM spectra. To further simplify spectral analysis, precursor mass and PRMs are multiplied by a scale factor and are rounded to integers (). We emphasize that the scale factor in discretization, determined by the resolution of spectra, is important in the time complexity analysis of the following algorithms. While, for the sake of simplicity, we ignore intensities of the peaks, intensities can be easily incorporated into the index-based algorithms. In the following discussion, we onlyconsider PRM spectra in which masses are integers and intensities are ignored. A PRM spectrum is represented as either a mass list or a vector. In the mass list representation, a spectrum is represented as a mass list {a 1 ,a 2 ,...,a n }, where a n is the precursor mass of the spectrum. In the vector representation, the spectrum is represented as a 01 vector s 1 s 2 ...s N , where N = a n. If there is a mass i in the spectrum, s i = 1; otherwise, s i = 0. For example, a spectrum {2,6,8,10} is represented as a vector 0100010100. For a pair of PRM spectra S ={a 1 ,a 2 ,...,a n } and T ={b 1 ,b 2 ,...,b m }, a mass pair (a i ,b j ) is a matched mass pair if a i = b j , a i = a n and b j = b m. The number of matched mass pairs of S and T is called the mass counting score of S and T , denoted by C(S,T ). Let T (d) be the spectrum generated by shifting each mass in T by d, that is T (d) ={b 1 +d,b 2 +d,...,b m +d} ().
Match scoresIn PTM identification, a spectrum S from a peptide with a PTM is compared with another spectrum T from the unmodified form of the same peptide. The difference between S and T is an insertion or deletion of several consecutive elements (the mass value of the PTM) in their vector representations (). As a result, the '1's left to the PTM in S are matched the '1's in T , but the '1's right to the PTM in S are shifted when compared with the '1's in T. The shift value is the same to the difference between the precursor masses of S and T , denoted by  = a n b m. The shifted '1's in S are matched to '1's in the vector representation of T () (). All '1's in S are matched to '1's in either T or T () even if S has a PTM. Based on the observation, the match score of S and T is defined as C(S,T )+C(S,T ()). The spectral identification problem using match scores as the scoring function is called the match spectral identification problem.
Diagonal scoresWhen S has a PTM near the left end and another PTM near the right end of its vector representation (), the '1's between the two PTMs in S may not be matched to the '1's in T or T (), and the match score of S and T may fail to identify the PTMs. In this case, we consider all possible shift values of T. When the shift value equals to the mass value of the left PTM, the '1's between the two PTMs in S are matched to the '1's in the shifted T (). The diagonal score of S and T is the maximum mass counting score of S and T among all shift values, denoted by D(S,T ) = max d C(S,T (d)). In difference from computing the convolution of S and T , computing D(S,T ) reports only the maximum counting score of S and T. The spectral identification problem using diagonal scores as the scoring function is called the diagonal spectral identification problem. Let S ={a 1 ,a 2 ,...,a n } be the query spectrum and T ={T 1 ,T 2 ,...,T k } the spectral library in the MSI and DSI problems. To solve the MSI and DSI problems, most algorithms have two steps: (1) compute the match/diagonal scores between S and each spectrum in T and (2) report the best-scoring spectrum in T. Since the first step has higher time complexity than the second step, we report only the time complexity of the first step in the following analysis.
Match spectral identificationIn the MSI problem, both C(S,T i ) and C(S,T i ()) should be computed for each T i in T. Below only the running time for computing C(S,T i ) will be studied since computing C(S,T i ()) is similar to computing C(S,T i ). In addition to the big 'O' notation, the number of operations will be used in the(b)speed analysis since some algorithms have the same order of complexity, but the constant factors vary dramatically. For simplicity, assume that all spectra in T have the same number m of masses. When all the spectra are stored as ordered mass lists, it needs k(m+n2) mass comparisons to computing C(S,) for all spectra in T (the precursor masses in S and T i  T are not compared). This method is referred to as the simple list match algorithm. Using vector representations of spectra is a simple method for speeding up the computation. When S is represented as a vector and all spectra in T are represented as ordered mass lists, it needs k(m1) comparisons to compute C(S,) for all spectra in T. This method is referred to as the simple vector match algorithm. Next we introduce an index-based algorithm for speeding up the computation of mass counting scores. For simplicity, assume that all spectra in T have the same precursor mass M. By keeping the vector representations of all spectra in T left aligned, a linked list containing 1's is generated for each column (). There are totally M linked lists: L 1 ,L 2 ,...,L M. Link list L i contains all spectra which have a '1' at column i and the end of L i is a null node. Based on the linked lists, the index match algorithm (Algorithm 1) is proposed for computing mass counting scores (
X.Liu et al.M/cn times faster than the simple vector match algorithm, where c is the ratio between the running time of step 4 (including the operation of finding T j ) of Algorithm 1 and the comparison operation in the simple vector match algorithm (c  5 in practice). The value of M/n is determined by the sparseness of the vector presentation of S. Suppose the number of masses in every 100 Da interval in the spectrum is no more than 10 (t = 10). When the scale factor in mass discretization is 1, which is usually used for ion trap spectra, M/n  10. When the scale factor is 100, which is used foreach small group of theoretical spectra. For a query (experimental) spectrum with a precursor mass N, the best-scoring theoretical spectrum can be found by searching the experimental spectra against at most three theoretical spectrum groups whose precursor masses overlap with [N 100,N +100]. The indexes for each group are used about 3000 times on average. In this case, the running time for generating the indexes is negligible when compared with that for searching the spectra. The space complexity of Algorithm 1 is O(km). Each node inis stored in 8 bytes (4 bytes for the pointer and 4 bytes for the label). A common desktop computer with 2 GB memory can process a spectra library with 2.510 6 spectra when each spectrum in the spectral library has no more than 100 masses. If the size of the spectral library is very large, we split the large spectral library into smaller spectral libraries, then use Algorithm 1 to search query spectra against each small spectral library, and finally report identifications by combining the searching results of the small spectral libraries. In Algorithm 1, indexes are generally created for (theoretical) spectral library. However, indexes can also be created for query spectra when the protein database is stored in some special data structure, such as suffix arrays (), and it is not efficient to create indexes for the protein database.
Diagonal spectral identificationTo find the diagonal score between a query spectrum S and a spectrum T i , the simple comparison algorithm computes the shift values of all mass pairs between S and T i and counts the number of mass pairs for each shift value. The algorithm reports the mass counting scores for all possible shift values in one run, and the number of mass comparisons is k(m1)(n1). The DSI problem can also be solved using spectral convolution. Fast Fourier Transformation (FFT) is a standard method for computing the convolution of two vectors. Let S and T be two 01 vectors with lengths N and M. The running time of FFT for computing the convolution of S andT is O(N logM). When both the vectors are sparse, the running time can be reduced to O(nlog 2 M) using an algorithm from (), where n is the number of '1's in S. However, most vectors generated from high-accuracy spectra in the DSI problem are extremely sparse (e.g. one '1' in 2000 elements), and the overhead of FFT makes it slower than the simple comparison algorithm.
Index diagonal algorithmThe index-based algorithm for the DSI problem is similar to Algorithm 1. For each '1' in the vector representation of S except the last, we remove all elements left to the '1' (including itself) from the vector to generate a sub-vector of S. The sub-vector generated from the ith '1' is denoted as S. In total, there are n2 sub-vectors from S. For example, spectrum {2,6,8,10} has two sub-vectors 00010100 and 0100 (). By keeping all sub-vectors from T left aligned (), indexes (a set of linked lists) are generated as described in.shows the index diagonal algorithm (Algorithm 2) for the DSI problem. Below we prove that Algorithm 2 reports diagonal scores correctly. Suppose that the best diagonal score is C(S,T (d)) between S and T and the smallest matched mass pair between S and T (d) is (a i ,b j +d). When comparing sub-vector Sand T, every mass in S is subtracted by a i (shifted to the left by a i ) and every mass in T is subtracted by b j = a i d (shifted to the left by a i d). Thus, C(S,T (d))1 (the matched mass pair (a i ,
Speeding up tandem mass spectral identification(b)The number of nodes inis k(m1)(m2)/2. A desktop computer with 2 GB memory can process a spectral library with 510 4 spectra when m  100. Similar to the method described in the previous subsection, a large spectral library is split into smaller ones for spectral library search when the indexes of the large spectral library cannot be stored in the computer memory.
Two direction indexesIn Algorithm 2, a total of n2 sub-vectors from S are compared with sub-vectors from T. When mass a i is from a noise peak, the computation for sub-vector Scan be skipped without missing any positive identifications. Each mass in S corresponds to a peak with an intensity value. High-intensity peaks are more likely to be signal peaks than low-intensity ones and their corresponding sub-vectors should be compared to sub-vectors from T. Based on this observation, we use two direction indexes for computing diagonal scores. Each '1' in the vector representation of S splits the spectrum into a left sub-vector and a right sub-vector. The left sub-vector is the reverse of the sub-vector left to the element '1' and the right sub-vector is the sub-vector right to the element '1' (the right sub-vector is the same to the sub-vector described in). In total, there are n1 sub-vector pairs from S. For example, the second '1' in spectrum 0100010100 (mass list {2,6,8,10}) splits it into a left (reversed) sub-vector 00010 and a right sub-vector 0100. In total, spectrum 0100010100 has three sub-vector pairs (0, 00010100), (00010, 0100) and (0100010, 00). The two sub-vectors generated from the ith '1' are represented as Sand S. We generate two sets of indexes (linked lists): one for the left sub-vectors of T and the other for the right sub-vectors of T (). Using the indexes, the two-index diagonal algorithm (Algorithm 3) is proposed for computing the diagonal scores between S and all spectra in T (). Below we prove that Algorithm 3 computes the best diagonal score correctly. Suppose that S and T  T have the best diagonal score x = C(S,T (d)) and (a i ,b j +d) is a matched mass pair. When comparing the subvector pair Sand Sand the sub-vector pair T)1 is computed (the matched mass pair (a i ,b j ) is not counted). Thus, Algorithm 3 outputs the diagonal score correctly. There are x diagonal masses in S which can be mapped to a mass in T with the shift d.
RESULTSWe implemented all algorithms in Java and tested the algorithms on a desktop computer with a 2.6 G CPU and 12 G memory.
DatasetsA dataset from human cell lysate and a dataset from human plasma were used in the experiments. They are referred to as LYSATE and PLASMA datasets, respectively. In the preparation of LYSATE dataset, the samples were reduced with dithiothreitol and alkylated with iodoacetamide and were digested with trypsin. The peptide mixture obtained were separated by an high-performance liquid chromatography (HPLC) system coupled online to a Orbitrap-Velos (Thermo Fisher Scientific). Triplcate higher energy collisionally activated dissociation (HCD) datasets were acquired (). We tested our algorithms on only one date set with 37810 spectra of the triplicate. In the preparation of PLASMA dataset, peptidome of plasma samples was isolated and analyzed by an HPLC system coupled to a Orbitrap-Velos (Thermo Fisher Scientific). A total of 8495 HCD and 8495 collision-induced dissociation MS/MS spectra were acquired (). The spectra were preprocessed as described in Section 2. MS-Deconv () was used to convert high charge peaks to neutral masses of fragment ions. Only top 10 masses were selected in each 100 Da interval in PRM spectra (t = 10). The human protein database was downloaded from UNIPROT (www.uniprot.org). To analyze LYSATE dataset, all tryptic peptides with length from 6 to 40 were generated. In total, there were 1271249 peptides. The spectra in PLASMA dataset were searched against whole protein sequences in the human protein database using diagonal scores since they were from degraded peptides of endogenous proteins.
Speed tests for MSIThe speed of the simple list algorithm, the simple vector match algorithm and Algorithm 1 was tested on LYSATE dataset. The error tolerance for precursor masses was set as 100 Da to identify spectra with unknown PTMs. For Algorithm 1, we divided the theoretical spectral library (generated from peptides) into small groups based on their precursor masses. The ith group contained all theoretical spectra with precursor masses in). When the scale factor was 100, Algorithm 1 was about 33.5 times faster than the simple vector match algorithm. The difference between the speed up on the real dataset and the theoretical estimation might be from the uneven distribution of the lengths of the linked lists ().
Speed tests for DSIThe speed of the simple comparison algorithm and Algorithm 2 was also tested on LYSATE dataset. Each query spectrum was compared with all theoretical spectra (generated from peptides). Since the simple comparison algorithm was very time consuming, we decided to test it on a smaller dataset of 3781 query spectra (1/10 of the complete dataset). The running time of the simple comparison algorithm was about 884.6 min for processing the small dataset (the estimated running time for the complete dataset is 8846 min). The running time of Algorithm 2 with a scale factor of 100 was 460 min for the complete dataset, which is about 19.2 times faster than the simple comparison algorithm. The running time for generating indexes was about 8 s. Algorithms 2 and 3 were compared on LYSATE dataset with a fixed scale factor 100. Using the target-decoy approach with a shuffled decoy database, Algorithm 2 identified 1702 spectra with spectrum level 0.18% false discovery rate (FDR). The corresponding cutoff value for diagonal scores was 9. Algorithm 3 with different settings of the parameter  was tested. For each query spectrum, the top  masses were selected based the intensities of their corresponding peaks. Only identifications with a diagonal score exceeding 9 were reported. The identification is considered correct if it has the same identification or the same diagonal score when
Comparison with MASCOTWe compared MASCOT () and Algorithm 2 on PLASMA dataset since it has many spectra with PTMs. The purpose of the comparison was to evaluate the performance of Algorithm 2 on PTM identification. The error tolerances for precursor masses and fragment ion masses were set to 15 ppm and 0.05 Da, and no enzymes were specified in the parameter setting of MASCOT. The running time of MASCOT was 7.1 min. Using the targetdecoy approach (shuffled decoy database), MASCOT identified 2892 spectra with spectrum level 1% FDR. We applied Algorithm 2 (the error tolerance of fragment ion masses was considered in the implementation and was set to 15 ppm) to find a proteinspectrum-match (PrSM) with the best diagonal score for each spectrum, then an E-value for each reported PrSM was computed using a generating function approach (). The running time of Algorithm 2 was 4886 min. Using the same targetdecoy approach, Algorithm 2 identified 3138 spectra with spectrum level 1% FDR. Algorithm 2 reported 610 identifications missed by MASCOT, including 223 identifications with unknown PTMs (). The index-based algorithms and MASCOT can be used as complementary tools in spectral identification.
CONCLUSIONThe speed of the index based algorithms is related to the resolution of MS/MS spectra, and the algorithms are fast for high-resolution MS/MS spectra. It is a surprising result that using indexes speeds up the computation of diagonal scores. Generally, FFT is the best solution for computing the convolution of two vectors. But when the two vectors are sparse, the simple comparison algorithm and Algorithm 2 are much faster than FFT, and the index-based
Speeding up tandem mass spectral identification
The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
