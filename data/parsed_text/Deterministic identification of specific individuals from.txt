Motivation: Genome-wide association studies (GWASs) are commonly applied on human genomic data to understand the causal gene combinations statistically connected to certain diseases. Patients involved in these GWASs could be re-identified when the studies release statistical information on a large number of single-nucleotide polymorphisms. Subsequent work, however, found that such privacy attacks are theoretically possible but unsuccessful and unconvincing in real settings. Results: We derive the first practical privacy attack that can successfully identify specific individuals from limited published associations from the Wellcome Trust Case Control Consortium (WTCCC) dataset. For GWAS results computed over 25 randomly selected loci, our algorithm always pinpoints at least one patient from the WTCCC dataset. Moreover, the number of re-identified patients grows rapidly with the number of published genotypes. Finally, we discuss prevention methods to disable the attack, thus providing a solution for enhancing patient privacy. Availability and implementation: Proofs of the theorems and additional experimental results are available in the support online documents. The attack algorithm codes are publicly available at https://sites.google.com/site/zhangzhenjie/GWAS_attack.zip. The genomic dataset used in the experiments is available at http://www.wtccc.org.uk/ on request.
IntroductionGenome-wide association studies (GWAS) () are widely used to identify loci in the human genome associated with a specific diseases. The basis of these studies is to associate single-nucleotide polymorphisms (SNPs) or genotypes with the disease phenotype in a casecontrol design (). Although a scientific article may present GWAS results at low precision (e.g. correlation between genotypes shown only in a heat map), detailed and accurate results are often available upon request. It is standard to protect the privacy of the participating subjects by keeping patient identities confidential. Since GWAS results are statistical in nature, until recently most researchers believed that it is safe to share and publish such deidentified results. This belief was challenged by recent bioinformatics), which shows that it is theoretically possible to re-identify individual participants using only aggregate genomic data. Notably,describe the first such method based on statistical hypothesis testing. This method requires aggregate information from many genotypes (e.g. tens of thousands) to obtain high confidence regarding an individual's presence in the aggregate. In contrast, a GWAS usually publishes statistics for a much smaller number of genotypes. Therefore, using the approach suggested by Homer et al., access to the whole genotype association dataset would be necessary to accomplish this identification. Access to such complete datasets is restricted and limited only to qualified biomedical researchers with proper vetting (e.g. refer to NIH's policy for sharing GWAS data, http://grants.nih.gov/grants/guide/notice-files/NOT-OD07-088.html.).propose a more ambitious approach that aims to find all genotypes for every patient in the GWAS. This attack, however, rarely succeeds, because the number of unknowns far exceeds the number of known values. In fact, Wang et al. (2009) report only one particular synthetic GWAS involving 174 SNPs and 100 patients on which the attack succeeded. A follow-up study () tested this attack with GWAS instances from randomly selected sets of SNPs and did not find any instance on which the attack succeeded. We conclude that none of the existing methods poses a direct threat to GWAS participants' privacy based on the data that is presented in standard publications. In data security, the development of effective countermeasures requires the identification of a successful attack algorithm. In this article, we devise a strong privacy attack on published GWAS results, which successfully identifies specific patients by using a strategy of constructing deterministic proofs of study inclusion.
Methods
Preliminaries and problem definitionA typical GWAS recruits two groups of individuals: cases (denoted by D c ) and controls (denoted by D t ). Cases are patients of the disease under investigation, and controls are similar people without the disease. Usually, each SNP has two possible alleles, called the major allele (i.e. the more common allele on the SNP) and the minor allele (the rarer one). Let A denote the major allele and a be the minor allele, {AA, Aa, aa} are the three possible genotypes. Among the three basic models, AA and Aa are taken as the same in the dominant model, aa and Aa are not distinguished in the recessive model and only the additive model takes Aa as an individual genotypes (). Thus, GWAS with two genotypes is the typical case and is the focus of this work. For the simplicity of presentation, the two genotypes are denoted as 0 (major genotype)/1 (minor genotype), as used in previous studies, e.g.;. Suppose that the GWAS results involve d loci of the human genome, denoted as fg 1 ; g 2 ;    ; g d g. In genetic model with two genotypes, e.g. the dominant model and the recessive model, we represent the genomic information of an individual by a d-dimensional binary vector x i , in which each binary variable x ij represents the genotype of x i on g j. Let N c and N t be the total number of cases and controls, respectively. For each genotype g j , we define the following four counts of individuals: n c j (respectively m c j ), number of cases having genotype 0(respectively 1) on g j ; n t j (respectively m t j ), number of controls having genotype 0(respectively 1) on g j. A typical GWAS result includes N c , N t and the following three important statistics: the genotype frequency for each genotype, the genotypedisease association of each genotype and the pairwise correlation for each pair of genotypes.
Genotype frequencyThe frequency of a minor genotype g j  1 is usually computed by F j  n c n t N c N t , i.e. the ratio between the total number of individuals having the minor genotype on g j and the total number of GWAS participants.
Genotypedisease associationGWAS commonly uses the following equation to measure the association between a genotype (let g j ) and the disease under study:The asymptotical distribution of V j is a v 2 distribution with freedom degree 1, following the standard procedure (). The P value of the insignificant difference is thus 1  v 2 d j ; 1   , in which we abuse v 2 ;  to denote the accumulative distribution function of v 2 with specific degree of freedom. In the following, we assume that the GWAS publishes the P values defined above, denoted as PV j , which is true for many GWASs today. Note that our attack is not limited to this particular definition of genotypedisease association but works on any definition in which n c j can be expressed as a function of V j , N c , N t and F j , such as the one above.
Genotypegenotype correlationFor each pair of loci (say g j and g k ), there are four possible combinations of genotypes, which are (0,0) (i.e. g j  0 and g k  0), (0,1), (1,0) and (1, 1). Let M 00 jk ; M 01 jk ; M 10 jk and M 11 jk denote the number of cases having each of these four combinations, respectively. The correlation between g i and g j can be measured as follows:also follows the asymptotical v 2 distribution, with degree of freedom 1. Therefore, the corresponding P value, PV jk   1  v 2 V jk ; 1 is published as part of GWAS results. We assume that the attacker possesses a candidate set D and the genomic information of each individual in D. By 'genomic information', we mean the set of genotypes published in the GWAS results. We distinguish two situations, closed world and open world. Under closed world assumption, the candidate set D is always a superset of the GWAS cases D c , i.e. D c D. Such a candidate set can be obtained, for instance by a curious staff member of the hospital or research center where the GWAS was conducted. Note that the candidate set D can contain much more people than the GWAS cases D c , e.g. D can be the set of all individuals whose genome sequences are stored in the hospital or research center. On the other hand, under the open world assumption, the patients in D c may not be completely covered by the candidate set D known by the adversary.
Algorithm 1. GWAS attackInput: D, candidate case set; F j , frequency of the minor genotypes on g j ; P V j , P value of the association between g j and the disease; P V jk , P value of the correlation between g i and g k. 1: Step 1: Recovering the co-occurrence matrices fM 11 ; M 10 ; M 01 ; M 00 g. using F j , P V j  and P V jk .Later, we will analyze the effectiveness of our approach under these two assumptions, respectively. Given the above assumption, the goal of the attacker is to identify individuals in D that belong to the cases of the GWAS based on the GWAS statistics. The formal definition of the attack problem is summarized as follows.
DEFINITION 1:GWAS Privacy Attack Problem Given candidate set D and GWAS statistics fF j ; V j ; V jk g, identify as many samples in D as possible that belong to D c. by the number of minor alleles. Here, M aa jk is the number of cases having minor allele a on both g j and g k. When a is a rare variant, M aa ij will be small enough to provide a tight bound of M 11 ij .
Step 2: finding presence proofsThe second step of the attack uses the inferred co-occurrence matrices to construct presence proofs. A presence proof (or designated as simply 'proof') is a set of genotypes, such that at least one patient in the cases has exactly these genotypes. The number of genotypes in a presence proof is called the length of the proof. An example length-3 presence proof is p  hg 1  1; g 2  0; g 3  1i. We say that an individual x matches a presence proof, if and only if, x's genome contains all the genotypes of the proof. For example, to match the above presence proof p, an individual's genome must have minor genotype (i.e. genotype 1) on g 1 and g 3 and major genotype (i.e. genotype 0) on g 2. We call the number of cases matching a proof its frequency. The formal definition of presence proof and matching between a presence proof and an individual are given as follows.DEFINITION 2:
Presence Proof and Proof MatchA presence proof is a quintuple q  s q ; I q ; A q ; l q ; u q , where 1 s q d, called the length of q, is the number of genotypes involved in q, I q  fj 1 ; j 2 ;. .. ; j sq g are the indices of the involved loci, A q  fa 1 ; a 2 ;. .. ; a sq g 2 f0; 1g sq are the genotypes of the proofs on the corresponding loci, l q and u q are the lower bound and upper bound on the frequency of q. An individual x i matches a presence proof q, if, for each j 2 I q , the genotype of x i on g j is identical to the corresponding genotype in A q. Based on the above definition, this step aims to identify presence proofs by iteratively building longer proofs from shorter ones, using a novel algorithm that resembles a priori (), a commonly used data mining strategy. In the following, we use the notation D q c to denote the set of GWAS cases that match a proof q. Clearly, l q jD q c j u q. Let L s (called length-s proofs) denote the set of presence proofs, we are going to find that involve exactly s genotypes. The algorithm initializes with L 1 and L 2 , which can be trivially obtained from the co-occurrence matrix. Specifically, there are two length-1 proofs for each locus g j : (1, {j}, {0}, n c j ; n c j ) and (1, {j}, {0}, m c j ; m c j ). Regarding L 2 , for each pair of loci g j and g k , there are four proofs: 2; fj; kg; f0; 0g; MWe now describe the iterative procedure that builds a proof of length s  1 from two proofs of length s. Given two presence proofs q and p of length s, i.e. s q  s p  s, we say q and p share the same prefix, iff. (i) I q and I p share the same first s  1 genotypes, (ii) the last genotype in I q is different than the last one in I p and (iii) A q and A p share the same first s  1 genotypes. A new presence proof r of length s r  s  1 is constructed by merging q and p, denoted as r  q p; specifically, I r contains all s indices of I q , plus one more which is the last index in I p ; similarly, A r contains all s genotypes of A q , as well as the last genotype in A p. It remains to compute l r and u r , i.e. the lower bound and upper bound on the frequency of the candidate proof r. We first define the intersection n of q and p (denoted as n  q  p) as the prefix that q and p share in common, i.e., s n  s  1; I n consists of the first s  1 indices of I q and A n consists of the first s  1 indices of A q. Since n is shorter than q and p, it must have been generated before q and p in our algorithm, which means that the l n and u n are already known. The following lemma shows how to compute l r and u r. The proof of the lemma is given in the support online documents.
Lemma 1:Given presence proofs q and p that share the same prefix, their concatenation r  q p, and their intersection n  q  p. Let j q and a q be the last index and genotype in q, and j p and a p be the last index and genotype in p. We havejD r c j ! jD q c j  jD p c j  jD n c j:Accordingly, we have:We summarize the presence proof generation procedure in Algorithm 2. The algorithm first generates presence proofs of lengths 1 and 2 from the co-occurrence matrix. Then, it iteratively generates new proofs of length m  1, by concatenating two proofs of length m that share the same prefix. The algorithm terminates when an empty level is generated.presents an example of the iterative generation of proofs, for the GWAS data shown in. We start with length. Presence proofs (length-2 and longer) and their generation. The attack also infers the frequency of each proof. When the frequency cannot be uniquely determined, the attack derives an upper bound and a lower bound for the frequency (as shown for the rightmost proof of length 3). A proof of length l is generated by combining two proofs of length l-1 that differ in exactly one genotype
Algorithm 2. Generate presence proofsInput: M, the co-occurrence matrix. 1: Build length-1 and length-2 presence proofs L 1 and L 2. 2: while L s 6  ; do 3: Initialize an empty L s1 4: for each pair of q and p in L s sharing length s  1 prefix do 5: Construct a new presence proof r  q p 6: Find the presence proof n  q p 7: Set j q and a q be the last index and genotype in q 8: Set j p and a p be the last index and genotype in p 9: Set l r  l q  l p  u n 10: Set u r  min fjD q c j; jD p c j; M aqap jqjp g 11: if l r > 0 then 12: Add r to L s1 13: Increment s by 1 14: Return all presence proofs 1 proofs, which are single genotypes on the loci included in the co-occurrence matrix M. In our example, there are 12 such proofs, i.e. genotype 0 and 1 for each of g 1 , g 6. The frequency of each of these proofs is derived directly from the diagonal values of M, e.g. the frequency of hg 1  1i is M 11 11  3. We discard proofs with zero frequency, e.g. hg 4  0i, as they do not match any patient in the cases. Next, we construct length-2 presence proofs (e.g. hg 1  1; g 2  0i), each by combining two length-1 proofs (e.g. hg 1  1i and hg 2  0i). We compute the frequency of each length-2 proof as well, from the frequencies of length-1 proofs and the co-occurrence matrix. For instance, the frequency of hg 1  1; g 2  0i is computed by subtracting M 11 12 (the number of cases with minor genotype on both g 1 and g 2 ) from the frequency of hg 1  1i. Again, we discard zero-frequency proofs. A proof of length s ! 2 is built by merging (i.e. taking the set union of all genotypes) two proofs of length s  1 that differ in exactly one genotype. For example hg 1  1; g 2  0; g 3  1; g 4  1i can be built by merging hg 1  1; g 2  0; g 3  1i and hg 1  1; g 2  0; g 4  1i. In general, the frequency of a proof with length at least 3 cannot be computed directly from the co-occurrence matrix. Instead, we derive a lower bound and an upper bound for each such proof as shown in Lemma 1. We discard proofs with a frequency lower bound of 0, since they might not match any case. The iterative process continues until no additional proofs can be obtained. In the supporting document, we provide an analysis of the probability of obtaining a proof of a given length, based on the characteristics of the genomic domain.
Step 3: re-identifying cases from candidatesGiven the genome sequence of a suspected study participant, the final step of the attack is to check whether the suspect is among the cases in the GWAS. From the set of presence proofs obtained in the previous step, we discard each proof that is a subset of another proof. Then we match the suspect's genome sequence against each proof; if an exact match is found, then we declare the suspect to be a case. When the genome sequence of the suspect is known before the attack begins, we can significantly speed up processing by only generating proofs that match the suspect's genome sequence. Given the set of all presence proofs generated in Step 2, we discard each proof whose genotypes are a subset of another proof. Among the remaining proofs, we retain only those whose upper bound and lower bound are both 1, i.e. each of them matches exactly one case. The resulting proofs are used to identify cases from candidates. Specifically, if exactly one candidate matches one such proof, we output this candidate as a case in the GWAS. The following theorem ensures that the result of our attack contains no false positive, under the condition that adversary's candidate set contains all the cases (i.e. closed world assumption). The proof of the theorem is provided in the support online documents.Under closed world assumption, if the proof q satisfies l q  1 and there is only one matching individual in the target set, then this individual must be a case in the GWAS.Under open world assumption, our approach could falsely report candidates in D as patients in D c. However, our discussion in supporting online documents shows that the lengths of the proofs are usually sufficiently long. This forbids the output of falsepositive candidates with high probability, as these candidates need to match a true patient not included in D on a large number of genotypes. Although Algorithm 2 is capable of generating all presence proofs, its computational costs might be too high for a GWAS that publishes a large number of genotypes, due to the exponential number of possible combinations. In the following, we present an optimized algorithm (which we call candidate matching) that only generates necessary presence proofs for a given candidate set, rather than enumerates all proofs. Candidate matching is accomplished by building an appropriate first layer L 2 (originally done on the first line of Algorithm 2), based on the target candidate sample x i as Formula 5. The rest of the algorithm runs in exactly the same way as Algorithm 2 does.To reduce the computational cost, the candidate matching method finds discriminative genotypes before the generation of presence proofs. As the frequency of proofs on the samples is mostly dependent on the co-occurrence counts of the genotypes, we run the genotype selection based on the heuristic that a genotype is more discriminative if the numbers of co-occurrence of the genotype together with other genotypes are consistently smaller. This brings us a simple minimal mutual co-occurrences genotype selection strategy working as follows. First, we calculate the genotype co-occurrence for each genotype in the candidate. If it is a major genotype, we have
L, otherwise, we haveThe algorithm returns genotypes with minimal h j and feeds these genotypes to the proof generation procedure.
Results and discussionsTo evaluate the effectiveness of the privacy attack, we test it on eight datasets from the Wellcome Trust Case Control Consortium (WTCCC). All DNA samples in these datasets are collected using the 500K Affymetrix chip, and each sample contains genome sequence on 394 747 loci. In, we list the abbreviation, the target disease and the number of cases in each dataset. We simulate seven different GWASs by using the NBS dataset as the controls and one of the seven other datasets as the cases. The reference population is the set of individuals that appear in any of the eight datasets. In each simulated GWAS, we pick a certain number of genotypes uniformly at random and publish the P values of their genotypedisease correlations and the correlations between each pair of these genotypes. By default, each published value has a precision of 0.001, and different levels of precision are tested. For computational efficiency, we select a subset of the published loci with minimal mutual co-occurrences and run the privacy attack on this subset. To evaluate the accuracy of the attack, we iteratively consider each member of the reference population as a suspect. We label the suspect as a positive result if at least one presence proof is found in the DNA of the suspect, but nowhere else in the reference population. Otherwise the result is negative, meaning that the suspect is not re-identified as being among the cases. Intuitively, the attack is effective if it returns positive results for the cases and negative answers for other members of the reference population. We repeat the GWAS simulation and attack for 10 different randomly selected sets of published genotypes for each dataset and report the average results.summarizes the parameters investigated in the experiments.shows that on average, the attack successfully re-identifies 15 cases when 75 genotypes are involved in the GWAS results, of which just 14 are exploited in the attack. In other words, 14 genotypes out of 75 suffice to find unique patterns in 1% of the cases, patterns that distinguish them from everyone else in the reference population. Just as importantly, the attack does not falsely re-identify anyone from the reference population. In the Supplementary Document, we prove that when the reference dataset includes all cases, then the attack will not incur any false positive. We also show that when this assumption does not hold, e.g. some of the cases are not in the reference dataset, false positives are theoretically possible, but unlikely.also shows that the number of re-identified cases grows rapidly as the number of published genotypes increases. This is important because today's GWAS studies already typically report more than 100 loci in the publication (), which would tend to boost the re-identification rate significantly. Meanwhile, when the number of published genotypes is fixed, the number of re-identified cases increases with the number of loci used in the attack, at the expense of computation time. In addition,also contains results with varying levels of precision for each published value in the GWAS results. As long as the precision remains above 0.001, the number of re-identified cases tends to be stable; in contrast, when the precision level falls below 0.01, the attack is unable to re-identify any case. To simulate a real attack, we also test the effectiveness of our attack on the WTCCC dataset with the genotypes published by. Because of the different source of the DNA data employed by Scott et al., only 36 out of the 306 genotypes discussed in their article are available in the WTCCC datasets. We therefore apply our attack to these 36 genotypes, using the T2D dataset as cases, NBS as controls, and the other six datasets as the reference population. As shown in, the attack determines that 12 people from the WTCCC datasets are among the T2D cases, using 14 genotypes that the attack selected from among the 36 available. The attack does not mistakenly re-identify anyone from the reference population as being among the cases. The number of re-identifications is only slightly lower than that achieved with twice as many randomly selected genotypes in, further confirming the effectiveness of the attack. Note that the above results are based on dominant/recessive coding of the genotypes. When there are a lot rare variants, our method can also be extended to the additive model. Let M and M denote the co-occurrence matrices on the recessive model (binary coding, 0 forTo evaluate the effect of the attack, the experiments vary the number of published loci, the number of loci used in the attack and the precision of the statistics published by the GWAS. Default values of the parameters in bold. The number of re-identified cases in the seven WTCCC datasets, averaged across 10 trials with randomly selected sets of published genotypes. The asterisks show the average number of correct re-identifications. The boxes show the median, 25% quantile, 75% quantile, maximum and minimum numbers of correct re-identifications. Overall, the attack correctly re-identifies at least 10 cases with more than 75% probability, and on average re-identifies 15 cases, which is approximately 1% of all cases. No incorrect re-identifications occurred. (a) Results on the seven datasets, with default parameter values listed in. (b) Results with different precisions of the published statistics on the HT dataset, with other parameters fixed to their default values. (c) Results when varying the number of published genotypes on the HT dataset, with other parameters fixed to default values. (d) Results with varying numbers of genotypes used in the attack on the HT dataset, with other parameters fixed to default values. The Supplementary Document contains additional experimental results AA, 1 for {Aa, aa}) and the additive model (three states coding, 0 for AA, 1 for Aa and 2 for aa), respectively. Then, we have Mbe small enough to ensure that the statistics on the additive model is a good estimation of that that on the recessive model.in the WTCCC dataset. The attack re-identifies a dozen cases on average, which is slightly fewer than when the published data is for 75 randomly selected genotypes. The number of re-identified cases gradually grows when more genotypes are used in the attack. The Supplementary Document contains additional results obtained by running the same experiment on other datasets of WTCCC Deterministic identification of specific individuals from GWAS results
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
R.Cai et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
.2 Framework Assume that the study has identified a set of loci that are associated with the disease, and a set of statistics are published on the genotypes. The published statistics includes the frequency of the minor genotype on each identified locus; the P value of the genotype disease association for each identified locus and the P value of the genotypegenotype correlation for each pairs of identified loci. Based on the published statistics, a three-step framework is devised to identify specific individuals from GWAS results, recovering the co-occurrence matrices fM 11 ; M 10 ; M 01 ; M 00 g, finding presence proofs q and finally re-identifying cases from candidates. The framework is summarized in the Algorithm 1. Figure 1 presents an example of GWAS results and an overview of the attack on the example. As shown in the left part of Figure 1, the study has identified a set of loci, and for each locus, the GWAS publishes its minor genotype frequency, the association between the loci and the disease and the genotypegenotype correlation. As shown in right part of Figure 1, our privacy attack attempts to reverse the above process. The attack first infers the co-occurrence matrices from the published statistics, which contains aggregate information about the cases in the GWAS (only the M 11 is given in the Figure for the space limitation). Then, the attack applies an iterative data mining algorithm with the matrices to recover sets of genotype subsequences that must occur in the cases, which we call presence proofs in this article. Each presence proof contains characteristics of an individual's genome who is one of the cases. Finally, given the genotypes of a particular candidate, the attack checks whether that individual is known to be among the cases, by checking whether their genotypes match any presence proof. In the following, we elaborate on these three steps. 2.3 Step 1: recovering the co-occurrence matrix Recovering the co-occurrence matrices fM 11 ; M 10 ; M 01 ; M 00 g is the first step of the attack. Note that there are four correlated co-occurrence matrices, M 11 , M 10 , M 01 and M 00. For each pair of loci (say g j and g k ), M 11 jk in matrix M 11 is the number of cases having minor genotype on both g j and g k , i.e. g j  1 and g k  1. Similarly, M 10 , M 01 and M 00 contain elements on the number of cases with corresponding combination of g j and g k. Moreover, the diagonal element M 11 jj in the matrix M 11 represents the number of cases with a minor genotype on g j , i.e. g j  1. These diagonal elements can thus be derived directly using the published minor genotype frequency F j , the genotypedisease association PV j  and the number of cases N t. This step is trivial if the GWAS results contain the frequency computed on the cases only, as multiplying each F j with the total number of cases N c would yield the corresponding value in M 11 jj. Hence, we focus on the case where the minor genotype frequency is computed based on all participants of the GWAS. From the published P value for the genotypedisease association of each locus (say g j ), we derive the corresponding value of V j. Then, using V j , N c (i.e. total number of cases), N t (total number of controls) and F j , we solve M jj  n c j from the definition of V j. An off-diagonal element in the matrix, i.e. M 11 jk j 6  k, represents the number of cases with both a minor genotypes on g j and a minor genotypes on g k , i.e. g i  1 and g k  1. Once we have M jj and M kk ready, we can solve M jk from the definition of PV jk , using the existing numbers of PV jk  and M 11 jj. When the matrix M 11 is completely recovered, it is straightforward to recover the other three matrices M 10 , M 01 and M 00. For M 01 , the recovery is based on the equation M 01 jk  M 11 kk  M 11 jk , i.e. the number of cases with major genotype g j and minor genotype g k , equals the number of cases with minor genotype g k minus the number of cases with minor genotype g j and minor genotype g k. Similarly, we have M 10 jk  M 11 jj  M 11 jk and M 00 jk  N c  M 11 jk  M 01 jk  M 10 jk. Thus, M 00 jk ; M 01 jk and M 10 jk can be recovered, when accurate numbers in M 11 jk are available. When the published statistics are exact, all values of Ms can be computed by solving simple mathematical equations. When these statistics are only available with limited precision, the computation of Ms is more complicated. Moreover, it is possible that some values in these matrices cannot be uniquely determined. When this happens, we discard all rows and columns of Ms that contain at least one undetermined value and proceed with the remaining submatrices. In the supporting document, we provide a rigorous analysis of the sufficient conditions for co-occurrence matrix recovery, in terms of the precision of the statistics contained in the GWAS results. Moreover, when two genotypes are from different chromosomes, the co-occurrence value between them cannot be uniquely determined and corresponding value is discarded like that of the limited precision case. The above statistics are also closely related to the SNP-based statistics. For example, in the dominant model, {AA, Aa} are denoted as 0 and aa is denoted as 1. Then we have 1 2 M aa ij M 11 ij M aa ij , e.g. the number of minor genotype is bounded Fig. 1. Example of GWAS result publication and the privacy attack. Top left: part of the raw data of the GWAS, which contains genome sequences for study participants. Bottom: published results of the GWAS, which lists the genotypes of interest, their frequencies and correlation with the disease, as well as the correction between each pair of these genotypes. Right column: the proposed privacy attack, which first recovers a co-occurrence matrix from the published statistics (only M 11 is given for space limitation) and uses this matrix to build presence proofs, i.e. sets of genotypes that must be present among the cases Deterministic identification of specific individuals from GWAS results
Conclusion To sum up, the privacy attack described in this article poses a potential threat to the privacy of patients participating in a GWAS. One effective countermeasure is to lower the precision of the published statistics, e.g. publish only a heat map for the correlation between different genotypes and never reveal their precise values. Meanwhile, since the attack's power grows with the number of genotypes, studies should minimize the number of SNPs included in the published results. Finally, a promising direction for protecting GWAS results with strong privacy guarantees is differential privacy techniques (Johnson and Shmatikov, 2013), which inject random noise into the statistical results. The current state-of-the-art is able to publish a handful of genotypes with the highest correlations with the disease with strong privacy guarantees and good accuracy. However, some limitations of the method need to be addressed in the future, e.g. the method is only applicable to binary coding of the genotypes, the method incurs prohibitively high error rates when a larger number of genotypes are involved in the published results. With the availability of direct-to-consumer genetic tests that report genotypes associated with medical or physical traits, personal genetic marker data are becoming widely accessible and even public. Medical institutions are considering collecting prospective genomic data on patients in large scale for both research and potentially clinical purposes. It is therefore important for effective security measures to be in place as these data become accessible. We present the first successful attack algorithm using minimum genotype sets and several effective counter measures. This strategy represents a framework for future genetic privacy defenses.
