We have implemented a high-performance computing (HPC) version of ProtTest that can be executed in parallel in multicore desktops and clusters. This version, called ProtTest 3, includes new features and extended capabilities. Availability: ProtTest 3 source code and binaries are freely available under GNU license for download from http://darwin.uvigo.es/ software/prottest3, linked to a Mercurial repository at Bitbucket (https://bitbucket.org/).
INTRODUCTIONRecent advances in modern sequencing technologies have resulted in an increasing capability for gathering large datasets. Long sequence alignments with hundred or thousands of sequences are not rare these days, but their analysis imply access to large computing infrastructures and/or the use of simpler and faster methods. In this regard, high-performance computing (HPC) becomes essential for the feasibility of more sophisticatedand often more accurate analyses. Indeed, during the last years HPC facilities have become part of the general services provided by many universities and research centers. Besides, multicore desktops are now standard. The program ProtTest () is one of the most popular tools for selecting models of amino acid replacement, a routinary step in phylogenetic analysis. ProtTest is written in Java and uses the program PhyML () for the maximum likelihood (ML) estimation of model parameters and phylogenetic trees and the PAL library () to handle alignments and trees. Statistical model selection can be a very intensive task when the alignments are large and include divergent sequences, highlighting the need for new bionformatic tools capable of exploiting the available computational resources. Here we describe a new version of ProtTest, ProtTest 3, that has been completely redesigned to take advantage of HPC environments and desktop multicore processors, significantly reducing the execution time for model selection in large protein alignments.
PROTTEST 3The general structure and the Java code of ProtTest has been completely redesigned from a computer engineering point of view. * To whom correspondence should be addressed.We implemented several parallel strategies as distinct execution modes in order to make an efficient use of the different computer architectures that a user might encounter:(1) A Java thread-based concurrence for shared memory architectures (e.g. a multicore desktop computer or a multicore cluster node). This version also includes a new and richer graphical user interface (GUI) to facilitate its use.(2) An MPJ () parallelism for distributed memory architectures (e.g. HPC clusters).(3) A hybrid implementation MPJ-OpenMP () to obtain maximum scalability in architectures with both shared and distributed memory (e.g. multicore HPC clusters). Moreover, ProtTest 3 includes a number of new and more comprehensive features: (i) more flexible support for different input alignment formats through the use of the ALTER library (): ALN, FASTA, GDE, MSF, NEXUS, PHYLIP and PIR; (ii) up to 120 candidate models of protein evolution; (iii) four strategies for the calculation of likelihood scores: fixed BIONJ, BIONJ, ML or user defined; (iv) four information criteria: AIC, BIC, AICc and DT (see Sullivan and Joyce 2005); (v) reconstruction of model-averaged phylogenetic trees (); (vi) fault tolerance with checkpointing; and (vii) automatic logging of the user activity.
PERFORMANCE EVALUATIONIn order to benchmark the performance of ProtTest 3, we computed the running times for the estimation of the likelihood scores of all 120 candidate models from several real and simulated protein alignments (). When these data were executed in a system with shared memory, e.g. a multicore desktop, the scalability was almost linear as far as there was enough memory to satisfy the requirements. For example, in a shared memory execution in a 24-core node the speedup was almost linear with up to 8 cores, also scaling well with datasets with medium complexity, like HIVML or COXML (). In a system with distributed memory like an cluster, the application scaled well up to 56 processors (). With more processors, a theoretical scalability limit exists due to the hetereogeneous nature of the optimization times, from a few seconds for the simplest models to up to several hours for the models that include rate variation among sites (+G). This problem was solved with the hybrid memory approach. In this case, the scalability went beyond the previous limit, reaching up to 150 in the most complex cases with 8-core nodes ().
ProtTest 3
CONCLUSIONSProtTest 3 can be executed in parallel in HPC environments as: (i) a GUI-based desktop version that uses multicore processors; (ii) a cluster-based version that distributes the computational load among nodes; and (iii) as a hybrid multicore cluster version that achievesspeed through the distribution of tasks among nodes while taking advantage of multicore processors within nodes. The new version has been completely redesigned and includes new capabilities like checkpointing, additional amino acid replacement matrices, new model selection criteria and the possibility of computing modelaveraged phylogenetic trees. The use of ProtTest 3 results in significant performance gains, with observed speedups of up to 150 on a high performance cluster. In this way, statistical model selection for large protein alignments becomes feasible, not only for cluster users but also for the owners of standard multicore desktop computers. Moreover, the flexible design of ProtTest-HPC will allow developers to extend future functionalities, whereas thirdparty projects will be able to easily adapt its capabilities to their requirements.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from [09:25 26/3/2011 Bioinformatics-btr088.tex]
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
