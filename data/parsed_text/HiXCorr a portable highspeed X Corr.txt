Peptide identification is an important problem in proteomics. One of the most popular scoring schemes for peptide identification is X Corr (cross-correlation). Since calculating X Corr is computationally intensive, a lot of efforts have been made to develop fast X Corr engines. However, the existing X Corr engines are not suitable for high-resolution MS/MS spectrometry because they are either slow or require a specific type of CPU. We present a portable high-speed X Corr engine for high-resolution tandem mass spectrometry by developing a novel algorithm for calculating X Corr. The algorithm enables X Corr calculation 1.25â€“49 times faster than previous algorithms for 0.01 Da fragment tolerance. Furthermore, our engine is easily portable to any machine with different types of CPU because it is developed in C language. Hence, our X Corr engine will expedite peptide identification by high-resolution tandem mass spectrometry. Availability and implementation: Available at
Gene expressionHiXCorr: a portable high-speed X Corr engine for high-resolution tandem mass spectrometry
IntroductionProteomics () is the study of proteins, particularly expression, structures, functions and interactions of proteins. Because proteins play important roles in a human body, correct protein (sequence) identification () is very important. High-throughput protein identification is generally done by cleaving a protein into peptides, getting tandem mass (MS/MS) spectra of the peptides and analyzing the spectra to identify peptide sequences. SEQUEST () is one of the most widely used computer programs for peptide identification from MS/MS spectrum analysis. It compares an experimental spectrum with theoretical spectra computationally created from sequences in peptide database, and finds the theoretical spectrum most similar to the experimental spectrum. To measure the similarity between the theoretical and experimental spectra, SEQUEST uses a sophisticated scoring scheme X Corr (cross-correlation). However, calculating X Corr can be very slow and consumes most of the running time of SEQUEST. Thus, a lot of efforts have been made to overcome this speed issue. The original SEQUEST used fast Fourier transform algorithm () to make the X Corr calculation faster. Later, Crux () improved the calculation speed of X Corr by using a precomputation table, which is also used in modern SEQUEST and TurboSEQUEST. Faster X Corr calculation is performed by Tide (). It was optimized for x86 machine by including the x86 assembly code. Later, a portable Tide was developed in C language with exact P-value computation capability. (). To distinguish these two Tide versions, we will call the earlier version with x86 assembly code Tide-x86 and the later portable version Tide-C. Modern processors have multicores and support multithreading. Comet (), an open-source MS/MS search tool by X Corr , supported multithreading for X Corr calculation. Thus, the more processors and cores a machine has, the faster the Comet runs. Nowadays, more and more spectra are being acquired by highresolution mass spectrometers. For example, Q-Exactive Orbitrap hybrid mass spectrometers (Thermo Scientific, Bremen, Germany)slower, respectively, when the fragment tolerance is 0.01 Da than when the tolerance of 0.1 Da (and Supplementary). Comet shows similar behavior as the resolution gets higher (, Supplementary Table S2, and Supplementary). The existing X Corr engines run slower for high-resolution spectra because they require more memory as the resolution gets higher: They create an O (m/f)-sized mass bin array for X Corr calculation where m is the precursor mass and f is the fragment ion mass accuracy. For example, for a low-resolution spectrum whose precursor mass is 1000 Da and fragment tolerance is 1 Da, they create an array whose size is around 1000. However, for a high-resolution spectrum whose precursor mass is 1000 Da and fragment tolerance is 0.01 Da, they create an array whose size is around 100 000. Comet suggested a partial solution for this. When it runs with " use_sparse_matrix1 " in the parameter file, it first creates a huge mass bin array and then compresses the array. We will call this Comet-Sparse.
ResultsIn this article, we present a portable hi-speed X Corr engine, which does not create a mass bin array altogether, instead, calculates X Corr directly from the peak list. Thus, it runs in O(p) time where p is the number of peaks in a spectrum, while all the previous engines are based on X Corr algorithms running in O(m/f) time where m is the precursor mass and f is the fragment tolerance (pseudocodes are available in the Supplementary Data).HiXCorr: a portable high-speed Xcorr engine
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Conclusion We present a portable high-speed X Corr engine for high-resolution tandem mass spectrometry by developing a novel algorithm, which enables X Corr calculation 1.2549 times faster than before for 0.01 Da fragment tolerance. When the fragment tolerance is 0.001 Da, our engine runs 1000 times faster than Tide-C's X Corr engine, 20 times faster than Comet-Sparse's and 11 times faster than Tidex86's X Corr engine (Fig. 1 and Supplementary Data). Furthermore, our engine is easily portable to almost every machine because it is developed in C. Optimizing our engine for x86 machines by embedding an x86 machine code can be a future research topic. Since X Corr score is widely used in peptide identification, this article may be useful for the community. Finally, we did not trade correctness for efficiency. Our X Corr engine calculates the same X Corr score as Tide and Comet do (Supplementary Theorem 2).
