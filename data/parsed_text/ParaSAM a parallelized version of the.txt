Motivation: Significance analysis of microarrays (SAM) is a widely used permutation-based approach to identifying differentially expressed genes in microarray datasets. While SAM is freely available as an Excel plug-in and as an R-package, analyses are often limited for large datasets due to very high memory requirements. Summary: We have developed a parallelized version of the SAM algorithm called ParaSAM to overcome the memory limitations. This high performance multithreaded application provides the scientific community with an easy and manageable client-server Windows application with graphical user interface and does not require programming experience to run. The parallel nature of the application comes from the use of web services to perform the permutations. Our results indicate that ParaSAM is not only faster than the serial version, but also can analyze extremely large datasets that cannot be performed using existing implementations.
INTRODUCTIONShrinkage-based approaches to testing for differential expression in microarray experiments have proven to best identify the genes of scientific interest (). The computational demand of analyzing these data continues to increase due to the reduced cost of microarrays and increases in the number of replicates being measured. The computational burden is especially evident with shrinkage-based tests where permutations are often used to assess statistical significance and the false discovery rate (FDR) (). The significance analysis of microarrays (SAM) algorithm is a popular method for differential expression analyses using a shrinkage-based-test and permutations for the FDR (). The popularity of SAM is enhanced by its free availability as an Excel plug-in or R package. SAM is a computationally * To whom correspondence should be addressed. demanding algorithm and analysis of larger datasets is challenging due to the high memory requirements. Creating a parallel version of SAM could address problems often encountered with larger experiments. With a parallel algorithm, the computational workload is divided among multiple CPUs and the main memory of all participating computers is utilized to avoid caching operations to the disk which will significantly decrease algorithm execution time. The most time and memory intensive portion of the SAM algorithm is permuting the columns to determine the null distribution. For large datasets, users of the serial version of SAM will decrease the number of permutations used in analyses to allow the algorithm to complete without error. This results in a poorly characterized null distribution. To overcome this limitation, we developed a high performance parallelized version of the SAM algorithm called ParaSAM. This version divides the permutations across multiple compute nodes, allowing ParaSAM to perform a large number of permutations (e.g. 1000).a larger number of people by writing the software to run in the Windows operating system. This parallel implementation of the SAM algorithm does not require expensive hardware and the number of compute nodes can be as small as one. In fact, any number of inexpensive desktop computers connected by a network can be used. The permutation partitioning scheme is not restricted and is entirely dependent on the number of compute nodes participating in the algorithm. In ParaSAM, we have utilized the memory efficiently using C# and have achieved almost a 2-fold speed-up even on a single machine.
PERFORMANCE AND TESTING
Configuration of test system used to assess ParaSAMThe performance of ParaSAM was evaluated using one master computer with between 1 to 7 compute nodes. For comparisons, we installed R 2.8.0 and the samr package on the master computer. The master computer and the seven compute nodes were all identical machines: Dell Poweredge 2650 with Dual 3.06 GHz/512K Cache Xeon Processors and 8.0 GB DDR 266 Mhz RAM.
Increased capacity of handling larger datasetsWe analyzed an experimentally derived microarray dataset (NCBI Gene Expression Omnibus; GSE9006: Gene expression in PBMCs from children with diabetes) (). Combined data from both chips (HG-U133A and HG-U133B) were used for a 44 760 gene dataset. The data from only the HG-U133A chip was used for the 22 283 genes dataset. The entire dataset contains 117 arrays with three groups: Healthy, 24 arrays; Type-1 Diabetes, 81 arrays; and Type-2 Diabetes, 12 arrays. The arrays were further subdivided into smaller datasets as shown in Supplementary Table S1. A multiclass SAM analysis was performed using the samr-package and ParaSAM with 1 to 7 nodes. ParaSAM successfully analyzed datasets with 44 760 genes and 117 arrays using 1000 permutations, whereas R (samr) could only perform 200 permutations on this dataset (number of arrays analyzed, ParaSAM scaled significantly better than samr ().
Significantly increased speedupThe speed-up of ParaSAM was evaluated using a small dataset (22 283 genes, 40 arrays, 500 permutations) and compared with samr. We found that ParaSAM is 1.83X, 3.22X, 4.49X, 5.25X, 5.65X, 6.11X, 6.07X faster than samr using 1 to 7 nodes, respectively (Supplementary Figures S2 and S3). Interestingly, increases in speed start to plateau after five nodes are used (200 permutations/node).
ParaSAM produces the same results as SAMWe validated ParaSAM with samr using one-group, two-group and multigroup datasets using 1000 permutations on datasets with 3000 genes for 12 arrays (One class), 14 arrays (Two class) or 25 arrays (Multiclass). The results indicate that ParaSAM is not statistically different than R-SAM for the One class (P = 0.9055), Two class (P = 0.6721) or Multiclass (P = 0.8852) analyses (Supplementary Tables S3S8 and Figures S4S6). As the number of publically available microarray experiments increases, the ability to analyze extremely large datasets across multiple experiments becomes critical. The ability to conduct such analyses depends on algorithms that are fast and memory efficient. ParaSAM is designed to provide the general scientific community with an easy and manageable client-server Windows application. ParaSAM is faster than existing implementations and is able to analyze much larger datasets. This software is freely available and can help the scientific community with accurate and effective microarray data analysis.
IMPLEMENTATION We designed ParaSAM with an easy and manageable client-server application model that can be easily deployed in most research laboratories, using the same model design we implemented in ParaKMeans (Kraj et al., 2008). A web service (ParallelSAM) performs the permutations, allowing for parallel computation. The main Application Programming Interface (API) is a .NET dynamic link library that connects to and uses the ParallelSAM web service(s). The API is used by the user interfaces to orchestrate the activities of the compute nodes and provides the methods to load the data, send the data to the nodes and orchestrate the asynchronous multithreaded connections to the ParallelSAM web services (Supplementary Fig. S1). We have developed both a stand-alone windows GUI that can be installed on any Windows machine and an AJAX-based (Asynchronous JavaScript and XML) web GUI. The standalone GUI also provides easy file management, compute node management, program options and a results window for saving the data. The one-class, two-class unpaired and multiclass response types are implemented in both versions. ParaSAM is easily installed using the built-in Windows Installer (MSI files). The ParallelSAM web service is installed on each machine that will be used as a compute node and the GUI is installed on the computer to be directly used by the end user. The webbased GUI requires IIS to be functional. Because most laboratory personnel use Windows-based computers, we felt we would reach
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
