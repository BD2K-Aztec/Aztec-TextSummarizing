During mitosis, chromosomes are attached to the mitotic spindle via large protein complexes called kinetochores. The motion of kinetochores throughout mitosis is intricate and automated quantitative tracking of their motion has already revealed many surprising facets of their behaviour. Here, we present 'KiT' (Kinetochore Tracking)â€”an easy-to-use, open-source software package for tracking kinetochores from live-cell fluorescent movies. KiT supports 2D, 3D and multi-colour movies, quantification of fluorescence, integrated deconvolution, parallel execution and multiple algorithms for particle localization. Availability and implementation: KiT is free, open-source software implemented in MATLAB and runs on all MATLAB supported platforms. KiT can be downloaded as a package from http://www. mechanochemistry.org/mcainsh/software.php. The source repository is available at https://bitbucket. org/jarmond/kit and under continuing development.
IntroductionThe process of mitosis involves the attachment of chromosomes to a protein scaffold, called the mitotic spindle, via large protein complexes called kinetochores (). Throughout mitosis, the kinetochores, and hence the chromosomes, execute a highly complex stochastic motion culminating in the segregation of the genetic material to the two daughter cells. Automated quantitative tracking of fluorescently labelled kinetochores is revealing surprising details of their behaviour and makes the analysis of large datasets consisting of hundreds or thousands of cells feasible (). We have developed a MATLAB packageKinetochore Tracking (KiT)for tracking the motion of kinetochores, facilitating the quantitative analysis of chromosome motionC. Although KiT is primarily developed with tracking of kinetochores in mind, it is also useful as a tool for tracking other fluorescently-marked particles in cells, e.g. centrosomes, motors etc., provided they have an approximately Gaussian shape and are not extended objects. For example, the centrosomes can also be tracked when fluorescently marked (e.g.).
FeaturesKiT evolved from earlier software for particle tracking (u-Track;), kinetochore tracking (MaKi;) and kinetochore track analysis () and incorporates numerous enhancements and major new features. Movies are loaded through the Bioformats package (), which is automatically downloaded, enabling compatibility with a vast range of microscopy data formats.
Graphical User InterfaceKiT includes a user-friendly GUI (Graphical User Interface) for selecting ROIs (Regions Of Interest; to select cells and exclude spurious background fluorescence), parameter configuration and execution of KiT. Tracking may be executed from within the GUI or later. The GUI allows selection of particle detection algorithms per V C The Author 2016. Published by Oxford University Press.
1917This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.
Bioinformatics
Multi-channel trackingOften the correlative dynamics of multiple proteins is of interest. To facilitate this, KiT allows independent tracking of objects in different channels. To allow correlation between the dynamics of multiple channel data, a coordinate system is derived from a single selected channel and the other channels are transformed into this system. An option is also provided to supply an experimentally determined point-spread function (PSF), which is then used to perform deconvolution via the MATLAB function deconvlucy.
Fluorescence quantificationIn addition to multi-channel tracking, fluorescent intensity is measured within a customizable mask over the tracked object in all channels. For example, we have quantified EB3-EGFP levels at kinetochores which were tracked by mCherry-CENP-A ().
Modular detection algorithmsThe signal-to-noise ratio of live-cell imaging data can vary widely. To accommodate this, we introduced a modular system for choosing particle detection algorithms. In the primary stage, particle locations are initially detected using: (a) unimodal histogram thresholding (), (b) multiscale wavelet product thresholding () or (c) point-cloud similarity adaptive thresholding. Algorithm (c) is a novel method for setting a global threshold based on maintaining stability in the number and location of particles (see Supplementary Materials). Algorithm (a) is the fastest but least robust to background fluorescence (e.g. bimodal histograms), while (b) is slower and requires more fine-tuning but is capable of excluding more false positives in noisy images. Algorithm (c) offers a balance between speed and sensitivity (see Supplementary). After initial detection, an optional stage of location refinement is available using either: (d) calculation of the centroid of the particle (), or (e) fitting a mixture model of 3D Gaussian functions to the spot locations () within regions of potentially overlapping PSFs, in order to allow the discrimination of sub-resolution particles. Algorithm (e) is significantly slower than (d), thus we allow the independent selection of initial particle detection and refinement for those applications where subpixel-resolution is not required.
Coordinate systemsCells and the mitotic spindle itself are prone to translation and rotation. We have found that different reference frames for defining a coordinate system are useful in different circumstances. KiT provides three options: (i) metaphase plate, where the kinetochores are aligned such that variation along two principal axes is much larger than along a third (), (ii) image moments, similar to (i) except we use the eigenvectors of the image covariance matrix instead of particle locations, which is useful for 2D movies (), (iii) translation correction only.
Parallel executionOn a 2.9 GHz MacBook Pro, tracking of a 150 frame movie takes 5 min per ROI using refinement algorithm (d), and around 30 min using (e). The total analysis time of large datasets may be reduced by invoking the parallel execution option, which uses the batch processing facility of the MATLAB Parallel Computing Toolbox to schedule each ROI to run in parallel on a multi-core machine.
UsageNo installation is necessary; the source directory may optionally be added to the MATLAB path. The process of tracking in a single ROI is termed a job, and the tracking of a whole set of ROIs is termed a jobset. To setup a jobset the following command is used: jobset  kitGUI. This results in the GUI display where the user can select the movies to be analyzed, select ROIs from each movie, specify the tracking requirements and customize various options. After choosing a jobset name and completing the tracking setup, the jobset description file is saved to disk. The tracking is started from within the GUI or with the command: kitRunJobs(jobset). For each ROI, a file is generated containing the kinetochore tracks and other data. Simple analysis can be performed on the data (see examples inF), e.g. plotting kinetochore tracks or computing the autocorrelation, with the command: kitAnalysis(jobset). This opens a GUI with buttons for each analysis plot. An option is provided to save a .mat file containing collated data from across all ROIs for external processing.
ConclusionWe have developed KiT, a software tool which enables user-friendly and efficient particle tracking and basic analysis of kinetochores and other objects. We hope that it will lower the entry barrier for quantitative tracking analysis of live-cell imaging data by cell biology laboratories.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
J.W.Armond et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
