Motivation: De novo transcriptome assembly is an integral part for many RNA-seq workflows. Common applications include sequencing of non-model organisms, cancer or meta transcrip-tomes. Most de novo transcriptome assemblers use the de Bruijn graph (DBG) as the underlying data structure. The quality of the assemblies produced by such assemblers is highly influenced by the exact word length k. As such no single kmer value leads to optimal results. Instead, DBGs over different kmer values are built and the assemblies are merged to improve sensitivity. However, no studies have investigated thoroughly the problem of automatically learning at which kmer value to stop the assembly. Instead a suboptimal selection of kmer values is often used in practice. Results: Here we investigate the contribution of a single kmer value in a multi-kmer based assembly approach. We find that a comparative clustering of related assemblies can be used to estimate the importance of an additional kmer assembly. Using a model fit based algorithm we predict the kmer value at which no further assemblies are necessary. Our approach is tested with different de novo assemblers for datasets with different coverage values and read lengths. Further, we suggest a simple post processing step that significantly improves the quality of multi-kmer assemblies. Conclusion: We provide an automatic method for limiting the number of kmer values without a significant loss in assembly quality but with savings in assembly time. This is a step forward to making multi-kmer methods more reliable and easier to use. Availability and Implementation:A general implementation of our approach can be found under: https://github.com/SchulzLab/KREATION.
IntroductionWith the massive amounts of RNA-seq data () produced for many non-model organisms, the interest for de novo analyses of RNA-seq data has increased over the last few years. These analyses include the de novo assembly of full length transcripts, expression level computation of novel transcripts, detecting differentially expressed transcripts and detection of related genes in close species or polymorphism detection (). Due to the large number of applications, several methods have been proposed for the de novo transcriptome assembly. Most of these methods are based on building a de Bruijn graph (DBG) from the RNA-seq reads. The nodes of the DBG are substring of length k (also know as kmers) obtained from the reads and two nodes are connected if they have k-1 overlap. After obtaining the DBG, various heuristic algorithms are used to predict alternative transcripts from each DBG component. These algorithms either use a single kmer value () or merge transcripts generated from multiple kmer values to obtain a final non-redundant assembly (). A multi-kmer based approach outperforms a single-kmer based approach as one kmer size rarely fits all genes (). Large kmer values resolve repeats and regions with many errors, whereas small kmer values are necessary to connect lowly expressed transcripts that have low-coverage regions. Hence even for most single kmer methods it is beneficial to run the assembler for different kmer values and merge the final results. But the question about the core set of kmer sizes that are needed to achieve a good quality assembly has received little attention for multi-kmer methods. Currently, approaches (i) use the default kmer series of the assembler which is tuned on a limited number of datasets, (ii) select an arbitrary subset of kmer sizes or (iii) use all possible kmer sizes for the assembly. In practice that means that most often the resulting assembly is suboptimal. Either important kmer sizes are missed (cases 12) and therefore the sensitivity is reduced or the complete assembly contains more misassemblies than necessary and has wasted computational resources (case 3). Selecting a suitable kmer size for de novo assembly has been previously explored in the context of genomic sequencing. For example () devised a method to select the best kmer size for de novo genome assembly. Simpson devised a method to estimate a number of interesting characteristics like paths with variations or repeats in the DBG for different kmer sizes from a FMindex over the reads (). Further, computing an optimal kmer range for de novo read error correction was also proposed (). However, all these methods assume a uniform coverage distribution and are not applicable to nonuniform RNA-seq data. Here we investigate in detail how the number of kmer assemblies can be minimized to save computational resources, without a large loss in sensitivity and without using a reference annotation for assembly quality assessment. We introduce the KREATION (Kmer Range EstimATION) algorithm that is based on two novel contributions: (i) a comparative clustering of single kmer assemblies to define extended clusters which gives a notion of the assembly quality and (ii) a heuristic model assessment that allows to predict the optimal stopping point for a multi-kmer assembly method. We show that our new de novo strategy automates the choice of kmer sizes to explore, while achieving close to optimal performance.
Methods
Evaluation of assembliesWe use standard metrics for the evaluation of our assembled transcripts. We align transcripts against the reference genome using Blat () and compare it with annotated Ensembl transcripts (). Then we compute the number of Ensembl transcripts that are overlapped to at least 80 or 100% by an assembled transcript, and term them as 80 and 100%-hits, respectively. We defined 80%-hit improvement rate as the ratio of the 80%-hits obtained from the multi-kmer assembly compared to a single-kmer based assembly. Further, we compute misassemblies by counting the number of aligned transcripts whose aligned region is 95% of the total transcript length. All transcripts that are not misassemblies are considered to be correct. We also compute nucleotide sensitivity and specificity as explained by ().
Transcriptome assemblyWe used the de novo transcriptome assemblers Oases (, version 0.2.08), SOAPdenovo-Trans (, version 1.03) and Trans-ABySS (version 1.5.3) for our analyses. All assemblers were run with default parameters except the kmer parameter for the DBG and insert length for the paired-end sequencing data sets. Transcripts shorter than 100bps were removed from the final assembly. SOAPdenovo-Trans doesn't have its own merge script and the merge script of Oases and TransABySS provides little information about the clusters obtained. Further, it was shown that the oases_merge script has suboptimal performance compared to CDHIT-EST clustering (). Hence we used CD-HIT-EST (, version 4.6.1-2012-08-07) for clustering individual kmer assemblies, as detailed in Section 2.3. In order to analyze how selecting arbitrary kmer values influences assembly performance we created three sets of random kmers. All the sets contained kmers spread across the read length, see. We denote as best-k the assembly where the highest number 80%-hits was achieved for a dataset. For the analyzed datasets these were assemblies obtained from k 25 for brain, k 23 for human Embryonic Stem Cell (hESC), k 27 for T-cell and HeLa.
Clustering assembled transcriptsWe use the CD-HIT-EST software, for clustering transcripts assembled by individual kmer sizes and merging sets of transcripts from distinct kmers. CD-HIT-EST is a fast clustering technique that reports final clusters with all sequences contained in the cluster. It uses a greedy algorithm to iteratively grow clusters and multicore parallelization for fast clustering. We run CD-HIT-EST with 10 threads. Consider two sets of assembled transcripts, T 1  ft 1 1 ;. .. ; t 1 n g and T 2  ft 2 1 ;. .. ; t 2 m g with n and m many sequences respectively, each produced by running a de novo assembler for one or more kmer values. Let C  fc 1 ;. .. ; c l g be the set of l sequence clusters obtained by applying a sequence clustering algorithm to T 1 and T 2 , denoted as ComputeClusters(T 1 ; T 2 ). We define the following notions on clusters: a cluster c 2 C is called unique with respect to T 2 if it holds that c & T 2 , namely that all sequences in c are only from assembly T 2. Further we call the longest sequence of a cluster c 2 C the representative of c, denoted as rep(c). A cluster c 2 C is called extended by T 2 if repc 2 T 2 and c is not unique. We denote e  extended(C; T 2 ) as the number of extended clusters in C with respect to T 2 (See Supplementary). Collectively we denote all clusters that are extended or unique with respect to T 2 as novel clusters with respect to T 2. All remaining cluster are called old.
Predicting the assembly stopping point via assessment of model fitWe analyzed assemblies generated by different de novo assemblers and observed that with an increase in kmer size the number ofkmer selection for de novo transcriptome assemblycorrect transcripts produced by the assembler follows approximately an exponential distribution, see Results. We show that the number of extended clusters in consecutive assemblies behave similarly and can thus be used in a de novo setup. Our rationale was that once this exponential trend does not hold anymore for increasing kmer values, the number of extended clusters is not dominated by correct transcripts, but rather by missassemblies or redundant assemblies. We summarize our approach for the above insight in algorithm 1: Given a set of reads and a minimal kmer, denoted k min , the assembler explores an a priori fixed series of kmer values X  k 1 ;. .. ; k n  where k 1  k min. This series is computed using a function f. In our case we use the simple function: f k  k  2, as Oases and SOAPdenovo-Trans can use odd kmer values only and we wanted to use the same set of kmer values for all assemblers to maintain consistency. For each k an assembly is produced (line 7). All new transcripts in T ki are clustered with the previous transcripts using the function ComputeClusters(T ; T ki ) to produce C (line 8). The number of extended clusters e i with respect to T ki is computed (using extended(C; T ki )) and its log count is stored in y i (line 9). We then assume the following linear model:where Y  y 1 ; y 2 ;. .. ; y n  denotes the series, with y i  log 10 e i . b 0 and b 1 are the constants representing slope and intercept of the line respectively. Gaussian noise is denoted by. We are interested in analyzing the linear model fit with an increase in number of data points. More precisely, if we have a linear model fit on n  1 datapoints (where n > 3, since we require at least three datapoints to model a line to avoid premature stopping of the assembly), we want to assess the error in predicting the nth datapoint using the line. We fit a line (lm) with Y  y 1 ; y 2 ;. .. ; y n1  and X  k 1 ; k 2 ;. .. ; k n1  and estimate the coefficients b b n1  b 0 ; b 1  by minimizing the residual sum of squares (line 10):where b y i  b 0  b 1 k i is the predicted value of y i. Assuming that this line would also explain y n , we use the estimated coefficients to compute b y n for k n (line 11). We compute the error between b y n and its actual value: errn  y n  b y n  2 :We increment n and repeat the above procedure until n reaches the stopping point. For any given kmer series of length m, we define the deviation score (d_score) as the cumulative sum of point-wise error estimates:The stopping point is determined by applying a threshold to the d_score (line 13). The d score is expected to remain close to zero for data points which follow a linear trend. It increases considerably and crosses the threshold value at a point where the quality of the linear fit degrades i.e. the fitted line is no longer able to explain the additional datapoint. If the d score is less than the cutoff, the algorithm continues and updates all the variables (line 1618). Otherwise the algorithm terminates and produces the final assembly.
De novo removal of misassembliesA disadvantage of merging several single kmer assemblies is the increased number of misassemblies in the final result. In principle, misassembled transcripts should only occur at kmer values that are shorter than repeat length and thus they are unlikely to occur at all different kmer values. To accommodate this idea we devised the following method. Assume we run our assembly for the values k  fk 1 ; k 2 ; k 3 ; k 4 g. After producing the final clustering C of the transcripts of these four assemblies T k1 ; T k2 ; T k3 ; T k4 we consider the clusters c in which only transcripts of a certain T kx exist, i.e. which are unique with respect to T kx. We termed these clusters as single-k clusters. We classified all the single-k clusters and transcripts shorter than a predefined length threshold (300 bp for all datasets) as misassemblies. For measuring the difference in misassemblies between multikmer assembly (say T multi ) and single-kmer assembly (say T single ) we define: misassembly rate  observed expectedwhere, observed  #misassemblies in T multi jT multi j ;expected  #misassemblies in T single jT single j :
Data retrieval and preprocessingAll datasets were downloaded from the SRA (http://www.ncbi.nlm. nih.gov/sra). Five RNA-seq datasets were used for analysis: 147M paired-end reads of length 50 bps for human brain (Barbosa-Morais Algorithm 1. Computation of largest kmer for a de novo transcriptome assembler with KREATION 1: Input: Reads R, read length l, function f, k min , threshold t 2: i  1 3: k i  k min 4: d score  0 5: T previous  1 6: repeat 7: T ki  TranscriptomeAssemblyR; k i  8:), 45M paired-end reads of length 45 bps for T-cell (), 142M single-end reads of length 50 bps from hESCs (), 64M paired-end reads of length 76 bps from HeLa cell lines () and 60M, 101bp paired-end reads from IMR90 cell lines from ENCODE (http://genome.ucsc.edu/cgi-bin/hgFileUi? gwgEncodeCshlLongRnaSeq). The quality of transcriptome assembly is highly affected by the presence of sequencing errors (). Hence as a preprocessing step, all datasets were error corrected using SEECER version 0.2 () with default parameters, except for HeLa where we used ks 31 for SEECER. After each single kmer assembly we remove redundant transcripts in the same assembly by using CD-HITEST clustering (sequence identity 99%) () and only retaining the representative sequences of clusters.
Results
Common kmer selection strategies are suboptimalMulti-kmer de novo transcriptome assemblers build the DBG for several kmer values. Conceptually, the task is to find the best multikmer assembly given a set of possible values K  fk 1 ;. .. ; k n g and a set of reads R. There are two problems to this: (i) which metric should be used to define optimal performance? (ii) how to efficiently find b K K, such that b K achieves optimal performance for R, given that there areFor the first problem, one performance measure used often in the literature is the number of annotated 80%-hits in a sequence database. This is determined by aligning the transcripts to a reference sequence and comparing it with existing gene annotation, (see '). This metric does not consider the specificity of the assembled transcripts and does not penalize for the amount of misassemblies. Here, we suggest to optimize the sensitivity of the multik assembly using the number of 80%-hits and use a misassembly removal strategy for the final assembly. We define the number of 80%-hits Ensembl transcripts that are obtained by running the assembler for all values in K for a dataset R as optimal. With this notion, we can measure the performance of any multi-kmer assembly with b K & K in terms of % of optimal. For example, if the exhaustive assembly using K produces 2000 80%-hits, we set that as optimal. If another multi-k assembly produces 1500 80%-hits, then it reconstructed 75% of the optimal value. The second problem is rarely addressed in the literature, in particular the problem of selecting a subset b K given R. In practice, the following heuristics are common: (i) use the best single kmer assembly according to an evaluation criteria, e.g. the one with the most BlastX hits in a close species. Here we represent this strategy by an optimistic approach selecting the single kmer assembly that has the highest number of known reference transcripts assembled, termed Best-k., we show the performance of all three previous strategies using the Oases assembler () on four different human RNA-seq datasets that have different read lengths and sequencing depth (see 'Methods'). Compared to running the full set of kmers, which by definition is optimal, choosing a random set or picking the Best-k shows a loss in performance up to 30%. In particular, each setup outperforms the others on a different dataset, such that no one strategy can be recommended. KREATION achieves close to optimal performance ().
Clustering of consecutive kmer assemblies reveals assembly progressThe main focus of this work is to define a data-driven procedure that predicts an optimal stopping point for a de novo multi-kmer assembler. As we mentioned earlier, we want to find a subset b K that shows a similar number of 80%-hits compared to the full assembly. First, we investigated the contribution of each single-kmer assembly to the performance of the full assembly using Oases. In, we plot the number of correct transcripts that are assembled in their longest form in a particular single kmer assembly (x-axis). It can be seen that the assembly with the smallest kmer value contributes most of the correct transcripts and that a decreasing exponential trend can be observed, with higher kmer values being less important. From this we conclude that the problem of finding b K from all possible subsets X n i1 n i can be simplified. We suggest to consider a series of increasing kmer values k 1 ;. .. ; k n , where k 1 < k 2 ;. .. ; < k n. In this work we used the series of kmers k i  k i1  2. In(bottom) it is shown how the performance (% of optimal, left y-axis) changes when the multi-k assembly is constructed up to index i in the series, i.e. T i  T k1 [. .. [ T ki , by merging transcripts, (see 'Methods'). Similar to our observation inwe see that higher k values contribute little to the assembly, e.g. 99% of the optimal sensitivity is reached at k 39. In a de novo circumstance, how can we predict the index i such that the obtained sensitivity is close to optimal sensitivity? We observed that the number of transcripts going from i to i  1 always increases, i.e. jT i j > jT i1 j, illustrated for a dataset in Supplementary Table 1. However, we know fromthat for higher k values the number of correct transcripts decreases approximately exponentially. Correct transcripts, as in, need to be novel. These novel transcripts in T i1 are the representative sequences of clusters that either extend transcripts in T i (extended clusters) or form unique clusters, without any transcript from T ikmer selection for de novo transcriptome assembly(see '). For KREATION we use the CD-HIT-EST algorithm that preserves sequence to cluster memberships in its output and its clustering heuristic has an added advantage of being very fast in practice.In our de novo setup some of the novel clusters will represent misassemblies. These misassemblies generally arise from the unique clusters (Supplementary). Extended clusters constitute more 80%-hits than unique clusters (Supplementary). Therefore, we can approximate the number of correct transcripts for T i1 by counting extended clusters. In(top) we show how the logarithm of the number of extended clusters for the brain dataset behaves for different k values. As the number of extended clusters also contains misassemblies we observed the exponential trend, visible as a line in log space, only up to k  35. Afterwards, when fewer genuine transcripts are contributed by T i1 , this trend changes. Hence, once the curve starts to deviate significantly from a straight line, dropping towards small cluster numbers, it may be advisable to stop the assembly as we do not expect contributions to the overall assembly.
Stopping the assembly by assessment of model fitBut how to measure if the exponential fit is worse after adding another kmer assembly? We tested the following method. Suppose we run our assembly for values k  k 1 ; k 2 ;. .. ; k n. We first fit a linear model to the log counts of extended clusters for all indices until n  1, (see 'Methods'). Assuming that the predicted linear model would also explain the response variable of the current index n, we predict the log count of extended clusters for n. We then deduce the error between the actual value and the predicted value. The process is repeated for all values of n and after each iteration errors are summed up defining our deviation score (d score). Normally the error is close to zero for data points which follow a linear trend and hence the resulting d score is very small. The error becomes significantly larger at a point where the curve starts to deviate from the straight line. This results in a noticeable increase in d score. As seen in(top), the value of d score remains close to zero until k  37. Namely, until a kmer value where all the points are well approximated by a straight line. Beyond this kmer the d score increases significantly and goes above a pre-defined threshold (0.01 in our case). This point corresponds to a kmer that shows close to 99% of the optimal value (bottom, dotted line). Therefore, stopping at this point results in almost no loss of assembly sensitivity and a significant reduction in runtime (bottom, secondary axis). We tested this heuristics with other assemblers on the same dataset and found a similar behaviour (). Hence we used this heuristic to design the KREATION algorithm, see Algorithm 1.
Application to other datasetsIn addition to the brain dataset, we tested KREATION on four other data sets with different read length and coverage (see 'Methods'). In all cases the point where d score crosses the threshold value coincides with a kmer value close to the optimum (see SupplementaryS7). We list the complete numbers for all five datasets in. As the table shows, consistently for all datasets the stopping point only leads to a small decrease in the 100 and 80%-hits. Further the final number of transcripts is reduced without affecting the nucleotide sensitivity and specificity. We also show the number of kmer assemblies not computed and the time saved due to KREATION. In particular, for the longer read datasets (HeLa and IMR90) KREATION avoids a significant number of assemblies, saving up to days of computation on our computing cluster. Note that the clustering done after each kmer assembly, only takes in the order of a few minutes as CD-HIT-EST is parallelized and very fast ().
Effect of d_score thresholdThe threshold t for d score is an important parameter for KREATION. We tested our approach for various values of t  (0.001,2) on all datasets and assemblers. We found that selecting a threshold of 0.001 leads to at least a 50% reduction in runtime, and at the same time a loss up to at most 9% in comparison to the full assembly. A high threshold value results in achieving an almost 100% optimal assembly, but results in insignificant reduction of runtime (). For our analyses we chose a threshold value of 0.01, which seems to be a good tradeoff between runtime and quality of the final assembly, but other values may be preferred by the user.
Single-k clusters are enriched in misassembliesThe major drawback of a multi-kmer based assembly is the generation of a high number of misassemblies. We observed, and also various studies have shown, that misassemblies are generally shorter in length (see Supplementary) and hence a large percentage of them can be removed by applying a length cutoff (300 bp in our case) on the final transcripts (top). As clustering transcripts produced by different kmer assemblies is an integral part of KREATION, we wondered how misassemblies are distributed over the clusters. We observed that clusters which contained transcripts from only one kmer value consisted of a large number of misassemblies. We termed these clusters single-k clusters (see 'Methods'). Removing these clusters also reduces the number of misassembliesThe first row for each dataset analyses the transcripts obtained by running the assembly till the optimal kmer. The second row for each dataset represents the results obtained by running the assembly till a feasible kmer closest to the read length. KREATION used a d score threshold of 0.01 for all the cases. kmer selection for de novo transcriptome assemblysignificantly (top). We found that removing all transcripts which are either shorter than the length cutoff or which belong to single-k clusters reduces more misassemblies as compared to applying only one of the above mentioned filters (top). Further we wanted to check whether merging assemblies from multiple kmer values as done in KREATION is better than the single-kmer assembly with the highest sensitivity (k 1 in our case). In other words, we wanted to check whether we are generating more misassemblies than useful transcripts, when we merge assemblies from multiple kmer values. For this, we define 80%-hit improvement rate as the fold-change of 80%-hits from the assembly generated by the lowest kmer and misassembly rate as the ratio of observed to the expected number of misassemblies.(bottom) shows the comparison between these two metrics for all KREATION assemblies computed, separated by dataset. In an ideal situation, the 80%-hit improvement rate should be better than the misassembly rate and hence all the points in the graph should be above the diagonal. We show that for most of the datasets the corresponding points are either above the diagonal or close to the diagonal, except for the HeLa dataset assembled by TransABySS, which has a misassembly rate of 1.93. We conclude that the multi-kmer based assembly approach followed by appropriate filtering of misassemblies is better than the single kmer based assembly.
Discussion and conclusionWe have presented KREATION, an algorithm that is able to automatically stop a de novo multi-k transcriptome assembly at a kmer value close to the optimal sensitivity. We showed that clustering newly assembled transcripts with all assemblies made in previous rounds can be used to estimate how many transcripts have been improved due to the last round, by counting extended clusters. We empirically found that the number of extended clusters falls exponentially with increasing k, when we consider to run the multi-k assembler from smaller kmer values to larger ones, as is most reasonable for transcriptome assemblies. This motivated us to predict the kmer value at which the assembly should stop by selecting the kmer where deviation to the expected exponential trend deviates considerably, as measured with the designed the d_score. We have shown that thresholding the d_score works well for three popular de novo assemblers, and datasets with different coverages and read lengths. For longer read datasets KREATION may save days of computation.. Analysis of KREATION performance with different d_score thresholds. (top, higher is better) Assembler performance is measured as % of optimal (y-axis) for different d_score thresholds (x-axis). (bottom, lower is better) KREATION runtime is shown in comparison to the time taken by the Full assembly (y-axis). Each box plot shows the results for all three assemblers applied to the five data setsHowever, KREATION is a heuristic approach and there is no guarantee that the d_score threshold corresponds to a good stopping point or that there will be an optimum for the set of kmers tested, albeit both is true for the datasets and assemblers tested in this work. Still, we think that there is a theoretical connection that is worth exploring further. KREATION often selects different stopping kmer values for each assembler when applied to the same dataset. This points to a complex interplay between graph structure, transcriptome complexity, read coverage and assembler implementations. It may be the reason why simpler strategies for selecting kmers do not seem to generalize for datasets with different characteristics (cf.). One disadvantage of merging the assemblies of several k values is the increased number of misassemblies as compared to using one kmer. However, recent studies have shown that appropriate filters () or a proper statistical treatment with replicate data () allows to remove most misassemblies and therefore ease downstream analyses. Here we show that a large number of misassemblies stem from single-k clusters that can be removed easily. Together with a length cutoff on assembled transcripts this denotes a powerful approach to get rid of most of the misassemblies without removing genuine transcripts (, Supplementary). We argue that this makes multi-kmer assembly strategies more useful for the community, but we think that there is still room for improvement for removing misassemblies. In a recent work () a reference free transcriptome assembly evaluation approach was introduced. Based on a graphical model of the RNA-sequencing process, an assembly quality estimate can be computed by aligning reads to the assembled transcripts. We note that in principle their method may be used as an alternative function to decide when to stop. However, this approach would constitute a serious runtime cost as read alignment, SAM file writing and model building would take in the order of hours for one kmer iteration. Instead, we see their work complementary to our work. We have focused on the question where to stop the assembly, but there are other parameters that are worth tuning. For example, we are currently assuming the k 1 is given, which is partly due to the fact that it just needs to be chosen in such a way to avoid small kmers that produce misassemblies. As a conclusion, we show that an informed kmer selection approach for de novo transcriptome assembly shows an improvement over simpler methods suggested so far. We believe that KREATION with the misassembly filters will be useful for the community and implemented the mentioned ideas in a software that currently supports the de novo assemblers tested in this work (https://github.com/ SchulzLab/KREATION).
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
D.A.Durai and M.H.Schulz at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
