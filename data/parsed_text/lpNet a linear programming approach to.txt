With the widespread availability of high-throughput experimental technologies it has become possible to study hundreds to thousands of cellular factors simultaneously, such as coding or non-coding mRNA or protein concentrations. Still, extracting information about the underlying regulatory or signaling interactions from these data remains a difficult challenge. We present a flexible approach towards network inference based on linear programming. Our method reconstructs the interactions of factors from a combination of perturbation/non-perturbation and steady-state/time-series data. We show both on simulated and real data that our methods are able to reconstruct the underlying networks fast and efficiently, thus shedding new light on biological processes and, in particular, into disease's mechanisms of action. We have implemented the approach as an R package available through bioconductor.
IntroductionUsing network inference approaches it is possible to understand how different cellular components (e.g. genes, proteins, metabolites) interact with each other. Several methods for network inference exist, such as Boolean networks (), (Dynamic) Bayesian networks (BN) () and methods based on differential equations (). Boolean networks scale up well for larger networks and are easy to interpret. Yet, the biological signal is binarized which leads to a substantial loss of information. BN and differential equations allow for a more detailed modeling of the underlying processes, but they are often applicable only to small-scale problems as they usually scale-up poorly. One of the major recent approaches to model signaling networks based on perturbation data are the Nested Effects Models (NEMs) () which have been widely applied and extended in different ways. This approach assumes a small number of candidate pathway genes which are silenced (S-genes), and the effects of this silencing are measured on a large set of 'effects' genes (E-genes)thus using indirect observations of effects for network inference. Approaches that use direct observations from perturbed networks obtained either at a single or several time-points include). However, many of the published network inference approaches are computationally expensive and thus not suitable for large networks. Also, although many methods are publicly available, a substantial fraction of them are dependent on 3rd-party proprietary software (e.g. Matlab) and are not properly documented, thus making them very hard to use. Here, we present a flexible approach implemented as a bioconductor package, lpNet, freely available for any of the major operating systems. The method implemented in lpNet extends a previously developed method in () by adding support for time-series data. As a result, the method is now suited for any combination of perturbation/non-perturbation and steady-state/ time-series data, and not only for perturbation steady-state data, as in the previous version of 2013. Furthermore, the calculation of a node's activity, which directly influences the resulting network, was improved, leading to more accurate results. Finally, since the method is formulated as a linear programming approach, inferring networks becomes fast and efficient even for large-scale problems.
MethodsThe signaling network to be inferred is modeled by a graph G  V; W, were v i 2 V; i 2 f1; ng are nodes that can represent, e.g. genes or proteins, and w ij 2 W, w ij 2 R are directed edges from node v i to node v j. If w ij > 0 node v i activates node v j , if w ij < 0 node v i inhibits node v j , and if w ij  0 nodes v i and v j are not connected. For the inference, we define an observation matrix X 2 R  0 which can be 2-or 3-dimensional, with dimensions representing nodes v i , the perturbation experiments k 2 f1; Kg and optionally the time points t 2 f1; Tg in the third dimension. We have previously described the use of linear programming for network inference from steady state data (). lpNet now implements an extension that enables the use of time-series data and thus uses a 3D observation matrix. Perturbation experiments are encoded in an activation matrix B nK 2 f0; 1g, where b ik  0 means node v i in perturbation experiment k is silenced, otherwise it is not silenced. This matrix can also be used to encode experiments with different stimuli, by considering each stimulus to be a different perturbation experiment. We assume the signal to propagate through the network as an information flow, starting in the source nodes and ending in the sink nodes. The signal propagation is interrupted when either a silenced node or a node inhibited by its parent nodes is reached. Furthermore, we assume the signal to propagate from parent nodes to child nodes one step per time point. The activity of a node i is then given bywhere w 0 i 2 R is the baseline activity of node v i and x jkt1 2 R  0 is the observation value for node v j , in perturbation experiment k, at time point t  1. A node is said to be active if x ikt !d i , otherwise it is inactive. d i 2 R  is a user-defined threshold, and is key for the method's performance. Only active nodes at time point t  1 can influence other nodes at t. If a given node v j is considered as inactive at t  1 with x jkt1 < d i , or if it was silenced, b ik  0, then x jkt1 is set to 0 in Equation (1), i.e. node v j does not contribute to node v j 's activity. Given all the stated assumptions, the network G  V; W is inferred by solving a linear programming problem as described in the Supplementary Information, Section 1, using the simplex method, whose complexity has been shown to be polynomial in practice.
ResultsThe performance of the first version of lpNet, suitable only for perturbation steady-state data, has been assessed (). As for the latest version, with support for a combination of perturbation/non-perturbation and steady-state/time-series data, it has been used in the DREAM 8 competition, in the HPN-DREAM breast cancer network inference challenge, where it scored third for the in silico challenge (AUROC: 0.68) and 29th for the experimental challenge (AUROC: 0.57) without using prior information, among more than 60 competing groups. In the in silico challenge the goal was to infer the causal edges in a 20 node network given a dataset containing the 20 nodes observations across 10 time points and 4 perturbation experiments (one of these being the control). In the experimental challenge the goal was to infer 32 causal networks, one for each combination of cell line  stimulusthere were 4 cell lines and 8 different stimuli. Each of the 32 datasets contained $45 nodes observations across 7 time points and 4 inhibition experiments (one of these being the control). In the supplementary information, section 3, we briefly compare lpNet with DDEPN (), a method also implemented as a well-documented R package and suitable for the same type of data. Two conclusions from this comparison are worth emphasizing: i) lpNet is very robust against noise; ii) on the same platform, lpNet takes on average 15 min to infer a network with 10 nodes, 10 time points and 2 perturbations, while DDEPN takes, on average, 101 min (computations done on an Intel Xeon X5460 @ 3 GHz, 26MB L2 cache, 32GB RAM, 64 bit Linux OS). More detailed results are presented in the supplementary materials and in ().
Discussion and conclusionThe lpNet package supports now any combination of perturbation/ non-perturbation and steady-state/time-series data, and not only perturbation steady-state data as in the 2013 version. Moreover, by formulating network inference as a linear programming problem and using the simplex method to solve it, lpNet is computationally very efficient and runs, on average, 67 times faster than the DDEPN approach. Results are robust against noise, and due to the fast running time, cross-validation can be used to fit model parameters such as d.
Funding
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M.R.A.Matos et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
