Motivation: bio-samtools is a Ruby language interface to SAMtools, the highly popular library that provides utilities for manipulating high-throughput sequence alignments in the Sequence Alignment/Map format. Advances in Ruby, now allow us to improve the analysis capabilities and increase bio-samtools utility, allowing users to accomplish a large amount of analysis using a very small amount of code. bio-samtools can also be easily developed to include additional SAMtools methods and hence stay current with the latest SAMtools releases. Results: We have added new Ruby classes for the MPileup and Variant Call Format (VCF) data formats emitted by SAMtools and introduced more analysis methods for variant analysis, including alternative allele calculation and allele frequency calling for SNPs. Our new implementation of bio-samtools also ensures that all the functionality of the SAMtools library is now supported and that bio-samtools can be easily extended to include future changes in SAMtools. bio-samtools 2 also provides methods that allow the user to directly produce visualization of alignment data.
IntroductionMany large scale genomics studies rely heavily on re-sequencing experiments in which genomes of individuals or populations are to be compared. Typically these experiments begin with shotgun sequencing of DNA using high-throughput methods followed by alignment of the sequences to a reference genome assembly. Overdeveloped SAMtools features and can produce publication-quality visualizations of data with minimal effort by the coder. We previously described bio-samtools () a Ruby language binding to the SAMtools library and a biogem of the BioRuby framework (). Since its release, bio-samtools has been downloaded >25 000 times. SAMtools is in constant development and hence there is a need to accommodate any future functionality of SAMtools by facilitating extension of our software by other programmers.
ApproachThe original bio-samtools package was implemented around libbam.so (for Linux) and libbam.1.dylib (for Mac OS X), the core shared object library in the SAMtools package. bio-samtools used the Ruby Foreign Function Interface (https://rubygems.org/gems/ffi) package as a bridge between the two languages. We now use a straightforward but simple and flexible pipe interface that captures the standard output stream from SAMtools directly. This allows all functions to be executed and captured with ease by parsing and presenting data as it passes in from SAMtools standard output. A number of new Classes and methods have been added to bio-samtools 2 which allows users to carry out complex analysis with only a small amount of code. The major additions are described here.
Bio::DB::PileupSAMtools MPileup utility provides data in a reference-position-wise format. bio-samtools abstracts this in the Bio::DB::Pileup class and returns simple objects that provide easy access to further methods, such as calculating allele frequencies, calling a consensus and creating a VCF () object. The code below demonstrates how easily pileup data can be used to extract the consensus bases from a BAM file. bam  Bio::DB::Sam.new(:fasta > 'ref.fasta', :bam > 'my_bam.bam') bam.mpileup do jpileupj pileup.consensus end 2.2 Bio::DB::VCF The Bio::DB::VCF class represents variant information in an informative, concise and compact manner, allowing only variant positions to be maintained. Using the Bio::DB::VCF class, bio-samtools allows the analysis of VCF-formatted data, including the comparison of variants across any number of samples. It allows the user to easily carry out analysis of consensus calls, genotypes and allele frequencies, which can then be used for further downstream analyses. bio-samtools 2 also has a number of extra analysis methods not available in the SAMtools library. For example, with just a few lines of code a user could easily count the reference and nonreference bases at each position and then go on to calculate the allele frequencies of those bases. bio-samtools also allows users to calculate the consensus sequence for any site or identify the genotype for any indel or SNP. bio-samtools 2 also has the advantage of working within other Ruby code to complement bespoke analysis methods and can also be used in the development of web applications.
VisualizationWe have also added the functionality of creating publication-quality visualizations of genome read coverage plots for regions of sequence alignments (). This is achieved by taking a Bio::DB::Sam object (from the class representing the SAM/BAM file), creating a pileup object and extracting the resulting read coverage. This is then plotted into SVG which can be written to a file or loaded straight into a webpage.. Coverage plots demonstrating the formatting available to bio-samtools 2. The height of the plot represents coverage over a given region. The numbered scale above each plot represents the genome position. The width of each bar on the plot is set by the bin parameter when calling the plot_coverage method
different high-throughput aligners are now available (Wikipedia, 2014) (http://en.wikipedia.org/wiki/List_of_sequence_ alignment_software), including BWA (Li and Durbin, 2010), Bowtie (Langmead et al., 2009) and SOAP (Li et al., 2008). The standard storage format for this data is Sequence Alignment/Map (SAM) format (Li et al., 2009) which describes alignments in a read-wise fashion. Analysis of the alignments and downstream inference requires high-throughput interrogation of numerous alignment files; hence, programmatic interfaces allowing easy access to the data in these files are widely used. Manipulation of SAM (and the compressed, indexed variant, BAM) can be done in many high-level languages with a variety of packages, including SAMtools (Li et al., 2009), Picard (http://picard.sourceforge.net), GATK (McKenna et al., 2010), bio-samtools (Ramirez-Gonzalez et al., 2012) Bioperl (Stajich et al., 2002), Rsamtools (Morgan et al., 2013) and pysam (https://github.com/pysam-developers/pysam). Here, we describe bio-samtools 2, a new Ruby language SAMtools interface that provides new classes for describing genomic regions and genetic variants, allows the easy addition of newly V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 2565 Bioinformatics, 31(15), 2015, 25652567 doi: 10.1093/bioinformatics/btv178 Advance Access Publication Date: 29 March 2015 Applications Note at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Conclusion bio-samtools 2 is a useful and flexible Ruby library for programmatic access to SAMtools. It contains extra analysis and visualization methods not present in the SAMtools library, which allows the coding of complex analysis methods with a small amount of code. The flexibility of bio-samtools 2 also allows new SAMtools methods to be implemented easily and quickly. bio-samtools 2 can also be integrated into other Ruby software, including web applications.
G.J.Etherington et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
