The estimation of isoform abundances from RNA-Seq data requires a time-intensive step of mapping reads to either an assembled or previously annotated transcriptome, followed by an optimization procedure for deconvolution of multi-mapping reads. These procedures are essential for downstream analysis such as differential expression. In cases where it is desirable to adjust the underlying annotation, for example, on the discovery of novel isoforms or errors in existing annotations , current pipelines must be rerun from scratch. This makes it difficult to update abundance estimates after re-annotation, or to explore the effect of changes in the transcriptome on analyses. We present a novel efficient algorithm for updating abundance estimates from RNA-Seq experiments on re-annotation that does not require re-analysis of the entire dataset. Our approach is based on a fast partitioning algorithm for identifying transcripts whose abundances may depend on the added or deleted isoforms, and on a fast follow-up approach to re-estimating abundances for all transcripts. We demonstrate the effectiveness of our methods by showing how to synchronize RNA-Seq abundance estimates with the daily RefSeq incremental updates. Thus, we provide a practical approach to maintaining relevant databases of RNA-Seq derived abundance estimates even as annotations are being constantly revised. Availability and implementation: Our methods are implemented in software called ReXpress and are freely available, together with source code, at http://bio.
INTRODUCTIONTwo major bottlenecks in RNA-Seq analysis are the mapping of reads to transcripts, which is a prerequisite for quantification and differential analysis, and abundance estimation following mapping. The latter step is particularly complex when multimapping reads need to be resolved, which is necessary for estimating isoform-level abundances, or when genes have been duplicated (). Popular programs for multiread assignment, such as Cufflinks () and RSEM (), have large memory and time requirements [seeof (. Alternative approaches, such as eXpress (), which uses a streaming algorithm for assignment, are faster with a low-memory footprint but must still re-process all the data from scratch when the underlying annotation is adjusted. For large datasets, such as the 3.5 billion reads of (), a complete run of read mapping with Bowtie, followed by abundance estimation with eXpress, takes 11 days (with 44 cores used for the mapping). In cases where an annotation of transcripts in a genome may change after mapping, current analysis pipelines require re-mapping of all reads followed by a complete recomputation of abundances (). This has made it time-consuming and impractical to determine the effects of the addition of possibly novel transcripts on results or the impact of removal of transcripts that appear to be incorrect. Moreover, in cases of model organisms, it has resulted in the 'freezing' of analyses with respect to specific annotation sets, even though re-annotation efforts are resulting in continuous changes to 'reference' transcriptomes (). The problem we solve in this article is how to update quantification of transcript abundances in cases where annotations change, without remapping all reads to all transcripts and running abundance estimation procedures from scratch. This problem is non-trivial for two reasons:(1) Multi-mapping: Frequently reads map to multiple transcripts, and therefore the removal or addition of transcripts may change the posterior probabilities associated to read mappings. In particular, the addition of a single transcript may require re-quantification of many other related transcripts.(2) Abundance estimates from RNA-Seq are relative and not absolute: Because RNA-Seq abundance estimates are relative, a change in the abundance estimate of a single transcript affects all other transcripts.Given a change in the underlying transcripts, we show that abundance estimates can be updated by a procedure that only involves mapping reads to a small subset of the transcripts and re-computing assignment probabilities of multi-mapping reads for a similarly small set (). This is made possible by isolating a small relevant set of transcripts using a partitioning algorithm on a graph constructed from read alignments. When abundance estimation is subsequently performed using a fast online algorithm, the updating of estimates is particularly fast when the change to the underlying annotation is small. An implication of this result is that it is possible to easily update RNA-Seq abundance estimates for annotations that are continuously updated, as is the case with the nightly Reference Sequence (RefSeq) updates. RefSeq is a large database of sequences that includes widely used reference transcripts for *To whom correspondence should be addressed.  The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com. Overview of the approach: Reads are initially aligned to a set of known transcript sequences and these alignments are used to probabilistically assign multi-mapping reads and to estimate abundances of the transcripts. The result is a set of relative abundances, for example, in fragments per kilobase per million mapped (FPKM) units. When a new annotation is given, differences are identified. Reads are mapped to any added transcripts, and the ambiguity graph, where vertices correspond to transcripts and edges correspond to pairs of transcripts to which reads have mapped ambiguously, is updated (deleted transcripts in red and added transcripts in blue). The 'affected' transcripts whose abundance must be re-computed are obtained from a partitioning in the graph. Finally, the subset of affected transcripts have their abundances re-computed using the relevant reads, and abundances for the transcriptome are re-computed many organisms. RefSeq is updated nightly to reflect improvements in annotations, and although the changes are small, we show that they can affect abundance estimates in RNA-Seq analyses. Our results demonstrate that it is possible, with our algorithm, to analyze an RNA-Seq dataset by building up the annotation one transcript at a time. In particular, our tool ReXpress allows scientists to routinely update abundance estimates for RNA-Seq analyses to reflect best possible results at any time. Although ReXpress is designed to work with formats produced by the eXpress RNA-Seq quantification tool, the program is general and suitable for use with many mapping and abundance estimation methods.
APPROACH AND RESULTS
The ambiguity graphRNA-Seq quantification consists of estimating abundances for a fixed set of transcripts from sequenced reads, i.e. given a set of transcripts T , quantification is an estimate of abundances ^  f ^ t g t2T , where t ! 0 and P t2T t  1 from alignments of a set of fragments F to T. A widely used method for quantifying abundances is by statistical inference using the Expectation Maximization (EM) algorithm (). In these methods, the likelihood function for a generative model is maximized over the t values given F and T. To make the optimization tractable, a read aligner is used to remove unlikely alignments from consideration, thus providing, for each fragment f 2 F, a subset of likely transcripts the fragment is derived from. We denote the mapping by L F !T , where L F !T  f  is the set of transcripts that fragment f 2 F is aligned to. The approximation based on these alignments introduces sparsity to the inference, and allows the likelihood function to be factorized. This factorization can then be used to reduce the computation necessary to update abundance estimates after re-annotation.To algorithmically leverage the sparsity of alignments, we make use of an 'ambiguity graph'. In this graph, vertices represent transcripts, and two vertices are connected by an edge when there is at least one ambiguous fragment aligning to the two transcripts. The ambiguity graph is defined formally as follows: It is the undirected graph G  T , E, where E  S f2F ffu, vgju, v 2 L F !T  f  ^ u 6  vg. It is easy to show that each of the components of G define a factorization of the likelihood functions used in most RNA-Seq inference algorithms (). Specifically, the set of transcripts in each component can be considered independently when assigning ambiguous fragments and computing abundances. An example of an ambiguity graph obtained for a dataset of 60 million reads (see Methods) is shown in Supplementaryand summarized in. The graph is highly structured, and in what follows we show how this can be used to allow for rapid updates of abundance estimates upon re-annotation without extensive read mapping or numerical optimization to estimate abundances.
Incremental adjustment of abundance estimatesWe begin by describing the adjustments that are required to update an RNA-Seq analysis with respect to a re-annotation. An outline of the algorithm is provided in. We will assume that there already exists an initial annotation, alignments, abundances and ambiguity graph. In our software implementation, we assume that the files are in eXpress format (), but eXpress itself does not have to be used to generate the output. Given an updated FASTA file containing a re-annotation, the newly added and deleted transcripts are detected. In some cases, re-annotation can involve simply renaming existing transcripts, and this case is checked for and ignored if detected (after names/ identifiers are correctly updated). A modified transcript can always be described in terms of a transcript deletion followed) using $30 million mapped 75 bp paired-end reads. The largest component (shown in Supplementary) exhibits substantial structure and the existence of many small clusters within it is the reason for the effectiveness of the partitioning algorithm we describe to reduce the complexity of the update algorithm by an addition. For each difference between annotations, the nature of the edit is recorded. The set of reads are then aligned to the added transcripts, and the ambiguity graph is updated with new nodes representing these transcripts and edges induced by the new alignments. The transcripts and alignments associated with independent components of the ambiguity graph containing added and deleted transcripts are extracted. The abundances for all transcripts in these components are then re-quantified separately using the updated annotation. Finally, the new annotation, alignments, abundances (for all transcripts) and ambiguity graph are output to be used with the next re-annotation update. Below is a more formal description that explains in detail the steps. Proofs of correctness follow trivially from the factorization of the standard likelihood function used in RNA-Seq, and are omitted. We require two fields from the output of an RNA-Seq quantification program after it has been used to estimate abundances for a set of transcripts T : the estimates ^ T and the 'ambiguity graph' (defined in Section 2.1) of T , which we denote by G  T , E. We assume that T 0 consists of T with the addition of a set of transcripts A and the deletion of a set of transcripts D so that T 0  T [ AnD. Finally, we will need the stored alignments from F to T , which we denote by L F !T  ff ! ftjt 2 T and f aligns to tgg. To simplify the presentation, we explain separately the case of adding transcripts (T 0  T [ A) and the case of deletion (T 0  T n D). Additions and deletions can be handled in two stages or in a single, combined pass (details omitted). For simplicity, we restrict the exposition to the case of addition/deletion of a single transcript in the description below. Given a set of transcripts T , let t 0 be a transcript with t 0 = 2 T. The updating of estimates when t 0 is added to the annotation is performed as follows:(1) Align the reads in F to t 0 and denote the subset of reads of F that align to t 0 by F 0 F. Denote the alignments of(2) Extract the read alignments for the reads in F 0 from L F !T and denote as L F 0 !T  f f ! L F !T  f for all f 2 F 0 g. In addition, denote by S  S f2F 0 L F !T  f the set of transcripts in T that appear in L F 0 !T .(Deletion is performed via a similar procedure. Let t 0 be a transcript with t 0 2 T .(1) Let B be the component in G that contains t 0 .(Note that in the rare case when there is a change in the total number of aligned fragments after the addition or deletion of a target, an additional step is required to renormalize the relative abundances between components. This step is trivial and fast, and the details are omitted.
Improving performance by approximating the affected setThere is another issue that can hurt performance in practice: the affected component B can be large (and Supplementary). In typical RNA-Seq experiments, as much as one-fifth of all transcripts can lie in a single component of the ambiguity graph (). This component typically consists of large gene families and multiple isoform genes that share common sequence. To improve performance, it is therefore desirable to restrict the re-quantification to a smaller subset without sacrificing important information in the form of fragment alignments. We do this by partitioning a weighted generalization of the ambiguity graph, obtained by the addition of edge weights representing the number of ambiguous alignments between each pair of transcripts. For a given mapping L F !T and induced ambiguity graph G, we let the weight between two transcripts u, v be wfu, vg  P f2F 1fu, vg L F !T  f . Given these weights, we wish to partition around t 0 such that the total weight of edges crossing the partition cut is small compared with the weight of edges inside the block. Moreover, it is desirable that the block containing t 0 is small. Many sophisticated objective functions and algorithms exist for partitioning graphs (). A detailed exploration of the applications of these methods to our problem is outside the scope of this article. Instead, to demonstrate the feasibility of a partitioning scheme for improving the performance of our method with large components, we chose to use the greedy approach outlined below, which is motivated by the objective of removing edges that correspond to the 'least informative' alignments. First, we define the density of a block S, d(S), as the total weight of edges incident to a node in the block and a node outside of the block divided by the total weight of edges incident to the nodes in the block. Intuitively, this is the ratio of edges crossing the cut to all of the edges incident to nodes in the block. Formally,Our objective is to find, for a given transcript t 0 , a block S that contains t such that d S5 for a given threshold 05 1. We do so using the following greedy update.(1) Begin with S  ft 0 g.(2) Iteratively add node u  argmax u2T wft 0 , ug to S until dS5. It is easy to show that for any valid , this algorithm will terminate. As we show below in Section 2.4, the method is empirically both fast and accurate.
Accuracy of partitioning approximationTo validate the performance of our greedy partitioning algorithm, we randomly selected with replacement 250 transcripts from the largest partition (3898 transcripts) in the RefSeq annotation and simulated their addition at some earlier date. We used the set of reads produced for (), which consisted of RNA-Seq performed on C212, a mouse moblast cell line. Each selected transcript was removed from the FASTA, alignment file and ambiguity graph, and was then re-added using a single step of our algorithm. We show the results of this update using 20 different values of in Supplementary. There is a clear tradeoff between the accuracy of the approximation and the size of the resulting block selected by different values of. We note that for 50:1, the correlation is already reasonably close to the accuracy of the eXpress algorithm demonstrated in ().
Application to RefSeq incremental updateTo demonstrate the effectiveness of our approach, we applied it to the same large C2C12 RNA-Seq dataset as used above. These data were first analyzed in 2010, but since then the mouse RefSeq annotation has been updated numerous times. Specifically, as a proof-of-concept, we applied ReXpress (our implementation of the methods above) to 34 days of the RefSeq incremental update (RIU), which is a daily update of the RefSeq annotation database (see Methods,). Using 24 free cores, 644 min were required for the initial Bowtie2 alignment, 505 min for 20 repetitions of abundance estimation with eXpress and 11 min for building the ambiguity graph. Across the entire month of RefSeq updates, a size 3910 component was affected seven times, while components of size 15 or less were affected 37 times. Each subsequent update required, on average, 55 min to complete our re-annotation pipeline. This is compared with the $644  505  1149 min that would be required for alignment and abundance estimation from scratch with Bowtie2 and eXpress after each re-annotation. The abundance estimates for the final time point had a Spearman rank correlation of R 2  0:994 with those calculated from scratch (Supplementary). The small discrepancy is due to the fact that the online EM method in eXpress approximates the maximum likelihood solution, and therefore is not expected to be exact. Because some of the transcripts added and deleted over the time period affected the large components in the ambiguity graph, we also ran the analysis using the greedy partitioning scheme described above (  0:1). While the speed of the updates was greatly improved by the partitioning by reducing the size of the (approximate) affected components (), the results were nearly identical (Supplementary).
METHODS
DatasetsThe annotations used for mouse were based on RefSeq. The RefSeq database is updated incrementally every night at 3:30 EST. All updates over the 34-day period between November 9 and December 13, 2012 were used for this analysis. The RNA-Seq data used was based on (). We restricted ourselves to analysis of the 60 hour time point, for which 60 million reads were available.
Read mappingReads were mapped with Bowtie2 version 2.1.0 () using the parameters-k 1000, rdg 6,5, rfg 6,5, score-min L,-0.6,-0.4, no-discordant and no-mixed. With these options, 47% of the reads were mapped concordantly.
Abundance estimationAbundances were estimated with eXpress version 1.3.0 (), initially using no optional parameters and then the aux-param-file for re-estimation using previously computed auxiliary parameters after editing of the annotation. A forgetting factor of 0.85 (the default) was used for the full dataset and 0.75 used for the smaller update datasets.
SoftwareThe methods have been implemented in a software program called ReXpress. ReXpress is a Python script that takes as input an annotation and its update, reads, their alignments to the initial annotation, abundance estimates and the ambiguity graph. It outputs updated versions of all of the input (for exact files input and output). ReXpress makes heavy use of pySAM (pySAM, 2012;) and is based on Bowtie2 and eXpress for quantification (), although many alignment and quantification tools can be substituted.
CONCLUSIONDespite the difficulties in storing, processing and distribution of high-throughput sequence data (), repositories such as the Gene Expression Omnibus have led to an explosion in publicly available genome-wide expression data. However, numerous technical challenges that arise in re-using data have limited the utility of publicly archived RNA-Seq reads (). Our results show that it is possible to efficiently update RNASeq abundance estimates on re-annotation, thus removing a major obstacle to re-using publicly available data. This should prove to be particularly useful in newly sequenced organisms whose annotations are not stable and undergo periodic revision, and also in human cancer transcriptomics where structural alterations can be tumor specific (). We also believe that ReXpress will be particularly useful for sequencing centers providing analysis services. Instead of producing one-time output, it should now be possible to refresh analyses as annotations improve, without expensive hardware or compute time needed as user bases and datasets grow.Other applications of our work include a randomized approach to optimization of transcriptome assembly in conjunction with abundance estimation (), and the development of an RNA-Seq quantification database for publicly available datasets that is automatically updated as annotations improve. Moreover, our work on component identification in and partitioning of the ambiguity graph can be used to develop more efficient batch methods for abundance estimation. A recurring issue in the commonly used batch EM solutions () is the necessity of iterating over a large number of reads, which has a memory bottleneck as shown in ().attempts to avoid the bottleneck by treating all genomic loci as independent blocks and using a heuristic 'rescue method' to partially correct for the approximation. A better solution for the memory bottleneck in the batch method is to iterate over approximately independent partitions of the ambiguity graph whose associated reads can be fit into memory. Because most components are often small, only the largest will need to be partitioned as in our method above. The blocks can then be processed in parallel only a single machine or distributed over a cluster. Finally, in conjunction with the streaming algorithm for quantification in (), the present method(b)provides an online algorithm in both the reads and the targets in any setting where probabilistic assignment of multi-mapping reads is a bottleneck in analysis of high-throughput sequencing data.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
A.Roberts et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Updating RNA-Seq analyses after re-annotation at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
