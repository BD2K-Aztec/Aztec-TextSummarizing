Intervor is a software computing a parameter-free representation of macro–molecular interfaces, based on the α-complex of the atoms. Given two interacting partners, possibly with water molecules squeezed in-between them, Intervor computes an interface model which has the following characteristics: (i) it identifies the atoms of the partners which are in direct contact and those whose interaction is water mediated, (ii) it defines a geometric complex separating the partners, the Voronoi interface, whose geometric and topological descriptions are straightforward (surface area, number of patches, curvature), (iii) it allows the definition of the depth of atoms at the interface, thus going beyond the traditional dissection of an interface into a core and a rim. These features can be used to investigate correlations between structural parameters and key properties such as the conservation of residues, their polarity, the water dynamics at the interface, mutagenesis data, etc. Availability: Intervor can be run from the web site
INTRODUCTIONProteinprotein recognition plays a key role in the formation of complexes which account for biological functions (). The investigation of interfaces of macromolecular complexes is therefore central to improve our understanding of the stability and specificity of macromolecular interactions. In conducting such investigations, one wishes to (i) improve the description of experimentally resolved complexes and (ii) improve scoring functions used to discriminate native structures among putative ones. The goal of this note is to present an interface model which has been used to refine most of the parameters involved so far in interface studies (), using a unique parameter-free geometric construction.
THE VORONOI INTERFACEIn the following, we consider two partners A and B forming a complex. By W , we refer to interfacial water molecules, if any. Atoms of type A/B/W are denoted a i /b i /w i , respectively.
Traditional interface models:Two interface models are traditionally used: the geometric footprint based model, which consists in considering all pairs of atoms (one on each partner) within * To whom correspondence should be addressed. some distance threshold; the solvent accessible model, which selects atoms losing solvent accessibility upon complex formation. While the former tends to overestimate the interface size (), the opposite holds for the latter (). This motivates our Voronoi interface model.Shelling the Voronoi interface: Think of a room whose floor is tiled, the room being delimited by walls. Assign the integer one to all tiles in contact with a wall. Having removed these tagged tiles, move the walls toward the tiles which were in contact with them, and tag these with the integer two. Iterating the process until completion results in a discrete numbering measuring the minimum distance from a tile to the boundary of the room. This process is carried out for the tiles of the ABW interface, starting from its boundary, the resulting number being called the Voronoi Shelling Order or VSO (). Since an interface atom contributes at least one tile, the VSO of this atom is defined as the minimum of the values found on the tiles contributed by this atom.
The
Connexions to classical interface parameters:We established that our model identifies a superset of interface atoms losing solvent accessibility (), which actually draws the attention to interactions between main chain atoms upon association (). Interface tiles are naturally gathered into patches, which have been shown () to be coherent with those obtained with classical clustering algorithms (Chakrabartiand). Quantifying the planarity of interfaces and patches is important, e.g. to estimate (de-)solvation energies and also to identify putative-binding regions for docking. While previous studies have used strategies based on plane fitting (Jones and), the Voronoi interface comes with a notion of discrete (mean) curvature (), which allows to assess the curvature properties at any scale (from two tiles to the whole interface). Finally, the VSO provides a discrete interface depth parameterization that refines the dissection into a core and a rim (). In (), this parameterization allowed us to sharpen the investigation of correlations among (i) the interface geometry, (ii) the location of polar residues (), (iii) the location of conserved residues () and (iv) the dynamics of interfacial water (). Note also that the pieces of information provided by Intervor could be integrated within a framework such as the SCOWLP database ().
USING IntervorAvailability: Intervor is made available from http://cgal. inria.fr/abs/Intervor/. This web site allows one (i) to run calculations, and (ii) to retrieve the binary file. In presenting the software, we briefly discuss the main options, and refer the user either to the web site or the help provided from the command line with the help option. See alsoto get familiar with the structural parameters computed.
Atomic and coarse models:Intervor is written in C++, and our code handles balls, be they atoms or pseudo-atoms. Because of the diversity of radii sets used for pseudo-atoms, we focus in the sequel on the atomic version.
Specifyingthe system: First, one needs to select which atoms define the two partners A and B. The standard way consists of selecting chains within a PDB file. Second, one needs to sort out the fate of water molecules if any: one can keep them all, skip them all or filter them on their temperature factor. Once the water molecules have been filtered, they are incorporated into the Voronoi diagram, and the interface water molecules are identified. See.Visualization: Plug-ins are made available to run a calculation on a structure and to load the result within VMD or Pymol. Visualization facilities target atoms and the Voronoi interface. For the former, atoms of each partner and water molecules can be visualized independently. Each set of atoms of type A or B or W is presented in two guises, namely with Van der Waals or expanded radii. Interfaces AB and AW BW can be visualized independently.
Running
The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
