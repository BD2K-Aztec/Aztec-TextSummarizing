Motivation: Text-mining mutation information from the literature becomes a critical part of the bioinformatics approach for the analysis and interpretation of sequence variations in complex diseases in the post-genomic era. It has also been used for assisting the creation of disease-related mutation databases. Most of existing approaches are rule-based and focus on limited types of sequence variations, such as protein point mutations. Thus, extending their extraction scope requires significant manual efforts in examining new instances and developing corresponding rules. As such, new automatic approaches are greatly needed for extracting different kinds of mutations with high accuracy. Results: Here, we report tmVar, a text-mining approach based on conditional random field (CRF) for extracting a wide range of sequence variants described at protein, DNA and RNA levels according to a standard nomenclature developed by the Human Genome Variation Society. By doing so, we cover several important types of mutations that were not considered in past studies. Using a novel CRF label model and feature set, our method achieves higher performance than a state-of-the-art method on both our corpus (91.4 versus 78.1% in F-measure) and their own gold standard (93.9 versus 89.4% in F-measure). These results suggest that tmVar is a high-performance method for mutation extraction from biomedical literature. Availability: tmVar software and its corpus of 500 manually curated abstracts are available for download at http://www.ncbi.nlm.nih.gov/ CBBresearch/Lu/pub/tmVar.
INTRODUCTIONIn the past 10 years, the focus of biological research has shifted from individual genes and proteins toward the study of entire biological systems. One of the most important research issues is gene/protein and disease relationship analysis. Sequence variation plays the key role between gene and disease. Therefore, identifying sequence variation is one of the major approaches for characterizing genedisease relationships (), with many study results subsequently reported in scientific publications. As such, textmining mutation-related information from the literature has become an increasingly important task in many downstream bioinformatics applications, such as the curation of mutationrelated biological databases (), the systematic study of biological effects of protein mutations () and the interpretation of individual genomes toward personalized medicine in pharmacogenomics research (). Despite some reported success in identifying specific mutation types or identifiers, such as dbSNP RS numbers (), mutation identification from free text in general remains a challenge because most mutations are not described in accordance with standard nomenclature (525% in our corpus) and only few are mentioned with standard database identifiers, such as dbSNP RS numbers (510% in our corpus). To the opposite, it is common to see the same mutation described in many different non-standard ways in the literature, which makes it similar to the named entity recognition task in biomedicine (). In response, recently a number of automatic systems have been developed for extracting mutation mentions from the biomedical literature () and some investigated further with respect to mutations' associations with genes (), diseases () and other related information (). Despite different scopes, with regard to methods for mutation detection, most systems rely on manually derived regular expressions. For instance, for detecting protein point mutations (e.g. A42G) from text,developed MutationFinder, which contains 4700 regular expression patterns and achieves state-of-theart performance of 90% in F-measure. Compared with the overwhelmingly used rule-based systems, VTag () stands out with a machine-learning approach and reports an F-measure of 0.82 on their evaluation data. We refer readers tofor a summary of previous implementations for mutation extraction. Following VTag and other previous studies on biomedical named entities (Dog an and Lu, 2012b;), we formulated the problem of named entity recognition as a sequence-labeling problem. Therefore, a conditional random field (CRF) model () was naturally chosen as our learning algorithm. However, as detailed in our method description, we developed a new CRF model with 11 labels *To whom correspondence should be addressed. (as opposed to the traditional BIO model), as well as a set of novel features in this work. As shown in Section 4, both designs helped improve extraction performance and made our method compare favorably with the state of the art. In addition, our work is also unique in extracting mutations of many types that are not considered by previous methods. Existing methods, such as MutationFinder either exclusively aim for extracting point mutations in proteins or are limited to a few mutation types, such as substitution and deletion in both proteins and genes. To our best knowledge, this work is the first attempt to identify various mutation types according to a standard nomenclature endorsed by the Human Genomic Variation Society (HGVS) for the description of sequence variants (mutations). Finally, similar to MutationFinder, along with a public tool for mutation extraction, we also contribute to the text-mining community a large corpus (500 PubMed abstracts) of manually annotated raw and normalized mutation mentions. A raw mutation extraction is normalized when individual mutation components are identified and standardized when applicable. For instance, 'Arg987Ter' (PMID: 22188495) is normalized as 'pjRj987jX' to denote the replacement of an arginine residue at position 573 by termination codon, where a single letter 'p' is added to indicate the mutation type, and the standard one-letter codes are used (with their respective positions in the normalized notation) to represent the wild-type and mutant residue. As noted earlier in the text, our corpus covers many kinds of mutations not previously considered, such as 'p.Pro246HisfsX13' (PMID: 21738389) and 'IVS31G/A' (PMID: 15111599).
METHODSAs shown in, our method first performs tokenization on the input text as pre-processing. Next, our method extracts mutation mentions from text using a CRF-based approach, followed by some post-processing steps. As illustrated in the figure, instead of extracting a mutation mention such as c.2708_2711delTTAG as a whole, our CRF module identifies each mutation component (e.g. 'del' as the mutation type) individually. Finally, we have implemented a post-processing module to handle some rare mutation formulas and nature language mentions that are not curated in our own corpus. We describe details of each step later in the text.
Pre-processing: tokenizationA tokenizer divides text input into a sequence of tokens, which generally correspond to 'words'. However, to capture individual components within a mutation mention, we performed tokenization on a finer level than traditional methods () that separate input text by space or punctuation. Specifically, special characters (e.g. '-', '*', ''), numbers, lowercase letters and uppercase letters are divided as separate tokens. For instance, instead of regarding the mention 'c.2708_2711delTTAG' inas one token, we split it into seven pieces as shown in the top row of.
Mutation identification: CRF moduleAs aforementioned, we regarded the mutation identification problem as a sequence-labeling task. In particular, each mutation component was considered as an individual label () such that every mutation mention becomes a sequence of labels. Accordingly, we adapted a probability-based sequence detection CRF model (), which defines the conditional probability distribution PYjX of label sequence Y given observation sequence X. PYjX  expFX, Y P Y 0 expFX, Y 0  1 where y 1 ,. .. , y n is a label sequence from Y and x 1 ,. .. , x n is a token sequence from X. F X, Y   P n j1 P w i1 ! i f i y j , y j1 , X   is a global feature vector for label sequence Y and observation sequence X and ! 1 ,. .. , ! w is a feature weight vector. CRF is a log-linear model based on a set of the feature functions f i y j , y j1 , X   . This function determines the pair of state and observation tokens to a binary value and associates with the weight ! i. The weight presents the importance of the tag and can be obtained from the training data by a limited-memory BroydenFletcherGoldfarbShanno (L-BFGS) () method. This model can combine the effects of many meaningful features. We then followedto design the observation function D X, i, j  and feature function: D X, i, j   1 if the jth token in X match to feature i 0 o t h e r w i s e
& 2The observation function returns true, if the token in j position matches the criteria of feature i and vice versa. For example, if the token at x j is 'glycine', then the observation function for the Protein symbols feature would return true. Consider the following feature function:The f i y j , y j1 , X   would return true if the two labels of previous y j1 and current y j positions belong to one of our designed labels. The CRF model is determined by the features f i y j , y j1 , X   and their corresponding weight ! i .In this work, the y 1 ,. .. , y n indicate the label for the corresponding tokens. Unlike the traditional BIO labeling models, which label each token as being the beginning of (B), the inside of (I) or entirely outside (O) of a span of interest, we designed 10 different labels () for describing mutation elements (i.e. tokens within the mutation mentions) based on the HGVS nomenclature, and one additional label 'O' for all tokens outside a mention (seefor an example). In this work, we used the CRF (http://crfpp.googlecode.com/svn/trun-k/doc/index. html#download) for the actual implementation.
Features for CRFWe engineered six different types of features for this problem: (1) Dictionary features. We followed the HGVS mutation nomenclature and developed 11 (7 for genomic and 4 for protein mutations) regular expressions patterns as shown in. When there is a match, each token in the corresponding matched text will be assigned to one of the three values ('B/I/E') for that feature (B for the beginning token; E for the last token and I for any other tokens in between B and E). Any token that is not matched against these patterns will have the value of 'O' for this feature.(2) General linguistic features. Sometimes, the mutation mentions may include brief nature language, such as 'G4A at nucleotide position 2141'. To capture such mutations, we included the original tokens (e.g. nucleotide), as well as stemmed tokens (e.g. nucleotide), as features using the Porter's stemmer.(3) Character features. We noticed that many mutation mentions contain numbers and special characters (e.g. the greater sign ' 4' is often used to represent amino acid substitution). Therefore, for each token, we calculated several statistics as its features, including its number of digitals, number of uppercase and lower letters, number of all characters and presence or absence of mutation-specific characters (;,.-4   _ /?).(4) Semantic features. We created several semantic classes for describing mutation-specific characteristics. All the following features are binary: 1 when a corresponding word (e.g. del) is present; 0 otherwise. Reference sequence type: c (for coding DNA sequence), g (for genomic sequence), r (for RNA sequence), m (for mitochondrial sequence), p (for protein sequence) Exon/intron: IVS, Intron, Ex, ExonMutation type: del, ins, dup, tri, delins, indelFrame shift mutation: fs, fsX, fsx DNA/RNA nucleotide: A, T, C, G, a, c, g, uProtein amino acid: e.g. glutamine, glu, E Mutation-type indicating word: deletion(s), insertion(s), repeat(s)Mutation unit: amino acid, acid(s), codon, position(s), bp, nucleotide(s), residue(s)Word preceding mutation mention: intron, exon, promoter, 5 0-UTR, 3 0-UTR(5) Case pattern features. A pattern is constructed to represent case shifting in the token, and this pattern is included as an additional feature. As such, each character in the token is represented in a simplified form. Any upper case alphabetic character is replaced by 'A' and any lower case one is replaced by 'a'. Likewise any number (09) is replaced by '0'. Thus, the token 'TTAG' generates the case pattern feature 'AAAA', and the token '2711' generates the pattern feature '0000'. Moreover, we also merged consecutive letters and numbers and generated additional single letter 'a' and number '0' features.(6) Contextual features. We observed that the tokens in the mutation mention are highly correlated with each other. Take the letter 'G' for example; only six possible suffixes ('lycine', 'lutamic', 'lutamine', 'ln', 'ly' and 'lu') can be associated with it to be an) c.A436C Genomic ([0-9]) A436C Genomic ((deljinsjdupjtrijquajconjdelinsjindel)*) 912delTA Protein (\.
Post-processing: regular expression rulesDespite our best efforts, the CRF model may still miss a few mentions. To minimize the number of false negatives within an article, we took the mentions extracted by the CRF module and translated them into regular expression patterns for finding additional mentions of similar kind in the same article. Two rules were applied to make the translated patterns more generalizable:(i) all numerical digitals become 'substitution at position', we built more robust and general patterns. As a result, only a few regular expression patterns (510) were needed. The inclusion of such patterns also complements our CRF-based approach in extracting those long natural-language mutation mentions in the article. Based on examination of our method development data, we also developed several additional rules for matching irregular and rare mention formats such as 'glycine-594-valine' and 'dup33bp'. In addition, our postprocessing step also helps adjust text spans of mutation mentions, such as adding a missing closing parenthesis p.(Asp569Valfs*93 ! p.(Asp569Valfs*93) or separating two consecutive mutations by semicolon rs1573496;C4G' ! 'rs1573496' and 'C4G'.
Corpus constructionAs a result of past research on this topic(), several mutation corpora are publicly available, but they are either limited in size and/ or scope (protein point mutation) or lack mention-level annotations. Hence, we decided to develop our own corpus in this work. We used PubMed to obtain a corpus of MEDLINE abstracts that contained a large number of mutation mentions. To construct a corpus containing numerous mentions of the types of mutations we were interested in, we included many facets in our query, which is composed of both MeSH (Medical Subject Heading) terms and other search field terms. To ensure we returned abstracts containing mentions of clinically relevant mutations, the MeSH 'Diseases Category' was an essential component. We chose the MeSH terms 'Mutation' and 'Polymorphism, Genetic' to obtain abstracts that had been indexed as pertaining to genomic variation. The 'Title/Abstract' field was searched for terms identified to retrieve information pertaining to sequence type, mutation type and mutation location (see query later in the text). This strategy was chosen after reviewing example abstracts containing desired mutation mentions and attempting to retrieve abstracts with similar characteristics. Finally, we included non-genetic facets that accounted for the other preferences we had for our potential corpus. These aspects included needing abstracts in English and specifically about humans. We also wanted to ensure that only results containing abstracts were retrieved, and that we did not retrieve review articles because we preferred articles about novel mutations, as mutations are likely to be mentioned in formulaic fashion when they are first described. The PubMed query is shown later in the text: 'Diseases Category'AND (mutationOR polymorphism, genetic) AND (DNAOR nucleotide) AND (deletionOR substitutionOR insertionOR duplicationOR indelOR delinOR conversionOR translocationOR inversion) AND), a Web-based annotation tool (see a tool screenshot in). Our corpus was developed in stages by human annotators who have domain expertise as well as experience in NLP corpus development. In the first phase, three human annotators annotated 50 abstracts individually. They then compared their results and only obtained inter-annotator agreement of 46%. Most of the annotation discrepancies were found to be because of boundary issues (text spans of mutation mentions are overlapping but not identical) and varying conceptions of how to annotate nature language mentions. After discussion, a set of annotation guidelines was drafted (available with tmVar software and corpus). In the second phase, two of the annotators finished another set of 50 abstracts, reaching 88% agreement this time. In the final round, one annotator continued and finished the remaining 400 abstracts.
Baseline approach and additional gold standard for evaluationAs shown in the Section 3 later in the text, we compared our method with MutationFinder. As pointed out by, MutationFinder is 'very competitive for recall and precision when compared to other strategies', and over the years it has been widely adopted by many others for extracting protein point mutation (). In addition, along with its public software, MutationFinder has a large corpus where both raw mentions and normalized annotations are available, which allowed us to perform cross-comparisons of both methods on two different goldstandard datasets.
RESULTS
Gold-standard evaluation dataAs mentioned, our mutation corpus contains 500 articles. As shown in, one mutation type (substitution) alone accounts for $70% of total annotations. Hence, we further divided the annotations in this group into two subgroups (i.e. amino acid substitution versus nucleic acid substitution). Despite the factthat substitution plays a dominant role, there are a few other types of sequence variations seen in our corpus, including deletion, insertion and others. To use it as the gold standard for the method development and evaluation purposes, we randomly divided the whole set into two subsets. Detailed statistics about our corpus are shown in. Additionally, we also used the MutationFinder corpus in benchmarking. Those statistics are also shown in the table later in the text.
System performanceFollowing, we computed precision, recall and F-measure on all mentions (including duplicates), as well as on normalized mentions, which emphasizes an evaluating system's ability of extracting different mutations. In all cases, our method was compared with MutationFinder. Tables 5 and 6 show results on both our and MutationFinder corpus, respectively. Because MutationFinder was designed exclusively for detecting protein point mutation, we report its performance on all mutations, as well as just protein point mutations, when using our test corpus. As such, there are two rows of results infor MutationFinder. As can been seen in Tables 5 and 6, our method tmVar achieved consistently higher F-measures than MutationFinder (P50.05; two-sided t-test) on two independent datasets. On the other hand, when benchmarked on our corpus, MutationFinder's results () dropped significantly from the performance on its own corpus (), especially in recall, even though we limited our evaluation to its extraction scope (protein point mutation). Our analysis shows that slight drop in precision was mainly because its patterns incorrectly identified DNA substitutions that are protein substitution-like (e.g. C35322T in PMID: 21054465) in our corpus. In terms of recall, most missed mentions are due to the lack of its patterns to recognize nonsense point mutations (e.g. V561X in PMID: 15749661) and point mutations preceded with a sequence type (e.g. p.A150P in 15880727). Finally, we find our method tmVar is as fast as MutationFinder in extracting mutation mentions from text. When tested on a typical modern desktop computer with Core 2 Duo 3.16 GHz CPU and 4 GB random access memory, the required time for processing 5000 PubMed abstracts is comparable: 21.75 (tmVar) versus 24.17 min (MutationFinder).
DISCUSSION
Evaluation of post-processing stepAs stated earlier, for optimal performance, the results of CRF were further supplemented by a set of manually derived rules for handling issues, such as mention boundaries, rare form mentions and so forth. As shown in table later in the text, when the post-processing module was removed altogether, modest drop in overall performance was found because of the loss in recall. As can be seen in, experimental results using all mentions versus normalized mentions yields similar findings. Hence,
Performance comparison with different CRF labeling modelsAs aforementioned, unlike previous rule-based approaches (), we developed a CRF-based method for extracting different elements of a mutation. Furthermore, different from the common labeling models, such as B(beginning), I(inside), O(outside) or B(beginning), I(inside), E(end), O(outside) (), for named entity recognition, our approach used a finer-grained design including 11 different labels. As shown in, such a design not only allowed us to recognize individual mutation components, but also led to higher accuracy in extracted results. Note that results indo not involve the use of post-processing patterns (i.e. we show results directly derived from the CRF module).
Evaluation of different featuresTo examine the contribution of individual feature types, we performed a feature ablation study where different types of features were removed from the entire set of features one at a time. As shown in, the largest drop in performance was due to the removal of general linguistic features, followed by character and semantic features. On the other hand, the removal of case pattern or contextual features had little effect on final performance. Same as results in, no post-processing patterns were used in these experiments.
Error analysisDespite our best efforts, there are still errors in our mutation extraction results. We examined all the extraction errors from the test set and classified them into several major categories. As shown in, majority of our errors were due to boundary issues (shown in red), as we require exact string offset match in our evaluation. Further analysis shows that in many cases, our method only extracts partial mutation information, such as 'A4G' in 'A4G polymorphism at position 670'. This kind of errors affect both precision and recall. The second largest error category (shown in green) affects recall only, as our method simply missed true positive mutations like 'p.S522fs 525stop'. Our method was also confused by some genotype descriptions (shown in blue) that have similar appearance to mutations by incorrectly predicting some genotypes (e.g. IVS9  459 GA  GG in PMID: 19880293) as mutations (false positive errors). Meanwhile, our specific genotype-filtering rule removes all mentions with identical wide type and mutant information during the post-processing, resulting in the loss of silent mutations (false negative errors). These three classes of errors accounted for 480% of the errors made by our method. Other smaller error types (shown in gray) include identifying mentions that look like mutations (e.g. 'Gly-X-Y') or the ones that are not included in the gold standard (e.g. we excluded natural language mutations).
CONCLUSIONIn summary, we introduced a CRF-based machine-learning method for mutation extraction from text with highThree labels (B, I, O) 85.81 80.82 83.24 Four labels (B, I, E, O) 86.18 81.59 83.82 Eleven labels (A, T, P, W, M, F, S, D, R, I, O) 92.01 83.72 87.67 performance. Our method complements and extends existing methods in extracting a wide range of different types of sequence variants in scientific publications. There are several future directions for extending this work. First, tmVar is shown to be accurate on PubMed abstracts in this study. Although tmVar is also applicable to full text, future study is warranted to determine its actual performance on different text genres. Second, despite the fact this work in itself can be used and integrated by other research, just like any other standalone mutation extraction tools (e.g. MutationFinder), it is useful to extract and associate contextual information (e.g. gene/protein sequence) to the extracted mutations. Third, given our high extraction performance, we are interested in exploring direct applications of this work in the framework of computer-assisted biocuration (). Indeed, we have started discussing potential opportunities of contributing our computer-generated results to dbSNP (L.Phan, personal communication). Finally, together with our ability to recognize proteins and diseases (Dog an and Lu, 2012a; 2012b;), we would like to investigate automatic methods for characterizing de facto relationships between sequence variations in complex diseases buried in the biomedical literature.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
C.-H.Wei et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
tmVar at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
