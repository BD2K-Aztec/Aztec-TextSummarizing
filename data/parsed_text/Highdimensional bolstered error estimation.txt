Motivation: In small-sample settings, bolstered error estimation has been shown to perform better than cross-validation and competitively with bootstrap with regard to various criteria. The key issue for bolstering performance is the variance setting for the bolstering kernel. Heretofore, this variance has been determined in a non-parametric manner from the data. Although bolstering based on this variance setting works well for small feature sets, results can deteriorate for high-dimensional feature spaces. Results: This article computes an optimal kernel variance depending on the classification rule, sample size, model and feature space, both the original number and the number remaining after feature selection. A key point is that the optimal variance is robust relative to the model. This allows us to develop a method for selecting a suitable variance to use in real-world applications where the model is not known, but the other factors in determining the optimal kernel are known. Availability: Companion website at
INTRODUCTIONThroughout most of the history of pattern recognition, the number of features was much smaller than the numbers currently being generated in high-throughput biology. Less than 15 years ago, in two studies on feature selection most cases considered involved <30 features and the maximum number considered was 65 (). The advent of high-throughput technologies has radically altered the landscape. In conjunction with large numbers of features, bioinformatics is confronted by small sample sizes, often <100, which forces one to train and test on the same data, where bias, variance (Braga) and lack of correlation with the true error () can severely degrade error estimation. Performance can degrade even further in the presence of feature selection (). Recent articles have pointed out the difficulty in establishing performance advantages for proposed classification rules (). Two statistically grounded sources of overoptimism have been highlighted: (i) applying a classification rule to numerous datasets and then reporting only the results on the dataset for which the designed classifier possesses the lowest estimated error * To whom correspondence should be addressed.(); and (ii) applying multiple classification rules to a dataset and comparing the classification rules according to the estimated errors of the designed classifiers (). In both cases, optimism is a result of inaccurate error estimation. A good error estimator ideally would have small bias and small variance. This is a difficult trade-off in small-sample settings. In small-sample cases, resubstitution generally has small variance but tends to be quite optimistically biased. Cross-validation has small bias, but tends to display high variance. Bolstered error estimation (Braga) attempts to achieve a compromise to this bias-variance dilemma in small-sample settings. It is based on the idea of modifying ('bolstering') the empirical distribution of the data by placing kernels at each data point and then estimating classifier error by the error on this bolstered empirical distribution in such a way that it reduces bias, while at the same time reducing variance. Bolstered error estimation has shown good performance when compared with popular error estimators in small-sample settings, in particular, for feature-set ranking and when used internally within a feature-selection algorithm () and for ranking feature sets (). Its good performance, including the latter applications, has been demonstrated in the context a small number of features, including feature selection via sequential forward selection (SFS), where it is applied to small potential feature sets in the SFS algorithm. A critical aspect of the method is selecting the right amount of bolstering, which is given by the variance of the bolstering kernels. The original bolstering paper (Braga) proposed a non-parametric estimator for the kernel variance, which was found empirically to perform well in low-dimensional spaces; however, estimation was found to degrade in high dimensions, so that a correction factor can be required (). In fact, it was demonstrated in a preliminary study that a correction factor can also be beneficial for low-dimensional bolstering (). This leads us to consider optimal bolstering, specifically, finding an optimal variance for the bolstering kernels. Error estimators like resubstitution and cross-validation (assuming the number of folds is preset) are non-parametric. They contain no free parameters. This is not the case for bootstrap. In general, bootstrap has the form of a convex error estimator, namely,wher  resub andand and zero are the resubstitution and zero-bootstrap estimators and 0  a  1. The zero-bootstrap utilizes the empirical distribution F * , which puts mass 1 n on each of the n available
High-dimensional bolstered error estimationdata points. A bootstrap sample S * n from F * consists of n equallylikely draws with replacement from the original data S n. The basic bootstrap zero estimator () is written in terms of the empirical distribution as0In practice, the expectation E F * has to be approximated by a Monte-Carlo estimate based on independent replicates S * b n , for b = 1,...,B, in which case the classifier is designed on the bootstrap sample and tested on the original data points left out. An optimal bootstrap estimator results from a value of a that minimizes the mean-square error betweenbetween between a boot and the true error for a given feature-label distribution (). Setting a = 0.632, as is commonly done (), can lead to a far from optimal estimator (optimal weights). The present article considers optimal bolstering relative to its one free parameter, kernel variance and the manner in which optimal bolstering can be used to arrive at practical implementation of bolstering in high-dimensional feature space. The end product is an implementation protocol in which optimal kernel variances across different models are combined to produce a suitable kernel variance for the problem at hand. Throughout, we will assume feature selection because that would be the standard way to approach classification in the high-dimensional setting we are considering, although this is not a mandatory requirement of the approach.
SYSTEMS AND METHODSThis section will be broken into subsections, with the aim of arriving at the implementation protocol for real-world data. Section 2.1 briefly reviews the necessary essentials of error estimation, mainly bolstering. Section 2.2 defines the scaling factor by which to adjust the bolstering kernel to high dimensions. Section 2.3 discusses optimization of the scaling factor and illustrates the construction of a set of optimal scaling factors across a family of models varying in both structure and classification difficulty. Section 2.4 provides the implementation of high-dimensional bolstered resubstitution based on a family of optimal scaling factors.
Error estimationIn two-group statistical pattern recognition, there is a feature vector X  R p and a label Y {0,1}. The pair (X,Y ) has a joint probability distribution F, which is unknown in practice. Hence, a classifier is designed from training data, which is a set of n independent observations,}, drawn from F. A classification rule is a mapping n :{R p {0,1}} n R p  F , where F is the set of mappings from R p into {0,1}. It maps S n into a classifier  n : R p {0,1}. The classification error  n is the probability of an erroneous classification:where E F denotes expectation with respect to F. Were F known, then the error could be found via Equation (3). In practice, one must use an error estimatorestimator estimator n. An error estimator can suffer from bias, Bias= E[  n  n ], and deviation variance, Var dev =Var[  n  n ]. These combine to contribute to the most common measure (used herein) for evaluating the accuracy of an error estimator, the root-mean-square (RMS):Var dev +Bias 2 .
Classical error estimationThe simplest way to estimate the error in the absence of independent test data is to compute its error directly on the sample data itself. This resubstitution estimator,   resub , is usually optimistic (i.e. biased low), sometimes very much so. In k-fold cross-validation, the dataset S n is partitioned into k folds S(i) n , for i = 1,...,k (for simplicity, we assume that k divides n). Each fold is left out of the design process and used as a test set, and the estimate,   cv , is the overall proportion of error on all folds. A k-fold crossvalidation estimator is unbiased as an estimator of  nn/k. Cross-validation estimators are pessimistic, since they use smaller training sets to design the classifier; however, their bias tends to be small. Their main drawback is their large variance (Braga-Neto and Dougherty, 2004b;). Sometimes cross-validation is repeated some number of times with different fold partitions and the results averaged. In this article, we use 10-fold cross-validation without repetition. A recently developed estimation method, called adjusted bootstrap (  abs ), which carries out further bootstrap resampling in each fold, has been found to have good RMS performances (). Specifically, S n is partitioned into n folds and, for each sample left out for testing, B bootstrap sample sets of size ln are drawn from the remaining n1 points, l = 1,2,...,L. For each l, the error e l is the proportion of misclassified samples across n folds and B bootstrap sample sets. Finally, the adjusted bootstrap errorerror error abs is computed in the formwher a,  b andcand andc are least squares estimates for the functionand u l is the proportion of the expected number of non-repeated samples in a size ln bootstrap sample set.
Bolstered error estimation The empirical feature-label distributionF * is a discrete distribution that puts mass 1 n on each of the n available data points. The resubstitution estimator can be written in terms of the empirical feature-label distribution asRelative to F * , no distinction is made between points near or far from the decision boundary. If one spreads the probability mass of the empirical distribution at each point, then variation is reduced because points near the decision boundary will have more mass on the other side of the boundary than will points far from the decision boundary. Consider a probability density function f  i , for i = 1,...,n, called a bolstering kernel, and define the bolstered empirical distribution F  , with probability density function given byThe bolstered resubstitution estimator (Braga) is obtained by replacing F * by F  in Equation (5) to obtainBolstering can be applied to other error estimators; however, we only use bolstered resubstitution, the bolstering method used the most to date. The bolstered resubstitution estimator is given bywhere A j ={x | (x) = j}. The integrals are the error contributions made by the data points, according to whether y i = 0 or y i = 1. If the classifier is linear, then the decision boundary is a hyperplane and it is usually possible to findPage: 3058 30563064
C.Sima et al.analytical expressions for the integrals; otherwise, Monte-Carlo integration can be employed. The amount of bolstering determines the variance and bias properties (hence, RMS also) of the bolstered estimator. As a general rule, wider bolstering kernels lead to lower variance estimators, but after a certain point this advantage becomes offset by increasing pessimistic bias. In the other direction, insufficiently wide kernels tend to result in optimistic bias. A zeromean, spherical Gaussian bolstering kernel f i with covariance matrix of the form  2 i I, where I is the identity matrix, has been proposed (Braga-Neto and), and has been shown to work well in low-dimensional feature spaces. Since bolstered estimators spread the test points, the task is to find the amount of spreading that makes the test points to be as close as possible to the true mean distance to the training data points. The true mean distance can be estimated by its sample-based estimate:The estimat d y is the mean minimum distance between points belonging to class y. Next, let f ,1 i be a unit-variance bolstering kernel, R i be the random variable equal to the distance of a point randomly selected from f ,1 i to the origin and F R i (x) be the cumulative distribution function of R i. In the case of the bolstering kernel f i with covariance matrix  2 i I, all distances get multiplied by  i. In Braga-Neto and Dougherty (2004a), a single variance  2 y is estimated for all points from class y, such that the median distance of a test point to the origin is equal to the estimated true mean distanc d y. This implies that half of the ' mass' (i.e. the ' test points' ) of the bolstering kernel will be farther from the center thandthan thand y and the other half will be nearer. Hence,  y is the solution of the equation(1/2), and recognizing that the R i are identically distributed, the estimated SDs for the bolstering kernels are given byfor i = 1,2,...,n.
High-dimensional bolstered resubstitutionIn high-dimensional settings, it is commonplace to perform feature selection and, when performed, feature selection is part of the classification rule, with the entire set of potential features constituting the feature set relative to the classification rule. Feature selection constrains the space of functions from which a classifier might be chosen, but it does not reduce the number of features in the design process. This is why when using cross-validation error estimation, feature selection has to be carried out in each partitioned fold. If we perform feature selection on a D-dimensional dataset S D n and arrive at a d-dimensional set S d n (d < D), then the bolstered error estimator can use the previously defined kernel size  i , computed on S D n , not S d n. Specifically, the mean minimum distanc d y is estimated on S D n and  p =  D. For high dimensions, we replace  i bywhere k D is an additional scaling factor determined by the dimension and where we have indicated the dimension in the mean minimum distance estimate. The idea is to adjust the kernel size by choosing k D so the bolstered error estimator will be optimal (minimum RMS). k D = 1 yields the previously proposed kernel variance. In essence,  i is a parameter for the bolstered estimator and Equation (11) sets it free, thereby allowing for optimization. The situation is akin to 0.632 bootstrap as opposed to optimal bootstrap. Given the kernel sizes, the bolstered resubstitution error estimate is given by Equation (8) in D dimensions. For Gaussian kernels with independent variables, this integral reduces. Let f ,d idenote the Gaussian kernels in d-and (Dd)-dimensional spaces, respectively, so that the D-dimensional Gaussian kernel decomposes asDenoting x x i as x i , then Equation (8) can be rewritten aswhere A d j ,j = 0,1, is the projection of the classifier decision region A j into d-dimensional space, and we added a superscript 'D' to the bolstered error estimator to indicate it refers to the error in D-dimensional space. The previous result indicates that the integrals necessary to find the bolstered error estimate in D-dimensional space can be equivalently carried out in ddimensional space. This is akin to resubstitution, where the error count is the same whether it is done in D-or d-dimensional space. For performance comparison purposes, we will also estimate the kernel size using only the low-dimensional data S d n , resulting in a bolstered error estimatorestimator estimator d bolst , which uses the originally proposed kernel variance (no correction, or k D = 1). For feature selection, we will use sequential forward floating search (SFFS) ().
Optimization methodTo find the optimal kernel scaling factor k D , we utilize the following procedure:(1) Generate a sample set S D n of size n and a total of D features from a specified synthetic model.(2) Select a size-d feature set A using a feature-selection method F on S D n , resulting in a reduced dimension sample set S d n for the feature set A.according to the given classification rule n .(4) Compute the true error  n using the underlying distribution of the model.(5) Compute the 10-fold cross-validation errorerror error cv (keeping in mind that feature selection must be repeated for each fold).(6) Compute the bolstered errorerror error d bolst .(7) Compute the bolstered errorserrors errors D,i bolst for a list of kernel scaling factors(8) Calculate RMS for each error estimator by repeating Steps 1 through 7 a number N of times.(
High-dimensional bolstered error estimationwhere  has 1 on the diagonal and  off the diagonal. Here a i = 1 for i = 1,2,...D.gives a summary of the simulation experiments. Two limiting factors should be noted. First, the maximum total number of features, 500, is smaller than those often considered in microarray studies and, second, the number of selected features is kept to 5 or 10. There are three reasons for this, one pragmatic to our set of simulations and the others having to do with the nature of feature selection. The pragmatic reason is computational: we wish to do a large simulation study and therefore want to limit the computational burden. As for feature selection, given the sample sizes, it is prudent to keep the numbers of total and selected features small to have satisfactory feature selection () and the number of selected features small to avoid the peaking phenomena (). Regarding the total number of features, limiting the total number of features via prior biological knowledge or requirements on data quality raises the likelihood of finding good feature sets via feature selection (). Regarding the efficacy of selecting small feature sets, studies have shown that good classification can be achieved with two or three genes when re-examining data from studies that had originally used much larger feature sets (). We plot the RMS versus kernel scaling factor k D forfor for D bolst , using all combinations of simulation parameters displayed in. Additionally, we compute the RMS for LDA with D = 200, d = 3 and n = 50 for EHere, we present some typical results, the complete set of plots appearing on the companion website. Note that due to the intensive computing inin in abs we only compute it for LDA with D = 200, d = 3 and n = 50.shows the result for LDA, n = 50, and selecting d = 3 out ofWhen n is large, the benefits of usingusing using D,opt bolst tend to diminish.and b show RMS curves for LDA for n = 100 and n = 150, respectively, E[ n ]= 0.10 (more on the companion website), d = 3 and D = 200. If the model is known, an optima  D bolst is achievable, but robustness diminishes. For n = 100, there is still some robustness, but for n = 150, even a small deviation from k min Dcan result a worse performance thanthan than cv. Hence, for n = 150, choosing an appropriat  D,opt bolst is not feasible in practice; however, since our interest is using bolstered error estimation for very small samples, this is not a significant drawback.
Implementation for real dataFor practical application, based on the sample size, the total and selected numbers of features, and the classification rule, we will perform a modelbased analysis like the ones we have performed, thereby resulting in a look-up) as in. To illustrate, by averaging across the four models, we obtain the following table). Upon designing a classifier from the data, we will obtain the 10-fold crossvalidation error estimate,  0 , and then, in the fashion of the method of moments, set E, we have:selection of expected errors and interpolation can be obtained. One might also use a coarser interpolation for computational purposes, with some loss of performance. In fact, that is precisely what we do here because we will subsequently perform a computationally intensive robustness analysis. Here we use:The final bolstered error estimate is computed from the data using this scaling factor. The success of the procedure depends on robustness in choosing a scaling factor because (i) the estimated model will be inaccurateowing to small sample size, (ii) cross-validation has significant variance for small samples, (iii) the estimated model will differ to some extent from the models involved in creating the look-up table and (iv) the method of moments is not optimal. The following protocol is used to obtain the bolstered resubstitution error estimate:
High-dimensional bolstered error estimation(1) Given a sample set S D n with size n and dimension D, select a size-d feature set A using a feature-selection method F on S D n , resulting in a reduced dimension sample set S d n for the feature set A.(2) Design a classifier  n for S d n according to the given classification rule n , and compute the 10-fold cross-validation error estimate  0 .(3) From the look-up table) choose the kernel scaling factor(4) Compute the bolstered error estimat  D,data bolst using the selected scaling factor.
RESULTS AND DISCUSSIONTo illustrate application, we have applied the method to two gene expression datasets: @BULLET Myeloma dataset: data are downloaded from the NIH Gene Expression Omnibus (GEO) under accession numbers GSE5900 and GSE2658, which contain 54 613 probe sets and 559 multiple myeloma (MM) samples, as well as 3 other subtypes [monoclonal gammopathy of undetermined significance (MGUS)], 44 samples; smoldering MM (SMM), 12 samples; healthy donors with normal plasma cell (NPC), 22 samples (). Samples are labeled into two classes, one for MGUS/SMM/NPC and the other for MM. Due to the significant unbalance of the samples between the two classes, only 156 samples are randomly selected from the 559 MM samples. The number 156 has been chosen as
C.Sima et al.a compromise to take as many samples as possible from MM without significant unbalance between the two classes. Furthermore, only D = 200 features with the largest variances across samples are selected from the total 54 613 probe sets. It is advantageous to limit ourselves to the 200 features with the largest variances, because these are more likely to reveal class discrimination and feature selection tends to perform poorly for very large numbers of features when samples are small (). Here we must put in a word of caution concerning the methodology. We are using feature variance to produce a set of 200 features to be taken as the full feature set for our performance analysis and will apply feature selection, classifier design and error estimation based on this set, including cross-validation. In practice, this approach would be unacceptable, because the actual dataset to which we are applying data-dependent feature selection is the full 54 613 probe sets. For instance, cross-validation would have to use the variance-based feature reduction from the full 54 613 on each fold, else it would be optimistically biased. But that is not our goal here. We are a priori assuming that there are onlybelong to the 'good-prognosis' class and 180 belong to the 'poor-prognosis' class. Referring to our cautionary comment regarding the multiple myeloma data, we note here that feature selection was used originally to obtain the 70 genes, but, again, from our performance perspective, that is not important for our analysis.We consider sample size n = 50 and d = 3 features selected from the D = 200 and D = 70 features in the myeloma and breast cancer datasets, respectively, and LDA for classification. We repeatedly draw (stratified) n = 50-point samples with replacement from the empirical distribution (full dataset) as training data with the remaining sample points held out for true error estimation in computing the RMS ( 0 is still computed from the training data). The total number of repetitions is 200. The average true error and SD for the myeloma dataset are 0.2170 and 0.0309, respectively. For the breast cancer dataset, the average true error and SD are 0.2340 and 0.0362, respectively.shows the RMS for the two patient datasets. In both cases,   D,data bolst performs significantly better. Owing to robustness of the optimal scaling factor, a coarse selection of expected errors and interpolation has proven sufficient. To further demonstrate the effectiveness of Protocol 2, we have applied it to four models in, we see that all these averages are centered within the range of scaling factors where optimal bolstering outperformsoutperforms outperforms abs .
Robustness to non-Gaussian dataAlthough k min D is derived with Gaussian models, it is robust enough for models where this assumption is violated, as with the patient data, where the underlying distribution is almost certainly not Gaussian. To further investigate this issue, we take the model M2 in Section 2.3, but perturb the skewness and kurtosis of the class at the origin to obtain a Pearson system ().shows the eight different distributions in the Pearson system with varying skewness and kurtosis. For the resulting model M p and each skewness and kurtosis combination, where valid, we do the following:(1) Generate a sample set S D n of size n = 50 and a total of D = 200 features from the model M p .(2) Feature select a size-d = 3 feature set A, resulting in a reduced dimension sample set S d n .(3) Design a classifier  n for S d n using LDA.(4) Compute the true error  n using the underlying distribution of the model M p .
Page: 3063 30563064
High-dimensional bolstered error estimation(5) Compute the 10-fold cross-validation errorerror error cv .(7) Calculate RMS forfor for cv andand and D,data bolst by repeating Steps 1 through 6 a number N = 400 of times.shows the values of RMS forfor for D,data bolst minus the RMS forfor for cv for different skewness and kurtosis in a heatmap. Due to symmetry, only positive skewness is shown. In all cases,   D,data bolst is superior t  cv .
Concluding remarksWe have derived an optimal kernel scaling factor that can be used for bolstered error estimation in high feature dimensions. This bolstered error estimator achieves a significant RMS improvement over crossvalidation when samples are small, with continued, albeit smaller, performance improvement over the adjusted bootstrap. This superior performance is robust over a wide range of models. Hence, we have been able to incorporate optimality criteria from across a collection of families to arrive at suitable bolstering kernels for practical situations, thereby facilitating its use in applications like classification of genomic data when samples are small.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
