MGEScan-long terminal repeat (LTR) and MGEScan-non-LTR are successfully used programs for identifying LTRs and non-LTR retrotransposons in eukaryotic genome sequences. However, these programs are not supported by easy-to-use interfaces nor well suited for data visu-alization in general data formats. Here, we present MGEScan, a user-friendly system that combines these two programs with a Galaxy workflow system accelerated with MPI and Python threading on compute clusters. MGEScan and Galaxy empower researchers to identify transposable elements in a graphical user interface with ready-to-use workflows. MGEScan also visualizes the custom annotation tracks for mobile genetic elements in public genome browsers. A maximum speed-up of 3.26Ã‚ is attained for execution time using concurrent processing and MPI on four virtual cores. MGEScan provides four operational modes: as a command line tool, as a Galaxy Toolshed, on a Galaxy-based web server, and on a virtual cluster on the Amazon cloud. Availability and implementation: MGEScan tutorials and source code are available at
IntroductionTransposable elements (TEs) move within or between most eukaryotic genomes and constitute a significant portion of these genomes. It is known that nearly half of the human genome is derived from TEs (). The transposition of TEs generates new mutations that can have different effect, ranging from changes in genes expression to genomic instabilities. Therefore, the identification and analysis of TEs is important for understanding genome evolution. TEs can be classified into retrotransposons and DNA transposons according to their mechanism of transposition (). Whereas DNA transposons cut and insert themselves into new genomic sites, retrotransposons are copied and inserted at new genomic locations using RNA intermediates. Retrotransposons can be classified into two subgroups according to the existence of long terminal repeats (LTRs) at their 5 0 and 3 0 ends. In addition, both LTR retrotransposons and non-LTR retrotransposons can be further classified into various orders, super-families, and families based on their structure, encoded genes, and phylogeny (). We previously developed two separate computational methods for the genome-wide identification of LTR and non-LTR retrotransposons, called MGEScan-LTR and MGEScan-non-LTR, respectively. MGEScan-LTR identifies all types of LTR retrotransposons, i.e. young intact, old intact and solo LTR retrotransposons, using approximate string matching, protein domain analysis, and profile Hidden Markov Models (). MGEScannonLTR identifies non-LTR retrotransposons based on Gaussian Bayes classifiers and generalized hidden Markov models consisting of 12 super states that correspond to different clades or closely related clades (). MGEScan-LTR and MGEScan-non-LTR have been successfully used for identifying retrotransposons (). However, these programs were not designed to support either a web graphical user interface or parallel execution on clusters. Their computational time for eukaryotic genome analysis ranges from a few hours to several days. In addition, because they were developed as commandline tools that produce output files regardless of post-processing, it is not easy to visualize the results or perform further analysis. In this article, we introduce MGEScan, a Galaxy-based system for identifying retrotransposons in genomes. MGEScan provides an integrated interface to run both computational LTR and non-LTR retrotransposon identification programs using the Galaxy workflow. This design facilitates input data preparation and the further analysis of results. Execution time for retrotransposon identification in genomes is reduced by 68% when MGEScan runs with concurrent and MPI executions. Moreover, because we provide MGEScan in various forms, users can use MGEScan in their preferred way.
System descriptionsIn this section, we describe the design objectives of MGEScan: to reduce execution time, add versatility, and improve the usability of the MGEScan-non-LTR and MGEScan-LTR programs as well as to map these design objectives with system implementations. First, we integrated the MGEScan-LTR and MGEScan-non-LTR into MGEScan with a user-friendly interface to facilitate concurrent execution and provide three options for running either program or both. Therefore, a user can execute them concurrently or individually on a local machine or clusters. Second, we adapted MGEScan to the Galaxy framework to support powerful and flexible data preparation and further analysis of the results. A single input data is shared between the programs. The results of the programs are merged and exported to General Feature Format v.3 (GFF3) for further analyses or visualization by genome browsers (). Third, to improve the performance (i.e. throughput), we replaced HMMER version 2.3.2 in MGEScan with version 3.1b1 () and re-trained the profile Hidden Markov Models that are used to identify retrotransposons in a genome. HMMER 3.1b1 performs better and ensures improved sensitivity because of its new heuristic acceleration algorithm for sequence searches. In addition to the concurrent execution of MGEScan-LTR and MGEScan-nonLTR, if a user runs MGEScan on an MPI-capable machine, the overall process execution is faster than non-MPI execution. Last, we provide four different distribution forms of the MGEScan program: the command-line program without the Galaxy framework, the Galaxy Toolshed, the Galaxy-based web server, and the MGEScan virtual clusters on the Amazon cloud. If a user is looking for a lightweight and simple program but is not familiar with the Galaxy system, the MGEScan command-line program can be downloaded and installed on a local machine without the Galaxy framework. In contrast, if a user needs to use both the graphical and command-line interfaces with full features but lacks the necessary skills or understanding of the MGEScan programs, the Galaxy-based MGEScan webserver or the MGEScan Galaxy Toolshed can be downloaded and installed. MGEScan programs are included in the webserver with helper tools to reduce the effort of using workflows and tools. We also provide a oneliner command to support the quick and simple installation of the required software and configuration for the command-line program or the Galaxy-based webserver. Finally, a user may want to run MGEScan in a cloud environment or in clusters. In this case, the user can use a virtual machine image of MGEScan with the Galaxy framework. Currently, we provide a virtual image of Galaxy-based MGEScan on Amazon EC2 (Amazon machine image ID: ami10672b7a on the US East region). Thus, a virtual single or multiple servers for MGEScan can be easily deployed on Amazon Web Services.
FundingThis work was supported by National Research Foundation of Korea grants funded by the Ministry of Education (NRF-2015R1D1A1A01059557),
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Results and conclusion To evaluate the improvement in throughput of MGEScan, we compared the execution time of MGEScan-LTR, MGEScan-non-LTR, MGEScan without MPI, and MGEScan with MPI using test genome datasets. The consistency of prediction results across different versions of MGEScan was also evaluated (see Supplementary Materials). We described our experiments and results in detail in the Supplementary Materials. When MGEScan ran without MPI, the execution time was, on average, 1.43 faster than MGEScan-non-LTR and MGEScan-LTR because of the concurrent execution support and version upgrade of the HMMER in MGEScan. In addition, MGEScan with MPI (four vCPUs) was 3.26 faster than MGEScan-non-LTR and MGEScanLTR. Also, the performance comparison of MGEScan over a different number of MPI processes shows that the MGEScan programs for LTR and non-LTR provide better performance with additional MPI processes. These results show that MGEScan improves the throughput of retrotransposons identification in genomes while the prediction performance remains consistent across the different versions of program and different MPI settings. In this article, we provide the integrated and improved MGEScan for identifying retrotransposons in eukaryotic genomes. MGEScan, with its improved usability, throughput and versatility, can be easily used to identify all types of retrotransposons. Future work will include developing a module for identifying DNA transposons in MGEScan and incorporating newly discovered families of TEs to fully support the identification of all kinds of TEs in eukaryotic genomes.
