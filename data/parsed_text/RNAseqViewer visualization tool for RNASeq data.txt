With the advances of RNA sequencing technologies, scientists need new tools to analyze transcriptome data. We introduce RNAseqViewer, a new visualization tool dedicated to RNA-Seq data. The program offers innovative ways to represent transcriptome data for single or multiple samples. It is a handy tool for scientists who use RNA-Seq data to compare multiple transcriptomes, for example, to compare gene expression and alternative splicing of cancer samples or of different development stages.
INTRODUCTIONThe development of next-generation sequencing allows largescale transcriptome studies, using massively parallel sequencing of complementary DNA reverse transcribed from RNA (RNASeq) technologies (). Scientists now face the challenge of analyzing the unprecedented amount of available sequencing data. In addition to the use of automated tools, such analysis needs human review and interpretation of the data to gain insight into them, verify consistency of programs' results, understand intricate cases and structures and reveal underlying patterns. As data files generated by automated tools for RNA-Seq analysis are formatted for computational treatments and can exceed gigabytes, they are improper for easy direct human reading. This calls for effective visualization tools, capable of displaying big datasets in intuitive ways. Genomic visualization software can be divided into two categories: web-based genome browsers like those from UCSC and Ensembl () and standalone software including the Integrative Genomics Viewer and Savant (). Only the latter category is adapted to the visualization of the large locally stored datasets usually manipulated in RNA-Seq analysis, as web upload is prohibitive. However, existing solutions are limited to a few tracks visualized simultaneously, and it is not possible to compare the multiple samples of medium or large RNA-Seq experiments.Here we introduce RNAseqViewer, a desktop program to visualize the data from the RNA-Seq analyzing process, for single or multiple samples. By focusing on expression of genes and transcript isoforms, the program offers innovative ways to present the transcriptome data in a quantitative and interactive manner.
IMPLEMENTATIONRNAseqViewer is a cross-platform program implemented in the language Python (http://www.python.org/). It makes use of the package PySide, a binding to the graphical library Qt (http://qtproject.org/wiki/PySide), and the programs Samtools and Tabix for reading Sequence Alignment/Map (SAM), BAM and gene transfer format (GTF) files ().
PROGRAM OVERVIEW
Supported data typesRNAseqViewer supports seven types of data widely used in RNASeq analysis (see). The program can read the results of RNA mappers like TopHat (), namely, read alignments in SAM/BAM format and splicing junction sites in BED format. A third major type consists in transcriptomes, assembled by programs like Cufflinks () in GTF format. Reference sequence and genome annotations can be loaded from files, respectively, in FASTA and RefFlat or GTF format. The program also supports Wiggle format to visualize dense numeric data and BED format for any other type of tracks.
GraphsWe designed the graphs with three objectives in mind:(i) display as much information as possible while keeping the resulting graph simple, (ii) offer compact views to allow dozens of *To whom correspondence should be addressed.and Supplementary Figs S2 and S3). They can be chosen by the users according to their needs and they automatically adapt to the scale with a semantic zoom approach. Many graphs use colors as a mean to display more data without overloading the graph and in a compact way. Colors represent scores like read count or FPKM (Fragments per kilobase of exon per million fragments mapped) in heatmap-like graphs, or they are used to highlight significant details like potential single nucleotide polymorphisms. Additional data are displayed in tool tips or in an optional frame. For all graphs, intronic regions can optionally be hidden. This is especially useful for genes with long introns and short exons. In this mode, the exons of these genes can be viewed on a single screen without being shrunk, hence offering a better view of data mapped to the exons.
User interfaceSeamless browsing of the datasets is highly desirable to gain an extensive insight into the data. To achieve this goal, RNAseqViewer offers a dynamic user interface (see Supplementary) and preloads data next to the current view so that they can be displayed immediately when browsing around. Users can either use the mouse or the keyboard to navigate along the chromosomes in a Google Maps-like fashion. Panning is achieved by dragging the tracks, and zooming is achieved by scrolling with the mouse wheel. Alternatively users can use the interface's navigation buttons or the keyboard shortcuts. Search for gene name and coordinates input allow direct access to specific locations.
Memory and speed performancesSpecial attention has been given to the memory management so that gigabyte-sized datasets can be visualized without exceeding the memory limits or impacting speed performance. RNAseqViewer only loads in memory the data that are immediately necessary and those that are close to the current view. A specific strategy is applied for file formats usually chosen for big datasets. Before visualizing files in BAM, GTF or FASTA format, an index file is created using Samtools or Tabix. Thanks to the index, data do not need to be fully loaded in memory, yet they are remotely accessible in a short time.
USE EXAMPLE
The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
BAM files resulting from reads mapping. (B) Gene expression of one sample: read coverage, splicing junctions, with colors depending on the junction reads count, and transcripts, with colors depending on FPKM. The two first graphs were generated from TopHat output (BAM and BED file) and the latter from cufflinks output (GTF file)
X.Rog and X.Zhang at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
