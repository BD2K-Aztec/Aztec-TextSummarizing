Motivation: Given a large-scale biological network represented as an influence graph, in this article we investigate possible decompositions of the network aimed at highlighting specific dynamical properties. Results: The first decomposition we study consists in finding a maximal directed acyclic subgraph of the network, which dynamically corresponds to searching for a maximal open-loop subsystem of the given system. Another dynamical property investigated is strong monotonicity. We propose two methods to deal with this property, both aimed at decomposing the system into strongly monotone subsystems, but with different structural characteristics: one method tends to produce a single large strongly monotone component, while the other typically generates a set of smaller disjoint strongly monotone subsystems.
INTRODUCTIONOne of the outstanding challenges that Systems Biology is currently facing is to provide the right tools for the investigation of the dynamical behavior of the large-scale networks used to represent complex biological systems, such as gene regulatory networks, signaling pathways and chains of metabolic reactions. Even if our knowledge of the interactions among the molecular species involved in these systems is growing at a fast pace, the details of the dynamics that they describe are seldom available and often unlikely to be obtainable in a near future. What is often more plausible to assume is that only an influence graph is available for these networks (). An influence graph is a signed graph where an edge represents the action of a variable on another variable, and the signs may have the meaning of activatory/inhibitory action, or may simply represent the signature of the Jacobian linearization of a non-linear vector field which is unknown but sign constant over the entire state space (common forms of the kinetics, such as mass action and MichaelisMenten, normally obey to this condition). In choosing this level of detail for our networks, we are guided by an abundant literature, see e.g.;; Milo * To whom correspondence should be addressed;;; Thieffry (2007). Important dynamical problems that can be investigated on an influence graph include:(1) compute the equilibria of the system (;(2) investigate the stability properties of the dynamics ();(3) identify the largest open-loop subsystem of a given system ();(4) study the monotonicity and strong monotonicity properties of the dynamics (); and(5) select a minimal intervention set for medical treatment (In this article, we are interested in the problems (3) and(4) of the list above. In graph theoretical terms, finding the largest open-loop subsystem corresponds to identifying a maximum-size directed acyclic graph (DAG) within a network by dropping all feedback loops. In the computer science literature, this is called the minimum feedback arc set problem, and it is well known to be NP-hard (). Although several heuristic methods are already available for it (), the novel algorithm we propose in this article has the advantage that available a priori knowledge on the open-loop part of the system can be easily taken into account when computing a maximal DAG. We will show in the large-scale examples of Section 6 that the performances of our algorithm are comparable to those of the best heuristics. In a series of papers by E. Sontag and colleagues (), it was shown that influence graphs can be used to study an important property of dynamical systems, namely monotonicity (). Monotone systems have nice properties of 'order' in their dynamical behavior. For example, they neither admit stable periodic orbits nor chaotic behavior. Moreover, for strongly monotone systems [i.e. monotone systems whose graph is irreducible, see Smith (1995);, Hirsch theorem states that almost all bounded solutions converge to the set of equilibria (). The concept is particularly attracting for biological networks, because it is well known that these systems, though complex, have indeed outstanding stability properties, are largely devoid of spurious sustained oscillations and are definitively not chaotic. Hence, the paradigm of monotonicity has gained some momentum in recent years and there is by now a consistent literature on using thesePage: 77 7683
Strong monotonicityproperties to study biological networks (). Both monotonicity and strong monotonicity admit a graphical characterization: a system is monotone when all undirected cycles of its influence graph have positive sign (i.e. have an even number of negative edges); an irreducible system is strongly monotone when the same property holds for directed cycles (). While strong monotonicity implies monotonicity, the opposite implication is usually not true. For the stricter notion of strong monotonicity, the only study on large-scale biological networks we are aware of is. In this article we propose two different methods aimed at extracting strongly monotone subsystems from large-scale influence graphs. The first method is based on the minimization of the total number of negative signs on the edges by means of 'switching equivalences' (), i.e. changes in the direction of some of the axes of R n in order to align the system as much as possible with the positive orthant of R n. This idea was developed infor the monotonicity property and is extended here to the strong monotonicity properties. The second method to decompose a network into strongly monotone subsystems relies instead on the notion of DAG introduced above. When on an open-loop subsystem represented as a DAG we start reinserting back the edges of the original network (i.e. the feedback loops for the original system), then strongly connected subgraphs begin to form. As long as all directed cycles of one of the strongly connected subgraphs have positive sign, then the corresponding subsystem will be strongly monotone. In order to test the efficacy of the proposed algorithms, a number of large-scale biological networks are decomposed and their strongly monotone subsystems are identified. On these examples, the two methods we are proposing tend to highlight different features: a single large strongly monotone subnetwork is obtained in one case, and several medium-size strongly monotone subsystems in the other. Depending on the context, each of these approaches may be of help in better understanding the global structure of large systems and in investigating more properly their dynamical properties. The organization of this article is as follows: the necessary background material is introduced in Section 2, and the construction of a maximal DAG is discussed in Section 3. The two methods for strong monotonicity decomposition are presented in Section 4. A small example [a yeast cell-cycle model from] is studied in detail in Section 5 and finally, in Section 6, the algorithms are applied to large-scale biological networks.
BACKGROUND MATERIAL
Signed graphsA basic reference for this Section is Deo (1974). A signed directed graph is an ordered pair G = (V ,E) where V is a set of vertices of cardinality n =|V |, and E is a set of signed edges i,j {1} of cardinality m =|E|. A pair of edges i,j and j,i connecting the same vertices but of opposite direction is called a digon. When for all digons sign( i,j ) = sign( j,i ), then we say that G admits an undirected graph (obtained by dropping all arrows in the edges). The sign of a path/cycle of G is positive (respectively negative) if it has an even (respectively odd) number of negative edges. We will denote R(v i )  V the set of vertices reachable from v i. An undirected (respectively directed) graph G is connected (respectively strongly connected) if any vertex is reachable from any vertex of G. In an undirected (respectively directed) graph G, a connected component (respectively strongly connected component, henceforth SCC) of G is a maximal connected (respectively strongly connected) subgraph of G. Given an undirected graph G = (V ,E), a spanning forest T = (V ,E T ) is a maximal acyclic subgraph of G. The number of edges of every spanning forest of G is equal to |V | minus the number of connected components of G.DAGs: a DAG is a directed graph without any directed cycle. When a DAG lacks also undirected cycles then it is called a polytree. Polytrees are typically obtained by considering a spanning forest T on the undirected graph of G and then restoring the original direction of the edges of T (dropping one of the arrows of each digon). For a directed graph G, a feedback arc set is a subset of edges whose removal from G leaves a DAG. A feedback arc set of G is minimal if no proper subset of it is a feedback arc set. A subgraph of G is a maximal DAG of G if it is the complement to a minimal feedback arc set of G.
Irreducible adjacency matrices and SCCs: denote Athe signed adjacency matrix of a signed graph G. For simplicity of notation, we shall indicate G(A) the graph obtained in correspondence of A, while B  A will denote the adjacency matrix of the subgraph G(B) of a graph G(A). An nn matrix A is reducible if  a permutation matrix P s.t., A 3 square submatrices. A is said irreducible if it is not reducible. A is irreducible if and only if the associated graph is strongly connected. For a non-strongly connected graph, finding the irreducible diagonal blocks of the matrix is equal to determining all the SCCs of the graph. Such operation can be carried out efficiently by e.g. the Tarjan algorithm (). A directed graph G(B), B  A, is a DAG if and only if  a permutation matrix P such that PBP is upper triangular, see Deo (1974), Theorem 9.16. In other words, the adjacency matrix of a DAG is completely reducible.
Monotone dynamical systemsDynamical systems and their signed influence graphs: consider the autonomous dynamical systemand its linearization around an equilibrium point x o ,  z = Az, where, and z = x x o is the vector of perturbations around x o (signed, i.e. whose components z i can assume both positive and negative values). In the context of large-scale biological networks, it is very difficult to have a precise knowledge of the functional form of the vector field f () or even of the Jacobian matrix A. It is often more reasonable to assume that only the sign pattern is known of A, i.e. A = sign(A) has non-zero entries of unit amplitude A ij {1,0}. A is the signed adjacency matrix of the so-called influence graph G(A) of the network (), i.e. of the directed graph representing the effect of the j-th variable on the i-th variable, which can be activatory, A ij > 0, inhibitory, A ij < 0, or non-existent, A ij = 0. In general, in a system like (1),are the same for all x o , x 1 in X. Conventionally, the self edges of the influence graph G(A), i.e. the diagonal elements of A are disregarded when looking at monotonicity properties (Sontag, 2007). We shall tacitly assume this henceforth. The system (1) is said irreducible if A is irreducible. When G(A) is a DAG then the system is completely reducible, i.e. A is triangular up to a permutation.Monotonicity, strong monotonicity, and their graphical characterization: for a thorough introduction to the theory of monotone systems, the reader is referred to Kunze and Siegel (1999);); Sontag (2007). In R n , consider the cone K representing one of its orthants: K ={x  R n such that Dx 0} where D is a diagonal matrix D = diag() of diagonal elements, and denote by  t (x 1 ) the integral curve of (1) at time t in correspondence of the initial condition x 1. The system (1) is said monotone with respect to the partial order  if x 1 , x 2  X such that x 2 x 1  K one has  t (x 2 ) t (x 1 )  K t 0. Likewise, the system (1) is said strongly monotone with respect to the partial order  if x 1 , x 2  X such that x 2 x 1  K, x 2 = x 1 , one has  t (x 2 ) t (x 1 )  int(K) t > 0 (int() is the interior of the cone). Monotonicity can be formulated in terms of the adjacency matrix A by means of the so-called Kamke condition, which states that the system (1) is monotone in X with respect to the orthant order  if and only if,...,n s. t. i = j.The starting point of our investigation is a graphical condition for orthant monotonicity. Assume that G(A) admits an undirected graph, i.e. that all edge pairs of the digons of G(A) have compatible signs, A ij A ji 0. Denote A U the adjacency matrix of the undirected graph obtained from G(A). The following Lemma can be found in e.g. Sontag (2007).(2) all cycles of G(A U ) have positive sign.The non-strict inequality in (2) implies that monotonicity is concerned not only with 'true' directed cycles and their sign, but also for example with 'parallel' directed paths starting and ending on the same nodes (and forming cycles on the undirected graph G(A U )), see; Sontag (2007). The restriction to directed cycles is necessary when we are interested in strong monotonicity properties. A sufficient condition for strong monotonicity of a monotone system is the irreducibility of the system. From Lemma 1, we have the following graph-theoretical condition(2) all directed cycles of G(A) have positive sign.
CONSTRUCTION OF A MAXIMAL DAGIn systems-theoretical terminology, since DAGs lack directed cycles, any dynamical system having a DAG as its influence graph can be considered as an open-loop system: no state variable of the system regulates in a feedback sense any other state. Various types of heuristics have been proposed to approximate a maximumsize DAG, seefor a survey and Ispolatov and Maslov (2008) for a recent application in the context of biological networks. The aim of this Section is to propose a heuristic algorithm for computing a maximal DAG in which any available a priori information on the open-loop part can be easily taken into account. Our approach starts by choosing a spanning forest for the undirected graph, i.e. a polytree T for the directed graph G. The polytree is then incremented by adding edges to it, as long as these edges are guaranteed to preserve acyclicity. For this purpose, it is convenient to use the notion of height of a vertex. One possible way to define the height of a vertex is as the maximum length of any path from any source vertex to v, call it h max (v) (this is normally called the depth in the graph-theoretical literature). Alternatively, one can use h min (v), defined as the minimum length of any directed path from any source vertex to v. Similarly, the height of a DAG G is defined, respectively, as h max (G) = max vV h max (v) or as h min (G) = max vV h min (v). h min corresponds to the maximum path length needed to reach any variable from at least one source, while h max corresponds to the worst case path length from a source to all of its reachable vertices.Proof. A new cycle is created by the addition of the edge i,j to a DAG G only if there is a path in G from v j to v i , but in this case h max (v i ) must be at least h max (v j )+1, which contradicts the hypothesis that h max (v i )  h max (v j ). Moreover, after the addition of the new edge, the h max can change only for the nodes v r  R(v j ), and can only increase. This happens when a longer path from a source to v r is created, passing through the new edge. This new path has length h max (v i )+1+k, where k  0 is the length of the longest path from v j to v r. Since there is already a path from v j to v r , then the original height of v r should be at least h max (v j )+k. So, if h max (v i ) < h max (v j ) in G, then the original height is greater or equal than the new path length h max (v i )+1+k, therefore the height of v r cannot increase. If instead h max (v i ) = h max (v j ) in G, when the edge i,j is added to the DAG, then h max of v j becomes equal to h max (v i )+1. Also for all vertices in R(v j ), the h max can grow as a consequence. Proposition 1 allows to increment a DAG while preserving acyclicity. Iterating the argument to all edges in the complement of the polytree, we have a heuristic procedure for the construction of a maximal DAG.The heuristic steps are the initial choice of the polytree T and the order in which the edges are examined. In Algorithm 1, any available a priori knowledge on the open-loop part of the system can be included in the initial polytree T .
INVESTIGATING STRONG MONOTONICITY
Method I: generation of a single large SCCWhen a systems like (1) is not exactly monotone, measuring how close it is to monotonicity is a computationally intense task. This measure (hereafter ) consists in identifying the smallest number of edges whose sign switch (or removal) yields a graph with only positive undirected cycles. This problem is studied in detail in. The main idea behind the heuristics described infor the computation of  is to minimize the number of negative entries of DA U D, where as before A U is the symmetrized version of A and D = diag(). In terms of the dynamical system (1), this operation means reversing the partial order along certain axes of R n , in order to 'align' the cone K with the positive orthant R n + as much as possible. In, an empirical estimate for  is found using a heuristic which repeatedly seeks for a vertex having more negative than positive incident edges and switches the sign to all its incident edges (i.e. sets to 1 the corresponding entry in the signature ). The algorithms ofenabling the computation of the 'best' D are applicable also to directed graphs with only minor adjustments. The practical effect of a pre-and postmultiplication by D = diag() is in fact to change sign to all rows and columns of the adjacency matrix in correspondence of the 1 entries in  [with the observation that sign. The minimization of the negative entries of A can be carried out also if A is not symmetric. Let A  = DAD be the corresponding adjacency matrix.Then the subsystem of (1) having A +  as its influence matrix is strongly monotone.Proof. Since A +  has only non-negative entries, the corresponding system is cooperative hence monotone. Furthermore, since A +  is irreducible so is the corresponding system. But a cooperative irreducible system is strongly monotone, see Theorem 4.1.1 of Smith (1988). When A +  is not irreducible, then its SCCs should be considered. Needless to say, Proposition 2 is inefficient unless the number of negative entries of A is first minimized, as explained above. The approach is summarized in the following Algorithm.Since the maximization of +1 entries of A  is heuristic, the whole procedure is heuristic. As we will see in Sections 5 and 6, the peculiarity of the approach outlined in Algorithm 2 is that it often leads to a decomposition in which a single large strongly monotone subsystem is present.
Method II: construction of multiple small SCCsIn this Subsection we propose a different approach to the problem of decomposing a system into strongly monotone subsystems. This approach is more prone to building small disconnected SCCs. Starting with an acyclic subgraph B  A, at each step the subgraph is incremented by an edge and split into SCCs. On each SCC, strong monotonicity can be tested via Lemma 2. The edge is retained only if all SCCs are strongly monotone, then the procedure is iterated.Algorithm 3 is heuristic with respect to the choice of B and the order of the edges in L. Its performances tend to improve if the DAG we start with is maximal.
EXAMPLE: YEAST CELL CYCLE MODELThe network shown inrepresents the influence graph of an extremely simplified model of the yeast (Saccharomyces cerevisiae) cell cycle, in response to an 'external' stimulation at the only source node cellsize. It was developed and studied in a boolean setting in. Its main characteristic is that it can reproduce faithfully the various phases of the yeast cell cycle, and the proper state transitions at the checkpoints between them. The influence graph shown in[with respect to the network of, we drop self-loops for convenience] is not a DAG and it is not monotone. Examples of frustrated cycles are the digon Clb1,2  Cdc20 or the cycles MBF  Clb5,6  Clb1,2  MBF and SBF  Cln1,2  Sic1  Clb1,2  SBF. The last two cycles encode both the propagation of the replication order from the source cellsize and the feedback reaction of the system which concludes the S phase of the cycle, inactivating its transcription factors MBF and SBF, and consequently initiating mitosis. When we apply the Page: 80 7683procedure of Algorithm 1, we obtain a minimal feedback arc set of seven edges, five of which are digons. One possibility for the resulting DAG is shown in(DAG is in black), where the height h max of the network is used to render the layout of the graph. For this DAG h min (DAG) = 2 and h max (DAG) = 6. Notice that the DAG has two sources, and both are needed to reach the entire DAG. In particular, for this choice of DAG the second source is Clb1,2, which is the master regulator of the entry and successive exit from the M phase of the cycle. The DAG breaks any path from the source cellsize to this critical vertex. The adjacency matrix of the directed graph ofhas 14 negative edges out of a total of 30 (disregarding self-loops). When minimizing the number of negative edges (i.e. when computing A  in Algorithm 2), the sign of all incident edges is changed first for the vertex Clb1,2 (8 negative edges out of 12), then for Clb5,6 (5 negative edges out of 7, after the first round of switches), Mcm1/SFF (3 out of 5 after the second switches) and Cln1,2 (2 out of 3). After all these sign switches, we are left with the graph G(A  ) ofin which there are only five negative edges left. In this case five is exactly the distance to monotonicity, and by dropping the five edges we are guaranteed that the subsystem is monotone. This monotone subsystem is not strongly connected and hence not strongly monotone. It has a SCC formed by the following six nodes: Clb1,2, Mcm1/SFF, Clb5,6, Cdh1, Swi5 and Sic1. The remaining six nodes instead form trivial (i.e. dimension 1) SCCs. Hence, although the complete network is a 'prototype' for negative feedback regulation, from Proposition 2, it hides in its structure a remarkably large strongly monotone subsystem involving half of the nodes of the network. In terms of the functioning of the cell cycle, the strategy behind this decomposition is far from obvious, except for the observation that the SCC is isolated from the source vertex cellsize, and that the influence of this last vertex is completely disconnected from the network by the cuts of the edges MBF  Clb5,6 and SBF  Cln1,2. Notice finally that deducing strong monotonicity of this SCC directly on the original graph (without the sign changes performed in) is a non-trivial task even for this small-scale example. When applying Algorithm 3 to the maximal DAG of, of the 7 edges dropped from the maximal DAG only two can be inserted without inducing negative directed cycles, and they both are in admissible digons (green edges in). In this case, two small strongly monotone SCCs are created, both of dimension two (the two vertex pairs joined by digons) as opposed to the single SCC of dimension 6 obtained with Algorithm 2. Notice that 4 of the 5 edges that destroy strong monotonicity point to Clb1,2. As already mentioned, in this model Clb1,2 is the regulator whose activation and consecutive deactivation governs the entry and exit from the M phase, phase which constitutes the regulatory part of the cycle in response to the external stimulation, and allows the cycle to progress. In the full model, Clb1,2 rises after the S phase, due to Clb5,6 and due to the double inhibitions Cln1,2  Cdh1  Clb1,2 and Cln1,2  Sic1  Clb1,2. Hence, the three edges connecting Clb5,6, Cdh1 and Sic1 to Clb1,2 must be cut in order to have a strongly monotone subsystem.
N.Soranzo et al.
LARGE-SCALE EXAMPLESOnly a limited number of large-scale biological networks are readily available as signed graphs [see e.g.;. Those considered in this study are of two different types: three are transcriptional networks in which a directed edge represents the action of a transcription factor on one of its target genes, and the sign means activation (+) or inhibition (). No stoichiometry is available for these networks. The other three networks instead represent signaling pathways. These are obtained from stoichiometric reactions, taking the signature of theFor each network, the histogram shows the distribution of the frequency of selection of an edge in a large number of nearly optimal trials. For the three transcriptional networks, there exists basically only a way to attain the maximal DAG. For the three signaling networks, instead, there is a degree of ambiguity in determining the 'open-loop' part of the dynamics, with only a fraction of the maximal DAG unanimously determined (from 1/3 for EGFR and Toll-like, to 1/2 of Macrophage). paths originating in a fan-out node and ending in a fan-in node may have opposite signs, and hence carry opposite orders at the fan-in (activatory on one channel, inhibitory on the other), a 'frustration' (i.e. a negative undirected cycle) which is a trademark for lack of monotonicity. For all networks, the restriction to the maximal DAG still contains a large fraction of the  'frustrated' edges (see in), meaning that the systems have a complex and potentially incoherent open-loop dynamics. A qualitative difference between the two classes of networks can be observed looking at h max on the DAGs (): the maximum length of a chain of events in the open-loop system is always much shorter in the transcriptional networks than in the signaling networks. On the contrary, the chain of events of minimum length required to reach every vertex (i.e. h min ) is almost the same in both types of networks. Notice how the complex regulatory structure for the signaling networks implies that only a fraction of the maximal DAG is unanimously identified as open-loop subsystem over repeated runs of Algorithm 1, see. In Tables 3 and 4, we compare the two procedures for the construction of strongly monotone SCCs. Obviously, the difference Page: 82 7683The following parameters are shown: the distance to strong monotonicity (), the number of strongly monotone subsystems (), the size of the largest strongly monotone subsystem () and the number of edges dropped that belong to a strongly monotone SCC ().The same parameters ofcan be appreciated only on the three signaling networks, which have a sufficient amount of feedback regulations. As anticipated, the size of the largest strongly monotone SCC detected (i.e. ) is consistently much higher for the method of Section 4.1 than for the one of Section 4.2. Apart from the large SCC, Algorithm 2 returns only trivial subsystems. For Algorithm 3, instead, the distribution of size of the non-trivial strongly monotone SCCs is shown in. Notice that our numbers for this last case are still higher than those reported in(and shown in), meaning that there is probably still room for improvement in our Algorithm 3.
N.Soranzo et al.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
CONCLUSION The investigation of the dynamical properties of large-scale biological networks poses a problem and a challenge for the field of Systems Biology because of its complexity and lack of suitable methodology. By using simple tools from graph theory, we have shown in this article that nearly-optimal solutions for a couple of important dynamical problems, such as the identification of a minimum set of feedback loops whose removal leave the system without regulation, and the decomposition of the network into dynamically 'simple' subsystems, may be found with heuristics which are computationally efficient also for networks of the several hundreds / few thousands of molecular species. While not optimal and restricted to a specific class of network representations (influence graphs), our approach is promising and the insight it provides on the structure of the networks already significant. Funding: This research was sponsored by a PRIN grant from MIUR, Italy. Conflict of Interest: none declared.
