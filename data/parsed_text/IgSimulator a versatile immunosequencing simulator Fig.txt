Motivation: The recent introduction of next-generation sequencing technologies to antibody studies have resulted in a growing number of immunoinformatics tools for antibody repertoire analysis. However, benchmarking these newly emerging tools remains problematic since the gold standard datasets that are needed to validate these tools are typically not available. Results: Since simulating antibody repertoires is often the only feasible way to benchmark new immunoinformatics tools, we developed the IgSimulator tool that addresses various complications in generating realistic antibody repertoires. IgSimulator's code has modular structure and can be easily adapted to new requirements to simulation. Availability and implementation: IgSimulator is open source and freely available as a Cþþ and Python program running on all Unix-compatible platforms. The source code is available from
IntroductionThe recent introduction of next-generation sequencing (NGS) technologies to antibody studies have resulted in a growing number of immunoinformatics tools for antibody repertoire analysis (). However, benchmarking these newly emerging tools remains problematic since the gold standard datasets that are needed to validate these tools are typically not available. Since simulating antibody repertoires is often the only feasible way to benchmark new immunoinformatics tools, many immunoinformatics groups have developed their own antibody repertoire simulators of various complexity (). Lack of a publicly available immunoinformatics simulator makes it difficult to benchmark multiple antibody analysis tools and forces every new immunoinformatics researcher to invest efforts into development of a yet another simulator. We argue that the time has come to develop a comprehensive publicly available immunoinformatics simulator, similar to the widely used ART () read simulator for NGS studies. Developing an immunoinformatics simulator is a more complex task than developing ART since it should reflect a complex process of forming antibody repertoires in a realistic statistical setting. These complications are further amplified by the fact that similar but distinct antibodies within a repertoire often differ from each other by only a small number of mutations, thus, making it difficult to distinguish them from sequencing errors. Moreover, antibody repertoires often feature a few large clusters (occurring as a result of in vivo clonal selection) accompanied by a large number of smaller clusters, presenting a challenge for the repertoire analysis algorithms that attempt to separate small clusters from often similar large clusters. Below we describe the IgSimulator tool that addresses various complications in generating realistic antibody repertoires. IgSimulator simulates repertoires and uses ART to simulate reads resulting from this repertoire.
Methods
Simulating individual antibodiesAntibody repertoires are generated by complex processes: V(D)J recombination, intergenic insertions and somatic hypermutations. IgSimulator models all these processes and generates repertoires based on the following features (). Distribution of the clone frequencies contains few overrepresented clones and plenty of low abundant clones. The lengths of exonuclease removals do not exceed 10 nt and are distributed uniformly. The lengths of N nucleotides, or non-genomic intergenic insertions, do not exceed 10 nt and are distributed uniformly. The lengths of P nucleotides, or inverted palindromic intergenic insertions, do not exceed 4 nt and are distributed uniformly. Frequencies of SHM in CDRs (per nucleotide) are higher than frequencies of SHM in FRs. SHMs are generated as a mix of motif based () and random changes.
Simulating antibody repertoiresThe repertoire simulation proceeds in the following five steps illustrated in. IgSimulator generates a set of the base antibody sequences using simulation of the V(D)J recombination mechanisms, somatic deletions of start and end of the gene segments and insertions of the non-genomic P and N nucleotides (step 1 in). By default, IgSimulator uses the IMGT database of human Ig germline genes (; user can provide different set of germline genes if necessary) and selects among equally likely V/D/J gene segments candidates to simulate the V(D)J recombination. IgSimulator randomly assigns the frequency to each base antibody sequence using the power law distribution (step 2 in). Evidence of this distribution was shown recently (). IgSimulator introduces the somatic mutations into each base antibody sequences resulting in mutated antibody sequences (step 3 in). To generate an antibody repertoire, IgSimulator randomly assigns the frequency to each mutated antibody sequence using the power law distribution (step 4 in). The frequencies represent the number of times each mutated antibody sequence will be present in the antibody repertoire. The resulting antibody repertoire is further subjected to an NGS read simulation using ART (step 5 on). To configure the diversity rate, IgSimulator uses the following parameters: # base sequences, # mutated sequences and repertoire size. A small difference between # mutated sequences and # base sequences leads to simulation of low abundant families of mutated antibodies. In contrast, big difference between # mutated sequences and # base sequences leads to simulation of highly repetitive repertoires that include large mutated groups (see Supplementary).
Simulating Ig-seq libraryIgSimulator uses a simulated repertoire as a reference and runs ART to simulate an Ig-seq library with reads featuring realistic and technology-specific error profiles. The user has an option to generate reads with errors that follow the specifics of Illumina. IgSimulator selects parameters of ART in such a way that the following conditions hold: (i) reads (or read-pairs) in the simulated library cover the variable region of the antibody (in the case of Illumina reads, IgSimulator generates paired-end overlapping reads with insert size similar to the length of the variable region), and (ii) the coverage of antibody sequences is uniform. As a result, IgSimulator creates an idealized repertoire for simulated library that can be used for further repertoire studies and benchmarking various repertoire analysis tools.
ConclusionsMany immunoinformatics algorithms have been developed for the challenging problem of antibody repertoire analysis. Our antibody repertoire simulator IgSimulator will help scientists to assess various immunoinformatics software tools and to choose the best pipeline for their research. The initial version of IgSimulator addresses most but not all aspects of modeling the antibody repertoires. In the future, it will be extended to address the following issues: (i) a datadriven modeling of the distribution of mutation across CDRs and FRs based on analyzing multiple immunoinformatics datasets, (ii) probabilistic model for modeling SHM motifs (), (iii) statistical inference methods for generating repertoires (), (iv) addition of insertions and deletions to the set of SHMs () and (v) biases in N addition such as the GC preference ().
V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Y.Safonova et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
