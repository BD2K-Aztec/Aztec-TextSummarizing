Motivation: Currently, more than 40 sequence tandem repeat detectors are published, providing heterogeneous, partly complementary, partly conflicting results. Results: We present TRAL, a tandem repeat annotation library that allows running and parsing of various detection outputs, clustering of redundant or overlapping annotations, several statistical frameworks for filtering false positive annotations, and importantly a tandem repeat annotation and refinement module based on circular profile hidden Markov models (cpHMMs). Using TRAL, we evaluated the performance of a multi-step tandem repeat annotation workflow on 547 085 sequences in UniProtKB/Swiss-Prot. The researcher can use these results to predict run-times for specific datasets, and to choose annotation complexity accordingly. Availability and implementation: TRAL is an open-source Python 3 library and is available, together with documentation and tutorials via http://www.vital-it.ch/software/tral.
IntroductionTandem repeats (TRs) are sequence features, where motifs, or TR units, are found right next to each other, often as imperfect repetitions (). Currently, more than 40 TR detector (TRD) programs exist, each focusing on different TR types and using different methodologies. We have shown that currently available TRDs do not provide exhaustive detections, and combining TRs from several TRDs is essential for reliable TR annotation (). Therefore, a researcher interested in TRs needs to handle all of the following tasks: (i) Executing and parsing results of several TRDs, despite no commonly accepted file format; (ii) Validating TR predictions and clustering redundant or overlapping results; (iii) Filtering out false positive TR predictions in a robust statistical framework; (iv) Annotating known TRs homogenously across homologous sequences, and discerning variation among the TRs (). Each of these tasks is implemented in TRALan open source Python 3 TR annotation library. TRAL is highly modularized, such that a researcher can use the implemented methods or customize them by adding other TRDs, overlap criteria, statistical tests or model-based annotation methods. The software is designed to run efficiently and user-friendly on single machines as well as on large computing clusters. For a variety of workflows, scripts and tutorials are available online.
Features and methodsAn overview of the structure of TRAL is shown in.
Annotate with sequence profile modelsA common task is to annotate sequences with TRs of a known motif. This allows to study the evolution of the TR across sequencehomologues, or to check whether a common motif occurs in tandem within a sequence. TRAL implements a circular profile hidden Markov model (cpHMM), adapting popular sequence profile models, e.g. from HMMER () to TRs (). Accurate TR annotation in the maximum likelihood framework is realized with the Viterbi algorithm, such that homologous TRs are homogenously annotated. As all TR annotations are described by the same profile model, they are comparable in terms of their characteristics (TR unit number, length, indels), enabling evolutionary studies (). cpHMMs can be created from single sequences, TRs or sequence profile models from databases.
Annotate with de novo tandem repeat detectorsFor de novo annotations, we implemented a scaffold for executing and parsing external TRD software. Six current TRDs are currently integrated: HHrepID (Biegert and S ding, 2008), Phobos (www.ruhr-unibochum.de/ecoevo/cm/cm_phobos.htm), TRED (), T-REKS (), TRF (), TRUST () and XSTREAM (). Further TRDs can easily be added to the framework. As we noted that some TRDs sometimes propose TRs that are not part of the input sequence, an automatic sanity check discards these. Importantly, profile HMMs can be used to refine de novo TR annotations. For example, a TRD may correctly identify a TR, but not capture all its TR units or the correct TR unit boundaries. The refinement can then be achieved by re-annotating with cpHMMs.
Identify and filter overlapping annotationsDifferent TRDs often predict overlapping TRs, and congruent predictions are very rare (). The user may be interested in discarding redundant TRs. However, not all overlapping predictions describe a TR redundantly (). We included a flexible system to establish overlap and clustering of TRs in TRAL. Two definitions of overlap for a pair of TRs are currently implemented: (i) having at least some characters in common and (ii) having a common ancestry of at least one pair of characters in alignments of multiple TR units for both TRs. In the next step, the clustered TR annotations can be filtered to contain only the best TR representative from a cluster according to user-defined criteria.
Test and filter for statistical significanceDistinguishing true from false positive TR annotations is another important task, which requires evaluating the statistical significance of a TR annotation. Several ad hoc and model-based statistics based on the multiple alignment of TR units have been proposed for this purpose (). TRAL implements these statistics, as well as their null-distributions for random TRs, such that the statistical significance of each TR (P-value) can be calculated.
Retrieve tandem repeat characteristicsFor each putative TR, TRAL provides access to characteristics such as TR unit alignments, TR unit length, number, divergence and indel distribution. The TR unit alignment can be optimized with attached external multiple sequence alignment software. Finally, TRAL can be used to build cpHMMs from each TR for annotation of homologous TRs on other sequences, or for iterative optimization of the TR annotation (see Section 2.1).
Performance evaluationWe evaluated the performance (runtime and memory requirements) of different TR annotation tasks with TRAL for 547 085 sequences in UniProtKB/Swiss-Prot (). TRs were annotated with four TRDs and with cpHMMs based on PFAM models (), and filtered for statistical significance and overlap. On average, such annotation required 8 s per protein sequence, mostly depending on the number and type of de novo TRDs used. For large annotation projects requiring parallelization, TRAL includes an annotation workflow, which can be run with GC3Piean open-sourceA sequence with two TRs: a poly-Q track (green), and a short TR (blue). (B) Illustration of TRAL structure together with the four most important data classes: a sequence can contain TR lists; a TR list can contain TRs; a TR can contain a cpHMM. For different use cases, different workflows can be build using these classes. For each class, input/output methods for a variety of formats are available. External software is described in the online documentationworkflow management system for diverse local, grid, cluster and cloud-based computing resources (; https://www.s3it.uzh.ch/software/gc3pie/).
FundingZHAW Anschubfinanzierung to M.A. be the SIB Swiss Institute of Bioinformatics is supported by the Swiss State Secretariat for Education, Research, and Innovation. The computation has been performed on the Vital-IT HPC. Conflict of Interest: none declared.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
E.Schaper et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
