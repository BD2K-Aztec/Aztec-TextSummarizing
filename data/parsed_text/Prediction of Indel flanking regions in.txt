Motivation: Insertion/deletion (indel) and amino acid substitution are two common events that lead to the evolution of and variations in protein sequences. Further, many of the human diseases and functional divergence between homologous proteins are more related to indel mutations, even though they occur less often than the substitution mutations do. A reliable identification of indels and their flanking regions is a major challenge in research related to protein evolution, structures and functions. Results: In this article, we propose a novel scheme to predict indel flanking regions in a protein sequence for a given protein fold, based on a variable-order Markov model. The proposed indel flanking region (IndelFR) predictors are designed based on prediction by partial match (PPM) and probabilistic suffix tree (PST), which are referred to as the PPM IndelFR and PST IndelFR predictors, respectively. The overall performance evaluation results show that the proposed predictors are able to predict IndelFRs in the protein sequences with a high accuracy and F 1 measure. In addition, the results show that if one is interested only in predicting IndelFRs in protein sequences, it would be preferable to use the proposed predictors instead of HMMER 3.0 in view of the substantially superior performance of the former. Contact:
INTRODUCTIONAs new protein sequences are discovered on an everyday basis and protein databases continue to grow exponentially with time, analysis of protein families, understanding their evolutionary trends and detection of remote homologues have become extremely important. The proteins that evolve from the same ancestor protein are called homologous proteins. A protein molecule is created in a cell as a chain of amino acids, called the polypeptide chain. A polypeptide chain can be represented as a string of characters by using the letter code of each amino acid. This string of characters is called the primary structure of a protein. In addition to the primary structure, a protein has secondary and tertiary structures (). Secondary structure of a protein refers to well-determined local sequence elements, such as an alpha helix, a beta strand or any other local sequence element that is neither a helix nor a strand. These other local sequences, usually called loops or coils, may have a large variety of shapes. These secondary structure elements of a protein can be combined together to create a motif, which is a simple combination of a few consecutive secondary structure elements with a specific geometric arrangement, such as helix-loop-helix or strand-loop-helix. Some, but not all, motifs are associated with specific biological functions. The tertiary structure of a protein refers to the 3-dimensional structure of the protein, where the secondary structure elements form the physical core of the 3-dimensional structure, and loops are located on the surface of the tertiary structure. A domain refers to a combination of several secondary elements and motifs, which may not necessarily be contiguous and which are usually packed in a compact structure. A protein may contain a single domain or several different domains, or several copies of the same domain. Normally, the proteins are classified into families based on the existence of a specific motif or domain in their structure, where the existence of such a motif or domain has a major indication about the biological role of the protein. The structural classification of proteins (SCOP) database is a comprehensive ordering of all the proteins of the known structures, according to their evolutionary and structural relationships (), where the fundamental unit of this classification is a domain. In this database, the proteins have been classified into families, superfamilies, common fold and, finally, into classes at the top level of the structural hierarchy. It is known that new proteins have evolved mainly through indel mutations (). Indel mutations have been found to occur more often in the loop regions (), and mainly in essential proteins and in those proteins that interact highly with others (). The functional divergence between homologous proteins may also be caused by indel mutations that occur in the regions between secondary structures of a protein (). Further, it has been found that differences among species, as well as many of the human diseases, are related to indel mutations, which occur less often than substitution mutations do (). Sequence alignment is one of the most commonly performed tasks in bioinformatics, and has been used in many applications, including sequence annotation, phylogenetic tree estimation, evolutionary analysis, secondary structure prediction and database search (). In recent years, considerable effort has been devoted to the development of protein alignment algorithms that can efficiently detect mutations, and infer structural and functional relationships among the aligned protein sequences. By using position-variant probability to score indel mutations, the profile hidden Markov model (pHMM;) is able to use the fact that indel mutations occur more frequently in some parts of a protein more than other parts (e.g. in the loop regions) (). Several software packages, such as HMMER () and SAM (), have implemented the pHMMbased alignment algorithms. Among these packages, HMMER is the most-used software package in protein database search and comparison. A collection of pHMMs covering many protein families have been generated using HMMER, and they are available in the Pfam database (). The disadvantage of using pHMM-based alignments for detecting mutations would be that the corresponding alignment algorithms assume the occurrence of mutations in the protein sequence to follow a fixed first-order Markov chain. When a pair of protein sequences has been aligned, an indel region is defined as a gap in any of the two sequences. Segments of protein sequence immediately before and after an indel region are called flanking regions (see Supplementary). The database called IndelFR (Indel Flanking Region) database contains sequence and structure information of 2 925 017 indels with their flanking regions, including their positions, length, amino acid composition and secondary structure (). In the IndelFR database, the structure-based sequence alignment program PDBeFold () has been used to align homologous non-redundant proteins obtained from the ASTRAL95 database (), which in turn has used the non-redundant protein domains from the SCOP database that have similarity levels as high as 95%. It has been found that there exists a strong relationship between indels and their flanking regions (). The objective of this article is, therefore, to propose a novel scheme to predict indel flanking regions in a protein sequence, based on a variable-order Markov model (VOMM) of the flanking regions. We propose two indel flanking region (IndelFR) predictors: one predictor using prediction by partial match (PPM) () and other using probabilistic suffix tree (PST) ().
METHODS
VOMM for flanking regionsIn the IndelFR database, indels and their flanking regions are extracted from alignments by dividing equally the region between two adjacent indels, and by taking 10 amino acids as the upper limit for the flanking regions. It has been shown bythat the impact of an indel on its flanking regions reduces dramatically as we move away from the indel, and this impact is negligible after 10 amino acids. In this study, we classify the indel regions stored in the IndelFR database according to the number of amino acids in the flanking regions as follows:(i) If the number of amino acids between two indels is420, then we consider each of the two flanking regions between them to have exactly 10 amino acids.(ii) If the number of amino acids between two indels is 20, but !2, we still consider these two indels as two separate indels, and the region between them split equally or as equally as possible to define the flanking regions between the two indels.(iii) If the number of amino acids between two adjacent indels in the same sequence is unity, then we combine the two indels along with the single amino acid in between to treat the combination as a single indel.(iv) If the number of amino acids between two adjacent indels that are not in the same sequence is unity, then we treat these two indels as distinct. Thus, the right (left) flanking region of one of the indels and the left (right) flanking region of the other indel would each have only one amino acid. We refer to an indel along with its left and right flanking regions as an indel flanking region (IndelFR).shows an example illustrating each of the above situations. It is noted that there are three IndelFRs for each of the two alignments shown in. It is to be recalled that in the IndelFR database, a given protein sequence has been aligned with a large number of protein sequences that belong to the same superfamily. For example, consider the protein d1allb_. In the IndelFR database, 87 pairwise alignments have been carried out for this protein (see Supplementary). From these alignments, we now identify all the IndelFRs for the protein d1allb_ and mark off IndelFR segments, which are the segments of the protein sequence to which all the identified IndelFRs collectively belong to. For the protein sequence d1allb_, these segments are observed to be from position 88 to 97 and from 100 to 115, and no indel is located outside these segments. This process can be applied to any of the protein sequences available in the IndelFR database to obtain its IndelFR segments.shows such segments for some of the protein sequences selected from the Globinlike superfamily, the segments being marked by thick lines. The above results strongly suggest that the IndelFRs for a given protein sequence are conserved within only the IndelFR segments. This is a significant finding, which we will use later in this section in training the model for the proposed IndelFR predictor. We now present a technique to build an IndelFR predictor for a given protein fold. In this study, the protein folds are selected from the following protein classes: All-proteins, All-proteins and and proteins (a/b) (see Supplementary Tables S3S5). It is noted that each protein fold contains one or more superfamilies and each superfamily contains one or more protein families. Therefore, the proposed IndelFR predictor for a given protein fold can be used to predict IndelFRs in protein sequences that belong to different protein families within the same fold. Because we already know how to obtain the locations of the IndelFR segments for a protein sequence, we build our proposed model for the IndelFR predictor by confining only to the IndelFR segments of each of the protein sequences in a given fold. We extract the flanking regions of all the sequences in the fold and divide them into two sets, the left and right sets. The left set contains all the left flanking regions, whereas theright set contains all the right flanking regions. The flanking regions in either of the two sets have, in general, different lengths, as these lengths, according to our earlier assumption, can vary between 1 and 10. The proposed IndelFR predictor for a given protein fold contains two VOMMs (): one for the left set and the other for the right set. These models learn the conditional probability P k js ik. .. s i1  of observing a particular amino acid 2  protein at position i, given a context s=s ik. .. s i1 of length k, where the context s=s ik. .. s i1 represents all the previously observed amino acids before is observed at position i, each s j , j 2 fi  1;. .. ; i  kg, representing one of the possible 20 amino acids. The context length k could vary depending on the size and nature of the string of amino acids in a flanking region, and  protein is the alphabet set containing all the amino acid symbols. We select a VOMM instead of a fixed-order one for the following reasons: (i) the chosen model should take into consideration varying sizes of the flanking regions in a set, and (ii) it should take care of situations where a flanking region in which a particular amino acid 2  protein does not exist for a given context of length m. In the latter case, a VOMM would allow us to reduce the length of the context to be less than m. Over the years, many VOMM structures, such as Lampel-Ziv compression (), context tree weighting (), PPM () and PST (), have been proposed. We will briefly discuss here only two of them, namely, PPM and PST, which are among the most commonly used structures in prediction applications. The effectiveness of PPM and PST for prediction of sequences in various applications has been examined by. PST has also been used to model DNA sequences by. Further, it has been used in modeling and prediction of protein families by Bejerano and Yona (2001). In PPM, to build a VOMM for the left (right) set of flanking regions, we start by analyzing a subset of the left (right) flanking regions as the training set and counting the number of occurrences of the amino acid immediately after the context s, that is, counting the number of occurrences of the pattern s in the training set for each amino acid 2  protein and for each context s=s ik. .. s i1 of length k, where each s j , j 2 fi  1;. .. ; i  kg, represents one of the possible 20 amino acids. The context length k varies from zero to D, where D is the memory length of the VOMM. Hence, for each value of k, we can compute the conditional empirical probability ~ P k js () aswhere N s is the number of occurrences of the pattern s in the training set. For k = 0, we can calculate the conditional empirical probability, ~ Pj, where represents an empty context. PPM handles the zero frequency problem by going through the mechanisms of escape and exclusion (). In the escape mechanism, for each context s=s ik. .. s i1 of length k, we make use of a probability mass P k escape js for all the amino acids that do not appear after the context s=s ik. .. s i1 in the training set. There are different ways of defining the escape probabilities for a context. These definitions are generally based on intuition and experience, and not on any underlying theory. For example, in, this escape probability has been defined aswhere  s is a set of amino acids appearing after the context s=s ik. .. s i1 , i.e.  s =f : N s 40g, and j s j denotes the number of elements in  s. Accordingly, the conditional probability is modified asIn the above equation, if P k1 js ik+1. .. s i1  is zero, then Equation (3) is recursively modified by using contexts of shorter lengths as shown below: P k1 js ik+1. .. s i1 = P k1 escapejs ik+1. .. s i1  P k2 js ik+2 .
.. s i1  5In the exclusion mechanism, if a prediction fails for a certain context, then the unseen amino acid cannot be one of the amino acids that has been observed after that context, and the relevant alphabet set for all the shorter contexts should be reduced by eliminating these observed amino acids. Hence, every amino acid 2  s observed after context s=s ik. .. s i1 is excluded, when we calculate the conditional probability for all contexts shorter than s=s ik. .. s i1. An example of the PPM structure of VOMM is given in the Supplementary Material Section 1. In the PST structure, a single tree with depth D is constructed to represent a VOMM of memory length D. The nodes in the tree have different degrees varying from zero (for leaves) to the size of the alphabet set  protein (for the internal nodes and the root). Each edge in the tree is labeled by a single amino acid from the set  protein. Each node in the tree is labeled by a unique context s=s ik. .. s i1 , where the context length varies from zero (for the root) to D. Also, each node is assigned a conditional probability P k js, where 2  protein. It should be noted that the context s =s ik. .. s i1 is generated by moving from the node to the root (i.e. in PST, the father of the node labeled by s 1 s 2 s 3 is the node s 2 s 3 , and not s 1 s 2 as in a regular suffix tree). To build the PST structure T for the left or for the right flanking region, we need to set the following four parameters:(i) The memory length parameter D of PST. (ii) The context threshold parameter N T , where N T =c  m, c 05c 51 being a constant and m the total number of flanking regions in the left or right set. The parameter N T determines which contexts would be included in building the PST structure. If the. IndelFR segments where flanking regions may exist for some selected protein sequences. The segments are indicated by thick lines number of occurrences of a context is less than N T , then such a context is excluded in building the structure.(iii) The parameter r is used to determine whether the context s=s ik .. . s i1 contributes additional information in predicting the amino acid relative to its 'parent' or 'suffix' context s ik+1. .. s i1 , denoted by sufs. The ratio P k js=P k1 jsufs is chosen to be outside the interval 1=r; r. To make the contribution of this context to be sensitive, r is chosen to be 1+, being a small quantity.(iv) The parameter B s is chosen to be B s =5  j s j, as suggested by Henikoff and Henikoff (1996), to ensure that for a given context the probability of an amino acid 2  protein does not become zero. Let N s be the number of occurrences of the context s=s ik. .. s i1 in the training set of the left (right) flanking regions, N s the number of occurrences of the pattern s in the left (right) training set and P k js the conditional probability associated with the node labeled by the context s=s ik. .. s i1. The various steps to build the PST structure for the left (right) training set are as follows.Step 1: Create a tree T with a single root node labeled by an empty context , and create an empty set set ptr. Step 2: Add to the set set ptr all the contexts of length unity that have occurred more number of times than N T , the context threshold (i.e. N s 4N T ).Step 3: Select a context from set ptr .Step 4: Test if there is an amino acid 2  s that has a conditional empirical probability ~ P k js given by Equation(1) satisfying the following inequality:Step 5: Test if there is an amino acid (not necessarily the same amino acid as in Step 4) from alphabet  s satisfying the conditionStep 6: If the conditions in Steps 4 and 5 are both satisfied, go to Step 7; otherwise (i.e. condition in Steps 4 or 5 is not satisfied), go to Step 10. Step 7: Test if the parent node of the context s, labeled by sufs, already exists in the tree T. If yes, add the node corresponding to this context s to the tree T. Step 8: If the parent node for s in Step 7 does not exist, then create a node for this context s and for its parent node. If the parent node of the latter does not exist, then repeat this procedure until an existing parent node in the tree is reached. For example, assume a node labeled by context s=C exists in the tree, and we are trying to add a node labeled by context s=ABDC to the tree. In PST, the parent node for the context s=ABDC is a node labeled by context BDC, which does not exist in the tree. Also, the parent node of the context BDC is a node labeled by context DC, which also does not exist in the tree. But the parent node of the context DC, namely, the node labeled C exists in the tree. Hence, we have to add two more nodes labeled BDC and DC, in addition to the node labeled ABDC to the tree. This is illustrated in the Supplementary.Step 9: Adjust the conditional probability for each added node in Steps 7 or 8, so that the probability of an amino acid 2  protein for a given context is given byStep 10: If the length of s5D, and there exists a pattern s, which has occurred more number of times than N T (i.e. N s ! N T ), then add the pattern s to set ptr .Step 11: Remove the context s from set ptr , and repeat Steps 311 until set ptr becomes empty. An example of building a PST structure with the parameters D=2; N T =0:01 and r = 1.05 is given in the Supplementary Material Section 2.
Prediction of indel flanking regions using VOMMGiven a test protein sequence S n =s 1 s 2 s 3. .. s n of length n, we scan it using a running window of length L moving it one amino acid at a time. To determine whether the string of amino acids within a window contains a flanking region, we compute the probability of this string using VOMM. For a VOMM, we use Pwin i  to denote the probability of the string seg i =s i s i+1. .. s i+L1 of length L. If VOMM has a memory length D5L, then Pwin i , which is also referred to as the likelihood of win i , is given by Yona (2011):We calculate the various probabilities on the right side of Equation (6) by using PPM or PST. If the probability P k s j js jk s jk+1. .. s j1  for s j , i j i+L  1 does not exist, we proceed as follows:(a) In the case of PPM, we use the escape and exclusion mechanisms, in conjunction with Equation (3), to calculate each of the probabilities in Equation (6).(b) In the case of PST, we find the longest suffix of the context s jk s jk+1. .. s j1 that exists in the tree. Assuming the longest suffix of the context s jk s jk+1. .. s j1 that exists in the tree to beMaximizing the likelihood Pwin i  is equivalent to minimizing the average log-loss function in a lossless compression algorithm (), where the average log-loss function is defined as8 the logarithm being taken to base 2. It may be noted that in compression, the log-loss function represents the average number of bits per character, as the term log P k s j js jk s jk+1. .. s j1  is the shortest code that can be assigned to the character s j , given the conditional probability distribution P k s j js jk s jk+1. .. s j1 . Therefore, win i contains a flanking region if it has a low average log-loss value compared with that of its neighboring windows.An example illustrating the steps for calculating the probability of a particular segment using PPM or PST is given in the Supplementary Material Sections 1 and 2. The proposed IndelFR predictor for a given protein fold can be built using PPM or PST. We build the left PPM (LPPM) and the left PST (LPST) for the left set, and build the right PPM (RPPM) and the right PST (RPST) for the right set. LPPM and RPPM are combined together to form a PPM IndelFR predictor for memory length D. Similarly, LPST and RPST are combined together to form a PST IndelFR predictor for memory length D. Such IndelFR predictors are built for various values of the memory length D, D 2 f0; 1; 2; 3; 4; 5; 6; 7; 8; 9g, so that we can determine the value of D that results in the best performance in predicting the locations of IndelFRs. The procedure to extract the predicted locations of these regions in the test protein sequence using PPM IndelFR predictor is given in Algorithm 1. A similar procedure is applied for the proposed PST IndelFR predictor.Algorithm 1: Procedure to extract the predicted locations of IndelFRs in a test protein sequence using the proposed PPM IndelFR predictor with a memory length D.Step 1: Scan the test protein sequence S n =s 1 s 2 s 3. .. s n of length n using a running window of length L = 10.Step 2: Compute and store the average log-loss values for each window using LPPM and RPPM with a memory length D using Equation (8). Step 3: From the LPPM average log-loss values, choose the mean of these values as the threshold. Then, find the locations of the local minima that have values below the threshold. Step 4: Repeat Step 3 using the RPPM log-loss values and find the locations of the local minima. Step 5: Find the locations of IndelFRs in the test protein sequence by identifying each of the LPPM minimum locations that is immediately followed by an RPPM minimum location. The identified LPPM and the corresponding RPPM minimum locations represent the start locations of the predicted left and right flanking regions, respectively, and each flanking region (left or right) has a length of at most 10. For each selected minimum location at , the predicted locations for this flanking region (left or right) are limited to ; +1; +2;. .. ; +9. Step 6: For the test protein sequence, use the actual locations of IndelFRs and the predicted locations to determine the accuracy and the F 1 measure. determine the accuracy and F 1 measure for the PST IndelFR predictor to be 72 and 70%, respectively. The average accuracy and F 1 measure values of the PPM predictor for various values of the memory length D, D 2 f0; 1; 2; 3; 4; 5; 6; 7; 8; 9g, are obtained for each of the 11 chosen protein folds from the All-protein class, and are shown in. It is observed from this figure that the best choice for the memory length D is 4. Further, the accuracy varies from 74 to 98% and the F 1 measure from 54 to 99% for the various folds. The average accuracy and F 1-measure values of the PPM predictor, with a memory length of 4, over the All-protein class are 91 and 92%, respectively. In a similar manner, the average accuracy and F 1-measure values of the PST predictor for various values of the memory length D, D 2 f0; 1; 2; 3; 4; 5; 6; 7; 8; 9g, are obtained for each the 11 chosen protein folds from the All-protein class (see Supplementary). The results for the PST predictor strongly suggest that the best choice for the memory length D is again 4. Further, the accuracy varies from 63 to 96% and the F 1 measure from 54 to 97% for the various folds. The average accuracy and F 1-measure values of the PST predictor, with a memory length of 4, over the All-protein class are 88 and 89%, respectively. The average accuracy and F 1 measure values of the proposed PPM and PST predictors for various values of the memory length D, are obtained for each of the remaining 14 and 18 protein folds from the protein classes, All-protein class and and protein (a/b) class, respectively (see Supplementary Tables S6S13). These results show that the best choice for the memory length D is still 4 for all the selected protein folds. In addition, the results indicate that the proposed predictors perform better on those protein folds that have a large number of protein sequences. The average accuracy and F 1 measure values of the proposed PPM and PST predictors with D = 4, for the selected 11, 14 and 18 protein folds from the three protein classes are shown in. Average performances in terms of the accuracy and F 1 measure, over all the protein sequences contained in the 11, 14 and 18 protein folds of the IndelFR database belonging to the Allprotein, All-protein and and protein (a/b) classes, respectively, for the two proposed predictors are given in. The table shows that the proposed PPM and PST predictors with D = 4 provide about the same average performance.
Prediction in SABmark 1.65To have a more stringent assessment of the performance of the proposed predictors, we now test the two predictors with D = 4 on the sequence alignment benchmark (SABmark 1.65) (). It should be noted that the SABmark is generated from the SCOP database, and covers the entire known protein fold space with two sets, referred to as the Superfamily set and the Twilight set. The similarity level between any two protein sequences is 550% in the Superfamily set, while it is at most 25% in the Twilight set, in contrast to that in the IndelFR database, which contains protein sequences that have a similarity level that could be as high as 95%. To evaluate the performance of the proposed PPM and PST predictors on the Superfamily and Twilight sets, we select protein sequences from the protein folds belonging to these sets; the folds chosen are only those for which the predictors have already been designed using the IndelFR database. The average accuracy and F 1 measure of the proposed predictors for each of the above protein folds are given in Supplementary Table S14. The average performance of the proposed predictors is also given infor the Superfamily and Twilight sets. These results show that the proposed predictors are still able to predict the IndelFRs in the selected protein folds from both the sets with a high accuracy and F 1 measure, even though the similarity level between any two protein sequences is at most 50% in the case of the Superfamily set, and at most 25% in the case of the Twilight set. In addition, the results show that the performances of the two proposed predictors are almost the same for both sets, the average accuracies being $75% and the average F 1 measures being $79%. The average accuracy values and average F 1-measure values for the proposed IndelFR predictors for the selected protein folds from the three protein classes are shown in. Average accuracy and F 1-measure values for the PPM IndelFR predictor for different protein folds selected from the All-protein class for various values of the memory length D, where A1, A3, A4, A22, A25, A26, A35, A39, A45, A118 and A133 are the protein folds (see Supplementary Table S3). Average accuracy and F 1-measure values for the proposed PPM and PST IndelFR predictors with D = 4 for different protein folds selected from the All-protein, All-protein and and protein (a/b) protein classes for memory length D = 4, where A1, A3, A4, A22, A25, A26, A35, A39, A45, A118, A133, B6, B18, B29, B34, B35, B36, B40, B42, B47, B50, B55, B60, B82, B121, C1, C2, C3, C14, C23, C26, C36, C37, C47, C55, C56, C61, C67, C68, C69, C94, C95 and C108 are the protein folds (see Supplementary Tables S3S5) Figures 6 and 7 for the Superfamily and Twilight sets, respectively.
Comparison with HMMERThe performance of the proposed predictors with D = 4 is now compared with that obtained using the latest version of the alignment software HMMER, HMMER 3.0 (). HMMER 3.0 implements the alignment of a protein sequence with the pHMM representing a particular protein family. A collection of pHMMs covering many protein families is available in the Pfam database (). To be able to make this comparison, it is necessary to find the Pfam pHMMs for all protein families that belong to a protein fold for which the PPM and PST predictors have already been designed using the IndelFR database. The protein families for the selected 11, 14 and 18 protein folds from the three protein classes are given in Supplementary Tables S3S5. Prediction performance using HMMER 3.0 is obtained on the IndelFR database, as well as on the Superfamily and Twilight sets, and the results for the selected 11, 14 and 18 protein folds are given in Supplementary Tables S15S20. The average performances obtained using HMMER 3.0 on the IndelFR database and on the Superfamily and Twilight sets, are also included in. The results indicate that the proposed predictors significantly outperform that obtained using HMMER 3.0 in terms of both accuracy and F 1 measure. It should be noted that the proposed IndelFR predictors are more general than when HMMER 3.0 is used in that the proposed PPM or PST predictor for a given protein fold is capable of predicting the indel flanking regions for any protein sequence from any protein family in that fold, whereas HMMER 3.0 has to use different pHMMs depending on the family of the protein fold to which the protein sequence belongs. For instance, we have to design only one IndelFR predictor for the Globin-like fold, while HMMER 3.0 has to use five different pHMMs (see Supplementary Tables S3S5).
CONCLUSIONIn conclusion, the results show that if one is interested only in predicting the indel flanking regions in protein sequences, then it would be preferable to use the proposed predictors instead of using HMMER 3.0 in view of the substantially superior. Average accuracy and F 1 measure values for the proposed PPM and PST predictors with D = 4 and that obtained using HMMER 3.0 over all the protein sequences contained in the selected 11, 14 and 18 protein folds from the All-protein, All-protein and and protein (a/b) classes, respectively, for (a) IndelFR database, (b) SABmark-Superfamily set and (c) SABmark-Twilight setperformance of the former. It should be noted that if HMMER 3.0 is used for prediction, one would need as many pHMMs as the number of families in a given fold, while only one proposed predictor is needed for a given fold. Moreover, it should be noted that the proposed IndelFR predictors are built in a fully automated manner without using any prior assumption about the occurrence of mutations in the protein sequences, as in the case of scoring schemes. We anticipate that our study will not only enable future studies on the modeling of indel mutations, but will also open up new avenues for research concerning protein evolution, structures and functions.
The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Prediction of indel flanking regions in protein sequences at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M.Al-Shatnawi et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
RESULTS AND DISCUSSION In this section, we evaluate the performance of the predictors proposed in Section 2. For this purpose, from the SCOP database, we select 11, 14 and 18 protein folds from different protein classes: All-proteins, All-proteins and and proteins (a/b), respectively (see Supplementary Tables S3S5). This selection is confined to those protein folds that have indel flanking regions listed in the IndelFR database. We build the PPM and PST IndelFR predictors proposed in Section 2 for each of the selected protein folds. These predictors are built for various values of the memory length D, D 2 f0; 1; 2; 3; 4; 5; 6; 7; 8; 9g, so that we can determine the value of D that provides the best performance. We use the k-fold cross-validation method for training and testing the proposed IndelFR predictors, where k = 10. Consequently, k iterations of training and testing are performed for each predictor. In the training phase, we train the IndelFR predictor for a given protein fold using the indel flanking regions listed in the IndelFR database. In the testing phase, we first test the trained predictors on the protein sequences from the same protein fold belonging to the IndelFR database and next, on the set of protein sequences from the same protein fold but belonging to the sequence alignment benchmark (SABmark 1.65) (Walle et al., 2005). Finally, the performance of the two proposed predictors is compared with that using the latest version of the alignment software HMMER, HMMER 3.0 (Finn et al., 2011). We evaluate the performance of the proposed predictors using the measures of accuracy and F 1 measure, which are the commonly used metrics in the evaluation of the performance of prediction techniques in bioinformatics (Fawcett, 2006; Sonego et al., 2008) (see Supplementary Material Section 3 for more details). 3.1 Prediction in IndelFR database The average log-loss values for each test protein sequence are computed for each of the two proposed predictors. For the purpose of illustration, the average log-loss values using the two predictors for the protein sequence d1liab_ are shown in Figure 3. It is seen from this figure that the average log-loss value around the flanking regions is much less than that around the other regions. It should be noted that for each of the test protein sequences, we follow the steps outlined in Algorithm 1 to extract the predicted locations of IndelFRs, and to calculate both the accuracy and the F 1 measure. As seen from Figure 3a, the PPM IndelFR predictor predicts the locations (A, B), (C, D), (E, F) and (G, H) as the start locations for IndelFRs (left and right, respectively), while this predictor ignores the RPPM minimum location (I), as it is not preceded by an LPPM minimum location. To compute the accuracy and the F 1 measure, we use the actual IndelFRs shown in Figure 3c taken from the IndelFR database, and the locations predicted by the proposed PPM IndelFR predictor. The accuracy and F 1 measure are found to be 81 and 77%, respectively. In a similar manner, using the results shown in Figure 3b, we Fig. 3. Average log-loss values for the d1liab_ protein sequence: (a) using PPM IndelFR predictor and (b) using PST IndelFR predictor. (c) Ground truth for the IndelFR taken from the IndelFR database (Zhang et al., 2012). Solid dots represent the start locations of the predicted left flanking regions and the stars that of the predicted right flanking regions
