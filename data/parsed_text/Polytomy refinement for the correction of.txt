Motivation: Large-scale methods for inferring gene trees are error-prone. Correcting gene trees for weakly supported features often results in non-binary trees, i.e. trees with polytomies, thus raising the natural question of refining such polytomies into binary trees. A feature pointing toward potential errors in gene trees are duplications that are not supported by the presence of multiple gene copies. Results: We introduce the problem of refining polytomies in a gene tree while minimizing the number of created non-apparent duplications in the resulting tree. We show that this problem can be described as a graph-theoretical optimization problem. We provide a bounded heur-istic with guaranteed optimality for well-characterized instances. We apply our algorithm to a set of ray-finned fish gene trees from the Ensembl database to illustrate its ability to correct dubious duplications. Availability and implementation: The C++ source code for the algorithms and simulations described in the article are available at
INTRODUCTIONWith the increasing number of completely sequenced genomes, the task of identifying gene counterparts in different organisms becomes more and more important. This is usually done by clustering genes sharing significant sequence similarity, constructing gene trees and then inferring macro-evolutionary events such as duplications, losses or transfers through reconciliation with the phylogenetic tree of the considered taxa. The inference of accurate gene trees is an important step in this pipeline. While gene trees are traditionally constructed solely from sequence alignments (), recent methods incorporate information from species phylogenies, gene order and other genomic footprint (). A large number of gene tree databases are now available (). But constructing accurate gene trees is still challenging; for example, a significant number of nodes in the Ensembl gene trees are labelled as 'dubious' (). In a recent study, we have been able to show that $30% of 6241 Ensembl gene trees for the genomes of the fishes Stickleback, Medaka, Tetraodon and Zebrafish exhibit at least one gene order inconsistency and thus are likely to be erroneous (). Moreover, owing to various reasons such as insufficient differentiation between gene sequences and alignment ambiguities, it is often difficult to support a single gene tree topology with high confidence. Several support measures, such as bootstrap values or Bayesian posterior probabilities, have been proposed to detect weakly supported edges. Recently, intense efforts have been put towards developing tools for gene tree correction (; Gorecki and Eulenstein, 2011a,b;). A natural approach is to remove a weakly supported edge and collapse its two incident vertices into one (), or to remove 'dubious' nodes and join resulting subtrees under a single root (). The resulting tree is non-binary with polytomies (multifurcating nodes) representing unresolved parts of the tree. A natural question is then to select a binary refinement of each polytomy based on appropriate criteria. This has been the purpose of a few theoretical and algorithmic studies conducted in the past years, most of them based on minimizing the mutation (i.e. duplication and loss) cost of reconciliation (). In the present article, we consider a different reconciliation criterion for refining a polytomy, which consists in minimizing the number of non-apparent duplication (NAD) nodes. A duplication node x of a gene tree (according to the reconciliation with a given species tree) is a NAD if the genome sets of its two subtrees are disjoint. In other words, the reason x is a duplication is not the presence of paralogs in the same genome, but rather an inconsistency with the species tree. Such nodes have been flagged as potential errors in different studies (). In particular, they correspond to the nodes flagged as 'dubious' in Ensembl gene trees. We introduce the polytomy refinement problem in Section 2, and we show in Section 3 how it reduces to a clique decomposition problem in a graph representing speciation and duplication relationships between the leaves of a polytomy. We develop a bounded heuristic in Section 4, with guaranteed optimality in well-characterized instances. In Section 5 we exhibit a general methodology, using our polytomy refinement algorithm, for correcting NAD nodes of a gene tree. We then show in Section 6 that this approach is in agreement with the observed corrections of Ensembl gene trees from one release to another. *To whom correspondence should be addressed.  The Author 2014. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/by-nc/4.0/), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com
THE POLYTOMY REFINEMENT PROBLEMPhylogenies and reconciliations. A phylogeny is a rooted tree that represents the evolutionary relationships of a set of elements (such as species, genes,. .. ) represented by its nodes: internal nodes are ancestors, leaves are extant elements and edges represent direct descents between parents and children. We consider two kinds of phylogenies: species trees and gene trees. A species tree S describes the evolution of a set of related species, from a common ancestor (the root of the tree), through the mechanism of speciation. For our purpose, species are identified with genomes, and genomes are simply sets of genes. As for a gene tree, it describes the evolution of a set of genes, through the evolutionary mechanisms of speciation and duplication. Therefore, each gene g, extant or ancestral, belongs to a species denoted by s(g). The set of genes in a gene tree is called a gene family. A leaf-label corresponds to a genome in a species tree, and to a gene belonging to a genome in a gene tree. Given a phylogeny T, we denote by l(T) the leaf-set and by V(T) the node-set of T. Given a node x of T, we denote by l(x) and call the clade of x, the leaf-set of the subtree of T rooted at x. We call an ancestor of x any node y on the path from the root of T to the parent of x. In this case we write y5x. Two nodes x, y are unrelated if none is an ancestor of the other. For a leaf subset X of T, lca T X, the lowest common ancestor (LCA) of X in T, denotes the farthest node from the root of T, which is an ancestor of all the elements of X. In this article, species trees are assumed to be binary: each internal node has two children, representing its direct descendants (see S in). For an internal node x of a binary tree, we denote by x ' and x r the two children of x. DEFINITION 1. (Reconciliation) A reconciliation between a binary gene tree G and a species tree S consists in mapping each internal or leaf node x of G (representing respect. an ancestral or extant gene) to the species s(x) corresponding to the LCA in of the set fsl; for all l 2 lxg. Every internal node x of G is labelled by an event E(x) verifying: Ex= Speciation (S) if s(x) is different from sx '  and sx r , and Ex= Duplication otherwise. We define two types of duplication nodes of a gene tree G. A Non-Apparent-Duplication (NAD) is a duplication node x of G such that [ x2lx' x   \ [ y2lxr y   =;. A duplication that is not an NAD is an apparent duplication (AD) node, i.e. a node with the left and right subtrees sharing a common leaf-label. Therefore, any internal node x of G is of type S, AD or NAD. The gene trees we consider might be non-binary. We call polytomy a gene tree with a non-binary root (see F in). DEFINITION 2. (Binary refinement) A tree H T is a refinement of a tree T if and only if the two trees have the same leaf-set and T can be obtained from H T by contracting some edges. When H T refines T, each node of T can be mapped to a unique node of H T so that the ancestral relationship is preserved. H T is a binary refinement of T if and only if H T is binary and is a refinement of T.In this article, as only binary refinements are considered, we omit the term binary from now. Problem statement. The general problem we address is the following: Given a non-binary gene tree G and a species tree S, find a refinement of G containing the minimum number of NADs with respect to S. Such a refinement of G is called a minimum refinement of G w.r.t. S. Hence, we aim at refining each non-binary node of G. We first show that each such non-binary node of G can be refined independently of the other non-binary nodes. THEOREM 1. Let fG i ; for 1 i ng be the set of subtrees of G rooted at the n children fx i ; for 1 i ng of the root of G. Let H min G i ; S be a minimum refinement of G i w.r.t. S. Let G 0 be the tree obtained from G by replacing each G i by H min G i ; S. Then a minimum refinement of G is a minimum refinement of G 0 .It follows from Theorem 1 that a minimum refinement of G can be obtained by a depth-first procedure iteratively solving each polytomy G x , for each internal node x of G. In the rest of this paper, we consider G as a polytomy, and we denote by F the forest fG 1 ; G 2 ;. .. G n g obtained from G by removing the root. For simplicity, we make no difference between a tree G i of F and its root. In particular, sG i  corresponds to srootG i , where rootG i  is the root of G i (). We are now ready to define the main optimization problem we consider. Minimum NAD polytomy refinement (MinNADref) problem: Input: A polytomy G and a species tree S; Output: In the set HG of all refinements of G, a refinement H with the minimum number of NAD nodes. Such a refinement is called a solution to the MinNADref problem.
A GRAPH-THEORETICAL CHARACTERIZATIONWe show (Theorem 2) that the MinNADref Problem reduces to a clique decomposition problem on a graph that represents the impact, in terms of NAD creation, of joining pairs of trees from F. The join graph of a polytomy. We first define a graph R based on the notion of join. A join is an unordered pair fG 1 ; G 2 g where G 1 ; G 2 2 F. The join operation j on fG 1 ; G 2 g consists in joining the roots of G 1 and G 2 under a common parent; we denote by. A forest F , a species tree S and the corresponding graph R. Each gene tree G of F is attached to its corresponding node s(G) in S. In R, joins of type AD are represented by green lines. All other lines are the joins of type S. Non-trivial AD-components (AD-components containing at least two nodes) are represented by green ovals. Red lines in R represent a vertex-disjoint clique W of R S. Here, R AD [ W has a single connected component, which leads to the binary refinement H of F with no NAD. After the joins of W are applied (red edges in H), the speciationfree forest can be joined with four joins AD (green vertices in H)We denote by R=V; E the join graph of F , defined as the unoriented complete graph on the set of vertices V=F , where each edge (join) is labelled by the corresponding join type (). We denote by R S and R AD the subgraphs of R defined by the edges of type, respectively, S and AD. We call a connected component of R AD an AD-component. Let F 0 be the new forest obtained by replacing the two trees G 1 and G 2 of F by the join tree G 1;2. The rules given below, following directly from the definition of speciation and duplication in reconciliation, are used to update the join type jtG 1;2 ; T for any(1) If jtG 1 ; T=AD or jtG 2 ; T=AD, then jtG 1;2 ; T=AD;(2) Otherwise, if jtG 1 ; T=NAD or jtG 2 ; T=NAD, then jtG 1;2 ; T=NAD;(3) Otherwise, if lca(T) is not a descendant of lcaG 1;2 , then jtG 1;2 ; T=S;(4) Otherwise, jtG 1;2 ; T=NAD.Clique decomposition of the join graph. Let a join sequence J=J 1 ; J 2 ;. .. ; J jJj  be an ordered list of joins. We denote by F J; i the forest obtained after applying the first i joins of J, starting with F. Note that F J; 0=F , and that J i 2 J is a join on F J; i  1. Let J denote the set of all possible join sequences of size jF j  1. Clearly, applying all joins of a sequence J 2 J yields a single binary tree, and there exists a gene tree H 2 HG with d NADs if and only if there exists a join sequence J 2 J with d joins of type NAD. We refine this property by showing that there is a solution to the MinNADref problem where all duplication nodes are ancestral to all speciation nodes (see the tree H offor an example). The proof (not shown) makes abundant use of Ruleset 1. LEMMA 1. There exists a binary refinement H 2 HG with d NADs if and only if there exists a join sequence J 2 J with d joins of type NAD such that, if J i 2 J is the first join not of type S in J, then all following joins J j , for j4i, are of type AD or NAD.We define a speciation tree as a gene tree in which every internal node is a speciation node. We deduce from the previous lemma that we can obtain a solution H to the MinNADref problem by creating a forest of speciation trees first, then successively joining them with joins of type AD or NAD. As the nodes of R corresponding to the leaves of a given speciation subtree of H are pairwise joined by speciation edges, they form a clique in R S (inthe cliques in red are selected and the corresponding joins are applied to compute refinement H). The next theorem makes the link between the number of NADs of H and the cliques of R S. For a set W of vertex-disjoint cliques of R S , we denote by R AD [ W the graph defined by the union of the edges of R AD and W. THEOREM 2. A solution to the MinNADref Problem has d NADs if and only if, among all graphs R AD [ W where W is a set of vertex-disjoint cliques of R S , at least one has d + 1 connected components and none has less than d + 1 connected components. The proof of Theorem 2 is constructive. Given an optimal set W of vertex-disjoint cliques of R S , it leads to an optimal refinement H. Unfortunately, it can be shown that, given an arbitrary graph with two edge colours AD and S, finding if there exists a set W yielding a given number of connected components is an NP-hard problem (proof not shown). However, R is constrained by the structure of a species tree, which restricts the space of possible join graphs. An arbitrary complete graph R with edges labelled on the alphabet {S, AD, NAD} is said to be valid if there exists a species tree and a polytomy whose join graph is R. We characterize below the valid graphs in terms of forbidden induced subgraphs. The proof is partially based on well-known results on P 4-free graphs (). THEOREM 3. A graph R is valid if and only if R S is fP 4 ; 2K 2 g-free, meaning that no four vertices of R S induce a path of length 4, nor two vertex-disjoint edges.Although we have not been able to find an exact polynomialtime algorithm for the MinNADref problem, this very constrained structure of the R graph yields a bounded heuristic for this problem with good theoretical properties described in the next section. REMARK 1. The P 4-free property, which was already introduced in relation with reconciliations in (), is of special interest, as many NP-hard problems on graphs have been shown to admit polynomial time solutions when restricted to this class of graphs. Unfortunately we can prove that, given an arbitrary P 4free graph on which we add AD edges, finding an optimal W is still NP-hard (proof not shown). However, the added 2K 2-free restriction imposes a rigid structure on the graph at hand, and we conjecture that there exists a polynomial time algorithm to find an optimal W.
A BOUNDED HEURISTICWe first describe a general approach based on the notion of useful speciations, followed by a refinement of this approach with guaranteed optimality criteria. DEFINITION 3. Let J=J 1 ;. .. ; J jJj  be a join sequence. A join J i = fG 1 ; G 2 g of J is a useful speciation if jtG 1 ; G 2 =S and G 1 , G 2 are in two different AD-components of the R graph obtained after applying the J 1 ;. .. ; J i1 joins. Hence, if R has c AD-components, finding a zero NAD solution becomes the problem of finding a join sequence with c  1 useful speciations. For example, the graph R inhas five AD-components (three trivial and two non-trivial), and thus the four useful speciations represented by the red lines lead to a 0 NAD solution (the binary tree H). In the general case, the problem we face is to select as many useful speciations as possible, as the resulting AD-components will have to be connected by NAD joins. If we define a speciation-free forest as a forest F such that no edge of its join graph R is a speciation edge, following Lemma 1, we would like to first compute a set of useful speciations that i521
Polytomy refinementresults in a speciation-free forest whose join-graph has the least number of AD-components. DEFINITION 4. A lowest useful speciation is a useful speciation edge fG 1 ; G 2 g of R S such that sG 1;2  is not the ancestor of any sG i;j , for fG i ; G j g being another useful speciation edge of R S .Lowest useful speciations fit naturally in the context of bottom-up algorithms where speciations edges that correspond to lower vertices of S are selected before speciations edges corresponding to ancestral species. The theorem below shows that proceeding along these lines ensures that the resulting join sequence contains at least half of the optimal number of useful speciation. THEOREM 4. Let s be the maximum number of useful speciations leading to a solution to the MinNADref problem. Then any algorithm that creates a speciation-free forest through lowest useful speciations makes at least ds=2e useful speciations. This theorem implicitly defines a heuristic with approximation ratio 2 on the number of useful speciations that visits S in a bottom-up way, making useful speciations (which would thus be lowest useful speciations) whenever such an edge is available. We now describe an improved version of this general heuristic principle. A detailed example is given in. The main idea is to consider a bottom-up traversal of the species tree S, and for each visited vertex s, to find a useful set of speciation edges by finding a matching in a bipartite graph. More precisely, for a node s 2 VS, we consider the complete bipartite graph B=X [ Y; fxyjx 2 X; y 2 Yg such that the left (respectively right) subset X (respectively Y) contains all the trees G i of F where sG i  is on the left (respectively right) subtree of s. Consider the two partitions AD X and AD Y of X and Y, respectively, into AD-components. The key step of our heuristic is to find a matching M EB of useful speciations between AD X and AD Y , called a useful matching. For example, in, the bipartite graph and matching illustrated for Step 3 correspond to node l and that of Step 4 to node m of S. Notice that not all edges of B correspond to useful speciations. Indeed it is possible that for some x 2 X and some y 2 Y, although {x, y} is a speciation edge, x and y are in the same AD-component of R due to another tree z not in B such that {x, z} and {z, y} are AD-edges. For example in, although fa; gg is a join of type S, the trees (a) and (g) are in the same AD-component of R due to the tree a; f; g; h.for each node s of S in a bottom-up traversal of S do Let P=X; Y; AD X ; AD Y ; B be the problem instance corresponding to s; Find a useful matching M of BP of maximum size (Algorithm MaxMatching below); Apply each speciation of M, and update F end for For each connected component C of R AD , join the trees of C under AD Nodes; If there is more than one tree remaining, join them under NAD nodes.. A species tree S and a forest F of binary trees forming the polytomy. The trees of F are placed on S according to their LCA. The i, k, l and m nodes of S are annotated with the forest obtained after running Algorithm 2 on these nodes. Their corresponding complete bipartite matching instances are illustrated at the bottom. AD joins are represented by dotted lines, useful matching are represented by plain lines (we omit drawing all the other edges of the complete bipartite graphs). Note that there is a bridge induced by M between (F, K) and I at step 4. In the fourth step, we obtain a single connected component, which allows, in a final step, to connect all the subtrees by AD nodes (final tree is on the top of thei522for each x 2 C that is not incident to an edge in M do if there is an y 2 Y such that AD(y) is not linked to C then Find such y with AD(y) of maximum cardinality; Add the vertices x and y to D and add the speciation edge {x, y} to M; end if end for Add remaining vertices of C to D; end while THEOREM 5. Given an instance P=X; Y; AD X ; AD Y ; B, Algorithm 1 finds a useful matching M of maximum size. Algorithm 1 is a heuristic, as it may fail to give the optimal solution (refinement with minimum number of NADs), as infor example. In this example, a bottom-up approach would greedily speciate a and d, which cannot lead to the optimal solution. However, we prove in Theorem 6 that if transitivity holds for the duplication join type, then Algorithm 1 is an exact algorithm for the MinNADref problem. The example ofdoes not satisfy this property, as fa; a; f; g; hg is a join of duplication type (AD), fa; f; g; h; gg is a join of duplication type but fa; gg is a join of speciation type.The following corollary provides an alternative formulation of the optimality result given by the above theorem. COROLLARY. Algorithm 1 exactly solves the MinNADref problem for an input F ; S such that each AD-component of the corresponding graph R is free from S edges (i.e. there is no S edge between any two vertices of a given AD-component).
GENE TREE CORRECTIONThe polytomy refinement problem is motivated by the problem of correcting gene trees. Duplication nodes can be untrusted for many reasons, one of them being the fact that they are NADs, pointing to disagreements with the species tree that are not due to the presence of duplicated genes. Different observations tend to support the hypothesis that NAD nodes may point at erroneous parts of a gene tree (). For example, the Ensembl Compara gene trees () have all their NAD nodes labelled as 'dubious'. In (), using simulated datasets based on the species tree of 12 Drosophila species given in () and a birth-and-death process, starting from a single ancestral gene, and with different gene gain/loss rates, it has been found that 95% of gene duplications lead to an AD vertex. Although suspected to be erroneous, some NAD nodes may still be correct, due to a high number of losses. However, in the context of reconciliation, the additional damage caused by an erroneous NAD node is the fact that it significantly increases the real rearrangement cost of the tree (). Therefore, tools for modifying gene trees according to NADs are required. We show now how Algorithm 1 can be used in this context. In (), a method for correcting untrusted duplication nodes has been developed. The correction of a duplication node x relies on pushing x by multifurcation, which transforms x into a speciation node with two children being the roots of two polytomies.recalls the pushing by multifurcation procedure. These polytomies are then refined by using an algorithm developed in (), which optimizes the mutation cost of reconciliation. In the context of correcting NADs, we use the same general methodology, but now using Algorithm MinNADref for refining polytomies. Removing all NADs of a gene tree can then be done by iteratively applying the above methodology on the highest NAD node of the tree (the closest to the root).
RESULTSSimulated data. Simulations are performed as follows. For a given integer n, we generate a species tree S with a random number of leaves between 0:5n and 3n. We then generate a forest F =G 1 ;. .. ; G n  of cherries by randomly picking, for each cherry G i 2 F, one node s i 2 S and two leaves, one from each of the two subtrees rooted at s i. Any leaf of S is used at most once (possibly by adding leafs to S if required), leading to a set of cherries related through joins of type S or NAD. Then, for each pair fG i ; G j g with join type NAD, we relate them through AD with probability 1/2 (or do nothing with probability 1/2), by adding a duplicated leaf. For each pair S; F , we compared the number of NADs found by Algorithm MinNADref with the minimum number of NADs returned by an exact algorithm exploring all possible binary trees that can be constructed from F. We generated a thousand random S and F for each n ! 4. We stopped at n = 14, as the brute-force algorithm is too time-costly beyond this point. Over all the explored datasets simulated as described above, Algorithm MinNADref was able to output an optimal solution, i.e. a refinement with the minimum number of NADs. Therefore, the examples on which the heuristic fails seem to be rare, and the algorithm performs well on polytomies of reasonable size. We then wanted to assess how the NAD minimization criterion differs from the rearrangement cost minimization criterion. We generated 960 random instances with forests of sizes ranging between 5 and 100 (10 instances for each 5 n 100). We a b c d S : G :. A gene tree G and a species tree S, from which we obtain G  by pushing x by multifurcation. Here, x is a NAD, and is pushed by taking the forest of maximal subtrees of G that only have genes from species in the s l subtree (green), then another forest for the s r subtree (red) in the same manner. Both these forests are joined under a polytomy, which are then joined under a common parent, so the root of G  is a speciation i523
Polytomy refinementcompared the output of Algorithm MinNADref with that of Algorithm MinDLref, given in (), which computes refinement minimizing the duplication+loss (DL) cost of reconciliation with the species tree. Both algorithms gave the exact same refinement for only 12 instances (1.25%). As expected, Algorithm MinNADref always yielded a refined tree with a lower or equal number of NADs than the tree given by Algorithm MinDLref, but always had a higher or equal DL-cost. However, in many cases, minimizing the DL-score did not minimize the number of NADs, as in 377 instances (39.3%), Algorithm MinNADref yielded strictly less NADs than Algorithm MinDLref. Ensembl Gene Trees. Next we tested the relevance of the proposed gene tree correction methodology, by exploring how Ensembl gene trees are corrected from one release to another. As the Ensembl general protocol for reconstructing gene trees does not change between releases, the observed modifications on gene trees are more likely due to modifications on gene sequences. We used the Ensembl Genome Browser to collect all available gene trees containing genes from the monophyletic group of rayfinned fishes (Actinopterygii), and filtered each tree to preserve only genes from the taxa of interest (ray-finned fish genomes). We selected from both Releases 74 (the present one) and 70 the 1096 gene trees that are present in both with exactly the same set of genes from the monophyletic group of fishes, and with less NAD nodes in Release 74. We wanted to see to what extent our general principle of correcting an NAD by transforming it to a speciation node is observed by comparing Rel.70 to Rel.74. Such a transformation requires to preserve the clade of the corrected NAD node x of the initial tree, meaning that l(x) should also be the leaf-set of a subtree in the corrected tree. For 490% of these trees (993 trees), the highest NAD node clade was preserved in Rel.74. Moreover, among all such nodes that were corrected, i.e. were not NAD nodes in Rel.74 (641 trees), almost all were transformed into speciation nodes (630 trees), which strongly supports our correction paradigm. To evaluate our methodology for correcting NADs, we applied it to the highest NAD node of each of the 1096 aforementioned trees of Rel.70.illustrates a comparison between the corrected trees (Rel.70C, C standing for 'Corrected') obtained by our methodology and those of Rel. 74. Pairwise comparisons are based on the normalized RobinsonFoulds (RF) distance (number of identical clades divided by the total number of clades). The yellow curve shows a good correlation between Rel.70C and Rel.74, with $65% exhibiting480% similar clades between Rel.70C and Rel.74. If we reduce the set of trees to those for which the highest NAD node is also transformed to a speciation node in Rel.74 (630 trees), the correlation is even better (blue curve of), with 44% of trees being identical (277 over 630 trees) and $80% exhibiting 480% similar clades between Rel.70C and Rel.74. Now, to specifically evaluate Algorithm MinNADref, we further restricted the set of trees to those giving rise to a non-trivial polytomy (i.e. polytomy of degree42) after the pushing by multifurcation, which leads to a set of 117 trees. Overall, the results for these trees (red curve in) are close to those observed for all trees (yellow curve) detailed above. We then wanted to evaluate our correction of the 117 aforementioned trees compared with trees in Rel.74.provides an evaluation of the corrected trees (yellow curve) compared with those in Rel. 74 (blue curve) based on the normalized RF distance with the initial trees in Rel.70. Overall, the initial tree is closer to our correction than to the one of Rel.74. Therefore, even though gene trees of Rel.74 are likely to have stronger statistical support with respect to the gene sequences provided in Rel.74, our correction removes NADs while respecting as much as possible the given tree topology. Finally, we considered the reconciliation mutation cost as another evaluation criterion. Among the 117 trees of Rel.70C, 30 are identical to the corresponding trees in Rel. 74, and 60% have a lower mutation cost, which tend to support our correction compared with the tree in Rel.74. As for the 40% remaining trees, half of them have more NADs than the corresponding tree in Rel.74, which suggests that applying our correction to all NAD, instead of just the highest one, would help to obtain better results.Finally, we evaluated the effect of NAD correction on the tree likelihood. For this purpose, we selected the 1891 Ensembl Rel.74 gene trees of the considered monophyletic group containing at least one NAD, and we corrected each NAD individually. The sequences were aligned using ClustalW () and the likelihood values were computed with PhyML (). For a tree T and a NAD node x, denote by T x the tree obtained after correcting x. For each T and each x, we computed the log-likelihood ratio Lx=logLHT=logLHT x . Among the 4454 NAD nodes found in the considered set of trees, 95.4% of the L(x) ratios were between 0.98 and 1.02. Although the correction algorithm is not expected to outperform the Ensembl protocol in terms of likelihood as it ignores sequences, we found that the likelihood of the tree has been improved (L(x)41) after correction for 43.9% of the NAD nodes. Moreover, 1180 (62.4%) trees contained at least one NAD node improving the likelihood.
CONCLUSIONThe present work is dedicated to the polytomy refinement problem. While the mutation cost of reconciliation has been used previously as an optimization criterion for choosing an appropriate binary tree, here we use an alternative criterion, which is the minimization of NADs. The tractability of the MinNADref Problem remains open, as is the problem to select, among all possible solutions, those leading to a minimum reconciliation cost. Although developing a gene tree correction tool is not the purpose of this article, we show how our algorithm for polytomy refinement can be used in this context, by developing a simple algorithm allowing to correct a single NAD. This algorithm has been applied to trees of a previous Ensembl release, and the corrected trees have been compared with the trees of the current Ensembl release. A good correlation between the two sets of trees is observed, which tends to support our correction paradigm. While minimizing NADs cannot be a sufficient criterion for gene tree correction, it should rather be seen as one among others, such as statistical (), syntenic () or based on reconciliation with the species tree (), that can be integrated in a methodological framework for gene tree correction.
i526
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M.Lafond et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
