Motivation: A fundamental computational problem in the area of metabolic engineering is finding metabolic pathways between a pair of source and target metabolites efficiently. We present an approach , namely FogLight, for searching metabolic networks utilizing Boolean (AND-OR) operations represented in matrix notation to efficiently reduce the search space. This enables the enumeration of all pathways between metabolites that are too distant for the application of brute-force methods. Results: Benchmarking tests run with FogLight show that it can reduce the search space by up to 98%, after which the accelerated search for high accurate results is guaranteed. Using FogLight, several pathways between eight given pairs of metabolites are found of which the pathways from CO 2 to ethanol are specifically discussed. Additionally, in comparison with three path-finding tools, namely PHT, FMM and RouteSearch, FogLight can find shorter and more pathways for attempted source-target metabolite pairs.
IntroductionAs time passes on, our knowledge of metabolism is being developed and metabolic databases such as KEGG (), MetaCyc (), and similar databases are evolving as this information advances. However, our insight is still incomplete and the gaps are being filled gradually. Metabolic engineering, emerged in the early 1990s, is defined as the directed modulation of metabolic pathways using methods of recombinant technology for the purpose of (over)production or accelerated production of fuels, chemical and pharmaceutical products (). Metabolic pathways are the roadmaps in which a biomolecule, namely metabolite, undergoes possible biotransformations, either under the action of enzymatic catalysis or by spontaneous reactions. The problem of synthesizing these roadmaps is more complex than the one referring to a tree-structured search network. Hypergraphs are better representations for metabolic networks. Since finding k-shortest hyperpaths of a hypergraph is an NPcomplete problem (), the problem should be solved heuristically. Research on metabolic pathways is done in two complementary categories. The analysis of metabolic pathways is motivated by the rapidly increasing quantity of available information on the pathways. Some researchers try to analyze the pathways with certain properties, like elementary flux modes () and thermodynamic feasibility (). On the other hand, some algorithms have been proposed to find or predict possible pathways in order to convert a given source metabolite to a given target metabolite. Some of these algorithms are based on one), evolutionary algorithms (), machine learning (), etc.), some algorithms have been proposed to find or predict possible pathways in order to convert a given source metabolite to a given target metabolite. K ffner and his coauthors in () applied an informed searching method, which is similar to (), on Petri nets derived from metabolic databases to find and enumerate all valid pathways satisfying additional user-defined constraints. Petri nets, directed bipartite graphs and state-transition graphs are the main tools to model metabolic networks and apply some informed and uninformed approaches to them (). In addition to these approaches, various mathematical methods have emerged in the postgenomic era to search for metabolic pathways. In the literature (), the authors detailed optimization models, based upon integer linear programming (ILP) to search for plausible metabolic pathways. Algorithms incorporating concepts from retrosynthesis have been developed to search in the metabolic space, represented by hypergraphs for desired pathways (). These algorithms borrowed an idea from the allied field of synthetic chemistry in which reversed chemical transformations are iteratively applied starting from a target product to reach precursors that are endogenous to the chassis. In, two methods, one based on elementary modes and the other based on a direct enumeration algorithm were presented. As other approaches using retrosynthesis model, novel metabolic routes have been efficiently screened by probabilistic selection of metabolic pathways in. A brute-force method is an exhaustive search approach which systematically enumerates all possible candidates for the exact solution. This is an effective approach in finding pathways but it cannot be used for large networks, as the execution time of the algorithm grows exponentially with the size of the network. One approach to ameliorate the exponential-time problem of the brute-force search is often to reduce the search space. Sometimes a heuristic method is used to obtain dramatic reduction of the candidates to all satisficing solutions and speedup the process of finding the proper pathway. However, on the contrary to brute-force, the heuristic approaches do not guarantee to find a pathway even if there is one. On the other hand, one can reduce the search space by first constructing a small sub-network without losing all candidates, and then applying the brute force method to find all the proper pathways. The approach proposed in this article follows this strategy using an analytical method. This article presents an innovative solution to find all possible distinct sets of coherent enzyme-catalyzed biochemical reactions (i.e. metabolic pathways) through which the source compound is turned into the target compound. To this end, an analytical processing technique based on matrix operations helps us to provide a search space reduction strategy and find all desired metabolic pathways. Moreover, our proposed algorithm can even find the k-shortest paths by setting proper parameters. Given that our proposed approach is based on matrix operations, the operational complexity of these operations depends on the matrix dimensions. While the use of bipartite graphs challenges the complexity in this context, we preferred to employ a more appropriate model instead of the bipartite graph. Indeed, using the directed bipartite graph causes our approach to bear large spatial and temporal costs (i.e. size of the memory and the amount of time required to search through it) which stem from intensive increase in the number of vertices and edges. For these reasons, we formulate the biochemical reactions contained in the metabolic pathway databases, e.g. KEGG, MetaCyc, by an AND/OR graph model. And-Inverter Graph, Majority-Inverter Graph, and AND/OR Graph are three different internal network representations used to provide a suitable environment for modeling in a wide area of problem domains, such as logic optimization and synthesis (). Among these graph models, the use of AND/OR graph and the search through it were proposed earlier than the others (). The AND/OR graph is a typical graph in which the types of relations between vertices, which can be either 'AND', 'OR' or a function of them, determine the types of searching process steps that should be followed through. The relations, i.e. 'AND' and 'OR', has been inspired by two simple Boolean gates (i.e. Boolean operations) with the same names, and finally, the graph can be conceived as a Boolean circuit. Among the aforementioned models, AND/OR graphs can better represent metabolic reactions. Since the introduction of the AND/ OR graph, it has been used in various applications and algorithms. To this end, we visualize the network of the biochemical reactions as the Boolean functions consisting of two-variable AND/OR operations. For example, in the metabolic reaction m 1  m 2 ! m 3 , the metabolite m 3 is produced if the metabolites m 1 and m 2 are both present. That is,
the relation between the metabolites m 1 , m 2 and m 3 is given by the Boolean function m 3  m 1 AND m 2. Conversely, considering two reactions m 1 ! m 3 and m2 ! m 3 , the relation between the corresponding metabolites can be interpreted as the Boolean function m 3  m 1 OR m 2 , which means the production of m 3 depends on the existence of m 1 or m 2. Accordingly, before developing the proposed approach to find the pathways in a given metabolic network (Section 2.2), we first describe our AND/ OR graph model and its properties against the conventional model in Section 2.1 and the proposed matrix representation in Section 2.2.1. Section 3 is devoted to results and discussion and finally, a conclusion is presented in Section 4.
Materials and Methods
Data modelAll elementary biochemical reactions, in the sense that each one takes one basic step (association, dissociation or conversion) to complete, can be represented by one of the two equations of the form (1) or (2) which are used to represent irreversible and reversible reactions, respectively.In the above equations, S i 's and P i 's represent the substrates and the products in the biochemical reactions, respectively. Additionally, m and n show the number of metabolites participating as either substrates or products on both sides of the arrows in the equations. The first and important step towards finding metabolic pathways is modeling all biochemical reactions and their participating metabolites in the metabolic databases by a computational data structure usable in algorithmic approaches. Obviously, an appropriate model to satisfy this need is a directed graph, but conventional directed graphs cannot represent the intrinsic properties of such a data set. Directed hypergraphs are alternatives to standard directed graphs to FogLightrepresent the facets of the database contents. Thus a model based on the hypergraph theory was suggested in (). A hypergraph is a generalization of a graph in which, in contrast to the standard one, its edges called hyperedges can be attached to a set of vertices and not only to two vertices. Typically, the cofactors or the currency metabolites () of the reactions, i.e. the metabolites taking part into large number of reactions, e.g. NADPH, ATP, CO 2 , play a part often in the metabolic reactions not as a main compound. The pathways containing the intermediate reaction steps, in which only these molecules are either produced or consumed, should not be considered when an algorithm is looking for some relevant pathways. In consequence, the shortest paths found by some previous algorithms () do not correspond to relevant metabolic pathways. Since these molecules are not included explicitly in some pathway databases, we use this feature in our approach to avoid unnecessary complications. Additionally, instead of using the directed bipartite graph (today's conventional model which can be seen in some papers like ()), we formulate the directed hypergraph representing biochemical reactions of the metabolic pathway databases with a directed AND/OR graph model to reduce the space complexity of the search space (A sample AND/OR graph and its corresponding directed bipartite graph can be found in Supplementary). In the following two subsections, we describe our model by recalling some definitions from graph theory.
Definitions and notations (from graph theory)In this subsection, three basic definitions are described. We use the first two definitions below to define directed AND/OR graphs. Definition 1: A labeled digraph is a 4-tuple G  V; A; L V ; L A   in which @BULLET V and A  v i ; v j   : v i ; v j 2 Vand v i ; v j   6  v j ; v i     are nonempty sets of vertices and directed edges (also called arcs), respectively. The vertex v i 2 V, called initial vertex, is the source vertex from which the arc v i ; v j   starts while the vertex v j 2 V, called terminal vertex, is the sink vertex to which the arc v i ; v j   points. @BULLET L V and L A describe nonempty sets of the unique identifiers for labeling the vertices and the arcs within G, respectively.Definition 2: is known as a labeled multidigraph if it is permitted to have multiple arcs with the same source and the same sink.The labeling technique enables us to define a specific identity for the relationship between the set of edges directed towards/from each of the vertices of the multidigraph G 0 ; this identity reflects a Boolean function using a combination of two main Boolean algebraic operations, namely the conjunction 'AND' and the disjunction 'OR' operations. In other words, the set of incoming vertices to vertex v i with an identical edge label ' e 2 L A in a given directed AND/OR graph represents the members of a conjunction or the inputs to an 'AND' gate. On the other hand, the inputs to an 'OR' gate, with the output v i , are provided by the set of vertices connected to the incoming edges with distinct labels.
Metabolic AND/OR graphHere, we look at a modeling of metabolic networks via the directed AND/OR graph. Several remarks follow from the above definitions and comparison between the AND/OR graph and the bipartite graph, both representing metabolic networks. As stated before, the directed bipartite is a graph with two types of vertices, namely biochemical reactions and metabolites. In contrast, the set of vertices V in our AND/OR graph model, i.e. G 0  V; A; L V ; L A   , includes only metabolites. Additionally, the biochemical reactions are placed in the set A of arcs of graph G 0. Regarding the structure of these two models, the number of vertices, as well as edges, in the metabolic AND/OR graph is less than the ones in the bipartite graph (these claims are further discussed in Supplementary information). Furthermore, taking reversible reactions into account results in exponential growth of the total number of paths. Finally, L A and L V are two disjoint nonempty sets of reaction and compound identifiers, respectively, used to label the arcs and vertices of the graph G 0. In a database, for instance, each identifier is a 6-character label (e.g. C00084 or R00746) starting with either the letter C for compounds (i.e. metabolites) or the letter R for reactions and ending with a unique 5-digit number. Considering the given labels of the vertices and the arcs in, which start with either the letter C or the letter R, the subscripts a, b, f, etc., denote some particular 5-digit numbers.
The proposed algorithmic approachDespite the ability of being a general problem-solving technique, the exhaustive search technique can be impractical for large-scale problems due to the combinatorial nature of some problems, in particular, the problem of finding metabolic pathways, and their large demanding search-space. In order to control the complexity of searching through the metabolic networks by the brute-force search and speeding it up, we exploit a matrix-based approach to reduce the size of the search space. Since matrix-based computation is an indispensable prerequisite for our algorithm, in the following, we suggest a matrix representation for an AND/OR graph used then by the algorithm described in Section 2.2.2.
Matrix representation of an AND/OR graphIn this section, we define a new matrix representation for directed AND/OR graphs. This representation consists of two square matrices as follows:(1) An asymmetric n-by-n binary matrix A nn corresponding to an AND/OR graph G 0  V; A; L V ; L A   whose entry A ij in row i and column j is defined as:A ij  1 if there is an arc from vertex v i 2 V to v j 2 V for i 6  j
otherwise((2) An asymmetric n-by-n label matrix L nn used as a way of distinguishing between conjunction and disjunction relations as well as two different conjunction relations. The entry L ij represents the type of relations, conjunction or disjunction, participating in the arcs v i ; v j   . In other words, each entry L ij participating as an element of a logical conjunction is tagged with a label ' e :The entries labeled by 'NULL' values are either participated in a logical disjunction or there is no arc from v i to v j in the AND/ OR graph G 0. In the metabolic AND/OR graph, the label ' e 2 L A can be the unique name of the reaction e in which the initial and terminal vertices are involved or any other distinctive label.In brief, the two above matrices specify three types of relations ('OR', 'AND', or no relation) between vertices of the AND/OR graph as follows:1. If there is an OR relation between the two arcs v i ; v j   and v k ; v j   , then A ij  A kj  '1' and L ij  L kj  'NULL'. 2. If there is an AND relation between the two arcs v i ;3. If there is no arc from vertex v i to vertex v j , then A ij  '0' and L ij  'NULL'.demonstrates an overview of the whole matrix representation of the AND/OR graph corresponding to the hypergraph of. Each row and column of the two matrices ofcorresponds to a unique metabolite. The shaded areas of the matrix views are particularly used to display only the boxed subgraph shown in. All non-specified entries in these areas of matrices A and L inare respectively set as '0' and " NULL ". For example, in, there is an arc from C i to C t which is represented by A C i   C t    1 in. Moreover, since there are more than one incoming arc to the terminal vertex C t with the label R x (i.e., we store it in the corresponding entries of the label matrix L in, i.e.2.2.2 FogLight A reduced search space consists of a subset of vertices and edges of the initial graph between two given vertices as the source and target points with the aim of finding pathways. In order to do this and speed up the pathway finding in the metabolic networks, we propose an efficient algorithm, called FogLight, using our matrix representation of the metabolic AND/OR graph. To better understand how FogLight reduces the graph (), we exemplify its steps (Section 2.2.2.2) in Supplementary information. Before describing our algorithm in details, it is necessary to introduce some mathematical aspects of the materials used in the algorithm as well as the related definitions. 2.2.2.1 Definitions and notations (from linear algebra). The Boolean algebraic operations on binary matrices are analogous to the real matrix operations, except we use the Boolean operators ^ (logical AND) and _ (logical OR) on the binary elements instead of multiplication and addition on real numbers, respectively.Given n Boolean variables u 1 ; u 2 ; u 3 ;. .. ; u n of a binary vector u, Boolean function vector f  f 1 ; f 2 ; f 3 ;. .. ; f n  is defined as a binary vector whose entry f i represents a binary value calculated from a Boolean function F i u 1 ; u 2 ; u 3 ;. .. ; u i1 ;  u i1 ;. .. ; u n .Assuming an asymmetric real sparse matrix, an efficient storage format, called Compressed Sparse Row (CSR) format, is widely used in sparse matrix-vector multiplication (SpMV). Let n nz denote the number of nonzero entries of an n-by-n sparse binary matrix A  A ij   . CSR storage format is used to store A into three arrays with the following characteristics: 1. The first array is val, of length n nz , and holds all nonzero entries of A as they are traversed in a row-wise fashion.2. An integer n nz-ary array, namely col idx, is the second array which contains the column indices of nonzero entries A ij of the original binary matrix A. That is, if val k    A ij  1, then col idx k    j, for 1 k n nz. 3. The last array is an integer array named rptr which is used to store the indices of the beginning of each row in both arrays val and col idx; it means that if A ij  1, then rptr iHowever, the above-mentioned format can be modified to save binary sparse matrices efficiently. To this end, we choose not to save the array val since its all elements are '1' and the Boolean multiplication process of SpMV does not need it in practice. We name this new storage as binary CSR (b-CSR) format which is defined by only two arrays col idx and rptr.
Definition 7:In contrast to b-CSR, another storage format, namely binary Compressed Sparse Column (b-CSC), is defined to be used in the transposed variant of Boolean SpMV (BSpMV-T). A sparse binary matrix A T  A ji   can be stored into the following two arrays (see Supplementary(S3B) for the b-CSR (bCSC) storage format of the upper matrix of1. The first array is row idx which contains the row indices of nonzero entries a ji of A. That is, if val k    A ji  1, then row idx k    i, for 1 k n nz. 2. Column indices of the first nonzero element in each row of matrix A T are referred to by an integer value saved in array cptr. 2.2.2.2 Matrix-based algorithm. Using the matrix modeling of the AND/OR graph, we propose a matrix-based algorithm to prune the unrelated off-the-path pathways between the two given vertices of source and target (, Step 0). For this purpose, the graph is independently traversed in two opposite directions, i.e. one from the vertex Source and the other from the vertex Target. Since Steps 12 and Steps 34 are done independently (as shown in), each of them can be implemented either sequentially or in parallel. In the AND/OR graph, the vertices are traversed from the given source, level by level and the entries of the vector are assigned by a Boolean value according to its corresponding Boolean functions; note that all vertices (except the source vertex) have been initialized by '0'. A similar traversal is performed from the target. Finally, only vertices assigned twice by the Boolean value of '1' are marked as the intermediate vertices to find the paths. Hereafter, in order to find paths between the pair of source and target, in the second stage, we search through the reduced space by successive Depth-First Traversal (with ability to backtrack) considering the AND-OR relations. These processes are repeated until all valid paths are enumerated. The above processes make the search for a path (or paths) much more efficient. Our proposed algorithm (, Steps 15) proceeds in the following steps (the detailed pseudocode is shown in Supplementary):(Step 1) Forward-initialization: To march in time, the initial solution f fw t0   must be known. That is, at t  0, the initialBoolean values of all the vertices must be specified. To this end, by choosing a starting vertex v i 2 V; 1 i n and assigning the Boolean values of '1' to it and '0' to the other ones, the Boolean function vector f fw , for forward traversal is initially constructed from the AND/OR graph.(signed only to the given source substrate in the previous step, the Boolean values of the other vertices in the graph (which are all initialized to '0') are re-evaluated. The reevaluation process formulated by Eq. 3 is done until the maximum default depth limit N is reached or the target vertex is met during the vertex-and edge-traversing. This equation can simply be written as an iterative procedure depending on two primary parameters, namely an n-dimensional Boolean function vector f fw and an n-by-n matrix with the binary value of '1' on its main diagonal and the values of the entries in the binary matrix A nn elsewhere.where A nn is the binary matrix representing the connections in the given AND/OR graph and I nn is a binary identity matrix with the values of '1' on its main diagonal. Considering Eq. 3, we were able to march in time by constructing the vector f fw at the next time-step (denoted by f fw t1   ) using the fact that we know its values at the previous time-step.(Step 3) Backward-initialization: Next, by choosing an ending point v j 2 V; 1 j n, f bw is defined as a Boolean vector composed of the initial binary values to be assigned to all the vertices.(Step 4) Backward-traversing: In this step, the re-evaluation process is done independent of the last Boolean values obtained from Step 3. Considering '1' as the Boolean value of the given vertex corresponding to the target product, the Boolean values of the other vertices in the graph (which are all initialized to '0') are re-evaluated. The reevaluation process formulated by Eq. 4 is done N times, where N is the maximum depth limit obtained from the first step (value of N was chosen as 23 in our experiments ().where A T is the transpose of the binary matrix A nn .(Here, using the graph representation of a given metabolic network, the above five steps are briefly explained.shows this graph in which all the vertices, including Source and Target, are the metabolites and denoted by the labels of the compound identifiers. The hyperedges have also been labeled with the reaction identifiers. Given the two compound identifiers as Source and Target, the algorithm attempts to find paths between them. It utilizes the five above steps to prune off-the-path branches and mark a small portion of the large network by the Boolean value of '1'. The subgraph consisting of the marked vertices is then used in the second stage for searching the path exhaustively. Finally, the set of found pathways, namely P, are checked to see if each individual pathway p 2 P satisfies the steady-state condition subject to the stoichiometry constraints. To this end, the following flux balance equation (i.e. a system of N mfp metabolites involved in N rfp reactions in the pathway) is employed:where S is the N mfp  N rfp stoichiometry matrix, corresponding to each pathway p 2 P, and v is the N rfp-dimensional reaction rate vector (also called flux vector), whose ith component represents the rate (or flux) of reaction i. At the end if for some of the pathways, there is no vector v which meets the flux balance constraint, it is filtered out from the final set of results. As seen in Step 2, the Boolean value of each vertex of the network is assigned in each time-step by applying the Boolean function of the vertex-inputs of the vertex from the previous level (see Eq. 3); this is done by employing matrices A and L. For instance, theSource and Target will be '1' (as shown in). The same procedure is performed from Target to Source to mark the vertices in reverse direction (). Finally, only the vertices with both forward and backward marks as '1' are kept which are C a , C b , C j , C l and C t (as shown in). These vertices and their corresponding arcs form on-the-path pathways from Source to Target. As seen in, the vertex with the label C l is assigned twice by the Boolean value of '1' and consequently, it is kept in the subgraph but the pathway containing this vertex is discarded in the second stage.
Results and DiscussionMetabolic engineering has the potential to produce fairly large quantities of a wide variety of chemicals from readily available materials. To achieve this goal, many metabolic pathways or product-specific enzymes have been created, modified and engineered and then transferred and combined into the microbial hosts. FogLight was run in two stages to search through the metabolic network containing two different sets of organisms in order to find the shortest and the all paths from a source to a target over a constant period of time (i.e. 2000 s). The new shortest paths found can be used to define minimal gene sets for designing artificial genomes. The number of pathways found by FogLight between two distinct materials is summarized inwhere each row corresponds to one pair of source-target metabolites. N/A in the table means that no pathways were found in that period of time, e.g. rows 2 and 5 and N/I means that the metabolic network of the selected organisms does not consist of the source or target metabolites, (e.g. row 1 in which Enterobacteriaceae family has no Triacylglycerol). As a result of the first stage of FogLight, a reduced space (subnetwork) is obtained by pruning off-the-path arcs of the initial (unprocessed) network. The amount of this reduction was reported in the fourth and eighth columns of. Clearly, no space reduction is possible when the brute-force method is only used. In this table, the percentage of reduction in search space is calculated in terms of the number of edges reduced in the initial network. In fact, the number of edges to be processed in the brute force algorithm can became too large and counting them will be impractical. For example, if the average branching factor of the graph is 4 and the number of levels to be searched is 20, then this number will amount 4 20. In this table, minimal reaction set is the minimum number of biochemical reactions (i.e. shortest paths) for production of a target metabolite from a source. This minimum itself and the number of it have been reported in columns 6 and 5, respectively. Details of the shortest pathways found by FogLight within the reaction network (the compound network) related to conversions from a given source to a target (listed in) can be found in Supplementary Table S1 (S2). Additionally, the values of reaction fluxes for the steadystate pathways have been reported in the 4th column of Supplementary Table S1. For verification of the steady-state condition of these pathways, an N rfp-by-N rfp system of linear equations in the form of Eq. 6 is solved and the vector value(s) of v that satisfy it are obtained. Considering the metabolic network containing all organisms, FogLight was run to find the shortest paths and their results were compared with the results of the brute-force method, as an optimum global search technique with high runtime cost. The results show that in most cases, the optimal solutions (for depth-limit ! 6) can be found by FogLight in much less time (by one order of magnitude) in comparison with the brute-force method. The only case where FogLight takes more time is the last row of. This is because the shortest path is very short in this case and brute force can find it in a short time whereas FogLight attempts to reduce the graph in the first stage and this has a runtime overhead. FogLight can be highly beneficial in finding relevant non-natural pathways when it is given a source and a target metabolite. As shown in, we compared FogLight to PHT () (the new version released in 2011), FMM () and RouteSearch (), three web-based pathfinding tools. While RouteSearch uses EcoCyc/MetaCyc as the source database, PHT and FMM have been developed to reconstruct metabolic pathways from one metabolite to another based mainly on KEGG database. Among the above three tools, RouteSearch and FMM, like our approach, can search for finding paths with different lengths all at once without preliminary setting of their length. Their results, including the information about the shortest paths and all paths FogLightfound by those two, have are presented in. However, since Pathway Hunter Tool (PHT) needs the user to set the path length, we searched for the shortest paths and therefore, the last two columns of the table are left empty for this tool. In some cases shown in the table, the final results of PHT are similar or inferior to the results obtained by FogLight. We also noticed that some of the pathways found by these PHT, FMM, and especially RouteSearch are biologically-irrelevant, due toruntimes are highly dependent on their server's hardware characteristics and Internet traffic as the experiments are performed on the web. the existence of one or more currency metabolites as the intermediate compounds in the pathways. The number of these pathways has been differentiated in parentheses by the superscript letter 'e' in. As an illustration, let us consider the third row ofin which the results (i.e. for the pathways found between glucose and ethanol) of FogLight have been compared with Brute-force Algorithm and the three above-mentioned web-based tools. In this particular example, brute-force, as an infallible but time-consuming technique, was employed and found one shortest biologically-relevant pathway with a length of 6. For comparison, we found the same result by using FogLight in shorter time. Our strategy is to reduce the large metabolic network into a sub-network according to glucose and ethanol (i.e. the given source-target pair) and search exhaustively, but in shorter time, through the reduced network (i.e. nearly %11 of the original network). PHT and FMM have respectively detected 1 and 9 shortest paths with lengths of 10 and 8 which are longer than the optimum length of 6 found by FogLight. Considering a metabolic network containing family Enterobacteriaceae, FogLight searched through %21:5 of the whole searchspace and detected two shortest paths of length 7 while RouteSearch discovered two shorter paths (i.e. with length of 4). However, the shortest paths, and even all the paths of length 5 and 6, found by RouteSearch are biologically-irrelevant and implausible because these paths pass through ADP and NADH, two of the currency metabolites listed in. The time complexity analysis of FogLight shows that in the worst-case, the growth of execution time is linearly dependent on the number of reactions. That is, it is always possible to find a constant coefficient K, for which the following relation is satisfied:T FogLight < K:N br where T FogLight is FogLight's execution time and N br is the number of reactions. As shown in, the order of execution time of FogLight is much less than that of the brute-force method in terms of the time complexity (discussed further in Supplementary information). The first seven rows of this table enumerate the pathways through which glucose is converted to the remarked metabolites by considering two metabolic networks of all organisms versus Enterobacteriaceae. The reason for selecting these usual metabolites (i.e. glucose, arginine, etc.) as the inputs to FogLight is to show that our approach can search correctly and rapidly through the metabolic networks and find some new pathways which did not even exist naturally. On the other hand, we selected a pair of source and target metabolites between which there is no natural pathway (shown in the last row of) and searched through the networks to find whether there are any pathways between them or not.shows the entire metabolic network containing the pathways of all species () and the appropriate part extracted by our algorithm (). These two selected metabolites play key role in development of renewable biofuels (ethanol, isobutanol, isoprenol, etc.) which have drawn significant attention in recent years (). In addition to natural biofuel-producing systems, recent advances in metabolic engineering have made industries able to produce biofuels through several nonnative pathways. Since ethanol (labeled as C00469 in) is currently the most widely produced and utilized biofuel of the market, the remainder of this section focuses on the use of our approach to find ethanol-production pathways from carbon dioxide (labeled as C00011 in). Moreover, the numbers of pathways found between CO 2 and ethanol and the search time have been reported inas the last pair of source and target. As depicted by the black ellipses inalong with its corresponding graph in, the entire metabolic network composed of pathways of the entire set of organisms registered in the KEGG PATHWAY database has been reduced to a fast-and-easilysearchable space using our algorithm (). Six natural carbon fixation pathways have been known so far (), of which two are seen in. The first carbon fixation pathway is Calvin-Benson cycle used by plants, algae and cyanobacteria. Cyanobacteria possess some endowments for photoautotrophic conversion of CO 2 into the biofuel products such as ethanol. In addition, they have relatively simple genetic background and well-characterized tools for engineering ().illustrates some ethanol-production pathways found by our algorithm, one of which branched from the point of 3-phosphoglycerate (C00197) at the Calvin-Benson cycle to produce ethanol by using a set of enzymes consisting of rubisco (catalyzes reaction R00024), phosphoglycerate mutase (catalyzes R01518), enolase (catalyzes R00658), pyruvate kinase (catalyzes R00200), pyruvate decarboxylase (catalyzes R00224) and alcohol dehydrogenase (catalyzes R00754). While the first four reactions of this, R01518, R00658, and R00200) naturally leads to the formation of pyruvate from CO 2 in cyanobacteria, reactions R00224 (equally, R000141R00755) and R00754 are used to reduce pyruvate to ethanol in a non-native manner (). An alternative to carbon fixation by the Calvin-Benson cycle is the Wood-Ljungdahl (WL) pathway through which carbon dioxide is anaerobically reduced to form Acetyl-CoA. The key enzyme of WL pathway (shown in) is CO dehydrogenase/acetyl-CoA synthase (CODH/ACS) which is used to synthesize Acetyl-CoA (i.e. R09317 or equally, R071571R08433). Considering the production of ethanol from this point (i.e. C00024), some number of possible paths and their corresponding reactions can be observed in. Consequently, microbial production of ethanol can be provided by manipulation of a suitable organism genome to encode for appropriate metabolic enzymes of each of the observed pathways. Therefore, it may be possible to chemoautotrophically produce ethanol from CO 2 in the anaerobic bacteria containing WL pathway by combination of the genes coding for the mentioned enzymes.The other pathway found by our approach includes the shortest one in which enzyme pyruvate synthase (also called ferredoxin 2oxidoreductase) used as a main catalyzer for CoA-acetylating (i.e. reaction R01196). In this pathway, CO 2 along with another substrate is converted into pyruvate and then into ethanol through either two or three enzymatic reactions. In addition to pyruvate synthase, another mechanism exists for fermentative pyruvate turnover (as shown in) which uses pyruvate formate-lyase (catalyzes R00212) as a main catalyzer to convert pyruvate to ethanol via acetyl-CoA and acetaldehyde (). Some other pathways from C00011 to C00469 besides the above mentioned pathways can be seen inand have been found by our approach. The pathways differ in the number of reaction steps or their enzymatic types. These differences and varieties are due to the use of numerous enzymatic reactions of different organisms as an including component of the found pathways. Detecting these various metabolic pathways and their participating enzymes for the desired traits, ones are able to create genetically modified organisms through the mutation of genes. After obtaining the pathways, they should be verified according to stoichiometry constraints with the aim of satisfying steady-state condition. Some of the pathways found by our algorithm have been illustrated in. Two pathways which convert CO 2 (C00011) to ethanol (C00469) through the network are as follows:The flux values of reactions on Pathways 1 and 2 were calculated to satisfy Eq. 6 (see Supplementary Table S1 for details). However for the following pathway, there was no flux vector which can satisfy this equation.Nevertheless, the imbalance of this pathway was found to be due to the involvement of currency metabolites (shown by dotted ellipses in the figure) in the pathway. By removing these metabolites from the stoichiometry matrix, the steady-state condition was met. The details of matrix calculations can be found in Supplementary information.In the previous paragraphs, the structure of the different found pathways from CO 2 to ethanol has been described. Therefore, FogLight can efficiently find useful synthetic metabolic pathways in order to be utilized in genetic and metabolic engineering.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M.Khosraviani et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Conclusion In order to look for metabolic pathways through metabolic networks, we proposed an approach in which the search space is considerably reduced and the computational cost is decreased to make the problem complexity manageable. It is possible to lose some admissible candidates as the searchspace is narrowed down heuristically as previous approaches suggest. Therefore, our algorithm in the first stage, employs an analytical approach to prune the off-the-path branches of the AND/OR graph of the metabolic network by a matrix-based technique. Then, in the second, it searches for the metabolic pathways through the final reduced network by brute-force method. The space reduction technique proposed in this article can be used by other techniques which search through metabolic networks, like the heuristic approaches mentioned above, but for the reduced network. Therefore, such approaches can take advantage of this search space reduction to produce similar results as theirs in shorter time. This is because our space reduction technique does not miss any admissible pathways from the given source to target after the graph is trimmed. However, the brute-force method used as the second stage in our algorithm gives all the pathways without the disadvantage of losing any of them as in other approaches. Results demonstrate that our approach is much faster than the brute-force search algorithm, even considering search through the metabolic networks of all organisms. Using FogLight, we were able to find some metabolic pathways for production of ethanol from carbon dioxide while few of them have been discussed. The found and discussed metabolic pathways are verified by the enzymes, reactions and the partial pathways reported in the literature (Lee, 2011; Schomburg and Michal, 2012). We also compared the complexity of this algorithm with the bruteforce search algorithm in looking for all possible pathways leading to a target from a source. For the pathways with the length of greater than six, results show that our approach is much faster than brute-force algorithm and our experiments confirmed the efficiency of our approach. Fig. 4. Pathways from carbon-dioxide and glucose to ethanol (C00469), arginine (C00062) and tryptophan (C00078) found by FogLight FogLight
