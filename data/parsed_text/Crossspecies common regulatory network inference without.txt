Motivation: Cross-species meta-analyses of microarray data usually require prior affiliation of genes based on orthology information that often relies on sequence similarity. Results: We present an algorithm merging microarray datasets on the basis of co-expression alone, without any requirement for orthology information to affiliate genes. Combining existing methods such as co-inertia analysis, back-transformation, Hungarian matching and majority voting in an iterative non-greedy hill-climbing approach, it affiliates arrays and genes at the same time, maximizing the co-structure between the datasets. To introduce the method, we demonstrate its performance on two closely and two distantly related datasets of different experimental context and produced on different platforms. Each pair stems from two different species. The resulting cross-species dynamic Bayesian gene networks improve on the networks inferred from each dataset alone by yielding more significant network motifs, as well as more of the interactions already recorded in KEGG and other databases. Also, it is shown that our algorithm converges on the optimal number of nodes for network inference. Being readily extendable to more than two datasets, it provides the opportunity to infer extensive gene regulatory networks. Availability and Implementation: Source code (MATLAB and R) freely available for download at http://www.mchips.org/ supplements/
INTRODUCTIONMicroarray technique, albeit barely older than a decade, is now both mature and ubiquitous, accumulating an unprecedented amount of quantitative genome wide information (). Although each study is conducted to generate valuable insights in and of itself, it becomes more and more desirable to put them into a larger context. Various meta-analysis techniques combine individual studies conducted by different authors.were among the first authors to introduce meta-analysis for microarray data. Most meta-analysis studies have * To whom correspondence should be addressed. been performed on cancer (). In this field of research, biomaterial is often limited, in other cases the price for the microarrays is the bottleneck. In typical microarray-based studies, tens of thousands of genes (variables) are only investigated across (at most) hundreds of biological samples (observations). The asymmetry of the data tables poses a problem for inferring gene regulatory networks (GRN) by reverse engineering (). Alleviating the asymmetry by combining the datasets therefore largely increases their use for systems biology. A multitude of algorithms have been reported for network inference from gene expression data. Dynamic Bayesian networks (DBN) capture conditional independence between variables. They are relatively easy to interpret () yielding directed graphs. They can handle noisy data and even feedback loops in biological systems (). In order to maximize the number of samples accounted for in one GRN reverse engineering step, it seems preferable for any method to first combine the data instead of combining the resulting networks later on. Several methods can be applied to this end (). However, all of these methods take as input the affiliation of genes between the datasets. When combining data stemming from different species, sequence homology can be used to affiliate orthologs. However, due to the ambiguity of orthology relations, mapping across species is challenging. Lineage-specific gene duplications can give rise to a different number of paralogs in one species compared to another species. One cannot tell which paralog (or in-paralog) retains the function of the ancestral gene or has been co-opted into a new function. We present a way of combining datasets that does not need any genes (or samples) to be affiliated beforehand. While such information can be easily incorporated to assist the process, our algorithm also performs well without being provided with any affiliations, purely driven by coherences among the data. That opens the door to fully automated combining and modeling of all microarray datasets accumulated to date.
METHODS
Datasets and pre-processingTo introduce the method, we show its application to two yeast cell cycle studies () comprisingPage: 1083 10821090
Cross-species meta-analyses without prior gene-affiliationnearly identical experimental conditions but on two different species (Saccharomyces cerevisiae, Schizosaccharomyces pombe). Furthermore, we applied our algorithm to estrogen-regulated gene expression studies of Homo sapiens and Mus musculus (Supplementary data S5), thus supporting its general applicability to different levels of similarity, underlying structure and experimental platform (both two-channel cDNA and Affymetrix chips). As a means to verify each and every gene affiliation, we also used a pair of datasets stemming from the same species (Supplementary data S8). Each dataset was pre-processed separately (Supplementary data S1).
Co-inertia analysisCo-inertia analysis (CIA) is a multivariate approach that can identify corelationships within multiple datasets by finding successive principal axes of maximum co-variance. It was first introduced applying ecological data () using co-inertia as a measure of co-structure between two data matrices. When the matrices are centered, co-inertia is a sum of square covariances. A formal definition is provided in the Supplementary data (S2.1). Culhane and co-workers demonstrated the efficiency of CIA on crossplatform comparisons of gene expression data (). CIA is often used in combination with principal component analysis (PCA) or correspondence analysis (CA), the latter being capable of visualizing genes and hybridizations at the same time (). While, as with PCA, similarity among genes as well as similarity among hybridizations is depicted as proximity, a gene that is particularly up-regulated under a certain condition will be located in the direction of this condition. The farther away from the centroid in this direction (towards the outer margin of the plot) it is displayed, the stronger the association (). If used together with CIA, genes and hybridizations are shown simultaneously for both datasets, projecting their common variance or co-inertia (Supplementary). Here, proximity among objects and directions can be interpreted as aforementioned, now highlighting common trends and patterns. Overall similarity of the datasets is captured by the RV-coefficient (RV) that is a commonly used matrix correlation (). In CIA, the RV is calculated as the co-inertia (sum of eigenvalues of a co-inertia analysis) divided by the square root of the product of the square inertias (sum of the eigenvalues) from the individual CA (). Much like a correlation coefficient, the stronger the joint trends between two datasets agree, the closer to 1 the RV score becomes. A zero RV score indicates no similarity. Prerequisite for CIA is that either the genes or the hybridizations are affiliated between the two datasets. Therefore, either the columns or the rows of the tables must match (and have equal weights). In the following text, we will refer to the variables (genes or hybridizations) needed to be affiliated beforehand as 'connecting variables' and to the distances between objects in a CIA output (projection) as 'projected distances'. We used Hungarian algorithm to affiliate connecting variables in CIA.
Matching by Hungarian algorithmTwo sets of objects (here genes or hybridizations of the two datasets to be combined) can be matched by the Hungarian algorithm, also called Kuhn Munkres algorithm (). It takes as input a penalty weight matrix of all possible pairwise projected distances and computes the pairs summing up to minimal penalty (Supplementary data S3 and). The original publication refers to a quadratic penalty matrix. However, the Hungarian algorithm can also be applied to sets of different cardinalities by adding virtual objects of highest penalty to the smaller set until its cardinality matches the larger one (). Here, virtual genes (or samples) have been added to the penalty matrix showing the maximum of all occurring pairwise projected distances to all other genes (samples).
k-means clusteringData can be subdivided into pre-defined numbers of homogenous gene or sample (array) clusters by the k-means algorithm. Here, we performed it on the  2-distance, the same distance measure that governs CIA.
Back-transformationCIA projection reduces the dimensionality of the original data tables to a few principal axes of maximum co-variance. While an, e.g. twodimensional projection is ideal for visual inspection, the corresponding data table of only two rows (or columns) would be too small for any reverse engineering GRN method. We therefore back-transform the CIA results, yielding tables of the original format whose content is solely based on the selected eigenvectors (). We now briefly describe the underlying mathematical basis of the back-transformation method following the notation of (). Given a data table X with n rows, p columns and nf kept axes, the approximated data table can be obtained from the following equations:And with the left multiplication of K t D we will have:where D is a vector of row weights with length n. is a diagonal matrix of eigenvalues with length r.r is called the rank of the diagram where the non-zero eigenvalues  1 >  2 >  >  r > 0 are stored in the diagonal matrix. K is a data matrix of n rows and nf columns and A is a matrix with the principal axes of p rows and nf columns. The details for reconstitution of these data are described by (). The derivation of the duality diagram concept is also described by ().
Dynamic Bayesian networksA Bayesian Network (BN), also called a 'probabilistic graphical model', is a graphical representation of a model that explains the probabilistic relationship between variables. Each observed variable corresponds to a graph node. Directed edges represent conditional dependencies between nodes. BNs have become a popular method for modeling gene regulatory networks, since they are able to represent complex stochastic processes and allow combinatorial and non-linear relationships among variables of complex biological systems (). DBNs are an extension of BN, able to infer interactions from time-series datasets rather than steady-state data. They can also handle noisy data to capture the architecture of regulatory networks from microarray data (). DBN inference was carried out utilizing Banjo (Bayesian Network Inference with Java Objects). It focuses on score-based structure inference. For each network structure explored, the parameters of the conditional probability density distribution are inferred and an overall network's score is computed using the Bayesian Dirichlet scoring metric (BDe). In Banjo, heuristic approaches, such as greedy with random restart or simulated annealing, are used to search for the highest scoring graph among a set of networks. The output network will be either the top graph (highest score) or consensus network. The consensus network is computed based on the N topscoring networks by assigning exponentially weighted probabilities to the individual edges in each of the high-scoring networks, based on the ranking of each network in the set. The probability of edges being present in the consensus network is computed using the weighted average approximation among N highest scoring models. The background for the concept of the consensus graphs is described by (). Banjo was run on all the data sets using default parameters (supplementary data S7). To identify robust interactions among a set of top-scoring networks, Page: 1084 10821090
A.Moghaddas Gholami and K.Fellenbergwe used consensus networks. The output was rendered with dot, a graph layout visualization tool by AT&T (http://www.graphviz.org/). Since it is possible to run java from within MATLAB, we ran BANJO release 2.0 in MATLAB. We compared the DBN algorithm performance when each model dataset discretized into three, four and five bins. We obtained regulatory networks close to a 'true' network compiled from KEGG and other databases when three categories are selected.
EvaluationWe assessed sensitivity, specificity and accuracy of our approach by comparing the resulting gene networks to a gold-standard of known interactions. A true positive (TP) was counted as interaction that is present both in an observed and an expected network, a false positive (FP) for any edge that was predicted in the learnt network but does not exist in the expected network, a false negative (FN) as an edge that is present in the expected network but not in the learnt network, and a true negative (TN) when an interaction does not exist in either learnt or expected networks. To construct an expected network, we merged all pathways involved in our gene lists into a new graph containing all nodes and edges. Therefore, the expected network represents comprehensive regulatory paths and physical interactions, accounting for the fact that many KEGG () pathways embed other pathways. We used Ingenuity Pathway Analysis (IPA; http://www.ingenuity.com) to account for experimental findings reported in a variety of data resources, such as BioGRID, IntAct, MINT, KEGG and others as detailed in Supplementary data. In the expected network, all edges are supported by at least one published reference or from canonical information stored in the protein interaction databases.
Significance analysis of network motifsTo uncover the structural design principles of the reversely engineered GRN, we assessed the comprised network motifs. Network motifs are patterns occurring significantly more frequently than at random () in complex biological networks. A large number of comprised motifs indicate authenticity and robustness. Motif detection was carried out using a so-called rand-esu algorithm (), generating the random networks from the reversely engineered consensus network by a series of edge switching operations as the default randomization model. We searched 10 million random networks to obtain a comparison to the consensus network. The higher the number of randomized networks, the more accurate the results. Significance analysis of the motifs was carried out by comparing the occurrence of a motif in the consensus network to the occurrence of the same motif in the randomized network. Z-scores were calculated as the occurrence of a motif in the consensus network minus its random frequency divided by the standard deviation in random networks. The higher the Z-score, the more significant a motif. P-values correspond to the number of random networks in which the motif occurred more often than in the original network, divided by the total number of random networks.
Page: 1085 10821090
Cross-species meta-analyses without prior gene-affiliation
InitializationAs an initial step, A and B are (separately) divided into n gene clusters, each. For the results presented, we initialized with n = 3. Each cluster is represented by its centroid (weighted average) as if it were only one gene representing a typical transcription profile for this cluster. Each cluster centroid of A is paired with one cluster centroid of B. There are n! possible ways to combine A and B, each of which is subjected to CIA to determine the one of highest co-inertia. This affiliation, albeit of low granularity (only three connections), is used as a starting point for iteration.
IterationThe remaining procedure consists of two consecutive parts that are iterated with increasing n (until n reaches the number of samples). Both parts are identical in that they take as input an existing CIA, using its projected distances as weight matrix for Hungarian matching and let the resulting matches vote for cluster affiliations that are in turn basis for the next CIA. However, the two parts differ in that the first part starts on an affiliation of sample clusters in order to improve affiliation of gene clusters and vice versa. This is implemented by calling 'doMatching' subroutine. The first part uses the previously performed CIA, collecting the projected distances between the samples of A and B into a sample(A)  sample(B) matrix which is then subjected to the Hungarian algorithm as a penalty matrix. The resulting matching preferentially pairs samples of low distance (resembling coordination). Subsequently, samples of A and B are separately clustered into n sample clusters. Each sample cluster is represented by its cluster centroid (typical sample) and each cluster centroid of A is paired to a cluster centroid of B. The pairs are determined by majority voting of above matches, i.e. any two clusters with the highest number of connections between the comprised samples (arrays) become paired. The paired sample cluster centroids serve as connecting variables for a CIA projecting the genes. The second part uses these projected distances between the genes of A and B, collecting them into a gene(A)  gene(B) matrix which is then subjected to the Hungarian algorithm as penalty matrix. All operations of the second part resemble those in the first part, but the role of genes and samples are switched. In practice, the second part can be performed after transposing both A and B. Please note that the two parts are consecutively iterated until the co-inertia stops increasing (inner loop) before increasing n. The algorithm terminates as n approaches the number of samples (arrays) of the smaller data set.
RefinementThe motivation for this step is to allow a larger n (exceeding the number of samples) for the genes. 'Refinement' consists of two modules, 'Decider' and 'Rearrangement'. The 'Decider' determines whether the number of clusters proposed by the iteration part is accepted as the optimum or if there is room for improvement by further increasing n for the genes. The choice of the decider is tightly connected to the Silhouette values () of gene clusters. If a larger n (maybe even larger than the number of samples) improves clustering, 'Decider' will proceed to determine the optimum number of clusters. Subsequently, 'Rearrangement' generates m pairs of gene cluster centroids by calling the 'doMatching' subroutine.
Reverse Engineering gene regulatory networksFor the resulting gene cluster centroids, the CIA coordinates are back-transformed into a data table. Its format and scale resemble that of a conventional microarray data table but it comprises only the variance that is common to both input data tables (of gene cluster centroids). It is subjected to DBN inference resulting in a graph each node of which represents a (cross-species) pair of gene clusters, while its edges stand for inter-dependencies detected for both species. Back-transformation, DBN, as well as motif analysis are not used as parts of the algorithm. Apart from that revealing the underlying common gene regulatory network can be rewarding in and of itself, the resulting networks serve as a means to validate our algorithm.
Cell cycle datacerevisiae versus pombeTo introduce the method, we show its performance on two closely related datasets, one of which is tailored to resemble the other for another species. Spellman and coworkers recorded mRNA levels for 6178 open reading frames (ORFs) of Saccharomyces cerevisiae over two cell cycle periods in a yeast culture synchronized initially in the cell cycle stage M/G1 at 7 minute intervals for 119 min. Rustici and coworkers monitored mRNAs whose levels oscillate during the cell cycle for 6978 ORFs of Schizosaccharomyces pombe as a function of time in cells synchronized through centrifugal elutriation for 285 min and temperature-sensitive cell cycle mutants for 270 min at 15 min intervals. Both datasets were recorded on glass-slides using two-channel fluorescent labeling. Generally, synchronization substantially decreases after two periods. In order to maximize similarity, we selected 10 time points of highest synchronization and quality from either dataset. We will refer to these data as 'Sce' and 'Spo', respectively. The algorithm succeeded in producing the correct matching of time points after 20 iterations. Challenging the ability of our algorithm to reconstruct the correct order of time points without any knowledge about affiliation of neither time points nor gene orthologs, we randomly permuted the sequence of both the time points and genes. Typically, after 1635 iterations the algorithm converged to the very same result (data not shown). In the shown example, the algorithm terminated with an RV coefficient of 0.8983. While the algorithm's outer loops improved the matching score with increasing granularity, the inner loops optimized overall co-structure for a given n (Supplementary). The algorithm gradually increased the matching score in minimum two consecutive inner loops and identified the best similarity score by finding the correct affiliations of the connecting variables in seven outer loops. The result was verified in terms of optimal co-inertia and granularity as detailed in section S6 of supplementary data. The result was visualized by CIA (Supplementary). Here, the two pairs of projection coordinates are highly correlated and the overall similarity in the structure of the dataset was very high resulting in a RV coefficient of 0.8983. Clearly, the algorithm was able to detect and highlight the similarity between histones in these datasets, projecting them all in a cluster of histones differentiated from other functionally related genes (Supplementary, encircled in black).shows that also the other affiliated clusters comprise common functionalities and orthologs. We performed GO term enrichment analysis () and listed significant common terms along with the percentage of the involved genes in each cluster. Top common functions are represented by significantPage: 1086 10821090These interactions are color-coded according to their occurrence in KEGG or one of the other pathway databases listed in the 'Methods' section. True positive (TP) edges are shown in green, missing edges (FN) are shown in black, incorrect or previously unknown interactions (FP) are shown in red. Any green or black edge is supported by at least one publication.
A.Moghaddas Gholami and K.Fellenberg
Cross-species meta-analyses without prior gene-affiliation
associations of P-value <0.05.In the same manner, we summarized the percentages of correctly affiliated orthologs. A complete table listing all genes is given in the Supplementary. Based on the two back-transformed data tables, we represented each cluster by the gene-wise sum of all comprised genes across both tables. Subjecting this combined table to DBN algorithm, these cluster representatives became the nodes of a common gene network. A graphical representation of the resulting common network is shown in. To illustrate it by example, we follow its edges from the smallest to the largest cluster, moving through the cell cycle from S phase towards mitosis (). The histones (cluster g8) play an important role in transcriptional regulation. We observe an edge from g8 to g9 comprising the cyclin CLN2 comparing favorably with work of Santisteban and coworkers (). Following the cell cycle from S to G2, the cohesin complex is required to hold together the sister chromatids. This process is mediated by the acetyltransferase ECO1 of cluster g9 (S-phase) directly interacting with cohesion complex subunit SMC3 (G2-phase) of cluster g11 (). The edge linking g9 and g11 suggests an according tight transcriptional regulation of acetylase ECO1 preceding SMC3. Following the cell cycle from G2 to M, the common transcription network shows node g11 (G2) to regulate both g12 and g3, whereas g12 itself also regulates g3, forming a network motif referred to as feedforward loop (). It is often found in the context of signal amplification. The increase in cellular activity during G2/M transition is also reflected by increased glycolysis (GLK1, PFK1) and by g3 being the largest cluster. While still transcribing genes important for G2/M transition (SWE1) and DNA repair (RAD53, EXO1, MSH2, POL3), the cell already prepares for budding (BEM1,
SPH1, FAA1, BNI5, GIC1)and cytokinesis (HOF1, MYO3, STU2, YPT11). The observed edges can be explained by transcription factor activity. For the direct edge from g11 to g3, transcription factors SIM1 and FKH1 of g11 have been shown to regulate 2 and 8 genes in g3, respectively (genes and literature are provided in Supplementary). For the path from g11 to g3 via g12, 17 genes of g12 are targets of the transcription factor SFP1. While SFP1 itself was filtered out for showing unreliably small signals, it is regulated by KAR5, RPC11 and SMC3 of cluster g11 (Supplementary). From g12, the comprised transcription factors RDS2 and MAL33 are known to regulate PDR16 and ALG14, OPY2 and RAD53 of g3, respectively (Supplementary). While the edge from g11 to g12 can also be obtained from the 'Sce' dataset alone (), the edge from g6 to g12 is not present in either single network () but is only detected by combining the datasets (). The same is true for the above described edge between g9 and g11. The superiority of the common network is quantified in Section 3.3. Out of 144 possible directed interactions, 53 true positives, 5 falsepositives, 36 false-negatives and 50 true-negatives were detected. Assuming that any interaction listed in any database for these genes would be detectable from these small datasets, sensitivity is 60%. Thus, most (more than half) interactions in pathway databases are present in these data, common to both datasets, and successfully detected here, with 72% accuracy and a specificity of 91%. Furthermore, we assessed the coherence of the interactions found, i.e. their tendency to form sound regulatory modules, by network motif analysis. Size-3 and size-4 subgraph frequencies were determined by generating 10 million directed random graphs with same sample probabilities and in which cases the probability that a given edge exists was preserved. For this, we calculated all 13 non-isomorphic directed size-3 subgraphs as well as 199 nonisomorphic directed size-4 sub graphs. All 21 network motifs listed in Supplementary Table S2 exhibit P < 0.05 as well as Z-scores greater than two.
Page: 1088 10821090
A.Moghaddas Gholami and K.Fellenberg
Superiority of the common networkIn order to assess the advantage of combining datasets using our algorithm, we compared the common network to the networks obtained from each single dataset. The networks inferred from 'Sce' and 'Spo' datasets are shown in Figures 3 and 4, respectively. The specificity and sensitivity of the networks compared to the common network is summarized in. The common network improves upon the single ('Sce' and 'Spo') networks in terms of absolute numbers of true positive and false positive edges, as well as in sensitivity, specificity, accuracy and the number of network motifs ().
Application to further datasetsThe first pair of datasets is ideal for verifying correct affiliation of the time points (Supplementary). One set was made to resemble the other where possible, extending the cell cycle transcription studies to another species. In order to demonstrate the performance of our algorithm in a real-world-scenario, we picked a second pair of more distantly related datasets modeling the reactions of mouse and human to estradiol (Supplementary data Section S5). Although both datasets had been recorded on the generally more crisp Affymetrix Gene Chip platform and although both comprise more inertia (information) than for the yeast data (0.207 and 0.2716 as opposed to 0.115 and 0.1393), RV decreases to 0.8. However, that still warrants considerable co-structure. The resulting common model (Supplementary) appears as accurate (69%) compared to the yeast common network (72%). For the above examples, we were not provided with ortholog information for all genes. A third pair of datasets provides more direct evidence in that both datasets stem from the same species, thus all gene affiliations are known. Both samples and genes were permuted for one of the two S.pombe cell cycle experiments described in the Supplementary data Section S8. Our algorithm was able to reconstruct correct affiliations of all samples (Supplementary) as well as for 87% of all genes (Supplementary).
Page: 1089 10821090
Cross-species meta-analyses without prior gene-affiliationn clusters of each dataset, seeking for an inter-datasets affiliation of optimal co-inertia. It does so via a combination of CIA, Hungarian matching and majority voting, alternating between 'connecting variable' affiliations. While each of these steps 'learns' from the previous one, the approach is non-greedy in that each decision on an e.g. affiliating two genes (or clusters thereof) may be reversed in the next iteration. Gene cluster affiliations were evaluated directly (within the same species), by counting gene orthologs, and by inferring common GRN. Although the second pair of datasets shows less similarity, the common GRN does not appear less accurate than that for the first. As the terminal granularity (final number of distinguishable clusters) is crucial for network inference, we carefully evaluated the termination point for our algorithm. The largest (optimal) numbers for RV, for Silhouette values, for true positive interactions and for the yield of network motifs all coincide for n = 12 in the first example as well as for n = 10 in the second. In the first example, the iteration part of the algorithm could not come up to the final n because the number of clusters cannot exceed the number of samples in the smaller dataset (here both 10). Instead, n = 12 was determined by the refinement part while for the second dataset the decider module determined that further refinement was not beneficial. Generally, in our hands a yielding granularity never exceeded the number of samples (arrays) by far if at all. However, after back-transformation and RE, the inferred network comprises 21 significant network motifs and the delineated edges show 72% accuracy, 91% specificity and, remarkably, 60% sensitivity in comparison to known interactions. Thus, the chosen granularity, although it is small in comparison to the number of genes, resulted in a robust and most informative network. Furthermore, the common network shows increased specificity, sensitivity, and accuracy, as well as more significant network motifs if compared to the networks inferred from the single datasets. This demonstrates that it is possible to successfully combine datasets solely on the basis of co-expression, without applying any further information. To our knowledge, our algorithm represents a novelty in this respect. External knowledge can be made available to the method via the penalty matrices. These can be weighted according to known similarities between genes and/or between samples. Here, however, we choose to use all external knowledge for evaluation purposes. Requiring no beforehand affiliation, our algorithm can be used for automated large-scale combination of microarray datasets. Backtransformation results in an artificial data table containing only the variance common to the two initial tables while retaining the scale of the first table. Thus, it can be handled like any real data table, e.g. for subsequent GRN inference or for combining it with yet another real data table or a combination of such. Thus, the method can be extended to linking more than two datasets, either hierarchically merging back-transformed data tables, or by using multiple co-inertia analysis. With increasing numbers of datasets to be summarized in one model, the common variance will decrease. Generally speaking, we would expect a tendency for such a model to be small, widely applicable, robust, and relatively free of noise and systematic errors when multiple experimental platforms are mixed. Extensive crossspecies models could be useful in a pharmacological context in order to predict if a model organism closely resembles a human regulatory mechanism to interfere with. Furthermore, the application of our algorithm is not limited to microarray data. It could serve to integrate proteomic, transcriptomic and high-throughput methylation data recorded for the same samples.
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
ALGORITHM AND RESULTS 3.1 Algorithm We combined the above described existing methods in an iterative procedure to estimate the common regulatory network from different species. An overview is given in Figure 1. Starting on a pair of preprocessed datasets A and B of no particular numbers of genes and also differing in the numbers of samples (arrays), we iteratively apply methods described in the 'Methods' section (CIA, Hungarian matching and k-means clustering) in the following manner (Algorithm 1). Fig. 1. Overview. Algorithm 1 Pseudocode.
DISCUSSION Co-expression has been widely used to reveal, amongst others, functional relationships (Adie et al., 2006; Lage et al., 2007) or to identify common regulatory motifs (Brunner and van Driel, 2004; Franke et al., 2006). Much like conserved sequence motifs, important regulatory patterns can be observed across species borders. In order to account for different scales such datasets may have, co-expression can be determined on the basis of intermediate results such as vote counting (Rhodes et al., 2004; Smid et al., 2003), probabilities (Tsiporkova and Boeva, 2008) or ranks. However, in order not to lose any information beforehand, we perform information reduction in the very process of combination. Co-inertia analysis (Doldec and Chessel, 1994) is particularly well-suited for this task, reducing dimensions based on the common variance (coinertia) of two datasets. It can deal with datasets whose variables (genes) far exceed the number of samples (arrays) and its use for microarray data has been demonstrated before (Culhane et al., 2003). As a prerequisite, however, it requires either the samples or the genes to be affiliated beforehand. In a cross-species survey of different samples, those genes would have to be reliably affiliated between datasets. However, sequence similarity based orthology does not account for evolutionary phenomena such as sub-and neo-functionalization, thus not necessarily representing functional orthology in every case (Fierro et al., 2008). Here, instead of identifying orthologs beforehand, affiliations are computed by our algorithm on the basis of the expression data. In an approach solely based on co-expression, genes that show identical expression behavior are indistinguishable, thus becoming one single entity. This entity can be viewed as a node in a GRN. Comparing such networks with known interactions supplied by KEGG and other repositories can provide an additional means to evaluate the performance of our algorithm. To this end, out of many algorithms proposed for network inference, we picked DBN as one of the successful algorithms to date for time-series (Smith et al., 2003; Yu et al., 2004). Non-time series data can be handled, for example by information-theoretic approaches (Basso et al., 2005) or algorithms based on ordinary differential equations (ODE) following transcriptional perturbations (Bansal et al., 2006). For DBN inference, as for other GRN inference methods, the number of observations is critical. In general, due to the lack of samples, only few genes can make it as nodes for stable network inference. In order to obtain number and composition of nodes optimal for inferring a common network, our algorithm increases the granularity step by step (outer loop). For each n, the inner loop pairs the
