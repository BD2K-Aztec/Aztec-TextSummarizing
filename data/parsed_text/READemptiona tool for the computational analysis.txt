RNA-Seq has become a potent and widely used method to qualitatively and quantitatively study transcriptomes. To draw biological conclusions based on RNA-Seq data, several steps, some of which are computationally intensive, have to be taken. Our READemption pipeline takes care of these individual tasks and integrates them into an easy-to-use tool with a command line interface. To leverage the full power of modern computers, most subcommands of READemption offer parallel data processing. While READemption was mainly developed for the analysis of bacterial primary transcriptomes, we have successfully applied it to analyze RNA-Seq reads from other sample types, including whole transcriptomes and RNA immunopre-cipitated with proteins, not only from bacteria but also from eukaryotes and archaea. Availability and implementation: READemption is implemented in Python and is published under the ISC open source license. The tool and documentation is hosted at http://pythonhosted.org/ READemption (
INTRODUCTIONRNA-Seq, the examination of cDNA by massively parallel sequencing technologies, is a potent way to perform transcriptome analyses at single-nucleotide resolution and with a high dynamic range (). It has been successfully used to annotate transcript boundaries and to identify novel transcripts such as small regulatory RNAs in both prokaryotes and eukaryotes (). Most prominently, it can be applied to quantify the expression levels of genes, having been shown to be more powerful to detect changes in gene expression than microarrays (). It can also be used to study the interaction of proteins and RNAs through performing RNA-Seq of coimmunoprecipation (coIP) samples (K  onig et al., 2012). Likewise, any other subset of RNA molecules from, for instance, RNA size-fractionation, ribosome profiling, metatranscriptomics or degradome profiling experiments can be sequenced. Owing to decreasing costs and ever increasing speed of deep sequencing, the bioinformatical analysis has become a bottleneck of RNA-Seqbased projects. We have created an automated RNA-Seq processing pipeline named READemption with the initial purpose to handle differential RNA-Seq (dRNA-Seq) data for the determination of transcriptional start sites in bacteria (). We saw the need for this, as other available RNA-Seq analysis pipelines (e.g.) were not designed for this application. Additionally, while most available RNA-Seq pipelines put priority on fast mapping, we have chosen segemehl as short read aligner (). This mapper has a relatively high demand of memory and computation capacities but, in return, it offers high sensitivity as well as a low false-discovery rate and can perform multiple splitting of reads (). We have since extended the functionality of this Pythonbased pipeline, so that it is now capable of analyzing RNA-Seq reads from a wide range of experiments. We have successfully applied READemption for the analyses of RNA samples from bacterial, archaeal and eukaryotic species as well as for RNA virus genomes (e.g.). It is able to work with reads from both Illumina and 454 platforms of different lengths and can be used for single-and paired-end sequenced libraries. several parameters, which enable the user to adapt its execution to the specific needs. READemption provides the subcommands align, coverage, gene_quanti, deseq, viz_align, viz_gene_ quanti and viz_deseq, which combine several processing substeps into comprehensible units. Read processing and mapping: The fundamental tasks of preprocessing the input reads and aligning them to reference sequences is covered by the subcommand align. In an initial step, READemption parses the input read files in Fasta or Fastq format, performs quality trimming, removes adapters and/or poly(A)-tails introduced during the library preparation and discards reads shorter than a given cutoff (default 12 nt). For the alignment of reads to reference sequences, the short read mapper segemehl and its remapper lack () are used. To have high confidence of read mappings even for short sequences, the required mapping accuracy of 95% is used per default. The mapping is followed by the conversion of the resulting Sequence Alignment/Map format (SAM) alignment files into Binary Alignment/Map format (BAM) files and the generation of mapping statistics. The latter summarizes the numbers of uniquely and multiple mapped reads as well as the number of alignments, clipping and filtering events for each genomic element in table format. Coverage calculation: Based on the read alignments provided in the BAM files, cDNA coverage files can be generated using the subcommand coverage. It creates several wiggle files that are based on different normalization methods such as the division by the total number of aligned reads and represents the nucleotide-wise cDNA coverage in a strand-specific manner. To visually inspect the reads mapped to the individual cDNA libraries and to compare them among each other, these wiggle files can be loaded into common genome browsers. Gene expression quantification: The read alignments can also be further used by the subcommand gene_quanti to calculate gene-wise read counts. For this purpose, annotation files including gene positions in GFF3 format (Gene feature format) have to be provided. For each annotation entry, the number of reads that are overlapping with a user-defined number of nucleotides (default 1 nt) are reported. To also detect non-annotated antisense transcripts, the reads which are mapped in antisense direction to a given annotation can be quantified. Besides raw genewise read countings, normalized valuesby total number of aligned reads as well as reads per kilobase per exon model per million mapped reads (RPKM) ()are returned. Differential gene expression analysis: For pairwise expression comparison, the subcommand deseq offers statistical analysis based on the approach implemented in DESeq2 (), which builds on the raw read counting and is a widely adapted and intensively tested library (). The user has to specify the conditions of the libraries to let DESeq2 treat replicates accordingly. The results of DESeq2 are reformated and supplemented with the provided gene annotations. Plotting: The final three subcommands called viz_align, viz_gene_quanti and viz_deseq generate several visualizations that help to interpret the result of the subcommand align, gene_quanti and deseq, respectively. The diverse plots contain among others histograms of the read length distributions before and after the read clipping, volcano plots and MA plots (log ratios (M) versus arithmetic mean of expression values (A)) of the differential gene expression analysis. READemption requires Python 3.2 or higher (http://python. org), Biopython (), matplotlib () and numpy () as well as the samtools () wrapper pysam (http://pypi.python.org/pypi/pysam/). The subcommand deseq relies on an R (http://cran.r-project.org) installation and the bioconductor package DESeq2 (). Instructions how to install READemption and how to execute its subcommands includingexamples can be found in the documentation. Additionally, an Ubuntu live and installation image with READemption preinstalled is available for download.
CONCLUSIONSWe present an open source pipeline for the analysis of RNA-Seq data from all domains of life. READemption generates several output files that can be examined with common office suites, graphic programs and genome browsers. Its features make it a useful tool for anybody interested in the computational analysis of RNA-Seq data with the required basic command line skills.
DESCRIPTION READemption integrates the steps that are required to interpret and gain biological knowledge from RNA-Seq experiments in one tool and makes them accessible via a consistent command line interface. Additionally, it conducts parallel data processing to reduce the runtime. The tool performs quality trimming, poly(A) and adapter clipping as well as size filtering of raw cDNA reads from different sequencing platforms, mapping to reference sequences, coverage calculation, gene-based quantification and comparison of expression levels. A summary of the pipeline's workflow is depicted in the flow chart in Figure 1A. Moreover, it provides several statistics such as read mappability and generates plots and files for the visualization of the results in genome browsers (for examples, see Fig. 1B). READemption was designed as high-performance application and follows the concept of 'convention over configuration'. This includes the use of established default parameter values and the approach that files are placed or linked into defined paths and are then treated accordingly. The names of the input read files are used to generate names for the associated output files. Though the described design principle, READemption offers *To whom correspondence should be addressed.  The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
K.U.F  orstner et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
The READemption RNA-Seq pipeline at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
