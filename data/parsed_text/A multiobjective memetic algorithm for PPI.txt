Motivation: There recently has been great interest in aligning protein–protein interaction (PPI) networks to identify potentially orthologous proteins between species. It is thought that the topo-logical information contained in these networks will yield better orthology predictions than sequence similarity alone. Recent work has found that existing aligners have difficulty making use of both topological and sequence similarity when aligning, with either one or the other being better matched. This can be at least partially attributed to the fact that existing aligners try to combine these two potentially conflicting objectives into a single objective. Results: We present Optnetalign, a multiobjective memetic algorithm for the problem of PPI network alignment that uses extremely efficient swap-based local search, mutation and crossover operations to create a population of alignments. This algorithm optimizes the conflicting goals of topological and sequence similarity using the concept of Pareto dominance, exploring the tradeoff between the two objectives as it runs. This allows us to produce many high-quality candidate alignments in a single run. Our algorithm produces alignments that are much better compromises between topological and biological match quality than previous work, while better characterizing the diversity of possible good alignments between two networks. Our aligner's results have several interesting implications for future research on alignment evaluation, the design of network alignment objectives and the interpretation of alignment results. Availability and Implementation: The Cþþ source code to our program, along with compilation and usage instructions, is available at https
IntroductionAs the sizes of known proteinprotein interaction (PPI) networks grow, so does interest in analyzing them. One of the more ambitious efforts in this area is aligning the PPI networks of two different species, with the goal of identifying orthologous proteins as well as shared pathways and complexes that hint at the PPI network of a common ancestor. There has already been a good deal of progress in this area, with past work reporting success in finding large shared subnetworks between Saccharomyces cerevisiae and Homo sapiens, as well as success in reconstructing phylogeny based on network overlap discovered by an aligner (). Despite these successes, PPI network alignment is a young research area. The incomplete, noisy nature of existing PPI networks makes alignment difficult, with existing aligners performing dramatically better on noise-free synthetic networks compared with noisy real-world networks (). Furthermore, it has been found that the two objectives of biological and topological fit that these aligners optimize conflict to a larger extent than previously realized. Different aligners construct alignments that are dramatically different, with some optimizing topological fit at the V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com 1988doi: 10.1093/bioinformatics/btv063 Advance Access Publication Date: 9 February 2015 Original Paper expense of sequence similarity, while others do the opposite. While some of these aligners provide a user-controlled parameter for adjusting between optimizing one objective over the other, even when this parameter is adjusted as widely as possible, existing aligners only output alignments in small, non-overlapping regions of objective space that are often quite distant from each other (). Lastly, these aligners tend to produce very different alignments, sometimes agreeing on as few as 5% of their total aligned pairs (), which makes it necessary for the user to run many different aligners to get an idea of the many alignments possible. The difficulties with the conflict between topological and biological fit, and the disparate results of existing aligners, show that the problem of PPI network alignment is far from solved. To this end, we introduce a multiobjective memetic algorithm, Optnetalign (Optimizing Network Aligner), for performing network alignment. Unlike most existing aligners which use custom-built estimators of node similarity which don't always have a clear connection to final alignment quality, we use a multiobjective memetic algorithm (), which can produce a large number of diverse, high quality alignments in a single run. Our approach is able to better optimize both the topological and sequence similarity of the proteins aligned, and instead of arbitrarily emitting a single alignment at one point in objective space, Optnetalign produces a Pareto front of alignments that characterize the wide variety of possible tradeoffs between the conflicting objectives of network alignment. This tends to produce a wider variety of alignments than using all previously created aligners together, and these alignments tend to be comparable to or of better quality than those produced by previous aligners.
Methods
PPI networks and the goal of alignmentA PPI network is a graphical representation of all the proteins in a given organism, where the nodes of the network represent proteins, and a link between two proteins indicates that they interact to perform some biological function. Protein interaction is measured through a number of different experimental methods, with the most common being coimmunoprecipitation (). A large amount of effort has gone into collecting and curating the results of many protein interaction experiments, and the results are stored in databases such as DIP (), Isobase (), BIOGrid () and STRING (). A related research effort in this area is the Gene Ontology (GO), a large database annotating genes and proteins with information about their function, the biological processes in which they participate and the cellular components in which they are found (). The GO database is constantly being updated and revised as new discoveries are made. An important area of research is the transfer of GO annotations from proteins in one species to orthologous proteins in another. Some species have more complete GO annotation data than others, so it is desirable to find a way to accurately and automatically predict GO annotations for unannotated proteins in less-studied species. PPI network alignment is a way to use both the sequence similarity between proteins, as well as the topology of PPI networks, to find likely orthologous proteins between species. The goal is to create algorithms that can automatically find likely subnetworks of two species' PPI networks that are common to the two species, and from there form hypotheses about protein function in species for which less information exists. A single run of an alignment program can generate thousands of candidate ortholog pairs.
Pairwise global alignmentWe are given two graphs G 1  V 1 ; E 1  and G 2  V 2 ; E 2 , whose vertices represent proteins, and the presence of an edge (u, v) in E 1 (or E 2 ) indicates that the two proteins represented by u and v interact in G 1 (or G 2 ). We assume, without loss of generality, that jV 1 j jV 2 j. The problem of pairwise global alignment is to find a one-to-one function (In the definitions that follow, we will employ a shorthand where f is also applied to edges. In such cases f u; v is shorthand for f u; f v. This makes several definitions significantly easier to read.) f : V 1 ! V 2 that maps each node in V 1 to the node it best matches in V 2 , according to the topology of the network around the node and the sequence similarity of the proteins represented by the nodes. The various methods for determining the 'best' match will be described further below. The resulting alignment f shows us a subnetwork that the two networks have in common. The problem of global alignment is equivalent to the subgraph isomorphism problem, which is NP-Complete (), so aligners produce approximate solutions using a variety of techniques that will be discussed below.
Evaluating alignment qualityOnce an alignment has been constructed, we must measure the extent to which it has satisfied the two objectives of maximizing both the topological fit between the two networks and the number of likely orthologs that have been matched. These objectives are intended to measure the extent to which we have identified overlapping pathways and orthology relationships respectively. Three closely related metrics for topological fit have been used in the global network alignment literature, which present different ways of evaluating how well one network has been matched to the other: EC (), ICS () and S 3 (). Of these, EC is the most universally used, while ICS and S 3 are newer refinements of EC. These three metrics are ratios taking values between 0 and 1, with higher values being better. They all share the same numerator, which represents the number of edges that have been conserved by the alignment f.They differ, however, in their denominators. EC simply divides by jE 1 j, showing us how many of the edges in the first network have been successfully matched. ICS refines this by instead dividing by jE G2f V1 j, the number of edges in the induced subgraph of G 2 that f maps to. This effectively penalizes alignments from sparse graph regions to dense graph regions. S 3 is a further refinement of ICS, which penalizes dense-to-sparse as well as sparse-to-dense alignments by dividing by jE 1 j  jE G2f V1 j  jf E 1  \ E 2 j. While we previously evaluated existing algorithms using ICS (), we switch to S 3 in this article because, in contrast to the aligners we evaluated previously, Optnetalign is able to 'cheat' when optimizing ICS by minimizing the denominator without increasing the numerator, and MAGNA exhibits this behavior as well (Saraph and Milenkovic,Milenkovic, 2014). S 3 properly penalizes this behavior. We also use a measure of agreement derived from biological knowledge. The true alignment between two PPI networks is at least partially unknown, so one cannot simply report the percentage of nodes mapped to their true orthologs, except when using synthetic benchmark data. However, we can at least verify that the proteins mapped to one another are similar in function. All the literature on PPI network alignment makes use of GO annotations to evaluate the accuracy of their alignments, by comparing the similarity of GO annotations between aligned proteins. Several papers simply report the percentage of aligned pairs that share more than k GO annotations (), while others use ontological similarity methods (). We use a Jaccard index, introduced by Aladag and Erten (2013). In the context of network alignment, this measure is called GO consistency, and is defined asGOCu; v  jGOu \ GOvj jGOu [ GOvjfor an aligned pair of nodes u 2 V 1 and v 2 V 2 , where GO(u) denotes the GO terms associated with the protein u. We restrict this to GO terms at distance five from the root of the ontology, so as not to confuse the analysis by using GO terms of differing specificity. We then report the sum of the GO consistency over all alignment pairs for each alignment produced. To further ease comparison with existing aligners, we evaluate on the same dataset of Isobase networks as we used in our previous work (), which combines PPI information from DIP (), BIOGrid (), and the Human Protein Reference Database (), three curated sources of PPI data derived from a variety of experimental methods (for more information on the Isobase networks, see our Supplementary Information File). The only differences are that we now use the S 3 metric instead of ICS, and, since the synthetic dataset NAPAbench () did not exhibit the same tradeoff between ICS and biological similarity that is exhibited in the real-world Isobase networks (), we evaluate primarily on the Isobase networks, using the NAPAbench data to verify the correctness of our alignments, since the true alignments for NAPAbench are known. Both topological similarity techniques and sequence similarity have advantages and disadvantages. It has been argued that overreliance on topological similarity can be misleading, since actual complexes may appear disconnected in current noisy, incomplete datasets, and so sequence similarity information is essential to produce the best alignment possible (). Sequence similarity scores also have their problems, since the actual level of sequence similarity between two proteins that serve a similar function can vary (). Previous work has found () that existing aligners uncover a tradeoff between topological fit and biological fit when constructing alignmentsit is not possible to jointly maximize both. This tradeoff can be quite dramatic. For example, on the Caenorhabditis elegansDrosophila melanogaster alignment problem, NETAL () achieves an S 3 of 0.41 and a GOC of 12, while PINALOG () manages a S 3 of 0.065 and a GOC of 230. When existing aligners are all plotted for one of these problems (as inlater), we see a distinctive curve of tradeoffs between these two objectives. We also find that these aligners produce alignments in non-overlapping regions of the objective space, even for those aligners that provide a parameter for controlling the tradeoff between the two objectives. As we explain further below, ours is the only aligner that was designed to explicitly explore the possible tradeoffs between these two objectives, and to output many alignments for further analysis.
Existing alignment algorithmsOne of the first algorithms for global network alignment was IsoRank (). This was then extended into a version that could align many networks simultaneously, called IsoRankN (). These two work by computing a similarity measure similar to Google's PageRank algorithm, and this is combined with BLAST bit scores to find a mapping. Another notable set of aligners is the GRAAL family (; MemievicMemievicnd Prulj, 2012; MilenkovictMilenkovict al., 2010). These work by counting small induced subgraphs called 'graphlets' to compute pairwise node similarity. They differ mainly in what additional similarity measures they use, and in their matching stages. NATALIE 2.0 frames alignment as a relaxation of an integer linear programming problem (). GHOST uses methods from spectral graph theory to estimate node similarity (). PINALOG recursively maps networks together by first matching dense subgraphs, and then matching the nodes within those subgraphs (). NETAL uses topological data exclusively, iteratively computing match confidence as the expected number of conserved edges (). SPINAL uses both coarse-and fine-grained matching steps to iteratively improve an alignment (). PISwap () first creates a maximum-weight match by bit score, and then improves the topological fit of the alignment through swap-based local search. MAGNA () is the first aligner to use a genetic algorithm, and uses a crossover-only design. Most aligners can be categorized as belonging to one of two classes. The first class, which has been much more popular, is what we call two-stage alignment. Such aligners first compute some estimate of the similarity of each pair of nodes in V 1  V 2 using some topological similarity metric and (in most cases) BLAST bit scores or E-values, and then use this similarity matrix to create a maximumweight bipartite matching between the nodes of V 1 and V 2. A simple strategy for this matching is the Hungarian algorithm, which produces an optimal matching (). However, because the similarity scores used are themselves only approximate, the On 3  time complexity of the Hungarian algorithm is generally not worth the time, and most aligners favor faster, greedy matching algorithms. Many aligners, such as GRAAL (), MI-GRAAL (), and GHOST (), use variants on a 'seed-and-extend' method, where the most similar pair of nodes is aligned first, and then nodes neighboring that pair are matched. The second, and much smaller class, that is sometimes used in network alignment are search-based aligners. These aligners use heuristic or metaheuristic algorithms to continuously refine a single alignment or a population of alignments. With such algorithms, the alignment objectives that these aligners are trying to optimize are computed continuously as the alignment is constructed, instead of being measured afterward as they are in the two-stage aligners. Only a handful of search-based aligners exist. These are SIM-T (), which uses tabu search, where 'moves' are additions and removals of aligned pairs from the alignment; PISwap (), which uses the 3-opt heuristic to interchange the assignments of three aligned pairs at each step; and MAGNA (Saraph and Milenkovic,Milenkovic, 2014), which uses a genetic algorithm that attempts to maximize either EC, ICS or S 3. SPINAL () also performs some amount of swap-based hill climbing in its 'fine-grained' matching stage. Outside of the biological network alignment literature, the use of metaheuristic search for graph matching has been researched as well, but these approaches are less relevant as they only optimize topological fit and are applied to graphs much smaller than those seen in bioinformatics (). Optnetalign falls into the search-based category, because we believe the two-stage paradigm has a number of severe weaknesses. First of all, two-stage aligners typically introduce both a novel way of computing pairwise node similarity along with a new matching algorithm. Little work exists on mixing-and-matching approaches to the two stages to discover whether the first or second stage is more responsible for the results of a given aligner. To our knowledge, the only works attempting this compared only MI-GRAAL to IsoRankN (MilenkovictMilenkovict al., 2013) and MI-GRAAL to GHOST (). Since two-stage algorithms do not track alignment quality as they construct their alignments, it is very difficult to understand what portions of a two-stage algorithm are responsible for the quality of the results. This makes it difficult to create a new algorithm of this type. As Saraph and Milenkovic(Milenkovic Milenkovic(2014) recently observed, these two-stage aligners, while hoping to optimize metrics such as EC and some metric of GO term agreement, actually optimize ad-hoc similarity scores that have no clearly established relation to standard alignment evaluation metrics. The existing literature provides little explanation of why or whether such similarity scores would be expected to work. In contrast, search-based aligners focus on maximizing the actual alignment objectives that are currently accepted in the alignment literature. A problem shared by all existing aligners is that they do not explicitly approach the problem of network alignment as a multiobjective one. It has become increasingly clear that there is a tradeoff between our alignment objectives, as we discussed above. However, the best any existing aligner does to address this problem is providing users with a parameter a, which gives the user rough control over the weight of biological or topological similarity in constructing an alignment, with some equation similar to simu; v  a  tu; v  1  a  bu; vwhere sim(u, v) is the aligner's estimated overall similarity between nodes u and v and t(u, v) and b(u, v) are the aligner's estimated topological and sequence similarity of the two nodes respectively. This is insufficient. Not only does this approach requires trial-and-error experiments on the part of the user, and complete recalculation of the alignment each time a is adjusted, but existing aligners only cover a narrow section of the objective space, even when varying a as widely as possible. Optnetalign produces a variety of solutions more diverse than existing aligners combined, and does so in a single run without extra effort on the part of the user.
Multiobjective optimizationMetaheuristics are a family of optimization techniques for problems that cannot be framed in a way amenable to standard optimization techniques, such as when objective functions are discontinuous, not differentiable or not functions of real numbers. In PPI network alignment, our goal is to maximize several objectives that are a function of a network alignmentthe problem must first be relaxed for standard optimization techniques to work (). Metaheuristics are thus a natural fit for network alignment. Genetic algorithms are a particular family of metaheuristics inspired by biological evolution (). Initially, a population of candidate solutions are generated at random. These solutions are ranked by their fitness, and the best of them are allowed to 'breed' to produce a new population of solutions. The new population undergoes mutation with some small probability, and then the process begins again, until an acceptable solution has been found (). This approach is applicable to many problems, since it only requires a way of scoring the 'fitness' of candidate solutions, and a data structure representing solutions for which we can define a useful crossover operation (for combining two existing solutions) and a mutation operation (for randomly modifying solutions). Memetic algorithms are a generalization of standard genetic algorithms that additionally incorporate a local search heuristic to further improve their results (). Genetic algorithms and local search heuristics are complementary the former explores large spaces quickly through crossover and mutation, while the latter is particularly effective at refining solutions that have been found. While genetic algorithms have been used since the 1970's (e.g.), variants capable of efficiently optimizing multiobjective problems have only become a focus of research more recently, with algorithms such as NSGA-II () and SPEA2 () becoming immensely popular. Other local search approaches to multiobjective optimization have had great success, as well (). Multiobjective memetic algorithms have also been developed in recent years (). The key difference between single objective metaheuristics such as MAGNA () and multiobjective metaheuristics such as Optnetalign is that the latter can optimize several objectives, even if they conflict, and then output a representative set of solutions that are optimal tradeoffs between the conflicting objectives. Standard genetic algorithms represent the fitness of a solution as a single number, often by creating a linear combination of multiple objectives using an equation similar to Equation 3. Then, solution x is preferred to solution y if fitnessx > fitnessy. However, if x has a high topological fit and a low biological fit, while y has a low topological fit and a high biological fit, it may be that neither solution is clearly better. This information is lost using the approach of Equation 3. Multiobjective optimization replaces the greater-than relation with the subtler relation of Pareto dominance, which operates on a vector of fitness values. We now introduce several new terms used in multiobjective optimization (we refer the reader to e.g.for a more thorough description of these concepts than space permits here). The first is Pareto optimality: a solution to a multiobjective optimization problem is Pareto optimal if further increasing one of the objectives would require decreasing one or more of the other objectives. Such solutions represent optimal tradeoffs between the given objectives. The second concept is Pareto dominance: solution x dominates solution y if x is at least as good as y with respect to all objectives, and strictly better than y with respect to at least one objective. We prefer a solution x to a solution y if x Pareto dominates y, and we are indifferent between x and y if neither dominates the other. This definition leads to the possibility that a set of solutions may be nondominated with respect to each other. Multiobjective genetic algorithms work by selecting non-dominated members of the population for reproduction at every generation, in the hopes of approximating the set of Pareto optimal solutions. This approximate Pareto optimal set will, in turn, allow us to characterize the Pareto front of the objective spacethe boundary between attainable and unattainable solutions. Multiobjective genetic algorithms output a wide variety of representative solutions from the Pareto optimal set. Since these solutions are all Pareto optimal, we cannot a priori prefer one of them over another, and a human decision maker must use some other information or subjective preference to decide which of these solutions to keep. In the case of PPI network alignment, this means that our algorithm produces a number of alignments with different tradeoffs between topological and biological fit. These alignments can then be studied further to better understand the relationship between the two networks under consideration.
Our algorithmWe present a multiobjective memetic algorithm that discovers a representative set of non-dominated alignments using crossover, mutation and swap-based hill climbing. Our algorithm maintains a population of non-dominated alignments and attempts to improve them. The algorithm initializes with randomly-constructed alignments. On each iteration, Optnetalign selects random members of the population, performs swap-based crossover and mutation, followed by swap-based hill climbing. We randomly select either hill climbing that improves one objective while ignoring the others, or hill climbing that only makes moves that do not worsen any objective. The resulting alignment is then placed in the population if it is not Pareto dominated by any other population member, and alignments it Pareto dominates are removed from the population. This continues until a user-specified time limit is reached, after which the program outputs all non-dominated solutions found. Generally, we find that the algorithm converges after about 10 h of runtime. Following other genetic algorithms for network alignment, we adopt a permutation encoding for our alignments (; Saraph and Milenkovic,Milenkovic, 2014). In this encoding, we label the n nodes of each network with the integers f0; 1; :::n  2; n  1g. Since we assume jV 2 j!jV 1 j, we add 'dummy' nodes to V 1 so that jV 1 j  jV 2 j. Then our alignment f can be stored in memory as an array a such that if f(u)  v, then a u  v. All indices i!jV 1 j of a are ignored. This representation simplifies searching through the space of alignments to searching through the space of permutations of integers in the interval 0; jV 2 j, allowing us to adapt permutation-based search operators that have been wellstudied in genetic and local search algorithms for the traveling salesman problem (). We adopt the Uniform Partially Matched Crossover (UPMX) operator introduced in a genetic algorithm for a related largest common subgraph problem (). We compared this to several other standard and custom-built crossover operators and found that it tended to give the best performance. UPMX works as follows: for two permutations a and b, for each index i with probability cxswappb, swap the value of a i and b i. Unless a i  b i , the new values of a i and b i after the swap will occur in their respective arrays in two places. To fix this, we also swap a j and b k , where j and k are the indices of the duplicate values in their respective arrays. An example of this swap process for index i  0 follows.For mutation, we also adopt a simple swap-based scheme. For a permutation a, for each index i with probability mutswappb, we randomly select an index j 6  i and swap a i with a j. We also make use of two variants on a simple hill climbing algorithm based on swaps. The first variant, hillClimbNonDominated, performs repeated random swaps, undoing a swap if it worsens any of the objective functions. The second variant, hillClimbOneObj, takes an objective name as an argument, and only undoes a swap if the given objective is worsened, ignoring any worsening of other objectives. We use the former hill climbing variant as a core function to improve our population of alignments, and use the latter to increase the variance of our population in objective space, which helps us to find a better set of representatives of the approximated Pareto front. It is important to note that our crossover, mutation and hill climbing functions all use swapping as their basic operation. Since the only way permutations are modified is by swapping, this allows us to implement our fitness evaluations very efficientlywe only compute the change in the user-specified objectives at each swap. This allows us to evaluate millions of swaps per second on a desktop CPU. This speed is such that a simplified version of our program, which employs only hill climbing to create a single alignment, produces a single excellent alignment in seconds. The reasoning behind Optnetalign is to leverage this speed to produce hundreds of alignments in the same amount of time that several other aligners take to produce a single alignment, since waiting hours for a result is already expected by users of network alignment software. Our population is stored in an archive data structure that automatically discards dominated solutions when better solutions are inserted. This gives us a data structure that stores only the nondominated solutions that have been found so far. When the archive exceeds its user-defined size limit, it shrinks itself to the maximum size by discarding the most crowded solutions, using the crowded comparison operator first introduced in NSGA-II (). This helps to ensure that a diverse variety of solutions are maintained in the population at all times. This archiving strategy is similar to the multiobjective local search algorithm PAES (). To increase the performance of our algorithm, it was designed from the beginning to be amenable to parallelization. The user specifies how many threads the program is to use, and each thread executes Algorithm 1 until a user-specified time limit has been reached. The threads all share the same archive, which is the only point of communication between the threads. This solution is highly scalable, and is able to fully utilize 16 processor cores in our tests. The overall structure of the algorithm is very straightforward, and reminiscent of other hybrid genetic algorithms in the literature; e.g. (). One quirk of the algorithm is that we first decide probabilistically whether to perform hillclimbOneObj or hillClimbNonDominated, but then afterwards, perform another round of hillClimbNonDominated. This ensures that, when hillclimbOneObj is chosen, the alignment is not left in a dominated state that could easily be improved to a non-dominated one.The user-adjustable parameters of our algorithm include the time limit, the rate of crossover (cxrate) and mutation (mutrate), the probability of performing a swap at each index for crossover (cxswappb) and mutation (mutswappb), the probability that singleobjective hill climbing will be used instead of non-dominated hill climbing (oneobjrate), and the number of iterations of hill climbing to perform in each loop (niters). We find that over the course of the algorithm's execution, the optimal rate of crossover, mutation and one-objective hill climbing seem to vary. We thus provide the option of automatically adjusting those rates to their rates of success at producing non-dominated solutions over the course of the algorithm's execution. Other, more sophisticated control schemes exist in the genetic algorithms literature (), but this simple heuristic appears to work quite well. We find that cxswappb  0.5, mutswappb  0.0001, and hillclimbiters  10000 are good settings for the remaining parameters. It is important to emphasize that we set the number of hill climbing iterations quite high, so that computation time is dominated by hill climbing. We find that hill climbing is best used as the primary means for obtaining results, with crossover and mutation mostly playing a secondary role to prevent premature convergence.
Initial arrays
Results and discussionAs discussed above, we report our results aligning the networks included in Isobase (). For each alignment problem, we run our algorithm for 12 h. We try two different sets of objectives. In the first experiment, we set Optnetalign to maximize S 3 as well as the sum of the BLAST bit scores of proteins that have been aligned, leaving GOC as an external measure of alignment quality. In the second experiment, we optimize S 3 and GOC directly. The first experiment is most directly comparable to existing aligners, which try to optimize the sum of the bit score of all pairs of nodes that have been aligned (i.e. a maximum-weight matching), while the second is an investigation of how well we can optimize the overlap of GO terms directly, which helps us obtain an approximate upper bound on the extent to which both topological fit and biological function can be jointly optimized. For each alignment problem, we set Optnetalign's maximum population parameter to output an approximate Pareto front containing at most 200 alignments. Since Optnetalign outputs more candidate alignments than the other aligners we evaluate against combined, we report the average, minimum and maximum of S 3 and GOC of the output alignments for each problem. In our experiments, these numbers are stable from run to run. We also compare the Pareto front of alignments our algorithm produces to all the alignments produced by the aligners that have a user-configurable tradeoff parameter between topological and biological similarity for the C.elegansD.melanogaster alignment problem. We also make some changes in the aligners we compare with, when compared with our previous benchmark paper. Since our alignment algorithm is somewhat similar to PISwap and MAGNA, we add these two aligners to the evaluation. We also remove IsoRank (), GRAAL (), MI-GRAAL () and NATALIE () from consideration, since they were Pareto dominated by other existing aligners on this dataset. To ensure that GO annotations transferred by sequence similarity were not skewing our results, we evaluated using only experimentally-verified GO terms. For results using all GO terms, see our Supplementary Information File.
First experiment benchmark resultsHere we report the results of optimizing S 3 and the sum of bit scores of aligned pairs. We report the same data in tabular form in our Supplementary Information File. Optnetalign matches or outperforms all existing aligners on S 3 , and outperforms all but one aligner on GOC. As noted above, we report the minimum, average and maximum of these scores. These metrics are almost perfectly inversely correlated, so for all of these experiments, the alignment Optnetalign produces with the highest S 3 has the lowest GOC, and vice versa. We first consider our performance on S 3 in. We must note that several aligners crashed on several experiments. This is denoted by a missing bar in these instances. The maximum S 3 found by Optnetalign on each problem instance is comparable to or exceeds that of NETAL, which was previously the best performer on this dataset. However, as shown in, our topologically best alignments have much higher GOC scores than NETAL's. Even our alignments with the poorest topological quality tend to perform comparably to or better than many existing aligners. With respect to GOC scores, our best alignments are all a distant second place behind PISwap. However, because PISwap works by first maximizing sequence similarity with the Hungarian algorithm, and then is limited to performing swaps that don't worsen the sequence similarity matching, its topological fit is extremely low, with S 3 scores generally an order of magnitude lower than any other aligner. Thus, PISwap's alignments constitute an extreme point on the Pareto front. On its topologically worst performance, PISwap only finds 91 conserved edges on the C.elegans to S.cerevisiae alignment problem, out of the 4495 possible. Our best GOC scores, which outperform all aligners except PISwap, come from alignments that have non-trivial S 3 scores that are in some cases, such as the S.cerevisiae to H.sapiens problem, competitive with existing algorithms. We also compare the Pareto front found by Optnetalign on the C.elegans to D.melanogaster problem to the range of tradeoffs produced by existing aligners that expose a tradeoff parameter to the user for balancing topological and biological similarity. The results inshow that Optnetalign is able to find a much wider Pareto front than all previous aligners. Previously, it was not nearly as clear that such a wide range of results was possible. The alignments Optnetalign produced for this problem also varied greatly in the pairs of nodes they chose to align. The least similar pair of networks had only 8.7% of their aligned pairs in common. The maximum was 73%, and the average was 36%. This diversity in aligned pairs is comparable to the diversity in all the alignments produced by previous aligners.
Second experiment benchmark resultsHere we report the results we obtain when we set Optnetalign to optimize S 3 and GOC directly. Since ours is the only aligner among those tested that can optimize GO term consistency instead of bit score sum, all other aligners are still optimizing bit score sum, when applicable, so all of the scores inare the same as inand 2, except for Optnetalign's. In, we see that our S 3 results are much the same as before with the best alignments, with only slightly lower scores. The average scores are somewhat lower now, especially on the latter 3 alignments, where the average no longer outperforms most aligners. The minimum scores are very similar to those in, as well. The primary difference when optimizing GOC directly, instead of its imperfect proxy of bit score sum, is that we are now able to obtain GOC scores that outperform PISwap on several problems. While on the C.elegans to D.melanogaster problem, PISwap still strongly outperforms all other aligners, Optnetalign is actually able to outperform PISwap on the latter three alignment problems, and performs much more strongly on the other problems involving C.elegans. These results show that apparently better results can be obtained by optimizing GOC directly, and we recommend that future aligners also include this functionality.
Synthetic benchmark resultsWhile the preceding benchmarks show that Optnetalign obtains excellent performance on real-world data, the true alignment for such networks is unknown. Therefore, we additionally benchmark against the NAPAbench network alignment benchmark dataset () to evaluate node correctnessthe share of nodes in the smaller network that have been correctly mapped to orthologous nodes in the second. On these synthetic tests, Optnetalign achieves performance similar to, but slightly worse than, the best-performing existing aligners on this dataset, PISwap and GHOST, with Optnetalign's best-scoring alignments achieving node correctness levels between about 77 and 80%. On this dataset, the alignments with highest node correctness are the alignments on the high topological side of the Pareto front found; biologicalSPINAL and GHOST tended to crash on other problems, giving incomplete data similarity is less helpful, though still necessary, to create correct alignments. For more details, see our Supplementary Information File.
Execution timesThe benchmarked aligners differed greatly in their execution times. Unfortunately, since not all aligners were available for the same platform, we had to execute many of them on virtual machines, which prevented us from performing a precise comparison of their relative execution times. Instead, we report here 'ballpark' execution times, expressed in orders of magnitude. Like several of the best-performing aligners, Optnetalign requires several hours to obtain good results. Since Optnetalign is a metaheuristic, it can conceivably keep trying to improve its alignments indefinitely. However, after between 10 and 12 h, it usually failed to find any further improvement. For this reason, we ran all tests of Optnetalign with a time limit of 12 h. Comparison here is not entirely straightforward, however. Optnetalign uses efficient swap-based operators that can produce alignments extremely quickly. These operators allow Optnetalign to produce hundreds of mutually non-dominated alignments in the course of one run. In contrast, other aligners with adjustable tradeoff parameters only produce one alignment per run, and so must be run many times to produce many alignments. When the user wants to produce many alignments at different tradeoffs, Optnetalign can save the user a significant amount of time. Additionally, if the user wants only one alignment, a simplified version of Optnetalign is available that can produce a single alignment in seconds or minutes, depending on the size of the networks.
Aligner
Comparing objectivesThe speed of Optnetalign, its ability to handle any number of objectives, and the large number of diverse alignments it can create in a reasonable amount of time, allow us to perform novel analyses that explore the inherent tradeoffs between many objectives, as well as examine how different objectives are correlated. This can give us insight into the nature of the network alignment problem, and help us identify deficiencies in current alignment evaluation metrics. We demonstrate this by performing another run of the S.cerevisiae to H.sapiens problem, in which we set the aligner to optimize EC, ICS, S 3 , sum of bit scores and GOC. This time, we set the maximum archive size very high, to allow the aligner to output as many nondominated alignments as possible in a 12 h run. This resulted in 571 unique, non-dominated alignments. The minimum agreement on aligned pairs for these alignments was 1%, the maximum was 92% and the average was 8.3%. This lack of agreement is consistent with the lack of agreement between existing aligners (), so this confirms that our aligner produces alignments as diverse as using many different previously-published aligners together. We present a correlation matrix for our objectives in. EC and S 3 are strongly positively correlated, but, as we noted above, since Optnetalign can minimize the ICS denominator without increasing the number of conserved edges, ICS is negatively correlated with the other two topological metrics. We also include the commonly used metric of the number of nodes in the largest connected common subgraph (LCCS) here (see e.g. Kuchaiev and Przulj, 2011 for more information), which Optnetalign cannot optimize directly. To demonstrate how Optnetalign allows us to compare the behavior of different alignment metrics, the relationship between ICS and GOC is illustrated inof our Supplementary Information. To better understand ICS inflation, we also present a plot of EC against ICS inof our Supplementary Information. This experiment also demonstrates the potential utility of optimizing for GO term consistency instead of bit score sum. Inin our Supplementary Information, we show that, while bit score sum and GOC generally correlate, the highest GOC scores we obtain have bit scores sums that are less than half of the highest bit score sum Optnetalign finds. This reinforces the fact that, in some cases, proteins of similar function can have significant differences in their sequences, and it shows the value of optimizing GOC directly. This large set of alignments again highlights the inherent conflict between optimizing measures of topological fit and measures of biological fit simultaneously. Inof our Supplementary Information, we show S 3 plotted against GOC. Even though most of the alignments dramatically outperform those of previous aligners,Unlike the other objectives, the number of nodes in the largest common connected subgraph (LCCS) was not set as an optimization objective in our program; it was computed afterwards we still see a distinct tradeoff between S 3 and GOC. Since previous aligners varied dramatically in performance while only outputting a single alignment, there was very little evidence that such a wide Pareto front between these two objectives was obtainable. Previous aligners which provided a user-controlled tradeoff parameter between these topological and biological similarity scores framed the parameter as a small tweak, and in most cases, adjusting that parameter through its entire range, as we did in producing, explores only a small portion of objective space. Therefore, it was not clearly understood that these two objectives conflict so sharply.
Potential directions for future workOur results here show some weaknesses in existing network alignment research that open up many possibilities for future work.
FundingThis work was supported by a grant from the Biofrontiers Center at the University of Colorado, Colorado Springs. Conflict of Interest: none declared.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
C.Clark and J.Kalita at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Perhaps the most glaring question, given these results, is that of the tradeoff between biological and topological similarity. The assumption underlying the entire premise of global network alignment is that different species share large regions of their PPI networks, which they inherited from a common ancestor. Our results show that finding that overlap is not as easy as was previously thought. We can either align two networks in a way that matches many neighbors in G 1 to many neighbors in G 2 , or we can align two networks in such a way that proteins with similar GO annotations are matched together. It does not appear from our results that it is possible to do both well. There are a number of possible reasons for this that should be better explored in future work. First, as we noted previously (Clark and Kalita, 2014), this tradeoff is much less dramatic in synthetic networks. It's possible that currently known protein networks have too many false positive and false negative edges to be aligned reliably, and the false positive edges mislead alignment algorithms. If this is the case, we should probably prefer alignments with higher GOC, even if they have a lower S 3. Second, it is possible that our current best topological metrics are insufficient and mislead Optnetalign. These metrics all essentially count how many neighbors in G 1 have been matched to neighbors in G 2 , but they have no way of ensuring neighbors of neighbors are matched to neighbors of neighbors, or that other large structures between networks are matched properly. One proposed metric that partially overcomes this is to report the size the largest connected common subgraph, but we have found that this metric correlates so strongly with metrics like S 3 that it does not provide us with much additional helpful information. This makes sense intuitively: conserving one more edge could join two previously disconnected common subgraphs and essentially double the score. Equivalently, reporting the size of the largest common connected subgraph doesn't tell us anything about the distribution of the sizes of the remaining connected subgraphs found. A few moderately large ones may be much more helpful than one very large one, especially if the species are more distantly related. Our algorithm performs well even when optimizing many objectives in one run, and, as we show above, this can be used to critically evaluate different candidate objectives. It would also be possible to use this aligner to evaluate existing aligners' approximate topological similarity metrics, such as GHOST's (Patro and Kingsford, 2012) spectral graph signatures or graphlet degree signatures (Prulj, 2007; MilenkovicndMilenkovicnd Prulj, 2008). The relative performance of these similarity metrics has always been unclear, though some preliminary work has been done on the problem (Crawford and Milenkovic,Milenkovic, 2014; Crawford et al., 2014; MilenkovictMilenkovict al., 2013). With metaheuristic multiobjective alignment, we could optimize many of these metrics at once and analyze many alignments to determine which ones best predict or conflict with the objectives of network alignment. It's even possible that some of these similarity measures, when paired with Optnetalign, could produce better results than optimizing S 3 or GOC directly. An important direction for future work is to find ways to summarize or condense the large number of possible alignments between two PPI networks. The original goal of pairwise global alignment was to produce the one best alignment given our objectives. Our work here has shown that currently studied alignment objectives do not uniquely specify a best alignment. Instead, there are many diverse alignments along a wide Pareto front, and these alignments may agree on as few as 1% of their aligned pairs while still appearing good with respect to at least one objective. While this was already known, our multiobjective aligner makes this problem much more obvious. This creates difficulties for a biologist who would like to use the output of such an algorithm. An obvious next step would be to find ways to summarize the results of these alignments so that someone who wants to use an alignment can either pick the alignment that best fits their particular needs, or produce a composite alignment that summarizes the most interesting alignments found. We have done some preliminary experiments with creating partial alignments, using the number of aligned pairs of the alignment as an objective. This could be used to produce small, local alignments and large, global alignments in one run of the program as well, which would unify the two related, but heretofore separate, techniques of local and global network alignment. This has similarities to NetAligner (Pache and Aloy, 2012; Pache et al., 2012), which is another tool capable of both local and global alignment. There are many other possibilities for producing summary or approximate alignments, as well. The recent publication of DualAligner (Seah et al., 2014) is a good step in this direction. 4 Conclusion We have shown that Optnetalign can outperform or perform competitively with the best previously published aligners. Furthermore, since it is a multiobjective algorithm, it manages to better balance the tradeoff between the conflicting objectives of biological and topological fit. Its ability to produce a large number of alignments in one run allows us to explore the problem of network alignment more thoroughly, and reveals the strengths and weaknesses of current evaluation metrics. We expect Optnetalign will be useful not only in aligning particular PPI networks to one another, but also in evaluating and experimenting with new alignment objectives, as well. The large number of highly diverse alignments Optnetalign can produce allows us to thoroughly understand the sometimes complex relationship between alignment objectives, and also shows promise in developing new techniques to combine many alignments into summary alignments, to produce many-to-many alignments, or to create local alignments that find small-scale regions of similarity between PPI networks. Perhaps most importantly, instead of running many different programs dozens of times to get a wide variety of possible alignments to analyze, users of alignment software need only run Optnetalign once.
