We have created a Python programming interface for the RCSB Protein Data Bank (PDB) that allows search and data retrieval for a wide range of result types, including BLAST and sequence motif queries. The API relies on the existing XML-based API and operates by creating custom XML requests from native Python types, allowing extensibility and straightforward modification. The package has the ability to perform many types of advanced search of the PDB that are otherwise only available through the PDB website. Availability and implementation: PyPDB is implemented exclusively in Python 3 using standard libraries for maximal compatibility. The most up-to-date version, including iPython notebooks containing usage tutorials, is available free-of-charge under an open-source MIT license via GitHub at https://github.com/williamgilpin/pypdb, and the full API reference is at
IntroductionThe RCSB Protein Data Bank (PDB) represents one of the most comprehensive structural biology information databases openly available to genomics and proteomics researchers (). It provides an online interface for browsing amino acid and genetic sequences, as well as crystallographic structures aggregated from a large number of sources. It also provides sophisticated tools for visualizing protein structure and sequence lineages, aligning sequences and searching for homologies, and it provides links to relevant entries in related databases, such as GenBank and UniProt. The Python scripting language has demonstrated its usefulness to the bioinformatics community as a means of unifying different data sources and analysis tools, allowing diverse data streams to be retrieved, analyzed, and summarized from within the same workflow. This function has been complemented by new interface tools such as the iPython notebook, as well as general-purpose analysis toolkits like Biopython and Biskit (). In this article, we describe an API for the PDB that allows advanced querying of information on PDB entries. Similar utilities exist for programmatic querying of other large bioinformatics databases (including Ensembl, PubChem and UniProt), but, to our knowledge, no such tool currently exists for the PDB (). Our tool facilitates integration of automatic PDB searches within existing Python bioinformatics workflows, and it simplifies the process of performing multiple searches based on the results of existing searches.
ImplementationThe PDB currently uses a RESTful API that allows retrieval of information via standard HTML verbs, such as POST/GET/PUT/etc. All advanced query types can be represented by XML. PyPDB converts nested dict() objects into structured XML strings, performs searches using these strings and then parses the XML search results back into nested dict() objects. Most query and search results are represented either as native Python dict() or list() objects depending on their type. PyPDB supports retrieval but not local manipulation of raw data files (.pdb,.cif,.mcif, etc.) available in the PDB, as there are already libraries for manipulating these files included in existing Python toolkits, such as the Biopython module Bio.PDB (). Bio.PDB enables local.pdb analysis like secondary structure prediction and neighbor searching, as well as internet retrieval of the full PDB and single files using its get_all_entries and retrieve_pdb_file methods. However, Bio.PDB does not currentlysupport keyword querying or advanced search, making PyPDB complementary to Bio.PDB's extensive range of capabilities.
FeaturesPyPDB can search the PDB by keyword, author, publication date and experimental method, as well as by specific sequence motifs. For individual PDB IDs, retrievable information ranges from metadata (date of posting, authors, etc.) to the full. pdb data file stored with an entry. Standard information such as gene ontology, ligand information and protein family information can be accessed. PyPDB can also perform BLAST searches. A list of the most common functions is available in. A full listing of the available methods is given in the documentation. The arguments, keywords and outputs for each function are also described in each function's docstring, which can be accessed with help(name_of_function)shows an example script in an iPython notebook. The find_dates() method creates a query dict() and structures it for the PDB format (by default, string arguments are treated as keyword searches), and it then sends this query to the PDB by internally calling PyPDB's make_query and do_search() methods. The search returns a list of strings representing four-character PDB IDs, and this function then tabulates the deposition dates associated with each PDB ID. The last code block plots the number of PDB IDs found for each year, representing popularity over time of the original search term (in this case, the CRISPR/Cas9 gene-editing method).
Example usage
ExtensibilityPyPDB includes most of the common types of operations involved when working with the PDB. However, the depth and range of data represented in the PDB may require eventual support for additional functions. Because PyPDB primarily operates by converting native Python dict() objects into valid XML strings, such operations are straightforward to implement. The full code is available on the GitHub website, and forks and pull requests are encouraged.
ConclusionThe library described here provides direct querying of the PDB using the Python programming language. This API complements the existing PDB GUI and XML API by introducing the ability to directly retrieve information from the PDB from within existing Python bioinformatics workflows. The use of native Python datatypes to represent queries simplifies conducting multiple searches with similar queries, and it allows the individual PDB IDs returned in search results to be examined from within the same programming workflow as the original search. The latest stable release of PyPDB is available on PyPI and can be installed with the command pip install pypdb. The source code of all versions of PyPDB is available at https://github.com/williamgil pin/pypdb, and full documentation is available at http://williamgil pin.github.io/pypdb_docs/html/. iPython notebooks containing usage examples are also available on the GitHub website.Note: Additional functions provided in the documentation.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
W.Gilpin at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
