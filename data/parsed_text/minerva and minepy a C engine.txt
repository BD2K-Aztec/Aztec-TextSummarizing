We introduce a novel implementation in ANSI C of the MINE family of algorithms for computing maximal information-based measures of dependence between two variables in large datasets, with the aim of a low memory footprint and ease of integration within bioinformatics pipelines. We provide the libraries minerva (with the R interface) and minepy for Python, MATLAB, Octave and Cþþ. The C solution reduces the large memory requirement of the original Java implementation, has good upscaling properties and offers a native parallelization for the R interface. Low memory requirements are demonstrated on the MINE benchmarks as well as on large (n ¼ 1340) microarray and Illumina GAII RNA-seq transcriptomics datasets. Availability and implementation: Source code and binaries are freely available for download under GPL3 licence at http://minepy.source-forge.net for minepy and through the CRAN repository http://cran.r-project.org for the R package minerva. All software is multiplatform (MS Windows, Linux and OSX).
INTRODUCTIONThe Maximal Information-based Non-parametric Exploration (MINE) family of statistics, including the Maximal Information Coefficient (MIC) measure, was recently introduced in (), aimed at fast exploration of two-variable relationships in many-dimensional datasets. MINE consists of the algorithms for computing four measures of dependence MIC, Maximum Asymmetry Score (MAS), Maximum Edge Value (MEV), Minimum Cell Number (MCN)between two variables, having the generality and equitability property. Generality is the ability of capturing variable relationships of different nature, while equitability is the property of penalizing similar levels of noise in the same way, regardless of the nature of the relation between the variables. The MINE suite received immediate appraisal as a real breakthrough in the data mining of complex biological data () as well as criticisms (See comments and referenced experiments by Simon and Tibshirani and by Gorfin et al. at http://comments. sciencemag.org/content/10.1126/science.1205438.) Many groups worldwide have already proposed its use for explorative data analysis in computational biology, from networks dynamics to virus ranking (). Together with the algorithm description, the MINE authors provided a Java implementation (MINE.jar), two wrappers (R and Python) and four reference datasets (). However, applicability and scalability of MINE.jar on large datasets is currently limited owing to memory requirements and lack of programming interfaces. Further, a native parallelization, currently unavailable, would be of significant benefit. These issues are hurdles for a systematic application of MINE algorithms to high-throughput omics datafor example, as a substitute of Pearson correlation in network studies. Inspired by these considerations, we propose an ANSI C implementation of the MINE algorithms, and the interfaces for R (minerva), and for C, Python and MATLAB/Octave (minepy).
THE MINE C ENGINE AND ITS WRAPPERSThe novel engine (libmine) is written in ANSI C as a clean-room implementation of the algorithms originally described in (), as the Java source code is not distributed. Libmine provides three structures describing the data, the parameter configuration and the maximum normalized mutual information scores. The core function mine_compute_score() takes a dataset structure and a configuration one as input, returning a score structure as output, from which four functions compute the MINE statistics. The minepy Python module works with Python 2:6, with NumPy 1:3:0 as the sole requirement: the interface consists of the class minepy.MINE whose methods match the C functions. The R package minerva is built as an R wrapper (R 2:14) to the C engine: the main function mine takes the dataset and the parameter configuration as inputs and returns the four MINE statistics. Minerva allows native parallelization: based on the R package parallel, the number of cores can be passed as parameter to mine, whenever multi-core hardware is available. The curated version of the CDC15 Spellman yeast dataset *To whom correspondence should be addressed.
yThe authors wish it to be known that, in their opinion, the first three authors should be regarded as joint First Authors.() used in () is included as example. Documentation (online and PDF) for minepy is available at the minepy website, also as online help in R for minerva.
Performance comparisonThe suite was tested for consistency with MINE.jar v1.0.1 on the Spellman and microbiome datasets from http://www.exploredata.net. For the Spellman dataset (4381 transcripts and 23 timepoints), MIC values were computed for all features pairs with MINE.jar and minepy (both with  0.67). Identical results were found up to five significance digits: see Supplementaryand details in Supplementary Material. For the microbiome data, for the 77 top ranked association pairs listed in Supplementary Table S13 of (), we obtained 44 identical results and a difference less than 0.01 for other 29 values (details in Supplementary Material). To compare performance for RAM and CPU usage between MINE.jar and the suite, MINE statistics were computed on all features pairs of the Spellman dataset, for increasing feature set sizes (details in Supplementary Material, Sec 2.2, 2 A). Minerva and minepy completed all tasks with limited RAM requirements: about 19 MB were needed for all 4382 variables (600 kB dataset size) by minepy, and 2 MB by the C interface. We were unable to run MINE.jar with 42000 variables, for which Java used 7.5 GB and minepy 16 MB, respectively (and Supplementary). Minepy computing times are about twice those of the Java solution (Supplementary), but the speedup is close to 70 for minerva on 100 cores via MPI on a Linux cluster, with the default  0.6 (Supplementary). Finer grids (  0.7) require much higher computing time as sample size increases (Supplementary). We additionally tested the suite on two recent high-throughput transcriptomics datasets, of Affymetrix HumanExon 1.0ST human brain tissues and Illumina Genome Analyzer IIsequenced human nonsmall cell lung cancer (). Details on datasets and experiments are reported in Supplementary Material.n: number of samples. p: number of features. CPU: elapsed time used by the process (in seconds). RAM: resident set size (in kilobytes), for minerva (R) and minepy (P).
The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
D.Albanese et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
