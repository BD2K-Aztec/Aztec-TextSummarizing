Motivation: Dominant markers (DArTs and AFLPs) are commonly used for genetic analysis in the fields of evolutionary genetics, ecology and conservation of genetic resources. The recent prominence of these markers has coincided with renewed interest in detecting the effects of local selection and adaptation at the level of the genome. Results: We present Mcheza, an application for detecting loci under selection based on a well-evaluated F ST-outlier method. The application allows robust estimates to be made of model parameters (e.g. genome-wide average, neutral F ST), provides data import and export functions, iterative contour smoothing and generation of graphics in an easy to use graphical user interface with a computation engine that supports multicore processors for enhanced performance. Mcheza also provides functionality to mitigate common analytical errors when scanning for loci under selection. Availability: Mcheza is freely available under GPL version 3 from
INTRODUCTIONNon-specific amplification methods, such as Diversity Arrays Technology (DArT) markers and amplified fragment length polymorphism (AFLP), are commonly used for analysis of withinspecies variation because they allow the rapid acquisition of substantial genetic information, at relatively low cost. Although other alternative sequencing techniques have since been developed, DArTs and AFLPs are still widely used in the fields of evolutionary genetics, ecology and conservation. One of the most important applications of these dominant markers is in detecting the effects of selection and local adaptation at the level of the genome, in areas ranging from parasitology to conservation genetics. There are two current approaches to detect selection: 'classical' F ST-outlier approaches [reviewed in, based on the distribution of summary statistics; and those based on likelihood (such as). The original F ST-outlier methods do not account for dominant markers such DArTs or AFLPs. These markers have two phenotypes detectable at each locus: one allele (the plus-allele) is amplifiable,
SOFTWARE IMPLEMENTATIONThe Mcheza architecture is composed of two parts: the front-end implemented in Jython and the DFDIST back-end implemented in C. The front-end provides an interface similar to LOSITAN () (A selection workbench based on the analogous method for co-dominant markers). The interface provides the following functionality on top of DFDIST:(1) Estimation of the mean neutral F ST , while taking into account loci that might be under selection. While DFDIST requires an estimate of the neutral F ST , an empirical dataset will probably include loci under selection. Mcheza provides a mechanism similar to that in LOSITAN for estimating the neutral F ST based on the removal of loci that are potentially under selection.(2) An improved method for ensuring that the simulated distribution of F ST has a mean that is close to the required value. DFDIST is only capable of providing a reliable approximation when close to theoretical conditions (i.e. when simulating a large number of populations). The Mcheza interface provides a correction that accurately approximates F ST even when the number of demes is very low.(3) Mcheza provides additional features in comparison with LOSITAN by supporting very large datasets: while LOSITAN is only able to support hundreds of loci and hundreds of individuals, Mcheza has been tested using real datasets withPage: 1718 17171718
T.Antao and M.A.Beaumont25 000 loci. Support for very large datasets is, as expected, computationally more intensive.(4) Mcheza also introduces support for multitest correction based on false discovery rates (FDRs) (), as implemented in. Without such a correction, there is a danger in overestimating the proportion of loci that are under selection ().(5) A multicore aware version of DFDIST with computational performance gains that are near linear with the number of cores.(6) An easy-to-use interface including the ability to import data in the standard Genepop format (), generation of charts, export in standard formats including (R Development Core Team, 2010) and spreadsheets, iterative smoothing of confidence contours, choice of population and loci among other features.The application, based on the Java Web Start technology, requires only a browser with a modern version of Java installed (on Linux the GNU C compiler is also required). The Java code will detect the operating system and choose the correct DFDIST implementation. The use of the Jython programming language allows the use of Biopython (), which provides a parser for Genepop files. Our Python code to interact with DFDIST is incorporated in the Biopython population genetics module allowing for bioinformatics programmers to directly interface with the DFDIST core using the Python programming language.
DISCUSSIONA fundamental consideration in the design of Mcheza is supporting the user by correctly computing important non-trivial parameters that are needed to properly calculate candidate loci for selection. Erroneous usage of population genetics applications can easily produce results that seem correct but are, in effect wrong. While Mcheza tries to minimize usage errors, the user should be aware of potential limits of the underlying method. Potential users are advised to read, wherein several scenarios where DFDIST is less applicable are clearly explained. In particular, the Bayesian method of Foll and, implemented in the program BayeScan is an important alternative, with which results should be compared. By improving the estimation of the neutral mean F ST when the number of demes is low, Mcheza addresses situations where DFDIST is known to perform less well (). In summary, Mcheza tries to provide an intuitive interface, which includes intelligent suggestions to the user with regards to correct usage of software, while enforcing model constraints and providing necessary corrections (e.g. FDR support). It is hoped that this approach will lower barriers to its use, allowing researchers to concentrate more on the biological problems (including the theoretical assumptions and limitations of underlying models) and less on unnecessary software complexity.
* To whom correspondence should be addressed.  The authors wish it to be known that, in their opinion, the first two authors should be regarded as joint First Authors. whereas the other (the null-allele) is not. Heterozygous genotypes cannot be directly distinguished from homozygotes making the estimation of allele frequencies non-trivial. A widely used F ST-outlier method (Prez-Figueroa et al., 2010) for detecting selection with dominant markers is implemented in the package DFDIST. DFDIST is a modification of the FDIST program (Beaumont and Nichols, 1996) to allow for dominant markers, and implements the method of Zhivotovsky (1999) to estimate allele frequencies. Briefly, coalescent simulations are used to generate a null sampling distribution of estimates of F ST based upon neutral expectations. The performance of the method has been examined, using data simulated with known levels of selection, in Caballero et al. (2008) and Prez-Figueroa et al. (2010). DFDIST has a complicated text-based interface that makes it difficult to use it correctly. For example, the tuning of parameters for the coalescent simulations is non-trivial, and the input dataset has to be formatted in a non-standard way. We describe Mcheza, a new application based on DFDIST, with a graphical user interface allowing easier configuration of some non-trivial parameters.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
