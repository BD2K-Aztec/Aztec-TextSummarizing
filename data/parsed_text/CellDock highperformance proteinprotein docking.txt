The application of docking to large-scale experiments or the explicit treatment of protein flexibility are part of the new challenges in structural bioinformatics that will require large computer resources and more efficient algorithms. Highly optimized fast Fourier transform (FFT) approaches are broadly used in docking programs but their optimal code implementation leaves hardware acceleration as the only option to significantly reduce the computational cost of these tools. In this work we present Cell-Dock, an FFT-based docking algorithm adapted to the Cell BE processor. We show that Cell-Dock runs faster than FTDock with maximum speedups of above 200Ã‚, while achieving results of similar quality. Availability and implementation: The source code is released under GNU General Public License version 2 and can be downloaded from
INTRODUCTIONCell functions rely on intricate networks of proteinprotein interactions, which need to be understood at structural and functional level. Given the magnitude of the human interactome, experimental efforts will have to be complemented by computational approaches such as proteinprotein docking, which aims to predict the structure of complexes from the free unbound subunits (). Fast Fourier transform (FFT)-based docking approaches revolutionized the field (), but faster computer solutions are required in order to face some of the current docking challenges, some of which have arisen from the recent Critical Assessment of Prediction of Interactions (CAPRI) experiments (), such as protein flexibility (), large-scale experiments () or multi-protein docking (). Given that FFT implementations are highly optimized, it is not likely to speed up this type of calculations by using only algorithm optimization techniques, leaving hardware acceleration as the most feasible option to significantly reduce the computational cost of these tools (;). In this work we present Cell-Dock, to our knowledge the first protein docking algorithm implemented on the Cell BE processor ().
CELL-DOCK: A VARIABLE GRID RESOLUTION FFT-BASED DOCKING ALGORITHM
Optimization of FFT parametersCell-Dock is a first-stage rigid-body docking program that generates docking candidates performing a global scan of the translational and rotational space of two molecules based on surface complementarity and electrostatics. It implements the Katchalski-Katzir algorithm (), discretizing both receptor and ligand onto 3D grids and using the FFT to speed up the translational search for each given rotation. We based most of our parameters on those of FTDock (). A paramount difference is the fixed value used here for the grid size in number of cells (GRID_SIZE), which is related to the grid cell resolution (CELL_RES) and total span (TOTAL_SPAN) in Angstroms by:CELL RES  TOTAL SPAN=GRID SIZE 1 TOTAL SPAN  1:0  2  radiusrec  2  radiuslig 2For the sake of efficiency, GRID_SIZE was forced here to be a power of two (that is in practice, 128 or 256; these two versions are identified from now on as CELL-128 and CELL-256, respectively), given that FFT arrays of that length can be usually processed much faster (otherwise FFT performance would depend on the factorization of the array size and the FFT algorithm used). This modification has a direct impact on the CELL_RES parameter, which now is automatically defined by the size of the proteins. As in a realistic docking scenario, we forced CELL_RES to be in the range of 0.71.3 A . Actually, CELL_RES values above 1.3 A  were incompatible with other parameters in our approach, as well as in FTDock, therefore some of the largest cases could not be run in CELL-128. * To whom correspondence should be addressed.
Parallel implementation for HPC architecturesWe have parallelized Cell-Dock on a PlayStation 3 (PS3) with one Cell BE processor and on a Cell BE Blade (i.e. two Cell BE processors). Parallelization on both architectures was exploited at both task and data level, with the following major features (): (i) the main rotation loop of the docking algorithm was run in parallel on the two Cell BEs of the Cell BE Blade (sequentially in the case of PS3); (ii) 3D-FFT and grid discretization of the mobile protein have been parallelized on the 8 Synergistic Processor Elements (SPEs)accelerators of a Cell BE (6 SPEs in the case of PS3); (iii) double buffering techniques have been used in order to overlap memory accesses and computation on the SPEs; (iv) data locality policies have been used in order to reduce the amount of data movement between different processors and (v) single instruction multiple data have been used on the PowerPC Processor Element (PPE) running the operating system and SPE codes, as well as dual-threaded processing on the PPE. All those parallelization strategies, together with the variable grid resolution feature of the algorithm, have provided us with a high-performance docking application that can be successfully applied to HPC architectures.
SUCCESSFUL PREDICTION OF PROTEINPROTEIN COMPLEXES
Evaluation of docking resultsIn order to check whether predictive results were similar to other approaches, we tested Cell-Dock on the unbound structures of the proteinprotein docking benchmark 2.0 (Supplementary), formed by 84 cases (). For consistency, all success rates were shown here on the 71 cases in which we could run both Cell-Dock versions (see Section 2.1). Given that Cell-Dock used a different grid resolution in each case [CELL_RES; see Equation(1)], we evaluated the consequences of that variable on the quality of the predictive results. First, the method generated a pool of 10 000 docking poses for each case (as in FTDock), which contained near-native (NN) docking solutions (i.e. RMSD LIG 510 A  with respect to the reference) in 89% of the cases when using CELL-256 and in 85% of the cases when using CELL-128. The results are comparable to those of FTDock () as shown in Supplementary Table S2. We have also assessed the results of scoring the Cell-Dock docking poses by pyDock (), based on electrostatics, desolvation and van der Waals energy. The scoring by pyDock showed slightly better success rate with CELL-256 (19.7% cases with NN within the top 10 scoring solutions) than with CELL-128 (18.3% top 10 success rate), probably due to grid resolution. Indeed, cases with larger resolution in CELL-128 showed slightly worse results than in CELL-256 (in which almost all of the cases had 0.7 A  resolution; Supplementary). In any case, these differences were minimal and the general values were similar to those achieved by pyDock when scoring FTDock models (), as shown in Supplementary Table S2.
SpeedupThe) can be explained by the increase of data and operations (8 more) in CELL-256 and by the fact that one full plane (128  128) of the grid (128 3 ) in CELL-128 completely fits in the local memory of a SPE, reducing the communication requirements for the algorithm with respect to CELL-256. For comparison, we ran FTDock on JS21 blades with 8 GB of RAM memory, using only one of the four IBM PowerPC 970MP processors at 2.3 GHz. CELL-256 and CELL-128 achieved speedups of 24.5 and 226.5, respectively, when compared to FTDock at the default 0.7 A  resolution. However, given that the average grid resolution in CELL-128 was around 1.0 A  , it seems more appropriate to compare it with FTDock at 1.0 A  resolution, in which case the speedup achieved was 60.8. We should note that the observed speedups are not due to the difference in clock speed between 2.3 GHz in PPC and 3.2 GHz in Cell BE (which at most would give a theoretical speedup of 1.4 for FTDock on the PPC970) but to the specific features of the Cell BE and the efficient implementation of Cell-Dock. Cell-Dock was also run on a PlayStation 3 using four of its six SPEs, showing the same predictive results. Executions on a dual-processor Cell BE-based blade (running 8 SPEs each) were 3.8 times faster than on PS3 (one Cell BE with 4 SPEs), which is directly related to the number of processing elements.
CONCLUSIONCell-Dock is a new FFT-based docking implementation for the Cell BE architecture, showing similar prediction rates to FTDock, with much more efficient performance. This implementation can efficiently run on the widely accessible PlayStation 3, opening the door to large-scale experiments that may benefit
The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
High-performance proteinprotein docking at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
C.Pons et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
