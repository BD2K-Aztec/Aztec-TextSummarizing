We have developed BioSmalltalk, a new environment system for pure object-oriented bioinformatics programming. Adaptive end-user programming systems tend to become more important for discovering biological knowledge, as is demonstrated by the emergence of open-source programming toolkits for bioinfor-matics in the past years. Our software is intended to bridge the gap between bioscientists and rapid software prototyping while preserving the possibility of scaling to whole-system biology applications. BioSmalltalk performs better in terms of execution time and memory usage than Biopython and BioPerl for some classical situations. Availability: BioSmalltalk is cross-platform and freely available (MIT license) through the Google Project Hosting at
INTRODUCTIONWe present a novel free/open source software (FOSS) platform for the development of bioinformatics software and applications. BioSmalltalk attempts to reconcile the current de facto scripting modalities of textual programming languages with the features of Smalltalk (), which has a pure object dynamic programming environment. BioSmalltalk provides similar functionality to other FOSS toolkits for bioinformatics, such as BioPerl (), Biopython () and BioJava (), based in industry-leading general-purpose textual programming languages. Precedent of bioinformatics tools exists in Smalltalk, but none of them has tried to provide a bioinformatics Application Programming Interface (API). MolTalk () was developed in StepTalk, a scripting environment, for doing structural bioinformatics. Also, a cross-platform Graphical User Interface (GUI) for protein sequence analysis was done in Smalltalk (). Object-orientation (OO) is a term first coined by one of the Smalltalk inventors, Alan Kay (1969). It was initially conceived as a programming paradigm based on the recognition of realworld communicating objects in computer simulations (). OO features were integrated accordingly to platform limitations, in virtually all major programming languages, and toolkits, including the Bio* projects. The Bio* toolkits' usage of OO is commonly hybrid or emulated through modules (), mixing objects with primitive data types and hampering the use of reflective functionalities (). BioSmalltalk benefits from decreased source code verbosity, and its execution in a self-contained snapshot system that promotes run-time adaptability, critical for systems where shutdown cycles cannot be tolerated ().
FEATURES
BioinformaticsBioSmalltalk provides objects to manipulate biological sequences and data from databases like the Entrez system (). It also contains wrappers for commandline tools like ClustalW () and HMMER () sequence visualization and format conversion. We based implementation on existing FOSS bioinformatics platforms, specifically BioPerl and Biopython, to prevent educational obsolescence, preserving the familiar object model interfaces for experienced bioinformaticians. BioSmalltalk contains tokenizers, parsers and formatters for common sequence identifiers, FASTA, BLAST and Entrez XML, PHYLIP (), Arlequin () and others. Most parsers use PetitParser (), a dynamically reconfigurable parser library. Additional features can be found in the project documentation. We did a microbenchmark to compare the performance of our library using the script in. We have executed the scripts five times immediately after booting without unnecessary processes (Tests were performed on GNU/Linux Debian kernel 2.6.32358.2.1.el6.x86_64 using an Intel(R) Xeon(R) CPU E5620 at 2.40 GHz, 8 GB DDR3 RAM). Results show that BioSmalltalk has a faster execution time compared with the corresponding BioPerl and Biopython versions. Our approach enabled the removal of unnecessary iterators, thus also reducing the lines of code. Comparison details and scripts are included in the Supplementary Material ().
Software engineeringWe wrote a cross-platform engine subsystem for enabling multiple interchangeable implementations of packages, which may fail, become unsupported or become too slow. Interchangeable serializers, web client and servers and accessing OS functions were included in our initial release. We have applied design patterns through the library; for example, the Fac ade pattern *To whom correspondence should be addressed.  The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com () is used to wrap the complex hierarchy of specific parsers. The developer guide provides further information on new engines, testing process and other subsystems. Maintainability was recognized as an unfilled gap in bioinformatics software development (). An advantage of BioSmalltalk is relying on a development style that promotes highly factored reusable code () using browsers and inspectors in a targeted navigation manner (), applying automated code refactorings directly through menu options (). This style replaces taking care of boilerplate code, static or primitive-type coercion casting, checking class or function scopes and maintaining directory trees, configuration files or compiler flags. The software was tested on Windows, Linux and Mac OS X platforms under Squeak and Pharo Smalltalk ().
RESULTSWe delivered an interactive programming system using a fully reflective language for bioinformatics development. We believe that our platform is suitable for a bioinformatics evolution to human-centered long-running software. Of interest for future research is building a user-base and solid automated build process. We are open to collaboration in any of the areas in which BioSmalltalk project can evolve.) )0. A downloaded NCBI BLAST XML result is filtered with alignments matching 240 nucleotide bases. Alignment object is built from sequences and exported as FASTA in a file
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
H.F.Morales and G.Giovambattista at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
