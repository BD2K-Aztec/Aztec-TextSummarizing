Motivation: Molecular representation for small molecules has been routinely used in QSAR/SAR, virtual screening, database search, ranking , drug ADME/T prediction and other drug discovery processes. To facilitate extensive studies of drug molecules, we developed a freely available, open-source python package called chemoinformatics in python (ChemoPy) for calculating the commonly used structural and physicochemical features. It computes 16 drug feature groups composed of 19 descriptors that include 1135 descriptor values. In addition , it provides seven types of molecular fingerprint systems for drug molecules, including topological fingerprints, electro-topological state (E-state) fingerprints, MACCS keys, FP4 keys, atom pairs fingerprints, topological torsion fingerprints and Morgan/circular fingerprints. By applying a semi-empirical quantum chemistry program MOPAC, ChemoPy can also compute a large number of 3D molecular descrip-tors conveniently. Availability: The python package, ChemoPy, is freely available via
INTRODUCTIONMolecular features for small molecules have frequently been used in the development of machine learning in QSAR/QSPR, virtual screening, database search, similarity search, ranking, drug ADME/T prediction and other drug discovery processes (). These descriptors capture and magnify distinct aspects of molecular topology to investigate how molecular structure affects molecular property. Currently, these features were widely used to characterize ligand molecules in the proteinligand network and predict new proteinligand associations to identify potential drug targets (), following the spirit of chemogenomics. Several programs for computing molecular descriptors have been developed, such as MARCH-INSIDE, TOPS-MODE, TOMO-COMD, Dragon, CODESSA, Molconn-Z (http://www. edusoft-lc.com/molconn/), Chemistry Development Kit (CDK), Indigo (http://ggasoftware.com/opensource/indigo), JOELib, RDKit (http://www.rdkit.org/) and Avogadro (). Unfortunately, some of these tools are not comprehensive, or are limited to only a certain kind of features. Additionally, some are not freely and easily accessible. We implemented a selection of sophisticated molecular features and provided them as a package for the free and open-source software environment python. The ChemoPy package aims at providing the user with comprehensive implementations of these descriptors in a unified framework to allow easy and transparent computation. To our knowledge, ChemoPy is the first opensource package computing a large number of molecular features based on the MOPAC optimization. We recommend ChemoPy to analyse and represent the drugs or ligand molecules under investigation. Further, we hope that the package will be helpful when exploring questions concerning drug activity, drug ADME/T and drugtarget interactions in the context of computational biology. After accomplishing the previous goal, we expect that our/other groups may use the free code of ChemoPy and the new QSAR models to implement public web servers, such as MIND-BEST (). The users can run predictions of libraries of compounds using SMILES codes as input.
CHEMOPY FEATURESThe ChemoPy package contains several functions and modules manipulating drug molecules. To obtain molecular structures easily, ChemoPy provides a download module, by which the user could easily get molecular structures from four databases (i.e. KEGG, PubChem, DrugBank and CAS) by providing IDs.(see also detailed descriptor list in Supplementary Material S1). There are two means to compute these molecular descriptors from small molecules. One is to use the built-in modules. There exist 19 modules responding to the calculation of descriptors from 16 feature groups. The instruction for each module is provided in the form of HTML in ChemoPy (see Supplementary Material S2). We could import related functions to compute these features. For example, the topology module includes a number of functionalities used for calculating various topological descriptors. The user could conveniently use them as need.The other is to call the PyChem2d or PyChem3d class by importing the pychem module, which encapsulates commonly used descriptor calculation methods. PyChem2d and PyChem3d are responsible for the calculation of 2D and 3D molecular descriptors, respectively. We could construct a PyChem2d or PyChem3d object with a molecule input and then call corresponding methods to calculate these features.4 4 4 All3D  des2.GetAllDescriptor() In ChemoPy, molecular structures are optimized by the AM1 method in MOPAC. MOPAC input file is directly prepared by Pybel and OpenBabel. The detailed introductions for all descriptors are provided in the ChemoPy manual (see Supplementary Material S3). A user guide for the use of ChemoPy is included to guide how the user uses it to calculate the needed features (see Supplementary Material S4). ChemoPy is written by the pure python language. We chose to use python because it is open source, and there already exist packages to handle small molecules [e.g. Pybel (O'), PyMol and Cinfony (O'. It is convenient for ChemoPy to analyse drug molecules processed by Cinfony or RDKit. ChemoPy is available for two operating systems: Linux and Windows. ChemoPy depends on Pybel, RDKit, OpenBabel (O') and MOPAC (). Moreover, it needs the support of scientific library for python (SciPy).
from pychem.pychem import PyChem2d, PyChem3d
DISCUSSIONChemoPy contains a selection of molecular descriptors to analyse, classify and compare complex molecular network. They facilitate to exploit machine-learning techniques to drive hypothesis from complex molecular datasets. The usefulness of these molecular descriptors covered by ChemoPy for representing structural features of small molecules has been sufficiently demonstrated by a number of published studies of the development of machine-learning classification systems. The ChemoPy implementation of each of these algorithms was extensively tested by using a number of test molecules. The computed descriptor values were compared with the known values for these molecules to ensure that our computation is accurate. Owing to the modular structure of ChemoPy, extensions or new functionalities can be implemented easily without complex and time-consuming alterations of the source code. In future work, we plan to apply the integrated features on various biological research questions, and extending the range of functions with new promising descriptors for the coming versions of ChemoPy.
The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
ChemoPy at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
D.-S.Cao et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
