The rapidly increasing number of discovered non-coding RNAs makes the understanding of their structure a key feature toward a deeper comprehension of gene expression regulation. Various enzymatic-and chemically-based approaches have been recently developed to allow whole-genome studies of RNA secondary structures. Several methods have been recently presented that allow high-throughput RNA structure probing (CIRS-seq, Structure-seq, SHAPE-seq, PARS, etc.) and unbiased structural inference of residues within RNAs in their native conformation. We here present an analysis toolkit, named RNA Structure Framework (RSF), which allows fast and fully-automated analysis of high-throughput structure probing data, from data pre-processing to whole-transcriptome RNA structure inference. Availability and implementation: RSF is written in Perl and is freely available under the GPLv3 license from http://rsf.
IntroductionThe advent of high-throughput methods has rapidly led to the annotation of thousands of novel transcripts (), mostly lacking coding capabilities (). As for large ribonucleoprotein complexes (), these RNAs are thought to regulate gene expression through interactions mediated by their structure (). In the last years, a variety of methods have been developed to interrogate RNA secondary structures on a genome-wide scale (), but no tool has been developed to enable efficient analysis of the large amount of data generated by these methods, with the exception of the SeqFold package, which has been developed to analyze PARS data (). Because the analysis of these data and the subsequent inference of RNA structures constitute a bottle-neck of these protocols, we here provide the RNA Structure Framework (RSF), an open-source framework to analyze highthroughput structure probing data (SPD), and to minimize the efforts to get from raw sequencing reads to secondary structures.
ImplementationRSF is implemented in Perl as a modular package. An outline of a sample RSF data analysis workflow is shown in. Detailed information on the core modules is provided in the Supplementary material, as well in the package archive. RSF is composed of three core modules, and a number of other utilities. The reference-builder module builds the transcriptome reference used in the read-mapping step. This module requires an Internet connection to query the UCSC genome SQL database (http://genome.ucsc.edu) and obtain transcript annotation. Because the reference-builder module also requires the genome reference sequence for the species of interest, this can be either provided by the user in multi-FASTA format, or can be automatically downloaded from the UCSC DAS server (http://genome.ucsc.edu/cgi-bin/das/). The analyzer module is the core of the framework. It requires a reference index, and a set of at least 2 FastQ files (3 for CIRS-seq), one for each condition (e.g. non-treated control and DMS treatment). Reads are pre-processed using the FASTX Toolkit (http://hannonlab.cshl.edu/fastx_toolkit/) to clip adapter sequences, while mapping of reads on the reference index is performed using the Bowtie v1 tool (). Alternatively, the user can use different tools for reads mapping, and then provide to the module the SAM files instead of FastQ files. Following the mapping step, reads are sorted and the number of reads mapping at each position of each transcript are calculated in the provided conditions. Because each read gives information only on the base immediately preceding the start mapping position (Supplementary), the module automatically accounts for eventual trimming of bases from the 5 0 of the read. Once raw counts have been computed, the analyzer module calculates normalized raw reactivity scores using one of two possible scoring schemes. The first scheme () assumes an uniform distribution of read mappings across samples, but it is more susceptible to cross-sample variations since it uses the total number of mapped reads to normalize libraries for different sequencing depths. The second scheme () instead, is less affected by sample-to-sample variations in the distribution of read mappings, as it performs per-transcript normalization by considering the average number of RT-stops across the transcript being analyzed. Finally, overall reactivities for each position of each analyzed transcript are normalized to values ranging from 0 (less singlestranded) to 1 (more single-stranded). The analyzer module actually incorporates three different normalization methods: 28% normalization (), 90% winsorising () and Box-plot normalization (). For each transcript being analyzed, the module reports data in a textbased SPD file (see Supplementary materials). The third, and last, core component of the toolkit is the structure-deconvolver module. This module takes a set of SPD files and de-convolutes RNA structures from experimental data, using one of three different approaches (Supplementary): (i) Hard-constrained structure prediction using the ViennaRNA package (), (ii) Soft-constrained structure prediction using the RNAstructure tool () or an (iii) Iterative cluster-refinement approach. The hard constraint method uses the ViennaRNA package to predict a minimum free energy structure by imposing the constraint that RNA positions exceeding a given reactivity cutoff (default: 0.7) must be unpaired. The soft constraint approach uses instead the whole set of reactivity data for an RNA, by first converting it into a SHAPE data file (using the spd2shape utility provided with the RSF package), that can be supplied to the RNAstructure software. RNAstructure then uses this data to compute a pseudo-energy term to adjust the free energy of individual nucleotides (). The third approach (Supplementary), instead, is a variant of that employed by SeqFold () software. Briefly, the partition folding for the RNA is computed using the ViennaRNA package, then a backtracking through the Boltzmann ensemble of structures is performed, and structures are then clustered using Hamming distance, with a low-stringency cutoff (default: distance  0.5). The base-pair probability profile for each cluster is then calculated, and the cluster that better correlates to RNA reactivity data is selected. Following the best-fitting cluster selection, the cluster is iteratively refined by performing a progressively more stringent clustering (default: distance  distance  0.01), followed by the subtraction of individual structures that contribute to lower the correlation coefficient. Finally, the higher-correlation cluster of structures (Boltzmann sub-ensemble) is returned, as well as the minimum expected accuracy structure for the RNA (defined as the structure in which only the concordant base-pairs in at least the 50% of cluster structures are reported). Predicted structures can be reported in dot-bracket or connectivity table notations, as well as in PostScript or SVG graphical formats. Additional tools and utilities are also shipped with the RSF package, and are described in the Supplementary material.
ConclusionThe advent of high-througput RNA structure probing methods has provided a large amount of transcriptome-wide scale structural data, although robust tools for the rapid elaboration of this information are currently missing. RSF is a user-friendly toolkit that enables automated inference of RNA secondary structures on a transcriptome-wide scale, in a few steps. It can use data derived from many different structure probing methods, both chemical (CIRS-seq, SHAPE-seq, Structure-seq) and enzymatic (PARS). Due to the rapid evolution of the field, and to the absence of a golden standard in the analysis of high-throughput SPD, the implementation of several different scoring, normalization and structure prediction methods enables a high degree of analysis flexibility to the user. The use of high-throughput structure probing methodologies coupled to RSF provides an important toolkit for the genome-wide analysis of RNA structures.Conflict of Interest: none declared.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
D.Incarnato et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
