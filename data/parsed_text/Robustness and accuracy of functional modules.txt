Motivation: High-throughput molecular data provide a wealth of information that can be integrated into network analysis. Several approaches exist that identify functional modules in the context of integrated biological networks. The objective of this study is 2-fold: first, to assess the accuracy and variability of identified modules and second, to develop an algorithm for deriving highly robust and accurate solutions. Results: In a comparative simulation study accuracy and robustness of the proposed and established methodologies are validated, considering various sources of variation in the data. To assess this variation, we propose a jackknife resampling procedure resulting in an ensemble of optimal modules. A consensus approach summarizes the ensemble into one final module containing maximally robust nodes and edges. The resulting consensus module identifies and visualizes robust and variable regions by assigning support values to nodes and edges. Finally, the proposed approach is exemplified on two large gene expression studies: diffuse large B-cell lymphoma and acute lymphoblastic
INTRODUCTIONMultiple genome-scale datasets nowadays allow to model the cell as an intricate network of molecular interactions. Research in systems biology has changed accordingly, now focusing on network analysis of high-throughput genome-, transcriptome-and proteome data. Reaching beyond the analysis of mere topological questions, integrated network analysis incorporates additional molecular data into a network. For gene expression data integrated approaches are used to search for pathways, functional modules or gene signatures containing differentially expressed genes in the context of gene networks or proteinprotein interaction (PPI) networks (). Given the integrated gene expression data, the * To whom correspondence should be addressed. objective is to find the maximal significantly deregulated (i.e. differentially expressed) set of interconnected genes in the cellular network. We refer to the resulting connected subnetwork as a functional module, which is also denoted as active or perturbed module (). Please note that this is in contrast to other fields in biology (e.g. proteomics), where functional modules denote protein complexes (). Various methods have been proposed to identify functional modules in an integrated network. In this study we focus on the popular approaches proposed by, Ulitsky and Shamir (2007) and. Although these algorithms differ in many important aspects, conceptually they all aim at identifying connected subnetworks that contain significantly deregulated genes.introduced the problem and proposed a simulated annealing approach to identify subnetworks. Due to the heuristic nature of such sampling approaches, the resulting modules are not optimal in general. In an alternative approachpropose the algorithm DEGAS (DysrEgulated Gene set Analysis via Subnetworks), based on a greedy approximation to identify subnetworks of dysregulated genes. In contrast to the above mentioned approaches, the algorithm ofidentifies optimally scoring subnetworks using an exact algorithm based on integer linear programming (ILP). Besides the accuracy of a module identification method, the robustness of obtained solutions is of particular importance. A natural question is: How variable are the provided solutions (given the method)? A highly variable method produces largely differing solutions in different runs or on slightly perturbed input data and is thus less reliable. Clearly, well designed algorithms should ideally show both: high accuracy as well as high robustness. Here we investigate the accuracy and robustness of the three prominent module detection algorithms regarding (i) the integrated gene expression data and (ii) the network structure of the PPI network itself. As a consequence of the investigation we propose a novel method to calculate accurate as well as robust modules in which robust parts are indicated by support values, introducing the new concept of consensus modules. In phylogeny, Felsenstein (1985) introduced resampling approaches (e.g. bootstrap and jackknife) to define a confidence measure for splits in a phylogenetic tree and to calculate consensus trees. Similarly, resampling procedures can be used to assess the robustness of functional modules in integrated network analysis. We use the delete-half jackknife (
D.Beisser et al.resample the input microarray data and construct a set of resulting modules. The consensus module summarizes the obtained modules as one highly accurate and robust module with support values assigned to its nodes and edges. For this purpose we extend the existing exact approach offrom a purely nodebased optimization to a node-and edge-based optimization problem. Although this extension might be useful in various applications in network analysis, we first use this extension to define and calculate the consensus network. The major benefit of this procedure is 2fold: first, we identify the optimal accurate as well as optimal robust module. Second, we analyze and visualize the inner structure of the identified module by assigning support values to both nodes and edges. The outline of the article is as follows: we first investigate the robustness of obtained solutions by comparing our approach to other methods in a simulation framework. Therefore, we evaluate the resulting modules in terms of accuracy and variability using integrated microarray data, perturbed integrated data and perturbed interaction networks as different sources of variability. To assess and quantify the method-independent variability of the modules (by assigning support values) we introduce a novel consensus algorithm based on a resampling procedure. Finally, we apply the consensus approach to two experimental datasets: microarray profiles regarding acute lymphoblastic leukemia (ALL) and diffuse large B-cell lymphoma (DLBCL).
MATERIALS AND METHODS
Gene expression and network dataPPI data from HPRD human protein reference database; () were used, constituting a network of 9386 proteins and 36 504 interactions as well as a human PPI network from the meta-database PINA () with 11 354 proteins and 68 257 interactions. Expression data were taken from a study on DLBCL fromand a subset of a leukemia microarray collection for c-ALL/Pre-B-ALL with t(9;22) and without t(9;22) translocation (ArrayExpress experiment: E-GEOD13159)(). The DLBCL data comprise 194 samples on custom microarrays, containing probes for 3583 genes. Mapping these to the PINA network resulted in a largest connected component of 2220 genes and 12 074 interactions. The ALL dataset contains 359 samples on Affymetrix hgu133plus2 gene chips with 54 675 probesets corresponding to 19 738 genes with gene symbol and Entrez ID. Of these, 10 576 can be mapped to the human PINA network, resulting in a largest connected component of 10 576 genes and 63 015 interactions.
Integrated network analysisIntegration of gene expression data and the search for optimal modules has been performed as described inwith an algorithm termed heinz (heaviest induced subgraph). Briefly, the distribution of raw p-values from a standard t-test, conducted on the microarray data, can be considered as a mixture of signal and noise, where the signal component is modeled to be Beta(a,1) distributed (), whereas the distribution of the noise component is by definition given as the uniform distribution. By fitting a Beta-uniform mixture (BUM) model, maximumlikelihood estimates for all model parameters can be obtained that are subsequently used to score the network nodes. The node score is given by the likelihood ratio of the signal to the noise component and can be adjusted by a threshold  depending on a pre-selected false discovery rate (FDR). S FDR (x) = log ax a1 a a1 = (a 1) log(x)log( (FDR)) .
Extensions of the heinz algorithmBased on the node score defined in Section 2.2, we have proposed heinz (), a method to identify functional modules by finding maximum-scoring connected subnetworks. In contrast to prevalent heuristic methods, heinz is an exact approach, i.e. it finds provably optimal and suboptimal solutions. The method exploits the close connection of maximum-scoring connected subnetworks and prize-collecting Steiner trees (PCSTs). In fact, we use an ILP based approach for the Steiner tree problem after an initial problem transformation. Here we have extended the heinz method to allow for the incorporation of (i) edge weights and (ii) computing modules of a predefined size.(i) In (), we defined modules as optimal solutions to the following problem: given an undirected, vertex-weighted graph G = (V ,E,w) with weights w : V  R, find a connected subgraphWe have shown that an optimal module can always be represented by a tree in case the edge scores are neglected. We now extend our formulation to incorporate edge scores in the following way: given an undirected, vertex-and edge-weighted graph G = (V ,E,w) with weights w : V E  R, find a subtree(v). We can show a similar transformation to the PCST problem as in the original algorithms that allows only node weights.(ii) It is easy to change our method such that it finds the optimalscoring module of a fixed, predefined size k. In our ILP, binary variables x v determine the presence of nodes in the optimal subgraph T , that is, x v = 1 if v  V T and x v = 0 otherwise. Just adding the constraint vV x v = k limits the search space to contain only modules of size k.The heinz algorithm can be accessed from the open-source R package BioNet (), available from http://bionet.bioapps. biozentrum.uni-wuerzburg.de and the Bioconductor project. The package includes the integration of data, scoring of nodes and alternative methods for network search and visualization. The methods for the calculation of consensus modules are integrated in the BioNet package.
GO enrichmentFor functional characterization of genes contained in the identified modules a gene ontology (GO) () term enrichment against the complete network was performed. This identifies the GO categories that are significantly overrepresented in a set of genes. The analysis was conducted using the R package GOstats ().
Simulation of reference modulesTo evaluate the performance of the proposed algorithm and the improvement over other methods, a simulation framework has been created on the basis of the input microarray data. For this we use an induced PPI network from HPRD contained in the BioNet package with 2034 genes which are existent on the DLBCL microarray. To compare the resulting modules to the true solution, a reference module S = (W ,F), W  V and F  E, of size k as a subgraph of graph G = (V ,E) is created as follows:(1) Start with a given graph G = (V ,E) and an empty subgraph S(2) Select random seed node v  V and include node in W(3) Expand S by adding a node u and its induced edges from the neighborhood (S) := {u  V | (w,u)  E,w  W ,u  V \W }, for which its average shortest path length l S (u) within S is most similar to its average shortest path length l G (u) within the full network.(4) Repeat Step 3 until given size is reached, that is, |W |=kThe average shortest path length was chosen as a characteristic network measure, which remains approximately constant to the average shortest path
Resampling networkslength of the network for all extracted modules in real datasets. Modules with longer average shortest paths correspond to sparse subnetworks that are frequently not biologically relevant (). The subnetwork is termed signal module in the following. Signal modules of varying sizes k are generated. For the genes contained in this module expression values are simulated showing differential expression between two groups (see Supplementary Section S2). Subsequently, the simulated gene expression data are analyzed as detailed in Section 2.2.
Resampling procedureThe statistical method of jackknifing was first introduced by Quenouille (1956) and Tukey (1958) by deleting one observation to estimate the bias and variance of a statistic of interest. The more general delete-j observations jackknife draws random subsets of the data without replacement by deleting j observations. The delete-half jackknife has similar properties as another resampling method, the bootstrap (), and can be seen as an approximation of it (). The difference between these resampling approaches is that the bootstrap is a random resampling procedure with replacement, and the jackknife draws random subsets of the data without replacement by deleting j observations. Often one is interested in the standard error or the confidence interval (CI) of statistical estimatortestimatorestimatort for a parameter of interest that is given as function T of the data pointsDrawing J times randomly a subset of nj values from the observed data x 1 ,x 2 ,...,x n we obtain J jackknife pseudo-replicates of nj data points. For each sample the estimatest(i) 2 ,.
..,x(i) nj , i = 1,...,J , are calculated. Based on this jackknifed distribution of the estimator the standard error and CIs can be estimated. A 50% jackknife was used and half of the observations dropped as recommended by).
Perturbation of the networkThe stability and variance of modules calculated on an integrated protein protein interaction network are studied by investigating simulated datasets with respect to three types of perturbations of the network. The perturbations considered are random deletion, addition and rewiring of 10, 25 and 50% of all edges in the network. The method and analysis is described in more detail in the Supplementary Section S3.2. In addition, we analyze whether networks with different numbers of interactions, e.g. HPRD and PINA, alter the results obtained from real biological networks.
Comparisons to other methodsTo assess the performance of the algorithms, we generated artificial expression data with signal modules as detailed in Section 2.5 for varying module sizes. The DEGAS algorithm (), implemented in the program Matisse, identifies minimal connected subnetworks in a PPI network in which the number of dysregulated genes from expression profiles exceeds a certain threshold. The tool jActiveModules () is another heuristic approach to identify high-scoring subnetworks based on expression p-values by transforming p-values into scores and assigning each protein of a PPI network a score. The DEGAS algorithm is applied throughout the study with the following parameters: UP regulated, dysregulation ratio = 1, number of outlier cases = 1 (parameter l), heuristic = ExpandingGreedy, k-steps = 1, parameter k (number of significant genes per case) is varied in steps of 10 from minimum tested k = 1 and maximum tested k = 10 to minimum tested k = n9 and maximum tested k = n to obtain modules of varying sizes (for simulated modules of size 25 and 50: n = 70, for module of size 150: n = 100). For jActiveModules the number of modules is set to 1 and it is run iteratively on the previous solution until the smallest possible module size is reached.of the resulting modules differs slightly due to the resampling, this set of modules is subsequently used as a basis for deriving consensus node and edge scores. Then, the original network is rescored with the consensus scores and the MSS is calculated. The resulting consensus module collects as many highly supported nodes and edges as possible (see Section 3
.1) and thus constitutes the maximal robust and accurate moduleThe accurate identification of simulated modules is evaluated in a precision-recall (PR) curve, where the precision quantifies the number of correctly identified nodes among the ones identified as positives. A compact representation of the PR curve is given by the F max score, which is the maximum over F 1 = 2precision recall/precision +recall. The variability of obtained solutions is assessed by calculating the pairwise Jaccard coefficientthe vertex sets of the modules A and B. Furthermore, the accuracy and variance of the solutions on perturbed data and on perturbed networks are assessed (for details see Supplementary Section S3). The algorithm is run on a network with perturbed gene expression data; or on a perturbed network with the original gene expression data.
RESULTS
The consensus algorithmHere, we propose a jackknife procedure to assess the robustness and variability of the network modules as depicted in. Briefly, the algorithm for the calculation of the consensus modules consists of the following steps:(1) Resampling of microarray data using jackknife for J pseudoreplicates (, first line);
D.Beisser et al.(2) Scoring network nodes and calculating the MSS of the size of the original module for each jackknife-replicate (, middle part);(3) Calculating the frequency of nodes and edges in the resulting jackknifed modules;(4) Rescoring the network with a consensus score derived from the frequency of edges and nodes (, lower part);(5) Calculating the MSS of equal size to the original module. This constitutes the consensus module.In more detail, the algorithm starts with the generation of J jackknife samples of the expression data (J = 100 throughout the study, for comparisons consensus modules with J = 1000 were computed, yielding very similar modules in the biological examples with a highly significant correlation (r > 0.98) for node and edge support values). For each jackknife pseudo-replicate a node score is calculated in the same manner as for the original data as detailed in Section 2.2. Subsequent module searches results in a set of slightly differing modulesThe frequency of each gene in the resulting J modules is used to define a consensus score for each node and each edgefor a given threshold  [0,J ] ( = J /2 throughout the study). This means in particular, that only nodes or edges occurring more than  times in the set of resampled modules get a positive score. Support values are calculated from the resampling procedure for the nodes and edges of the network. On the one hand these can be used for annotation of the obtained original module. Alternatively, the support values can be used to derive a new score for the network and calculate a novel module, the consensus module. The original network is subsequently rescored with the consensus score for the nodes and edges and the MSS is calculated with the size set to the size of the original module. We define this resultant optimal scoring subnetwork as the consensus module. This approach extends the methodology described inby additionally optimizing over different module topologies, resulting in a highly accurate and robust module with optimal support values. The frequencies of the nodes and edges in the jackknifed modules are used as support values in the consensus module. These scores are visualized in the plot of the modules via the node sizes and edge widths. The more often an edge or a node occurs in any of the perturbed modules, the more likely it is, that it is a robust part of the functional module and should be considered for further analysis.
Assessing the variance of resulting modules in a simulation studySince our objective is not only to find a module which obtains a good accuracy, but also yields results that are robust to minor changes in the underlying data, we assessed the robustness and variance of obtained solutions in a simulation study. The analysis was performed on simulated perturbed data generated with jackknifing as described in Sections. 2.5 and 3.1. To compare our method to other approaches, we used the exact algorithm on which the consensus approach is based (), the DEGAS method of the program Matisse (Module Analysis via Topology of Interactions and Similarity SEts;) and the module finding plug-in jActiveModules () for Cytoscape. The comparisons were performed on a 50 node signal module with a signal strength of 1 (difference in means) between the two conditions in the microarray data. A 50% jackknife was used to generate 20 datasets of perturbed microarray data as input for all three methods. Further analyses with different simulated module sizes (25 and 150) are included in the Supplementary material (Supplementary Figs. S2 and S3). The same PPI subnetwork derived from HPRD, consisting of the genes from the microarray was used for all algorithms. Different module sizes were obtained from the programs by either changing size parameters or iteratively applying the method on the resulting subnetwork. This allowed us to assess the performance and variability in PR curves, F 1-measure and Jaccard coefficient. The resulting PR-curves of the 20 resampled datasets for varying module sizes are depicted infor jActiveModules, Matisse and heinz, respectively. A fitted lowess regression for all 20 PRcurves is depicted, for detailed plots see Supplementary.shows the maxima of the F 1-measure (F max ) for the 20 resamples of each method. Apparently, the heinz modules obtain the highest F max values as well as the smallest variance in F max. The difference in means of the obtained F max for the three methods is highly significant (Wilcoxon test) as well as the difference in variance between jActiveModules and heinz (p-value of 0.007 in the BrownForsythe version of the Levene-type test for equal variance ()). We chose the 20 best solutions of each algorithm in terms of precision and recall to see how they perform regarding the variance (C).depicts a histogram of how often a node is found in a module. Methods with many stable nodes (i.e. those that occur in almost all modules) and few unstable nodes (those that occur in almost no module) had robust solutions with a low variance, whereas methods with opposite characteristics were non-robust and gave very different solutions for each resampled dataset. Here the most robust method was again heinz, with few nodes appearing only in few modules and most nodes appearing in all modules. Furthermore, the number of correctly assigned nodes was highest for our algorithm. The pairwise Jaccard coefficients of the 20 best solutions (190 comparisons for each method,and) showed the variability in the resulting modules. Whereas generally large Jaccard coefficients illustrated a high similarity between all 20 modules. The differences in means between the Jaccard coefficients of heinz and Matisse and heinz and jActiveModules were highly significant (two sample Wilcoxon test, p-value of 510 64 and 310 64 ). The analyses with different simulated module sizes indicate that accuracy and variability of the exact approach (heinz) is independent of signal size (module size) in contrast to the heuristic methods. Here in particular for small signal sizes the heuristic approaches show a high variability and a high drop in accuracy (see3). In addition to the noise arising from the integrated gene expression data, possibly false positive and false negative interactions of the network must also be taken into account. Therefore we perturbed the interaction networks as described in Section 2.7 and assessed the accuracy and variance similarly to the previous analysis. The effect of deleting, adding and rewiring random edges from the network is shown inC, by plotting precision versus recall of the obtained functional modules.shows the effect of the random rewiring of edges on the performance of theof microarray data, with a module size of 50 nodes, the methods Matisse, jActiveModules and heinz have been applied to detect functional modules (SupplementaryC). The accuracy is analyzed by precisionrecall plots by varying the size of the resulting module over size parameter settings (Matisse, heinz) or iterative runs (jActiveModules). (A) PR curves for all three methods (for more details see Supplementary). Unstable means that a node is found only in one or two modules. Stable means that a node is found indifferent algorithms. With varying degree of perturbation, from 10% to 50%, the performance of the methods decreases. Again, heinz shows most robust performance when changing the underlying network, even with 50% of the edges rewired. The other methods are more sensitive to destruction of the network and show a decreasing performance upon rewiring of edges. We also looked at the consistency of the solutions inby calculating the Jaccard coefficient of five independent solutions for each level of perturbation and each method. The results show that heinz is very robust in identifying the same solutions on perturbed networks.
Case studies on biological expression datasetsWe applied the proposed algorithm to the ALL dataset (). In particular we investigated the differential expression between pre B-cells with and without the t(9;22) translocation, also known as Philadelphia translocation. Using an FDR of 0.01 we calculated the consensus module from 100 (and 1000) jackknife resamples of the microarray data (). Support values were determined for the nodes and edges contained in the module, i.e. edges with high-jackknife support values represent interactions between genes/proteins that appeared often together in resampled subnetworks. 27% of the genes from the original module were obviously an unrobust signal and appeared too infrequently in the jackknifed modules to be contained in the consensus. The high variability in the data is also reflected by the low-jackknife support values of the consensus module. The consensus module, particularly the robustly connected component with jackknife support of the edges and nodes greater than 25% (, highlighted in yellow) contains essential genes for the analyzed cytogenetic translocation. Among these are prominently the genes BCR and ABL1, which form a fusion transcript due to the translocation and constitutively activate downstream signaling. Thereby inhibiting apoptosis through activation of a Ras-dependent signaling pathway (), including the involvement of RRAS, SOS1, GRB2, RHOA and TP53. Further essential associations to SCR were shown () as well as to insulin-signaling pathways, including the proteins IGF1R, IRS1, PI3K and GRB2 (). GO term enrichment analysis was performed on the resulting modules (S4) and the robust component of the consensus module. The enriched biological processes of the consensus module include several intracellular signaling cascades, among them the above mentioned connections to Ras protein and insulin signaling pathways. The robust component alone hints to DNA damage response and signal transduction resulting in induction of apoptosis and cell communication. Functional modules obtained with jActiveModules and Matisse are shown in the Supplementary Material (). They lack important proteins deregulated in the disease, e.g. the most prominent: BCR and ABL1. Analogously we applied the proposed algorithm to the DLBCL dataset (). In DLBCL we searched for modules which are differentially expressed between the two tumor subgroups, germinal center B-cell-like (GCB) DLBCL and activated B-cell-like (ABC) DLBCL. With an FDR of 10 7 we calculated the consensus module based on 100 (and 1000) jackknife resamples (). In contrast to the ALL dataset, nodes and interactions of the resulting DLBCL consensus module were much more robust, as indicated by the higher support values. Only 6% of the genes of the original module were not included in the consensus module. Therefore when using the edges and nodes with at least 50% support values, a large part of the consensus module was selected as robustly connected component (, highlighted in yellow). In particular the robust component comprises genes with associations to known deregulated processes in DLBCL. The ABC subtype of DLBCL requires a chronic active B-cell signaling for cell survival (), represented by the genes LCK, LYN, BLNK, BCL2 and BCL6. It was shown for the more aggressive ABC DLBCL subtype, that ABC cell lines have a constitutive expression of STAT3 and activation of NFB (). Acetylation of STAT3 by histone deacetylases (HDACs) was shown to be responsible for the activation (). The genes STAT3, HDAC1 and HDAC3 are part of the consensus module. Activation of NFB induces the expression IRF4, which in turn inhibits BCL6 gene expression, and regulates the expression of further NFB target genes, such as CCND2, (CFLAR), BCL2 () and PIM1. GO analysis (S8) resulted in very
D.Beisser et al.
ABsimilar rather unspecific biological processes for the optimal and the consensus module, due to the high similarity of these two modules. The stronger signal in the gene expression data and less noise also result in more similar modules from jActiveModules and Matisse which also include some of the above mentioned genes ().
Run timeWe use an ILP based approach for the PCST problem after an initial problem transformation to calculate MSSs. In general we made the experience, that despite the NP-hardness of the problem the algorithm runs very fast on biologically relevant instance size, usually ranging between seconds to minutes for one calculation. The proposed jackknife resampling algorithm scales linearly in the number of replicates, which is reflected in its runtime behavior (). The highly significant correlation between modules calculated on 100 and 1000 jackknife replicates shows that the smaller number of replicates are sufficient for an accurate modularization of the microarray data. Furthermore, the computation can easily be run in parallel on a cluster or multicore workstation.
DISCUSSIONHere we have presented a novel method for the identification of highly robust and accurate modules. We suggest a consensus approach, based on jackknifing, to calculate a resulting functional module, whose inner structure is characterized and highlighted by support values on nodes and edges. In an extensive simulation study we compare our approach to well-established heuristic module identification methods in terms of accuracy and robustness. Particularly, we distinguish between different sources of noise that affect the obtained solutions: (i) the variability of the integrated data (e.g. gene expression data), (ii) the variability of the underlying network (e.g. PPI network) and (iii) the intrinsic methodological variability for heuristic module identification methods. In general, the exact algorithm clearly outperforms the other validated heuristics not only in terms of accuracy but also in terms of robustness. In particular, the simulation of perturbed networks reveals that the performance of heuristic module detection methods declines faster and more pronounced with increasing level of perturbations in contrast to the exact approach. Interestingly, our simulation results indicate that even the inclusion of a large number of false positive edges has only a limited influence on the accuracy of functional module identification, whereas the deletion of edges has a much stronger effect. This holds true for all algorithms examined in this study. These simulation results have also implications for the analysis of real PPI data: in the context of integrated network analysis low-confidence interaction networks [e.g. in the STRING database ()] could perform similarly good or better than high-confidence PPI networks based on a highquality threshold which may lack a large number of true positive edges. Analyses on the PINA and HPRD network, comprising large differences in the number of interactions, show that on biological networks the results are almost identical. On the algorithmic side we have extended an existing exact approach () in two directions: (i) by the incorporation of edge scores and (ii) by the calculation of optimal modules of a given size. On the biological side we have applied both algorithms, the original exact method as well as the new proposed consensus method, to two well-known microarray datasets (ALL, DLBCL). These datasets differ in their signal content, which is directly reflected by the support values of the consensus module. In the case of a high-signal content, the results for the original module and the consensus module agree in most parts, whereas). The most robust central nodes in the yellow shaded submodule are the genes ABL1 and BCR, which are directly affected by the translocation t(9;22). These central genes are not present in both modules found by the heuristic methods jActiveModules and Matisse (see Supplementary)
Resampling networks
A B
A B
D.Beisser et al.for weak signals they differ greatly from each other. In the latter case the consensus module is a clear improvement as it represents the optimal, robust solution and depicts substructures of high confidence. The results of our study underlined the importance to distinguish robust signals from noise by the use of resampling methods as implemented in the proposed consensus approach, which inherits the accuracy from the optimal algorithm whereas on the other side improving its robustness.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
