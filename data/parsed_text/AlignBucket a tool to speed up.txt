Motivation: The next-generation sequencing era requires reliable, fast and efficient approaches for the accurate annotation of the ever-increasing number of biological sequences and their variations. Transfer of annotation upon similarity search is a standard approach. The procedure of all-against-all protein comparison is a preliminary step of different available methods that annotate sequences based on information already present in databases. Given the actual volume of sequences, methods are necessary to pre-process data to reduce the time of sequence comparison. Results: We present an algorithm that optimizes the partition of a large volume of sequences (the whole database) into sets where sequence length values (in residues) are constrained depending on a bounded minimal and expected alignment coverage. The idea is to optimally group protein sequences according to their length, and then computing the all-against-all sequence alignments among sequences that fall in a selected length range. We describe a mathematically optimal solution and we show that our method leads to a 5-fold speed-up in real world cases. Availability and implementation: The software is available for downloading at
Introduction'All-against-all' sequence alignments in protein datasets are routinely performed with programs such as BLAST () or dynamic programming approaches (). By this, sequences group into subsets of sequence identity values that are important in several applications, including transfer of structural and functional features between protein sequences (for details see www.uniprot.org/program/ and www.ebi. ac.uk/GOA/ElectronicAnnotationMethods). Proteins that share at least some 30% of sequence identity may overlap in their threedimensional structures (), while proteins sharing at least some 60% of sequence identity are likely to share also similar functions (). It is also important to consider the relative length of the pairwise aligned sequences before transferring annotations (). Multidomain proteins are less functionally conserved than single-domain ones () and methods based on transfer of function after homology search can group proteins with different functions in the same cluster. Therefore, both sequence identity values and the percentage of overlapping positions over the alignment length (coverage) were constrained in developing methods for annotation problems (). Evolutionary studies include alignments in the early stage of their workflow (V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 2013), as well as different computational methods to speed up computation (). Considering the computational cost, the all-against-all similarity search is an extremely demanding process. Recently, in problems related to evolutionary studies,showed that by considering subsequence-level homology, the speed of the allagainst-all alignment process could be increased by a factor of four, while maintaining the possibility of retrieving homologous sequences. On the same line of research, here we present an algorithm that can speed up the computational time of the similarity search by constraining the expected alignment coverage.
MethodsAccording to, the BLAST computational cost (c) of comparing all pairs of sequences with lengths ranging from s to t is:where k and j are sequence lengths (number of residues) and S k is the number of sequences of length k in the database. Given a bound (d) on the required minimum coverage (fraction of overlapping positions over the sequence alignment length, 1) of the resulting alignment, all the sequences in the database can be partitioned in different ways. The two extreme possibilities are (i) a single set containing all the sequences, and the procedure of the all-against-all pairwise sequence comparison performs many worthless computations; (ii) N sets (one for each possible sequence length k), including all the sequences in the range dk  de; bk  dc, and the procedure of the all-against-all pairwise sequence comparison performs again many useless alignments. In case (i) many alignments will not meet the required bound d, while in case (ii) too many duplicated comparisons will be performed. To reduce the alignment time, we introduce AlignBucket, a procedure that optimizes sequence-length bounds for each subset of the database to minimize the computational cost of Equation (1) (for theoretical details see Supplementary Materials).
Results and conclusionThe algorithm was tested on UniprotKB (UniProt, 2011, release 2015_05), including 32 688 435 sequences. The dataset contains unique protein sequences with length ranging from 40 to 36, 805 residues (the length distribution is in Supplementary). According to Equation (1), an all-versus-all sequence comparison of the dataset leads to a total cost of 3:85  10 17 , when d is set to 0 (). At increasing d values from 0.1 to 0.9, the computational cost for the increasing number of sets defined with AlignBucket decreases up to 6.86 times.lists the optimal number of sets, the evaluated cost, its percentage value and the computational speedup of the selected partition over a single set containing all the sequences. When the algorithm is tested on real world data, a speed-up of 5.3 is already measured when 65 000 sequences are compared with 548 458 chains of the SwissProt database (). This result is consistent with the theoretical estimate (). In conclusion, here we describe a new algorithm for partitioning protein sequences given a constraint on the expected alignment coverage and our contribution points to the pre-processing algorithm that filters out unnecessary comparisons. Alignments in the buckets are computed as those in the all-versus-all comparisons, and therefore, the only missing outputs are the alignments between pairs of sequences that would be discarded by a coverage filter in postprocessing. The partition found by the algorithm can be proven to be optimal (for details refer to Supplementary Materials).Database is UniprotKB 2015_05 with a total of about 32 million sequences; d is the minimal expected coverage required in the pairwise sequence alignment. Cost: sum of Equation (1) over the sets. Full cost is for d  0. Speed up is full cost over cost (Supplementary Materials).
Bioinformatics, 31(23), 2015, 38413843 doi: 10.1093/bioinformatics/btv451 Advance Access Publication Date: 30 July 2015 Applications Note at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
G.Profiti et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
