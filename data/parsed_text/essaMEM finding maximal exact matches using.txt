We have developed essaMEM, a tool for finding maximal exact matches that can be used in genome comparison and read mapping. essaMEM enhances an existing sparse suffix array implementation with a sparse child array. Tests indicate that the enhanced algorithm for finding maximal exact matches is much faster, while maintaining the same memory footprint. In this way, sparse suffix arrays remain competitive with the more complex compressed suffix arrays. Availability: Source code is freely available at https://github.ugent.be/ ComputationalBiology/essaMEM.
INTRODUCTIONMaximal exact matches (MEMs) are exact matches between two sequences that cannot be extended to the left or right without introducing a mismatch. In addition, extra cardinality constraints can be imposed, leading to the concepts of maximal unique matches (MUMs) and maximal almost-unique matches. These matches are widely used as seeds for sequence comparisons and alignment tools, such as MUMmer (). Algorithms for memory-efficient MEM-finding can be divided into online and indexed methods. Algorithms of the former type construct a (compressed) index structure for the concatenation of both sequences and iterate over the index to find the MEMs or MUMs (). essaMEM belongs to the class of indexed MEM-finding algorithms, which match one sequence against an index of the other sequence. The advantage of indexed MEM-finding over online MEM-finding algorithms is the reusability of the constructed index. Originally, suffix trees () or enhanced suffix arrays (ESA) () were used to find MEMs. However, the size of these types of indexes is several times larger than the size of the indexed sequence. ESAs consist of four arrays [suffix, longest common prefix (LCP), child and suffix link arrays] that contain parts of the information stored in suffix trees and together reach the full expressiveness of suffix trees (). Several algorithms build on the idea of ESAs by using more memory-efficient variants of the arrays.suggest the use of sparse suffix arrays (SSA). SSAs index only every Kth suffix of the sequence. The parameter K is called the sparseness factor. Their SSA-based algorithm, sparseMEM, is able to find MEMs faster than previous methods, while using less memory. As a result of this lower memory footprint, SSAs can also index larger genomes than previous methods. However, for large values of K, the execution time increases dramatically. More recently, an algorithm using (enhanced) compressed suffix arrays (CSA) was presented by. In contrast to SSAs, these compressed counterparts index every Kth suffix array value. It was shown how the CSA-based MEM-finding algorithm, backwardMEM, outperforms sparseMEM, except when memory is abundant. In this article, we optimize the method by Khan et al. by supplementing SSAs with a sparse child array for large sparseness factors. We show that the new index structure outperforms the previous design, while maintaining the same memory footprint. Furthermore, when combining both the suffix link and child arrays, we achieve a complete enhanced sparse suffix array (ESSA), which has the same expressiveness as suffix trees for substrings larger than K. We show that ESSAs are competitive for MEM-finding with the CSA-based method by Ohlebusch et al. and outperform commonly used methods like MUMmer () and Vmatch (http://www.vmatch.de/). This indicates that, although compressed index structures have recently become popular (), the use of ESSA-based algorithms can be a viable option for further research.
METHODSAlthough different indexed MEM-finding algorithms roughly share the same approach, the implementation of common algorithmic stages can vary greatly because of the specific design of the index structure used. As we improve on the algorithm of Khan et al., we only give a brief overview of the improvements and additions made to this method. A more detailed description can be found in the Supplementary Material (Section S1), and for more details on the algorithm of Khan et al., we refer to the original article (). We present two major improvements to the original SSA design. The first is the addition of a sparse child array to the SSA index structure of. This array, as defined in the study conducted by, allows constant time access to child nodes in *To whom correspondence should be addressed. a virtual sparse suffix tree that is simulated by the SA and LCP arrays. The sparsification of the child array is possible because child array operations only require knowledge of intervals within LCP arrays, for which the definition remains unchanged when introducing sparseness. The second improvement is the introduction of a skip parameter s, which introduces sparseness in the query sequence, resulting in a performance trade-off between two stages of the algorithm. When optimized, this parameter can lead to a significant increase in performance. The first step in indexed MEM-finding algorithms consists of constructing an index structure for a reference sequence. For the construction of the sparse child array, we used the algorithm described in the study conducted by. In a second phase, all suffixes of a query sequence are matched against the index structure until a mismatch occurs, or the user-set minimum length L is reached. The output of this phase consists of all right maximal matches of minimum length L  K  1. Khan et al. combine a binary search algorithm for matching characters and suffix link support, which recovers computations made for the previous suffix, to increase the performance of this phase. essaMEM uses a faster matching algorithm using the sparse child array. Although suffix links can still be used with this approach, the combination of a sparse child array and suffix links does not lead to further improvements in execution time for the MEM-finding algorithm. Tests have shown that the use of the skip parameter has the same functionality as suffix link support, but it has a higher impact on the mapping time and affects a broader range of sparseness factors. The combination of child arrays and suffix links might, however, still be of interest for designing other algorithms. The final step of the MEM-finding algorithm requires checking all right maximal matches for left maximality. As this phase is usually faster than the previous matching phase, essaMEM introduces a trade-off parameter s to increase the input of this phase and decrease the number of suffixes matched in the previous phase by a factor s. As a result, the matching phase generates all right maximal matches of minimum length L  s  K  1.
RESULTSessaMEM is open source and can be used as drop-in replacement for tools that require MEM-finding. In particular, essaMEM supports all MUMmer v3.23 options. We evaluated the performance of essaMEM against sparseMEM, MUMmer, Vmatch and backwardMEM using all relevant datasets provided previously (). The default setting of essaMEM features a sparse child array and an estimate for the optimized skip parameter, but lacks suffix links support. Because the sparse child array has the same size as the inverse suffix array (only required for suffix link support), essaMEM has the same memory footprint as the index structure used by Khan et al. For optimizing s, the runtime for a maximum of five successive values of s is taken. The largest value of s is set to be the largest value for which L  s  K  1 ! 10. Timing results do not include the index construction phase, and the resident set size was measured to determine the memory footprint of the programs. The program parameters are the same as used in the study conducted by. However, we explore a much larger interval of sparseness and compression factors than previously reported by other authors. All MEM-finding algorithms are tested on six pairs of megabase-sized genomes and two sequencing read datasets. SparseMEM and essaMEM are also tested on two pairs of gigabase-sized sequences.depicts the memory-time trade-offs presented by the different algorithms for finding all MEMs between Drosophila melanogaster and Drosophila yakuba. The other results, which can be found in the Supplementary Material, depict a similar behaviour. MUMmer and Vmatch have one of the lowest mapping times among the tested programs. Their memory requirements are, however, higher than those of the tools using compressed or sparse index structures. Furthermore, they do not allow setting a memory-time trade-off. The tests show that sparseMEM is clearly outperformed by essaMEM and backwardMEM. Although sparseMEM is fast for small values of K, its performance steeply decreases when K is increased, which can be explained by the diminishing use of suffix links. For the largest values of K, a decrease in the runtime of the mapping phase has a positive effect on the overall runtime of sparseMEM. A similar decrease in runtime for the mapping phase can be observed using the sparse child array in essaMEM. This is, however, countered by the diminishing effect of the skip parameter and can, therefore, not be seen in. The lower running time for the mapping phase might be explained by a combination of the use of a sparse child array that can match more than one character at the same time, smaller minimum lengths in the matching phase and improved I/O performance. When s is increased, the runtime decreases manifold. This effect is, however, limited by the theoretical bound s  K L. The effects of the various improvements made to the original SSA-based design are discussed in the Supplementary Material. The results also indicate that essaMEM is in general somewhat faster than backwardMEM for comparable memory settings. The difference in runtime is larger when either memory is abundant (low values of K), or the number of MEMs found is large, as backwardMEM seems to have a stronger dependency on the output size. This behaviour can be seen in, where the runtime of backwardMEM steeply increases for K48. In contrast to SSA-based methods, however, backwardMEM puts no restriction on the maximum value of K and could thus be used for small L settings in combination with a high compression factor. In terms of memory consumption, backwardMEM starts with a lower memory footprint at no compression, but the memory footprint of essaMEM decreases faster. Theoretically, the CSA. Scatterplot showing the memory-time trade-offs for finding all MEMs of minimum length 50 between D.melanogaster (169 Mb) and D.yakuba (166 Mb). The data points are acquired by setting the sparseness/compression factor K to the following values (from right to left): 1, 2, 4, 8, 16 and 32. There is only one data point for MUMmer and Vmatch index requires 4=K  1:375 bytes per input character, and the ESSA index requires 9=K  1 bytes per input character. As a result, both indexes theoretically have the same memory requirements for K % 13. The actual allocated memory for the sparse or compressed index structures for the D.melanogaster genome is given in. For this dataset, the index size of the MEM-finding tools is equal for K between 4 and 8.
0
The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
essaMEM at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M.Vyvermen et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
