
INTRODUCTIONBiological researchers use pathway diagrams as the medium to relay information about interactions among biological entities. Graphical notations like the Molecular Interaction Map (MIM) notation and the Systems Biology Graphical Notation (SBGN) promote the creation of unambiguous biological pathway diagrams through the use of well-defined rules for syntax. The specifications for these notations are long and technical, and this is a barrier to the wider usage of these notations by researchers. This issue presents a clear need not only for tools that simplify the usage of these graphical notations, but also tools that guide users in their correct usage. PathVisio is an open-source Java-based tool for creating and editing biological pathways and linking diagram elements to * To whom correspondence should be addressed. external bioinformatics databases (van). By itself, PathVisio does not compel users to create diagrams using any particular notation; support for specific notations is added through the use of plugins, such as the MIM plugin () or the SBGN plugin, which is under development (http://www.pathvisio.org/wiki/SbgnPluginHelp). Given this open nature of PathVisio, we have developed a validation framework similar to what developers are accustomed to in source code editors that report syntax errors. This accommodates the validation of pathway diagrams against any notation that PathVisio can draw with just the click of a button. There are several projects related to standardized formats for computational biology that have associated validators, including well-known formats like BioPAX () and SBML (); there is also validation capability in BCML, a SBGN-compliant format (), and SBGNED (), an SBGN diagram editor. A key difference between SBGN-ED and the plugin presented here is the extensible support for other notations in the latter, which is especially important for the PathVisio community since its users may be using various graphical notations for diverse purposes. A second difference is that rulesets (specifically, Schematron rulesets) created for use with this plugin can be reused in other software projects. The use of Schematron is a feature that this plugin shares with some generic XML editors with validation capability, such as XMLSpy (http://xml-tools.com/ValidatorBuddy.htm).
IMPLEMENTATIONThe validation of pathways using the plugin is performed based on a ruleset (a collection of rules). The plugin allows users to use their own custom-created rulesets or standard rulesets by notation developers. Described below are the main features of the PathVisioValidator plugin and its user interface: Plugin interface and current notation support: the interface for the plugin exists under the 'Validator' tab of PathVisio as shown in. At the bottom of the tab are buttons for loading a ruleset and validating the current diagram. In order to validate a pathway diagram, the user simply needs to choose a ruleset and press the 'Validate' button. Validation messages for the current pathway diagram will then appear in the side panel as shown in.These messages can be filtered to show only errors, only warnings, or both, using a drop-down menu. Users also have an option to select a specific rule group for validation. Using right-click options, users can ignore particular messages or types of messages. Currently, the plugin supports the MIM notation through a Schematron ruleset. We also provide a ruleset with rules used for the curation of diagrams on the WikiPathways database (http://wikipathways.org), a repository for biological pathway diagrams. SBGN support for PathVisio is currently in development as a separate project. Validation support of SBGN diagrams is expected through this plugin when that project is completed. Schematron and Groovy ruleset support: the plugin supports rulesets written either in Schematron or Groovy; tutorials are provided on the project website. Schematron (http://www.schematron.com) is an XML validation language that uses XSL Transformations (XSLT). The result of validation is a simple XML formatted report using the Schematron Validation Report Language. This validation report is parsed and error or warning messages for the current diagram are displayed in the 'Validator' tab as shown in. Schematron rulesets are reusable and can facilitate the addition of validation support in other software projects where an XSLT processor is available. For instance, the ruleset provided for MIM was originally described for use as part of an automated command-line pipeline (). More information on the process used with the Schematron rulesets is on the project website. Groovy (http://groovy.codehaus.org) is a scripting language with syntax similar to Java. Creating rulesets in Groovy is easy for users with a basic understanding of Java. Groovy rules are basically a collection of methods with specific signature for them to be recognized as valid rules. These are run directly against the internal memory representation of the diagram in PathVisio, producing results, which are then parsed and displayed on the plugin's panel. Validation against a Groovy ruleset, consumes less time than its Schematron counterpart, since it does not require any XSLT to take place. However, the downside to this approach is that the Groovy rules are tied to the internal workings of PathVisio. An example rule checking for unattached lines in pathway diagrams is provided in the Supplementary Material in both Schematron and Groovy. Support for validation based on rule groups: validation rules in rulesets may be put into groups. Thus, a user can validate a diagram with all the rules in a ruleset or only those under a specific group, thereby making it more selective. Schematron supports rule groups using the 'phase' XML tag with one or more 'active' rules as child XML nodes. Groovy supports rule groups through a specific method that defines rule groups and their associated rules.
K.Chandan et al.
Published by Oxford University Press 2011.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from [15:20 13/3/2012 Bioinformatics-btr694.tex] Page: 890 889890
CONCLUSION The PathVisio-Validator plugin has been developed to enhance the quality of pathways created in PathVisio by assisting biologists in drawing pathways according to specific graphical notations. Validation of this nature allows researchers to be more confident that their diagrams will not be ambiguous to readers. The extensible nature of the rulesets should allow it to adapt to preferences of PathVisio users, and the support for different ruleset formats (i.e. Schematron and Groovy) should allow users to create rulesets based on their priorities. Moreover, this plugin will also encourage the users of PathVisio, especially the beginners to create pathways based on specific notations, such as MIM, helping to promote the adoption of such standards. In the future, we plan to integrate this validation framework into WikiPathways to provide automated diagram validation (Pico et al., 2008), so that all uploaded/updated pathways are validated against common rules. Presented here is a narrow use case of the validation of graphical notations, but the ideas presented here can be extended to other biological standards written in XML-based formats. These ideas are of use in the wider standards community in providing validation support in multiple programming languages.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
