Motivation: Sequences and protein interaction data are of significance to understand the underlying molecular mechanism of organisms. Local network alignment is one of key systematic ways for predicting protein functions, identifying functional modules and understanding the phylogeny from these data. Most of currently existing tools, however, encounter their limitations, which are mainly concerned with scoring scheme, speed and scalability. Therefore, there are growing demands for sophisticated network evolution models and efficient local alignment algorithms. Results: We developed a fast and scalable local network alignment tool called LocalAli for the identification of functionally conserved modules in multiple networks. In this algorithm, we firstly proposed a new framework to reconstruct the evolution history of conserved modules based on a maximum-parsimony evolutionary model. By relying on this model, LocalAli facilitates interpretation of resulting local alignments in terms of conserved modules, which have been evolved from a common ancestral module through a series of evolutionary events. A meta-heuristic method simulated annealing was used to search for the optimal or near-optimal inner nodes (i.e. ancestral modules) of the evolutionary tree. To evaluate the performance and the statistical significance, LocalAli were tested on 26 real datasets and 1040 randomly generated datasets. The results suggest that LocalAli outperforms all existing algorithms in terms of coverage, consistency and scalability, meanwhile retains a high precision in the identification of functionally coherent subnetworks.
INTRODUCTIONA functional module is, by definition, a discrete entity whose function is separable from those of other modules (). They are usually separated based on spatial localization (e.g. a ribosome) or chemical specificity (e.g. a signal transduction system) and composed of many types of molecules, such as proteins, DNA, RNA and small molecules. A deficiency of a comprehensive chart of functional modules within organisms becomes an obstacle to unravel the general design principles that govern the structure and behavior of modules, and understand the evolutionary constraints they must obey. Thus, the problem of identifying functional modules attracts many researchers in the fields of computational biology and systems biology. To come up to this problem, network alignment based on evolutionary cross-species comparison provides a valuable framework (). Despite the existence of many network alignment tools such as PathBLAST (), NetworkBlast (NB;), Natalie 2.0 () and AlignMCL (), the developments of faster and more efficient tools are of significance to cope with the rapidly growing biological data. Network alignment aims at finding one-to-one or manyto-many node mapping tables by comparing networks based on information from sequence similarity, topology conservation, co-expression, co-evolution, etc. Nodes that are grouped into a same cluster in a node-mapping table constitute an equivalence class. Each equivalence class must bear at most one protein from each species in one-to-one tables, whereas it might receive more than one node from a same species in many-to-many tables. Generally, network alignment algorithms are categorized into pairwise and multiple network alignments according to the number of compared species (), and into local and global network alignments according to its target regions of interest. Pairwise approaches align two networks and multiple approaches three and more networks. Local alignment approaches detect node mapping tables for conserved subnetworks, which are usually independent and high-scoring local regions, each implying a putative functional module such as a protein complex () or metabolic pathway (). Global alignment approaches determine an optimal global node mapping table for the compared networks (), each set of matched nodes (i.e. proteins) implying a putative function-oriented ortholog group. Typically, pairwise global alignment methods attempt to provide one-to-one mapping tables including NETAL (), MI-GRAAL (), H-GRAAL (), SPINAL () and MAGNA (). Multiple global alignment and pairwise/multiple local alignment attempt to give many-to-many mapping tables, such as SMETANA () and NetCoffee (). The scope of this paper focuses on the problem of multiple local alignment. *To whom correspondence should be addressed.  The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.comBoth in silico and in vivo studies suggest that functional modules of organisms tend to be conserved during the evolution history (). Grounded on this hypothesis, local network alignment provides a general computational framework that searches for high-scoring conserved subnetworks to detect functionally conserved modules. The developments of local alignment tools or web servers have become a quite active field in the last decade. The most notable pairwise local alignment tools include PathBlast (), MaWISh (MW;), NetworkBlast (), AlignNemo (AN;) and NetAligner (). Just a few multiple local alignment tools have been developed. The currently existing multiple local alignment tools include Graemlin (), CAPPI () and NetworkBlast-M (NBM;). In addition, there are also some works trying to detect functionally conserved modules by using a combination of clustering algorithms and global alignment algorithms, such as PINALOG (). See more information about existing local and global network alignment tools in the supplementary material. The currently existing multiple local alignment tools are concerned with three major issues. The first one is the scalability. To date, CAPPI has been applied to the analysis of three networks and only compatible with particularly designed data. NBM is unable to run on networks containing nodes with a large vertex degree (). Thus, the scalability of these tools is at a modest level. Another issue is the evolutionary relevance of the reported hits. To answer the question of how conserved modules of descendants have been evolved from their origin, the scoring schemes shall be more strongly rooted in an evolutionary model (). But, neither the evolution history nor a probabilistic model of network growth was considered by Graemlin and NBM. The third issue is speed. The problem of aligning multiple networks is computationally intractable. Parallelization techniques can largely speed up local alignment algorithms because each target of interest can be searched by a single thread. Yet, none of the existing multiple local alignment tools support parallel computing. To remedy these limitations, we developed a fast and scalable alignment tool LocalAli (LA) for the identification of functionally conserved modules in multiple networks. A new framework was firstly proposed for the inference of the evolution history of functional modules based on a maximum-parsimony evolutionary model. By relying on this model, LA facilitates the interpretation of resulting local alignments in terms of conserved modules that have been evolved from a common ancestral module through a series of evolutionary events. To evaluate the performance, LA and four previous algorithms were tested on 26 real datasets and 1040 random datasets. We assessed the quality of the alignment results in terms of coverage, consistency, prediction of protein functions and prediction of protein complexes. The results show that LA outperforms all previous algorithms in terms of coverage, consistency and scalability, meanwhile retains a high precision in predicting functionally coherent subnetworks (FCS). Moreover, LA is also preferable to the state-of-the-art algorithm NBM in predicting protein functions and protein complexes.
DEFINITIONSWe use attributed undirected graphs fG 1 ; G 2 ;    ; G k g to represent k proteinprotein interaction (PPI) networks. Each graph G i  V i ; E i ; A i  corresponds to a species, where V i represents all the proteins, E i is the collection of interactions and A i : V i !S  is a labeling function that assigns protein sequences to their nodes. Further, a set of  k 2  bipartite graphs B ij  V i [ V j ; E ij  can be constructed by joining pairs of proteins between V i and V j if their sequences are sufficiently similar. To be clear, we refer to elements of E i and E ij as interactions (solid lines in) and edges (dashed lines in), respectively. A set of k proteins, each from one species, which are connected by edges is termed as a k-spine (), such as fA X ; A Y ; A Z g in. And a set of d k-spines connected by interactions form a d-subnet, such as the four k-spines in. Proteins that participate in a common structural complex or metabolic pathway are called functionally linked (). These groups of functionally linked proteins are functional modules. Local network alignment aims to detect high-scoring d-subnets that imply putative functional modules of the compared species, such as protein complexes. These d-subnets might be manyto-many node mapping tables because two k-spines within a d-subnet could probably overlap. In contrast, global network alignment aims to determine a best overall node mapping (i.e. with the highest alignment score), which consists of a set of mutually disjoint match-sets (). Each match-set contains a group of proteins (! 2) and is considered as an equivalence class.3 METHODS
OverviewTo identify functionally conserved modules from multiple networks, we proposed an evolutionary-based local alignment algorithm to heuristically search for high-scoring d-subnets with the information of interactions, homologous proteins and phylogenetic trees. First, the method constructs a set of k PPI networks and bipartite graphs with interactions and homologous proteins. These networks and bipartite graphs are integrated into a k-layer graph () as illustrated in. Then, it heuristically searches for a set of refined seeds using a seed-and-extend approach () from the k-layer graph and extend them with a local search strategy to d-subnets (), which are in a range of predefined minimal and maximal size. Afterward, the k-induced subnetworks of each d-subnet are set as the leaves of an evolutionary tree (see in), which has the same topology and branch weights with its corresponding phylogenetic tree of the involved species (). Under the maximum parsimony principle, the optimal or near-optimal inner nodes (subnet v and subnet w inand c) are found by using simulated annealing (SA) such that the tree receives a minimal evolutionary distance according to our evolutionary model. Finally, an alignment score of each d-subnet is calculated and those scoring less than a threshold are filtered away.
Models of functional module evolution3.2.1 Existing evolutionary models In PPI networks, gene duplication and divergence are most probably the underlying biological mechanism for generating the scale-free topological feature (). Among all existing multiple local alignment tools, only CAPPI uses a network growing model (i.e. duplication-divergence) to derive the posterior probabilities of interactions in ancestral PPI networks, whereas other tools are not strongly rooted in an evolutionary model. In addition, there are some other computational models applied to the problem of network history inference, namely, maximum-likelihood () and parsimonious-histories (). Inspired by the latter approaches, we here introduce a similar parsimony-based model that aims to reconstruct the ancestral subnetwork for a set of conserved subnetworks. This model is designed based on a hypothesis that proteins that function together in a pathway or a structural complex are likely to evolve in a correlated fashion (). It means that proteins of functional modules tend to be either preserved or eliminated all together during the evolution of the whole PPI network from their common ancestor. Unlike Dutkowski's algorithm (), which gives a global view of the evolution of the whole networks, LA provides a new framework to reconstruct the evolution of conserved subnetworks.
The evolutionary tree To elucidate the phylogenetic relationships of functional modules, we use a binary tree to model the evolutionary process (see examples in). In this tree, external nodes, which are also called leaves represent the observed functional modules of our compared species. Internal nodes represent the corresponding functional modules of the predecessor species. The root represents the corresponding functional module of the original species.
Evolutionary events and distancesEvolutionary events are the basic building blocks of network evolution, and evolutionary distance describes how far a descendant subnetwork goes away from an ancestral subnetwork. To infer the evolution history, it is necessary to introduce the definition of evolutionary event and distance. Pellegrini's investigation and the scale-free topological features show that duplication and divergence are the major driving forces of network evolution (). Taking these evidences into consideration, we attempt to understand the evolution process using the following four types of evolutionary events:(1) Protein mutation: The sequence change of two proteins in two species;(2) Protein duplication: The duplication of a protein in an offspring species;(3) Interaction deletion: The loss of an interaction from one network to another;(4) Interaction insertion: The gain of an interaction from one network to another.be two functional modules. As illustrated in, G s descends from G r according to a. Illustration of the evolutionary model. G r and G s are two functional modules. Proteins are represented by nodes, interactions by solid lines, evolutionary events from G r to G s by dashed arrows. T 1 ; T 2 ; T 3 ; T 4 refer to evolutionary events protein mutation, protein duplication, interaction deletion and interaction insertion, respectively. Suppose t = 1, a  0:2 and = 2, by definition, the evolutionary distance can be calculated as follows:showed that proteins with more interactions evolved more slowly because a greater proportion of proteins are directly involved in its function. In other words, proteins with different number of interactors have different evolutionary rates. Hence, we choose e adegv as the function to calculate the evolutionary rate of a protein v, and e ab as the evolutionary rate of each interaction in the PPI networks (see an example in Supplementary). Consequently, the evolutionary distance function of each evolutionary event is written as follows:S e2Ti e ab t i2 f3; 4g (where T i is the collection of type i events, deg(v) is the number of interactions connected with protein v 2 V r , and are parameters adjusting the evolutionary rates, t is the evolutionary time from G r to G s. The evolutionary distance between G r and G s , fG r ; G s ; M rs , is defined as fG r ; G s ; M rs   S 4 i1 f i G r ; G s ; M rs . We chose proper values for and so that evolutionary distances caused by protein events and interaction events are in balance. Generally, the distances would be in balance if the following two requirements are fulfilled: (i) the evolutionary rate of interaction is similar with that of protein with 2 interactions; (ii) the evolutionary rate of protein is <0.2 when the protein has more than 10 interactions. If is too small, type 3 and 4 events become unwelcome in searching for optimal evolutionary tree because these events would result a larger evolutionary distance. If is too large, type 3 and 4 events become popular because they would not actually make a big effect on the evolutionary distance. For this reason, we tested a series of parameters and chose a  0:2 and b  2:0 for all of our tests because it can make interaction distance and protein distance in balance (see more in Supplementary). We measure the evolutionary time t by the branch weight of the tree as shown in. The topology and branch weight of the evolutionary tree are calculated based on the common tree of the NCBI taxonomy database (). See more information about the tree inand the Supplementary Material.
Reconstruction of ancestral functional modulesTo exactly answer how the extant functional modules evolved in the evolutionary history, the reconstruction of ancestral functional modules becomes a central problem. With this intention, we model it as an optimization problem of finding a series of optimal ancestral subnetworks that yield the smallest distance in the evolutionary tree. Subsequently, we use a meta-heuristic method SA () to find the optimal or near-optimal solution (
The optimization problem Toexplain the descent of the extant functional modules, we estimate their ancestral functional modules (or internal tree nodes) using the maximum parsimony principle (). Under this rule, the evolutionary tree requires the optimal internal tree nodes (i.e. the optimal ancestral functional modules) such that it yields the smallest evolutionary distance of the tree. Let T be the evolutionary tree that includes a set of leavesand its leaves L, the computation of exhaustively searching for the optimal internal tree nodes I  is numerically intractable. Hence, we use a meta-heuristic algorithm SA to detect optimal or near-optimal answers. Annealing is known as a thermal process for obtaining a minimum energy state of solid in a heat bath, which includes two steps: (i) raising the temperature to melt the solid metal; (ii) decreasing the temperature in a proper strategy so that the inner particles arrange themselves in a state of lower energy. For each observed d-subnet, the SA approach starts with a series of non-interaction subnetworks as the initial internal tree nodes and specifies the initial temperature to its maximum (see the pseudocode in the Procedure S7). Let x  e 0 ; e 1 ; e 2 ;    be a series of binary variables that represent the appearance of interactions in the inner nodes. Then, x can describe the current state of the evolutionary tree. For instance, the initial state can be written as x 0  0; 0; 0;    since the absence of interaction in all ancestral modules. Then, we use x as our objective function X i;j fP i ; P j ; M ij d ij. In the following phase, we diminish the temperature and repeatedly perturb the current state x with a Metropolis scheme () using p i / exp x=sT i  as the Boltzmann probability distribution (). It is noted that it allows the alteration of only one interaction from one state x j to its neighbor state x j1 (i.e. jx j  x j1 j  1). This process continues until the temperature T i decreases to T min. Eventually, all the internal nodes I  are reconstructed according to the final solution x . A more detailed workflow of this method is described in the Supplementary Material.
Search for high-scoring d-subnetsTo search for high-scoring local alignments, it is necessary to find a suitable scoring scheme that assigns each d-subnet an alignment score. The alignment scores reflect the fit of d-subnets to functionally conserved modules.
Scoring functionWe introduce a scoring function that can foretell how likely a d-subnet could be functionally conserved modules. As mentioned before, each d-subnet can be put an evolutionary distance. However, it is not enough to calibrate d-subnets of various sizes because the evolutionary distance of a d-subnet tends to be linearly related to the number of k-spines within it. Supplementarygives the distance of 48 364 d-subnets sampled from our datasets. However, it is obvious that functional modules are not biased toward the one of a bigger size. So, we assigned each d-subnet an alignment score in the following way. Let U be a d-subnet, which includes a set of d k-spines and k induced subnetworks of the PPI networks. Regarding the k subnetworks as the leaves L = fP 1 ; P 2 ;    ; P k g of the evolutionary tree T, we set the scoring function for the d-subnet U asHence, the score of each d-subnet is a positive value that indicates the fit of the observed d-subnet to a certain conserved functional module. The distribution of alignment scores for d-subnets sampled from our datasets is given in Supplementary Figures S4S6.
Searching algorithmUsing the scoring function, the problem of identifying conserved functional modules is reduced to the problem of searching for high-scoring d-subnets. However, the task of enumerating all d-subnets is computationally hard () because the complexity of the fastest known algorithm is On kd . Hence, we use a widely used heuristic approach seed-and-extend (). Although the method does not reduce the complexity of enumeration, it practically reduces the computational time. Let G H = fV H ; E H g be a k-layer graph, where V H  [ k i1 V i and E H  [ i;j E ij [ E i  (see an example in). The pseudocode of our searching algorithm is described in Algorithm 1. To find a k-spine around a given node in G H , we adapt an efficient subgraph searching algorithm ESU () to our implementation. In the ESU algorithm, each k-spine can be accessed by a starting node because its nodes are visited in a fixed order, but several k-spines might have a common starting node (see more in Procedure S1 and S3). As the beginning of our search, we collect all starting nodes (line 1). Then we search for a set of strongly connected small d-subnets as refined seeds (line 2). Subsequently, each refined seed is extended to a d-subnet of a size between minSize and maxSize by using local search (line 611). Lastly, the alignment score of each d-subnet is calculated by using SA (line 14), and these d-subnets scoring lower than a threshold value are filtered away (line 1719). More detailed description of our algorithm is provided in the Supplementary Material (Procedure S1S7). Algorithm 1 Search for high-scoring d-subnets. 1: startNodes collectStartNodesG H ; 2: refinedSeeds searchSeedsG H ; N; seedSize; 3: m refinedSeeds:size; 4: minSize seedSize  minExt; 5: maxSize seedSize  maxExt; 6: for i : 1 to m do 7: subnet expandSeedG H ; N; refinedSeedsi; ext; 8: if subnet:size ! minSizejjsubnet:size maxSize then 9: subnetList:push back subnet; 10: end if 11: end for 12: n subnetList:size; 13: for i : 1 to n do 14: x  simulatedAnnealingsubnetListi; T; 15: d subnetListi:size; 16: score d=x  ; 17: if score > threshold then 18: output subnetListi; 19: end if 20: end for
RESULTS AND DISCUSSION
Test dataAll experimentally determined interactions of five species were collected from the IntAct database () as the test data of our evaluation (downloaded on February 10, 2014). The five species were Homo sapiens (hsa), Caenorhabditis elegans (cel), Drosophila melanogaster (dme), Saccharomyces cerevisiae (sce) and Escherichia coli (eco). The protein sequences were downloaded from a reviewed and manually annotated database, UniprotKB/Swiss-Prot (). All-against-all protein sequence similarities were calculated with the program BLASTP (), and these with E-value 1:0e 7 were selected as homologous proteins. The phylogenetic relationship of the five species was obtained from the NCBI taxonomy database (). With the real-world knowledge of the five species (), we performed LA and several existing algorithms on 26 real datasets including all possible combinations of the test species. To test the statistical significance of our alignment results, LA were also tested on 1040 random datasets (40 random k-layer graphs for each combination). All these random k-layer graphs remained the same number of interactions and edges as the real k-layer graphs. Moreover, high-quality associated Gene Ontology (GO) annotations which were downloaded from the Uniprot-GOA database (on March 14, 2014) and a reference dataset CORUM () were used to help assess the biological quality of the results.
Experimental setupWe implemented LA in C++ using the LEMON Graph Library () version 1.2.3 and OpenMP (). The implementation supports multicore parallelism in the search for high-scoring d-subnets. LA provides many user-specified parameters that are used to determine the topological feature of target regions and the scoring scheme, such as seedSize, minExt, maxExt, and. The default values are now seedSize = 2, minExt = 3, maxExt = 13, a  0:2 and = 2.More elaborate information about the other specific parameters is described in Supplementary Table S1. We first performed LA 20 times with a single core, and then ran it 20 times again with 16 cores in parallel on each real dataset. The best, average and worst results were applied to assess the performance. NBM was subsequently performed on the same datasets with the extension scheme of relaxed order. In addition, three pairwise local alignment tools NetworkBlast, AN and MW were applied to all of our 2-way alignments. However, another two multiple local alignment tools Graemlin and CAPPI were not taken into consideration in our assessment, as Graemlin did not compile successfully (the current available version is outdated), and CAPPI was only compatible with particularly designed data. For a fair comparison, the solutions that were highly overlapped (i.e. >0.5) were filtered out after the search for high-scoring d-subnets (see more in the Supplementary Material). All experiments mentioned in the following parts were carried out on the same machine, an Intel(R) Xeon(R) CPU X5550 with 2.67 GHz.
Cross-validationWe assessed the quality of the alignment results in four ways: coverage, consistency, prediction of protein functions and prediction of protein complexes. Coverage indicates the amount of input data the algorithm can explain. Consistency implies the functional coherence of identified d-subnets. Our goal is to find a series of d-subnets that have good consistency while reporting as many d-subnets as possible (i.e. a high coverage) within reasonable time. Consistency can be well accomplished by sacrificing coverage and vice versa. Further, to determine how much our alignment results agree with known biological knowledge,LA was also applied to predict protein functions and protein complexes. Finally, we compared the performance of the alignment tools in terms of scalability and running time.
Coverage and consistencyThe coverage was measured in two ways. First, we measured it by the number of reported d-subnets (or hits) after the elimination of redundant solutions. Second, the coverage was measured by the percentage of proteins value (PPV), which calculated the percentage of proteins covered by the identified hits over all the proteins. We performed functional enrichment analyses based on GO annotation data () to assess the functional coherency of each subnetworks in the reported hits. A powerful package GO-TermFinder () was used to calculate the statistical significance of GO annotations. Those subnetworks that had one or more enriched GO terms (i.e. corrected P-value 0.01) were regarded as FCS and likely to be functional modules. Therefore, we measured consistency by the number of reported FCS and the portion of FCS over all identified subnetworks (i.e. precision). All the results of the 26 real datasets including 10 two-way alignments, 10 three-way alignments, 5 four-way alignments and 1 five-way alignment were analyzed as shown in Tables 2 and 3 and SupplementaryS27. In comparison with NB, NBM, AN and MW, LA basically outperformed all existing algorithms in the aspect of coverage. As shown in Supplementary Table S3, for instance, LA reported 477, 408 and 348 hits in the best, average and worst case in the two-way alignment of hsa-cel, while merely 367160 and 252 hits were reported by NB, NBM and MW. The worst PPV value of LA was also upto 10.8%, which was obviously more advanced than that of other algorithms. This was not a unique instance in the 10 two-way alignments as shown in Supplementary Tables S5S11. However, LA reported less hits than NB, NBM, MW in the two-way alignment of hsa-dme. The reason was that the threshold of the alignment score was too high for this dataset. More than 90% d-subnets were filteredNote: The five species Human, Worm, Fruit Fly, Yeast and E.coli are reperesented by A, B, C, D and E. The five algorithms LocalAli, NetworkBlast, AlignNemo, NetworkBlastM and MaWISh are shortly represented by LA, NB, AN, NBM and MW, respectively.), the hsa-dmeeco (Supplementary) and the four-way alignment of hsa-cel-dme-eco (Supplementary). NBM failed to report any hit in many other multiple alignments such as the three-way alignment of hsa-dme-sce (Supplementary) and hsa-sce-eco (Supplementary) because of its limited scalability. In the aspect of consistency, LA identified much more FCS than NB, NBM, AN, MW in both of the pairwise and multiple alignments, meanwhile retained a high precision. For instance, LA found 1628, 1535 and 1402 FCS in the best, average and worst case in the hsa-eco alignment (Supplementary), whereas only 5, 31, 81 and 79 were found by NB, AN, NBM and MW, respectively. Meanwhile, the worst success rate of identifying FCS was also upto 99.4%, which was higher than all other algorithms (the AE alignment in). Similar results could be found in many other pairwise alignments such as the hsa-eco alignment (Supplementary), the cel-dme (Supplementary) and the cel-sce (Supplementary). In the alignment of multiple networks, it showed that LA had a competitive advantage in FCS over NBM, as well as a comparable precision. For example, it resulted 360 FCS in the worst case of the hsa-dme-eco alignment (Supplementary), which was five times as many as these reported by NBM. At the same time, it got the same average precision with NBM (the A-C-E alignment in). More importantly, LA successfully aligned many datasets, such as the hsa-cel-sce (Supplementary) and the hsa-dme-sce (Supplementary), in which NBM, however, reached its limitation. NBM nevertheless got a higher precision than LA in the cel-dme-eco alignment (Supplementary).LocalAli (cel) th=0.5NetBlastM (dme)NetBlastM (cel). Ten-fold cross-validation for function predictions on the cel-dme alignment using LA and NetworkBlast-M (NetBlastM). The parameter of threshold (th) is used to filter out d-subnets with a lower alignment score 6.35%. They increased to 2.26 and 7.67% when th = 0.5. To sum up, we can conclude that LA, in comparison with NBM, is more precise in the prediction of functional annotations, and the higher-scoring d-subnets are more favorable for the prediction of protein functions.
Validation of predicted functional modulesTo validate the predicted functional modules, we collected a benchmark set of protein complexes that belonged to hsa as annotated in CORUM (). Overall, there were 1283 protein complexes consisting of three or more proteins in our benchmark set. Then, we compared these identified conserved subnetworks with the benchmark set of complexes. Let S represent proteins of a conserved subnetwork, C be proteins of a known protein complex. We will consider S to be a successful prediction of C if and only if two requirements are fulfilled: (i) jS \ Cj ! 3; (ii) jS\Cj max fjCj;jSjg ! 0:2. If S corresponds to a protein complex in CORUM, it will be a pure module. As a result, NBM successfully recognized 29 pure modules from the human PPI network with a success rate of 11.9%. In contrast, LA recognized 55.8 pure modules on average with a success rate of 17.4%. It indicates that LA is more accurate than NBM in recognizing biologically meaningful modules.
ScalabilityScalability is a bottleneck problem that limits the applications of existing alignment tools. Many pairwise alignment tools attempting to search for strongly connected subgraphs in an alignment graph are difficult to extend to multiple networks because alignment nodes in the graphs will grow exponentially when the number of networks increases. In comparison with other algorithms in our tests, LA demonstrated the best performance in the aspect of scalability. It was the only algorithm that favorably ran on all the 26 datasets. However, NBM encountered its limitation when some network had a protein connected to a large number of other proteins, such as PPI networks of sce in.
Running time Parallelizationis a key technique that enables LA to speed up. We first performed LA on each real dataset 20 times with a single core, and then ran it 20 times again with 16 cores in parallel. In comparison with NB, NBM, AN and MW, LA was the most favorable alignment tool in the pairwise alignments. As shown in Supplementary Tables S3S12, LA finished all the pairwise alignments within several minutes ( 3) using a single core. The parallelism yielded a speedup of LA. Generally, it could be three to six times faster in the pairwise alignments. In contrast, NB spent about 5 h on the hsa-cel alignment, 10 h on hsa-dme, >24 h on hsa-sce and 0.5 h on dme-sce. MW spent 15 min on hsa-dme, 26 min on hsa-sce. Although, NB, NBM, AN and MW were faster than LA in some alignment such as hsa-eco and cel-eco, they accomplished the advancement with a serious sacrifice of coverage. In the multiple alignment, NBM was faster than LA in many cases but with a smaller number of reported hits and a limited scalability (Supplementary Tables S13S27).
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
J.Hu and K.Reinert at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
LocalAli at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Moreover, we executed LA on random datasets of each possible combination of input species to verify the statistical significance of our results. As a result, we found all these data about hits, FCS and precision were non-random and statistically significant. As shown in Supplementary Figures S7S16, the random results (blue triangles) were far away from the realworld data (red points). It indicated that these results of hits and FCS in real-world data were unlikely to happen in the random data. Further, we found most of the red points stand quite close to the oblique line, while the blue triangles were far away from the line. This evidence implies that precision is also statistically significant because the closer the points are, the higher precision they have. There is no figure illustrating multiple alignments of the random datasets, since LA can hardly find any d-subnet in multiple alignments of random datasets. 4.3.2 Prediction of protein functions Proteins that function in a pathway or structural complex are functionally related. It spontaneously leads us to the tentative functional assignments, which can be called by applying the method of annotation transfer (Sharan, 2005). Given a set of proteins, we predicted new protein functions whenever all the following four requirements were fulfilled: (i) the set of proteins was significantly enriched for a particular GO annotation (corrected P-value 0:01); (ii) at least three of the proteins were annotated with the GO annotation; (iii) the percentage of proteins annotated with this GO annotation over all characterized proteins was >0.5; (iv) the GO annotation was at a GO level of three or higher in the GO tree. All the remaining proteins will be considered to have the annotation if all the four demands are satisfied. If there are several GO annotations fulfilling the four requisites, just the one with the lowest corrected P-value will be applied for the prediction. According to the four requirements, all the cel-dme alignments that reported by NB, NBM, AN and LA were analyzed for predicting geneassociated ontology with the aspect of biological process. As a result, LA recognized 214.9 predictions of new GO annotations for proteins in cel, 286.2 predictions for proteins in dme in the average case. In contrast, NB reported 26 predictions in cel, 31 predictions in dme; AN found 18 in cel, 55 in dme; NBM found 165 in cel, 229 in dme. To validate the quality of the predicted functions, we estimated the success rate of our predictions using a method of 10-fold cross-validation, in which we equally separated the annotation data into 10 parts, iteratively hid one part and used the remaining data to predict the held-out annotations (Sharan, 2005). The prediction will be considered correct if the protein has some true annotation that lies on a path in the GO tree from the root to a leaf that visits the predicted annotation. According to this rule, the number of correct predictions obtained from NBM and LA were illustrated in Figure 4 on the 10-fold cross-validation. The blue points of LA were much more than that of NBM in the figure since 20  10 samples are plotted. Then, we tried it again after increasing the threshold to 0.5 (th = 0.5) to verify whether our scoring scheme was indeed closer to the truth of biology. As indicated in the figure, LA was preferable to NBM in predicting the correct protein functions with th = 0.4 for both cel and dme, though it also made some false positive points (i.e. these tended to travel to the left upper corner) for cel. In the case of th = 0.5, it was more clear to see that LA had similar number of correct functions with NBM by using less number of predictions. The average success rates of NBM were 1.83 and 5.05% for cel and dme, respectively. They were less than that of LA with th = 0.4, which are 1.96 and
CONCLUSION In this article, we developed a fast and scalable local alignment tool LA to identify functionally conserved modules across multiple species. It overcomes several limitations of existing algorithms by using a scoring scheme strongly rooted in a maximum-parsimony evolutionary model, scaling to multiple networks with tens of thousands of proteins and interactions and parallel computing. By relying on this model, LA can provide an inference of the evolutionary history of observed functional modules with a series of evolutionary events. With a rigorously designed scoring function, we reduced the problem of identifying functionally conserved modules to a problem of searching for high-scoring d-subnets. LA solves the problem in three steps as follows: (i) it searches for a set of d-subnets with a heuristic approach seed-and-extend; (ii) it reconstructs the evolution history of each d-subnets and calculates its alignment score; (iii) it filters away these d-subnets with an alignment score below a threshold. To compare LA with other existing algorithms, we tested these algorithm on 26 real-world datasets and analyzed their output in terms of several criteria. In a short conclusion, LA has a superiority of coverage, consistency and scalability over NB, AN, NBM and MW, meanwhile retains a high precision in identifying functional coherent subnetworks. Furthermore, it predicted >500 new functional annotations for proteins of worm and fruit fly, and identified 55 pure modules, which were known protein complexes that belonged to human as annotated in CORUM. It reported many significant functional modules that were missed by other alignment tools. The results demonstrate that LA provides substantial improvements to multiple local alignment and might give helpful suggestions to the research community that attempts to determine phylogeny, function annotations and functional modules.
