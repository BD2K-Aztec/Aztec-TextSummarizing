We present a suite of UNIX shell programs for processing any number of phylogenetic trees of any size. They perform frequently-used tree operations without requiring user interaction. They also allow tree drawing as scalable vector graphics (SVG), suitable for high-quality presentations and further editing, and as ASCII graphics for command-line inspection. As an example we include an implementation of bootscanning, a procedure for finding recombination breakpoints in viral genomes. Availability: C source code, Python bindings and executables for various platforms are available from
INTRODUCTIONPhylogenetic trees are a fundamental component of evolutionary biology, and methods for computing them are an active area of research. Once computed, a tree may be further processed in various ways (). Small datasets consisting of a few trees of moderate size can be processed with interactive GUI programs. As datasets grow, however, interactivity becomes a burden and a source of errors, and it becomes impractical to process large datasets of hundreds of trees and/or very large trees without automation. Automation is facilitated if the programs that constitute an analysis pipeline can easily communicate data with each other. One way of doing this in the Unix shell environment is to make them capable of reading from standard input and writing to standard outputsuch programs are called filters. Although there are many automatable programs for computing trees [e.g. PhyML (), PHYLIP (, programs for processing trees [e.g. TreeView (), iTOL ()] are typically interactive. Here, we present the Newick utilities, a set of automatable filters that implement the most frequent tree-processing operations. * To whom correspondence should be addressed.
RESULTSThe Newick utilities have the following features: @BULLET no user interaction is required; @BULLET input is read from a file or from standard input; output is written to standard output; @BULLET all options are passed on the command line (no control files);@BULLET the input format is Newick (); @BULLET the output is in plain text (Newick, ASCII graphics or SVG);@BULLET there are no limits to the number or size of the input trees; @BULLET each program performs one function, with some variants; and @BULLET the programs are self-documenting (option-h).
Example: BootscanningBootscanning () locates recombination breakpoints by identifying (locally) closest relatives of a reference sequence. An example implementation is as follows:(1) produce a multiple alignment of all sequences, including the reference;(2) divide the alignment into equidistant windows of constant size (e.g. 300 bp every 50 bp);(3) compute a maximum-likelihood tree for each window;(4) root the trees on the appropriate outgroup (not the reference);. Bootscanning using PhyML, EMBOSS, Muscle, Newick utilities, GNUPlot and standard Unix shell programs. The species with the lowest distance is the reference's nearest neighbor (by distance along tree branches). A recombination breakpoint is predicted near position 450, as the nearest neighbor changes abruptly.(5) from each tree, extract the distance (along the tree) from the reference to each of the other sequences; and(6) plot the result ().The distribution includes a Bash script, bootscan.sh, that performs the procedure with Muscle () (Step 1), EMBOSS () (Step 2), PhyML (Step 3), GNUPlot (Step 6) and Newick utilities for Steps 4 and 5. This method was used to detect breakpoints in human enterovirus ().
DISCUSSIONThe Newick utilities add tree-processing capabilities to a shell user's toolkit. Since they have no hard-coded limits, they can handle large amounts of data; since they are non-interactive, they are easy to automate into pipelines, and since they are filters, they can easily work with other shell tools. Tree processing may also be programmed using a specialized package [e.g. BioPerl (), APE () or ETE (, but this implies knowledge of the package, and such programs tend to be slower and use more resources than their C equivalents. The difference is particularly apparent for large trees ().
Python bindingsTo combine the advantages of a high-level, object-oriented language for the application logic with a C library for fast data manipulation, one can use the Newick utilities through Python's ctypes module. This allows one to code a rerooting program in 25 lines of Python while retaining good performance (). A detailed example is included in the documentation. Some users will feel more at ease working in the shell or with shell scripts, using existing bioinformatics tools; others will prefer to code their own tools in a scripting language. The Newick utilities are designed to meet the requirements of both.
ACKNOWLEDGEMENTS
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
