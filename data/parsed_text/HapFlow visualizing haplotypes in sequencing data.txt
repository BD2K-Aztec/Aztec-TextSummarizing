HapFlow is a python application for visualizing haplotypes present in sequencing data. It identifies variant profiles present and reads and creates an abstract visual representation of these profiles to make haplotypes easier to identify. Availability and implementation: HapFlow is freely available (under a GPL license) for download (for Mac OS X, Unix and Microsoft Windows) from github
IntroductionThe emergence of high-throughput sequencing has enabled new experimental approaches such as the sequencing of populations of bacteria. Infections frequently contain multiple strains of the same species (). This has important implications for detecting transmission events () and determining treatment outcomes (). Several methods have been developed to analyze mixed-strain populations. ShoRAH () reconstructs a minimal set of global haplotypes and estimates the frequency of inferred haplotypes. It requires variants be dense enough to be linked by overlapping reads. A two-step maximum likelihood approach has also been described to identify the portion of infection rising from dominant and minor strains (). This approach does not rely on variant density but is unable to infer local or global haplotypes. A tool that visualizes haplotypes in sequencing data is needed to identify the best strategy for genomic analysis of multiple strains of the same bacteria within a sample. Many excellent read alignment visualization tools exist including Savant (), Tablet () and Consed (). These tools arrange reads in a linear fashion with each read represented as a line, or row of bases. This layout is satisfactory for identifying variants or misaligned reads, however, is not ideal for identifying haplotypes present in reads. Reads are packed tightly together making it difficult to determine whether distant variants are located on the same read pair. Additionally, reads are not grouped by haplotype making it difficult to identify how frequently a haplotype is represented in the sequencing data. HapFlow addresses these problem by abstracting read alignment data to make the haplotypes present easier to identify. HapFlow can be used to help identify sequencing artifacts, identify the minimum number of strains present in a sample and determine whether defining local or global haplotypes is possible using sequence data alone. file, where each 'flow' is a unique allele profile and a count of the reads with that profile. Flows are then assigned to groups. If all overlapping alleles of a flow are in consensus with a previously defined group, it is assigned to that group. Otherwise, it is assigned a new group number. These groups are used to colour flows when visualized. When multiple chromosomes are present in a BAM file, the user is prompted to select which chromosome to create a flow file for. A complete description of the flow file is included in the manual. HapFlow-viewer displays the created flow file on the canvas of the GUI. A blue bar at the top of the screen represents the genome, an orange rectangle within the blue bar represents the portion of the genome currently being displayed. Underneath, an orange bar with vertical lines represents where the variants are located within the displayed section of the genome. These lines are extended below and spaced an equal distance apart in the area where the flows are viewed. At each variant, each flow covering the given variant is represented by an arrow, with the width of the arrow representing the number of reads the flow contains. The arrows representing each flow at adjacent variants are joined by lines, with solid lines representing variants covered by the same read of the flow and dashed lines representing variants covered by different reads in the pair. Arrows grouped at the top of the canvas represent the most frequently observed allele, the second group of flows represents the second most common allele and so on. The last group represents alleles not identified in the VCF file. This can be caused by potential sequencing, alignment or variant calling errors. All flows in a group are coloured using the same hue; saturation and lightness are randomly assigned. Information about the sequence of each variant is represented underneath the flows. The canvas is scrollable and zoomable allowing the user to easily navigate through whole genomes. Reads can then be separated into individual BAM files by selecting individual flows or group of flows, or by selecting all reads that conform to a user defined haplotype profile.
Case studyTo demonstrate the application of HapFlow, reads from the recent sequencing of a Chlamydia pecorum PCR-positive swab sample collected from the urogenital tract of a koala with mixed C. pecorum infections were analyzed. C. pecorum DNA was extracted directly from the host cell contaminants using Sure-Select RNA probes and sequenced using an Illumina Hi-Seq to produce 101 bp paired-end reads, as previously described (). These reads were then mapped back to a publicly available C. pecorum reference (E58) strain's genome using Bowtie 2 (). Variant calling was performed using FreeBayes () and the resulting data was visualized using HapFlow. Two distinct strains were immediately identifiable in the HapFlow diagram. Variants are also close enough that local haplotypes can be inferred from read data. Importantly, several regions where read coverage in the dominant strain dropped below that of the minor strain were identified (). This was not unexpected as sequence capture is less efficient at cazpturing DNA in areas where the sequence of the strain varies significantly from the probe. This meant that any method of consensus calling that uses a majority call would result in a chimeric genome not representative of either strain. These insights can help with the design of an automated approach for assigning reads to strains. Alternatively, reads can be manually separated using HapFlow.
FundingThis work was financially supported by an Australian Research Council Discovery Grant (DP130102066) and a Queensland Department of Environment and Heritage Protection Koala Research Grant (KRG18) awarded to AP and PT. Conflict of Interest: none declared.. HapFlow diagram of sequencing data from a urogenital tract infection in a Koala mapped to C. pecorum. Flows containing only the dominant variant group at the top, flows containing only the minor variant group at the in the second row, mixed flows switch between top and middle. The bottom row indicates flows containing an alignment or sequencing error. All reads with the most common variant at base 363,598 have the least common variant at base 363,732, similarly all reads with the least common variant at site base 363,598 have the most common variant at base 363,732. This pattern is repeated at sites C and D
Implementation HapFlow is a Python tool that uses the Tkinter windows system (https://wiki.python.org/moin/TkInter). It has been designed for bacterial sequencing datasets of all sizes that use short, paired-end or single-end reads. HapFlow is available as both a Python script and as a binary for Linux, OSX and Windows. It contains two parts: HapFlow-generator, a process for creating a flow file which contains the count of reads with each haplotype profile and HapFlow-viewer, a tool for visualizing the flow file. HapFlow-generator can be executed from the GUI or the command-line. It takes a VCF file (Danecek et al., 2011) of called variants and an indexed BAM file (Li et al., 2009) of aligned reads as input. Pysam (github.com/pysam-developers/pysam) is used to create a profile of alleles present in each read of the alignment. This profile consists of which allele is present at each variant the read aligns to, on which pair each allele is present and the direction of the read. A list of 'flows' is then written to the flow V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 441 Bioinformatics, 32(3), 2016, 441443 doi: 10.1093/bioinformatics/btv551 Advance Access Publication Date: 7 October 2015 Applications Note at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M.J.Sullivan et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
