Motivation: Research in systems biology is carried out through a combination of experiments and models. Several data standards have been adopted for representing models (Systems Biology Markup Language) and various types of relevant experimental data (such as FuGE and those of the Proteomics Standards Initiative). However, until now, there has been no standard way to associate a model and its entities to the corresponding datasets, or vice versa. Such a standard would provide a means to represent computational simulation results as well as to frame experimental data in the context of a particular model. Target applications include model-driven data analysis, parameter estimation, and sharing and archiving model simulations. Results: We propose the Systems Biology Results Markup Language (SBRML), an XML-based language that associates a model with several datasets. Each dataset is represented as a series of values associated with model variables, and their corresponding parameter values. SBRML provides a flexible way of indexing the results to model parameter values, which supports both spreadsheet-like data and multidimensional data cubes. We present and discuss several examples of SBRML usage in applications such as enzyme kinetics, microarray gene expression and various types of simulation results. Availability and Implementation: The XML Schema file for SBRML is available at http://www.comp-sys-bio.org/SBRML under the Academic Free License (AFL) v3.0.
INTRODUCTIONSystems biology is typically carried out with a solid basis on explicit (computational) models, which are used to guide traditional experimentation as well as data analysis. Computational models are at the core of the systems biology methodology, and therefore an important part of the infrastructure needed for practicing systems biology. * To whom correspondence should be addressed.The growing reliance on computational models to support biological research has given rise to several types of modelling software. There are software packages for creation and visualization of models (), for their analysis and simulation () and also for analysing experimental data in their context (). Additionally, there are several databases for sharing models within the community (). The most prominent standard is the Systems Biology Markup Language (SBML;), which is an XML-based language for representing systems biology models in a way that is largely independent from the means to simulate those models. Models represented in SBML are thus interpretable by a wide range of software, which can manipulate them in different ways: simulate their dynamics through ordinary differential equations, stochastic simulation algorithms, Petri nets or other formalisms; analyse their underlying stoichiometric properties; fit their parameters to experimental data; explore their parameter space by parameter scans or bifurcation analysis and many more computational applications. The existence of a standard way to represent models has been a catalyst for the appearance of these diverse types of software, since they have a common basis in SBML, allowing researchers to share models and effectively use them with these software tools. Another important standard in the area is MIRIAM (), which is a set of guidelines to be followed when communicating models. More specifically, MIRIAM provides a means of unequivocally identifying biological molecules [through the use of resource description framework (RDF) and universal identifiers]. MIRIAM also recommends that models should be encoded in a machine-readable format, and that their authorship and terms of distribution should be specified explicitly. While MIRIAM does not prescribe which machine-readable format should be used to encode the model, SBML is a convenient way to do so, and the combination of these two standards has become a predominant way to specify self-contained models (). The Simulation Experiment Description Markup Language (SED-ML;) is another XML-based standardization effort for describing computational simulation experiments. Despite the increasing popularity of SBML and MIRIAM, which has resulted in many models now being available in electronic form, there is currently no standard way of communicating the actual results of the operations carried out on such modelsPage: 933 932938
Systems Biology Results Markup Language(e.g. simulations). Because of this lack of a standardized way to communicate model-derived data, it is very difficult to share such results between different software applications. Such activities have to be done in ways that require ad hoc programs to transform the data formats appropriately. Here, we propose a new markup language which is intended to specify results from operations carried out on models. We name this format the Systems Biology Results Markup Language (SBRML). While developing SBRML as a means of communicating simulation results, it became obvious that it is equally useful to associate any kind of experimental data to a model, something that seems to be missing in the landscape of computational systems biology. SBRML is therefore a means of specifying any kind of quantitative results in the context of a systems biology model. Some of its major uses are:(1) associating experimental results with models for passing to analysis tools;(2) sharing and archiving of model simulations; and(3) recording the results of analysis for validation, archiving or comparison.The rest of this article describes the overall structure of SBRML documents and illustrates a number of use cases that are expected to cover the most common applications. Finally, SBRML is discussed in the context of a more complete scenario of computational activities centered on biological models, and therefore showing its relation with other existing and emerging standards.
METHODSSBRML is based on XML () and is specified through the XML Schema language (). SBRML Object Model (SBRML-OM) was first developed using the Universal Modelling Language (UML; OMG) and a Model-Driven Architecture approach was then used to derive the corresponding XML Schema semi-automatically with the help of mapping rules for classes and associations. In order to test the practicality of data formatting in SBRML, a prototype implementation was created with the software COPASI (). This was done using COPASI's report definition facilities, which allow one to create output in very flexible ways. We do not foresee that this method will be the best one with which to produce SBRML results from COPASI, and we plan to write a full-fledged SBRML output generator in that package. Indeed it is the authors' expectation that in the future many other systems biology packages will provide means for exporting SBRML. Since the main objective of SBRML is to associate data with a model, it therefore needs to provide representations of both the model and the data along with mechanisms to associate parts of the dataset with the corresponding elements of the model. Accordingly, SBRML has two major sections, one representing the model, and the other one describing the dataset. Since there is a plethora of very different types of data that may require specialized terms for their description such as concentration, particle numbers, flux, spectrophotometry, etc., it seemed too restrictive to define a priori a controlled vocabulary of terms (this would either be an extremely long and diverse list or otherwise incomplete). Instead, the solution was to provide a third major section in SBRML that lists ontology terms used in the rest of the document and refers to where such ontologies are defined. This allows the language to be extensible and cover any possible type of data. SBRML-OM top-level classes are shown in. The abstract class SBRBase provides a means of attaching arbitrary information on some elements of SBRML through its association with Annotation and Notes classes. The Sbrml class, which is subclass of SBRBase, has three required +metaid : ID [0.
.1]SBRBase +xmlns : String+level : positiveInteger+version : positiveInteger+creationDate : Date [0.
.1]Sbrml +name : String+sourceURI : String [0.
.1]Model +id : SBRId+term : String+sourceTermId : String+ontologyURI : StringOntologyTerm +anyNote : StringNotes +id : SBRId+name : String [0.attributes: the SBRML namespace, level and version, and an optional attribute creation date. An SBRML document will in many cases be used to encode the results of many operations performed on a single model. All operations carried out on the model are defined within the operations element indicated as an association between Sbrml and Operation classes. The ontologyTerms association between Sbrml and OntologyTerm classes as shown inis an element in the instance of Sbrml (SBRML document), which contains instances of OntologyTerm class.shows the skeleton of systems biology results description in SBRML. The top level classes are described in more detail below.
.1]
Ontology sectionThe use of vocabularies/terms from standard ontology sources to describe various types of data associated with the model is important in order for software tools to correctly interpret the data. There is no single ontology that can provide all the terms needed for the description of the very diverse systems biology data. SBRML provides the OntologyTerm class () as a mechanism for representing controlled vocabulary terms from different ontologies. The id attribute provides a unique identifier for the ontology term. The term attribute stores the term itself, while the sourceTermId is a Page: 934 932938string that is used within the ontology to uniquely identify the concept being referenced. The ontologyURI attribute specifies the unique identifier of the ontology. There will always be some terms that are not yet available in any ontology. Such terms can still be used for data description by using SBRML assigned term identifier and Uniform Resource Name (URN) for the terms. It is highly desirable that the ontologies used are those commonly accepted by the systems biology community, and expressed by their MIRIAM URN (). The fragment of SBRML inillustrates how to use terms from the external ontologies in SBRML.
J.O.Dada et al.
Model sectionSBRML associates data generated from operations with the model variables and their parameter values. The class Model as shown indefines the model used in the operations. The model must have a name attribute. The sourceURI attribute defines the source of the model. If the sourceURI attribute is not specified, the actual SBML representation of the model (see Model association to Sbml class in) must be carried within the instance of Model (inline). Providing a reliable way of accessing the model is important since an SBRML document is intended to be interpreted in the context of a particular model. An SBRML document without an associated model is therefore not a valid SBRML document. The inline representation of the model is more reliable since the model and the data are contained within the same file and therefore will never become separated. Additionally, when the source URI of model is used, there is always a possibility that the model may become incompatible with the data due to external changes to the SBML model, or that the model is no longer available. On the other hand, the inline representation is less practical with respect to the space and time needed to store or exchange the files. We recommend that a URI be used when the model is available in a reliable and strictly regulated repository (such as BioModels); in other circumstances it would be more prudent to include the SBML model inline within the SBRML.
Results sectionAs mentioned earlier, an SBRML document will in many cases be used to encode the results of many operations performed on a single model. An operation is defined as an object of the Operation class (). The id attribute is a unique identifier for an instance of Operation. The association to OntologyTerm defines the name of the instance of the Operation in an external ontology source. An operation is characterized by a method, which is associated with a particular piece of software (in the case of simulation this is the simulator software and in the case of experimental data this may be the data acquisition software). The Method and Software classes define the method and software, respectively, that are used by the operation. The actual results of the operation performed on the model are defined in the Result class, and described in detail below. The SBRML fragment inillustrates how to encode the operation performed on model. The Result class () provides a flexible structure for associating the data generated by an operation with the model. The actual result is defined by the ResultComponent class. The result in SBRML has two component parts: the description of the result represented by an abstract class DimensionDescription and the result itself defined by the abstract class Dimension. There must be at least one instance of ResultComponent in an instance of Result. The instance of ResultComponent is uniquely identified by an id attribute. The DimensionDescription describes the structure of the ResultComponent and has three subclasses: CompositeDescription, TupleDescription and AtomicDescription. CompositeDescription describes +id : SBRId+term : String+sourceTermId : String+ontologyURI : StringOntologyTermWhere results contain structured components that are not represented as distinct dimensions, the structure is described using the TupleDescription, which has an implicit relationship to Tuple. Any result that is described by an instance of TupleDescription must be placed in an instance of Tuple. An instance of TupleDescription must have at least one instance of AtomicDescription, and only one instance of TupleDescrption is allowed within the instance of CompositeDescription. The id and name attributes inherited from the super class are optional for this class. AtomicDescription is used to describe a value in a result that can no longer be subdivided. It has an implicit relationship to AtomicValue. Any result that is described in the instance of AtomicDescription must be placed in the instance of AtomicValue. It has a required valueType attribute that defines the type of data contained in the instance of AtomicValue. It is sometimes useful to think of data as a set of numbers indexed in an array. A spreadsheet is an instance of such structure in two dimensions. In three or more dimensions we have so-called data cubes. In SBRML, the Dimension class (within a ResultComponent) allows us to describe the model element that is being used to index one of the dimensions of such data structures. For example, a time course is usually a 2D data structure, which associates species concentrations or particle numbers with discrete
Systems Biology Results Markup Language+id : SBRId+term : String+sourceTermId : String+ontologyURI : StringOntologyTerm +indexType : DataTypeCompositeDescription +valueType : DataTypeAtomicDescriptionNote: Aggregation relationship is only to one subclass at a time (i.e. choice from any of the subclasses). An instance of CompositeValue must contain one instance of Tuple or one instance of AtomicValue or at least one instance of CompositeValue (recursive aggregation). The last content of the instance of CompositeValue must be either an instance of Tuple or AtomicValue.values of time. In this case, the link between the data and the model are the species identifiers. The time course data is thus indexed by time and by species identifiers. Each discrete value of time identifies a set of species concentrations, which correspond to the state of the system at that particular time value; a species identifier provides a further index to the concentration of the corresponding species at that time value. If both concentration and particle number of a species are to be encoded together, the species identifier indexes a tuple that is used to structure those two items, rather than a single number. The indexing mechanism is provided by the indexValue attribute. The value of this attribute in an SBRML document provides an important link between the data, model variables and model parameter values. The Dimension uses three subclasses: CompositeValue, Tuple and AtomicValue to structure the data as shown in. Section 3 provides various examples of how the Result model can be used to encode different types of systems biology data. It is common to express experimental results associated with some measurement of error. SBRML allows for this by including one, or several, error estimates as a specific AtomicValue entries.
Result
Dimension
RESULTSIn this section, we provide examples of SBRML usage which fall under two main types: output from systems biology modelling software, and input to systems biology data analysis software. The first type includes essentially simulation results, while the second associates experimental data with models. These examples illustrate the breadth of applications that can be addressed by SBRML. The examples also cover the two different ways of structuring data, tuples and data hypercubes, indicating the situations where each one is more appropriate.
Example 1: a single steady state calculationThis is one of the simplest applications of SBRML as a means of formatting output from a simulation. The SBRML example inencodes the results (species concentration and reaction fluxes) of a steady state solution of model number 68 () in the BioModels database (). The first ontologyTerms section file starts by defining the concepts of 'steady state', 'Newton method', 'concentration' and 'flux', which are used subsequently in the file. The model is referenced with the appropriate BioModels URN. Only one operation is specified, which is a steady state calculation, and it is associated with two resultComponent elements. The first resultComponent contains the steady state concentrationof the only variable of this model (Phser). The second resultComponent contains values of the fluxes of three reactions (v1, vCys, vThr). Both resultComponents are presented as tuples (name, value). Note that the numerical data is always associated with the identifiers from the SBML model. This allows anyone to interpret these numbers within the appropriate context. Together, the original SBML file and this SBRML file completely specify the model, the simulation carried out and the results obtained.
Example 2: a time course simulationA time course simulation is a description of the evolution of the variables of a system (concentrations of chemical species, fluxes, etc.) for increasing values of time. If one considers time to be a parameter of the model, then a time course can be naturally described as a series of states of the system indexed by the parameter time. The SBRML fragment inshows the results of a time course simulation of model number 68 of BioModels. In this case the data are presented as a series of tuples indexed by values of time. Each tuple represents the concentration and the particle number of Phser, the only variable chemical species of this model. The Supplementary File example2.xml gives the complete SBRML document for this example.
Example 3: enzyme kinetic dataSBRML is not limited to representing results of simulations, it is also useful for connecting experimental results to a systems biology model. This example illustrates the use of SBRML to represent data from an enzyme kinetics experiment which is here associated with a model of the enzymatic reaction carried out in the experiment. Data are from, where the enzyme glyoxalase I (EC 4.4.1.5) of Saccharomyces cerevisiae was assayed in a progress curve analysis. The data are thus similar to Example 2, whereby time is the varying parameter. In this case, however, eight time courses are represented, each one for a different value of the concentration of substrates and products. Each time course is included as a single resultComponent (see SBRML fragment in). Since the data were obtained through spectrophotometry, the SBML model includes the appropriate rule defining the absorbance at 240 nm as a product of the concentration of the product SDLGSH by its molar absortivity coefficient, making it explicit in the model the assumption made of how light absorption relates to the concentration of one of the chemical species. Note that the complete SBRML file for this example (see Supplementary File example3.xml) includes the SBML file inline as it is not available in a persistent repository.
Example 4: microarray dataA major data source in functional genomics often used in systems biology (e.g.) consists of measurements of RNA with microarray technology. In this example, we illustrate the use of SBRML to representmicroarray data. The example includes the levels of expression of the genes encoding all enzymes of the pentose phosphate pathway in S.cerevisiae in different samples of an experiment available from the GEO database (a Pyocyanin dose-response, accession GDS2522,). The data are referenced to an (inline) SBML file of the pentose phosphate metabolic pathway which was obtained as a subset of the metabolic reconstruction of yeast in (). This file associates the gene expression levels of the various experiments with the (enzyme) modifiers of each reaction of the metabolic pathway. This connection between RNA levels and enzyme levels is, therefore, an assumption that is made explicitly in this SBRML file. SBRML is therefore a suitable means to declare such assumptions in a machine-readable format. Note that the SBML model in this case is annotated with MIRIAM-compliant () RDF annotations for each molecule represented.shows an SBRML fragment of this example, the entire file is given as Supplementary Material.
Example 5: complex parameter scanParameter scans (or sweeps) are operations where many simulations are carried out where the values of several parameters of a model are changed in a regular pattern. This type of application is suitably represented as a data hypercube (sometimes referred to as a multidimensional spreadsheet). Again model number 68 of BioModels is used and in this case a series of simulations study the effect of the concentrations of cysteine (Cys) and S-adenosylmethionine (AdoMet) on the steady state fluxes of cystathieonine gamma-synthase (vCys) and threnine Synthase (vThr) as described in the original work (). This forms a 2D parameter scan, and therefore a 3D table is the most natural way of structuring the results. Alternatives to this would be to provide a single table where some of the columns would repeat the same value many times. The SBRML schema Page: 937 932938provides an easy way to represent this data cube simply by indexing the results (fluxes) with each of the varying parameters as shown in the SBRML fragment in. The Supplementary File example5.xml gives the complete SBRML document. While parameter scans change values of parameters in a regular pattern, parameter sampling changes values of parameters using random distributions. This means that there is no regularity in those values and, therefore, they are not appropriate for indexing results in a data hypercube fashion. For parameter sampling, it is most appropriate to represent the data as tuples.
Systems Biology Results Markup Language
DISCUSSIONIt is often emphasized that one of the main characteristics of systems biology is the combined use of experiments and models (). Several standards already exist to express various aspects of systems biology in computational terms, such as Functional Genomics Experiment () for functional genomics data, the SBML () for network and kinetic models or BioPAX (BioPAX Working Group, 2008) for pathways. It is remarkable, however, that until now there have been no attempts at creating a standard way of computationally linking data with models. If systems biology is indeed to succeed as an integrative wet and dry biology exercise there must be a standard way to create associations of data with models. We see two major uses for this: (i) expressing results of computational manipulations of models (e.g. simulations) and (ii) expressing experimental results in the context of a model, mathematical or otherwise. We have used the COPASI simulator to create the simulation results here, and since we are part of the development team of that software, future versions will provide easy means to export results in SBRML. But for this to be a successful exchange format insystems biology, it is important that other simulators provide similar capabilities, as well as other types of systems biology application including data analysis workflows, databases, etc. On the other hand, it is also important that relevant applications be capable of reading (and interpreting) SBRML. Given that SBRML is too verbose for being readable by humans (even very dedicated computational systems biologists), we foresee the need for user-friendly SBRML readers. Such applications could format the data from SBRML in tables or data hypercubes or provide graphical displays of the data. Network visualization software such as CellDesigner (), CytoScape () or Ondex () would seem to be particularly appropriate for interpreting and displaying the contents of SBRML files. Example 4 illustrates a type of SBRML file that would benefit from being displayed in such applications. Data analysis software would also benefit from this format, such as applications for parameter estimation demonstrated with Example 3 (in this context, COPASI would also benefit from being able to read SBRML for parameter estimation). As well as complementing SBML, SBRML can also be seen to complement experimental data standards, such as FuGE () or MAGE-ML (). Experimental data standards essentially describe samples, the experimental and analytical processes applied to those samples, and the results of those processes. As such, experimental data standards describe how results are derived from an experimental process, whereas SBRML indicates how results have been derived from an SBML model by Page: 938 932938
J.O.Dada et al.inter-relating the model, the analytical process applied to the model and the results of the process. SBRML and SED-ML are also complementary. While the main purpose of SBRML is to encode the simulation results and/or experimental data and all context in which it was obtained, SEDML is used for a detailed description of the operations that generate simulation results. This means SED-ML could be used for a detailed description of the specific operations that led to the data in SBRML. One way to achieve this might be the inclusion of an SED-ML container in an SBRML file in similar way to SBML container in 'model' element of SBRML. We will look into this approach and other possible ways to combine SED-ML and SBRML in the future. Note that while SED-ML would be a perfect solution to describing computational operations, it does not provide any support for describing 'wet' experiments and thus SBRML still needs a mechanism for this purpose, which makes their integration not trivial. It is our conviction that SBRML fills a current need in systems biology. We hope that this document and the SBRML specification stimulate discussion and implementations of this standard among the systems biology community.
The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
