RIPPER is a framework for mass-spectrometry-based label-free relative quantification for proteomics and metabolomics studies. RIPPER combines a series of previously described algorithms for pre-processing, analyte quantification, retention time alignment, and analyte grouping across runs. It is also the first software framework to implement proximity-based intensity normal-ization. RIPPER produces lists of analyte signals with their unnormalized and normalized intensities that can serve as input to statistical and directed mass spectrometry (MS) methods for detecting quantitative differences between biological samples using MS.
IntroductionBiological studies using liquid chromatography (LC) and highresolution mass spectrometry (MS) have the potential to aid the investigation of molecular mechanisms by discovering biological markers. Two important 'omics research areas utilizing LC-MS are metabolomics and proteomics; both face similar challenges in producing repeatable and reproducible data (). To address these challenges, we recently introduced proximitybased intensity normalization (PIN) (). To implement PIN, we created a new quantitative framework, RIPPER, for label-free quantification (LFQ). RIPPER has since become a valuable in-house tool for new MS-based quantitative method development. Because RIPPER does not rely on analyte identification before quantification, users can process MS1-only data for proteomic MS-based studies and generate an inclusion list for directed MS-based identification. By simply adjusting properties through a graphical user interface, users can also use RIPPER to extract analyte information for metabolomic studies, statistically analyze the results, and conduct further fragmentation experiments on metabolites of interest. Here, we describe RIPPER, a Java-based framework that takes in mzXML files, extracts analyte features from MS1 spectral data and reports validated analyte signal intensities. Because it allows user-specified options and is written in Java, RIPPER accommodates a wide array of users on various platforms (OSX, Window and Linux). Finally, we compare RIPPER to other freely available software, namely MaxQuant (), XCMS () and MZMine (). MaxQuant couples LFQ to identified peptides and proteins and is therefore not suitable to process MS1-only data. Furthermore, MaxQuant cannot process metabolomic data. XCMS is an online service for metabolomic data and is not well suited for proteomic data. MZMine can process both proteomic and metabolomic dataand does not rely on identification prior to quantification. We therefore chose MZMine as a benchmark for RIPPER. We benchmarked RIPPER versus MZMine 2.18.1 using high-resolution metabolomic data and found that RIPPER identified six times as many analytes six times faster (see Supplementary Materials).
AlgorithmsUsing a simple graphical user interface, a user specifies input mzXML files (), output destination, experimental name, and advanced options. RIPPER then employs a series of algorithms for pre-processing, extracting analyte signals, normalization, retention time alignment and grouping analyte signals (). It outputs a comma-delimited file containing analyte signals, and for each, its un-normalized and, optionally, its normalized intensities. This output serves as input to external statistical methods, e.g. Student's t-test, to find statistically significant quantitative analyte differences between biological samples.
Pre-processingRIPPER extracts data from mzXML files using JRAP, Institute for Systems Biology (www.proteomecenter.org/software.php). It then uses a series of previously-described algorithms () for baseline correction using local medians, signal-to-noise thresholding and isotopic peak envelope detection. For each peak envelope, RIPPER constructs a deisotoped peak as a monoisotopic peak m/zsummed peak intensity pair. The result is a list of scans objects, each containing a list of deisotoped, real peaks.
Extract analyte signalsIn LC-MS, analytes elute from the LC column over time based on their hydrophobicity or other physiochemical property. When measured via MS, each analyte generates a characteristic set of isotopically related peaks that forms an extracted ion chromatogram (XIC). A typical analyte XIC contains peak intensities that appear, maximize and disappear over time (). Furthermore, an analyte's abundance correlates well with the area under the curve of its measured XIC (). RIPPER first extracts candidate XIC's by clustering deisotoped peaks along the m/z and time dimensions with user supplied tolerances. Next, RIPPER selects valid XIC's from the candidate XIC set that meet user specified criteria. Finally, we construct an analyte signal peak (m/zintensity pair) for each valid XIC. The analyte signal's m/z is the XIC's apex m/z, and the intensity is the area under the curve using the trapezoidal rule for approximating the definite integral of XIC peak intensities. RIPPER produces a list of valid XIC deisotoped peaks and a vector of constructed analyte signals with their aggregated raw and optionally PIN normalized intensities.
Retention time alignmentRetention time drift due to changes in experimental or physical conditions, (column performance, matrix effects, humidity and so forth), hinders accurate matching of analyte signals across LC-MS runs. To overcome this impediment, RIPPER uses a variant of the dynamic time warping (DTW)-component detection algorithm (). This variant saves memory consumption by using either integer and binary distance matrices rather than double or floating point matrices to align extracted analyte signal's retention times.
Group analyte signals across runsRIPPER uses an analyte signal matching algorithm adapted from the FeatureCluster module available in msInspect (). Our analyte signal grouper takes in multiple analyte signal vectors and selects the vector with the largest number of elements to be the reference model. It then performs a recursive pseudo-hierarchical clustering and DTW to generate a consensus analyte signal map. The map contains analyte signal objects, each with an m/z value, intensity, and a retention time.
Identify analytesFor peptidomic and proteomic applications, RIPPER does not identify peptide sequences associated with m/z values directly. However, researchers can develop a simple R script to match RIPPER extracted analyte signals to peptide and protein or metabolite identifications from external software applications. For metabolomic studies, we recommend further fragmentation experiments and identification via spectral library search.
ConclusionRIPPER is the first framework implementing PIN and enabling the proportionality paradigm for LC-MS compositional LFQ workflows. Also, RIPPER is extensible and, therefore, easily maintained and updated. Finally, we have used RIPPER for numerous LC-MS 'omics experiments, most notably, differential proteomics (directed MS) and metabolomics (tracer analysis) with success. In sum, RIPPER's introduction is an important step in advancing LFQ workflows for investigating molecular machinery and biomarker discovery.
FundingThis research was funded in part by National Institutes of Health, National Science Foundationand the Doctoral Dissertation Fellowship from the University of Minnesota Graduate School. Conflict of Interest: none declared.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
S.K.Van Riper et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
