MpTheory Java library is an open-source project collecting a set of objects and algorithms for modeling observed dynamics by means of the Metabolic P (MP) theory, that is, a mathematical theory introduced in 2004 for modeling biological dynamics. By means of the library, it is possible to model biological systems both at continuous and at discrete time. Moreover, the library comprises a set of regression algorithms for inferring MP models starting from time series of observations. To enhance the modeling experience, beside a pure Java usage, the library can be directly used within the most popular computing environments, such as MATLAB, GNU Octave, Mathematica and R. Availability and implementation: The library is open-source and licensed under the GNU Lesser General Public License (LGPL) Version 3.0. Source code, binaries and complete documentation are available at http://mptheory.
IntroductionSystems biology has been brought to the forefront of life-science research (). At the core of systems biology lies the development of models describing biological systems (). The definition of such models is often a laborious task, which involves the use of numerical, statistical and mathematical analysis (). The Java library herein presented implements a Metabolic P (MP) solution to this task, by combining an initial intuition based on rewriting rules with linear algebra methods and statistical regression. The presented software extends the modeling functionalities provided by MetaPlab, an open-source standalone Java application based on MP theory, that has been firstly released in 2008 (http://mplab. sci.univr.it). With respect to MetaPlab, the library provides the implementation of new regression algorithms and supports new types of MP models (e.g. based on differential equations, both Ordinary Differential Equations (ODEs) and Delay Differential Equations (DDEs)). The MP theory is a mathematical theory introduced in 2004 for modeling biological dynamics (). The letter 'P' comes from Pa  un's P systems, a particular type of computational model inspired to the functioning of biological cells (). MP models inherit from P systems a native similitude with the functioning of a living cell. This closeness permits to define models that are comprehensible (for both mathematicians and biologists) and consistent with the intrinsic structure of the phenomena under examination. The MP theory has been initially defined for modeling metabolic systems, however, it has then been extended along different directions and now it constitutes a framework for modeling any kind of dynamics (). V C The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
Methods and functionalities
Modeling and simulationThe library supports three different types of MP models (see Manca, 2013, Supplementary Material and online documentation of the software for details): MPF models (MP models based on fluxes), MPR models (MP models based on reaction maps) and MPDE models (MP models based on differential equations, ODEs or DDEs). Regardless of the chosen type, every model comprises a set of variables that represent quantities of interest. The evolution of variables is then specified by means of a set of rules collected in an MP grammar, as in the following example: r 0 : ; ! A u 0 : 0:047  0:087  A r 1 : A ! B u 1 : 0:002  A  0:0002  A  C r 2 : A ! C u 2 : 0:002  A  0:0002  A  B r 3 : B ! ; u 3 : 0:04  B r 4 : C ! ; u 4 : 0:04  C;which implements a simple synthetic oscillator, called Sirius (), developed within the MP theory. This uniformity of representation provides important modeling advantages and permits an easy comparison of models that refer to different definitions. In MP grammars each rule is defined by:(i) a reaction, which specifies variable transformation (using standard arrow notation, e.g. 2  H  O ! H 2 O) and (ii) a regulator, which is a formula for deterministically computing the speed of the reaction. In the MP grammar (1) there are five rules over three variables (A, B and C). The first rule introduces matter of type A in the system (input rule), rules one and two apply some transformations and the last two rules expel matter of type B and C, respectively (output rules). Regulators are used during simulation according to different strategies depending on the model type (MPF, MPR or MPDE). The simpler way of considering regulators is that implemented in MPF models, where regulators directly compute the fluxes of rules in the current state. The definition of MP model given above has been widely extended to improve the modeling capabilities of the user. Among the most interesting features there is the possibility of adding parameters and the possibility of specifying delays in regulator formulas. Moreover, Java objects are equipped with a comprehensive Javadoc documentation and they have been designed to maintain the modeling phase simple and consistent with mathematical definitions. The following code defines the MP grammar (1):Once a model has been created, the library is equipped with state of the art simulators for computing the system dynamics, which have been specifically developed within the MP theory (see Manca, 2013, Supplementary Material and online documentation of the software). The library is also equipped with a complete set of graphical methods for plotting simulation results.
RegressionMost relevant algorithms implemented in the library are devoted to the inference of models starting from time series of observations. Such algorithms apply to different modeling scenarios according to the number of available data and to the previous knowledge that the user wants to encode in the model (see). In particular, the library provides an implementation of a regression algorithm specifically developed within the MP theory, called Log-gain Stoichiometric Stepwise regression () and some state of the art algorithms based on non-linear optimization techniques. Among them it is provided an implementation of the Covariance Matrix Adaptation Evolution Strategy (a stochastic evolutionary algorithm,) and of the Powell's BOBYQA algorithm (an iterative procedure particularly well suited for high dimensional problems where derivatives are not available,). All the implemented algorithms can be customized and support multi-threading. Moreover, results are equipped with additional measures for evaluating the reliability of models according to statistics (confidence interval and standard deviation of regression parameters, error estimates and Pearson correlations are provided for each model). Models can also be compared according to the information theory Akaike criterion (standard and corrected one) and to the Bayesian information criterion.
Supported computing environmentsTo enhance the modeling capabilities of the user, beside a pure Java usage, the library can be directly used within the most popular computing environments, such as MATLAB, GNU Octave, Mathematica and R. In fact, once the library has been imported in the chosen framework, all the implemented objects and methods can be directly used as any other native data structure or command. The user guide provides a comprehensive set of examples that have been translated for being used in all of the supported environments. Moreover, the library has been also equipped with specific methods for saving and loading models, which can be used to exchange models between different computing environments by. The regression of an MP model. The library provides a comprehensive set of algorithms specifically developed for inferring models starting from time series of observations. Question marks stand for specific additional information that the user has to provide according to the chosen regression method enhancing the transfer of knowledge between research groups that are familiar with different modeling platforms.
ConclusionWe presented a new open-source Java library for modeling biological dynamics by means of the MP theory. The software is distributed with a Javadoc documentation and a 100 pages user guide that introduces different modeling scenarios and discusses a comprehensive set of examples. The library can be directly used within the most popular computing environments, such as MATLAB, GNU Octave, Mathematica and R.
FundingThis work was supported by the Center for Biomedical Computing (CBMC) of the University of Verona, Italy. Conflict of Interest: none declared.
Bioinformatics, 31(8), 2015, 13281330 doi: 10.1093/bioinformatics/btu814 Advance Access Publication Date: 10 December 2014 Applications Note at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
L.Marchetti and V.Manca at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
