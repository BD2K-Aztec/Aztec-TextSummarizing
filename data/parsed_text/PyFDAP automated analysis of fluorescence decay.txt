We developed the graphical user interface PyFDAP for the fitting of linear and non-linear decay functions to data from fluorescence decay after photoconversion (FDAP) experiments. PyFDAP structures and analyses large FDAP datasets and features multiple fitting and plotting options. Availability and implementation: PyFDAP was written in Python and runs on Ubuntu Linux, Mac OS X and Microsoft Windows operating systems. The software, a user guide and a test FDAP data-set are freely available for download from http://people.
IntroductionFluorescence microscopy techniques have been widely used to measure the properties of fluorescently labeled proteins in embryos, tissues and cells (). Over the last decade, the repertoire of fluorescent proteins has been extended with the discovery and engineering of photoconvertible proteins that change their emission properties upon light exposure and that can be used to track sub-populations of pulse-labeled proteins (). Photoconvertible proteins have recently been adapted to determine protein stability via microscopy-based fluorescence decay after photoconversion (FDAP) assays. In FDAP assays, a protein of interest is tagged with a photoconvertible protein and expressed in vivo. After photoconversion, the decay in fluorescence intensity of the protein is monitored. The data is then fitted with a decay function that models protein clearance to calculate protein half-lives. Protein stability is context-dependent. For example, protein stability might be different inside cells and in the extracellular space (). Both intra-and extracellular protein half-lives can be determined by FDAP using a static intracellular signal to create masks for intraand extracellular intensities (). We have previously described how to execute FDAP experiments in living zebrafish embryos (). Here, we provide a standardized computational framework to analyse the resulting datasets. Our software PyFDAP features (i) a comprehensive data format for handling, sorting and annotating large FDAP datasets, (ii) the ability to separate FDAP datasets into their intra-and extracellular components based on counter-labeling, (iii) established fitting algorithms and (iv) a user-friendly environment that allows researchers from a non-computational background to easily evaluate FDAP datasets.
ImplementationPyFDAP was developed as an open-source graphical user interface (GUI) in Python with PyQT and SciPy to make it accessible across the most frequently used operating systems: Ubuntu Linux, Mac OS X and Microsoft Windows. Python is a widely used scientific programming language and provides PyFDAP users with enormous resources and easily incorporated software packages (). The PyFDAP GUI was designed to enable the user to simultaneously view the current project tree, project properties and various tabbed plots.Users import FDAP datasets as '.tif' files. As intra-and extracellular protein stabilities can be different, PyFDAP offers an option to import a second dataset that counter-labels intra-or extracellular space. The separation of fluorescence intensities into intra-or extracellular masks is performed using the Otsu binarization algorithm (). The masks and corresponding datasets can then be investigated inside the PyFDAP GUI. The masks are applied to the images of the photoconverted signal, and the average intensities in the intra-and extracellular domains and in the entire image are calculated. PyFDAP organizes all data into a logical hierarchical object structure to facilitate data navigation (). PyFDAP offers multiple fitting options to fit an exponential decay function given by ct  c 0 e kt  y 0 or an inverse power function given byto the dataset to model linear (M ller et al., 2012) or non-linear decay (), respectively. Here, c(t) is the intensity of the decaying fluorescent signal, y 0 the baseline of the decay, c 0  y 0 the fluorescent intensity at t  0 and k the decay rate constant of the fluorescent signal. In the case of non-linear decay, n controls the degree of non-linearity. PyFDAP calculates the protein half-lives s from k as s  ln2=k or s  2 n1  1c 1n 0 =kn  1 for linear and non-linear decay, respectively. PyFDAP offers several established bounded and unbounded optimization algorithms to fit the decay models to the data. The lower bound of fluorescence measurements is limited by the intrinsic background signal of the microscope and the autofluorescence of the imaged sample, and it is therefore crucial to define biologically reasonable bounds for the fit. PyFDAP offers an option to import background and noise measurements and allows the user to choose a lower bound of the baseline y 0 from four presets: (i) the level of noise N estimated from the noise dataset, (ii) the mean level of the pre-conversion background datasets B pre , (iii) the mean background level over all background datasets B or (iv) a special weighting function F () given bywhere i is the current FDAP measurement, r 2 f intracellular; extracellular; entire domaing is the investigated region and j 2 f1;.. .; bg represents the indices of background datasets with intensities B(t) at time t. Using the function F, users can compute the lower bound of the baseline for measurement i and region r, y 0i;r , bywhere I pre i;r denotes the pre-conversion intensity of the FDAP measurement i in region r. Together, these four presets offer a wide range of possibilities for the estimation of the baseline y 0. Multiple plotting options help the user to remove or improve corrupt datasets or fits. The user can plot the optimized parameters to find outliers and re-run the fits with different options. Moreover, PyFDAP saves the fitting progress and lets the user 'slide' through it to identify points at which optimization algorithms got arrested in a local minimum and where parameters need to be changed. PyFDAP allows data and results to be saved in various image and video formats. Individual decay curves and fits can be exported as '.csv' files. Similarly, complete PyFDAP project trees () including all settings and properties can be exported as '.csv' or JavaScript Object Notation (JSON) object files. Object files can easily be reloaded into PyFDAP, which ensures full reproducibility of data analysis and facilitates collaboration among researchers. To offer customizability and debugging options, PyFDAP also comes with a full Python terminal that allows users to modify FDAP datasets or to improve FDAP data analysis without the need to edit the main PyFDAP code. A detailed user guide (Supplementary Material) describes the installation and usage of the PyFDAP software as well as the mathematical background for data analysis.
ConclusionPyFDAP is an open-source GUI for the analysis and handling of FDAP data. Usage of PyFDAP does not require any programming knowledge. The straightforward GUI provides a quick workflow, and the integrated terminal and open-source nature of PyFDAP enable researchers to extend the software to suit their needs.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Molecule project Noise measurement FDAP measurements Measurement 1 Measurement m Pre-conversion measurement Fits Fit 1 Fit f Measurement 1 Measurement b Pre-conversion measurement Background measurements Fig. 1. Hierarchical PyFDAP data structure for FDAP experiments. Experiments are grouped into a main molecule project and divided into FDAP (1 to m) and background (1 to b) pre-and post-conversion measurements. Each FDAP measurement can have multiple fits (1 to f) with different fitting options Automated analysis of FDAP experiments
A.Bl le and P.M ller at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
