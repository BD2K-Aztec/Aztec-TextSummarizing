Motivations: When reticulation events occur, the evolutionary history of a set of existing species can be represented by a hybridization network instead of an evolutionary tree. When studying the evolutionary history of a set of existing species, one can obtain a phylogenetic tree of the set of species with high confidence by looking at a segment of sequences or a set of genes. When looking at another segment of sequences, a different phylogenetic tree can be obtained with high confidence too. This indicates that reticulation events may occur. Thus, we have the following problem: given two rooted phylogenetic trees on a set of species that correctly represent the tree-like evolution of different parts of their genomes, what is the hybridization network with the smallest number of reticulation events to explain the evolution of the set of species under consideration? Results: We develop a program, named HybridNet, for constructing a hybridization network with the minimum number of reticulate vertices from two input trees. We first implement the O(3 d n)-time algorithm by Whidden et al. for computing a maximum (acyclic) agreement forest. Our program can output all the maximum (acyclic) agreement forests. We then augment the program so that it can construct an optimal hybridization network for each given maximum acyclic agreement forest. To our knowledge, this is the first time that optimal hybridization networks can be rapidly constructed. Availability: The program is available for non-commercial use, at
INTRODUCTIONWhen studying the evolutionary history of a set of existing species, one can obtain different phylogenetic trees of the set of species by looking at different segments of sequences. So, given two rooted phylogenetic trees on a set of species that correctly represent the tree-like evolution of different parts of their genomes, we want to construct a hybridization network with the smallest number of reticulation events to explain the evolution of the set of species. This problem was proved to be NP hard (). Thus, it is challenging to develop programs that can give exact solutions when the two given trees are large or have a large reticulate number.showed * To whom correspondence should be addressed. the relationship between the reticulate number and the number of reticulate vertices in a hybridization network. Recently, several programs have been developed for the problem (). Those programs only output a number or a maximum (acyclic) agreement forest. None of them gives an optimal hybridization network. In this article, by implementing the O(3 d n)-time algorithm due to, we obtain a program (named HybridNet) that can construct optimal hybridization networks rapidly.
PROBLEM DEFINITIONSA binary tree is a rooted tree in which each non-leaf vertex has exactly two children. Let X be a set of existing species. A phylogenetic X-tree is a binary tree whose leaf set is X. For our purpose, a hybridization network on X is a directed acyclic graph D in which the set of vertices of out-degree 0 (still called the leaves) is X, each non-leaf vertex has out-degree 2, and there is exactly one vertex of in-degree 0 (called the root). A vertex of in-degree larger than 1 in D is called a reticulate vertex. Intuitively speaking, a reticulate vertex corresponds to a reticulation event. A phylogenetic tree T on X fits a hybridization network N if T can be obtained from N by first deleting some edges and then merging each vertex of out-degree 1 (resulting from the edge deletions) and its single child into a single vertex. We are interested in the following problem: Input: Two phylogenetic trees T and T with the same leaf set. Output: A hybridization network N with the minimum number r of reticulate vertices such that both T and T fit N. Here, r is referred to as the hybridization number of T and T. Optimal hybridization networks of T and T are closely related to maximum acyclic agreement forests (MAAFs) of T and T. Indeed, the reticulate number of T and T is equal to the number of trees in an MAAF of T and T minus one ().
IMPLEMENTATIONWe have implemented the algorithm byin ANSI C, obtaining a program (called HybridNet) for computing the hybridization number, a single MAAF together with an optimal hybridization network, and all MAAFs together with an optimal hybridization network for each MAAF. See the Supplementary Material for the details of constructing an optimal hybridization network from a given MAAF. HybridNet is available at the web site, where one can download executables that can run on a Windows XP (x86), Windows 7 (x64), Macintosh or Linux machine.
HybridNETAfter downloading HybridNet, one can run it as follows:
HybridNet-OPTION T1 T2Here, T1 and T2 are two text files each containing a phylogenetic tree in the Newick format (ended with a semicolon). The label of each leaf in an input tree should be a string consisting of letters in {0,1,...,9,a,b,...,z,A,B,...,Z,_,.}. There is no limit on the length of the label of each leaf. OPTION is a string in the set {HN, MAAF, MAAFs, rSPRDist, MAF, MAFs} controlling the output as follows: @BULLET HN: the output is the hybridization number of T1 and T2. @BULLET MAAF: the output is one MAAF of T1 and T2 together with one optimal hybridization network for the MAAF. @BULLET MAAFs: the output is all MAAFs of T1 and T2 together with one optimal hybridization network for each MAAF. @BULLET rSPRDist: the output is the rSPR distance between T1 and T2.@BULLET Maximum agreement forest (MAF): The output is one MAF of T1 and T2. @BULLET MAFs: the output is all MAFs of T1 and T2.HybridNet outputs an MAAF (respectively, MAF) by printing out the leaf sets of the trees in the MAAF (respectively, MAF), while it outputs a hybridization network in its extended Newick format. When OPTION is MAAFs (respectively, MAFs), HybridNet outputs the MAAFs (respectively, MAFs) without repetition. We remind the reader that one can view a tree in the Newick format and a network in the extended Newick format by using Dendroscope due to. To compare the efficiency of HybridNet with the previously best exact programs [namely, SPRDist by Wu (2009) and HybridInterleave by, we have run HybridNet, SPRDist and HybridInterleave on both simulated data and biological data. We omit the comparison with non-exact programs such as EEEP, HorizStory, DarkHorse, RIATA-HGT and LatTrans. The experiment was performed on a 3.33 GHz Linux PC. Note that SPRDist computes the rSPR distance of two phylogenetic trees, while HybridInterleave computes the hybridization number of two phylogenetic trees. Recently,announced that they have obtained a program for computing the hybridization number of two phylogenetic trees. However, it turns out that their program is slower than HybridInterleave.
Simulated dataWe use the benchmark dataset provided by Beiko and Hamilton (2006). To obtain a pair (T ,T ) of trees, they first generate T randomly and then obtain T from T by performing a specified numberdnumber numberd (say, 10) of random rSPR operations on T. In this way, they obtain a lot of benchmark tree pairs. To compare the efficiency of our program with SPRDist and HybridInterleave, we only pick the 10 tree pairs with the largest size (100 leaves) and the most random rSPR operations performed (10). The experimental results are shown in Supplementary Table 1, where one can see that HybridNet can give the exact solutions within a second. SPRDist takes 9 s to 14.5 min for some easy cases. However, when the number of leaves or the rSPR distance is large, SPRDist often crashes. HybridInterleave is quite slow for simulated data and it takes more than 1 day to finish for many cases. Therefore, HybridNet is more efficient and stable.
Biological dataWe use the Poaceae dataset from the Grass Phylogeny Working Group (). The Poaceae dataset was analyzed by Schmidt (2003). The experimental results are shown in supplementary Table 2, where one can see that HybridNet is always faster than SPRDist and compares well with HybridInterleave. We also notice that even when we turn on the option MAAFs or MAFs to find all solutions, HybridNet runs faster than HybridInterleave and SPRDist which find only one solution.
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
