Pyrosequencing technologies are frequently used for sequencing the 16S ribosomal RNA marker gene for profiling microbial communities. Clustering of the produced reads is an important but time-consuming task. We present Dynamic Seed-based Clustering (DySC), a new tool based on the greedy clustering approach that uses a dynamic seeding strategy. Evaluations based on the normalized mutual information (NMI) criterion show that DySC produces higher quality clusters than UCLUST and CD-HIT at a comparable runtime. Availability and implementation: DySC, implemented in C, is available at
INTRODUCTIONPyrosequencing technologies are frequently used for microbial sequencing studies based on sequencing of hyper-variable regions of the 16S ribosomal RNA (rRNA) marker gene (e.g.) Typical dataset sizes range from a few tens of thousands up to several million reads. The taxonomy-independent approach to their computational analysis typically performs a hierarchical clustering and then bins the reads into Operational Taxonomic Units (OTUs) based on a distance threshold (). Clustering is usually computed on a pairwise distance matrix that is derived either from an all-against-all read alignment () or a (profilebased) multiple sequence alignment (). However, this approach has a high complexity in terms of both time and space and thus does not scale up to several million reads. The classical greedy sequence clustering method () builds up clusters in an iterative incremental fashion. Each cluster is represented by one sequence (called seed). An unseen read is then aligned to all seeds. If all alignments return distances above a given threshold, the read is used as the seed of a new cluster. Otherwise, the read is added to one of the clusters for which the distance is within the threshold. Examples of existing software used for read clustering based on the greedy approach are CD-HIT () and UCLUST () Although this approach is scalable and efficient it generally produces clusters of lower quality than hierarchical clustering (). In this article, we present a new tool called Dynamic Seed-based Clustering (DySC) that uses a dynamic seeding * To whom correspondence should be addressed.. Pending cluster conversion example using two neighboring clusters reaching the threshold size max_pending = 5 (left). Fixed seeds and the fixed cluster members are determined (center and right). After optimization, the seed of the cluster can be shifted to another member of the original pending cluster (see arrows) strategy to achieve higher accuracy while preserving scalability and efficiency.
Legends:
METHODS AND IMPLEMENTATIONDySC uses the following concepts in order to reduce the amount of inaccurately formed clusters in the early stages of greedy clustering.
Fixed clusterA fixed cluster consists of a set of assigned reads and is represented by one of the assigned reads, called 'fixed seed'. Read membership to a fixed cluster is exclusive and final. A fixed cluster can still grow in size, but the seed is fixed.
Pending clusterA pending cluster consists of a set of assigned reads and is represented by one of the assigned reads, called 'pending seed'. Pending clusters are used at the early stages of cluster construction. Read membership to a pending cluster is neither exclusive nor final. Once a pending cluster reaches a threshold size (max_pending reads), it is converted into a fixed cluster.
Pending cluster to fixed cluster conversionFirst, a fixed seed is determined as the assigned read that maximizes a k-mer spectrum-based inner cluster link score, which is defined as the sum of the kmers shared between the selected read and all other assigned reads. Second, all pending reads are re-aligned to the new fixed seed in order to decide whether they are members of the new fixed cluster. If a read is assigned to the new fixed cluster, its membership to any pending clusters will be removed.illustrates the conversion process.
Read assignmentConsider a set of fixed clusters (each represented by a fixed seed) and a set of pending clusters (each represented by a pending seed). The DySC clustering workflow iteratively loads a batch of reads from the input file and tries to assign them to the fixed clusters first. The assignment procedure calculates pairwise k-mer distances (see Supplementary 'Read assignment') between the batch of input reads and the set of fixed seeds. For each identified read-seed pair with a k-mer distance below a given threshold, a dissimilarity
Software for greedy clusteringvalue (defined by one minus the fractional sequence identity derived from an optimal global alignment) is calculated in quadratic time. If the dissimilarity is below a given threshold, the read is assigned to the corresponding fixed cluster. To identify promising read-seed pairs quickly and with high sensitivity, two k-mer indices are used as follows. First, the k-mer index of the batch of input reads is built. This index is queried by each fixed seed. The returned list containing sorted seed-read pairs ordered by k-mer distance is searched from top to bottom to identify homologues by computing the corresponding dissimilarities. Each read assigned to a fixed cluster is removed from the k-mer index. If a certain number of dissimilarity computations (max_low) is above another given threshold (thresh_low), the search terminates in order to limit the time-consuming global alignment computations. Second, each remaining read is used as a query to the fixed seed k-mer index. The returned list of sorted promising read-seed pairs is then processed in a similar way. Subsequently, each input read that has not been assigned to any fixed cluster is compared with all pending seeds using k-mer distance and dissimilarity computation. A read is assigned to all pending clusters for which the dissimilarity is below a given threshold. Each remaining read that has not been assigned to any pending cluster is considered as a new pending seed. If a pending cluster reaches the size of max_pending reads, the conversion procedure described above is triggered. The supplement provides more details about our clustering procedure.
PERFORMANCE EVALUATIONWe have compared DySC with CD-HIT-OTU (v0.0.2, with CDHIT-EST as clustering engine), UCLUST (USEARCH v5.0.151) and the hierarchical clustering-based tool ESPRIT-Tree () in terms of accuracy and runtime. ULCUST is executed within the otupipe script (http://drive5.com/otupipe). All four tools use default parameters. DySC has the following default parameters: k = 10, max_pending = 10, max_low = 10 and thresh_low = 1-(SIM0.04), where SIM is the given clustering similarity (e.g. SIM = 0.97). For the accuracy comparison we have downloaded the well-known human gut microbiome dataset () generated by pyrosequencing of the 16S rRNA gene V6 region (SRX001445, 464K reads of average length 121 bp) and V2 region (SRX001447, 535K reads of average length 265 bp) from the NCBI Sequence Read Archive (SRA) The normalized mutual information (NMI) score (with ground-truth clusters established by Megablast comparison to the RDP Database R10.26 () is used to determine clustering accuracy. Unaligned reads (similarity <97% or blast region <120 bp) and chimeric reads (using UCHIME v4.2;) were removed from the datasets. We then randomly sampled 30K reads from the remaining V2 (V6) dataset. Each tested tool then performs a clustering with similarity threshold settings ranging from 90 to 99% with a 1% step-size. Each experiment is repeated 10 times with different read sampling.shows the average NMI scores as well as the average number of identified OTUs at 97% and 95% similarity levels, which are often used to reflect species-and genus-level community structure profiles. Furthermore, the NMI scores for all tests are shown in. We have further compared the clustering runtime of the four tools for performing a four-level clustering at 97, 95, 93 and 91% similarity levels on a workstation with a Xeon E5504 processor and 16 GB RAM using a single thread. In addition to the gut microbiome V6 and V2 datasets, we have also tested a bigger artificial bacterial community dataset (SRR069029, NCBI SRA) generated by sequencing of a defined mixture of genomic DNAof other three tools took less than 5 min to finish the four-level clustering of the complete V6 dataset. For the complete V2 dataset (SRR069029 dataset), UCLUST finishes the task within 17 min (182 min), DySC within 67 min (129 min), CD-HIT-EST within 296 min (223 min) and ESPRIT-Tree within 1324 min (1571 min). An empirical evaluation of DySC using the SRR069029 dataset indicates a quasi-linear time complexity (Supplementary) and a memory consumption of less than 1 GB for a dataset with a few million input reads (Supplementary). In conclusion, DySC is a scalable tool for clustering of 16S rRNA reads for microbial profiling generated by high-throughput sequencing machines, which can cluster millions of reads on a standard workstation within a few hours. Benchmarking results show that extending the classical greedy algorithm by delaying the production of fixed clusters through the usage of pending clusters can improve accuracy significantly while keeping efficiency high.
The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
