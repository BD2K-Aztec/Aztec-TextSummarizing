Modern biotechnical research is becoming increasingly reliant on computational structural modeling programs to develop novel solutions to scientific questions. Rosetta is one such protein modeling suite that has already demonstrated wide applicability to a number of diverse research projects. Unfortunately, Rosetta is largely a command-line-driven software package which restricts its use among non-computational researchers. Some graphical interfaces for Rosetta exist, but typically are not as sophisticated as commercial software. Here, we present InteractiveROSETTA, a graphical interface for the PyRosetta framework that presents easy-to-use controls for several of the most widely used Rosetta protocols alongside a sophisticated selection system utilizing PyMOL as a visualizer. InteractiveROSETTA is also capable of interacting with remote Rosetta servers, facilitating sophisticated protocols that are not accessible in PyRosetta or which require greater computational resources. Availability and implementation: InteractiveROSETTA is freely available at https://github.com/ schenc3/InteractiveROSETTA/releases and relies upon a separate download of PyRosetta which is available at http://www.pyrosetta.org after obtaining a license (free for academic use).
IntroductionComputational molecular modeling has exhibited significant advances over the past several years, leading to its more widespread use in academic and commercial research for novel structural engineering applications. One significant software package is the Rosetta protein modeling suite (), which provides access to a wide array of structural modeling tools which have been successfully used for protein engineering, including protein design (), structure prediction (), loop modeling () and protein docking (), among other tools. Unfortunately, the main Rosetta software package has a command-line interface, intended for use on Unix operating systems, which limits its usability mainly to researchers with extensive C and Unix operating system experience. One significant improvement in Rosetta accessibility was the development of the PyRosetta package (), which provides Python bindings to several of the main Rosetta protocols and permits the user to design their own customized protocols using these bindings in Python scripts. Later, visualization capabilities were added to PyRosetta by synchronizing Rosetta " pose " structures with the PyMOL Molecular Visualization System (www.pymol.org) via the so-called " PyMOL movers " () However, a central graphical interface that provides access to PyRosetta for researchers who are uncomfortable with Python scripting is still a major concern. Two notable graphical interfaces exist for PyRosetta: FoldIT and the PyRosetta Toolkit. FoldIT provides an easy-to-use visualization and selection system, but there only exist a couple of basic Rosetta protocols such as minimization and basic protein design (). The PyRosetta Toolkit provides a graphical interface designed with Python's standard Tkinter GUI library (Adolf), but a sophisticated visualization system is still missing. Recently,RosettaDiagrams (www.rosettadiagrams.org) provides a userfriendly interface for RosettaScripts (). Rosie (Rosetta Online Server that Includes Everyone) provides access to computational resources for big Rosetta jobs (). We have developed a novel Rosetta GUI called 'InteractiveROSETTA'. InteractiveROSETTA provides several userfriendly controls for interacting with many of the common PyRosetta protocols, including superimposition, energy minimization, fixed backbone protein design, kinematic closure (KIC) loop modeling, proteinprotein docking, point mutations and parameterization tools for unrecognized PDB types. InteractiveROSETTA does not require a familiarity with the structure and organization of Rosetta and provides easy access to its structural modeling applications.
InteractiveROSETTA featuresThe InteractiveROSETTA GUI consists of three main windows: a PyMOL window for structure visualization and selection, a sequence viewer for displaying and selecting the primary sequences of loaded structures, and a protocol window that permits the user to execute various Rosetta protocols (). InteractiveROSETTA also makes extensive use of BioPython () for storing and manipulating structures efficiently and quickly. The GUI controls are generated using the wxPython library, which provides Python bindings for the C wxWidgets library. InteractiveROSETTA is a cross-platform and runs efficiently in 64bit architectures running Windows 7/8 and Debian/RedHat-based Linux distributions. The Mac OSX version is still being optimized.
Structure visualization and manipulationAs previously stated, structures are visualized using a PyMOL viewer which communicates with the underlying Interactive ROSETTA Python code. Segments of primary sequence can be selected in the sequence viewer which synchronously selects the equivalent tertiary structures in PyMOL. Selections in PyMOL are also synchronized to select the corresponding residue positions in the sequence viewer. Furthermore, the sequences can be colored according to secondary structure, as determined by DSSP, () or B-factor. InteractiveROSETTA also provides a number of tools to facilitate customizing atomic display and extending selections or views.
Running Rosetta protocolsThe principal strength of InteractiveROSETTA lies in its ability to utilize the visualization and selection tools mentioned earlier to greatly simplify the process of designing Rosetta protocols. The protocols window contains a dropdown menu listing all of the currently supported Rosetta/PyRosetta protocols. Several proteins may be superimposed using one loaded structure as an immobile base model, either by Ca or backbone atoms. Superimposition also calls a MUSCLE executable () to align the primary sequences into a multiple sequence alignment for the user's convenience. Energy minimization allows the user to select regions of the structures to minimize along backbone and/or sidechain atoms. Fixed backbone design permits the user redesign part or all of a structure's primary sequence and provides several controls for setting up the design parameters. Loop modeling with KIC is also supported which allows the researcher to remodel existing loops or create new loops de novo given a desired primary sequence of the novel loop. Basic proteinprotein docking is also supported, which will accept various structural chains as static and movable structures that will be docked together given a specified number of coarse and refined models to generate. A simple comparative structure prediction protocol is provided, although this protocol currently relies upon the Robetta server () to generate fragment files for the structure prediction. A researcher may also design proteins using the multi-state design (MSD) protocol. MSD typically requires enumeration of several different files so the controls provided by InteractiveROSETTA greatly simplify setting up MSD jobs. Finally, a residue and ligand creator is provided to easily parameterize unrecognized residue types into a Rosetta " params " file.
FundingInteractiveROSETTA was funded through the National Institute of Health Grant R01 GM099827. Conflicts of Interest: none declared.
ReferencesAdolf-Bryfogle,J. and Dunbrack,R.L.The PyRosetta toolkit: a graphical user interface for the Rosetta software suite. PLoS One, 8, e66856e66856.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Outlook InteractiveROSETTA should provide a simple to use interface for non-computational researchers to utilize Rosetta more fully or for the first time for their own applications. In addition, InteractiveROSETTA is extremely amenable to community development of novel protocols. Separate Python scripts which extend the " ScrolledPanel " widget can be added to the " scripts " directory to add new protocols to InteractiveROSETTA's database.
C.D.Schenkelberg and C.Bystroff at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
