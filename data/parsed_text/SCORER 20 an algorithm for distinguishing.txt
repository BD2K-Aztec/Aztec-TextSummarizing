Motivation: The coiled coil is a ubiquitous α-helical protein structure domain that directs and facilitates protein–protein interactions in a wide variety of biological processes. At the protein-sequence level, coiled coils are quite straightforward and readily recognized via the conspicuous heptad repeats of hydrophobic and polar residues. However, structurally they are more complicated, existing in a range of oligomer states and topologies. Here, we address the issue of predicting coiled-coil oligomeric state from protein sequence.
INTRODUCTIONThe coiled coil is a protein structure domain comprising two or more -helices wound around each other, usually in a lefthanded fashion () (). By using the SUPERFAM method to detect coiled-coil containing superfamilies of proteins, it has been estimated that on average 2.9% of open reading frames across all genomes contain regions that encode coiled coils (range, 0.36.5%) ().Moreover, coiled-coil domains play roles in mediating protein protein interactions across a wide array of biological functions from transcription, through membrane remodeling, to cell and tissue structure and stability. Despite this ubiquity and diversity, a relatively straightforward sequence motif of hydrophobic (H) and polar (P) residues HPPHPPP underlies most coiled-coil structures. The positions in these so-called heptad repeats are labeled a through g, with the hydrophobic sites falling at the a and d positions. Traditionally, it is these repeats that are identified by coiled-coil region prediction algorithms (vide infra). However, this apparent simplicity of coiled-coil sequences hides considerable complexity in their 3D structures: coiled-coil assemblies can have different numbers of helices, which may be in parallel or antiparallel arrangements, and may be formed from the same (homo) or different (hetero) helical sequences (). Coiled-coil structure prediction, then, can be aimed at one or more of three problems:(1) Given a protein sequence, can we accurately identify coiledcoil regions?(2) Given a coiled-coil sequence, can we correctly assign its architecture and topology?(3) Given two or more coiled-coil sequences, can we predict how these combine to form functional assemblies?Here, we focus on the second problem, and specifically on oligomerstate prediction. However, the first problem of locating coiled-coilPage
SCORER 2.0regions in protein sequences per se is also pertinent here. This is because the identification of coiled-coil regions is a prerequisite to predicting coiled-coil oligomer state. Several algorithms exist to tackle the first problem: the widely used COILS () utilizes residue frequencies at different positions of the heptad repeats () of known coiled-coil structures to predict whether new sequences are coiled coils or not. PAIRCOIL ()and its successor, PAIRCOIL2 ()builds upon this method by utilizing correlations in amino acid usage at the different heptad positions. Algorithms such as MARCOIL () and CCHMM () find coiled-coil regions using Hidden Markov Models (HMMs). Some more recent algorithms attempt to incorporate evolutionary information into coiled-coil search strategies: CCHMM-PROF () and PCOILS ()the sequels to CCHMM and COILS, respectivelysubject query sequences to rounds of PSIBLAST searches, and predict coiledcoil regions from profiles made from these searches. SOSUIcoil () uses physico-chemical parameterssuch as predicted sequence amphiphilicityin conjunction with amino acid propensities to predict coiled-coil regions, including breaks or non-canonical patches within them. SPIRICOIL () incorporates coiled-coil containing proteins into the SUPERFAM database (), and predicts coiledcoil regions by comparison with homologous proteins of known structure. SPIRICOIL has been shown to perform better than the other algorithms when predicting coiled-coil regions, but its reliance on structurally resolved homologues is limiting. Of the truly ab initio coiled-coil prediction algorithms, MARCOIL and PCOILS are thought to perform best (), although SOSUIcoil, CCHMM and CCHMM-PROF are yet to be independently benchmarked. Three algorithms exist to tackle the architecture problem: SCORER (), MultiCoil () and the aforementioned SPIRICOIL (). SCORER uses a log-odds-based scoring system to distinguish whether coiled-coil sequences are more similar to a profile derived from parallel dimeric coiled coils, or a profile derived from parallel trimeric coiled coils. The MultiCoil algorithm is a hybrid of two algorithms: PAIRCOIL is used to predict coiled-coil regions, and differences in pairwise residue correlations in known parallel dimeric and parallel trimeric coiled-coils are then used to assign oligomeric state. Again, SPIRICOIL assigns oligomeric state based on homology to proteins of known 3D structure. SPIRICOIL has been shown to outperform other methods, and has the advantage of being able to predict higher order coiled-coil architectures, i.e. it is not limited to dimers and trimers. However, its use is voided when dealing with proteins with no structurally resolved homologues. Of the ab initio methods, MultiCoil has enjoyed the most popularity. A large body of work has been performed to address the issue of how partner selection is determined in coiled coils. In particular, the interactions that stabilize dimeric assemblies of coiled coils have been analysed using experimental and bioinformatic methods (), and rules gleaned from these analyses have been used to design sets of mutually exclusive coiled-coil dimers (). Given the abundance of observed and possible coiled-coil architectures and topologies (;) and the current limits of homology based coiled-coil prediction such as SPIRICOIL, one of our focuses has been on improving ab initio methods for coiled-coil oligomer state prediction. Both of the aforementioned algorithms, MultiCoil and SCORER were written in the 1990s, and neither has been updated since. Although both SCORER and MultiCoil are limited to the prediction of parallel dimers and trimers, these structures represent  50% of known coiled-coil structures (). Thus, attempts to update these algorithms seemed like a logical step towards the goal of better and broader (i.e. multi-state) coiled-coil predictors. Here, we present SCORER 2.0, a significantly revised and updated version of the SCORER algorithm, which uses advanced statistical methods and is trained on a pristine set of coiled-coil sequences of known 3D structure. The latter were culled from the RCSB PDB () using SOCKET (). The SOCKET algorithm finds the knobs-intoholes packing between coiled-coil helices that is dictated by the underlying heptad sequences repeat. Application of SOCKET to the RCSB PDB has rendered CC+ (), a database of all known structurally resolved coiled coils. It was from CC+ that the pristine set was ultimately selected. SCORER 2.0 classifies coiledcoil sequences of unknown oligomeric state by using statistically significant differences in the frequencies of the 20 proteogenic amino acids at the seven heptad positions in dimer and trimer profiles. This is achieved by using a Bayes factor method, which accounts for the uncertainty that may arise in profile tables. Finally, SCORER 2.0 was compared with MultiCoil using a variety of PAIRCOIL parameters, circumventing the issue of MultiCoil having an obligatory PAIRCOIL front end. SCORER 2.0 is available online, and has the option of being used in conjunction with a MARCOIL front end.
METHODS
Coiled-coil training and test setsThe sequences of parallel dimeric and parallel trimeric canonicalthat is, heptad basedcoiled coils longer than 14 residues in length were obtained from the CC+ database (), aligned using Clustalw2 () (maximum gap penalties were used to conserve the alignment of the heptad repeat), and then culled using CD-HIT () at redundancy cut-off intervals of 5% in the range 4095%. The corresponding structures were validated to ensure no coiled coils were part of higher order assemblies. We named the resulting set of structures corresponding to 50% maximum identity cutoff the pristine dataset. The identity threshold of 2530%, often used for culling protein datasets, is too restrictive for coiledcoil sequences, which have a restricted amino acid usage, and therefore regarded as regions of low complexity (this is addressed in greater depth in the Supplementary Material). The pristine dataset comprised 133 dimeric and 33 trimeric coiled-coil sequences. Position-specific scoring matrices, PSSMs (), were derived for both dimer and trimer sequences by counting the occurrence of the 20 proteogenic amino acids at each of the heptad positions, yielding two 207 tables. Each element of these tables was denoted PSSM o,a,r where o can take the values 2 or 3 to denote the dimer and trimer PSSMs, respectively; a represents each of the 20 proteogenic amino acids in standard single-letter code; and r denotes the heptad register. The total number of counts across each register is denoted TOT o,r .
C.T.Armstrong et al.A dataset of divergent dimeric and trimeric coiled-coil sequences was also created. From the full list of dimers and trimers available to us, any sequence with below 40% identity to any other entry was labeled as divergent. Pairwise identity between each sequence was computed using the SmithWaterman algorithm () implemented in the EMBOSS suite (). The final divergent dataset comprised 95 dimeric and 25 trimeric coiled-coil sequences. Full details of the data sets are given at http://coiledcoils.chm.bris.ac.uk/ Scorer.
ScoringThe original SCORER algorithm reports the relative likelihood that a test coiled-coil sequence is representative of a dimer or a trimer profile using a log-likelihood ratio:represents the amino acid residues and associated register positions of the test coiled-coil sequence S, with residues numbered i = 1,2,...,l and observed oligomeric state O ={2,3}.By selecting the terms in the dimer and trimer PSSMs for which the values were significantly different, and using only those to discriminate between dimeric and trimeric coiled-coil sequences, the SCORER algorithm achieves a good rate of prediction. However, this method of scoring contains a few unsatisfactory features that we propose to resolve in SCORER 2.0:(1) The original SCORER algorithm uses a decision threshold of 0 to classify coiled coils, and does not take into account the prior odds of dimer and trimer occurrence in the user's study. While this would not be a problem if the odds of dimers versus trimers were 1:1, we know that this is typically not the case, with dimers being far more common than trimers (133:33 in our database for example); the background probabilities of dimers and trimers should be accounted for. Accordingly, the log prior odds of dimer versus trimer relative to the user's experiment should be added to the score, and the subsequent result can then be properly interpreted as the log posterior odds, and used to make a decision.(2) The original SCORER method makes no allowance for errors in estimation in the profile probabilities PROF o,a,r for example, if a particular residue a is rare for a particular oligomeric type o and register r then PROF o,a,r will have a large associated standard error and may even be estimated incorrectly to be zero, potentially skewing the results. The statistical analysis in the original SCORER algorithm circumvented this problem by only including PSSM values for those amino acids that made up at least 5% of the residues at a given site in both the dimer and trimer databases. As a consequence, amino acids that were poorly represented at a particular heptad position in one dataset, but reasonably well represented in the other were ignored, and some amino acids that could contribute to oligomer discrimination may have been overlooked. Rather than suppressing insignificant or poorly populated terms, it is better to modify the score in a principled way that has the effect of diluting the influence of poorly estimated profile values. Assuming that the probabilities of obtaining amino acid a for any combination of oligomeric state o and register r are independent, SCORER 2.0 assigns a score to an amino acid sequence according to:where x a,r is the number of a residues at register r in the test sequence, y r = a x a,r is the total number of amino acids at register r in the test sequence, and m (x) stands for the rising factorial symbol m(m+1)(m+2)...(m+x 1). The constant  is a prior parameter that provides stability in estimation. By introducing this parameter, we adjusted the probability of rare, but not impossible events, artificially so that no probability is estimated as zero; as can be seen, the relative impact of adding  is negligible on cells with large counts. Cross-validation indicated that a value of  = 1 provided optimal performance; this corresponds to an uninformative (uniform) prior assumption.
MultiCoilMultiCoil uses PAIRCOIL to locate coiled-coil regions in protein sequences, and then assigns whether each residue deemed to be in a coiled-coil conformation is part of a dimeric or trimeric assembly. As a consequence, it is not possible to uncouple the coiled-coil region and oligomeric-state predictions, and known coiled-coil sequences can only be assigned an oligomeric state if they are recognized by PAIRCOIL. Also, coiled-coil regions submitted to MultiCoil as part of a full native protein chain may be truncated or extended depending on where PAIRCOIL assigns the domain boundaries. Nonetheless, with no alternative, coiled-coil containing protein sequences were submitted to the publicly available MultiCoil web server, using a PERL script. For each amino acid residue, a, in a protein sequence, S, MultiCoil assigns a coiled-coil probability, C a , and oligomeric-state scores, D a and T a (dimer and trimer scores, respectively), where C a = D a +T a. For the purpose of this work, this method of scoring was converted into a single oligomeric-state score:Thus, positive score will indicate a dimeric prediction, while a negative score will indicate a trimeric prediction. This conversion of the MultiCoil scores is necessary, as it allows the performance measures discussed in the next section. The conversion does not impact the performance of MultiCoil in any way, and simply represents an alternative method of displaying the MultiCoil output.
Assessing the performanceThe performance of both SCORER 2.0 and MultiCoil were compared using receiver operator characteristic (ROC) curves [for example, see (. ROC curves are plots of the true positive rate (TPR) as a function of the false positive rate (FPR). The TPR is the probability of correctly classifying a true instance and is defined as:The FPR is the probability of assigning a false instance as true, and is defined as:Here, TP, FN, FP and TN represent counts of true positives, false negatives, false positives and true negatives, respectively. Data points are plotted in the descending order of confidence; that is, the most confident predictions are plotted first and occur nearer to the origin. One advantage of this method is that the area under the curve (AUC) lies between zero and unity, and gives a metric of how well a prediction algorithm separates the datasets. In the hypothetical case of the perfect separation of two datasets, 100% of true positives would be identified without the occurrence of a single false positive, for which a ROC curve depicting this would yield a single point atand an AUC of 1. All AUC values and ROC curves were generated using the ROCR package freely available in the R software ().
RESULTS
Optimal redundancy cutoff in the SCORER 2.0 training setAs far as possible, sequence similarity or redundancy between training and test sets should be eliminated in the assessment of
SCORER 2.0prediction software to prevent returning artificially high accuracies. A difficulty arises here with coiled-coil sequences, however, as they share the heptad repeat, which increases the potential for similarity even in the absence of homology. Therefore, we assessed how SCORER 2.0 predicted a number of divergent sequences after being trained on training sets culled at different redundancy cutoffs. This investigated whether there was an optimal redundancy cutoff for the training set, and assessed how robust the SCORER 2.0 algorithm was to the inclusion or deletion of training data. This is analogous to the bias-variance trade-off (), which looks at how the introduction of a certain amount of bias in an otherwise unbiased estimator may improve its performance. This is of relevance here as we anticipate retraining SCORER 2.0 as more sequence and structural data become available. For each sequence redundancy cutoff in a training set, an AUC score was obtained for divergent sequences of different lengths. Regardless of redundancy in the training set, AUC scores for sequences longer than 14, 21 and 28 residues in the test set were found to be in the range of 0.8  0.01, 0.89  0.02, 0.94  0.003 , respectively. The results showed SCORER 2.0 to be robust to changes in its training set, and that it provided comparable predictions and performance for any redundancy cutoff above 40% (Supplementary).
Comparison with the original SCORER algorithm using a pristine set of coiled-coil sequencesThe original SCORER algorithm assigned scores to 103/133 dimers and 30/33 trimers of the pristine set of coiled-coil sequences used in this new work; the remaining sequences were not scored as they did not contain features deemed to discriminate between dimer and trimer formation according to the significance cut-off criteria defined in the original SCORER paper (). For all the dimeric and trimeric sequences that could be assigned a score, SCORER achieved an AUC value of 0.63. SCORER 2.0 scored all the sequences, yielding an AUC of 0.77. When restricted to analysing only the sequences that the original SCORER algorithm assigned, SCORER 2.0 achieved an AUC of 0.76 (Supplementary). Thus, in all cases SCORER 2.0 offers a distinct improvement in performance over SCORER.
Comparison with MultiCoil on a pristine set of coiled-coil sequencesThe abilities of SCORER 2.0, SCORER and MultiCoil to predict accurately the oligomeric state of the coiled coils in the pristine dataset (see Section 2) were compared. SCORER 2.0 and SCORER were assessed using leave-one-out cross-validation to provide independent tests of the utility of the algorithm. These data differ from those discussed in Section 3.2 due to the fact that MultiCoil can only score sequences longer than 21 residues. The results of these tests are shown as ROC curves in. The AUC values and ROC curves inshow that SCORER 2.0 achieves a better discrimination rate of coiled-coil oligomeric state than SCORER and MultiCoil (0.86 versus 0.75 and 0.63, respectively). We found the improvement over MultiCoil to be particularly marked for short dimeric coiled coils, which is important as this oligomeric state accounts for a large proportion of the total coiled-coil population. However, the results reported in this section reflect the performance of SCORER 2.0 and MultiCoil under somewhat contrived conditions: all the data were obtainedfrom experimental and SOCKET-derived annotations. In reallife predictions, most coiled-coil sequence data will not be as well delimited and defined as our training set, since coiled-coil region prediction software rather than high-resolution structures will provide the input data. To ensure a fair comparison between SCORER 2.0 and MultiCoil, the PAIRCOIL predicted regions, along with their register assignments, were used by SCORER 2.0 in place of the known SOCKET-derived coiled-coil regions. For these reasons, we suggest that the results presented in the next section are a more representative comparison test of SCORER 2.0 and MultiCoil.
SCORER 2.0 versus MultiCoil, using a PAIRCOIL front-endAs mentioned above, comparing SCORER 2.0 and MultiCoil is complicated, as MultiCoil's oligomeric-state and coiled-coil region prediction function are coupled. Conversely, SCORER 2.0 requires input of a sequence thought to be a coiled coil, and its corresponding register, and will return an oligomer-state prediction regardless of whether there is a true coiled-coil present or not. Put another way, the performance of the two algorithms depends on the frontend coiled-coil region predictions, and these are different in the two cases. To avoid this problem and provide a better headto-head test, the two algorithms were compared using the same PAIRCOIL-predicted regions as input, thus allowing SCORER 2.0 to classify the same sequences as MultiCoil's oligomeric-stateprediction function. This represents a better real-world scenario where a user might not know where coiled-coil regions lie in their protein of interest. The full protein sequences of our pristine dataset were submitted to the MultiCoil web server with parameters for which PAIRCOIL correctly recognized the majority of our coiledcoil test set. For a window length of 21 and a detection cutoff of 0.01, PAIRCOIL successfully predicted 77/133 dimeric and29/33 trimeric coiled-coil regions. A coiled-coil region prediction by PAIRCOIL was considered successful if it encompassed at least 11 SOCKET-assigned coiled-coil residues. This ensures that the predicted coiled-coil regions are structurally verified coiled coils and are not a false-positive assigned by PAIRCOIL. The successful coiled-coil region assignments were then submitted to SCORER 2.0 and subsequently compared with the MultiCoil predictions. Again, the AUC values and ROC curves inshow that SCORER 2.0 achieved a higher discrimination rate than MultiCoil (0.89 versus 0.59, respectively).compares the performance of SCORER 2.0 and MultiCoil across a wide range of PAIRCOIL parameters. For each of these parameter sets, AUC scores and the fraction of correctly assigned dimers and trimers were used as a metric of how well the two algorithms performed in assigning oligomeric state. From these data, two major trends are apparent: first, there is a correlation between the confidence of PAIRCOIL predictions and the accuracy of the corresponding MultiCoil oligomeric-state prediction. While this is also true for SCORER 2.0, the effect is much greater for MultiCoil. We found that the median Spearman's rank correlation coefficient between AUC values and PAIRCOIL cutoff was 0.98 for MultiCoil (i.e. a strong positive correlation), while a value of 0.27 is found for SCORER 2.0 (a weak negative correlation). As an example, for coiled coils 14 amino acids and longer using a window length of 21 and a PAIRCOIL cutoff of 0.01, MultiCoil achieved an AUC score of 0.59. When the PAIRCOIL cutoff was increased to 0.90, the equivalent score is 0.88. For those same PAIRCOIL parameters, the AUC values obtained when using SCORER 2.0 were 0.89 and 0.85. A closer look at the predictions reveals that MultiCoil performs very well on long, parallel dimers, but fails to replicate this for shorter dimers and trimers, suggesting it is tuned to output safe predictions, an observation that has been made by others (). In summary, SCORER 2.0 shows a sustained strong discrimination rate across a diverse range of coiled-coil sequences, while MultiCoil performs best for a more restricted set of long coiled-coil dimers. We suggest that this is a consequence of the redundancy in the MultiCoil training set, reflecting the availability of data at the time this software was released, rather than a flaw with the MultiCoil algorithm itself. Generally, SCORER 2.0 outperforms MultiCoil as an oligomeric state predictor, both in terms of AUC scores and correct predictions ().
C.T.Armstrong et al.
Web-based interface for SCORER 2.0An online resource has been constructed as an interface for the SCORER 2.0 algorithm at http://coiledcoils.chm.bris.ac.uk/Scorer. The SCORER 2.0 web server, source code and training set is freely available for academic users. Two options are made available for the user: @BULLET A full protein sequence can be submitted as input. It is first processed by MARCOIL, where it is left to the user to freely choose a MARCOIL coiled-coil probability threshold (default is 50%). The SCORER 2.0 algorithm is then run on these MARCOIL-predicted coiled-coil regions. @BULLET A coiled-coil sequence with assigned heptad register can also be submitted as input. In this case, SCORER 2.0 is run on the sequence immediately. It should be noted that the SCORER 2.0 algorithm also allows non-canonical coiled-coil sequences to be submitted as input, i.e. those containing non-heptad repeats, although we emphasize that SCORER 2.0 was trained only on canonical coiled-coil sequences.
SCORER 2.0
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
CONCLUSION By retraining and revising the SCORER algorithm, a coiled-coil classifier written in 1995 (Woolfson and Alber, 1995), we have successfully predicted the oligomeric state of a range of dimeric and trimeric coiled-coil sequences with experimentally verified 3D structures. In nearly all cases, SCORER 2.0 offers improvement over the current standard in the field, MultiCoil. MultiCoil is good when classifying strongly defined coiled-coil sequences, but performs less well in other cases. We propose that this is most likely linked to redundancy in the MultiCoil training set reinforcing the redundancies found in the front-end PAIRCOIL algorithm. On the other hand, SCORER 2.0 was found to accurately distinguish between dimeric and trimeric coiled coils across the whole range of coiled-coil sequences used. We propose that coiled-coil oligomeric state prediction is currently limited by two factors: (i) the accuracy of the coiled-coilregion prediction software used as the front-end and (ii) the number of oligomeric states included in the prediction, as coiled coil can be found in higher order and more-complex oligomer states, as well as being parallel or anti-parallel (Lupas and Gruber, 2005; Moutevelis and Woolfson, 2009; Walshaw and Woolfson, 2001). We have used the PAIRCOIL front-end in this article to ensure the results obtained from SCORER 2.0 and MultiCoil are comparable. However, other front-ends exist, MARCOIL (Delorenzi and Speed, 2002), PCOILS (Gruber et al., 2006) and CCHMM-PROF (Bartoli et al., 2009) have been shown to offer the best performances (Gruber et al., 2006). At present, we use MARCOIL as a front-end to SCORER 2.0. Predicting oligomeric states beyond parallel dimers and trimers is limited mostly by the availability of sequence and structural data for other alternative oligomeric states. Homology-based approaches such as SPIRICOIL (Rackham et al., 2010) improve upon this by
The PAIRCOIL parameters that were varied were the input coiled-coil sequence length (cc length), the PAIRCOIL window size (window) and the PAIRCOIL decision threshold (threshold). The test set obtained for each combination of these PAIRCOIL parameters was submitted to SCORER 2.0 for oligomeric state prediction (see text for details). providing coiled-coil oligomeric state annotation as part of a Hidden Markov model used to classify whole proteins into families, but cannot be used to classify the oligomeric state of de novo coiledcoil sequences; i.e. those without structurally defined precedents. Still, this kind of method may provide enough data of a high enough confidence to train algorithms such as SCORER 2.0 to predict between multiple oligomeric states, rather than just de novo dimeric and trimeric coiled coils. SCORER 2.0 shows little discrimination between the next two biggest classes of coiled-coil architecture parallel tetramers and antiparallel dimerswhen forced to assign an oligomeric state (Supplementary Fig. S3). We see the development of multi-state predictors to be the next logical step in coiled-coil structure analysis and prediction. SCORER 2.0 is publicly and freely available via the worldwide web at http://coiledcoils.chm.bris.ac.uk/Scorer and can be used as stand-alone software for known coiled-coil regions, or in conjunction with MARCOIL, for coiled-coil region detection and oligomeric state assignment.
