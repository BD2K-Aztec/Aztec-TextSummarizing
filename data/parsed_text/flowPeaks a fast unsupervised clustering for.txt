Motivation: For flow cytometry data, there are two common approaches to the unsupervised clustering problem: one is based on the finite mixture model and the other on spatial exploration of the histograms. The former is computationally slow and has difficulty to identify clusters of irregular shapes. The latter approach cannot be applied directly to high-dimensional data as the computational time and memory become unmanageable and the estimated histogram is unreliable. An algorithm without these two problems would be very useful. Results: In this article, we combine ideas from the finite mixture model and histogram spatial exploration. This new algorithm, which we call flowPeaks, can be applied directly to high-dimensional data and identify irregular shape clusters. The algorithm first uses K-means algorithm with a large K to partition the cell population into many small clusters. These partitioned data allow the generation of a smoothed density function using the finite mixture model. All local peaks are exhaustively searched by exploring the density function and the cells are clustered by the associated local peak. The algorithm flowPeaks is automatic, fast and reliable and robust to cluster shape and outliers. This algorithm has been applied to flow cytometry data and it has been compared with state of the art algorithms, including Misty Mountain, FLOCK, flowMeans, flowMerge and FLAME.
INTRODUCTIONIn analyzing flow cytometry data, one fundamental question is how to divide the cells into distinct subsets with the phenotypes defined by the fluorescent intensity of the cell surface or intracellular markers. The unsupervised clustering for flow cytometry data is traditionally done by manual gating, where cells are sequentially clustered (gated) in one-dimension (1D) or 2D with the aid of 2D contour plots and 1D histograms. Manual gating has two problems: it is (i) highly subjective, depending on the users' expertise and the sequences of the markers to draw the gates and where to draw the gates and, (ii) tedious, for data consisting of n channels, * To whom correspondence should be addressed. the user needs to check and draw the gates on possibly n 2 pairs of 2D contour plots. The automatic gating of the cells, in machine learning called unsupervised clustering, has become an active research area for the past several years. There are currently two common approaches to address the unsupervised clustering problem, one is based on the finite mixture model () and the other is based on spatial exploration of the histograms (). Both approaches have their own weaknesses. The finite mixture model assumes that the data are generated by a mixture of Gaussian distributions, Student's t-distribution or skewed t-distributions. Some of these methods require data transformation to reduce the data asymmetry. There are two issues faced by the finite mixture model: (i) how many components are needed and (ii) the cluster shape is not necessarily the same as what the model assumed. Most authors resort to the Bayesian information criterion (BIC) or some variants to determine the optimum number of components (), which still leaves ambiguity as there are competing finite mixtures that give similar BIC with completely different partitions of the data. The BIC approach is also computationally very burdensome since it needs to compute the clustering for all possible K and then determine the best K. If the cluster shape is not convex or very asymmetrical, these algorithms are likely to split a single cluster into several small ones. The new-generation algorithms such as Misty Mountain () and FLOCK () try to find the irregular shape and not to rely on K. They are fast and they find the data-dependent cluster shape. However, the new-generation algorithms cannot be applied directly to high-dimensional data. Thus, Misty Mountain needs to first apply principal component analysis to reduce the dimension and FLOCK needs to search a 3D subspace that is optimal for a particular cluster. These dimension reduction techniques may result in information loss. In this article, our goal is to combine these two approaches, allowing us to quickly detect the data-dependent cluster shapes so that the algorithm can be applied directly to high-dimensional data.
METHODS
What is a clusterAs said in Jain (2010), there is inherent vagueness in the definition of a cluster. We want to illustrate what a cluster is with a toy example.shows a density function of two Gaussian distributions when varying the mean of the first distribution. In, the means are fixed, and the proportion for the first Gaussian distribution is varied. Most figures show two distinct peaks. However, we can see that the data should be consideredis the density function of the Gaussian distribution with mean  and variance  2 , and  1 takes the values of 3, 1, and 1, respectively. The two componentsare respectively given by the red and green curves (A color version of this figure is available as Supplementary Material)as one cluster in Figures 1C and 2C, because there is only a single peak. An ideal cluster would be such that the corresponding probability density function has a unique peak (mode) and every point can move to the peak following a monotonically nondecreasing path. In this article, we use Kmeans as a building block to estimate the probability density function (see Sections 2.2 and 2.3), which is then used to partition the clusters based on the above consideration (see Section 2.4).
K-meansThe K-means algorithm has traditionally been used in unsupervised clustering, and was applied to flow cytometry data as early as in, and as recently as in. In fact, K-means is a special case of a Gaussian finite mixture model where the variance matrix of each cluster is restricted to be the identity matrix. Our use of K-means is not for the final clustering, but for a first partition of the cells, for which we can compute the smoothed density function. In the literature, the most popular K-means implementation is based on Lloyd's algorithm (). Since there are many local minima, the final clustering depends critically on the initial seeds. We used the seeds generation algorithm from the K-means++ algorithm (). Let x i = (x 1 i ,...,x d i ) be a d-dimensional vector for the measurements of cell i and c h be the seed vector for cluster h. Initially, a random cell is picked and assigned to c 1. To sequentially determine the seed for cluster k (k = 2, ,K), we first compute the minimum Euclidean distance for all cells to the previous k 1 seeds by d 2 i = min {h=1,,k1} x i c h 2 ,i = 1, ,n.A cell x i is selected to be the seed c k of the k-th cluster according to the probabilityAfter the seeds for all K clusters are assigned, Lloyd's algorithm (will iterate with the following two steps: assign each data point with a cluster label according to the smallest distance to the K seeds (cluster membership assignment step) and then recompute the center vector of all data points that are assigned with the same cluster label (center update step). The updated center vectors become the seed vectors for the cluster membership assignment step in the next iteration. We use a k-d tree representation of cells () for improved computing speed for the implementation of Lloyd's algorithm. After Lloyd's algorithm converged, we further applied the Hartigan and Wong's (1979) algorithm to recompute the cluster centers and cluster membership to decrease the objective function n i=1 x i c L i 2 , where L i  1,...,K is the cluster label of x i and c k is the center vector for cluster k  1,...,K. We could have applied the Hartigan and Wong's algorithm directly to the seeds, but the computation is too slow. In general clustering, it is important to specify a good K in the Kmeans algorithm. For our purpose, a very accurate specification of K is not necessary. However, it is still important that the K can give a smooth density in which the peaks can reveal the clustering structure. This specification of K is similar to the determination of the number of bins in drawing histograms. We adopted the formula of Freedman and Diaconis (1981)are, respectively, the minimum and maximum of the j-th dimension of the data) and IQR() is the interquartile range of the data, defined as the difference between the 75th percentile and 25th percentile. Then our K is defined as the median of K j 's, i.e.where  is the ceiling function that maps a real number to the smallest following integer.
Gaussian finite mixture to model the density functionAfter K-means, we may approximate the density function f (x) by the Gaussian finite mixture models,where the proportion w k of the k-th) is the probability density function of the multivariate normal distribution with mean  k and variance matrix k. After applying the K-means algorithm of Section 2.2, we have already partitioned the data into K clusters, and for the k-th cluster, we can compute the sample proportion w k , sample mean  k and sample variance matrix k (a rigorous writing would require the hat notation, which is ignored for the sake of simplicity). However, the estimate k may be too noisy, and we want to smooth the variance matrix bywhere h and h 0 are customized parameters tuned to make the density function smoother or rougher. The default setting in the software is h = 1.5 and h 0 = 1. Here,  k = nw k /(k +nw k ) so that a greater w k results in a  k closer to 1; 0 is the variance matrix assuming the data are uniformly distributed in the whole data range and is a diagonal matrix with its (j,j) element j,j,...,d.
Y.Ge and S.C.Sealfon
Peak search and mergingAccording to our definition, a cluster is defined by the local peak. For all cells, we can use the greatest gradient search (hill climbing) to find which local peak a given cell can reach. This rules out any global optimization strategy such as the conjugate gradient algorithm. It is computationally very time consuming to search all the local maximums of the density function for all cells. Since the cells are pre-grouped by the K-means, we only need to search the local peaks for the centers of the K-means clusters. The hill climbing method searches along the greatest gradient of the density function. If we take the negative of the density function as the optimization function, the hill climbing of peak search can be achieved by the deepest descent algorithm, which is implemented by the GSL library at http://www.gnu.org/ software/gsl/. We also need to restrict the step size in case it steps too far away and jumps to another local peak. When the data move from one Kmeans cluster into another K-means cluster, we can speed it up by moving directly to the center of the other cluster. When two peaks are relatively close, they should be joined together and considered as a single peak. We search the two peaks with the closest Euclidean distance and check if the two clusters may not be too different from a single cluster. The details on the local peak search and peak merging are described in the Appendix. Algorithm 1 gives the summary of the steps to use in K-means and density peak finding in order to cluster the flow cytometry data as implemented in the software flowPeaks. In the end, we will obtain K ( K) of merged clusters, each of which consists of one or many K-means clusters.3. Use the k-d tree data representations to apply Lloyd's Kmeans algorithm until it converges.
Further apply the Hartigan and Wong's K-means algorithm toimprove the compactness of the clusters., ,K using the partitions of the K-means.
Basedon the density function generated by Gaussian finite mixture model, compute the local peak starting from the centers  k , k = 1, ,K (see Algorithm A1 in the Appendix). 7. Apply Algorithm A2 in the Appendix to merge peaks hierarchically. 8. The K clusters of the final K-means algorithm are regrouped according to the merged peaks.
Cluster tighteningThe default setting in the flowPeaks algorithm is to not identify the outliers. Some data points may lie far from the center or cannot be unambiguously classified into a specific cluster. We determine whether a data point is an outlier using the following strategy. Let (x) be the final merged cluster label of data point x. Let  i and f i (x) (respectively) be the proportion and the probability density function of the i-th final merged cluster. The proportion  i is the sum of w k 's of the K-means clusters that form the i-th final merged cluster. The density function f i (x) itself is a Gaussian finite mixture based on the K-means clusters that are merged into the i-th final cluster, while the overall density function f (x) is based on all K-means clusters (see Section 2.3) and f (x) = K i=1  i f i (x). A point x is an outlier ifThe numbers 0.01 and 0.8 can be adjusted in the software settings.
RESULTS
DatasetsBarcode data: The data were generated for a barcoding experiment () with varying concentrations of flurophores (APC and Pacific Blue). The flow cytometry data have 180912 cells and three channels with an additional channel for Alexa. The manual gates for the 20 clusters to be used for assessing cluster algorithm performance were created from flowJo (www. flowjo.com). Simulated concave data: The data were simulated with two distinctive concave shapes based on the idea from the supplemental material of. It has 2729 rows and 2 columns. Both barcode data and simulated concave data along with their gold standard cluster labels are available in the flowPeaks package. GvHD dataset: Graft versus host disease dataset and the manual gates are obtained from. This dataset contains 12 samples, and the cells are stained with four markers, CD4, CD8b, CD3 and CD8. In addition, two channels FS and SS are also measured. These data are mostly analyzed based on the four markers unless specified otherwise. The numbers of cells of the 12 samples range from 12 000 to 32 000. Rituximab data: The flow cytometry data that are obtained from the flowClust package (). They have 1545 cells and two channels of interest. The data were originally produced by. The barcode data, simulated data and GvHD datasets have gold standard cluster labels (either by simulation or manual gating) to assess performance. The rituximab data are used for the purpose of exploration.displays all four datasets.
Different metrics to assess the cluster algorithm performanceThe most widely used metric to assess how a candidate clustering algorithm compares with the gold standard, for which the correct cluster membership is known, is the adjusted Rand index (). The Rand index () is based on the percentage of the agreement between the two clustering methods. Let us assume that n data points are labeled differently with two different clustering methods, say Method A and Method B with K A and K B clusters. Let A i ,i = 1,...,n and B i ,i = 1,...,n be the cluster labels for the two methods. The Rand index is defined asIn order to compute the adjusted Rand index, we first define the contingency tablesfor a = 1,...,K A , b = 1, ,K B. The marginal sums on the contingency tables are then defined as,b. The adjusted Rand index can be quickly computed using the following formula (The F-measure () is based on a greedy strategy to match the two clustering. It has been used in 2010s flowCAP I (http://flowcap.flowsite.org/summit2010.html) and in the flowMeans algorithm paper () to assess the performance of different algorithms. The F-measure is defined as. Rosenberg andproposed the V-measure to evaluate the clustering algorithm. This measure uses entropy to assess how much a second clustering provides extra information for the first clustering. For the clustering Method A, the entropy isand the conditional entropyThe conditional entropy H(A|B) is always no greater than the entropy H(A). The extra information provided by Method B for Method A is the reduced entropy H(A)H(A|B). After normalization, we can defineIn the above equation, by definition h = 1 if H(A) = 0. If we reverse the positions of A and B, we can define c = 1H(B|A)/H(B)I(H(B) = 0) If Method B is the candidate clustering to be compared with the gold standard clustering A, h evaluates the homogeneity of clustering for Method B, while c evaluates the completeness. The homogeneity ensures that the gold standard labels (A labels) for all data points of a candidate cluster B are unique. Completeness ensures that for each gold standard cluster (A cluster), data points are all assigned to a single candidate cluster (B cluster). Details can be found in Rosenberg and Hirschberg (2007). The V-measure is a weighed harmonic mean of h and c,. In this artice, we will fix  to be 1.displays the running time of all algorithms that are applied to the concave and barcode datasets described in Section 3.1. The algorithms flowPeaks, Misty Mountain (), FLOCK () and flowMeans () are falling into a category where the computational time is under several minutes so that they can compete with manual gating, while FLAME () and flowMerge () take too much computational time to be practically useful. Among the first four algorithms, a good seeding strategy and k-d tree implementation make flowPeaks a little bit faster than the other algorithms. When we applied the three metrics in Section 3.2 to assess different algorithms, we removed the outliers according to the gold standard. Tables 2 and 3 give the performance of different algorithms to be compared with the gold standard. We see that flowPeaks does quite well for the barcode data and the concave data. Due to the slowThe running time is shown in wall-clock seconds on the same desktop computer except that FLOCK and FLAME were run, respectively, at immport (http://immport. niaid.nih.gov) and gene pattern websites (http:www.broadinstitute.org/cancer/software/ genepattern)speed of flowMerge and FLAME and the difficulty to batch running FLOCK and FLAME, which are only available from a web interface, for performance comparison on the 12 samples in the GvHD dataset, we only selected flowPeaks, Misty Mountain and flowMeans, which are the three best algorithms according to Tables 2 and 3.shows that flowPeaks is better than the other two algorithms for the GvHD dataset. We have displayed the flowPeaks results for the four datasets in Figures 4A, 5AC. Since rituximab does not have a gold standard, the visual display shows that flowPeaks does a good job revealing the cluster structure of the data.displays the application of flowPeaks in the GvHD data when FSC and SSC channels are included. The clustering on 6D highly agrees with 4D with only 0.59% of points classified differently between 6D and 4D.
Application
Y.Ge and S.C.Sealfon
SOFTWAREWe have implemented the algorithm in C++ wrapped into an R package named 'flowPeaks'. The following example illustrates how to use the basic functions of this R package library(flowPeaks) data(barcode) fp<-flowPeaks(barcode) plot(fp,drawlocalpeaks=TRUE)The above R script will display. In order to identify the outliers to obtain, we can proceed further with the following script fpc<-assign.flowPeaks(fp,fp$x) plot(fp,classlab=fpc,drawboundary=FALSE, drawvor=FALSE,drawkmeans=FALSE,drawlab=TRUE)For further use of the software flowPeaks, one can consult the package's vignette pdf file and help documents.
DISCUSSION AND FUTURE WORKIn this article, we described the algorithm flowPeaks that combines the K-means and density function peak finding to partition the flow cytometry data into distinct clusters. We have compared our algorithm with other state of the art algorithms for real and simulated datasets. Our algorithm is fast and able to detect the non-convex shapes. We should point out that flowPeaks's goal is to find the overall density shape and search for global structure. It will not be able to uncover overlapping clusters as shown inor the rare cluster as shown in. The flowPeaks algorithm is based on the geometrical shape of the density function. Prior to apply flowPeaks, data transformation may be necessary to reveal the structure, and irrelevant channels need to be first discarded to avoid the curse of dimensionality. Due to the curse of dimensionality, if the data dimension is too high and the number of cells is too low whereThe same sample in (B) with FSC and SSC channels included. Due to the long running time required for the heatmap, 4000 data points were randomly selected to generate the cluster-tree and the heatmap. The three rows fp4D.lab, fp6D.lab and GS.lab, respectively, display the class labels of the flowPeaks on 4D, flowPeaks on 6D, and the Gold Standard, where different colors indicate different clusters. The signal intensities of all six channels are displayed in the heatmap with the key displayed on the bottom (A color version of this figure is available as Supplementary Material) the density function cannot be reliably estimated by flowPeaks, users should alternatively use the heatmap to visualize the data. As commented in Jain (2010), there is not a single clustering algorithm suitable for all datasets. This is probably true for flow cytometry clustering. There is not a good collection of flow cytometry data with gold standard gates, which makes algorithm comparison very challenging. The comparison in Section 3.3 should not be taken literally. We tend to agree withthat 'it is too early for extensive comparisons of automated gating procedure'. The current approach of using the manual gating as a gold standard to compare the automatic gating algorithm is very subjective. We participated with flowPeaks and support vector machine algorithm in 2011's flowCAP II (http:// flowcap.flowsite.org/summit2011.html). Our algorithm gave 100% prediction accuracy for the clinical flow cytometry data, establishing us as one of the best algorithms. We have released our datasets in our flowPeaks package with the gold standard gates so that one can test one's favorite algorithm with our datasets. The source code and windows binary built of the R package flowPeaks is available at https://github.com/yongchao/flowPeaks. The package is in the progress of being permanently hosted at the Bioconductor () with open source code for algorithm developers and batching processing.
APPENDIX
Mathematical notationFor the sake of clarity, we will use the following notation. Assume the data consist of n points in d dimension. Let the underlying clusters, obtained by K-means, be labeled as 1,...,K. The density function generated by the finite mixture model isthe weights, means and the smoothed variance matrix of cluster k, respectively, for k = 1,...,K. The derivative of the density function at x is defined as f (x) = f (x)/x. According to the K-means algorithm, the cluster label of x can be defined as
Searching the local peak starting from a point xAs we do not want to jump over the local peak, when the data fall into a cluster k, we define the maximum step sizeThe detailed computations for the local peak search are described in Algorithm A1. We initially set a small step size  (Step 0), and try to find a step size such that the density function f improves (Step 2 and Step 3). If the same step size improves twice in a row (N suc denote the number of continuous improvements), then we double the step size; otherwise we half the step size. If the point is falling into a new cluster, we want to find out if we can jump to the new center directly (Step 6). The details are described in Algorithm A1.
The algorithm on merging local peaksWhen two peaks are close and the density function between the two peaks is relatively flat, the two peaks should be combined into one. For each underlying K-means cluster, we define the nearest neighbor cluster distance by S k = min{{ k  i :i {1,...,K} and i = k}.For an arbitrary position x, we can similarly define the function S(x) = S L(x). Let x and y be two points, we define the tolerance that describes how the density function of the line segment that connects x and y can be approximated by a straight line
The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
