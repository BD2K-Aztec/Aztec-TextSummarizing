Multiple spaced seeds represent the current state-of-the-art for similarity search in bioinformatics, with applications in various areas such as sequence alignment, read mapping, oligonucleotide design, etc. We present SpEED, a software program that computes highly sensitive multiple spaced seeds. SpEED can be several orders of magnitude faster and computes better seeds than the existing leading software programs. Availability: The source code of SpEED is freely available at
INTRODUCTIONApproximate string searching is at the core of many fundamental algorithms in bioinformatics. Since the quadratic-time dynamic programming algorithm of SmithWaterman is too slow, heuristic methods have to be used. The most popular of those is implemented in BLAST () and uses the hit-and-extend approach: 11 consecutive matches are considered a hit and the neighborhood is investigated further for potentially local similarity. Such a match is called a seed. It has been noticed bythat requiring the matches to be non-consecutive increases the chance of finding similarities, andintroduced the idea of optimal spaced seeds, that is, seeds where the matches are distributed so as to maximize the sensitivity (i.e. probability to find a local similarity). Multiple spaced seeds () go much further and approach perfect sensitivity. Since then multiple spaced seeds have been used in many software programs in a variety of applications, such as sequence alignment () read mapping (), oligonucleotide design (), to name a few. It is therefore very important to compute seeds with very high sensitivity. The relevant problems are hard () and all heuristic algorithms for computing seeds require exponential time with the exception of the one of Ilie and Ilie (2007). Our goal in this note is to engineer this algorithm into an efficient software for computing multiple spaced seeds. The new program, SpEED, has two execution modes, fast and best. We have compared SpEED with the two leading software programs, Mandala () * To whom correspondence should be addressed.and Iedera () for a variety of seeds used in practice. SpEED-best computes always the best seeds with SpEEDfast coming often in the second place, whereas SpEED-fast is three to five orders of magnitude faster than all the other ones.
METHODSA spaced seed s is a string over the alphabet {1, * }, where 1 is a match and * a don't care. The number of 1's in s is called the weight of s. A multiple spaced seed is a set of seeds S ={s 1 ,s 2 ,...,s k }. In the Bernoulli model (), an alignment is represented as a (random) sequence R of 1's and 0's (matches and mismatches) where the probability p of a match is called similarity. The length of R will be denoted by N. A seed s hits R if aligning s with R at some position causes each 1 in s to be aligned with a 1 in R. A multiple seed S hits R if there exist s  S so that s hits R. The sensitivity of S is the probability that S hits R. It depends on S, p, and N. A dynamic programming (exponential) algorithm is given bythat computes the sensitivity of a given (multiple) seed. Finding optimal seeds by exhaustive search is feasible only for single seeds. The only polynomial-time heuristic algorithm () uses overlap complexity, a polynomial-time computable measure which is very well correlated with sensitivity. To avoid testing all possible seeds, the algorithm successively improves a fixed starting seed based solely on overlap complexity. The algorithm of Ilie and Ilie (2007) has the drawback of requiring the lengths of the seeds as input parameters. We have addressed this issue in SpEED by computing a number of good length sets and then interpolating those in order to produce good lengths for a wide range of parameters. To make the preprocessing feasible, we have developed an algorithm that computes all seed lengths from the minimum and maximum ones. (See Supplementary Material for details.) These values for k = 10 are shown in. SpEED-first is the multiple seed computed using these lengths. SpEED-best is the most sensitive seed obtained after a number of restarts with random lengths and seeds between the given min and max.
RESULTSWe have compared SpEED with the two leading software programs, Mandala () and Iedera ()Seeds were computed by Mandala, Iedera and SpEED (fast and best) with the same parameters as those of SHRiMP, PatternHunter II and BFAST. The number of iterations was: 100 000 for Iedera and 10 for Mandala (both according to the authors' instructions) and 5000 for SpEED-best. The maximum time allowed for all programs was 1 day; we give the times until the best seed was obtained.
L.Ilie et al.for computing seeds with some of the most challenging parameters used in practice: SHRiMP (), PatternHunterII () and BFAST ().gives the sensitivities, all of which were computed using the algorithm of. SpEED-best is the best in all cases considered with SpEED-fast coming often in second place. SpEED-first (times in bold) is three to five orders of magnitude faster than all the others, since it is polynomial-time. The improvement of the original seeds is significant. (A 1% improvement in sensitivity implies that, for 100x coverage of the human genome, an additional 3 billion nucleotides could be mapped by using the better seed.) An experimental evaluation of the SpEED seeds is given inby comparison with the optimal for three cases, where the parameters have been chosen such that exhaustive search is feasible and thesensitivities are in the low 80 s to maximize the difference to the optimal. The SpEED-best sensitivities are very close or even the same as the optimal.
CONCLUSION AND FUTURE RESEARCHSpEED-first is suitable for on-the-fly computation of seeds, whereas SpEED-best computes the best seeds, apparently very close to the optimal. Further development includes modifying the overlap complexity so that seeds of different lengths can be compared as well as addressing models different than Bernoulli, such as Markov.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from [12:50 30/7/2011 Bioinformatics-btr368.tex]
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
