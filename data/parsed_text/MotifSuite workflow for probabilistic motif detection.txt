Motivation: Probabilistic motif detection requires a multi-step approach going from the actual de novo regulatory motif finding up to a tedious assessment of the predicted motifs. MotifSuite, a user-friendly web interface streamlines this analysis flow. Its core consists of two post-processing procedures that allow prioritizing the motif detection output. The tools offered by MotifSuite are built around the well-established motif detection tool MotifSampler and can also be used in combination with any other probabilistic motif detection tool. Elaborate guidelines on each of its applications have been provided.
INTRODUCTIONProbabilistic methods, which search de novo for statistically overrepresented motifs in co-regulated genes, have been proven successful for the prediction of regulatory motifs. Due to the presence of local optima in the search space of possible overrepresented motifs, different initializations of a deterministic algorithm, such as MEME () or different runs of a stochastic algorithm, such as MotifSampler () will output non-identical motif predictions even when performed under identical parameter settings. A tedious post-processing is required to extract from this set of multiple candidate predictions, the most significant ones. MotifSuite streamlines this multi-step approach from de novo motif detection to the assessment of motif significance.
MOTIFSUITEMotifSuite () guides users through the procedure of probabilistic motif detection. It consists of six different applications, each with an own entry page where input files are uploaded and user parameters are defined. The applications can be used separately or the whole analysis flow can be run at once with consecutive applications being compatible. * To whom correspondence should be addressed.
MotifSuite applicationsA higher order background model (required for motif detection and scanning) can be selected from our database () or created with 'CreateBackgroundModel' (). De novo motif detection in co-regulated sequences is executed by multiple Gibbs sampling runs in 'MotifSampler' (). Compared with the previous release of MotifSampler, the current release provides extensions that allow better approximating the true number of motif instances in each sequence of a given sequence set. Each of the multiple motifs reported by MotifSampler is represented by a set of instances and is summarized by a position weight matrix (PWM). Probabilistic motif detection offers the advantage of prioritizing the most reliable motif predictions by performing a significance analysis on the combined output of multiple motif detection runs. To this end, two applications are provided: (1) 'MotifRanking' sorts a list of predicted motifs (PWMs) by their motif model score and groups together PWMs that represent the same candidate motif. The representatives of each group (i.e. the motif with the highest score in the group) are prioritized by their motif model score and the number of times they re-occurred among the multiple motif detection runs (i.e. only high scoring motifs that are representatives of a large group of similar PWMs are retained);
M.Claeys et al.and (2) 'FuzzyClustering'evaluates predicted motifs at their instance instead of motif model level. Ensemble motifs obtained by merging instances of multiple motif detection runs have been shown to more accurately describe true motifs than any of the individual motif solutions (). In FuzzyClustering, subsets of instances that were frequently detected together in multiple motif detection runs are grouped together into cluster(s) (). A cluster represents an ensemble motif from which spurious instance predictions have been removed and in which instances are prioritized according to their membership score. 'MotifComparison' computes the PWM similarity to curated motif models from precompiled or user-supplied databases to analyze whether detected motifs correspond to any known motifs. Besides the original similarity metric (KL), the current release of MotifComparison provides an alternative similarity metric [pBLiC, based on] that assigns more importance to similarity in motif positions that differ significantly from the genomic background assuming that such positions contribute most to the sequence-specific binding of a motif. 'MotifLocator' uses the PWM of a detected motif to screen (genome-wide) DNA sequences for potential novel motif instances.
Optimal useTo encourage the user to fully exploit the potential of our applications, we provide elaborated guidelines explaining the basic design of each application, the impact of its parameters and how to optimally evaluate its output. For most datasets, running our applications in the default workflow and at default parameter settings provides a reasonable answer. For particular datasets (e.g. with a different number of instances in different sequences), tuning parameter settings improves the detection of true motifs or at least provides a more accurate description of the detected motif. We provide elaborated case studies demonstrating the use of MotifSuite on 43 Escherichia coli sets of co-regulated sequences containing known motifs (). The MotifSampler case study shows, for example, that using a non-default setting for the expected number of instances per sequence (Statements 6 and 7) allows the detection of some motifs (four cases) that were missed under default setting and provided a more accurate prediction of the number of true instances for another set of five motifs. Another example is the use of the p-BLiC metric in MotifComparison instead of the default metric based on mutual information (used in MotifRanking) to assess the similarity to detected motifs (MotifRanking case study, Statement 2;). The case studies also show the complementarity between MotifRanking and Fuzzyclustering in post-processing the results of multiple MotifSampler runs. MotifRanking is best suitable to quickly assess whether a dataset contains any significantly overrepresented motifs (MotifRanking case study, Statement 1), whereas FuzzyClustering is better in retrieving the more reliable instances of a detected motif (FuzzyClustering case study, Statement 2). Alternatively, FuzzyClustering can be used to summarize the results of running MotifSampler at different parameter settings. Employing this scenario is, for example most suitable to find motifs having different unknown motif lengths in different sequences (FuzzyClustering will report instances of different lengths and build a single consensus PWM of most optimal motif length).
The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
DISCUSSION Conclusively, MotifSuite replaces INCLUSive (Coessens et al., 2003; Thijs et al., 2002b) which offered online access to the first release of MotifSampler. MotifSuite not only offers an improved release of MotifSampler but also provides a set of complementary methods for prioritizing and comparing motifs obtained by multiple runs of the Gibbs sampling tool. Because of their modular structure, the applications provided by MotifSuite can be used in combination with any probabilistic motif detection tool other than MotifSampler.
