Motivation: In systematic biology, one is often faced with the task of comparing different phylogenetic trees, in particular in multi-gene analysis or cospeciation studies. One approach is to use a tanglegram in which two rooted phylogenetic trees are drawn opposite each other, using auxiliary lines to connect matching taxa. There is an increasing interest in using rooted phylogenetic networks to represent evolutionary history, so as to explicitly represent reticulate events, such as horizontal gene transfer, hybridization or reassortment. Thus, the question arises how to define and compute a tanglegram for such networks. Results: In this article, we present the first formal definition of a tanglegram for rooted phylogenetic networks and present a heuristic approach for computing one, called the NN-tanglegram method. We compare the performance of our method with existing tree tanglegram algorithms and also show a typical application to real biological datasets. For maximum usability, the algorithm does not require that the trees or networks are bifurcating or bicombining, or that they are on identical taxon sets.
INTRODUCTIONIn systematic biology, one is often faced with the task of comparing different phylogenetic trees, in particular in multi-gene analysis or cospeciation studies (). One way to visualize similarities and differences is to draw two phylogenetic trees as rooted trees side by side and to draw lines (which we will call connectors) between taxa that correspond to each other in the two trees, see. Such a depiction is called a tanglegram and different variations of the problem of computing an optimal tanglegram have been studied in the literature. For example, a number of articles () consider the One-Tree Crossing Minimization (OTCM) and the Two-Tree Crossing Minimization (TTCM) problems that both aim at minimizing the number of crossings between connectors. In the former problem, the layout of one of the trees is fixed and that of the other is mutable whereas in the latter formulation the layout of both trees are allowed to be changed. For binary trees, OTCM is solvable in O(nlogn) time (), while TTCM is NP-complete (). In, the authors describe a 'seesaw' heuristic for the TTCM problem for * To whom correspondence should be addressed.. A tanglegram between a phylogeny of sections of Ficus (a) and that of their associated genera of pollinating wasps (b). Adapted from (). binary (or bifurcating) trees, which operates by repeatedly solving the OTCM problem, each time switching the roles of the two trees. A branch-and-bound approach for binary trees that works in O(n 3 ) time and gives a 2-approximation for complete binary trees is presented in. A generalization of the algorithm to unbalanced binary trees is described in, though in this case the approximation factor does not hold. In addition, this article gives an ILP formulation and an exact branch-and-bound algorithm for binary trees, where the latter has a worst-case running time of O(n 2 +n2 2n ). Other approaches use fixed-parameter tractability (FPT) parameterized by the number k of connector crossings (). A generalization to nonbinary trees is discussed in. The only algorithm that is able to compute tanglegrams for binary trees with many-to-many connections is described in. Their algorithm requires O(k log 2 k/loglogk) time (where k is the number of connectors) in the case that one tree is fixed. Additionally, they present some alternating and local search strategies for the TTCM problem. While evolutionary histories are usually described by rooted phylogenetic trees, in some cases rooted phylogenetic networks may provide a more accurate evolutionary scenario, especially when mechanisms such as horizontal gene transfer, hybridization, recombination, reassortment or incomplete lineage sorting have played a role in shaping the history. There is currently much research on the development of computational methods for computing rooted phylogenetic networks, for an overview see Huson and Scornavacca (2011a);. The goal of this article is to introduce the concept of a tanglegram for rooted phylogenetic networks and to provide a useful heuristic for computing such tanglegrams. Unlike trees, rooted phylogenetic networks are not necessarily planar and so the definition of an optimal tanglegram is not immediately obvious for them. Our heuristic does not require that the networks are bifurcating orPage: i249 i248i256
Tanglegrams for rooted phylogenetic networksbicombining, or that they both contain the same set of taxa. It can also be used to compare two trees, or to compare a tree and a network, of course. Moreover, the heuristic can also be employed to align the order of leaves for a whole collection of rooted trees or networks. The algorithm is implemented in our Java program Dendroscope 3 (), which is freely available from www.dendroscope.org.
BASICSThroughout this article, we follow the terminology and notation defined inand assume that the reader is familiar with graphs and related terminology. In this section we introduce some basic concepts and results.
Phylogenetic trees and networksLet X be a set of taxa. An unrooted phylogenetic network N on X is an unrooted, connected graph whose leaves are bijectively labeled by the taxa in X. A rooted DAG is defined as a directed graph that is free of directed cycles and contains precisely one node with indegree zero, called the root. A rooted phylogenetic network N on X is a rooted DAG whose set of leaves is bijectively labeled by the taxa in X. A node v in N is said to be a tree node if its indegree is less than two and a reticulate node otherwise. An edge of N is called a tree edge, unless it leads to a reticulate node, in which case it is called a reticulate edge. A (rooted) phylogenetic tree is a (rooted) phylogenetic network for which it is not possible to delete any edge without producing a graph that is not connected.
Clusters, splits and split networksLet N be a rooted phylogenetic network on X. Any tree edge e in N defines a cluster C(e) which is given by the set of all taxa that label leaves that lie below e in N. We use C(N) to denote the set of all clusters obtainable from N in this way. Let X be a set of taxa. A split A | B on X is a partition of X into two non-empty sets. Any edge e in an unrooted phylogenetic tree T on X defines a split S(e) = A | B, where A and B are all taxa that label nodes that lie on one side or the other side of the edge, respectively. A split A | B is said to separate two taxa x and y if they are contained in different parts of the split, that is, if |{x,y}A|=|{x,y}B|=1 holds. The restriction of a split S to a set of taxa X , denoted by S| X is defined as the split S = A |B , where A = AX and B = BX. Let be a set of splits on X. A weighting of is given by a map  that assigns a non-negative weight (S) to each split S . Let be a set of weighted splits on X. We define a distance matrix of split distances D() ={d xy } on X by setting d xy = S(x,y) (S), where (x,y) denotes the set of all splits in that separate the taxa x and y. If is unweighted, then we use this definition with (S) = 1 for all S. Definition 2.1 (Compatibility). Two splits A 1 | B 1 and A 2 | B 2 are compatible if at least one of the sets A 1 A 2 , A 1 B 2 , B 1 A 2 or B 1 B 2 is empty. Otherwise they are called incompatible. A collection of splits is compatible if and only if all splits are pairwise compatible. A set of compatible splits can always be represented by a tree (). More generally, any set of splits can always be represented by a split network N (). This isan unrooted phylogenetic network with the property that every split S = A | B in is represented in N by a set of parallel edges, such that deleting all edges in the set will result in exactly two connected components, one labeled by the taxa in A and the other labeled by B. A class of splits of particular interest are the circular splits.Definition 2.2 (Circular splits). A set of splits on X is called circular, if there exists a linear ordering  = (x 1 ,...,x n ) of the elements of X for such that each split S  is interval-realizable, that is, has the formfor appropriately chosen 1 < p  q  n.Such an ordering  = (x 1 ,...,x n ) is called a circular ordering for , as it holds that (x 1 ,...,x n ) is a circular ordering for , if and only if the inverse ordering (x n ,x n1 ,...,x 1 ) and (x 2 ,x 3 ,...,x n ,x 1 ) both are. Circular splits are of particular interest because any set of circular splits can always be represented by a split network that can be drawn in the plane such that no two edges intersect and all labeled nodes lie on the outside of the network, see.
The Neighbor-Net algorithmGiven a distance matrix D on X , the Neighbor-Net algorithm () computes a circular ordering  of X from D and then a set of weighted splits that are interval-realizable with respect to . A distance matrix D on X is said to be circular if and only if there exists a set of circular weighted splits on X such that D() = D. The following result asserts the consistency of the Neighbor-Net method:Theorem 2.3 [Neighbor-Net consistency (. Given a circular distance matrix D on X , the Neighbor-Net algorithm produces a circular ordering  and a set of weighted splits that are interval-realizable with respect to  such that D = D().
TANGLEGRAMS FOR ROOTED PHYLOGENETIC NETWORKSIn this section, we first develop the concept of a tanglegram for rooted phylogenetic networks and then define what we mean by an optimal tanglegram. We then develop a heuristic for computing an optimal tanglegram for two rooted phylogenetic networks. Let N be a rooted phylogenetic network on X. A topological embedding of N is given by a map that assigns to each node v in i249Page: i250 i248i256
C.Scornavacca et al.(a) ( b). This drawing induces a partial order of the leaves such thatof the set of its children. Note that any concrete drawing  of N induces such a topological embedding that is given by the order in which edges leave a node. Moreover, such a drawing defines a total order on X , which we will denote by  . Note that deletion of all reticulate edges in N produces a forest or collection of trees, {T 1 ,...,T k }, which we denote by F(N). For any tree T i in F (N), let X i denote the set of taxa that label leaves of T i. Note that T i is not necessarily a phylogenetic tree because some (or even all) of its leaves may be unlabeled. A topological embedding  for F(N) is given by specifying a topological embedding for each tree T i in F(N). Note that  induces a total ordering of the taxon set X i for each T i in F(N). While  determines a partial ordering <  of X , it does not specify a total ordering of X because the trees of F(N) are not ordered. Definition 3.1 (Non-interleaving order). Let N be a rooted phylogenetic network on X and let  be a topological embedding of F (N). A total order  on X is called non-interleaving with respect to  if for any two taxa a <  b, we have: 1. If a,b  X i for some tree T i , then a <  b;For example, for the phylogenetic network N on X ={a,...,l} and the concrete drawing  of the forest F(N) inis not because it violates condition (2) of Definition 3.1. What is the relevance of this definition? We want to be able to draw a rooted phylogenetic network N in such a way that we preserve the given topological embedding  of its forest and also that we place all leaves of the network along a line in the order specified by  and the root occurs on the outside of the drawing. The non-interleaving property ensures that this can be done in such a way that no two tree edges cross.
Definition of a tanglegram for networksLet N 1 and N 2 be two rooted phylogenetic networks on taxon sets X 1 and X 2 , respectively. We will use M  X 1 X 2 to denote a set of connectors between X 1 and X 2. If the two networks are on the same taxon set, then M is the set of identity connectors that connects each taxon to itself, which we will denote by M Id below for emphasis. In the case of a host-parasite comparison, M will pair hosts and parasites. Unlike trees, rooted phylogenetic networks are not necessarily planar and so the definition of a tanglegram is not immediately obvious for them: Definition 3.2 (Tanglegram for networks). Let N 1 and N 2 be two rooted phylogenetic networks on X 1 and X 2 , respectively, and let M be a set of connectors between X 1 and X 2. A tanglegram Z for N 1 , N 2 and M is specified by a system (where  i is a topological embedding of F(N i ) and  i is a noninterleaving total order of X i with respect to  i , for i = 1,2. Let N be a rooted phylogenetic network on X. Consider a concrete drawing  of N in the plane. We call  a rooted outer-labeled (tree-)planar embedding if all taxon labels are placed on a line, the root node occurs on the outside of the embedded network and no two (tree) edges cross. If N possesses a non-interleaving order  of X with respect to a topological embedding  for F (N), then there exists a rooted outer-labeled tree-planar embedding for N in which the taxa appear along a line in the order specified by . As mentioned above, the non-interleaving property of  ensures that we can lineup appropriate embeddings of all the trees in F(N) in the order induced by .consists of a rooted outer-labeled tree-planar embedding of both N 1 and N 2 , together with a set of lines representing the connectors between X 1 and X 2. Such a drawing of Z can be obtained in the following steps. First draw all trees in F(N 1 ) and F (N 2 ) in such a way that the two orderings  1 and  2 are respected and all the leaves of N 1 and N 2 are lined up in the order specified by  1 and  2. Second, add all reticulate edges to the diagram. These two steps can always be done in such a way that no two tree edges cross and that the roots of N 1 and N 2 occur on the outside of the drawing, due to the fact that both  1 and  2 are non-interleaving. Finally, draw lines between the leaves of the two networks so as to connect taxa as specified in M. Note that, if N 1 and N 2 are two trees, F(N 1 ) and F(N 2 ) coincide with N 1 and N 2 , respectively. This means that, in this case, a tanglegram between N 1 and N 2 define univocally the rooted outer-labeled tree-planar embeddings of N 1 and N 2. Giving an embedding, drawing a tree is straightforward (see), Chapter 13). Therefore, our definition of a tanglegram for two rooted phylogenetic networks generalizes the definition of a tanglegram for two rooted phylogenetic trees, and so, in particular, the problem of computing an optimal tanglegram for networks is NP-complete (). Let N be a rooted phylogenetic network on X , let  be a topological embedding of F(N) and let  be a non-interleaving total order on X. We define the reticulation crossing number as the minimum number of crossings involving reticulation edges in any drawing of N respecting  and . An optimal tanglegram can now be defined as follows:is called optimal if the crossings between connectors in M is minimized by  1 and  2 and, among the i250Page: i251 i248i256
Tanglegrams for rooted phylogenetic networkstanglegrams minimizing this value, it can be drawn so as to minimize the sum of reticulation crossing numbers for N 1 and N 2 .Let N 1 and N 2 be two rooted phylogenetic networks on X 1 and X 2 , respectively, and let M be a set of connectors between X 1 and X 2. For two linear orderings  1 and  2 of X 1 and X 2 , the number of crossings Cr( 1 , 2 ,M) among connectors in M can be calculated as |{(a,b)  M M | a = (p,q),b = (x,y) withheuristic that computes the reticulate crossing number for a drawing of a rooted phylogenetic network is described in ().
Neighbor-net heuristic for tanglegramsLet N 1 and N 2 be two rooted phylogenetic networks on X 1 and X 2 , respectively, and let M be a set of connectors between X 1 and X 2. For the purposes of this paper, we will assume that M pairs the leaves of the two trees in a one-to-one manner. (Note, however, that the example shown indoes not have this property.) If M pairs two distinct taxa a and b, as for example in a host/parasite study, then we identify the labels a and b with each other while computing the tanglegram, but then distinguish between the two labels when drawing the tanglegram. In the following, we present a heuristic for obtaining an optimal tanglegram for N 1 and N 2. We call this the NN-tanglegram approach. In our approach, we first compute a distance matrix H on the total set of taxa X = X 1 X 2 that reflects the topology of the two networks N 1 and N 2 , then apply the Neighbor-Net algorithm to H to obtain an ordering  of X , and finally construct a tanglegram for N 1 and N 2 based on . In the following, we will assume that both networks contain a single leaf connected to the root of the network that is labeled by a special taxon , which we will refer to as a formal outgroup. To compute a distance matrix on X , we need to construct a set of splits for each of the two networks. We describe the process for the network N 1. For each tree edge e in N 1 let C 1 (e) be the set of all taxa that label a leaf that lies below e in N 1. We define the split associated with e as C(e) | X 1 \C 1 (e). Let (N 1 ) denote the set of all splits obtained in this way. We compute (N 2 ) similarly and we then(The restriction to X 1 X 2 ensures the applicability of Theorem 3.5 if X 1 = X 2 ). We obtain the distance matrix H on X by setting the distance between two taxa x and y equal to the number of splits that separate the two taxa, where any split that occurs both for N 1 and N 2 is counted twice. In other words, we setIn the simulation study in Section 5.1, we will also present the results when using H = D path (N 1 )+D path (N 2 ) as distance matrix, where D path (N i ) ={d xy } such that d xy is the length of the shortest path between x and y in N i. As we will see, this variant actually performs better on networks than using splits-based distances. We apply the Neighbor-Net algorithm to the distance matrix H (or H in the case that the shortest path distance matrix is used) so as to obtain a circular ordering  = (x 1 ,...,x n ) of X. The ordering  is computed in this way because this ensures that the NN-tanglegram method returns the optimal solution under optimal conditions (see Theorem 3.5). Let i denote the position of the formal outgroup taxon  in . We obtain a linear ordering  of X by breaking the ordering  at position i, that is, by setting  = (x i ,x i+1 ,...,x n ,x 1 ,...,x i1 ). Given the ordering  of X , we now have to compute two embeddings  1 and  2 for the forests F(N 1 ) and F(N 2 ) such that  is noninterleaving with respect to  1 and  2. Given a rooted phylogenetic network N and a node u of N, we use X N (u) to denote the set of taxa that label the leaves below u. To compute  1 , we first delete all reticulate edges in N 1 to produce the forest F(N 1 ). Then, for each T *  F(N 1 ), we determine a topological embedding  * that minimizes the number of crossings among connectors Cr( * ,,M Id ), where  * is the ordering of X * induced by the embedding  * . This optimization is easily solved in a bottom-up traversal of each tree in F(N 1 ). Note that the place that is assigned to a node v such that X N 1 (v) = or X N 1 (v)| X 1 X 2 = in the the topological embedding of its parent is not relevant for the computation of the number of crossings among connectors Cr( * ,,M Id ) and so can be chosen arbitrarily. The set of topological embeddings for all trees T * in F(N 1 ) constitutes  1. To obtain  1 from  1 , we add the taxa of X 1 to  1 one by one, in such a way that  1 remains non-interleaving w.r.t.  1 and the value of Cr( 1 ,,M Id ) is minimized. The ordering  2 is computed in exactly the same way but using the network N 2 instead of N 1. Let C(N) be the set of clusters associated with N. We say that C(N) is interval-realizable with respect to  = (x 1 ,x 2 ,...,x n ) if each cluster C in C(N) has the form {x p ,x p+1 ,...,x q }, for appropriately chosen 1  p  q  n. We have the following result: Lemma 3.4 (Interval realizability). Let N be a phylogenetic network on X. If N has a rooted outer-labeled planar embedding  and   is the linear order on X that is defined by , then C(N) is intervalrealizable with respect to  . This lemma is used to prove the following theorem:Theorem 3.5 (Zero crossings solution). Let N 1 and N 2 be two rooted phylogenetic networks on X 1 and X 2 , respectively and let M be a set of connectors between X 1 and X 2. If a planar drawing exists for the tanglegram of N 1 , N 2 and M, then the NN-tanglegram heuristic will find a solution with zero crossings among connectors.The proof of both results can be found in Appendix A. Note that Theorem 3.5 ensures that, if an optimal tanglegram with cost zero exists for two trees, then our algorithm will find it, because a tree does not contain any reticulate edges. This is not true for networks. Indeed, in this case the Neighbor-Net algorithm may have more than one optimal solution. Theorem 3.5 ensures that any linear ordering  computed as described in Section 3.2 can be realized with zero crossings among connectors, but it does not guarantee that the resulting drawing will have zero crossings involving reticulate edges. For example, for the two networks in, both orders (a,b,c,d) and (b,c,d,a) are circular with respect to) and can be obtained from the distance matrix H using Neighbor-Net. Both orderings give a solution with zero crossings among connectors; yet, while a planar drawing for (a,b,c,d) exists [see, a drawing respecting the ordering (b,c,d,a) will contain some crossings involving reticulate edges and thus fail to be optimal [see. However, if all optimal solutions of Neighbor-Net given H can be considered, then the NN-tanglegram approach will find the solution with cost zero. In such a case, our algorithm can be used to solve the planar layout () or drawability problem () for two networks [solved in linear time for two binary trees in].
i251
C.Scornavacca et al.
Minimizing the reticulation crossing number and drawing the tanglegramThe previous section describes a heuristic for computing an optimal tanglegram. This heuristic aims at minimizing the crossings among connectors but it does not try to minimize the reticulation crossing numbers for N 1 and N 2. For example, if X 1 = X 2 then multiple choices of  1 and  2 can exist that minimize the number of crossing among connectors. In such a case, one of them is chosen at random, whether or not it happens to minimize the sum of reticulation crossing numbers for N 1 and N 2 (see Definition 3.3). In a forthcoming paper (), we will describe a heuristic for minimizing this value and a method for computing a concrete drawing of the optimized tanglegram that tries to minimize the crossing involving reticulation edges (as implemented in Dendroscope 3).
ALIGNMENT OF PHYLOGENETIC NETWORKSThe heuristic for calculating an optimal tanglegram for rooted phylogenetic networks that we describe in Section 3.2 is easily extended to a set of more than two rooted phylogenetic networks or trees, simply by computing the matrix H based on splits from all the networks or trees under consideration. This is implemented in our program Dendroscope 3 and can be used to 'align' the taxa when viewing a whole collection of networks or trees simultaneously.
VALIDATIONTo validate the approach, we first report on a simulation study that we have undertaken and then apply the algorithm to a published dataset to illustrate how the algorithm may be used in practice.
Simulation studyIn the first part of the simulation study, we compared our implementation with the best available software for computing tanglegrams of trees. In more detail, we compared against the bb-1st-sol algorithm, as it is the best performing algorithm of the five presented in, and against the lh algorithm, as it has similar performance to the other algorithms described in, while being faster. Since these algorithms only accept binary trees, we first restricted our attention to binary trees. We compared these two published methods against our NNtanglegram heuristic and two variants of it, which we will refer to as NN-tanglegram+1S and NN-tanglegram+5S. These two variants first compute  1 and  2 as described in Section 3.2, then define  as the order  1 restricted to the common taxa and finally use  to compute the new orders  1 and  2 as described in Section 3.2. NNtanglegram+5S executes this step 5 times, alternating  1 and  2 to compute the new . Since the NN-tanglegram heuristic performs similarly on trees when using the splits-based distance H or the shortest path distance matrix H , we will present the results only for the former variant. All runs were executed on a 2.53 GHz processor with 4 GB of RAM. For the first dataset, which we will refer to as D 1 , we created 6 random binary trees on the same taxon set for five different sizes, namely on 20, 60, 100, 140 and 180 taxa. This dataset contains 15 instances to solve for each taxon set. Each instance was formulated as an ILP (integer linear program) as described inand then solved using lpSolve (freely available from lpsolve.sourceforge.net/5.5/). The number of replicates considered for each parameter setting was limited by the long running time of the ILP solver. In the second dataset, D 2 , we created 10 random binary trees for each of the 5 sizes listed above, ensuring in each case that a tanglegram with zero crossings among connectors exists. This dataset contains 45 instances to solve for each taxon set. For each tanglegram and each method, we computed the performance ratio (PR), that is, the ratio (cn+1)/(cn opt +1), where cn and cn opt are the computed and the optimum number of crossings among connectors, respectively. The performance ratio values and the average running time for each method are shown in. For both datasets, the best-performing method is bb-1st-sol, having the lowest PR values and the lowest average running time. Note that this method is guaranteed to find a solution with zero crossings, if one exists (), just like our NN-tanglegram heuristic [see(d)]. However, the method is restricted to binary trees, unlike our method, which also applies to multifurcating trees. On the first dataset lh appears to perform well and its PR values are comparable with those of bb-1st-sol. However, when the number of instances per taxon set is increased (as in dataset D 2 ), this method can perform very badly for some instances [see(d)], although the average PR values remain low. Moreover, the average running time of lh is unacceptably high for use in an interactive visualization tool [on average >100 s when the cardinality of the taxon set is 180, see(a,c)]. Our new method, although designed for the general case of networks, also performs well for binary trees, while the average running time is low. Comparing the performance of NN-tanglegram with NN-tanglegram+1S and NN-tanglegram+5S, we can see that the swapping step, as expected, improves the PR values but increases the average running time. However, swapping one time (as done in NN-tanglegram+1S) is highly recommended because the achieved improvement of the PR values is worth the small increase in running time. In our implementation, the user can choose how many times to swap or can abort the swapping procedure after a given amount of time. In the second part of the simulation, we studied the performance of our methods on two different network datasets. For both i252Page: i253 i248i256datasets (D 3 and D 4 ), we created 15 random binary networks (not necessarily bicombining) on the same taxon set for 5 different sizes, namely on 20, 60, 100, 140 and 180 taxa, ensuring in each case that a tanglegram with zero crossings among connectors exists. This leads to 105 instances to solve for each taxon set. The two datasets differ by the probability to add a reticulate edge between two nodes, which is higher for D 4. (This implies that D 4 on average contains more reticulations than D 3 and thus is a more complicated dataset than the latter.) For both datasets, we compared the performance of NNtanglegram with NN-tanglegram+1S and NN-tanglegram+5S. Since the NN-tanglegram heuristic performs a lot better on networks when using the shortest path distance matrix H rather than the splits-based distance H [see(b), NN-tanglegram+1S vs, we will discuss the results only for the former variant. As expected, the PR values and average running times are higher than for the binary tree datasets but still acceptably low for use in an interactive visualization tool [see. The PR values increase both with the number of leaves and the number of reticulations in the networks [see(b,d)]. The pattern of relations among NN-tanglegram, NN-tanglegram+1S and NN-tanglegram+5S is the same than for the tree datasets (i.e. the swapping step improves the PR values but increases the average running time). In general, although the average PR values remain low, the methods can produce tanglegrams with high numbers of crossings among connectors for some instances. Note that, when the number of leaves in the networks is large, the crossing number can easily be very high. For example, if the two networks under consideration have 180 leaves each and if only one taxon is incorrectly placed at the two different ends of the networks, then the crossing number will be at least 179. Nevertheless, in this case the tanglegram may still be useful for visualizing similarities and differences among the two networks.
Tanglegrams for rooted phylogenetic networks
Application to published dataPersicaria is a genus of plants in the family Polygonaceae. In (), the authors present evidence of hybrid speciations within this genus using cpDNA regions and nuclear ITS sequences. The strict consensus tree from the most parsimonious (MP) trees and the maximum likelihood (ML) tree were computed and drawn superposed on each other for both the cpDNA and nuclear ITS datasets. A tanglegram between the two superposed drawings i253(one for the cpDNA dataset and nuclear ITS dataset, respectively) with crossing number among connectors 244 was shown. Here, instead of superposing the drawing of the strict consensus MP tree and the ML tree, we show both trees embedded in a network. The tanglegram between the network obtained by combining the strict consensus MP tree and the ML tree for the cpDNA dataset and the one obtained by the nuclear ITS dataset is shown in. This tanglegram is much clearer than the original representation (seeof).
C.Scornavacca et al.
CONCLUSIONSTanglegrams are a useful tool for comparing rooted phylogenetic trees. In this article, we have extended them to rooted phylogenetic networks and have described a practical approach to their computation. The simulation study proves that our new method, although designed for the general case of networks, also performs well for binary trees, while the average running time stays low. Moreover, the performance of our method on networks is good enough for use in an interactive visualization tool. Our implementation in the popular tree-drawing program Dendroscope will make tanglegrams for trees and networks easily accessible to biologists and other users.Page: i256 i248i256
C.Scornavacca
APPENDIX A
A.1 Proof of Lemma 3.4To obtain a contradiction, assume that C(N) is not interval-realizable with respect to an order  and there exists a rooted outer-labeled planar embedding  such that   = . Let C be a cluster in C(N) that is not interval-realizable with respect to . Then there exist three taxa a,b,c  X such that a,b  C, c  C and a <  c <  b. Let v be the target node of a tree edge in N that represents C and let p 1 and p 2 two paths connecting v to the leaves labeled by a and b, respectively. By definition of a rooted phylogenetic network, there exists a direct path p 3 connecting c to the root node . Since any p 3 cannot include v, the Jordan curve theorem implies that p 3 has to cross p 1 or p 2 , a contradiction.
A.2 Proof of Theorem 3.5For ease of exposition, assume that X 1 = X 2 holds. Since both N 1 and N 2 can be represented by rooted outer-labeled planar graphs, it follows from Lemma 3.4 that C(N 1 ) and C(N 2 ) are intervalrealizable for some orders  1 and  2 of X , respectively. From the definition of () we have that both (N 1 ) and (N 2 ) fulfill Definition 2.2 with respect to  1 and  2 and thus are circular split systems. Thus, by definition,) are circular. It follows, from the consistency of NeighborNet (Theorem 2.3), that the split set (N 1 )(N 2 ) is circular with respect to the circular ordering  computed by the Neighbor-Net algorithm. Note that also (N 1 ) and (N 2 ) are circular with respect to  and thus the linear ordering  is by definition a circular ordering for (N 1 ) and (N 2 ) too. The definitions of () and of  imply that the sets C(N 1 ) and C(N 2 ) are interval-realizable with respect to . It remains to be established that the ordering  1 (similar for  2 ) returned by the Neighbor-Net tanglegram heuristic is such that  1 = . To establish this, we have to show that, if C(N 1 ) is intervalrealizable with respect to , then there exists an embedding  1 of F(N 1 ) such that  is a non-interleaving order w.r.t.  1. Note that, for each T *  F (N 1 ) on a taxon set X * , the cluster set C(T * ) is a subset if C(N 1 ) and thus is interval-realizable with respect to ; second, C(T * ) is compatible. This implies that we can construct an embedding  * of T * with   * (T * ) = | X * that can be drawn in such a way that no two tree edges cross. Thus, the set of topological embeddings for all trees T * in
i256
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
i254 at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
