Motivation: The development of Approximate Bayesian Computation (ABC) algorithms for parameter inference which are both computationally efficient and scalable in parallel computing environments is an important area of research. Monte Carlo rejection sampling, a fundamental component of ABC algorithms, is trivial to distribute over multiple processors but is inherently inefficient. While development of algorithms such as ABC Sequential Monte Carlo (ABC-SMC) help address the inherent inefficiencies of rejection sampling, such approaches are not as easily scaled on multiple processors. As a result, current Bayesian inference software offerings that use ABC-SMC lack the ability to scale in parallel computing environments. Results: We present al3c, a Cþþ framework for implementing ABC-SMC in parallel. By requiring only that users define essential functions such as the simulation model and prior distribution function , al3c abstracts the user from both the complexities of parallel programming and the details of the ABC-SMC algorithm. By using the al3c framework, the user is able to scale the ABC-SMC algorithm in parallel computing environments for his or her specific application, with minimal programming overhead. Availability and implementation: al3c is offered as a static binary for Linux and OS-X computing environments. The user completes an XML configuration file and Cþþ plug-in template for the specific application, which are used by al3c to obtain the desired results. Users can download the static binaries, source code, reference documentation and examples (including those in this article) by visiting https://github.com/ahstram/al3c.
IntroductionWhen modeling biological phenomena, the presence of interacting factors can make the identification of the model's parameter distribution intractably complicated, creating an incentive to simplify the model. Rather than risk oversimplifying such a model, a numerical estimate of parameter distributions can be obtained using Monte Carlo rejection sampling methods. By repeatedly simulating data with randomly chosen parameters and considering the distribution of only those parameters responsible for simulations most similar to the observed data, one can make inferences about the model's parameter distribution given the observed data. When the proposed parameters for rejection sampling are generated from a prior distribution, the process can be classified as an Approximate Bayesian Computation (ABC) algorithm, as described in. Due to their reliance on rejection sampling, ABC algorithms are inherently inefficient.While basic ABC algorithms can trivially be accelerated by parallelizing simulations, more efficient methods of ABC are harder to parallelize. ABC Sequential Monte Carlo (ABC-SMC) improves the efficiency of ABC with an iterative method of rejection sampling, ultimately requiring less simulations and therefore less computation time (). Due to its sequential nature, ABC-SMC is less trivial to parallelize and as a result, existing software implementations byallows for the massively parallel execution of code on graphics processing units (GPUs), although this requires in-depth parallel programming knowledge. Researchers are therefore unable to scale an efficient method of ABC on multiprocessor computers or computing clusters without some parallel programming knowledge. To address this, we present al3c, an object oriented framework for implementing ABC-SMC in parallel without knowledge of parallel programming.
Software
ABC-SMC in Parallel Algorithmal3c implements a Sequential Importance Sampling derived ABCSMC algorithm () for parameter inference using userdefined functions which characterize the simulation model and the parameters to infer. If D is the observed data of interest and h the parameter(s) used to simulate data, we use ABC-SMC to estimate P h jD, the posterior distribution of h given D. Estimates are found by sampling h from a prior distribution p  h , then simulating data with each sampled h and accepting values of h that simulated data most similar to D. In subsequent generations we perform weighted sampling from the set of hs that were accepted in the previous generation, perturb each sampled parameter slightly to yield h*, and simulate data with h*. After a specified number of perturbed h*s have been accepted, we weight each and repeat the process iteratively. al3c's parallel implementation of ABC-SMC uses a 'single program multiple data' parallelization strategy via Message Passing Interface (MPI) libraries to decrease the computation time of the ABC-SMC algorithm. Multiple processors concurrently sample, perturb and evaluate parameters for goodness of fit independently of each other, using a common rejection threshold, until each processor has found its allocated number of acceptances. When each processor has completed its assignment, parameters are collected from each processor, weighted and re-distributed to all processors for the next generation of ABC-SMC. Since the simulation component of rejection sampling constitutes the vast majority of computation time in ABC-SMC, we expect our algorithm will scale linearly with respect to the number of processors used, despite the time spent synchronizing processors to accommodate for the sequential nature of ABC-SMC.
Examples
Estimation of demographic model parametersTo demonstrate the scalability of al3c, we configured the software to incorporate MaCS, a program designed to simulate large genetic sequences based on arbitrary demographic models (). Following the work of Gravel (2011), we defined a demographic model with seven parameters and compared summary statistics between simulations and 1000 Genomes data to test for goodness of fit (), as detailed in the Supplementary Information. For benchmark purposes, we first ran al3c on one processor, and found that after approximately 24 h its worst accepted simulation was of Euclidean distance 66.0 from our observed dataset. We repeated this analysis with al3c configured to run on 2128 processors and quit once each of the 1000 accepted simulations was of distance less than or equal to 66.0 from our observed dataset, and recorded the respective run time. Each compute node was equipped with two Intel Xeon 2.33 GHZ 4-core processors and 12 GB of memory.
al3c scales linearly with respect to processors availableEach time the number of processors available to al3c was doubled, the run time was reduced by approximately one-half, while each run saw a similar convergence in distribution for each of the seven examined parameters ().
Estimation of behavioral patterns in Drosophila fruit-flyabctoolbox, a prominent ABC-SMC software offering requires users to call an external simulation program with system calls (). In contrast, al3c supports both system and native function calls to existing C/C code. The use of native functions as opposed to system calls can significantly reduce the amount of overhead involved in initializing and running each simulation, particularly in cases where running a single simulation requires a relatively large amount of initialization steps, but the marginal cost of further simulations is minimal. To assess the advantage of using native calls, we configured al3c to simulate data using flysim, a Markov chain Monte Carlo simulator of Drosophila fly behavior () using both configurations.3.2.1 al3c computation times can be further improved through the use of shared libraries Running al3c by natively invoking the simulation via a function call to a shared library requires only one initialization per processor whereas calling flysim via system calls requires a fresh initialization for each simulation. We found that when configured with 128 processors and an acceptance distance criterion of 2.5, al3c completed
DiscussionWe have given two examples in which parameter inference of biological models was accelerated with the al3c framework. The literature on methods and programs for ABC inference is broad, and there are problems where parallel implementations are optimized to perform well for a narrower class of problems and may be a more appropriate choice, such as in systems biology (). al3c, however, provides the research community with the first available general-purpose ABC application that allows users to employ parallelized ABC-SMC in any context without knowledge of parallel programming. Future features for al3c may include automatic optimizing of rejection threshold schedules to prevent parameter estimates from converging to local maxima (), and GPU support to further parallelize individual simulations.
V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
N AFR is effective African population size, m AFR>EUR ; m EUR>ASN ; m AFR>ASN are migration rates from Africa to Europe, Europe to Asia, Africa to Asia, respectively, r EUR and r ASN are growth rates in Europe in Asia and P AFREUR is the time since Africa to Europe migration event.
A.H.Stram et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
