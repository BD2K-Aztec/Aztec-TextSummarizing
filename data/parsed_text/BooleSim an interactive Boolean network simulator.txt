
INTRODUCTIONSinceintroduced Boolean networks for biological simulations, they are extensively used to describe dynamic network behavior, especially when networks are big, experimental data scarce or only qualitatively available [i.e. cell cycle (), signaling () or stem cell differentiation (. Boolean networks can be visualized as a graph consisting of a set of nodes representing the species of the network plus a set of edges representing the interactions between these species. In Boolean networks, nodes can only take the discrete values 0 and 1. Biological entities are thus exclusively viewed as active or inactive, phosphorylated or unphosphorylated, expressed or not expressed and nothing in between. This is a simplification of reality, as biochemical species can be present in a continuous range of concentrations. However, signals are often transmitted via threshold crossings. Thus it is often appropriate to discriminate between two statesbelow and above the threshold which have different qualitative characteristics. Transitions between these states are defined by Boolean logical operations that can account for activation, inhibition and more complicated cooperative interactions. Thus the use of Boolean networks in mathematical modeling of biological processes is justifiable by its practicality (). Although software packages such as BoolNet for R (Mussel) or BooleanNet for Python () are available to simulate and analyze Boolean networks, these packages require downloading, installation and a certain basic knowledge of programing. Moreover, manipulating dynamic inactive node states. Beneath its graphical representation of the time course, the time series heatmap functionality is also helpful e.g. to identify cyclic attractors. To enhance interoperability, BooleSim supports exporting networks to Python BooleanNet or R BoolNet formats, export to and reimport from biographer's internal exchange format jSBGN allowing storing the graph alongside its update rules together in one file. The network graph and time series can also be saved as SVG vector image.
RESULTSTo demonstrate our tool, we imported a submodel of a published probabilistic Boolean network (PBN), describing epigenetic and transcriptional dynamics in somatic cell reprograming (). To transform the PBN into a deterministic Boolean network, we combined the update rules with the highest probability for every species. Results are shown in. The time series represents a reprograming process, i.e. the transition from a differentiated cell lineage A to the pluripotent cell state and the minimal set of manipulations that were effected to enable this transition with the simplified synchronous Boolean network (see).
CONCLUSIONWe presented a Boolean modeling tool that is easy to use and provides users with a qualitative insight into dynamic behavior of biological networks. As the first tool for that purpose, it has inbrowser functionality and works cross-platform. It enables userswithout the need for downloading but simply by opening their browser (Chromium recommended) and visiting the Web site http://rumo.biologie.hu-berlin.de/boolesim/to load their network and perform simulations and manipulations through clicking on the colored nodes. BooleSim is completely open source and licensed under the free software license GNU Affero General Public License (GPL) version 3. Source code and off-line version are available on the GitHub repository (https://github.com/matthiasbock/BooleSim). In the future, BooleSim could be extended to include stochasticity through asynchronous or PBNs, to find attractors or to represent state spaces.
simulations, i.e. changing initial conditions or perturbing a steady state, often requires advanced scripting abilities. Therefore, we wrote a simulator that runs visually in a browser and does not require downloading or installation. BooleSim, the Boolean network simulator, supports import of common model file formats, model simulation, easy manipulation through onclick functionality and visualization of a network's dynamical properties as well as export of the Boolean model, graphical network view and the time series. 2 METHODS AND FUNCTIONALITY BooleSim supports importing Boolean networks from Python BooleanNet, R BoolNet and jSBGN (Krause et al., 2013) formats. These are text based and define the nodes of the network and the Boolean update rules. During model import, a node is created for every variable in the model. After that, edges are created between every two nodes, which influence each other. This interaction can be positive, which biologically corresponds to stimulation or activation, or negative, which corresponds to inhibition. BooleSim uses modern web technologies, such as HTML5 and JavaScript to deliver a highly interactive BooleSim. The network is rendered as a dynamic scalable vector graphics (SVG), generated during runtime using the biographer-user interface (UI) interface (Krause et al., 2013). A force-directed graph layout algorithm, derived from the d3 gravity/repulsion-based algorithm (http://d3js.org/), arranges the nodes based on the size of the labels and length of the edges. The color of each node in the network graph denotes its respective state. Yellow refers to active and blue to inactive states. A node's state can be switched by clicking it, nodes can be added or deleted, whereas Boolean update rules can be edited in a separate text box tab. This manipulation is internally evaluated, translated into a new network layout and accounted for in the next simulation steps. As simulation progresses, nodes change color in a smooth transition effect, which is making use of jQuery features (http://jquery.com/). The simulation stops once a steady state is reached. In case a system converges into a cyclic attractor, the simulation continues until the user stops it by clicking the simulate/pause button. The evolution of the node's states can be monitored in the time series tab: On the left side of the graph, network nodes are listed in rows. Each column represents the state of the corresponding node in one iteration, where time is progressing to the right. In this heatmap representation, yellow represents active and blue *To whom correspondence should be addressed.  The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M.Bock et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
