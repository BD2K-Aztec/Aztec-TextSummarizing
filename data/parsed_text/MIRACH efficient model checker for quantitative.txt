Model checking is playing an increasingly important role in systems biology as larger and more complex biological pathways are being modeled. In this article we report the release of an efficient model checker MIRACH 1.0, which supports any model written in popular formats such as CSML and SBML. MIRACH is integrated with a Petri-net-based simulation engine, enabling efficient online (on-the-fly) checking. In our experiment, by using Levchenko et al. model, we reveal that timesaving gains by using MIRACH easily surpass 400% compared with its offline-based counterpart. Availability and implementation: MIRACH 1.0 was developed using Java and thus executable on any platform installed with JDK 6.0 (not JRE 6.0) or later. MIRACH 1.0, along with its source codes, documentation and examples are available at
INTRODUCTIONAs larger and more complex biological pathways are being modeled, the manual validation of these models becomes tedious if not impossible. Therefore, there is a growing interest in the development and application of model checking algorithms for biological pathway models. PRISM is a probabilistic model checker that is widely used in many different domains (). As PRISM is meant for a wide range of domains, it has its own specific PRISM format for models to adhere to.introduced BioLab, an algorithm to verify properties written in probabilistic bounded linear temporal logic, using the BioNetGen modeling (rulebased) framework. Genetic Network Analyzer (GNA) is software for the modeling and simulation of qualitative models in the form of piecewise-linear differential equations, which also includes the ability to do model checking (). Donaldson and Gilbert (2008a) developed a Monte Carlo offline-based model checker (MC2). MC2 has the advantage of being independent from the modeling framework and is able to perform model checking as long simulation results can be obtained. However, this implies that * To whom correspondence should be addressed. the full simulation needs to be completed and all traversed states recorded before model checking can commence. This wastes CPU and storage resources if the decision of validity or rejection for the simulation can be determined early in its execution. Online or onthe-fly model checking does the exactly this. It carries out model checking during the simulation run and results need not be recorded as simulation runs are only executed for as long as a decision needs to be made. In this article, we present an on-the-fly probabilistic model checker, MIRACH, for quantitative pathway models that supports popular formats such as SBML () and CSML (http://www.csml.org/). This quantitative model checker, MIRACH, would certainly be a valuable addition to the available arsenal of qualitative (GNA) and rule-based (BioLab) model checkers.As for the latter, we implemented Wilson interval () to estimate the confidence interval of the probability that the property holds. We have chosen to use Wilson interval instead of the simpler normal approximation interval because normal approximation is known to perform badly when the sample probability is close to 0 or 1 and fail completely when it is at 0 or 1. Due to this, one cannot devise a sequential sampling algorithm that stops sampling once the confidence interval falls below a certain value (user defined). Wilson interval does not have these limitations and allows us more flexibility and efficiency in our model checker.
PERFORMANCEIt is not difficult to appreciate that an online approach is almost certainly more efficient than offline in terms of time efficiency since it only runs as long as it needs to and does not read and write to the hard disk. One offline model checker similar to MIRACH is MC2 (PLTLc) by Donaldson and Gilbert (2008a). Both model checkers are written in Java and supports PLTL. Therefore, we will use MC2 (PLTLc) to illustrate the differences between online and offline checkers. To draw comparisons between the two model checkers, we need a sample model that can be run on both of the checkers. Our model of choice is a SBML model byas it was also used as an example in Donaldson and Gilbert's (2008a) paper. From, we see that MIRACH outperforms MC2 (PLTLc) and the time saved increases with sample size. When comparing the runtime for just 1000 samples, the time saved by using MIRACH is already 400%. The sample size needed depends on the problem at hand but in most situations, thousands of samples are insufficient especially with the growing trend of using model checkers as part of parameter estimation routine (). Our group has also combined MIRACH with parameter estimation () to investigate cell fate determination of gustatory neurons in Caenorhabditis elegans (). In that work, we had to run 20 million samples. Another performance measure is the minimum memory requirement. Precise memory requirements depend on several factors such as the model used and the properties to be checked. The memory requirement of online checking is likely to be higher than offline checking because the offline method does not carry out checking and simulation concurrently. As described in Section 2, in the checking step, MIRACH needs to store the values of involved species in memory (RAM) when a LTL cannot be decided (neither TRUE nor FALSE) at that time point. However, even in an extreme case, where there are 100 species involved and that property cannot be decided for 100 000 time points, the additional memory (RAM) needed is still <80 MB (100  100 000  8 bytes). Note that this memory space used will be freed once that particular simulation ends and will not increase with the number of simulation runs.
CONCLUSIONIn this article, we have presented an efficient model checker, MIRACH 1.0, for validating the ever-growing biological pathway simulation modelsboth in complexity and quantity. Major contributions include the implementation of the more efficient onthe-fly approach that saves significant amounts of computation time with minimal memory increase, the ability to accept quantitative models directly in the popular SBML and CSML formats, and the first model checker to be integrated with the HFPNe () simulation engine, an expressive and powerful Petri net framework for defining biological pathway models.
METHODS To build a model checker, one of the first steps is defining a formalism to express the rules to be checked. For MIRACH, we have decided to use PLTL (Probabilistic Linear Temporal Logic) because it is sufficient for probabilistic model checking in general and is easy to write and interpret. Due to space constraints, PLTL syntax and semantics are supplied as supplementary Material (Supp. Doc. 1). Our on-the-fly sample verification is as follows: at each time step of a simulation run, each LTL statement that has yet to be accepted or rejected is checked. A LTL statement is removed once its truth-value can be determined and the simulation stops when all LTL statements have been determined or the predetermined termination simulation time has been reached. If the LTL statement cannot be decided at a particular time point, the species involved in the LTL statement will be stored in memory for this time point as some temporal logics might need to refer to the values of previous states in order to make a decision. The above paragraph describes how MIRACH decides the truth-value of properties for a single simulation run. However, for stochastic models, each simulation run produces different results. To understand stochastic models, we would then need to consider issues such as, does the model satisfies the property with at least (or at most) probability  or what is the probability that a property holds. To address the former question, the sample efficient hypothesis testing (Younes, 2006; Younes et al., 2006) was implemented. Hypothesis testing implemented is based on Wald's sequential probability ratio test (Wald, 1945), which could determine after each sample run whether another sample run is required or a hypothesis could be accepted with the prescribed strength using available samples. This is more efficient as opposed to the estimation approach where the probability that the property holds is computed using a predetermined number of samples and compared with the .
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
