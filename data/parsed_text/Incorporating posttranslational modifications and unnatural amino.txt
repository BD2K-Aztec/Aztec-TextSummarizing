Motivation: Accurately predicting protein side-chain conformations is an important subproblem of the broader protein structure prediction problem. Several methods exist for generating fairly accurate models for moderate-size proteins in seconds or less. However, a major limitation of these methods is their inability to model post-translational modifications (PTMs) and unnatural amino acids. In natural living systems, the chemical groups added following translation are often critical for the function of the protein. In engineered systems, unnatural amino acids are incorporated into proteins to explore structure– function relationships and create novel proteins. Results: We present a new version of SIDEpro to predict the side chains of proteins containing non-standard amino acids, including 15 of the most frequently observed PTMs in the Protein Data Bank and all types of phosphorylation. SIDEpro uses energy functions that are parameterized by neural networks trained from available data. For PTMs, the 1 and 1þ2 accuracies are comparable with those obtained for the precursor amino acid, and so are the RMSD values for the atoms shared with the precursor amino acid. In addition, SIDEpro can accommodate any PTM or unnatural amino acid, thus providing a flexible prediction system for high-throughput modeling of proteins beyond the standard amino acids. Availability and implementation: SIDEpro programs and Web server, rotamer libraries and data are available through the SCRATCH suite of protein structure predictors at
INTRODUCTIONPost-translational modifications (PTMs) are critical to the function of many proteins in living systems, and understanding their effects at the molecular level is important for both basic and applied research in biology and medicine. To further this understanding, open databases of curated PTM information have been published. For instance, Phospho.ELM () is a publicly available database dedicated to phosphorylation. The database provides the exact positions of experimentally determined phosphorylation sites as well as information on the specific kinases that produce the modifications. Other databases such as PhosphoSitePlus, HPRD and PHOSIDA () include information on additional types of PTMs (e.g. ubiquitination, acetylation, methylation) but are still dominated by phosphorylation data. An automated curator of information on PTMs () found in Swiss-Prot () provides the following summary statistics: there are a total of 82 505 PTMs determined by experimental methods, with the following types having a frequency 41%: phosphorylation, 70.9%; acetylation, 8.2%; N-linked glycosylation, 6.8%; amidation, 3.5%; hydroxylation, 2.0%; methylation, 1.9%; O-linked glycosylation, 1.4%; ubiquitylation, 1.1% and pyrrolidone carboxylic acid, 1.0%. In addition to methods for curating and organizing existing PTM data, there are also methods for predicting which sites are modified in sequences with unknown PTM status. These methods typically use supervised machine learning, statistical and motif-based approaches to predict sites of phosphorylation (), acetylation (), glycosylation (), sumoylation () and less common types of PTMs as well (). Some of these methods predict both the specific phosphorylated sites and the specific kinases responsible for the phosphorylation (). In contrast with these approaches, the fundamental problem of predicting accurate three-dimensional (3D) models of PTMs in proteins has been largely ignored. None of the widely used or recently published side-chain prediction methods that are free for academic research () are capable of incorporating PTMs or unnatural amino acids into their predictions. The widely used templatebased modeling software Modeller () allows for manual creation of custom residues; however, the process for doing so is somewhat cumbersome and not realistic for most Modeller users. One notable exception is the incorporation of non-canonical amino acids into Rosetta () for computational proteinpeptide interface design (). The developers of side-chain prediction methods recognize the need for generating accurate models that incorporate PTMs; however, there are a number of practical challenges that have stymied progress in this area: (i) there are far less data in the Protein Data Bank (PDB) () for PTM *To whom correspondence should be addressed. residues than native residues for building rotamer libraries or developing statistical potentials; (ii) although one-character codes (e.g. A for alanine) work well for efficiently defining protein sequences, it is unfeasible to use one-character codes for all possible PTMs (there are 4100 PTMs documented in the literature); (iii) some important modifications (e.g. O-linked glycosylation) correspond to broad classes of chemical structures rather than a unique chemical structure, and each of the possible molecules would need to be uniquely identified; and (iv) modified residues are generally larger and contain more rotatable bonds than their natural counterparts. Beyond the 20 standard amino acids and their PTMs, there are also other natural or synthetic amino acids that can be incorporated into proteins. Two additional natural amino acids, selenocysteine (Sec,U) and pyrrolysine (Pyl,O), are coded in some species by codons that are usually interpreted as stop codons. Pyrrolysine, for instance, is used by some methanogenic archaea in enzymes used to produce methane. In addition, 440 unnatural amino acids have been incorporated into proteins through synthetic biology projects, often by creating a unique codon (recoding) and a corresponding transfer RNA, to explore protein structure and function and create novel proteins (). A tool for modeling the side chains of these rare natural or unnatural amino acids would also be desirable. Thus, despite the challenges described above, we have taken on the problem of rapidly generating reasonably accurate 3D side-chain models of proteins that incorporate amino acids beyond the standard 20 amino acids. In the remainder of this article, the term 'non-standard amino acid' (NSA) is used to refer to any amino acid other than the 20 standard amino acids. This includes PTMs, rare natural amino acids and unnatural amino acids.
METHODS
Training and testing datasetsBecause we use machine learning methods to predict the side-chain conformations of NSAs, we first describe our curated datasets. We distinguish the 15 more frequent post-translational modifications (FPTMs) from all the other NSAs because there are far more data available for them in the PDB.
NSA datasetThe PDB assigns a three-letter identifier to unique chemical structures. The system is used for standard amino acids as well as other chemical structures (e.g. ligands, NSAs) that have coordinates in PDB files. To curate a set of NSAs observed in protein structures, we started from a set of 1449 chemical structures identified as 'non-standard polymeric components' by the PDB. From this starting set, we first removed molecules that were not amino acids, leaving 614 amino acids after this step. Then, we downloaded all of the PDB structure files that contained one or more of these 614 identifiers, yielding 12 294 PDB files. Next, we checked the integrity of the peptide backbone for each potential NSA. If either peptide bond distance was 41.5 , a feature typically observed with less-constrained amino acids located at the beginning or tail of a protein, the NSA was excluded from the dataset, leaving 603 NSAs after this step. Next, we excluded any NSA that did not have at least one standard amino acid adjacent to it in the peptide chain. After this step, 549 distinct NSAs contained in 12 045 PDB files remained. The reason for this step was to exclude NSAs observed only in short peptides composed exclusively of NSAs that are never observed integrated into proteins. Then, we excluded NSAs that have no carbon or multiple carbon s because only amino acids with a single 1 angle are considered for the prediction stage. After this step, 459 NSAs contained in 11 543 PDB files remained. Next, we excluded proteins with NSAs with high B-factors (440) because of the uncertainty in the corresponding conformations. Finally, we removed redundancy at the protein sequence level using a sequence similarity threshold of 30% and set aside the data corresponding to the 15 most frequent PTMs (see next section on FPTMs). The final NSA (non-FPTM) dataset consists of 316 unique NSAs contained in 1308 PDBs files. The NSA (non-FTPM) dataset is used exclusively for estimating the generalization accuracy of SIDEpro (see below).
FPTM datasetOur main criterion for categorizing an NSA as a PTM was that a substructure of the NSA must be one of the standard 20 amino acids. We sought to discover the set of PTMs with sufficient instances in the PDB to allow for training and creating rotamer libraries. For this purpose, we set a threshold of at least 50 instances. We sorted the curated NSA dataset by the total number of times the NSA is observed in the PDB. Multiple occurrences in the same PDB file were counted as unique occurrences. After ordering the dataset, we observed that there were 15 NSAs with450 occurrences, and all of them were PTMs according to our definition.shows the chemical structures of the PTMs and their precursor standard amino acids (e.g. tyrosine is the precursor of phosphotyrosine) using the PDB atom naming scheme to label individual atoms. Selenomethionine (MSE) was associated with a particularly large number of PDB files, and thus we selected 500 of them at random. Finally, for each PTM, the corresponding files were split into five equal folds for cross-validation purposes. The total number of PDB files in the FPTM set is 1168. Supplementary Tables S1 and S2 contain summary information for all the NSAs in the final NSA and FPTM datasets, including PDB three-letter codes, SMILES representations and the corresponding list of PDB file names. Supplementarycontains the original training set for SIDEpro ().
Building rotamer libraries for NSAsA fixed rotamer is defined by a specific set of angles whose values are typically equal to the mean of the values observed in a set of corresponding side-chain conformations that cluster in 3D space. A flexible rotamer is defined by both the means and variances of each one of its angles. Both types of rotamers are widely used in side-chain conformation prediction, with rigid rotamer libraries () generally leading to faster, but slightly less accurate, algorithms than flexible rotamer libraries (). Although several rotamer libraries have been published for natural amino acids, only a few exist for NSAs ().
Flexible rotamer library for FPTMs For 14 of the 15 PTMsin this study, the atoms of the precursor amino acid that is being modified are a subset of the atoms in the modified residue. The exception is selenomethionine. Of the 14 FPTMs where the precursor atoms are a subset, 12 introduce new rotatable bonds (i.e. additional angles) that must be dealt with. The two FPTMs with proline as the precursor are the exceptions. For instance, serine (SER) has only one angle, whereas phosphorylated serine (SEP) has three angles. In, when FPTMs have additional angles, the last angle of the precursor amino acid is highlighted in red, and the additional angles in the FPTM are highlighted in green. For instance, inthe last angle of serine, corresponding to the CA-CB bond, is highlighted in red. The two additional angles, corresponding to the CB-OG and OG-P bonds in phosphoserine, are highlighted in green. Note that for phosphotyrosine (PTR), with tyrosine (TYR) as the precursor, the firstangle is treated as the last angle because the second (and final) angle corresponding to the CB-CG bond is non-rotameric (). The angles present in the precursor will be denoted by p , and those that are additional in the modified residue by a. To model the angles in FPTM residues that are present in the precursor residues ( p ), a standard native amino acid rotamer library was used without modification (). The additional angles in a were handled with a new customized method designed to accommodate cases where only few training instances are available, relative to the case of natural amino acids. For each FPTM type, except LLP and CME, we placed each i-th angle ( ai ) in a into one of three angle bins: (0, 120 ), (120, 240 ) and (240, 360 ). We calculated the corresponding means rai ai and standard deviations rai ai where r ai is a rotamer type for ai. By assuming that each angle is independent, a can be assigned to a maximum of R a  3 jaj rotamers (rotamers with zero counts are eliminated). For symmetric bonds (O-P bonds in LLP, SEP, TPO and PTR; CB-SG bond in OCS; NZ-C bond in KCX; and CE-NZ bond in M3L), because their angles are almost constant, we set their mean angle to 180 in the rotamer library. The angles for PCA are also constant, and thus we set 1  0 , 2  0 and 3  180 for PCA. In all these cases, we set the standard deviations to a small default value equal to 10. For LLP and CME, because they have many additional angles and more possible rotamers, we found that the prediction accuracy is lower comparing with other FPTMs, when using the library defined above. Because of this, we decreased the number of possible rotamers by decreasing the size of the bins. For LLP, the bins are (0, 120 ) and (120, 360 ) for a1 ; (0, 240 ) and (240, 360 ) for a2 and a4 ; (0, 180 ) and (180, 360 ) for a3 ; and a single bin (0, 360 ) for a5. For CME, the bins are (0, 180 ) and (180, 360 ) for a1 and a2 ; we treated a3 and a4 as fixed bonds with values 180 and 300. These bins were determined from the empirical distribution of a. We assume that a is dependent on the last angle in p , marked in red in, and referred to as p, last. This angle ( p, last ) is associated with one of three bins of equal size 120 as above. For each rotamer of p, last , we calculated the rotamer probabilities pr a jr p, last , where r a is the rotamer types for the additional angles, and r p, last is the rotamer typewhere r p is a rotamer for the precursor residue.
Restricted flexible rotamer libraryfor NSAs (nonFPTM) Our approach to the generic prediction of NSAs, which do not correspond to FPTMs, treats only the first 1 (usually CA-CB) as rotatable and considers the rest of the NSA structure as fixed. We built a general backbone independent flexible rotamer library for the 1 angle using the original SIDEpro training dataset () (listed in of Supplementary). First, the 1 angles for all natural amino acids (except alanine and glycine, which have no 1 angle) in the training set combined (not type specific) were calculated and placed into one of three bins: (0, 120 ), (120, 240 ) and (240, 360 ). The mean and standard deviation of the 1 angles for each rotamer bin were calculated. By default, the values of the i , i ! 2 angles are fixed to those of the original NSA structure. If a user provides multiple structures for a given NSA, SIDEpro automatically builds a uniform rotamer library for i , i ! 2. For the SIDEpro Web server and downloadable program, we use the COSMOS program () for predicting the conformations of small molecules to produce 10 conformations for each NSA that is not an FPTM. The FPTM/NSA rotamer library is given in Supplementary Table S4.
Training energy and predictionTo predict side chains, SIDEpro uses an additive energy function parameterized using a large number of neural networks trained from the data. All the neural networks have similar structure with one input unit corresponding to a distance between a pair of atoms, one hidden layer of hidden units and one linear output unit computing the corresponding energy term.
Neural networksFor natural amino acids, there are 156 neural networks, one per amino acid type and per atom pair type. For instance, the carboncarbon neural network for valine computes the 'energy' contribution associated with any pair of carbon atoms, where the first carbon atom is a non-backbone carbon atom in the valine residue under consideration and the second non-valine carbon atom is contained in a spherical neighborhood of 7 (this carbon atom could be on the backbone or side chain of another residue or in a ligand). These neural networks are part of the original SIDEpro program (); all the remaining ones are new. For the most FPTMs, there are 130 new neural networks, one per FPTM type and per atom-pair type. Thus, for instance, there is one carboncarbon neural network for phosphorylated serine. For NSAs (non-FPTMs), we use a more generic approach with 25 neural networks, one per atom pair type. Note that as a slight simplification in all cases, we consider only five atom types (C, H, N, O, S), treating P as if it were C and using H only in the second position of an interaction.
TrainingThe training pipeline is summarized in. For a given protein in the training set with a fixed backbone, we initialize each rotamer to the value closest to the native conformation. Then, we cycle once through each protein in the training set from the C-terminus to the N-terminus. When a given amino acid is being considered, we compute the energy of all its rotamers using the corresponding neural networks. These energies are converted into probabilities and then compared with the native conformation. The mismatch information is used to adjust the weights of the neural networks using Markov chain Monte Carlo methods [see () for more details]. For NSAs (non-FPTMs), we use the original SIDEpro training set (Supplementary Materials) of 252 proteins to train generic energy function neural networks using distances between pairs of atoms in all types of natural amino acids. The SIDEpro training set has no redundancy, at the 25% sequence similarity threshold, with the SCWRL4 () test set. We experimented with hidden layers of size 5, 10 and 15, noting in general, a degradation of performance with 5, but only small differences between 10 and 15. In all cases, we selected the hidden layer size, which maximizes the cross-validated accuracy (Supplementary Materials). Although we used 5-fold cross-validation to asses the approach, the final production server is trained on the entire data.
PredictionThe prediction pipeline is summarized in. In prediction, we are given a protein with a fixed backbone and possibly, also a set of additional atoms with fixed coordinates, which typically correspond to fixed side chains or atoms in ligand molecules. For the remaining amino acids, we cycle through them in random uniform order without replacement. Each amino acid has its own library of rotamers, and rotamer probabilities as described in Section 2.2. This is true for natural amino acids, FPTMs and other NSAs initialized uniformly over 10 conformations produced by COSMOS. For a given non-fixed amino acid, we compute the expected energy of each one of its rotamers, given all the other fixed atoms, rotamers and rotamer probabilities. These energy values are converted to probabilities, and the corresponding rotamer probability table is updated. The full cycle is repeated six times for each protein. It is important to note that the neural networks are used only once to compute all the possible energy values because the set of all possible pairwise distances, across all possible rotamer values, does not change during the prediction phase. For the final prediction, we choose the most likely rotamer configuration for each amino acid that is not fixed by the user. Finally, we run the same clash reduction algorithm as in ().
RESULTSWe evaluate the approach using three standard metrics: (i) RMSD for the side chain, which is calculated using the coordinates of the experimental structure, exactly as described in (
Generic energy versus amino acid-specific energyThe generic neural networks and the corresponding energy can first be tested on the 20 natural amino acids and compared with the amino acid-specific neural networks of SIDEpro. Comparison of these two approaches on the SCWRL4 test set, using the SCWRL4 rotamers (), are reported in, with a summary for each amino acid of the RMSD, the average 1 and average 12 and the corresponding P-values for a paired t-test on the RMSD. For each metric and each amino acid, the best results are shown in bold together with all P50.15. When all amino acid types are considered as a single large test set, the amino acid-specific neural networks produce slightly more accurate models according to all three metrics with high significance (P50:001). For 10 amino acid types, the amino acid-specific neural networks perform better than the generic neural networks significantly P50:03. Note that the generic neural networks produce better results for all three metrics for tyrosine and phenylalanine and for at least one of the three metrics for four other residue types. However, these differences are not statistically significant because there is no amino acid typefor which the generic neural networks perform better at a significant level P50:15. Taken together, these results show overall that (i) as expected, the amino acid-specific neural networks perform better than the generic neural networks on the natural amino acids; (ii) the generic neural networks are not far behind, with RMSDs below 1 most of the time, and provide reasonable models and a reasonable alternative, with considerably less parameters.
Prediction of FPTMsHere we compare the performance of the FPTM-specific neural networks and the generic neural networks for the prediction of FPTMs. One FTPM type, PCA, is excluded from the comparison because it has only one rotamer. We used 5-fold crossvalidation on the FPTM datasets.shows the average number of atom pairs used for training the FPTM-specific neural networks, the number of neural networks, the ratio of these two numbers and the corresponding cross-validated RMSDs and P-values for a paired t-test on the RMSDs of each fold. The best RMSD values are in bold together with P50.15. The number of training atom pairs divided by the number of neural networks provides a rough estimate of the number of examples used for training the neural networks of each FPTM. For four FPTM types (LLP, MLY, PTR and MSE), the FPTM-specific neural networks perform better than the generic neural networks with significance P50:15. These four types correspond also to the four highest values of the average number of training pairs per neural network, excluding KCX, which has a high P-value. For all FPTMs, except OCS and SEP, the specific neural networks perform better, although the difference is small. In the final program, we use the specific energy for all FPTMs.summarizes the cross-validated prediction accuracy results for the FPTMs, grouped according to their precursor amino acid, on the FPTM datasets. Each precursor amino acid is shown in bold together with the corresponding SIDEpro results. The table shows the average number of instances observed in the test set for each of the 15 FPTMs as well as the cross-validated results for the three accuracy metrics (RMSD, 1 and 12 ). Two average RMSD results are presented using: (i) only the atoms in common with the precursor amino acid; and (ii) all the atoms. The former allows for a direct comparison with the accuracy of SIDEpro on the precursor amino acid. Considering the RMSD metric, and only atoms shared with the precursor, the accuracy of the FPTMs is comparable with the accuracy of SIDEpro on the precursor amino acids. Four PTMs have lower mean RMSD than their precursor: KCX-lysine, M3L-lysine, MLY-lysine and MSE-methionine. When all the atoms in the PTM amino acid are considered, the average RMSD results are significantly higher, as expected because of the increase in size and number of rotatable bonds of each PTM side chain with respect to its precursor amino acid. Considering the 1 metric, six of the FPTMs have higher accuracy values than their precursor amino acid: CSD-cysteine, KCX-lysine, LLP-lysine, M3L-lysine, MSE-methionine and PCA-proline. Six other PTMs have 1 accuracy that is within 10% of the corresponding precursor amino acid result. Considering the 12 metric, only the PTMs associated with lysine, tyrosine, methionine and proline can be compared. Of the eight corresponding PTMs, where a direct comparison with the precursor atoms can be made, four have higher accuracy values than their precursor: KCX-lysine, M3L-lysine, MSEmethionine and PCA-proline. In short, by multiple metrics, theprediction accuracy of SIDepro on the 15 FPTMs is roughly comparable with its accuracy on the natural amino acids.
Prediction of NSAsThe generic NSA prediction method requires a 3D structure model of the NSA be provided as input, and to test the NSA method with more data, we tested it on both the FPTM and the NSA (non-FPTM) test sets. Structure models are derived from two sources: (i) true structures from the PDB; and (ii) conformations generated by COSMOS (). Results obtained using true structures do not reflect what can be expected from prediction in a realistic setting, but rather provide a sense of the limits of the methods. In true prediction mode, the structure of the NSAs must be generated by a small molecule structure predictor.reports the results of the generic NSA prediction method on the FPTM set, when the FPTM amino acids are treated as non-standard. The best results for each metric and each FPTM are in bold. In this experiment, for each modified amino acid, we use a single predicted structure obtained with COSMOS. As shown below, further improvements can be obtained by using multiple predicted structures. As expected, with a few exceptions, when the true structures are used as input the resulting models are more accurate than when predicted structures are used as input. Overall, the predicted structures lead to reasonable performance, given the complexity of the problem and the high-throughput nature of the approach. In all cases using predicted structure leads to RMSD values that are always 5 2.5 on the shared atoms. Finally,summarizes the results obtained on the NSA (non-FPTM) test set. For this experiment, we compare the results obtained using the true structure from the PDB, a single predicted structure and multiple (10) predicted structures as structural models for the NSAs. The best results for each metric are shown in bold. As expected, using the true structure provides the most accurate results, with an average RMSD of 1.75 and a 1 of 66.63%. Using multiple predicted structures helps improve the performance. For instance, the average RMSD improves from 3.54 to 3:08 A, a value that is reasonable, given the high-throughput nature of the approach and the complexity and variability of NSAs, but requiring further refinements for high-precision tasks. In terms of the 1 metric, using 10 structures improves the performance from 56.39 to 65.30%, a value close to the performance obtained using the PDB structures.
CONCLUSIONThe strength of SIDEpro is that it uses the wealth of data in the PDB to learn energy functions, parameterized by neural networks, to model and predict protein side-chain conformations. In this study, we have extended the capabilities of SIDEpro to PTMs and NSAs. For natural amino acids and FPTMs, when sufficient training examples are available, SIDEpro uses amino acid-specific energy functions. For all other PTMs and NSAs, SIDEpro uses a generic energy function. To flexibly accommodate for any NSA,SIDEpro allow users to provide 3D structures of NSAs to be incorporated into SIDEpro models. Alternatively, the COSMOS () program is used to predict these structures, and any other similar program [e.g. OpenBabel (O'can be used for the same purposes. The generic neural networks, trained on all possible pairs of atom types agnostic of residue type, are used to score the atomatom interactions for these NSAs. Naturally, as more data on NSAs become available in the PDB, it will be possible to further expand the set of specific energy functions, thereby increasing the accuracy of the program over time. As demonstrated here for some of the NSAs, accuracy can also be improved by increasing the number of 3D samples produced by COSMOS, at the expense of time. Finally, SIDEpro is to be used in protein structure prediction and engineering projects for the rapid prediction of side-chains conformations in high-throughput mode, or to provide good starting points for molecular or quantum mechanics simulations of side-chain atoms, for both standard and non-standard amino acids.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
K.Nagata et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Modeling of protein structures at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
