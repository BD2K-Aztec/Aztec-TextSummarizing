Sambamba is a high-performance robust tool and library for working with SAM, BAM and CRAM sequence alignment files; the most common file formats for aligned next generation sequencing data. Sambamba is a faster alternative to samtools that exploits multi-core processing and dramatically reduces processing time. Sambamba is being adopted at sequencing centers, not only because of its speed, but also because of additional functionality, including coverage analysis and powerful filtering capability. Availability and implementation: Sambamba is free and open source software, available under a GPLv2 license. Sambamba can be downloaded and installed from http://www.open-bio.org/wiki/ Sambamba. Sambamba v0.5.0 was released with
IntroductionProcessing speed matters, not only for diagnostics, but also for analysis and sharing of computational resources. Next-generation sequencing (NGS) is increasingly used as a genetic screening tool in diagnostics () and reducing time from sample intake to test result/diagnosis potentially saves lives. Introducing multi-core processing can accelerate steps in a pipeline when the CPU is the bottleneck (). Since its introduction by the 1000 Genomes Project (), the sequence alignment/map format (SAM) and its compressed binary counterpart (BAM) have become the de facto file formats used for storing and distributing NGS data. Samtools is the original tool for SAM/BAM files processing, including data extraction and filtering (). Recently, samtools added the CRAM format as a compressed alternative to SAM/BAM (). While samtools exploits the speed of the low-level C programming language and uses streamed data for efficiency, it has limited support for parallel processing (). Samtools has inspired a number of other BAM processors, notably Picard (), samblaster (), biobambam () and Scramble (), each of which is either slower than samtools, or offers a subset of its functionality. To accelerate analysis pipelines we created Sambamba, a new incarnation of samtools that fully utilizes parallel processing. Sambamba (which means 'parallel' in Swahili) is written in the D programming language, a modern programming language with runtime performance similar to that of C (). D has powerful abstractions for parallel computing which make it possible to scale computations with the number of cores ().
2032This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.
Bioinformatics
FeaturesSambamba introduces full parallelized data processing of SAM, BAM and CRAM files. Sambamba primarily uses D's parallel processing capabilities. For CRAM support the htslib C-library was linked against (). And for mpileup support the original samtools program is called in map-reduce fashion. This resulted in improved processing speed on multi-core computers (). Sambamba is most effective on machines where CPU utilization is the constraining factor (). The gain may therefore be limited on cluster setups where shared storage is a bottleneck (e.g.). Compatibility: Sambamba is a robust replacement for the commonly used samtools commands: INDEX, SORT, VIEW, MPILEUP, MARKDUP, MERGE and FLAGSTAT. The output of sambamba compares to that of samtools, except for markdup, where the Picard 'sum of base qualities' method was chosen. Sambamba's RAM utilization compares to that of samtools; only with SORT sambamba uses significantly less RAM. New functionality: Sambamba adds new functionality compared with existing tools. To be able to calculate coverage statistics, read DEPTH analysis was added. To speed up splitting BAM files, SLICE was added which copies large regions without decompression. And when a BED file is supplied to VIEW, the index is used to decompress only those regions that are actually visited. To further shorten processing time, index files are created on the fly by SORT, view, markdup and MERGE. And to combine multiple steps into one, powerful filtering with logic operators and regular expressions was added. For example, to filter on mapping quality and CIGAR mapping_quality > 30 and cigar ~/ ^ \dM1I\dM$/ Finally, to make it easier to process results, sambamba VIEW can generate output in the standard JSON format. Source code: Sambamba abides by the rules of the 'Small tools MANIFESTO for Bioinformatics' (). The sambamba source code is extensible and maintainable. For SAM parsing we opted for Ragel, a finite-state machine compiler, which generates a fast look-ahead parser with input validation, making the code base even more compact (). Sambamba uses a unit testing framework with continuous integration testing, so that existing functionality is validated every time the code base is changed.
ConclusionSambamba is a software engineering example that shows how to make effective use of the D programming language and multi-core computers to reduce the time needed to get from sample to result. Whole genome sequencing and growing sample numbers make such performance improvements increasingly relevant.. Processing speed comparison of samtools and sambamba. Wall-clock time (s) versus number of threads to convert an 11-GB CRAM (1000 genomes HG00110) to 108-GB SAM. With Samtools, VIEW is bound to a single thread at CPU 90%. With Sambamba, IO gets saturated at approximately CPU 250%. When using a faster RAM-disk, IO gets saturated at approximately CPU 350%. For samtools a RAM-disk makes no difference. When adding more threads, performance reproducibly degrades because of CPU cache contention. All timings were performed on a server-class machine with 512 GB of RAM and 48 CPU cores (4  12-core AMD Opteron(tm) Processor 6174 @2.2 Ghz with
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Mb L2 cache) Samtools version v1.0-15 using htslib v1.0-1 and sambamba v0.5.0 compiled with the LLVM D-compiler v0.14.0.
