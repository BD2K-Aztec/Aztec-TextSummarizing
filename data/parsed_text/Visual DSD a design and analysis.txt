The Visual DSD (DNA Strand Displacement) tool allows rapid prototyping and analysis of computational devices implemented using DNA strand displacement, in a convenient web-based graphical interface. It is an implementation of the DSD programming language and compiler described by Lakin et al. (2011) with additional features such as support for polymers of unbounded length. It also supports stochastic and deterministic simulation, construction of continuous-time Markov chains and various export formats which allow models to be analysed using third-party tools. Availability: Visual DSD is available as a web-based Silverlight application for most major browsers on Windows and Mac OS X at http://research.microsoft.com/dna. It can be installed locally for offline use. Command-line versions for Windows, Mac OS X and Linux are also available from the web page.
INTRODUCTIONNovel techniques for designing and manipulating synthetic DNA are making it possible to construct increasingly sophisticated biological computation devices. One such technique is DNA strand displacement () in which hybridization between complementary DNA strands is the sole computational mechanism. Designing novel biomolecular computing devices has practical benefits as well as offering fundamental insights into understanding life as biomolecular information processing. As these devices increase in complexity, it becomes intractable to calculate the low-level interactions between the DNA species by hand. Thus, one of the main barriers to continued progress in this nascent field is the lack of automation and abstraction in the design process. Visual DSD implements a domain-specific language whose syntax is tailored to allow concise encodings of the species in a DSD system. The DSD programming language is described in (). The system automatically computes all possible reactions between the species, providing the benefits of a reaction-based approach without the difficulty of manually constructing the reaction network. * To whom correspondence should be addressed.The user can choose an appropriate level of abstraction in the compilation process, from low-level detailed views to higher level simplified views. The design can then be visualized and analyzed to eliminate any unwanted behaviour. Visual DSD provides suitable analysis tools both for large-scale designs involving many thousands of formal and intermediate species, such as DNA logic gates (), and for systems involving low species populations, such as DNA implementations of stack machines ().
METHODS AND IMPLEMENTATION
Encoding systemsProgram code is entered using the syntax from, as shown on the left-hand side of. Our domain-specific language for DNA strand displacement includes support for parameterized modules which can be instantiated multiple times in a program. This encourages good software engineering practices such as code reuse and modular design. Settings which are specific to a particular system, such as the default reaction rates and the populations to plot during a simulation, are specified within the program code. More general settings, such as whether to use a stochastic or deterministic simulation, are selected through the graphical user interface. Input programs are checked for type safety and well-formedness of the DNA species before being passed to the compiler, though some of these checks can be disabled to allow rapid development of programs. The tool includes a variety of example programs and an integrated tutorial. A manual is available on the web page that contains a formal definition of the syntax.
Compilation, simulation and analysisVisual DSD implements the compilation scheme outlined in, with an extension to support reactions which form DNA polymers. The user interface offers a selection of semantic rules, which formalize the possible interactions between the DNA species with varying levels of detail. This provides a great deal of flexibility. Visual DSD includes a stochastic simulator that uses the Gillespie algorithm () to generate trajectories when the entire chemical reaction network has been pre-computed. There is also a deterministic simulator that uses the RungeKutta-Fehlberg method () to solve an ordinary differential equation model. For systems where the chemical reaction network is very large (or infinite, in the case of polymer systems), there is a just-in-time compiler which allows the reaction network to be computed incrementally as needed during a stochastic simulation (). This can produce significant performance gains in certain situations. The tool can also construct and visualize the continuous-time Markov chain of a (sufficiently small) system, which is particularly useful for low-level debugging of individual circuit components.
Visualization and exportVisual DSD offers numerous visualizations of the DNA species in the system, using the graphical notation introduced in. These range from the structure of the individual DNA species through pictorial representations of individual reactions (as shown on the right-hand side of) to a graph-based visualization of the entire chemical reaction network or continuous-time Markov chain. Simulation results are plotted as line graphs of species populations over time. Simple arithmetic functions on populations can also be plotted. The tool can also output nucleotide sequences as a starting point for construction of the systems. Data and models can be exported from Visual DSD in a variety of formats. Chemical reaction networks can be exported to SBML () and the time series data from simulations can be saved in CSV format for loading into a spreadsheet. Continuous-time Markov chains can be exported as a model for the PRISM probabilistic model checker (). The user can then express system properties as temporal logic formulae and verify them using stochastic model checking (). PRISM can also perform detailed quantitative analysis of reaction kinetics. Examples queries include the probability of reaching a given state within a particular time, or the probability of reaching an undesirable state due to interference between DNA strands.
DISCUSSIONVisual DSD has been used to model and analyse a wide range of DNA strand displacement devices, including logic gates (), neural network computation (), fork and join gates (), oscillators () and a range of other devices including catalytic gates and schemes for simulating arbitrary chemical systems (). Note that secondary structures such as hairpin, pseudoknot and multiloop junctions are not currently supported; however, some of these structures, including hairpins, are currently under development for a future release. We have found that the tool is particularly beneficial when designing new systems from scratch, as the visualizations make it easy to debug programs. Support for reusable modules in program code makes it quick and easy to construct new, larger systems using pre-designed components. The tool embodies the scientific workflow and can increase efficiency and productivity of DNA device design and analysis by allowing users to simulate systems before attempting to build them in the lab, thereby saving time and lab resources. It also enables in silico investigation of the behaviour of systems that are beyond the current state of the art in fabrication, such as particularly large and/or complex systems. Furthermore, once a design has been formalized in the DSD language it becomes possible to perform formal verification of certain aspects of its behaviour, for example using a stochastic model checker or a theorem prover. We are continually developing the software and adding new features.
The Author(s) 2011. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/3.0), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
