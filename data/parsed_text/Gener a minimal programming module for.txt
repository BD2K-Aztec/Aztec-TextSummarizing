Gener is a development module for programming chemical controllers based on DNA strand displacement. Gener is developed with the aim of providing a simple interface that minimizes the opportunities for programming errors: Gener allows the user to test the computations of the DNA programs based on a simple two-domain strand displacement algebra, the minimal available so far. The tool allows the user to perform stepwise computations with respect to the rules of the algebra as well as exhaustive search of the computation space with different options for exploration and visualization. Gener can be used in combination with existing tools, and in particular, its programs can be exported to Microsoft Research's DSD tool as well as to LaTeX.
IntroductionOne of the goals of synthetic biology is constructing information processing systems for controlling biochemical systems at the molecular level. Such an achievement would pave the way for applications, e.g. to smart therapeutic devices that are capable of sensing their environments (). Within a broad spectrum, various technologies are being developed to address different aspects of this vision. Applications in DNA nanotechnology aim at harnessing the complexity of biochemical dynamics to control active molecular devices in vivo (). Technologies based on DNA strand displacement algebras, in particular, the double-stranded architecture with nicks on one strand () is proving to be effective also in wet lab implementations of formally designed experiments (). The double-stranded DNA strand displacement algebras perform computations as a result of the interactions between single and double-stranded DNA structures: the single-stranded structures act as signals that are processed by double-stranded structures that act as gates. The mechanism with which the signals are processed by the gates is toehold-mediated branch migration and strand displacement (). By using this machinery, one can program, e.g. systems of chemical reaction networks that operate at the molecular level (). In this setting, a single chemical reaction step is emulated by a sequence of DNA-strand displacement operations. Because an increase in additional steps introduces more opportunities for errors in design, simpler schemes for designing these molecular programs become more favorable. In this respect, two-domain DNA strand displacement scheme provides a good platform for developing molecular programs as it is minimal in design while being sufficiently expressive for describing chemical reaction networks that are of interest from the point of view of molecular programming ().
2906This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/by-nc/4.0/), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.comGener is a programming module that implements the twodomain DNA strand displacement algebra described in Cardelli (2013). With Gener, the user can write a two-domain strand displacement program, and test its stepwise computations. The programs can be analyzed by exhaustive search of the computation space, and the computations can be visualized in a tree representation with different options. Gener can be used in conjunction with Microsoft Research's DSD tool for simulation and analysis purposes as Gener programs can be exported to DSD (), and computation traces can be exported to LaTeX for visualization. Gener contains introductory examples in its menu, which should be useful for a quick start. A manual is also available on the web.
MethodsGener programs consist of single-and double-stranded DNA structures, which are entered in the DNA Soup field at the top of the GUI. Gener aims at designing DNA displacement systems on the high abstract level, and uses the previously established notations (). Gener can be used to observe the computations of the input DNA program. In the default setting, the user can choose from all the possible instances of the reduction rules by reducing the input, and proceed by applying the rules incrementally to observe a possible computation trace of the DNA soup. At each step, the resulting strands and the computed derivation are displayed. An example derivation is shown in. At each step during reduction, the user can perform a 'backtrack' action by clicking the corresponding button of the GUI to return to the previous step. Alternatively, the user can perform an exhaustive search of the computation space and choose from the available traces for displaying it. This is done by choosing the search option from the settings menu of the GUI. A search can be performed with further options: a simple search (without any further options being chosen) displays an enumeration of the available terminal computations of the strand structures by pruning the redundancies in the search space, and prompts a dialog window for the choice of the trace to be displayed. Choosing the all paths option for the search enables the enumeration of the computations with alternative paths, and the variations option includes to the enumeration also those paths with the same terminal as another path, but with an alternative trajectory. Along with the search, the user can display the search tree, and with this, all the intermediate computations are listed in a reserved field. In the displayed search tree graph, different rules are denoted with different colors, which are listed in a legend. Choosing the equal nodes option includes a visualization of the nodes that result in the same DNA strand structures, which are connected with dashed gray lines in the search tree. The screenshot of a search tree visualization with an example is depicted in. By using the file menu, Gener DNA strand displacement programs can be exported to Microsoft Research's DSD language for simulation and analysis, and computation trajectories can be exported to LaTeX for typesetting.
DiscussionGener is developed for performing in silico experiments in design and debugging of DNA strand displacement systems. Potential applications include designing DNA sequences from desired DNA domain structures (). The search feature is useful for verification and analysis of reachable states of the designed systems. The sequences can then be ordered from Integrated DNA Technologies (IDT) and executed in a basic wet lab with a fluorometer for reading the output (). The features of Gener are only limited by its minimalistic design, avoiding duplication of effort, and imagination. We thus foresee extensions as they will be required.. One of the two composed domains can be a short domain, denoted with 't'. Any other string consisting of letters denotes a long domain. Complemented double strands are written in angle brackets '<' and '>', and they denote double strands consisting of strands and their WatsonCrick complements. We denote nicks on double strands with '^', which are the interruptions on one side of the double strand that make the interactions between the signals and gates possible. A screenshot of a search performed on an example. For the search, 'all paths' option is chosen together with the display options 'search tree' and 'equal nodes'. The gray lines between the nodes denote equal nodes
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
O.Kahramanog  ullar and L.Cardelli at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
