TFInfer is a novel open access, standalone tool for genome-wide inference of transcription factor activities from gene expression data. Based on an earlier MATLAB version, the software has now been extended in a number of ways. It has been significantly optimised in terms of performance, and it was given novel functionality, by allowing the user to model both time series and data from multiple independent conditions. With a full documentation and intuitive graphical user interface, together with an in-built data base of yeast and Escherichia coli transcription factors, the software does not require any mathematical or computational expertise to be used effectively. Availability: http://homepages.inf.ed.ac.uk/gsanguin/TFInfer.html Contact:
INTRODUCTIONTranscription regulatory networks play a fundamental role in mediating external signals and coordinating the response of the cell to its changing environment. Recent technological advances in molecular biology, such as ChIP-on-chip and ChIP-seq, are uncovering an increasing amount of data about the static structure of these networks, providing us with information about interactions between promoters and specific transcription factors (TFs). However, despite these advances, intracellular concentrations of active TF proteins remain very challenging to measure directly in a dynamic fashion, thus limiting our ability to understand the dynamics of transcriptional regulation. To obviate these problems, several research groups have proposed statistical approaches that infer TF activity levels by combining connectivity data about the structure of the regulatory network with microarray data (e.g.). In this note, we present a novel implementation of one of these methods () which makes it freely available to the academic community in an intuitive, user-friendly platform. The method employs a linear approximation (in log space) to the dynamics of transcription and is * To whom correspondence should be addressed. based on a state space model of the following formHere, y n (t) is the mRNA log expression level for gene n at time t, X is a binary connectivity matrix (assumed known) encoding whether gene n is bound by TF m, b nm encodes the regulatory strength with which TF m affects gene n and c m (t) is the (log) concentration of active TF m at time t; the other terms are used to model noise and biases. The model places Gaussian prior distributions over the concentrations c m (t) and strengths b nm and uses a factorized variational approximation to infer posterior distributions given mRNA time course observations. Notice that the probabilistic nature of the model means that noise is treated in a natural and principled way, and estimates of the quantities of interest are always associated with a measure of the corresponding uncertainty. Since only the product of b nm and c m (t) appears in the likelihood, there is a sign ambiguity in the inferred quantities [see online tutorial andfor further discussion]. While the approach does rely on a simplified model of transcription, the model's results have been shown to capture important physiological effects which have led to the formulation and experimental validation of several hypotheses (). However, the model was until now only available as working code in MATLAB, requiring expert intervention to be used which resulted in significant bottlenecks in the analysis pipeline. We have now produced a new release which presents several significant advantages over the previous version: @BULLET it is open source, and significantly more efficient computationally; @BULLET it is fully documented and has an intuitive Graphical User Interface (GUI);
@BULLET it contains template connectivities for Escherichia coli and Saccharomyces cerevisiae;@BULLET it has been given extra functionalities, handling both time-series data and data from several independent conditions, possibly with replicates.
SOFTWARE OVERVIEWThe model and GUI are implemented in C# which allows an efficient implementation of the variational Bayesian expectation maximization algorithm. For the numerical routines we used dnAnalytics (http:// dnanalytics.codeplex.com/), a C# open source library for scientific computing. ZedGraph, an open source plotting tool, is used for displaying the results of the model in graphical format. The work flow of TFInfer is shown in(overlapping tiles); the starting frame requires the user to browse for the expression data, specify its characteristics (time-series, replicates, etc.) and browse for the connectivity data. If template connectivity is selected, the user is asked to select either a file for yeast (based on available ChIP-on-chip data) or a file for E.coli (compiled manually from the Ecocyc data base, http://www.ecocyc.org/). Otherwise, the user can specify any binary connectivity matrix. Once the data are selected, a summary of the data are displayed (number of genes and time points). If this is accepted, a list of all the TFs included in the connectivity matrix is displayed; the user can select a subset of TFs by clicking on the list of TFs names. Once this is completed, the optimisation starts; its progress (with respect to a maximum number of iterations, default 1500) is monitored through a progress bar at the bottom of the screen. Once the run is complete, the user can visualise TF activity profiles by clicking the box next to the TF name. This displays a time series activity profile with associated error bars, and by clicking the save plot button the graph can be saved in a variety of formats. An example of the output of TFInfer is given in, depicting the predicted activity of the FNR regulator in the switch from aerobic to microaerobic conditions, showing the overshoot in activity observed in).
Data files format and software requirementsStandard file format for TFInfer is comma separated file. This is a standard format supported by many spreadsheet applications including Microsoft Excel. Two types of input file are required; a csv file containing the logged gene expression data and a file specifying the connectivity matrix (which must be a binary matrix). Replicates are handled by uploading separate data files. For logged gene expression data, the file should contain a list of genes and the corresponding expression levels in different experimental conditions. Connectivity is specified in the form of grid where every entry (zero or one) specifies the connection between the corresponding TF and
CONCLUSIONStatistical methods for inferring TF activities are an important area of research in computational biology due to their ability to extract information which is not readily available through standard experimental practice. We believe that the time has arrived for these methods to become standard software used in biological laboratories to complement experimental work, much in the way that sequence alignment tools are now routinely used by experimentalists. By providing a simple yet powerful implementation of an already tried and tested method, we hope TFInfer will become accessible and useful to a wide community of scientists working on gene regulation. Funding: University of Sheffield Director of Research devolved fund (to H.A., G.S. and J.G.). M.D.R. and J.G. thank the BBSRC for support through the SysMO initiative (www.sysmo.net) and are members of the SysMO-SUMO consortium.
Conflictof Interest: none declared.
The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org 2635 at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
