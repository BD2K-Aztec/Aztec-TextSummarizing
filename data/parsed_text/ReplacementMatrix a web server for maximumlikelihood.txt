Amino acid replacement rate matrices are an essential basis of protein studies (e.g. in phylogenetics and alignment). A number of general purpose matrices have been proposed (e.g. JTT, WAG, LG) since the seminal work of Margaret Dayhoff and co-workers. However, it has been shown that matrices specific to certain protein groups (e.g. mitochondrial) or life domains (e.g. viruses) differ significantly from general average matrices, and thus perform better when applied to the data to which they are dedicated. This Web server implements the maximum-likelihood estimation procedure that was used to estimate LG, and provides a number of tools and facilities. Users upload a set of multiple protein alignments from their domain of interest and receive the resulting matrix by email, along with statistics and comparisons with other matrices. A non-parametric bootstrap is performed optionally to assess the variability of replacement rate estimates. Maximum-likelihood trees, inferred using the estimated rate matrix, are also computed optionally for each input alignment. Finely tuned procedures and up-to-date ML software (PhyML 3.0, XRATE) are combined to perform all these heavy calculations on our clusters.
INTRODUCTIONAmino acid replacement matrices contain estimates of the instantaneous substitution rates from any amino acid to another. These rates reflect the biological, chemical and physical properties of amino acids. For example, we usually observe a high substitution rate between lysine (positively charged) and arginine (also positively charged) and a low substitution rate between lysine and aspartate (negatively charged). Amino acid replacement matrices are an essential basis of protein phylogenetics. They are used to compute substitution probabilities along phylogeny branches, and thus the likelihood of the data. They are also closely related to score matrices, which are essential for aligning proteins and computing alignment scores. Several general replacement matrices have been proposed, such as PAM (), JTT (), WAG () and LG (). These matrices were estimated from large and diverse sets of protein alignments. They tend to be robust and perform well in many cases. However, the performance of replacement matrices depends on life domains and protein groups (). Replacement matrices have thus been estimated for specific domains [e.g. for HIV,, and influenza,] and protein groups [e.g. mitochondrial proteins,. It has been shown that specific replacement matrices often differ significantly from general matrices, and thus perform better when applied to the data to which they are dedicated [e.g.;. Since the seminal work of, a number of methods have been designed to estimate amino acid replacement matrices from protein alignments. These methods belong to either counting (e.g.) or maximum-likelihood (ML) approaches (e.g.). The former are limited to pairwise protein alignments, while the latter fully benefit from the information contained in multiple alignments and the corresponding phylogenies. Recently, we improved the ML method proposed byby incorporating the variability of evolutionary rates across sites into the matrix estimation process (). This procedure was successfully applied to estimate the LG matrix from 3912 alignments of the Pfam database, the FLU matrix from 992 influenza protein alignments and a number of matrices corresponding to various structural configurations of the residues (). The demand to estimate amino acid replacement matrices for particular data is rising quickly because of the rapidly growing volume of sequence data and a desire to better understand the evolution and relationships of specific protein groups and species. However, up-to-date replacement matrix estimation procedures are complex and highly demanding in computational terms. Our method () involves complex data processing and alternates tree building using PhyML () and matrix estimation using XRATE (). It thus requires a huge amount of work to estimate a matrix from raw datasets. Here, we describe an implementation of this method in a Web server. Users upload their alignments and receive the output matrix by email along with a number of additional statistics and comparisons. Optionally, the server performs a non-parametric
ReplacementMatrix
bootstrapto assess the variability of rate estimations, and infers the phylogeny of every input alignment using the estimated replacement matrix.
MODEL AND METHODSThe amino acid substitution process is assumed to be independent among sites and lineages, and homogeneous during the course of evolution. The standard model is Markovian, time-continuous, time-reversible and represented by a 2020 rate matrix Q = q ij , where q ij (i = j) is the number of substitutions from amino acid i to amino acid j per time unit. The diagonal elements q ii are such that the row sums are all zero. Any time-reversible matrix Q can be decomposed into a symmetric exchangeability matrix R = r ij and an amino acid equilibrium frequency vector =Here, we consider (as usual) the most general time-reversible (GTR) model, which involves 189 (R) and 19 () free parameters to be estimated from the data, where the product runs over all alignments D a and the inner term is the likelihood of D a given the phylogenetic tree T a , the rate across site model  a and the replacement matrix Q. Here we use the standard discrete gamma distribution with four rate categories, and  a is the gamma parameter associated with D a. Simultaneously optimizing T , Q and  parameters is computationally difficult. However, several authors have showed that substitution model parameters (Q and ) can be accurately estimated using nearly optimal trees T. Whelan and Goldman (2001) estimated their WAG matrix by:(i) inferring tree topologies using NJ; (ii) estimating tree branch lengths by ML assuming a JTT replacement process; and (iii) estimating Q from the data and thereby inferred trees using a standard optimization procedure. We refined this approach by incorporating an across-site rate model in the matrix estimation, namely four gamma categories plus invariant sites (4+I). Our method () involves: (i) estimating tree topologies and branch lengths using PhyML (); (ii) processing alignment and trees to account for the rate model; (iii) estimating Q from these processed data and trees using the expectationmaximization software XRATE (); and (iv) iterating this procedure until L D reaches a plateau. This estimation procedure is started using an approximate matrix. WAG was used to learn LG, and a nearly identical matrix was obtained when starting from JTT. We observed that three iterations are enough in practice and that the invariant site category has little impact on Q estimation. The above procedure is very heavy in computational terms. It is simplified here. The most time-consuming aspect is the ML estimation of tree topologies, which is performed only once here (instead of 3 times in the original procedure). Moreover, the rate model is simplified by using four gamma rate categories, but no invariant sites (4). The resulting matrix is nearly the same as that obtained using the full procedure (see results below) but the run time is 23 times faster. The simplified procedure has three main estimation steps (1, 2 and 3) and is as follows:Step 0: input a set of multiple alignments and a starting replacement matrix S; only exchangeabilities in S are used, frequencies are estimated from the data.Step 1: (a) For each alignment, build a BioNJ tree and optimize the branch lengths and gamma rate parameter using PhyML with S and 4.(b) Process the alignments and trees to account for the 4 model: every alignment is divided into four subalignments using the posterior probability of site rate categories, and the four corresponding trees are rescaled using the rates estimated for each category under the gamma model.(c) Run XRATE with default options and S starting matrix to estimate a first matrix Q 1 from the processed alignments and trees.Step 2: (a) For each alignment, infer an ML tree using PhyML 3.0 with Q 1 , 4 and the SPR tree search option.(b) Same as (1b).(c) Same as (1c), but replace S by Q 1 and output Q 2 .Step 3: (a) For each alignment, re-optimize the branch lengths of the previously inferred ML tree and gamma rate parameter using PhyML with Q 2 and 4.(b) Same as (1b).(c) Same as (1c), but replace S by Q 2 and output final Q matrix.Step 4: For each alignment, re-optimize the branch lengths of the previously inferred ML tree and the gamma rate parameter using PhyML with Q, with S, and with LG when S = LG; output the corresponding log likelihood and AIC values of every alignment and site for comparison purposes. Only Step (2) in this procedure fully constructs an ML tree; Step (1) uses a distance-based tree topology (as with WAG estimation), while Step (3) reuses the ML topology inferred during Step (2) with a fairly accurate Q 1 matrix. Other parts are the same as in the original LG estimation procedure (except for the invariant site category, removed here). When the final matrix has been estimated, it is returned along with a number of results, statistics and comparisons. Two additional options are available: (i) performing a bootstrap study to assess the variability of rate estimates; and (ii) running PhyML 3.0 with Q and standard options to infer the phylogenies estimated with the new matrix for all input alignments. When the latter option is used, the pipeline simultaneously estimates the replacement matrix and the trees from the input alignments. These are expected to be significantly different from the phylogenies inferred with starting matrix S or LG. To save computing time, the starting trees and initial parameter values are taken from Step (4) in the above procedure. The aim of the bootstrap procedure is to measure the variability of rate estimations. This should be useful, for example, when comparing the properties of amino acids in specific contexts (), or when using replacement rate matrices in the search for non-standard genetic codes (). The bootstrap is performed in a standard manner: for every alignment D a in D, we draw with replacement |D a | sites and then run the estimation procedure to obtain a pseudo rate matrix; this is repeated several times and the pseudo matrices are used to compute several statistics (e.g. the standard deviation) for each of the frequency  i and exchangeability r ij parameters. This procedure is highly time consuming, and we thus only perform 10 replicates. Moreover, the estimation scheme described above is still too heavy to be repeated 10 times. We therefore use the trees and site rate categories computed by PhyML with Q in Step (4), and run XRATE only once for each replicate, starting from the S matrix. Experimental studies show that these simplifications do not significantly affect the variability measures.
RESULTS WITH TWO SAMPLE DATASETSTo illustrate the properties of the Web server, we re-estimated the LG matrix from the data used in original publication (3912 alignments, 6.5 millions residues) and the FLU matrix using 100 randomly selected alignments from the original dataset (1.8 million residues). We performed a bootstrap with 500 (LG) and 1000 (FLU100) replicates to obtain accurate measures of the variability of parameter estimates, and 20 standard pipeline bootstrap runs with 10 replicates each. Detailed results are available as Supplementary Material from the Web site and summarized in. We see that the new LG matrix estimated by the Web server is nearly identical to the published matrix, despite the simplifications in the estimation procedure. The new FLU100 matrix (estimated from 100 alignments) is also very close to
C.C.Dang et al.): average and SD (among 20 trials) of the Pearson's correlations of the relative deviations of frequencies (exchangeabilities) computed with 10 replicates, and those computed with 500 (LG) and 1000 (FLU100) replicates. the original one (estimated from 992 alignments). The relative deviations of equilibrium frequencies ( i / i ) are quite low, while those of exchangeabilities ( ij /r ij ) are higher, especially with FLU100 where their average is nearly equal to 20%. This finding shows that exchangeabilities are much more difficult to estimate than frequencies. Exchangeabilities measure instantaneous rates of change, which are not directly observable from the data (as frequencies are) and may correspond to hidden changes between ancestral states. With highly conserved alignments as FLU100's, some amino acid pairs are rarely seen together in the same alignment site (e.g. Cys-Lys is present four times only among 37 000 sites, see Supplementary Material), and thus estimating their exchangeabilities is inevitably a difficult task. Finally, we see that the bootstrap variability measures with 10 replicates are clearly correlated with those obtained using a large number of replicates (500 and 1000), and should thus be useful for analyzing the differences between rates or between matrices.
WEB SERVER, INPUT AND OUTPUT FILESThe main input is a set of multiple alignments in PHYLIP or Fasta format. This typically contains hundreds or even thousands of alignments. However, each alignment must contain <100 sequences to reduce the computational burden. Larger alignments must be divided into several subalignments that are given separately. A starting replacement matrix may also be provided, otherwise LG is the default. Two options allow for bootstrapping and running PhyML with the estimated matrix. The user receives a job status URL and the estimated matrix by email along with a number of files and statistics. These include (see user guide for details):@BULLET The new rate matrix in PAML triangular format, where exchangeability r ij and frequency  i parameters are given separately. These parameter values are compared with those of the starting matrix S and of LG (when S = LG), using Pearson's correlation, histograms and bubble graphs. @BULLET A series of score matrices for various evolutionary distances (), derived from the rate matrix using standard log odds: logwhere the probability of change from i to j given  is calculated by exponentiation of the rate matrix (). As with PAM matrices, the  distance ranges from 0.10 (corresponding to PAM10) to 2.5 (PAM250). These matrices can be used, for example, with MAFFT, CLUSTALW or BLAST to search for homologs or compute multiple alignments of specific protein groups. @BULLET The fit of the new rate matrix to the input data is compared with that of S and of LG (when S = LG), using the log-likelihood difference on the whole dataset, divided by the total number of sites. To account for the fact that the new matrix is estimated from these data and thus has to be penalized for its (189 + 19) additional parameters, we use the AIC difference divided by the number of sites. The AIC and log-likelihood differences are also provided for every alignment and every site, for example to detect atypical alignments or site classes. Z-tests are used to assess the significance of AIC differences.When the bootstrap and/or PhyML options are selected, the user receives separate emails providing: @BULLET The SD, relative deviation, minimum and maximum values (among 10 bootstrap estimates) for each of the frequency and exchangeability parameters.@BULLET All trees inferred by PhyML 3.0 using the new matrix with SPR and standard options for each of the input alignments.The current waiting time when all options are selected is 10 days for the very large LG dataset, and 2 days with FLU100.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
