Motivation: Network component analysis (NCA) is an efficient method of reconstructing the transcription factor activity (TFA), which makes use of the gene expression data and prior information available about transcription factor (TF)–gene regulations. Most of the contemporary algorithms either exhibit the drawback of inconsistency and poor reliability, or suffer from prohibitive computational complexity. In addition , the existing algorithms do not possess the ability to counteract the presence of outliers in the microarray data. Hence, robust and computationally efficient algorithms are needed to enable practical applications. Results: We propose ROBust Network Component Analysis (ROBNCA), a novel iterative algorithm that explicitly models the possible outliers in the microarray data. An attractive feature of the ROBNCA algorithm is the derivation of a closed form solution for estimating the connectivity matrix, which was not available in prior contributions. The ROBNCA algorithm is compared with FastNCA and the non-iterative NCA (NI-NCA). ROBNCA estimates the TF activity profiles as well as the TF–gene control strength matrix with a much higher degree of accuracy than FastNCA and NI-NCA, irrespective of varying noise, correlation and/or amount of outliers in case of synthetic data. The ROBNCA algorithm is also tested on Saccharo-myces cerevisiae data and Escherichia coli data, and it is observed to outperform the existing algorithms. The run time of the ROBNCA algorithm is comparable with that of FastNCA, and is hundreds of times faster than NI-NCA.
INTRODUCTIONRecent advances in technology have enabled monitoring of cellular activities using more sophisticated techniques, and have provided a deluge of biological data. Using these data to unravel the underlying phenomena that regulate various activities in a living organism offers the potential to reap numerous benefits. One of the key biological processes is transcriptional regulation, which controls the gene expression and amount of RNA produced. This process is regulated by transcription factors (TFs), which are specialized proteins causing the genes to express by binding onto the gene promoters. A thorough understanding of this complex transcriptional regulation and TFgene interaction will potentially aid in predicting the biological processes and designing control strategies to cure and/or avoid the diseased conditions (LahdesmakiLahdesma). Microarray technologies are able to measure the level of gene expressions and quantify them in the form of gene expression data. Such data are widely used in the inference of genegene interactions. Transcription factor activity (TFA), which is defined as the concentration of its subpopulation with DNA binding ability, controls the transcriptional regulation (). The correlation between TFAs and TF expression level is modified at the posttranscriptional and post-translational stage. It is, therefore, much harder to measure TFA profiles experimentally, and scientists have resorted to computational methods for their estimation (). Several statistical techniques including principal component analysis (PCA) () and independent component analysis (ICA) () have been used to deduce useful information from sets of biological data. However, the successful application of these algorithms hinges on the assumptions of orthogonality and independence between the signals, which do not hold for biological signals in practice (). In fact, some prior information is usually available for many systems, and it should be incorporated in the system model, e.g. ChIPchip data indicates which TFs and genes are known to interact. The gene regulatory network can be modelled linearly as follows ()where Y is the N  K gene expression data matrix, A is the N  M control strength or connectivity matrix and S is the M  K matrix denoting the TFAs. The uncertainties in the observation data are assumed to be Gaussian (), and are represented by the entries of the noise matrix !. Genes and TFs are known to interact in a dynamic and non-linear manner; however, a log-linear relationship provides a good approximation. Because a particular TF regulates only a few other genes, the connectivity matrix A is expected to be sparse. The problem then boils down to estimating S and *To whom correspondence should be addressed. A, where Y is available and some a-priori information about the matrix A is known. Network component analysis (NCA), proposed by, provides a more accurate model for TFgene regulation and makes use of the related prior information available. It was shown that provided certain conditions are met, the NCA algorithm produces a unique solution of the aforementioned estimation problem in the absence of noise. The NCA criteria require that: (i) the matrix A is full column-rank; (ii) if a row is removed from S as well as the output elements connected to it, the updated control strength matrix should still be of full columnrank; (iii) the TFA matrix S should have a full row-rank. These criteria guarantee that the solution obtained is unique up to a scale ambiguity (). When the NCA criteria are satisfied, the optimization problem reduces to:where k:k F denotes the Frobenius norm and I is the set of all indices where the entries of matrix A are known to be zero. The algorithm in () allows the recovery of source signals when the microarray data consist of fewer data points and () formulates the incorporation of regulatory knockout constraints as well. The NCA problem in (2) was first solved by using alternate least squares (ALS) for both A and S (). However, because the ALS solution requires solving a high dimensional matrix optimization problem at each iteration, it entails prohibitive computational complexity for large datasets, which often need to be handled in gene networks. FastNCA provides a closed form solution for A, which uses singular value decomposition (SVD) (), and is several tens of times faster than the ALS algorithm. The authors in () propose a non-iterative version of NCA, herein referred to as NI-NCA, which offers greater consistency in terms of TFA estimation at the cost of much higher computational complexity than FastNCA. However, because the decomposition techniques used to derive these algorithms are susceptible even to the presence of small amount of outliers (), their performance is expected to deteriorate significantly when data points are corrupted by outliers. It is commonly known that the microarray data are noisy and are corrupted with outliers because of erroneous measurements and/or abnormal response of genes, and robust algorithms are required for gene network inference (). Therefore, it is imperative to develop an NCA algorithm that has an inherent ability to mitigate the effect of outliers, and also entails low computational costs and provides good consistency and accuracy. It is precisely this avenue which is the focus of our current work. The main contributions of this article can be summarized as follows:(1) A novel algorithm, ROBust Network Component Analysis (ROBNCA), is proposed which has the inherent ability to counteract the presence of outliers in the data Y by explicitly modelling the outliers as an additional sparse matrix. The iterative algorithm estimates each of the parameters efficiently at each iteration, and delivers superior consistency and greater accuracy for TFA estimation.(2) A particularly attractive feature of the ROBNCA algorithm is the derivation of a closed form solution for the estimation of the connectivity matrix A, a major source of high computational complexity in contemporary algorithms. To further lower the computational burden, a still faster closed form solution is derived that requires matrix inversion of much smaller size. The resulting algorithm is comparable with FastNCA in terms of computational complexity, and is hundreds of times faster than NI-NCA.(3) The performance of ROBNCA is tested on Haemoglobin test data from () for both low and highly correlated source signals. ROBNCA is seen to outperform the state-of-the-art algorithms for estimating both A and S in terms of mean square error (MSE). In addition, ROBNCA is applied to yeast cell cycle data () and Escherichia coli data (), and by plotting the standard deviation of estimates, it is observed that ROBNCA offers better consistency than FastNCA and NI-NCA.
METHODS
NCA with outliersMost of the contemporary algorithms have studied the gene network construction problem using NCA with Gaussian noise models. However, inaccuracies in measurement procedures and abnormal gene responses often render heavier tails to the gene expression data, and Gaussian noise models may no longer be a natural fit in these cases. The decomposition techniques used in the available algorithms are highly sensitive to the presence of outliers i.e. the samples that do not conform to the Gaussian noise model, and their estimation capabilities are extremely susceptible to outliers. As a consequence, the gene network inference becomes unreliable for practical purposes. Therefore, we focus on deriving computationally efficient NCA algorithms that are robust to the presence of outliers. Towards that end, we take the approach of explicitly modelling the outliers as an additional matrix that corrupts the data points. From (1), it follows that the complete system model that accounts for the presence of outliers as well as noise can be expressed aswhere the matrix O denotes the outliers. The outlier matrix O is a column sparse matrix, as there are typically a few outliers. The joint optimization problem for the estimation of the three parameters, which also allows for controlling outlier sparsity, can be formulated as b A, b S, b O n o  arg min A, S, O kY  AS  Ok 2 F  0 kOk 0 such that AI  0, 4where the non-convex l 0 norm kOk 0 denotes the number of non-zero columns in O, and the extent of sparsity in the columns of O is controlled by the tuning parameter 0. The optimization problem in (4) is reminiscent of compressive sampling techniques based on the l 0 norm, and are known to be NP-hard (). Therefore, some relaxation is needed to solve the joint optimization problem without incurring exponentially increasing computational complexity. A viable alternative is the column-wise l 2 sum i.e. kOk 2, c  P K k1 ko k k 2 , which is the closest convex approximation of kOk 0 (). With this relaxation, the resulting joint optimization problem can be expressed as b A, b S, b O n o  arg min A, S, O kY  AS  Ok 2 F  2 kOk 2, c such that AI  0: 5Our goal is to estimate the three parameters A, S and O by solving the optimization problem (5). However, it can be noticed that the optimization problem is not jointly convex with respect to (w.r.t) A, S, O f g. Therefore, we resort to an iterative algorithm that alternately optimizes (3) w.r.t one parameter at a time.
The ROBNCA algorithmThe update of each of the parameters, Sj, Aj and Oj, at an iteration j is discussed as follows.
Updateof the TFA matrix At iteration j, the value of the parameter Sj is updated by minimizing the objective function (3) w.r.t S, while fixing the parameters A and O to their respective values at iteration j  1. By defining the matrix Xj  Y  Oj  1, the optimization problem can be written asBecause the connectivity matrix Aj  1 has full column rank (by virtue of NCA criterion 1), the matrix A T j  1Aj  1 is invertible. Therefore, an estimate of the TFA matrix S at the j th iteration can be readily obtained asThe estimate Sj, so obtained, is used in the upcoming steps to determine A and O.. However, a closed form solution was not provided and the proposed algorithm relied on costly optimization techniques to update the matrix A. Because this minimization needs to be performed at each iteration until convergence, the ALS algorithm is known to be extremely slow for large networks, and computational resources required may be prohibitive (). Hence, it is imperative that a closed form solution is obtained for the optimization problem in (8), so that the algorithm is faster and efficient.
Update of the connectivity matrixWithout loss of generality, we can consider the transposed systemwhere e X, e S, e A and e ! denote the transpose of the original matrices, respectively. The resulting equivalent optimization problem can now be stated aswhere ~ I is the set of all indices where the entries of the matrix e A are known to be zero. The following theorem presents a closed form solution of the optimization problem (10), herein referred to as ROBNCA 1. THEOREM 1. The solution of (10) at the jth iteration is given bywhere )j  C n Q 1 jC T n , e w n j  e S T je x n j, the symmetric matrix Qj  e S T j e Sj and e a n and e x n represent the n th columns of matrices e A and e X, respectively. The L n  M matrix C n is a matrix of zeroes except C n  ~ I n   1, where ~ I n is the set of indices where the entries of e a n are zero, and L n denotes the number of zero entries in e a n .PROOF. The n t h column of (9) can be written asThe objective function in (10) can be equivalently expressed asThe constraint e A ~ I  0 can be written as a set of n constraints C n e a n  0 for n  1,. .. , N. The L n  M matrix C n is constructed such that it consists of all zeroes except C n  ~ I n   1. For instance, if M  6, and e a n  a n1 , a n2 , 0, a n4 , 0, a n6  T , the 2  6 matrix C n consists of all zeroes except C n 1, 3  C n 2, 5  1. It can be easily verified that the matrix C n so constructed has full row rank. The optimization problem in (10) can now be written asThe optimization problem is, therefore, separable in terms of columns of e A, and can be equivalently solved by considering one column at a time. This also reduces the computational complexity of estimating the connectivity matrix e A. Henceforth, we will use convex optimization techniques to derive a closed form solution of the separable optimization problem. For the n t h column, we have e a n j  arg min e an 1 2 e a T n Qje a n  e w T n je a n such that C n e a n  0, 15where the objective function is re-scaled and terms independent of e a n are neglected. The Lagrangian dual function can be expressed asThe KarushKuhnTucker (KKT) conditions can be written as ()LEMMA 1. The KKT conditions are necessary and sufficient for the optimization problem (15). PROOF. Since the optimization problem (15) contains linear equality constraints, the KKT conditions are necessary for optimality (). Let any e a  n be a local minimum. Then, since the KKT conditions are necessary, there exists a Lagrange multiplier  such that e a  n ,    is the solution to the system of equations in (16) and (17). Now since the objective function is convex, it follows that e a  n is also a global minimum (). This implies that the KKT conditions are also sufficient for optimality. Hence, a solution to (15) can be obtained by solving the KKT system of equations. Using (16), it follows thatwhere the matrix Qj is indeed invertible by virtue of the linear independence of the rows of S (NCA criterion 3). Substituting (18) in (17), we have C n Q 1 jC T n  C n Q 1 je wj: Since the matrix C n has full row rank, the matrix )j   C n Q 1 jC T n is invertible. The Lagrange multiplier can, therefore, be expressed as  ) 1 jC n Q 1 je wj: 19 Upon substituting (19) in (18), the solution e a n in THEOREM 1 readily follows. Therefore, using THEOREM 1, an estimate of e Aj can be efficiently obtained and this approach results in substantial reduction in computation complexity compared with the ALS algorithm. REMARK 2. While the aforementioned closed form solution provides a significant advantage in terms of computational complexity over the ALS algorithm, we note that the solution requires inverting the matrix Q. For large networks, this can potentially be a large matrix, whose inverse incurs computational load, and may lead to inaccuracies as well. In the following discussion, we derive a still faster algorithm, ROBNCA 2, that takes advantage of the special structure of the column vector e a n and provides added savings over the closed form solution derived in THEOREM 1.We begin by noting that the rows of e X and e A can always be reordered in (9). Hence, without loss of generality, the vector e a n can be partitioned aswhere a n 2 R MLn1 is a vector consisting of the non-zero entries in e a n .With the above definition, the optimization problem (15) can be equivalently represented as e a n j  arg minwhere the M  L n matrix V n is constructed such that it lies in the null space of the matrix U n , i.e. U n V n  0. The matrix V n is, therefore, given byBy substituting e a n from(23) into (22), and noting that the constraint is always satisfied due to the construction of V n , we have an unconstrained optimization problem in the variable a n given by a n j  arg minThe solution of the aforementioned unconstrained quadratic optimization problem can be easily obtained aswhere the matrix V T n QjV n is invertible, as V n has full column rank. The symmetric invertible matrix Qj can be partitioned aswhere the invertible matrix Q 11 j is the upper M  L n   M  L n  submatrix of Qj. From the structure of V n , the matrix V T n QjV n can be reduced asSimilarly, by partitioning e w n j aswhere w n j is the upper M  L n   1 vector of e w n j. Collecting all the terms, the solution a n can now be compactly represented as a n j  Q 1 11 jw n j: 29Once all columns e a n j are determined, the connectivity matrix Aj can be easily updated. REMARK 3. By comparing the closed form solution derived in (11) with(29), it is clear that the latter only requires inverting a submatrix Q 11 j of Qj. Since the connectivity matrix is usually sparse and the number of nonzero entries M  L n  in the n th column is usually very small, inverting the M  L n   M  L n  matrix Q 11 j results in a considerable reduction in computational complexity and ensures a much faster implementation of the iterative algorithm.The respective computational times incurred in calculating (11)and (29) will be quantified in Section 3 to emphasize the usefulness of deriving (29).
Update of the outlier matrixThe last step in the iterative algorithm pertains to the estimation of the outlier matrix O by using the values Sj and Aj obtained in the preceding steps. It is straightforward to notice that the optimization problem (3) w.r.t O decouples across the columns and results in K subproblems, each of which being expressed as follows:where b k j  y k  Ajs k j. The solution to (30) is given by ()where g    max0, g. The solution (31) is intuitively satisfying, as it sets the outlier o k j to zero whenever kb k jk 2 fails to exceed the threshold 2 =2, where 2 is the sparsity-controlling parameter. Several approaches have been identified in the literature for selecting 2 , which depend on any a-priori information available about the extent of sparsity (). If the concentration of outliers is unknown, a typical rule of thumb is to take 2  0:7 where this value has been determined to provide 95% asymptotic efficiency of the estimator (). If a rough estimate of the concentration of outliers is available, (30) can be solved for a grid of values and selecting the 2 giving the expected number of outliers, which can be performed efficiently using the GroupLARS algorithm (). It is noted that the performance of the algorithm is insensitive to minor variations in the value of the parameter. Since the subproblems at each iteration have unique minimizers, and the non-differentiable regularization affects only the outlier matrix O, the convergence of the ROBNCA algorithm is established using the results in (). PROPOSITION 2. As j ! 1, the iterates generated by the ROBNCA algorithm converge to a stationary point of (3). It is important to point out that ROBNCA is significantly different from NI-NCA algorithm. NI-NCA, as the name suggests, is a non-iterative algorithm that uses a subspace-based method for the estimation of the connectivity matrix A using eigen-decomposition and relies on solving a constrained quadratic optimization problem, which has high computational cost. On the other hand, in ROBNCA, we propose two closed form solutions for the estimation of the connectivity matrix A, which result in considerable reduction in computational complexity.
RESULTS AND DISCUSSIONThis section investigates the observed performance of ROBNCA, in comparison with the state-of-the-art algorithms including FastNCA, NI-NCA and ALS in terms of MSE using both synthetic and real data. The efficiency and consistency of ROBNCA in estimating the TFAs under various scenarios is also illustrated. The datasets for all of the experiments as well as the MATLAB implementation of FastNCA and NI-NCA are downloaded from http://www.seas.ucla.edu/liaoj/download.htm and http:// www.ece.ucdavis.edu/jacklin/NCA, respectively.
Synthetic and haemoglobin test dataFirst, to evaluate the performance of various algorithms, test data from () is used. The spectroscopy data consist of M  7 haemoglobin solutions formed by mixing up N  3 pure haemoglobin components. The connectivity matrix in this case represents the concentration and presence or absence of each component in the mixture. In addition, the structure of this matrix is validated to comply with the NCA criteria. The absorbance spectra are taken for wavelengths in the range of 380700 nm, with 1 nm increments to get K  7 observation points, which is defined as Abs  C (), where the rows of Abs give the absorbance spectra for the range of wavelengths, C denotes the connectivity matrix and gives the spectra of the pure components. The importance of using these data is that this experiment mimics the gene regulatory network very closely and contains all of its key properties. The knowledge of the pure spectra helps us to effectively evaluate the performance of various NCA algorithms. In addition, using the data from () and () ensures a fair comparison. The proposed algorithm is tested against varying noise for two important scenarios: (i) when the source signals are correlated, and (ii) the observed data are corrupted with outliers. Using the same connectivity matrix, source signals were generated which had low, moderate and high correlation (). The outliers are artificially added to the data by modelling them as a Bernoulli process. The success probability indicates the concentration of outliers present and is assumed to be the same for all the genes. Since only a few points are expected to be corrupted in the real data, the outliers are assumed to be sparse and therefore the success probability of presence of outliers is kept small. The performance of ROBNCA, FastNCA and NINCA is evaluated in the aforementioned scenarios. ROBNCA algorithm is implemented in MATLAB. Since the observed data matrix Y is expected to contain outlying points, the algorithms are assessed by computing the MSE incurred in estimating the matrices A and S, instead of fitting error for Y. The comparison with ALS is omitted here because it takes much longer to run as will be shown in the next subsection.
Impact of correlationThe algorithms are first tested for low and highly correlated source signals by varying the signal-tonoise ratio (SNR). The noise is modelled as Gaussian in all the experiments. The results are averaged over 100 iterations and are depicted in. It is observed that the presence of a small amount of outliers makes the estimation using FastNCA unreliable and inconsistent for both low and highly correlated signals. On the other hand, NI-NCA is able to estimate S better than FastNCA, and the estimation of A is quite accurate and consistent as well. It can be observed that the overall estimation performance for A is much better and more consistent than that of S. The reason for this could be attributed to the availability of some prior information for the former. Since ROBNCA takes into account the presence of outliers in the observed data, it outperforms the other two algorithms for estimating both A and S and its consistent performance should be contrasted with the unboundedness and unpredictability exhibited by the other two algorithms. In general, the performance of all the algorithms improves with the increase in SNR and degrades with the increase in correlation of the source signals.
Impact of outliers Asnoted earlier, the presence of outliers can severely affect the performance of algorithms. It is therefore, important to investigate the impact of the presence of outlying points in the observation matrix Y. Comparison performed for low and high concentration of outliers is depicted in. It is observed fromthat in the case of low concentration of outliers, NI-NCA provides good accuracy for A and estimates it quite consistently. The estimation of S gives a small MSE as well and generally performs consistently. FastNCA, however, is not able to estimate both the matrices even for high SNRs. This indicates its high vulnerability to the presence of even a small number of outliers. In case of a higher concentration of outliers, the performance of NI-NCA degrades a little bit as depicted in. It is observed that ROBNCA is able to estimate the two matrices for both low and high outliers, and outperforms the other two algorithms. The estimation of O matrix is shown in the Supplementary Material wheredepicts the outliers present in the synthetic data and their estimates using ROBNCA algorithm. It is noted that ROBNCA is able to identify the outliers very well.shows the recovered signal AS after subtracting the outlier matrix O from the data matrix X. It can be observed that the recovered signal is a good match with the original signal. These experiments indicate that ROBNCA solves the estimation problem with much more accuracy than NI-NCA and FastNCA. It is important to emphasize here that the MSE for NI-NCA is always higher than ROBNCA and its computational complexity is many times greater than the latter, which can prove to be a bottle-neck in case of large datasets.
Results for real dataWe now turn our attention to the comparison of these algorithms on real data. Two datasets are considered for this purpose, which are the Saccharomyces cerevisiae cell cycle data () and E.coli data (). The transcription factor activities are estimated for the TFs of interest in each experiment, and the results are compared for different algorithms. In addition, the variability of the estimates is evaluated using the subnetwork analysis () which will be explained in the following subsections.
S.cerevisiae cell cycle dataThe algorithms discussed in this article are applied to the yeast cell cycle data from () and (). To assess the performance and variability of the various NCA algorithms, subnetwork analysis is performed, which has also been used previously in (), () and (). The core idea behind this analysis is to divide the set of transcription factors into a number of smaller subsets, which are not mutually disjoint, where the intersection of these subsets contains the TFs of interest. The subnetworks were constructed to satisfy the gNCA criteria (), which requires that the number of TFAs M should be less than the number of sample points K. These sub-networks are used to estimate the transcription factor activities independent of each other. These TFA estimates are then compared and a smaller disagreement between these estimates is a measure of consistency of the algorithm. This indicates that the results obtained are reliable despite of the presence or absence of certain genes or TFs from the experiment. The disagreement can be quantifiedindicates the rows of matrix S, i is the TF index and n is the subnetwork index. The Yeast cell cycle dataset consists of results from three different synchronization experiments. The first experiment is the synchronization by elutriation, which is composed of one cell cycle from 0 to 390 min. The data consist of 14 points sampled at 30-min intervals. The second experiment performs the synchronization by  factor arrest and contains two cell cycles from 0 to 119 min. A total of 18 samples are taken every 7 min. The synchronization in the third set is the result of cdc15 temperature sensitive mutant with samples taken every 20 min from 0 to 300 min. The data from the three experiments are concatenated to form one large dataset. The Yeast cell cycle study has 11 TFs of interest (), which are Ace2, Fkh1, Fkh2, Mbp1, Mcm1, Ndd1, Skn7, Stb1, Swi4, Swi5 and Swi6. This section compares the performance of the NCA algorithms for these TFs and the related genes. The subnetwork analysis is carried out by dividing the original network into four subnetworks each consisting of 40 TFs and the number of genes varies from 921 to 1247. The aforementioned 11 TFs are included in each of the subsets. The structure of A isfor different algorithms and different datasets with (a) level of outliers  0.01 and (b) level of outliers  0.1 against varying SNR (dB) for a highly correlated dataset verified to satisfy the NCA criterion (2) for all of the subnetworks. The reconstruction of the 11 TFAs, which is the average of the four subnetworks, using ROBNCA, FastNCA and NINCA is depicted in. The TFA estimation using ALS algorithm is skipped here because the algorithm takes very long to run for this large dataset. The results for the three experiments are shown separately in the three columns. The TFAs for these experiments are expected to have a periodic behavior with one, two and three cycles in elutriation,  factor and cdc-15, respectively, which can easily be corroborated from the figure. The results from ROBNCA differ from FastNCA in some of the instances. On the other hand, NI-NCA provides very similar estimates to that of ROBNCA. It can be inferred that the results of these two algorithms are more reliable as compared with FastNCA because the former reveal the periodic behavior in almost all of the TFs. We now look to investigate the consistency of the algorithms. The disagreement between the TFA estimates of the four subnetworks is calculated and the results are shown in. Out of the three algorithms considered, ROBNCA incurs the smallest disagreement. The performance of NI-NCA is somewhat comparable; however, FastNCA shows a high degree of inconsistency. The simulations for standard deviation for TFAs are presented in the Supplementary Material for ROBNCA, NI-NCA and FastNCA. It is noted from Supplementary Figures S5S7 in the Supplementary section that ROBNCA yields the lowest variation whereas FastNCA shows much higher variation in the TFA estimates than both the other algorithms. It can therefore be concluded that ROBNCA outperforms NI-NCA both in terms of estimating the TFAs as well as in terms of consistency for Yeast cell cycle data.
E.coli dataThe performance of NCA algorithms is now tested for E.coli data. This dataset contains the gene expression profiles obtained during transition of the sole carbon source from glucose to acetate (). Out of 296 genes found to be of relevance during the carbon source transition, 100 genes were separated so that the resulting network satisfies the NCA criteria. A total of 16 TFs were identified to be related to this experiment, which are ArcA, CRP, CysB, FadR, FruR, GatR, IcIR, LeuO, Lrp, Narl, PhoB, PurR, RpoE, RpoS, TrpR and TyrR. We perform subnetwork analysis to this data to estimate the transcription factor activities for the 16 TFs of interest. The downloaded network is divided into four subnetworks containing 81, 82, 85 and 88 genes, respectively. The number of TFs in each subnetwork is fixed to 20, where the aforementioned 16 TFs are included in all of them. The samples are taken at 5, 15, 30 and 60 min and then every hour until 6 h. Multiple samples are taken at these instances, which make a total of 25 time points. The advantage of using this data is that the ALS algorithm can be added to the performance evaluation because of its smaller subnetworks. ALS is known to have prohibitive computational complexity () and is included here only for the comparison of estimation accuracy. The reconstruction of TFAs is performed using the four algorithms, and the average of the TFA estimates from four subnetworks is depicted in. The results from ROBNCA, NI-NCA and ALS are in agreement for almost all of the TFAs. In addition, these estimates are also similar to those found in () except for a few TFAs. The reason for this small dissimilarity could be that, in this article, the estimates are obtained using the subnetworks whereas () use the complete network of 100 genes. For 5 out of the 16 TFs, namely GatR, Lrp, NarL, TrpR and TyrR, FastNCA is not able to recover the TFAs. Moreover, the TFAs predicted by ROBNCA are similar to those predicted by ALS, which is the original solution as shown in. It can therefore be inferred that ROBNCA estimates the TFAs more accurately than FastNCA. The consistency of the algorithms is assessed for this experiment as well and the respective disagreement for each of the four algorithms is shown in. FastNCA is again seen to incur the maximum disagreement. NI-NCA and ALS perform better than FastNCA; however, ROBNCA gives the least disagreement for the four estimates of TFAs and performs the most consistently out of all the algorithms.
Computational complexity comparisonAn important feature of all gene network reconstruction algorithms is the computational complexity incurred in their implementation. The computational complexity of estimating A in (29) at a particular iteration is approximately Owhere M  L n  is the number of non-zero unknowns in the n th column, which is usually small. We now compare the computational complexity of the four algorithms using the subnetwork data from Yeast and E.coli. Average runtime calculated in seconds is summarized for four subnetworks of each data in. These experiments were performed on a Windows 7 system with a 1.90 GHz Intel Core i7 processor on a Matlab 7.10.0. It is noted that the run time of ROBNCA is comparable with that of FastNCA and is hundreds of times faster than NINCA algorithms for both of its implementations, i.e. involving linear programming and quadratic programming. Moreover, the run time for ROBNCA is far superior to that of the ALS, a direct consequence of the closed form solution derived for estimating the connectivity matrix. It can also be observed that the faster closed form solution for estimating A (29) provides additional savings over its predecessor (11). Therefore, it can be inferred from these experiments on synthetic and real datasets that ROBNCA renders superior performance than the contemporary algorithms not only on the yardsticks of accuracy and reliability, but also in terms of computational complexity. The high computational complexity of NI-NCA far outweighs the benefits it offers in terms of consistency. FastNCA has the smallest run time out of all the algorithms but has poor reliability and is the least robust to the presence of outliers in the data.
The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
ROBNCA at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
A.Noor et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
CONCLUSION In this work, we present ROBNCA, an algorithm for robust network component analysis for estimating the TFAs. The ROBNCA algorithm accounts for the presence of outliers by modelling them as an additional sparse matrix. A closed form solution available at each step of the iterative ROBNCA algorithm ensures faster and reliable performance. The performance of the proposed ROBNCA algorithm is compared with NI-NCA and FastNCA for synthetic as well real datasets by varying SNR, degrees of correlation and outlier concentration. It is observed that while FastNCA is computationally simpler, yet the TFA recovery is inaccurate and unreliable, a direct consequence of the sensitivity of its decomposition approach to the presence of outliers. The NI-NCA algorithm offers performance somewhat comparable with the ROBNCA algorithm; however, the ROBNCA algorithm is much more computationally efficient and does not require solving costly optimization problems. Therefore, the cumulative benefits of robustness to the presence of outliers, higher consistency and accuracy compared with the existing state-of-the-art algorithms, and much lower computational complexity make ROBNCA well-suited to the analysis of gene regulatory networks, which invariably requires working with large datasets. Funding: US National Science Foundation (NSF) grant [0915444] and QNRF-NPRP grant [09-874-3-235]. Conflict of Interest: none declared.
