Motivation: The three-dimensional structure of the genome is an important regulator of many cellular processes including differentiation and gene regulation. Recently, technologies such as Hi-C that combine proximity ligation with high-throughput sequencing have revealed domains of self-interacting chromatin, called topologically associating domains (TADs), in many organisms. Current methods for identifying TADs using Hi-C data assume that TADs are non-overlapping, despite evidence for a nested structure in which TADs and sub-TADs form a complex hierarchy. Results: We introduce a model for decomposition of contact frequencies into a hierarchy of nested TADs. This model is based on empirical distributions of contact frequencies within TADs, where positions that are far apart have a greater enrichment of contacts than positions that are close together. We find that the increase in contact enrichment with distance is stronger for the inner TAD than for the outer TAD in a TAD/sub-TAD pair. Using this model, we develop the TADtree algorithm for detecting hierarchies of nested TADs. TADtree compares favorably with previous methods, finding TADs with a greater enrichment of chromatin marks such as CTCF at their boundaries. Availability and implementation: A python implementation of TADtree is available at
IntroductionThe 3D architecture of the genome influences key cellular processes such as gene regulation, replication timing and differentiation (). Chromosome conformation capture (3C) technologies use proximity ligation of DNA to elucidate genome structure at high resolution (De Wit and de). Recently, techniques such as Hi-C that couple proximity ligation and high-throughput sequencing have revealed megabase-sized domains of self-interacting chromatin called topologically associating domains (TADs) in both mammals and fruit flies (). Conserved across cell types and species, TADs may partition the genome into functional units and help regulate the distribution of epigenetic marks (). Hi-C uses proximity-based ligation to measure the frequency of physical interaction between pairs of genomic loci (). Typically, the raw read pairs generated by a Hi-C experiment are assigned to bins of fixed width (e.g. 40 kb), resulting in a contact matrix A, where A ij is the number of contacts between bins i and j, normalized for experimental bias. Several methods have been developed for the identification of TADs from Hi-C data. These methods may be roughly classified into two categories: (i) methods that define a one-dimensional (1D) test statistic from the contact matrix A ij and (2) methods that exploit the two-dimensional (2D) structure of the contact matrix.compute a 1D 'directionality index' (DI) from the contact matrix. This index defines whether contacts have an upstream bias, downstream bias or no bias. Next, they use a hidden Markov model (HMM) to partition the genome into regions defined by changes in the DI. Each transition into downstream bias marks the start of a domain and the next transition out of upstream bias marks its end.introduce a 1D statistic called the 'boundary index' (BI) which captures sudden shifts in interaction preference.identify domain boundaries by calling peaks in the BI, but do not explicitly pair these boundaries into domains, leaving the domain structure ambiguous. Recently, a number of methods have been introduced to identify chromatin domains using the full 2D contact matrix.use dynamic programing to find domains with maximal intra-domain contact frequency. This method includes a tunable size parameter and outputs the set of non-overlapping domains that are most robust to changes in the parameter value. More recently, Lvydeveloped a 2D model that fits a block diagonal matrix to observed contacts using maximum likelihood. This method is based on a generative model where the expected contact frequency across a TAD is uniform. All the methods above assume that TADs are non-overlapping. However, several studies have observed a hierarchical chromatin organization including both TADs and sub-TADs within them (). Although TADs are conserved across cell types, sub-TADs are thought to vary between cell types and may facilitate changes in gene regulation during differentiation () and development (). In addition, distinct combinations of proteins such as CTCF, Mediator and Cohesin may demarcate TAD and sub-TAD boundaries (). The distinct properties of TADs and sub-TADs highlight the need for methods that can detect both simultaneously. A very recent development in this direction is the 'Arrowhead' algorithm (). Although this algorithm can identify overlapping domains, it does not explicitly require that overlapping domains be nested, and it is at present not publicly available. In this article, we introduce the TADtree algorithm, which detects nested hierarchies of TADs. In contrast to previously published methods that rely on ad hoc assumptions about the structure of TADs, we derive a straightforward model for the frequency of contacts within TADs. Our model is based on the empirical observation that within TADs, the enrichment of contacts over background grows linearly with the distance between bins, but at a rate that depends on the TAD length. Thus, every TAD can be characterized by two parameters: b, the baseline enrichment for contacts between adjacent bins within the TAD and d, the rate at which contact frequency increases with distance between bins. Using reported TADs from previous studies, we derive relationships between the values of b and d when one TAD is nested inside another. From these observations, we propose a model for TAD hierarchies. We combine our model for contact enrichment within TADs with a 1D BI similar to the one used by. We formulate and optimize an objective function that scores a hierarchy of nested TAD trees according to both the fit to the observed contact matrix and the BI of each TAD and sub-TAD in the hierarchy. We demonstrate that our resulting TADtree algorithm outperforms existing methods on real data, predicting TADs that have greater enrichment for binding of factors known to delineate chromatin organization, and showing greater overlap with high-resolution data.
Methods
ModelBackground contact frequencies Consider a chromosome of length J (in bins) and a J  J symmetric matrix A, where A ij is the frequency of contact between bins i and j. Typically, A ij represents a normalized count of paired sequencing reads, where each read represents a ligation event between DNA fragments derived from bins i and j, respectively. Based on A, we form a 'background' function B giving the mean contact frequency for bins at each distance d. Formally,Modeling TADs A TAD, D, is modeled by the quadruple D  L D ; R D ; d D ; b D , specifying an interval L D ; R D  of bins and two parameters d D and b D , which determine the expected contact frequency at each intra-TAD bin pair, as follows:~ A D l; k  k  ld D  b D Bk  l for L D l k R D :~ A D expresses the expected enrichment of contacts over background ~ ADl;k Bkl as a linear function of the distance jk  lj, having slope d D and intercept b D. This model is motivated by the observed properties of TADs identified by. We grouped TADs with similar sizes and computed the enrichment of contacts over background for. Illustration of hierarchical TAD structure. A Hi-C contact map is shown on the left, with a close-up of the diagonal top-right. TADs and sub-TADs are annotated as triangles. The corresponding DNA structure is illustrated below bin pairs in each group. We observed that across many TAD groups, contact enrichment increases linearly with distance (), with slope dependent on the size of the TAD. Although small deviations from linearity are observed for pairs of bins near TAD boundaries (), a linear model is favored for the sake of simplicity. Because contact enrichment increases with distance, we require d D > 0. The positive correlation between contact enrichment and distance may arise from looping interactions between TAD boundaries, or because local interactions due to sequence proximity produce most of the contacts between closely spaced bins, drowning out the contacts that arise from the higher order structure imposed by TADs.) rises with distance at a higher rate for inner TADs than for their respective outer TADs, that is d D 0 > d D P < 10 29 ;). This inequality is not just a consequence of TAD size, because it does not hold for nested pairs with randomized positions (P  0.3). In contrast, the values b D and b D 0 for the outer and inner TADs show no systematic difference, but are strongly correlated r  0:88; P < 10 35 ;). Based on these observations, we define D 0 to be a sub-TAD of D provided 1: L D L D 0 < R D 0 R D i:e: D 0 & D:Thus, sub-TADs are defined as local regions within a larger TAD that have a different distribution of contacts, characterized by higher rate of increase in contact frequency with distance (). In the same way that a single TAD D specifies an expected contact frequency function ~ A D , a TAD/sub-TAD pair T  fD; D 0 g has an expected frequency function ~ A T , defined below. For convenience, we write l; k 2 D when L D l < k R D .Note that ~ A T is defined for all bin pairs l; k 2 D, because D is the union of the domains of ~ A D and ~ A D 0 , respectively. ~ A T is identical to ~ A D outside the sub-region defined by D 0 , where it becomes identical to ~ A D 0. This definition reflects the role of sub-TADs in capturing local regions within an existing TAD that have a distinct distribution of contacts, characterized by higher d. Generalizing the TAD/sub-TAD arrangement shown in, we allow a single TAD to have multiple sub-TADs, and also allow sub-TADs to have their own sub-TADs. Formally, define a TAD tree T to be a rooted hierarchy of TADs, such that for each D; D 0 2 T where D 0 & D, d D 0 > d D. A collection of disjoint TAD trees is called a TAD forest (). Each TAD forest F specifies a map ~ A F of expected contact frequencies. Because sub-TADs model the local distribution of contacts, which differs from that of the enclosing TAD, the expected contact frequency for each pair of bins in a TAD forest F is modeled using the minimal TAD D 2 F that contains them both or by background if there is no such TAD. Formally, let min F l; k denote the minimal D 2 F such that l; k 2 D, where min F l; k  ; if there is no such D. Then ~ A F l; k  ~ A D l; k if min F l; k  D Bk  l if min F l; k  ;:Boundary index So far we have described a model for the distribution of contacts within TADs, requiring that intra-TAD contact frequencies are enriched over background, especially for bins that are far apart. Another important feature of TADs is that their boundaries mark a shift in interaction preference.use this feature as the basis for an HMM that predicts TADs by detecting shifts from upstream to downstream preference. Here, we define a 1D test statistic called the BI that measures local shifts in interaction preference. Note thatrecently posted a preprint that also uses the term BI for their 1D statistic, which has a more complicated form. For constants p, q representing the scale and persistence of interaction shift, we define the BI B p;q as follows:A l;ik  A l;ik j:The BI measures the shift in contacts around an interval i. Specifically, in an interval of length p containing i, the BI B p;q totals the differences in contact frequencies up to q bins upstream and downstream of i. Let B p;q i : B p;q i  meanB p;q =varB p;q  be the Z-score of B p;q , where mean and variance are taken over all bins on the given chromosome. We define B p;q for a TAD forest as follows:B p;q F  X D2FB p;q L D   B p;q R D :Because the end points of TADs should have high BI, we say that D has valid boundaries if B p;q L D  > 0 and B p;q R D  > 0.
Fitting TAD trees to dataGiven a matrix A of observed contacts, we aim to find a TAD forest F that best fits the data. Specifically, we want a TAD forest F that has high BI and minimizes the error between A and the expected contact frequency function ~ A F. We measure the latter using the sum squared error,Finally, we require that F has valid boundaries in order to exclude false-positive TAD calls in regions of the genome that have high contact frequencies but low BI. We combine these criteria into the following optimization problem.Given N 2 N and c 2 R  , find a TAD forest F, with jFj  N and each D 2 F having valid boundaries, that maximizes the objective function O c F  cB p;q F  EF.Here, N and c are user-defined parameters controlling the number of TADs and the balance between E and B p;q , respectively. We now define a recursive algorithm that solves Problem 1. First, we note that any TAD forest can be decomposed into a set of non-overlapping TAD trees. Thus, we will first show how to find TAD trees that locally maximize the objective O c. To that end, we define an objective function Ui; j; N; d over intervals i; j.
DEFINITION 1:Given the interval i; j and parameters N 2 N and d 2 R  , let Ui; j; N; d : max O c T over all TAD trees T such that (i) T is rooted at the interval i; j; (ii) T contains N TADs jTj  N; (iii) each D 2 T satisfies d D > d and (iv) each D 2 T has valid boundaries. We will compute Ui; j; N; d by dynamic programing. At each step, beginning with the interval i; j, we must make optimal choices of the following.3. For each interval i x ; j x , a 'multiplicity' n x representing the total number of TADs in that sub-tree. Note that in order for T to have N TADs, the multiplicities n x must satisfy P n x  N  1. To implement the steps above, one must be able to compute the optimal score for a TAD tree having the specified root and firstlevel sub-trees. Recall that O c T  cB p;q T  ET, where E is the sum squared error defined in Equation (7). Suppose T is a TAD tree consisting of a root TAD D and a single sub-tree T 0. From Equation (6), we have B p;q T  B p;q D  B p;q T 0 . However, ET 6  ED  ET 0 , because pairs of bins within the sub-tree T 0 contribute to both ET 0  and ED, and are double counted when these terms are summed. Because the expected contact frequency for a pair of bins is modeled using the smallest TAD that contains them both [Equation
Parameters(4)], we retain the contribution to squared error made by the sub-tree T 0 , and subtract the contribution to squared error from the root TAD D (). Thus, if T 0 spans the interval i 0 ; j 0 , then ET  ED  ET 0   E C i 0 ; j 0 ; D, where E C i 0 ; j 0 ; D is the error compensation term defined below.
DEFINITION 2:Consider a TAD D and interval i; j D L ; D R . Let the error compensation E C i; j; D beUsing the error compensation, we derive an expression for the score of a TAD tree in terms of its root TAD and sub-trees.
PROPOSITION 1:Let T be a TAD tree consisting of a root TAD D and a collection of non-overlapping sub-trees T 1 ; :::; T m , spanning the intervals i 1 ; j 1 ; :::; i m ; j m . The score O c T can be decomposed asWeTo our knowledge, there is no efficient algorithm for evaluating Equation (10). To see why, note that W x depends on both i x ; j x ; n x  and b D ; d D , meaning the two maximizations cannot be performed independently. To perform the maximizations jointly, we could proceed in two directions. On the one hand, we could enumerate interval sets from the collection Ii; j; N and optimize b D ; d D  for each. This is not practical, however, because Ii; j; N is very large: jI i; j; Nj $ Oj  i N . Going in the other direction, we could discretize the space R  R  and test a finite set of pairs d D ; b D , optimizing the interval set fi x ; j x ; n x g for each. This method has the advantage that the optimization over interval sets can be performed efficiently using a version of weighted interval scheduling (described below). However, there would still be a very large set of d D ; b D  pairs to check, making this approach impractical as well. Therefore, instead of evaluating Ui; j; N; d exactly, we approximate it, using pre-computed values for d D ; b D  rather than true argmax. The pre-computed values are chosen to be optimal in the trivial case where D has no sub-TADs.Ei; j; d; b:We define a TAD D to be locally fitted ifThus, D is locally fitted if its parameters are optimal in the case where D has no sub-TADs. We use ^ D ij to denote the unique locally fitted TAD spanning i; j. Using ^ di; j and ^ bi; j as pre-computed TAD parameters is convenient because they are easily found by linear regression. By restricting to locally fitted TADs, we obtain a simpler optimization problem which admits an efficient algorithm. PROBLEM 2:Given N 2 N and c 2 R  , find the TAD forest F that maximizes the objective O c F  cB p;q F  EF such that jFj  N, and each D 2 F is locally fitted and has valid boundaries. Once again, our first step in solving Problem 2 will be to find optimal TAD trees over every interval.
DEFINITION 4:Given N 2 N and the interval i; j, define ^ Ui; j; N : max O c T over all TAD trees T such that (i) T is rooted at the interval i; j, (ii) T contains N TADs jTj  N and (iii) each D 2 T is locally fitted has valid boundaries.In contrast to Ui; j; N; d; ^ Ui; j; N does not take d as an argument, because it maximizes over TAD trees whose d values are fixed by the requirement that they be locally fitted. This leads to the following proposition, which shows how to evaluate ^ Ui; j; N.
PROPOSITION 3:For each interval i; j and positive integer N,(
AlgorithmTo evaluate Equation (12), we must choose a set of non-overlapping intervals i x ; j x  and multiplicities n x that maximize P x W x and satisfy P n x  N  1. Similarly, to assemble a TAD forest from TAD trees, we will likewise be choosing a non-overlapping set of intervals (leaves of TAD trees) with multiplicities (number of TADs in each tree) such that the sum of their scores is maximized and the multiplicities sum to a predefined N. These tasks are both similar to the weighed interval scheduling problem (), which asks for the highest weight set of non-overlapping intervals from a given collection. However, the two tasks described above have the added requirement that the interval multiplicities sum to a predefined value. Therefore we define a variant of weighted interval scheduling called weighted interval scheduling with multiplicities (WISM).
DEFINITION 5:WISM: Let fi a ; j a  j a 2 Ag be a set of intervals with multiplicities k a and weights w a. For a given integer N, the WISM N problem asks for the subset B A that maximizes P a2B w a subject to the following constrains: (i) the intervals fi a ; j a  j a 2 Bg are nonoverlapping and (ii)We solve the WISM problem using a dynamic programing approach based on the following recurrence.
PROPOSITION 4:Let N be an integer and let fi a ; j a  j a 2 Ag be a set of intervals with multiplicities k a and weights w a. Let WISM N n be the score of the solution to the WISM N problem, restricted to intervals that end before n. When n < min a i a , then clearly WISM N n  0. In all other cases WISM N n  max max fajjang W a  WISM Nka i a  WISM N n  1: (
(13)TADtree algorithm We now outline an algorithm for solving Problem 2, which we call TADtree. () Consider a chromosome with a J  J contact matrix A. Let N be the number of TADs in the desired TAD forest. To constrain runtime, we limit the maximum TAD size to S and the numberAlgorithm 1: TADtreeA; N; M; S; c; p; q Input : Matrix A of length J and parameters N, M, S, c, p, q. Output: TAD forest F representing solution to Problem 2. T    // list of optimal TAD trees for i 2 f1; :::; J  1g do for j 2 fi; :::; i  Sg do compute ^ di; j and ^ bi; j by linear regression if B p;q i > 0; B p;q j > 0 and ^ di; j > 0 then ^ Ui; j; 1 O c  ^ D ij  S    // list of sub-trees for i 0 2 fi; :::; j  1g do for j 0 2 fi 0  1; :::; jg do if B p;q i 0  > 0; B p;q j 0  > 0 andappend i 0 ; j 0 ; m 0 ; W for m 2 f2; :::; Mg do ^ Ui; j; m WISMm; S T append i; j; m; ^ Ui; j; m return WISMN; T  Algorithm 2: WISMn; J  Input : n 2 N and list J containing tuples i; j; m; W representing intervals i; j with multiplicity m and weight W. Assume that J is ordered by the right end points of its constituent intervals. Output: Highest weight subset of J with non-overlapping intervals whose multiplicities sum to n.
ResultsWe used TADtree to analyze Hi-C data fromfor mouse embryonic stem cells, which had been binned at 40 kb and normalized for sequencing bias using the method from Yaffe and Tanay (2011). This dataset included a matrix of contact frequencies for each chromosome (available at http://yuelab.org/hi-c/download.html).
TADtree parametersFor each contact matrix A, we ran TADtree (Algorithm 1) with the following parameters. We set the maximum TAD size to be 2 Mb (S  50 bins), because TADs were originally defined at a scale of 1 Mb. We note that chromatin 'megadomains' larger than 2 Mb have been observed (), but the current focus is on TADs. In theory, it is desirable to use a large value of S in order to avoid biasing the solution by prior assumptions on TAD size. However, in practice, the OS 5  runtime of TADtree makes large values of S impractical.We allowed at most M  10 TADs per TAD tree. We find that TAD trees almost never attain this limit for the number of TADs (data not shown), implying that our choice for M did not limit the complexity of our output. We hypothesize that setting M  10 allows our algorithm to detect the full complexity of TAD structure in the underlying Hi-C data used in this study, although higher resolution Hi-C data may warrant larger values of M. For the remaining parameters, we used the following values: c  500, p  3 (120 kb) and q  12 (480 kb). These values were chosen based on visual inspection of output for small subsets of the full Hi-C contact maps. Although we do not have a rigorous procedure for choosing values of p and q, we observed that larger values of p and q make the BI insensitive to small-scale boundaries, while smaller values result in the algorithm outputting many TADs and sub-TADs, many of which are likely noise. We varied the total number N of TADs to examine the tradeoffs in sensitivity and specificity (see below). Because TADtree runs independently on each chromosome, we chose N for each chromosome such that the number of TADs per megabase was consistent, using a range of densities (0 TADs/Mb, up to 6 TADs/Mb) across the different runs. For large values of N, we observed some duplicate TAD calls defined as pairs of TADs whose boundaries are both within 1 bin (40 kb) of each other (). We filtered these duplicates by removing the inner TAD from each pair. Because of the dynamic programing approach used in TADtree, computing the optimal TAD forest for a given value N  N 0 also entails computing optimal TAD forests for all N < N 0. Thus our implementation of TADtree outputs a duplicate-filtered set of TADs (as well as the percentage of duplicates in the unfiltered set) across a user-specified range of values of N. Because a high percentage of duplicates suggests that TADtree is saturating the space of TAD forests, users can examine this percentageor other relevant datato choose a final value of N for downstream analysis.
TAD nestingWe found that the TADs returned by TADtree show extensive nesting. We define the order of a TAD as the number of TADs that contain it: TADs with no sub-TADs are order 0, sub-TADs have order 1, sub-sub-TADs have order 2 and so on. When we run TADtree with N  2200 TADs, which is the number identified by, we find that 13% have order greater than 0. When we allow 5200 TADs, which is close to the number identified by, 45% have order greater than 0 (). Although TADs of high order (up to 4) are observed, they are relatively rare. For example, with 5200 TADs, 10% have order !2 and only 1.4% have order !3. As expected, TADs of increasing order have decreasing size () and decreasing genomic coverage ().
Comparison with previous studiesWe compared the TADs from TADtree with those found in two previous studies () that analyzed the same contact matrices. To compare TADs from different approaches, we compared the partitions of bins determined by TAD end points using the variation of information (VI) measure (). The VI is a distance measure for set partitions, and thus lower values of VI mean that two partitions of bins into TADs are more similar. We find that the VI between TADtree TADs with N  2200 and TADs fromwas 0.82, compared to 1.72 when the positions of our TADs were randomly shuffled. Similarly, we find that VI  0.99 between TADtree TADs with N  5200 and those reported in(2012) and TADtree, we computed precision-recall curves, treating theTADs as the true set. We performed the comparison in two ways: first counting bins inside TADs as true positives () and then counting the positions of TAD boundaries (), where boundaries within one bin (40 kb) of each other were considered to match. TADtree obtained a recall of 89% at a precision of 95% in determining which bins were inside TADs, and a recall of 85% at a precision of 41% in determining TAD boundaries. Note that a low precision in the later comparison is expected since a large fraction of TAD boundaries predicted by TADtree belong to sub-TADs, and therefore lie between the boundaries of TADs called by. As an independent measure of the quality of TADs output by the three approaches, we compared them to the TADs identified byin higher resolution Hi-C data. Specifically,generated Hi-C maps for mouse lymphoblasts at 5 kb resolution. Because this increased resolution allows significantly more data for estimating TADs, the TADs from these data are a useful benchmark for evaluating the accuracy of TAD calls based on the lower resolution (40 kb) contact maps used here. Fixing the number of TAD output by TADtree to the same as the other approaches, we find that the TADtree TADs are more similar to the TADs in the higher resolution () data than those from the other methods. The difference is relatively small in comparison with: VI  1.24 for TADtree versus 1.27 for, and not statistically significant (P  0.3) using a paired ttest that compares the values across individual chromosomes. A larger difference was observed in comparison with: VI 1.28 for TADtree versus 1.54 for Filippova et al.. Interestingly, we also observe that the lowest VI occurs when TADtree is run with N  2600 TADs, a number in between the number of TADs in) ().
Enrichment of chromatin marksAs another measure of the quality of TADs produced by each algorithm, we examined the enrichment of Chip-Seq derived binding sites of several proteins and chromatin marks that were shown byto cluster at domain boundaries. Specifically, we examined binding sites of the transcription factor CTCF, an insulator protein that has been shown experimentally to contribute to TAD boundary formation (). We also examined the presence of PolII sites, as well as H3K4me3 marksa transcriptionassociated chromatin markbecause TAD boundaries are frequently gene dense sites of active transcription () and have been shown to be enriched for housekeeping genes (). These marks were also used byto validate their TAD predictions. We downloaded ChIP-Seq data for mES cells from ENCODE (GEO accession ID GSE29184). Peak calling for these data was performed in their initial publication (). For each dataset, we counted the average number of ChIP-Seq peaks within 50 kb of a TAD boundary. Below, we present summary statistics for the whole genome, but compute P). Enrichment of these marks decreases as we increase the total number of TADs, indicating a tradeoff between sensitivity and specificity. However, the robust improvement compared with previous methods over a large range of TAD numbers demonstrates the advantages of the hierarchical decomposition performed by TADtree.
DiscussionHi-C and other approaches that combine high-throughput sequencing with 3C are becoming widely used to probe the 3D organization of the genome. There is increasing evidence that sub-TAD structure varies between cell types and contributes to changes in gene regulation during differentiation and development (). TADtree is the first publicly available algorithm that detects nested hierarchies of TADs in Hi-C data. Thus, TADtree will enable further research into the organization of TADs and sub-TADs. TADtree employs a straightforward linear model of contact enrichment that is derived from earlier annotations of TADs. TADtree finds the best TAD hierarchy via a dynamic programing algorithm, using an approximation of this model. We demonstrate that TADtree outperforms earlier methods on real Hi-C data. In particular, we show that TADs determined by TADtree on lower resolution (40 kb) data match more closely to TADs derived on higher resolution (5 kb) Hi-C data from. Moreover, we find that TADtree-derived TADs have a higher enrichment at their boundaries for binding sites of factors such that CTCF than are known to demarcate chromatin boundaries. Although the TADtree algorithm demonstrates that TAD hierarchies can be informative, there are several areas where the algorithm can be improved. First, TADtree finds only an approximate best fit to our model. Tests on smaller datasets using a brute force search suggest that the approximate solution differs little from the true solution (data not shown). Nonetheless, finding an exact solution in polynomial timeor proving that this cannot be done may be an interesting problem for future research. A second limitation of TADtree is the rapid increase in runtime $ OS 5  with maximum TAD size S. Third, although our use of a parameter N specifying the number of TADs returned by TADtree is a novel contribution compared with previous methods, we have not included a procedure for model selection, leaving the choice of N to the user. Chromatin structure is highly dynamic and varies widely from cell to cell (). Because approaches such as Hi-C typically pool contacts from across a whole population, it is unclear to what extent the TAD trees identified in this article represent true chromosomal structures within individual cells. Although efforts have been made to deconvolve Hi-C contacts computationally (), this remains a challenging problem. In the future, advances in microscopy and single cell Hi-C () may shed light on whether TAD trees are true chromosomal structures or artifacts of super position. The emerging field of higher order chromatin organization is providing a new lens for viewing the regulatory landscape of cells. Chromatin structure may provide a missing link for understanding the regulatory changes that occur during differentiation and disease (). Because megabase-scale TADs appear to be highly conserved across both cell types and species, it is likely that key changes in chromatin organization occur at the sub-TAD scale. For example, changes in the structure of subTADs could fine-tune opportunities for contact between genes and enhancers. Therefore, methods for deciphering the hierarchical structure of chromatin will be important for linking genome architecture to cellular state.
Funding
C.Weinreb and B.J.Raphael at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Fig. 2. TADs from a previous study (Dixon et al., 2012) were each rescaled to match the closest of four sizes (400 kb, 800 kb, 1.2 Mb, 1.6 Mb) using bilinear interpolation. (A) The superposition of all TADs in the 1.2 Mb size class shows that contact enrichment increases with increasing distance between bins. (B) For each size class, the average enrichment of intra-TAD contacts increases linearly with distance. This linear function has slope d and intercept b. Average enrichment for a set of random intervals is shown in red for comparison. Next, combining TADs from Filippova et al. (2014) and Dixon et al. (2012) revealed 114 nested pairs D 0 & D, where D 0 had length 400600 kb and D had length 800 kb to 1.2 Mb. (C) Nearly all nested pairs (black dots) had d 0 ! d (left), while this relationship was not true for nested pairs with randomized positions (right). (D) No similar inequality holds for values of b, although b and b 0 are strongly correlated for both real and randomized nested pairs. (E) Rescaling nested TADs so that D 0 was 500 kb and D was 1 Mb shows that average contact enrichment for D 0 (green) and D (black) follows the linear model [Equation (2)] with d 0 > d and b 0  b. (F) Examples of nested pair (above) with contact enrichment plotted against distance (below) Fig. 3. (A) When one TAD lies inside another, the enrichment of contacts increases at a faster rate for the inner TAD (green line) than for the outer TAD (black line), that is d D 0 > d D. (B) Example of a TAD forest containing TAD trees T 1 , T 2 and T 3. (C) The squared error ET  for a TAD tree T with root D and sub-tree T 0 is obtained as ET   ED  ET 0   E C , where E C is an 'error compensation' term that corrects double counting of the squared error over bin pairs in T 0 Hierarchical chromatin domains
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
