We developed Breakpointer, a fast algorithm to locate breakpoints of structural variants (SVs) from single-end reads produced by next-generation sequencing. By taking advantage of local non-uniform read distribution and misalignments created by SVs, Breakpointer scans the alignment of single-end reads to identify regions containing potential breakpoints. The detection of such breakpoints can indicate insertions longer than the read length and SVs located in repetitve regions which might be missd by other methods. Thus, Breakpointer complements existing methods to locate SVs from single-end reads. Availability: https://github.com/ruping/Breakpointer
INTRODUCTIONIdentifying structural variants (SVs) from short sequencing reads remains challenging. Existing next-generation sequencing (NGS)based methods for SV detection are primarily based on the analysis of paired-end reads (PE) assuming that deviations from the expected mapping distance are caused by SVs (). Alternatively, to characterize SVs from single-end reads (SE), split-read methods can be adopted to generate pseudo PE (). However, the short length of the artificial PE limits the mappability and the size of detectable insertions (up to medium size). Alternative SE-based methods are needed to facilitate the discovery of breakpoints of longer insertions and SVs located in repetitive regions. SVs usually cause specific mapping artifacts in the vicinity of the SV boundaries. Reads slightly crossing the breakpoint of an SV can be mapped only if they contain a few bases of the variant (depending on the allowed edit distance). This case usually leads to consistent misalignments next to the breakpoint. Such misalignments have already been used to clean SNP calls () or to determine the regions for local realignment (). In contrast, reads spanning the breakpoint will be unmappable. Consequently, on the left or right side of the SV boundary, fewer read alignments will start or end, respectively (and Supplementary). Our tool Breakpointer locates SV breakpoints by analyzing both * To whom correspondence should be addressed. misalignment artifacts and local non-uniform read distribution created by SVs.
METHODSGiven a small genomic region R of size w, the depth of coverage D is defined as the number of reads (of length l) overlapping R. In addition, we introduce 'end-depth' D e as the number of only those reads starting/ending (summarized as 'ends') within R. Assuming uniform coverage, under a given D, D e will follow a binomial distribution as: D e  B(n = D,p = 2w w+l ). Regions containing the breakpoint of an SV will have higher D e than expected, because a lack of mappable breakpoint-spanning reads leads to a depth skew toward ending reads. Some aligned reads slightly overlapping with the SV will generate consistent mismatches around the breakpoint (). Such mismatches will only occur in the ends of the mappable reads but not in the reads spanning R, e.g. reads from a wildtype allele. We summarize these local mapping features around SV boundaries as 'breakpoint signature'. To capture this signature, Breakpointer proceeds in three stages (): First, using a sliding window of size w ( l), Breakpointer scans the read alignment along a reference genome, calculates the pileup-corrected sequencing depth D and end-depth D e for each window. The skewness of depth in each window is represented by the score S B , which is equal to the negative logarithm (of base 10) of the P-value computed from a binomial test. Windows with S B > 1 are selected and then merged into non-overlapping regions. For variable read length, Breakpointer groups reads based on their length and generates S B based on weighted P-values (Supplementary Note). Second, mismatch screening is performed on each merged region, with the aim to enrich for those regions likely to encompass SV breakpoints. We only consider mismatches located 10 bp from the read ends (referred as 'ME'). A score S M is assigned to a region with c positions showing MEs:where P t is the probability of seeing k MEs out of n reads at a position t in a merged region, assuming that MEs are sequencing errors. i is the maximum of the Phred base-error rate at position t in read i or a local error rate computed from the number of MEs in this region. We use local error rate because in real data there are regions containing many mismatches despite high-quality scores. Small gaps are treated as mismatches (taking of surrounding bases for deletions). Regions with no MEs are removed since their depth skewness are likely caused by technological artifacts or mappability. Given a true SV event, unmappable breakpoint-spanning reads will match the SV boundary including MEs. Thus, in the last step, each candidate region is validated by detecting breakpoint-supporting reads in the unmapped pool. The regions with no supporting unmappable reads are filtered out. Breakpointer sorts the selected regions according to S B , S M and generates two rank scores accordingly. A confidence score RC is assigned to each region by combining the two ranks. Breakpointer requires sorted BAM () files as an input and outputs validated regions in GFF format.
RESULTS AND DISCUSSIONS
SimulationWe characterize the power of Breakpointer to locate the breakpoints of known human indels () implanted into chromosome X (Supplementary Note). The results, summarized inand Supplementary, highlight the ability of Breakpointer to uncover the breakpoints of known indels with various sizes at high sequencing coverages (recall >0.8 and FPR: false positive rate <0.02 at >30 coverage). Breakpointer can discover the breakpoints of insertions longer than the read length, which is beyond the ability of split-read methods (Supplementary).
Real dataBreakpointer is also tested on Illumina whole-genome sequencing data from an Yoruban genome (NA18507,). Predictions by Breakpointer are intersected with external variant sets detected by alternative approaches from the same individual () and sets from population studies (). The fraction of Breakpointer predictions overlapping with DIP (deletion/insertion polymorphisms detected by capillary sequencing a part of NA18507 genome) increases with combined rank score RC (), suggesting that the breakpoint signature represents true SV breakpoints. Predictions overlapping known SVs were comparable between Breakpointer and other methods using PE (Supplementary), indicating that Breakpointer achieves equivalent accuracy to PE-based methods by just using SE. The comparison between the known SVs overlapped by Breakpointer and Pindel (, an anchored split read mapping method) reveals that Breakpointer locates the breakpoints of (i) insertions longer than the read length and (ii) many indels in repetitive regions which are missed by Pindel (Supplementary Table S3,). Breakpointer analyzes the initial small-gapped alignment of the entire read, showing complementarity to Pindel which splits the initial unmapped reads. Besides the breakpoints of indels, Breakpointer also uncovers the breakpoints of some large SVs, e.g. mobile insertions and nonhomologous recombinations, by using 36 bp SE (Supplementary Note), although the power to detect repeat-mediated SVs is limited due to mapping difficulties in highly repetitive regions and sequence homology around breakpoints.
CONCLUSIONSBy evaluating mapping features at the boundaries of SVs, our method locates the breakpoints of a wide range of SVs. Breakpointer does not investigate the SV content; it is designed as a supportive breakpoint discovery tool that ideally should be used in combination with other methods for genotyping SVs. Breakpointer requires a high coverage (>20) to reach an optimal performance. The predictions can be used not only to provide additional support for alternative methods, but also to find breakpoints of SVs that otherwise might be missed by other tools. Thus, by requiring only single-end reads, it complements the current set of SV detection methods.
The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
