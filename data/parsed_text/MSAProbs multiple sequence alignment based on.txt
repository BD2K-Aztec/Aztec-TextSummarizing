Motivation: Multiple sequence alignment is of central importance to bioinformatics and computational biology. Although a large number of algorithms for computing a multiple sequence alignment have been designed, the efficient computation of highly accurate multiple alignments is still a challenge. Results: We present MSAProbs, a new and practical multiple alignment algorithm for protein sequences. The design of MSAProbs is based on a combination of pair hidden Markov models and partition functions to calculate posterior probabilities. Furthermore, two critical bioinformatics techniques, namely weighted probabilistic consistency transformation and weighted profileâ€“profile alignment, are incorporated to improve alignment accuracy. Assessed using the popular benchmarks: BAliBASE, PREFAB, SABmark and OXBENCH, MSAProbs achieves statistically significant accuracy improvements over the existing top performing aligners, including ClustalW, MAFFT, MUSCLE, ProbCons and Probalign. Furthermore, MSAProbs is optimized for multi-core CPUs by employing a multi-threaded design, leading to a competitive execution time compared to other aligners. Availability: The source code of MSAProbs, written in C++, is freely and publicly available from http://msaprobs.sourceforge.net.
INTRODUCTIONMultiple sequence alignment is of central importance to bioinformatics and computational biology. The approach for producing an optimal multiple sequence alignment is to simultaneously align multiple sequences using dynamic programming. Unfortunately, this approach is impractical for alignments of more than a few sequences, due to its high computational cost. Therefore, many heuristics have been proposed to compute nearly optimal alignments, such as progressive alignment (), iterative alignment () and alignment based on profile hidden Markov models (). State-of-the-art multiple sequence alignment algorithms tend to share some common techniques to improve alignment accuracy, including combining iterative alignment with progressive alignment, and introducing consistency-based schemes. These algorithms are typically assessed on publicly available * To whom correspondence should be addressed. benchmark data sets, including: BAliBASE (), PREFAB (), SABmark (Van) and OXBENCH (). Currently, the best performing multiple sequence alignment algorithms based on these benchmark tests are T-Coffee (), MAFFT (), MUSCLE (), ProbCons () and Probalign (). ClustalW () is historically one of the most popular multiple sequence alignment programs (with more than 26 000 citations in the ISI Web of Science), complying with the typical progressive alignment pipeline. T-Coffee introduced a consistency-based objective function COFFEE () to progressive alignment by employing a primary library generated from pairwise global and local alignments to form three-way alignments. MAFFT uses the fast Fourier transform method for rapid identification of homologous regions. It then iteratively refines alignment results after performing an initial progressive alignment. The accuracy of MAFFT is further improved by introducing a consistency approach incorporating pairwise information into the objective function. MUSCLE works by iteratively refining alignment results with progressive alignment at the core, adopting a log-expectation scoring scheme instead of the conventional weighted sum-of-pairs scoring systems. ProbCons employs maximum expected accuracy as an objective function, and introduces a probabilistic consistency approach, based on pair hidden Markov model (pair-HMM) posterior probabilities (), to form three-way alignments. Probalign adopts a very similar strategy to ProbCons, but employs a partition function () to calculate posterior probabilities instead of using a pair-HMM. In this article, we present MSAProbs, a new and practical multiple protein sequence alignment algorithm designed by combining a pairHMM and a partition function to calculate posterior probabilities. We further investigate two critical bioinformatics techniques, namely weighted probabilistic consistency transformation and weighted profileprofile alignment, to achieve high alignment accuracy. In addition, MSAProbs is optimized for modern multicore CPUs by employing a multi-threaded design in order to reduce execution time. Assessed on the four popular benchmarks: BAliBASE, PREFAB, SABmark and OXBENCH, MSAProbs demonstrates significant alignment accuracy improvements over several leading aligners: ClustalW, MAFFT, MUSCLE, ProbCons and Probalign, with competitive execution time. Since T-Coffee has been proven to be inferior to MAFFT, MUSCLE and ProbCons in these papers (),MSAProbs we have decided not to include the comparison to it. ClustalW is compared because of its very fast speed (see the 'Results' section).
METHODSMSAProbs can be classified as a progressive alignment approach to computing multiple protein sequence alignments. It works by (i) calculating all pairwise posterior probability matrices using both a pair-HMM and a partition function; (ii) calculating a pairwise distance matrix using the posterior probability matrices; (iii) constructing a guide tree from the pairwise distance matrix, and calculating sequence weights; (iv) performing a weighted probabilistic consistency transformation of all pairwise posterior probability matrices; and (v) computing a progressive alignment along the guide tree using the transformed posterior probability matrices. To further improve alignment accuracy, an additional iterative refinement is performed as a post-processing step of stage (v).
Posterior probability matrix computationGiven are two protein sequences x and y of a protein sequence dataset S. We define x i to denote the i-th amino acid in x, and y j to denote the j-th amino acid in y. Let A be the space of all possible global alignments of x and y. Let a *  A be the 'true' alignment of x and y. Following ProbCons, the posterior probability that x i is aligned to y j (denoted as x i  y j ) in a * , is defined asfor all 1 i |x| and 1  j |y|. The indicator function 1{cond} returns 1 if the condition cond is true and 0, otherwise. P(a|x, y) represents the probability that a is the true alignment a * . Thus, P(x i  y j  a * |x,y), i.e. P(x i  y j ) for short, can be considered as the probability that x i is aligned to y j in the true alignment a * . The posterior probability matrix P xy of x and y is a 2D table of size |x||y|, consisting of the values P(x i  y j ) for 1  i |x| and 1  j |y|. In MSAProbs, each pairwise posterior probability matrix is calculated by combining the probability matrices generated by a pair-HMM and a partition function as follows. A pair-HMM calculates the pairwise probability matrix P a xy using the Forward and Backward algorithms, as described in. The partition function of alignments calculates the pairwise probability matrix P b xy through generating suboptimal alignments using dynamic programming. For all global alignments of x and y ending at position (i, j), we define Z(i, j) to denote the partition function, Z M (i, j) to denote the partition function with x i aligned to y j , Z E (i, j) to denote the partition function with y j aligned to a gap, and Z F (i, j) to denote the partition function with x i aligned to a gap. The partition function can then be defined recursively aswhere sbt is the substitution matrix,  (  0) is the gap open penalty,  (  0) is the gap extension penalty, and  is a parameter measuring the deviation between suboptimal and optimal alignments. A substitution matrix sbt gives the substitution rates of amino acids in proteins, derived from alignments of protein sequences. The boundary conditions and more details can be obtained from Miyazawa (1995). Using this partition function, P(x i  y j ) is defined aswhere Z M (i, j) represents the partition function of all the reverse alignments starting from position (|x|, |y|) and ending at (i, j) with x i aligned to y j , for 1  i |x| and 1  j |y|.The underlying motivation of combining the pair-HMM and partition function probabilistic models for posterior probabilities calculation is inspired by the alignment accuracy of sequences with long N/C-terminal extensions in BAliBASE benchmark, reported in the papersand Roshan and Livesay (2006). In, the authors argue that the alignment accuracy of sequences with long N/C-terminal extensions, where local alignments tend to be more successful, might be improved by incorporating a local alignment probabilistic model. Moreover, in Roshan and Livesay (2006), the partition function shows superior performance on this type of data sets, indicating that the partition function probabilistic model might be more successful in locating highly similar regions. These two points have inspired the approach taken in this article, i.e. the combination of the two probabilistic models, to multiple sequence alignment.
Pairwise distance computationAfter obtaining the probability matrix P xy for each x, y  S, a pairwise global alignment is performed to obtain the optimal global alignment score GScore(x, y), where all match/mismatch scores are given by P xy and gap penalties are set to zero. The optimal global alignment score S(i, j) ending at position (i, j) of x and y, for 1  i |x| and 1  j |y|, is recursively defined aswhere S(|x|,|y|) stores the final optimal global alignment score GScore(x,y). Many algorithms approximate pairwise distances from fractional identities in optimal global or local alignments obtained using a traceback procedure. In this work, we exploit an alternative approximation that calculates the pairwise distance d(x,y) from GScore(x, y) using Equation (6), defined asmin{|x|,|y|}This approximation is inspired by the fact that for a sequence pair, many optimal global alignments, giving the same optimal global alignment score, might be obtained using the traceback procedure. In this case, when using fractional identities to approximate the pairwise distances, the final distances are highly dependent on which optimal global alignments are chosen, because the fractional identities of these alignments generally are not identical. Our method avoids this dependence by using the optimal global alignment score.
Guide tree construction and sequence weightingGiven a pairwise distance matrix, a guide tree can be constructed using clustering methods such as neighbor-joining (;), UPGMA or its variants (). MSAProbs implements the UPGMA that uses the linear combinatorial strategy to construct the guide tree, as described in Sneath and Sokal (1973). For this guide tree, the distance between the new cluster z, formed by merging two existing clusters x and y, and a third cluster w (excluding x and y) is defined aswhere Leafs(x) represents the number of leafs in cluster x. Sequence weighting is further considered to be able to correct for unequal sampling from a family of related proteins. After having constructed the guide tree, sequences are weighted following the tree topology. Among the available weighting schemes (), we use the CLUSTALW () method.
Y.Liu et al.
Weighted probabilistic consistency transformationA probabilistic consistency transformation is used to re-estimate more accurate posterior probabilities of each sequence pair x and y by introducing another sequence z. Instead of re-computing the posterior probabilities based on three-sequence alignments, the transformation is performed based on the already computed probability matrices estimated from pairwise alignments. ProbCons uses the following heuristic to compute an approximate probabilistic consistency transformation,where P xy is the new transformed posterior probability matrix of x and y, and |S| is the number of sequences in S. A drawback of the ProbCons approach is that it considers each sequence with identical significance. To avoid a biased sampling of sequences, we therefore derive a weighed probabilistic consistency transformation approach as follows. We define w x to denote the weight of sequence x computed in the previous stage, and wN to denote the weighted number of sequences in S, i.e. the sum of sequence weights in S. This weighted approach is then defined asThis motivation of the weighted approach is to obtain more accurate alignments than the non-weighted one. The transformations are further performed for a fixed number of iterations to refine the probabilities. In MSAProbs, two iterations (the default value) are used. This default value offers a good trade-off between alignment accuracy and execution time.
Progressive alignmentThe final progressive alignment first aligns closely related sequences, and then distantly related sequences along the guide tree. Unlike ProbCons and Probalign (which are using an un-weighted profileprofile alignment model), MSAProbs uses a weighted one, which uses the sequence weights calculated in subsection 2.3. To compute a profileprofile alignment, the posterior probability matrix of the two profiles is calculated from the probability matrices of all sequence pairs x and y, where x and y are from different profiles respectively. After obtaining this probability matrix, the profileprofile alignment is carried out using Equation (5), where the match/mismatch scores are given by the probability matrix of the two profiles, and gap penalties are set to zero. As a post-processing step, a randomized iterative alignment is employed to further improve alignment accuracy. This refinement randomly partitions S into two non-overlapped subsets, and then performs a profileprofile alignment of the two subsets. MSAProbs designs its own pseudo random number generator based on the linear congruential method for the random partition of S. The iterative refinement is designed to complete after a fixed number of iterations (10 iterations, by default).
Speed optimizationsThe most time-consuming parts of MSAProbs are the posterior probability matrix computation, with a time complexity of O(N 2 L 2 ), and the weighted probabilistic consistency transformation, with a time complexity of O(N 2 L 3 ), where N is the number of sequences and L is the average sequence length. Because posterior probability matrices tend to be sparse with most entries near zero, the execution time of the probabilistic consistency transformation can be effectively reduced by using sparse matrix multiplication after transforming the matrices into sparse matrices (). However, this stage still has high time complexity. Our optimizations are focused on these two stages. One optimization is to remove exponential computations in the recursive partition function equation. For a specific run, the parameters, including scoring matrix, gap penalties and , are invariable. Hence, it is viable to pre-compute the exponential values in Equation (2) before performing the partition function computation. This leads to a significant decrease of execution time compared to directly computing using Equation (2). As multicore CPUs have been commonplace, single-thread programs will result in the waste of compute resources of multi-core CPUs. In this case, our algorithm is optimized for multi-core CPUs by employing a multi-threaded design based on OpenMP (), a compiler-directive-based application program interface (API) for explicitly directing multi-threaded, sharedmemory parallelism. For the two stages, due to their irregular parallel natures, the DYNAMIC schedule policy of OpenMP is used to dynamically assign work to a team of parallel threads. For the posterior probability matrix computation stage, the matrix computation of a sequence pair is assigned to a thread, and for the probabilistic consistency transformation stage, the transformation for a sequence pair is assigned to a thread.
RESULTS
Accuracy measurementTo assess and rank different multiple protein sequence alignment algorithms, four benchmark data sets are used: BAliBASE, PREFAB, SABmark and OXBENCH. All tests are carried out on a PC with an Intel i7 quad-core 2.67 GHz processor and 12 GB RAM running the Linux operating system. BAliBASE is the most widely used benchmark for assessing multiple protein sequence alignment algorithms. Each alignment is constructed by a combination of structure and sequence methods with manual refinement, and contains core blocks, regions for which reliable alignments are known to exist. BAliBASE 3.0 contains 386 reference alignments, which are organized into five reference sets. Reference 1 consists of equal-distant sequences, which are further organized into RV11 and RV12 reference subsets. RV11 consists of very distant sequences with <20% identity and RV12 consists of medium to divergent sequences with identities from 20% to 40%. Reference 2 (RV20) contains families with >40% identity and a highly divergent orphan sequence that shares <20% identity with the rest of the family. Reference 3 (RV30) consists of families that contains sub-families with >40% identity and <20% identity across sub-families. Reference 4 (RV40) consists of sequences with large N/C-terminal extensions, and Reference 5 (RV50) consists of sequences with large internal insertions. Accuracy evaluation on BAliBASE 3.0 is only scored with respect to core blocks. PREFAB 4.0 is a fully automatically generated benchmark containing 1681 reference alignments. Each pair of sequences is supplemented with some homologous sequences found through PSIBLAST (). Accuracy is assessed with respect to the pairwise structural alignments of the original two protein sequences using the consensus of FSSP () and CE () alignments. Since the pairwise structural alignments only cover some regions of the sequences, they can be treated as BAliBASE core blocks. SABmark is also an automatically generated benchmark containing two sets of consensus regions based on SOFI () and CF structural alignments of sequences selected from the ASTRAL () database. This benchmark is divided into two subsets: Twilight zone and Superfamilies.argues that the pairwise reference alignments in SABmark are not generally consistent with a multiple alignment. It is therefore suggested to construct multiple alignments only from a consistentMSAProbs subset of SABmark columns. Hence, SABRE (R.C. Edgar, personal communication), a subset of SABmark 1.65, is constructed by identifying mutually consistent columns (MCCs) in the pairwise reference structure alignment. SABRE contains 423 out of 634 SABmark groups by discarding groups having less than eight MCCs. MCCs can be considered analogous to BAliBASE core blocks for accuracy measurement. In this article, we use SABRE, instead of the original SABmark benchmark, to measure aligners. OXBENCH is a set of structure based alignments generated by STAMP () from structures in the 3Dee database (). Accuracy measurement on OXBENCH can be conducted based on conservative columns, i.e. structurally conserved regions, which can also be considered analogous to BAliBASE core blocks. In this article, alignments are scored according to sum-of-pairs score (SPS) and column score (CS) for BAliBASE, SABmark, and OXBENCH. SPS is defined as the number of correctly aligned residue pairs found in the test alignment divided by the total number of aligned residue pairs in core blocks of the reference alignment. CS is defined as the number of correctly aligned columns found in the test alignment divided by the total number of aligned columns in core blocks of the reference alignment. For PREFAB, alignments are scored on the reference structure pair using the quality score Q (), which is equivalent to SPS. Statistical significance of the score differences between aligner pairs is calculated using the Wilcoxon matched-pair signed-rank test () with a P-value cutoff of 0.05. A collection of the above benchmarks is available at http://www.drive5.com/bench (R.C. Edgar, personal communication), and all the scores are calculated using the QSCORE scoring software (http://www.drive5.com/qscore), written by Robert C. Edgar. MSAProbs has two sets of parameters: one for the pair-HMM and the other for the partition function. For the pair-HMM, MSAProbs uses the same emission probabilities and transition parameters as ProbCons (). For the partition function, MSAProbs uses the same parameters as Probalign, i.e. Gonnet 160 substitution matrix (), a gap open penalty of 22, a gap extension penalty of 1 (not penalizing end gaps) and  = 0.2. These parameters are used by default.
Accuracy comparison to other algorithmsTo assess the performance of MSAProbs for multiple protein sequence alignment, the above benchmarks are employed to compare MSAProbs with five top performing multiple sequence alignment algorithms: ClustalW version 2.0.12, MAFFT version 6.717, MUSCLE version 3.8.31, ProbCons version 1.12 and Probalign version 1.3. For MAFFT, the L-INS-i strategy, which yields the most accurate results among all the strategies of MAFFT, is used with the maximum iterative refinement (maxiterate option) set to 1000. All the other algorithms (including MSAProbs) use their default parameters. All the scores in the following tables are multiplied by 100, and the best scores in each column are shown in bold. On BAliBASE, Tables 13 show the mean SPS and CS scores of the six subsets and the overall dataset. MSAProbs achieves the highest SPS and CS scores on the overall BAliBASE data set, as well as all the subsets except for the RV40 subset (MAFFT produces the highest SPS score and Probalign gives the highest CS scoreEntries show P-value indicating the statistical significance of the mean scores differences between aligner pairs as measured using Wilcoxon matched-pair signed-rank test. The upper-right corner shows P-values calculated using SPS scores, and the lowerleft corner shows P-values calculated using CS scores. * indicates the aligner on the left gives the worse performance, and the better performance, otherwise. For P > 0.05, the difference is considered insignificant and the P-value is shown in parentheses. on RV40).also shows the overall runtime of each aligner.shows the statistical significance of the score differences for all aligner pairs. From the table, both SPS and CS scores are best to distinguish between aligners, statistically ranking MSAProbs as the best. On PREFAB, Tables 5 and 6 show the overall mean Q scores of all aligners and the statistical significance of the score differences for. Meanwhile, MSAProbs statistically outperforms all the other aligners for both scores ().Details are same as in.
Y.Liu et al.On OXBENCH, MSAProbs achieves the highest overall mean SPS and CS scores, as shown in. From the statistical perspective, the accuracy improvement of MSAProbs is statistically significant compared to MUSCLE, MAFFT, ProbCons and ClustalW, but has low significance compared to Probalign (). Nevertheless, MSAProbs yields the statistically highest SPS and CS scores on OXBENCH, even though its performance is indistinguishable from Probalign due to the lack of statistical significance. While demonstrating dramatic improvement on alignment accuracy, MSAProbs still maintains competitive execution time (Tables 3, 5 and 9). On the two large benchmarks: BAliBASE and PREFAB, MSAProbs takes far shorter time than Probalign and ProbCons, even though it takes slightly longer time than MUSCLE, MAFFT and ClustalW. In particular, on PREFAB, ProbCons takes about 15.5 hours and Probalign takes about 24 h to complete the alignments, whereas MSAProbs only takes about 3.5 h on the same platform.
Comparison of MSAProbs variantsTo understand how the various features of MSAProbs affect the alignment accuracy, some variants of MSAProbs are evaluated based on two algorithmic changes: (i) combining the pair-HMM and partition function posterior probabilities using weighted arithmetic mean, instead of root mean square; (ii) introducing un-weighted approaches for probabilistic consistency transformation and profile profile alignment. The first algorithmic change is used for two purposes: one is to compare the performance difference between conventional arithmetic mean and root mean square for posterior probabilities calculation; and the other is to evaluate how the relative contributions of the two probabilistic models affect alignment accuracy. Using weighted arithmetic mean, the combined posteriorprobability is calculated as P xy
MSAProbs, where 0    1. The relative contributions of the two probabilistic models can be changed by adjusting the value of . In particular, only the pair-HMM posterior probabilities are used for  = 1, and only the partition function posterior probabilities for  = 0. The second algorithmic change is used to evaluate how weighting affects alignment accuracy. We examined the performance of the variants that use weighted arithmetic mean on the BAliBASE 3.0 benchmark. In these tests, the SPS and CS scores of the resulting alignment are calculated for representative  values ().shows that both the SPS and CS scores increase from  = 0, achieve the highest scores when  is around 0.6 and 0.7, and then decrease until  = 1. This plot indicates that the single use of either probabilistic model is not able to give a strong increase in alignment accuracy. It further suggests that our combination of the two probabilistic models is a powerful approach for improving alignment accuracy. After comparing the scores in, it is obvious that the alignment accuracy using weighted arithmetic mean is inferior to that using root mean square. That is the underlying motivation of using root mean square instead of conventional arithmetic mean. The effects of different weighting approaches on the alignment accuracy are examined on the BAliBASE 3.0 and PREFAB 4.0 benchmarks. We use root mean square for posterior probabilities calculation and keep all other conditions unchanged except for weighting approaches. The results of these tests are shown in. Define WPCT (PCT) to denote the weighted (un-weighted) probabilistic consistency transformation, and WPPA (PPA) to denote the weighted (un-weighted) profileprofile alignment. The four combinations of the weighting approaches lead to different alignment results on the two benchmarks (). After comparing the scores of every combination, we can see that our weighted approaches do contribute to the whole accuracy improvement, but only by a small margin. From the table, it can be seen that the use of PCT and PPA (column 5) results in the lowest CS score for BAliBASE and the lowest Q score for PREFAB, and the use of WPCT and WPPA (default options, column 2) gives the highest CS score for BAliBASE and the highest Q score for PREFAB. Based on this observation, the use of the two weighted approaches can be considered superior to that of the un-weighted ones, even though it gives a smaller SPS score for BAliBASE. In column 4, the use of PCT and WPPA gives the highest SPS and CS scores for BAliBASE, but produces a poorer Q score for PREFAB. Considering all these observations, our selection of default options is a trade-off between different benchmarks. To obtain high accuracy for PREFAB without significantly reducing the accuracy for BAliBASE is the main reason for using the two weighted approaches as default options. When comparing columns 3 and 4, for BAliBASE, WPPA seems to contribute more to the gain of accuracy improvement, but for PREFAB, WPCT seems to be better. Hence, we can say that the contribution of either WPCT or WPPA is dependent on the specific datasets. From the above observations and discussions, we can conclude that our combination of the two probabilistic models is a powerful approach to alignment accuracy improvement, and the two weighted approaches, as auxiliary features, contribute to the performance maximization as well.
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
DISCUSSION We have presented MSAProbs, a new and practical algorithm for multiple protein sequence alignment designed based on pair-HMM and partition function posterior probabilities. On the four popular benchmark data sets including BAliBASE, PREFAB, SABmark and OXBENCH, MSAProbs demonstrates dramatic alignment accuracy improvements over several top performing aligners: ClustalW, MAFFT, MUSCLE, ProbCons and Probalign. Three strategies contribute most to accuracy improvement: the posterior probability matrix computation using pair-HMM and partition function posterior probabilities, the weighted probabilistic consistency transformation and the weighted profileprofile alignment. To reduce execution time, MSAProbs is further optimized for multicore CPUs, as multi-core CPUs have become commonplace, by employing a multi-threaded design using OpenMP. In addition to multiple protein sequence alignment, other issues in bioinformatics and computational biology, such as motif finding, RNA or protein structural prediction, might be able to benefit from our approaches.
