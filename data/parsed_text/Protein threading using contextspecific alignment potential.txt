Motivation: Template-based modeling, including homology modeling and protein threading, is the most reliable method for protein 3D structure prediction. However, alignment errors and template selection are still the main bottleneck for current template-base modeling methods, especially when proteins under consideration are distantly related. Results: We present a novel context-specific alignment potential for protein threading, including alignment and template selection. Our alignment potential measures the log-odds ratio of one alignment being generated from two related proteins to being generated from two unrelated proteins, by integrating both local and global context-specific information. The local alignment potential quantifies how well one sequence residue can be aligned to one template residue based on context-specific information of the residues. The global alignment potential quantifies how well two sequence residues can be placed into two template positions at a given distance, again based on context specific information. By accounting for correlation among a variety of protein features and making use of context-specific information, our alignment potential is much more sensitive than the widely used context-independent or profile-based scoring function. Experimental results confirm that our method generates significantly better alignments and threading results than the best profile-based methods on several large benchmarks. Our method works particularly well for distantly related proteins or proteins with sparse sequence profiles because of the effective integration of context-specific, structure and global information.
INTRODUCTIONProtein structure is essential for the understanding of protein functions. Predicting the 3D structure of a protein from its sequence remains one of the grand challenges confronting computational biologists. Template-based modeling (TBM), such as homology modeling and protein threading, is the most reliable method and can produce reasonable 3D models for about twothird of the proteins without solved structures. TBM is based on the observation that protein structures are much more conserved than sequences. That is, given a target protein sequence, we can predict its 3D structure by aligning it to structurally similar protein structures in PDB. The model quality of TBM depends on sequence-template alignment and template selection, both of which are challenging when only distantly related templates are available for a protein sequence under prediction. The threading accuracy critically depends on the choice of a threading scoring function (). Most of current methods make heavy use of position-specific information, such as sequence profile, which is usually represented as a positionspecific scoring matrix or a profile HMM (). Although sequence profile is effective on homolog detection, it is only position specific, but not context specific. Further, it is also lack of structure information (e.g. secondary structure and solvent accessibility). Context-specific information refers to the information in the sequential neighborhood of one residue. The neighboring residues of a given residue play an important role in shaping the mutation pattern of the residue. Few alignment methods, such as CS-BLAST (Biegert and SodingSoding, 2009) are developed to make use of context-specific information. Even CS-BLAST makes use of only sequence, but not context-specific structure information. To the best of our knowledge, no protein threading method has integrated well both context-specific sequence and structure information. Although many protein alignment methods use only local information, a few protein threading methods () were developed to use global information, such as pairwise contact potential, which quantifies how well two sequence residues can be placed into two template positions in a contact. However, the gain from pairwise contact potential is not significant as compared with the impact of sequence profile on protein alignments. The underlying reason may be that the contact-based pairwise potentials used in these threading methods do not carry too much extra signal. To significantly improve the effectiveness of global information especially pairwise potential in protein threading, this article studies a context-specific distance-based pairwise potential. Our pairwise potential is built on context-specific information and much more sensitive than the context-independent contact-based pairwise potentials and, thus, greatly helps improve protein threading. This article presents a novel context-specific alignment potential for protein threading, including both alignment and template selection. Our alignment potential measures the log-odds ratio of one alignment being generated from two related proteins to being generated from two unrelated proteins, by integrating context-specific local and global information. An alignment is assumed to be optimal if it maximizes the alignment potential. The local alignment potential quantifies how well one sequence residue can be aligned to one template residue based on contextspecific information of these two residues. The global alignment potential quantifies how well two sequence residues can be placed into two template positions at a given distance, again based on residue context-specific information. In this article, the context of one residue includes a variety of correlated protein features, such as sequence (profile) information, (predicted) secondary structure and solvent accessibility, amino acid physic-chemical properties in a local window centered at the residue. We integrate these correlated protein features into an accurate alignment potential using advanced statistical learning methods, including conditional neural fields *To whom correspondence should be addressed.  The Author 2013. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/3.0/), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com (). Experimental results show that our contextspecific alignment potential is much more sensitive than the widely used context-independent or profile-based (which is position specific) scoring function, generating significantly better alignments and threading results than the best profile-based methods on several large benchmarks. Our method works particularly well for distantly related proteins or proteins with sparse sequence profiles because of the effective integration of contextspecific, structure and global information.
METHODS
Protein alignment potentialWe represent one alignment A between two proteins as a sequence of alignment states a 1 , a 2 ,. .. , a L , where L is the alignment length and a i is the alignment state at position i. There are three possible alignment states M, I t and I s , where M represents two residues being aligned, I t denotes an insertion in the template and I s denotes an insertion in the sequence.
Definition of alignment potential Similar to many amino acidsubstitution matrices, such as BLOSUM () and PAM (), which define the mutation potential of two amino acids, we define the potential of one protein alignment. Given a protein sequence S and a template T and one of their alignments A, let P(AjS, T) denote the probability of A being generated from S and T using our alignment method. We define the potential of A, denoted as U(AjS, T), as follows.UAjT, S  logPAjS, T=P ref A 1 where P ref A is the background (or reference) probability of A, i.e. the probability of A being generated from two randomly selected proteins with the same lengths as S and T, respectively. Intuitively, an alignment is good as long as its probability is much better than the expected probability. We assume that an alignment is optimal if it maximizes its potential. That is, given a sequence and a template, we can find their optimal alignment by maximizing the alignment potential function. We use a recently developed probabilistic graphical model conditional neural fields () to calculate P(AjS, T) as follows (),where is the model parameter vector to be trained, w ( 1.0) is a weight factor and ZT, S,  is the normalization factor (i.e. partition function) summing over all possible alignments for a given protein pair. For the purpose of simplicity, we omit in the following sections unless we have to spell it out. The function F estimates the log-likelihood of one sequence residue being aligned to one template residue based on the input protein features. The function G estimates the log-likelihood of a pair of sequence residues being placed into two template positions at a given distance based on the input protein features. The functions F and G are called local and global alignment functions, respectively. Once the forms of F(AjT, S) and G(AjT, S) are determined, we can train their parameters by maximum-likelihood. That is, given a set of training protein pairs and their reference alignments (built by a structure alignment tool), we maximize their occurring probability defined by Equation (2). However, as G(AjT, S) is a global alignment function, it is computationally hard to directly maximize Equation (2). In addition, it may cause overfitting by training the parameters of F and G simultaneously, as the parameter space is big. To avoid these problems, we determine the parameters of functions F and G separately, which will be explained in the following sections.
Reference state We cancalculate the reference alignment probability P ref (A) in Equation (1) by randomly sampling a set of protein pairs, each with the same lengths as the sequence S and template T, respectively, and then estimate the probability of alignment A based on these randomly sampled protein pairs. As long as we generate sufficient number of samplings, we shall be able to approximate P ref A well. Here, we use the geometric mean to approximate the reference state as follows,where N is the number of samplings and X and Y represent two sampled proteins with the same lengths as S and T, respectively. Combining Equation (13), the potential of one alignment A can be calculated as follows.Note that an alignment is represented as a sequence of three states (match state M, insertion state at sequence I s and insertion state at template I t ), e.g. MMMMM I s I s MMMM I t I t I t. Therefore, given two sequencetemplate pairs (S, T) and (X, Y), as long as S and T have the same lengths as X and Y, respectively, the alignment space (i.e. the set of all possible alignments) for S and T is the same as that for X and Y. That is, any S-to-T alignment is also a feasible alignment between X and Y, although it may have different probabilities. Conversely, any X-to-Y alignment is also a feasible alignment between S and T. By definition, Z(S, T) is equal to the alignment space size times the mean value of the denominator in Equation (2). As S and T have the same alignment space as X and Y, Z(S, T) differs from Z(X, Y) only in the mean values of their corresponding denominators in Equation (2), which is independent of any specific alignment, but it may depend on protein residue composition. Therefore, we have, UAjS, T  FAjT, S  EXP X, Y FAjX, Ywhere EXP is the expectation operator, the first term of Equation (5) can be interpreted as local alignment potential and the second term can be interpreted as global alignment potential. In Equation (5), c(S, T) depends on only the residue composition of S and T but not any specific alignment. In particular, c(S, T) is equal to 0 if the sampled protein pairs have similar residue composition as S and T. As such, for the purpose of finding the optimal alignment between S and T, we can simply ignore c(S, T). Therefore, the key challenge is to determine the local and global alignment potential functions in the right-hand side of Equation (5).
Local alignment potentialThe function F in Equation (2) estimates the log-likelihood of one pair of residues being aligned based on their context-specific information. We represent an alignment A as a 1 , a 2 ,. .. , a L where L is the alignment length a i1 and a i are the alignment state at position i. As shown in, we use a linear-chain context-specific conditional neural field to calculate F as follows.where the function E is a neural network with one hidden layer, estimating the log-likelihood of state transition from a i1 and a i based on protein features in a local window (of size 11) centered at the two residues to be aligned. As in total there are nine possible state transitions in an i258 alignment, we need nine different neural networks, each corresponding to one type of state transition. We use the maximum-likelihood method to train the parameters in function Ea i1 , a i , T, S. That is, given a set of reference alignments, we maximize their occurring probability defined later in the text.where Z(T,S) is the partition function. This maximization problem can be solved using the L-BFGS () (i.e. limitedmemory BFGS) algorithm, one of the quasi-Newton methods. Instead of exactly calculating the Hessian matrix required by the Newton's method, BFGS approximates the inverse Hessian matrix to speed-up. We use a L 2-norm regularization factor to restrict the search space of model parameters to avoid overfitting. The regularization factor is determined by 5-fold cross-validation. Once the parameters of Ea i1 , a i , T, S are trained, the expectation term EXP X, Y FAjX, Y in Equation (5) can be calculated in advance by uniformly sampling a few thousand protein pairs. As the function Ea i1 , a i , T, S depends on only a local window of protein features (i.e. independent of protein length), we do not need to calculate EXP X, Y FAjX, Y for each protein pair to be aligned, which saves a lot of computational time.
Protein featuresThe features we use for Ea i1 , a i , T, S include sequence similarity measured by BLOSUM (), profile similarity, structure-derived amino acid substitution matrix (), statistical potential-derived amino acid similarity matrix (), three-class and eight-class secondary structure similarity and three-state solvent accessibility similarity. The secondary structure and solvent accessibility of a template protein is calculated by DSSP (). We predict the threeclass and eight-class secondary structure types of a target protein using PSIPRED () and our in-house tool RaptorX-SS8 (), respectively. We predict solvent accessibility of a target protein using our in-house tool. For each residue, we use all these features in a local window of size 11. In addition, all the similarity scores are computed as potentials. For example, let ss i and ss j denote the secondary structure types at sequence position i and template position j, respectively. The secondary structure similarity score for these two positions is calculated as log(P(ss i , ss j )/P(ss i ) P(ss j )). We do not use an affine gap penalty. Instead we use context-specific gap penalty depending on the following features: sequence profile, amino acid identity, hydropathy index, both three-class and eight-class secondary structure and three-state solvent accessibility. For disordered regions, no structure information is used.
Global alignment potentialThe function G estimates the log-likelihood of a pair of sequence residues being placed to two template positions at a given distance. Instead of using a contact-based pairwise potential, here, we use a distance-based pairwise potential. We calculate the log-likelihood function G(AjT, S) as P i5j log Pd T ij js i , s j  and the expectation item in Equation (5) EXP X, Y FAjX, Y as P i5j log P ref d r ij where i and j are two aligned positions, d T ij is the C distance of the template residues at these two aligned positions, Pd T ij js i , s j  is the probability of two sequence residues s i and s j being placed to two template positions at distance d T ij and P ref d T ij  is the background probability of d T ij , which can be calculated by simple statistics. Therefore, the pairwise alignment potential is calculated as follows,where L is the alignment length. As there are O(L 2 ) pairwise terms in right-hand side of Equation (8), we normalize it by L so that the global alignment potential has the same scale as the local alignment potential. To calculate Pd T ij js i , s j  in Equation (8), we use the following equation,where d S ij represents the distance of the two sequence residues at the two aligned positions, Pd T ij jd S ij  is the conditional probability of d T ij on d S ij and Pd T ij jC i , C j  is the conditional probability of the distance on the template estimated from the contexts (denoted C i and C j ) of the two sequence residues. The intuition underlying Equation (8) is that if the alignment is good, the distance of a sequence residue pair shall match well with that of their aligned template residue pair. The conditional probability of Equation (9) can be calculated as Pd T ij jd S ij   Pd T ij , d S ij =Pd S ij  using the chain rule. Where Pd S ij  P ref d T ij  is the background probability, and Pd T ij , d S ij  is the joint probability of the pairwise distances of two aligned residue pairs and can be calculated by simple statistics using a set of nonredundant protein structure alignments generated by our in-house tool DeepAlign (). As the distance between two sequence residues is unknown, we predict Pd S ij jC i , C j  using a probabilistic neural network (PNN) implemented in our context-specific distance-dependent statistical potential package EPAD (). EPAD takes as input the contexts of two sequence residues and yields their distance probability distribution. The context of one residue includes sequence profile, predicted secondary structure and amino acid chemical properties in a local window centered at this residue. Unlike previous threading methods that make use of contact-based pairwise potentials (), we use a context-specific distance-based pairwise potential. Our pairwise potential is distance based and makes use of context-specific information; therefore, it is much more accurate than the context-independent contact-based potentials. The EPAD package was implemented before CASP10 started and has been blindly tested in CASP10 for template free modeling. The CASP10 results show that EPAD can successfully fold some targets with unusual fold (according to the CASP10 Free Modeling assessor Dr B. K. Lee). Our large-scale experimental test also indicates EPAD is much better than those context-independent distance-based pairwise potentials, such as DOPE (), DFIRE () and RW () in ranking protein alignments (or templatebased models) generated by both threading and structure alignment tools ().
RESULTSTraining and validation data: We constructed the training and validation data from BC40, a subset of PDB, in which any two proteins share 540% sequence identity. In total, we use a set of 1800 protein pairs as the training data, which covers most of the folds in the SCOP database, and a set of 500 protein pairs as the validation data. There is no redundancy between the training and validation data (i.e. 540% sequence identity). The training and validation data have the following properties: (i) all the proteins have lengths 5400 and contain 510% of residues with missing coordinates; (ii) the TM-score () of a protein pair is uniformly distributed from 0.55 to 1; and (iii) we use our in-house structure alignment tool DeepAlign () to generate the reference alignment for a protein pair. Each alignment has fewer than 50 middle gaps, and the number of terminal gaps is 520% of the alignment length. Test data for alignment: We use the following three datasets to test the alignment accuracy of our method.(1) Set6K: a set of $6000 protein pairs. Any two target proteins in this set share 540% sequence identity. The TMscore of a protein pair is uniformly distributed between 0.55 and 0.8. Two proteins in a pair have small length difference. The protein pairs in Set6K have 5% of overlap with our training and validation data. By 'overlap' we mean that the proteins in one pair have sequence identity 3050% with those in another pair.(2) Set4K: a set of 4547 protein pairs. Any two target proteins in the set share525% sequence identity. The protein pairs in Set4K have 3% of overlap with our training and validation data. Two proteins in a pair have length difference 430%; therefore, this set can be used to test whether the domain boundary is correctly aligned.(3) Set180K: a very large set of 179 390 protein pairs. Any two proteins in most pairs share 540% sequence identity. The TM-score of a protein pair is uniformly distributed between 0 and 1. Note that the size of our training set is only 1% of this large set; therefore, the test result on this set is unlikely biased by the training set.Test data for threading: We use the following two datasets to test the threading accuracy of our method.(1) Set 1000  6000: a large set constructed from PDB25, which consists of $6000 proteins. All the proteins in PDB25 are used as templates, and 1000 of them are randomly chosen as the target proteins. We predict the 3D structure for all the 1000 targets using the $6000 templates, but excluding self-threading.(2) CASP10: a set of 123 test proteins. We use the CASP official domain boundary definition for each test protein.Evaluation criteria and programs to compare: We evaluate our threading method using both reference-dependent and referenceindependent alignment accuracy. The reference-dependent accuracy is defined as the percentage of correctly aligned positions judged by the reference alignments, which are built using our in-house tool DeepAlign (). We also built the reference alignments using other structure alignment tools, such as DALI, Matt and TMalign () and observed similar performance trend. To evaluate the reference-independent alignment accuracy, we build a 3D model for the target protein using MODELLER (S  ali et al., 2004) from its alignment to the template and then evaluate the quality of the resultant 3D model using TM-score. TM-score ranges from 0 to 1, indicating the worst and best model quality, respectively. As our ultimate goal is to predict 3D structure for a target protein, referenceindependent alignment accuracy is more important than reference-dependent accuracy. We compare our method with the top-notch profile-based method HHalign, which is run with the option '-mact 0.1'. As shown in, our method outperforms HHalign in terms of both reference-dependent and reference-independent alignment accuracy on the two benchmarks Set6K and Set4K. On these two sets, our method outperforms HHalign by 13.6 and 9%, respectively, in terms of the model quality (i.e. referenceindependent accuracy). In terms of reference-dependent accuracy, our method is better than HHalign by only 8.8 and 5.2%, which is not as big as reference-independent accuracy. We also calculate the reference-dependent accuracy on Set6K and Set4K by allowing four-position off the exact match, as shown in, which indicates that our method is still much better than HHalign when four-position off the exact match is allowed. As shown in, on the very large Set180K set, our method yields slightly better performance than HHalign when two proteins under consideration are similar. This is not surprising, as most methods can generate pretty good alignments for two closely related proteins. When the TM-score of two proteins under consideration falls into, our method outperforms HHalign by $3.3% in terms of the reference-dependent accuracy and by $7.6% in terms of the reference-independent accuracy. When the TM-score of two proteins under consideration falls into, our method outperforms HHalign by $9.4% in terms of the reference-dependent accuracy and by $11.3% in terms of the reference-independent accuracy. When the TM-score of two proteins falls into, our method outperforms HHalign by a very large margin in terms of reference-dependent alignment accuracy. However, in terms of the reference-independent alignment accuracy, the advantage of our method is not as big, although it is still substantial. This may be because that MODELLER cannot build a reasonable model from an alignment with too many errors. By the way, when the TM-score of two proteins is 50.4, it may not be so important to generate an accurate alignment for them, as the resultant 3D model has low quality and, thus, will not be useful. Threading performance on a large test set: We test the threading performance of our method and HHpred on Set 1000  6000. We run both our method and HHpred to predict the 3D structure for each of the 1000 targets using the $6000 templates. HHpred is run with its 'realign' option. That is, HHpred first searches through the template database using local alignment and then re-aligns a target to the top templates using global alignment. By doing so, HHpred can improve its modeling accuracy a little bit over the default mode. To speed-up, our method first aligns a target to all the templates using only the local alignment potential and then ranks all the templates using both the local and global alignment potentials described inSection 2. After ranking, only the first-ranked templates are used to build a 3D model by MODELLER for each target. As shown in, our method is significantly better than HHpred when the targets are not so easy (i.e. the HHpred model has TM-score 50.7). On the 1000 targets, our method and HHpred obtain average TM-score 0.566 and 0.517, respectively. Our method outperforms HHpred no matter whether the target is easy or hard. If we exclude the 170 easy targets (i.e. either our model or HHpred model has TM-score 40.8) from consideration, the accumulative TM-score obtained by our method and HHpred is 0.524 and 0.451, respectively. That is, our method is $16.1% better than HHpred. Further, as indicated by the yellow lines in, our method can generate models with TM-score 40.5 for many targets for which HHpred fails to generate a model with TM-score 40.5. We use TM-score  0.5 as a cutoff because when a model has TM-score 40.5, its overall fold is basically correct. As shown in, our method generates models better than HHpred by at least 0.05 for 342 targets, whereas HHpred is better than our method by this margin for only 93 targets. Further, the number of targets for which our method generates models better than HHpred by at least 0.10 is 197, whereas HHpred is better than our method by this margin for only 49 targets. In summary, our method has a large advantage over HHpred on hard targets. Threading performance on CASP10 data set: We further evaluate the threading performance of our method on the most recent CASP10 targets. We use the CASP official domain boundary definition for each target, and in total there are 123 test proteins. To make the test as fair as possible, both our method and HHpred used the same set of templates and the same protein sequence database (i.e. NR), which were constructed before CASP10 started. As shown in, similar to what we have observed on the large threading test set, our method significantly outperforms HHpred when the targets are not so easy. Our method generates a model with TM-score40.5 for a few targets for which HHpred fails to generate a model with TM-score 40.5. On the whole testNote: Reference-independent alignment accuracy is measured by TM-score. The protein pairs are divided into four groups depending on their structure similarity measured by TM-score.we exclude the 'Server' targets from consideration and only look at the more challenging 'Human/Server' targets. The average TM-score obtained by our method and HHpred is 0.63 and 0.57, respectively. That is, our method is $10.5% better than HHpred. It is challenging to fairly compare our single-template threading method with the CASP10-participarting servers because that most of the CASP10 servers used a hybrid method instead of an individual threading method. For example, the first-ranked Zhang-Server integrated both consensus analysis of $10 individual threading programs and fragment-based 3D model building technique. The top-ranked HHpred server integrated new profile generation method, multi-template alignment and a better 3D model building technique. The top-ranked Robetta server used consensus results from three programs, including HHpred, RaptorX and SPARKS and also a new 3D model building method. Our RaptorX server, which is ranked No. 2 overall, used multiple-template threading, which can generate better 3D models than single-template threading for many targets especially the easy ones. In summary, the accumulative TM-score obtained by our single-template threading method described in this article is only 0.85 less than what was obtained by RaptorX in CASP10. It can be ranked No. 6 among all the CASP10participating servers. P-value: It is desirable that any structure prediction program can assign a confidence score to predicted models. Here, we use P-value to quantify the relative quality of the top-ranked templates and alignments. To calculate the P-value, we use a set of reference templates, which consist of $1800 single-domain templates with different SCOP folds. Given a target, we first thread it to this reference template database and then estimate an extreme value distribution from the $1800 alignment scores (i.e. alignment potentials). Based on this distribution, we calculate the P-value of each alignment when threading the target to the real template database. The P-value actually measures the quality of the template (and the alignment) by comparing it with the reference templates. To measure the real model quality, we use both GDT (Global Distance Test) () and uGDT (i.e. un-normalized GDT). GDT has been used as an official measure by CASP for many years. It measures the quality of a model by comparing it with the native and outputs a value from 0 to 100, indicating the worst and the best quality, respectively. uGDT is equal to GDT times the target length divided by 100. uGDT is more suitable when a large or multi-domain target protein can only be partially covered by good templates. In this case, GDT is likely to be small and not a good indicator even if the templates are closely related to the target, as GDT is normalized by the whole target length. However, uGDT is not good for a target with length smaller than 100. For example, when a target of 60 residues is covered by a template perfectly on 48 of the 60 residues, the uGDT of this alignment is 48, whereas the GDT is 80. In this case, GDT is more suitable than uGDT. In summary, we use max(uGDT,GDT) to measure the model quality. We say one alignment is reasonable when its resultant model has uGDT or GDT 450. We use 50 as a cut-off because that many proteins similar at only the fold level have GDT or uGDT $50. As shown in, the P-value is a reliable indicator of model quality. When P-value is small (i.e. 510 5 ), the models have uGDT or GDT ! 50. Even if P-value is 510 4 , there are few models that have both uGDT and GDT550. That is, the prediction from our threading method is reliable when the P-value is 510 4. Contribution of the distance-based pairwise potential: To evaluate the contribution of our pairwise potential to alignment accuracy, we calculate the accuracy improvement resulting from adding our pairwise potential to the alignment potential using two benchmarks Set6K and Set4K. As shown in, our pairwise potential can improve reference-dependent accuracy by 3% and reference-independent accuracy by 0.01, respectively. We have not fully exploited the power of our pairwise alignment potential because it is computationally expensive. We just used our pairwise potential to refine the alignment generated by local alignment potential as follows. For each aligned position generated by our local potential, we allow it to move at most four positions to improve the total potential (i.e. local potential  pairwise potential). We expect that a more efficient pairwise potential optimization algorithm that can search a larger alignment space will further improve the alignment accuracy. We also evaluate the contribution of our pairwise potential to template selection. To speed-up, we generate alignments using our local alignment potential, and then rank all the templates using a linear combination of our local and pairwise alignment potentials (with equal weight). Experimental results on the 1000  6000 threading set and the CASP10 set indicate that the pairwise potential indeed improves template selection, as shown in Figures 6 and 7. On the 1000  6000 set, the average TM-score increases from 0.547 to 0.566 when the pairwise potential is used to rank the templates. On the CASP10 set, the accumulative TMscore increases from 75.58 to 77.52 when the pairwise potential is used. As shown inand 7, the context-specific pairwise potential is particularly helpful to hard targets. Case study: Here, we use two specific examples to further demonstrate the strength of our method. Both of these two cases are from our Set6K benchmark. The first example is to align two proteins 3qnrA and 2gffA, which have TMscore between 0.62 and 0.65 according to the structural alignments generated by TM-align (), Matt (), Dali () and our in-house toolDeepAlign (). That is, these two proteins are similar in structures but not much in sequences. Meanwhile, 2gffA contains two and two segments that are similar to one domain in 3qnrA. As shown in, our method can correctly align 490% of the positions judged by the reference alignment (regardless of which structural alignment tools are used to generate it). In contrast, HHalign fails to align the second and segments. This is partially because HHalign favors generating short alignment. If we choose 3qnrA as the template to build a 3D model for 2gffA, the resultant models from our method and HHalign have TM-score 0.63 and 0.25, respectively. We use another two proteins 3k53A and 1cb7A to showcase that our method and HHalign generate two alignments of nearly the same length, but our alignment has much better quality. As shown in, our method aligns nearly 80% of positions correctly, whereas HHalign fails to align any position correctly. If we use 3k53A as the template to build models for 1cb7A, the resultant 3D models from our method and HHalign have TMscore 0.64 and 0.22, respectively. We can also examine the alignments visually. As shown inand B, our method aligns the local structure well, whereas HHalign seemingly produces a totally wrong alignment. In this case, both 3k53A and 1cb7A have pretty good sequence profile information, and the predicted secondary structure for 1cb7A is also accurate (480%).
CONCLUSIONThis article has presented a novel protein threading method using a context-specific alignment potential, which measures the. Two alignments between 3qnrA and 2gffA generated by our method and HHalign. The blue and red colors demonstrate correctly aligned regions judged by the reference alignment. To save space, only one of the domains of 3qnrA is shownof the distance-based pairwise alignment potential to Set 1000  6000. Each point represents the quality, measured by TMscore, of two models: one is generated using the local alignment potential only (x-axis), and the other using both the local and global alignment potentials (y-axis). Contribution of the distance-based pairwise alignment potential to the CASP10 set. Each point represents the quality, measured by TMscore, of two models: one is generated using the local alignment potential only (x-axis), and the other using both the local and global alignment potentials (y-axis). The relationship between P-value and the model quality on the 123 CASP10 targets. The x-axis is the model quality measured by max(GDT, uGDT) and the y-axis is log (P-value)Note: Reference-independent alignment accuracy is measured by TM-score.
i263Protein threading log-odds ratio of one alignment being generated from two related proteins to being generated from two unrelated proteins. Intuitively, an alignment is regarded as good only when its estimated probability is much higher than the expected. Our alignment potential integrates both local and global context-specific and structure information through advanced machine learning techniques, such as conditional neural fields, which can combine a variety of highly correlated protein sequence and structure features, without worrying too much about overcounting and undercounting of features. Experimental results show that our context-specific alignment potential is much more sensitive than the widely used context-independent (e.g. profile-based) scoring function and yields significantly better alignments and threading results. Our method works particularly well for distantly related proteins or proteins with sparse sequence profiles because of the effective integration of context-specific, structure and global information. This article also shows that our context-specific distance-based pairwise potential is helpful to protein threading, as opposed to the contact-based potentials previously used by some protein threading methods. Combined with our context-specific local alignment potential, our distance-based pairwise potential can help improve both alignment accuracy and template selection especially for hard targets. We expect that a more efficient algorithm that can optimize the pairwise potential better will yield more accurate alignments.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
J.Ma et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
