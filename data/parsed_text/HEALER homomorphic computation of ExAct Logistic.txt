Motivation: Genome-wide association studies (GWAS) have been widely used in discovering the association between genotypes and phenotypes. Human genome data contain valuable but highly sensitive information. Unprotected disclosure of such information might put individual's privacy at risk. It is important to protect human genome data. Exact logistic regression is a bias-reduction method based on a penalized likelihood to discover rare variants that are associated with disease susceptibility. We propose the HEALER framework to facilitate secure rare variants analysis with a small sample size. Results: We target at the algorithm design aiming at reducing the computational and storage costs to learn a homomorphic exact logistic regression model (i.e. evaluate P-values of coefficients), where the circuit depth is proportional to the logarithmic scale of data size. We evaluate the algorithm performance using rare Kawasaki Disease datasets. Availability and implementation: Download HEALER at http://research.ucsd-dbmi.org/HEALER/
IntroductionGenome-wide association studies (GWAS) () have largely focused on the common disease gene discovery, which often involves large sample sizes. In GWAS, many common variations [e.g. Single-Nucleotide Polymorphisms (SNPs) with frequencies > 1%] have been studied to uncover the risk of complex genetic disorders. One controversy in GWAS is whether multiple rare variations (with frequencies much <1%) may also result in certain risk. These unknown associations might be very important, as they could reveal the biologic cause of diseases and provide useful suggestions for treatments (). For example,show that rare variants (e.g. protein-modifying rare risk alleles) play a clear role in Mendelian disorders. There is increasing interest in the rare variants studies () in GWAS. However, rare variations must have much higher effects (e.g. odds ratios) than that of common SNPs in order to be detected by ordinary GWAS methods (e.g. logistic regression) (). These variants may be too rare, such that there are not enough participants with these rare alleles that could be identified in a study. When variants are very rare (i.e. lacking of enough samples), ordinary tests [e.g. Wald-test () in GWAS fail to capture true significant alleles, as the asymptoticapproximation assumption might be no longer valid. For example, in a recent study () with unbalanced case-control population, (i.e. the number of case patients is about 10 times less than that of the control population), the ordinary method identified hundreds of significantly rare SNPs that is related to breast cancer. However, a later study (shows that most of these significant rare SNPs are false positive after applying exact logistic regression (). The exact logistic regression is more robust in computing P-values for rare variants analysis with limited sample size (). The studies of rare variants also raise significant privacy concerns of participants. Rare variants can be highly unique to the specific population, which makes them more vulnerable to re-identification attacks. As discussed in a previous study,show that an individual can be uniquely identified by using as few as 75 independent SNPs. Recent studies () demonstrated that even anonymized genome data can leak signification personal information (e.g. name) of the participants. Moreover, even aggregated genome information (e.g. test statistics) can be used to recover sensitive personal information (). As genome data are vulnerable to various attacks (), it is imperative to develop protection methods to secure genome analysis. A number of technical solutions () have been proposed to protect genome privacy in data analysis. Existing studies can be categorized into two groups: (i) protecting the computation process () in genome data analysis, and (ii) protecting the genome data before computation () or research outcomes after computation (). In this work, we focus on the protection of the computation process of rare variants analysis in GWAS. In particular, we consider the use of homomorphic encryption techniques in designing secure protocols to learn an exact logistic regression model from encrypted data, which allow researchers to securely outsource the storage and computation of sensitive data (e.g. to commercial cloud computing services like Microsoft Azure or Amazon EC2). The development of homomorphic encryption-based methods to support secure genome data computation has been studied in (), where certain computation can be directly carried out over homomorphic-encrypted data. The resulting encrypted outcomes, when decrypted, match the result of the same operations performed on the plaintext. However, none of the aforementioned studies has addressed the problem of rare variants analysis in GWAS. In addition,recently proposed to tackle the secure rare-variants analysis using multi-party computation techniques. Their approach assumes multiple data owners and active participation of the owners in data storage and computation, which is completely different to our model as illustrated below.illustrates the application scenario of the proposed HEALER framework. Homomorphic encryption allows the encrypted rare disease variants to be stored and computed in a cloud server without requiring the participation of data owners, e.g. request for decryption keys. By encrypting rare variants with public key, data owners can directly upload them to the cloud service. Thus, the genetic association of rare disease variants with a phenotype can be securely evaluated with homomorphic computation over different cohorts. The final encrypted evaluation results are accessible to researchers, but it requires the private key for decryption from the trusted party. Remarkably, there is no interaction between the trusted party and the cloud service, which guarantees the confidentiality of uploaded sensitive information. Therefore, the proposed scheme enables secure outsourcing of the computation of rare disease variants to commercial cloud services, by which individuals could contribute to the rare disease analysis in GWAS in a secure manner protected by the homomorphic encryption schemes. To enable HEALER framework, we developed novel methods including: (i) secure rejection sampling and (ii) secure and efficient integer comparison to compute a homomorphic exact logistic regression model, (iii) parallel computation over homomorphicencrypted data to accelerate the proposed algorithm, (iv) a compression scheme to reduce the storage cost of homomorphic-encrypted data. We also compared the HEALER framework with other competing alternatives and conducted performance analysis of the proposed protocols in this article and the supplementary, including the acceptance rate of rejection sampling, circuit depth, and number of homomorphic operations. The rest of this article is organized as follows. In Section 2, we will introduce the exact logistic regression method and presents the implementation of homomorphic computation of exact logistic regression. Section 3 reports experimental results and Section 4 provides the discussion of the article. Section 5 concludes this article.
MethodsIn this section, we introduce the exact logistic regression model and the proposed homomorphic encryption algorithm to secure the analysis, where a list of frequently used symbols can be found in the Supplementary Materials.
Exact logistic regressionLet us denote by Y  fY 1 ; Y 2 ;. .. Y n jY i 2 f0; 1g; i  1;. .. ; ng a set of independent binary random variables and y  y 1 ; y 2 ;. .. y n  T the realization of Y with n records. For clarity, we use bold and regular symbols to represent vector and scalar variables, respectively. In the logistic regression model, the response probability p i for the ith record is formulated by log p i 1  p i  x T z i  b T x i (1). Application scenario of the proposed HEALER framework. By encrypting rare disease variants with public key, data owners can securely upload them to the cloud service, where the genetic association of rare variants with a phenotype can be securely evaluated with homomorphic computation without requiring the participation of data owners. Authorized researchers can obtain final evaluation results by requiring result decryption from the trusted party with the private key (Color version of this figure is available atHere z i is a nuisance variable, which is correlated to the explanatory variable x i , but may not be of direct interest. We can eliminate the model parameter x by conditioning on the sufficient statistics t N  P n i1 y i z i. Let us denote t I  P n i1 y i x i as the sufficient statistics of parameters of interest (i.e. b) and define t 0  P n i1 y i. The exact inference of b is based on the permutation distribution of its sufficient statistics. The conditional likelihood function of T I given T N  t N can be expressed aswhere C(u, t N ) is the number of vectorsNote that y* is just a permutation of y. We define two vectors are equal, if their pair-wise elements are identical. Without loss of generality, we would like to make inferences about a single parameter b with respect to the explanatory variable x i. For the case of multiple parameter (i.e. b  b 1 ; b 2 ;. .. b h2  T with h 2 > 1), one can eliminate the rest h 2  1 parameter by conditioning on their sufficient statistics in Equation (3). In this study, we limit our discussion of the problem with considering a single parameter at a time. Suppose we are interested in the following hypothesis test with null hypothesis against its two-sided alternative. H 0 : b  0 (4)One can calculate the exact P-value by summing the following conditional probability over a certain critical region RFor example, the critical region can be defined as R  fv : 0g. This region includes all possible values of the test statistic at which the above conditional probability is equal or less than that at the observed value of t I. Sampling methods () are widely used to efficiently evaluate the Pvalue, where a detailed discussion can be found in Section S1 in Supplementary Materials.
Homomorphic encryption-based exact logistic regression 2.3 Parallel computation using multiple slotsIn this section, we will discuss how to perform parallel computation using encryption schemes to support single instruction multiple data (SIMD) with L S slots. It is worth mentioning that packing multiple ciphertexts into multiple slots have no impact on the size of encrypted data. We can utilize the multiple slots by packing (see Supplementary): (i) pre-permuted vectors of the same observation y  y 1 ; y 2 ;. .. ; y n  T or (ii) covariates from different models. In the scenario (i), we need to encrypt a few pre-permuted vectors where is the lth permutation instance of the vector y indicated by the permutation index S l  S l 1 ; S l 2. .. ; S l n  with l  1, 2,. .. ,L S. In this scenario, each slot can generate different samples for the same model using SIMD in parallel. Given multiple samples across multiple ciphertext slots, we can apply the proposed HEALER framework over the same covariate ^ x l (e.g. the lth encrypted SNP) with different samples. Finally, the user can aggregate multiple counts to learn the P-value. The use case of the scenario (i) is that the data owner possesses all the observations in y (as it requires pre-permutation in multiple slots during the encryption phase) and would like to minimize the computational time of analyzing a single model. In contrast, the scenario (ii) allows cloud to learn multiple models in parallel. We can apply the HEALER framework over multiple covariate ^ x 1 ; ^ x 2 ;. .. ; ^ x LS with the same sample , where ^ x l  ^ x l 1 ; ^ x l 2 ;. .. ; ^ x l n  T with l  1, 2,. .. , L is the covariate in lth model (e.g. different independent SNPs). Then, the aggregated counts in each slot can be used to evaluate the P-values in different models (e.g. independent SNPs). The use case of the scenario (ii) is that different data owners can securely contribute to the same rare disease study using the same public key (as the pre-permutation is no longer required) and the cloud can maximize the number of concurrent tasks for different model learning. It is quite favorable for rare disease analysis in GWAS, as data in such studies are usually from different sources and involve a large number of SNPs for analysis. Besides SMID parallelization, our framework supports multi-core and multi-node computation, as different computing nodes can access and compute the same encrypted data in parallel.
Storage and communication optimization of homomorphic-encrypted data through compressionCiphertext in homomorphic encryption requires larger storage and communication costs than these of plaintext. It is important to reduce the size of homomorphic-encrypted data through compression, which would significantly improve the efficiency of the proposed framework in practical scenarios. One evidence supporting the motivation is that the ciphertext mainly consists of 10 numeric symbols (i.e. '0''9'), which implies that only four bits are required to represent each symbol. Therefore, the ciphertext size can be reduced by at least 50% with substitution-based compression schemes e.g. gzip () or 7zip (). In our framework, we adopt a Variable-order Markov Model (VoMM) () based compression scheme to further compress the homomorphic-encrypted data. Unlike the substitution based schemes (e.g. gzip or 7zip), VoMM-based methods establish mappings between the emergence frequency of the combination of finite numbers and probabilistic models. As a result, it can provide a more effective compression using the arithmetic coding. In our framework, we employed the PPMd scheme () version-j1 to achieve a better compression.
Results
Experimental setupsOur HEALER framework was implemented in the HElib (https:// github.com/shaih/HElib) and evaluated in the iDASH cloud () at UCSD, where three virtual machines (VMs), each equipped with 96 GB memory and 8 cores, were used. Real rare Kawasaki Disease (KD) Coronary Artery Aneurysm (CAA) datasets with 15 and 30 records were obtained from three different institutions (i.e. UCSD, University of Emory, and Genome Institute of Singapore). Both datasets include one categorical nuisance variable [i.e. Percent C-reactive Protein (PCRP) expression level] with m  3 categorical groups. Moreover, we selected 180 and 372 SNPs to fit slot size L S in ciphertexts to maximize the computational throughput for both datasets based on the parameters shown in Supplementary Table S5. It is worth mentioning that the HEALER framework does not limit the number of supported SNPs. Readers can find more details of datasets and computing environment descriptions in Supplementary Section S8. The goal of this study is to evaluate the feasibility of using homomorphic computation of exact logistic regression to securely identify SNPs susceptible for KD CAA adjusted for different PCRP groups. The time and storage costs of key generation for both datasets are described in Supplementary Table S5.
Experimental resultsWe evaluated the number of valid samples required to obtain the stable number of SNPs with P-value < 0.05 among 10 000 SNPs over plaintext (non-encrypted data) in(a). We can see the number of SNPs with P-value < 0.05 varying with the number of valid samples, where the number decreases rapidly when the number of valid samples is over 80, and tends to be stable for 400 validshows the time cost and sampling performance obtained by packing pre-permuted vectors of the same observation ^ y with multiple slots (see scenarios (i) in Section 2.3) for both KD datasets. Here, data encryption and decryption are one-time costs, which took up to 20 s as shown in. Remarkably, the time cost of P-value calculation for a single SNP was significantly reduced by parallel computation. The algorithm can securely evaluate the P-value of a single SNP within 3 min based on a total of 2262 number of valid samples for the larger KD dataset.shows that the acceptance rates of 19.127 and 6.2687% were achieved for two KD datasets, respectively. In, we simultaneously computed 180 and 372 SNPs for both KD datasets, respectively (see scenarios (ii) in Section 2.3). Ciphertext slots were used to pack covariates from multiple models. Our algorithm generated 1677 and 1864 valid samples for the small and large KD datasets, respectively.shows that the total time cost for P-value calculation is proportional to the number of SNPs and the number of records. However, comparing Tables 1 and 2, we can find that the average time cost for each SNP is mainly related to the number of records. Because the exact logistic regression is targeted to handle rare disease variants analysis, which typically involves a small number of records, the average time cost can be controlled in an acceptable level. In addition, the performance can be further improved by allocating more computational resources (e.g. in the case of could computing). Finally, we validate the p-values calculated based on ciphertext (blue line with diamond marker) with those learned from plaintext (red line with asterisk marker) as shown in, which includes P-values of 372 SNPs for the KD dataset with 30 records. We sorted the results learned from plaintext in ascending order, and ordered P-values learned from ciphertext accordingly.shows that the two curves are mostly matched, which validates the results obtained with the proposed HEALER framework. The differences inare due to the randomness in sampling algorithm.lists the SNP IDs and P-values of the top five SNPs identified in the HEALER framework.
Discussions
Performance analysisWe first analyze the acceptance rate of the proposed protocol. Let us denote n j the number of records with covariate z i  j and n 1 j the number of records with y j  1 in the jth group with j  1,. .. , m for a total of m categories. As samples are drawn by the random permutation of the vector ^ y with a total of n records, the acceptance rate can be expressed asEquation (6) shows that on average there will be a valid sample by drawing 1/p accept samples. In other words, the algorithm can accept p accept r number of valid samples for drawing r samples.
Homomorphic computation of ExAct Logistic rEgRessionMoreover, we conducted the complexity analysis of secure rejection sampling (Algorithm 1 in Supplementary Materials) and secure P-value computation (Algorithm 2 in Supplementary Materials) in terms of circuit depth, number of homomorphic multiplications (HMs), and homomorphic additions (HAs). The detailed step-bystep analysis is provided in Supplementary Materials. For Algorithm 1, Supplementaryshows that the circuit depth is log(2n(m  1)). Given r samples, Algorithm 2 requires a circuit depth of log(4n(m  1)), which is shown in Supplementary Table S4. Finally, the number of HAs and HMs could be reduced by a factor of L S using L S-slot in SIMD parallel computation or further reduced by a factor cL S when using c number of computing cores.
Comparison with other homomorphic encryption applications to protect computation processIn Table 4, we first discuss the storage cost among our proposed HEALER framework and three other homomorphic encryptionbased applications () in terms of the size of a single encrypted value (SSEV) and the number of accumulated homomorphic multiplication (NAHM), where NAHM reflects the depth of a circuit and SSEV represents the average size of each encrypted integer. In addition, we can encrypted a total of L S integers into one ciphertext with L S slots, without increasing the ciphertext size. For example, we use 372 slots to store the KD dataset with 30 records, which yields an average cost of 4.68 KB to store a single encrypted integer without compression.shows that the proposed method requires a much smaller ciphertext than that of the other schemes. When compared with the homomorphic edit distance application (), which represents an integer as a binary vector (BV), the proposed method can directly handle secure integer comparison. For example, at least four ciphertexts are required to represent an integer ranging from 0 to 15 in a BV representation. Thus, BV-based method usually results in a larger ciphertext. The SSEV and NAHMs for the applications of expectation maximization (with different number of iterations) and model evaluation (using logistic regression and cox regression) under various length of ciphertext modulus (in the parentheses) are also listed in, where our method shows the least cost of ciphertext size. Unlike HEALER, which is designed to securely learn an exact logistic regression model over a data set, the applications of model evaluation only take a prelearned model parameter and a single record as inputs and evaluate the prediction result. To further demonstrate the advantage of the proposed HEALER framework, we discuss the storage costs between HEALER and Binary HEALER in. Unlike HEALER using secure integer comparison, Binary HEALER is based on the idea of using BVs to represent integers ().shows that Binary HEALER always requires larger circuit depths (i.e. larger levels L 0 in modulus chain) due to the accumulated HMs required in the BVbased integer addition. BV representation of integers also results in both larger plaintext and ciphertext sizes, as each binary component in the vector needs to be encrypted as a ciphertext. The number of integers in ciphertexts that is required to compute the same dataset in both methods are also listed in, where HEALER requires much less redundant information (i.e. less number of integers). It is worth mentioning that the ciphertext can be further compressed to reduce the storage cost, as discussed in Section 2.4.shows that the ciphertext size can be reduced by >55%, when the PPMd scheme () was employed.
Comparison with perturbation-based protection methodsWe compare HEALER with perturbation-based methods [i.e. Differential Privacy (DP)] for genome information protection. DP () has emerged as one of the strongest privacy guarantees for sensitive data release. DP ensures that the risk incurred by changing any single individual's information in a particular database is bounded by a quantifiable probability, where a higher protection can be achieved by choosing a smaller privacy budget e. In practice, DP protections can be applied either to the original genome data (e.g. SNPs) before computation () or to the research outcomes (e.g. P-value or test statistics) obtained after computation (). To compare with the methods of applying DP before computation (DPBC) and DP after computation (DPAC), we select a KD dataset with 30 records and 744 SNPs. On the basis of the DPBC method by, we grouped 744 SNPs into 18 blocks and set the number of specialization as 5. Then, we apply exact logistic regression over the DPBC protected data (short for the anonymized data that are generated by the DPBC method). We selected the P-value cutoff as 0.05 to evaluate how many significant SNPs can be correctly preserved in the DPBC protected data (in terms of Recall and Precision) under different privacy budgets (i.e. e  1 and 0.5). The number of significant SNPs based on the raw data under the P-value cutoff is also provided in.shows that the recalls of DPBC method areWhere p is plaintext base and L 0 is levels in modulus chain.1.0 MB 3 <0.05 for all setups, which means that <5% of the originally significant SNPs with P-value < 0.05 can be preserved. Based on the idea of DPAC in (), we also derived the corresponding DP algorithm for exact logistic regression in Supplementary Section S9. The results in terms of recall and precision in DPAC are better than those of DPBC in.implies that it is hard to preserve significant SNPs after applying either DPBC or DPAC methods when record number is small. In contrast, the proposed HEALER framework can provide accurate results as well as protect the computation. A more detailed comparison among HEALER, DPBC and DPAC can be found in the Supplementary Section S11.
Comparison with secure multiparty computingHomomorphic encryption methods are highly generalizable and promising for secure outsourcing to meet individual data custodians' need in terms of privacy and utility (). But homomorphic encryption methods are also computation and storage intensive. In contrast, secure multiparty computing protocols are customized for certain data analysis tasks and allow multiple parties to collaborate. In these cases, participating parties jointly compute a function over their inputs, and keep these inputs private. Each party can perform certain computation locally over the controlled-access (private) data, and only exchange intermediary results to synthesize a global model. However, these protocols often require synchronization and involve a large amount of peer-to-peer communication. In contrast, homomorphic-encrypted data allow flexible on-demand analysis requests in an untrusted cloud environment. Given the homomorphic-encrypted data, authorized users are able to repeat existing analysis or conduct new analysis by outsourcing both storage and computation in the cloud.
LimitationThere are several limitations to the HEALER framework in the current designs. First, the HEALER framework is based on the rejection sampling scheme, where the acceptance rate would be low if a suitable proposal distribution is not available in the encrypted domain (). Second, the computational and storage costs over homomorphic-encrypted data are still very significant, which is several order of magnitudes higher than these over plaintext. Although, a compression scheme is employed to reduce the storage cost of homomorphic-encrypted data, further investigation is still needed to improve the storage efficiency. Third, as it is still challenging to efficiently handle homomorphic division operations (), HEALER framework requires users to perform one division operation between two integers [see Equation (S2) in. Finally, HEALER framework only considered the P-value evaluation. The estimation of the parameter b and the predictive inference of a response at x i could be also possible (). However, they were not studied in our current implementation. There is still room to improve our algorithm by redesigning the sampling method to increase acceptance rate or making better use of the HELib and cloud computing parallel capacity. Besides obtaining P-values, we also plan to investigate parameter estimation and predictive inference on encrypted data in our future work.
Potential extension to whole genome sequencing and whole exome sequencingWhole genome sequencing (WGS) and whole exome sequencing (WES) have been widely used to identify rare disease-associated variants (). However, many sources of false positive detections (O') have been identified in discovering rare disease-associated variants in both WGS and WES. Recent study shows that a logistic regression-based filtering method () can be applied to variant call files to reduce false positive detection. We speculate that homomorphic encryption techniques with proper optimizations (e.g. advanced algorithm designs with reduced circuit depth, acceleration with parallel computation, compression on encrypted data, etc.) could be applied to build a secure logistic regression-based filtering method to protect WGS or WES data. These warrant our future studies in homomorphic encryption-based methods.
ConclusionThis article presented a novel HEALER framework for estimating the P-value of exact logistic regression parameters over homomorphic-encrypted data. Our algorithm supports secure outsourcing and mitigates the risk of analyzing sensitive data in an untrusted cloud environment (e.g. Amazon EC2 or Microsoft Azure). We proposed a new rejection sampling approach, secure integer comparison methods and parallelizable mechanisms to accelerate the execution of these algorithms, which make the computation of homomorphic encrypted exact logistic regression practical. We also employed a compression scheme to reduce the storage and communication cost of homomorphic-encrypted data. We demonstrated the computational feasibility of our proposed framework, which takes about 3 min to compute over 30 records in parallel.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
S.Wang et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
.2.1 Homomorphic encryption Homomorphic encryption is a form of encryption technique, which allows certain operations (e.g. addition and/or multiplication) to be conducted directly over ciphertext. Existing homomorphic encryption techniques can be categorized as follows (Fontaine and Galand, 2007): (i) partially homomorphic cryptosystems (PHCs) that support a single type of operation (i.e. either addition or multiplication) over ciphertext (Boneh and Shacham, 2002; Gjsteen, 2006), (ii) fully homomorphic cryptosystems (FHCs) that support arbitrary number of addition and multiplication operations but less efficient (Brakerski and Vaikuntanathan, 2011; Gentry and Halevi, 2011) and (iii) somewhat homomorphic cryptosystems (SHCs) that is specified by a limited number of accumulated operations (Brakerski et al., 2012). PHCs like Paillier cryptosystems (Paillier, 1999): E(x)  g x r m mod m 2 (with modulus m and base g as the public key, and a random number r 2 f1;. .. ; m  1g to ensure the randomness of ciphertext) are very efficient: Ex 1 Ex 2   g x1 r m 1 g x2 r m 2  mod m 2  g x1x2 r 1 r 2  m mod m 2  Ex 1  x 2 . However, PHCs have limitation, as they cannot combine both addition and multiplication operations to securely solve complex problems. FHCs are more powerful than PHCs, as they support both operations without limitation. However, the complexity of FHCs is still formidable in solving practical problem. SHCs, which support a specific number of both accumulated operations, provide a better trade-off between the flexibility and efficiency. In this article, we will leverage SHCs to build basic functions to securely compute exact logistic regression. For the sake of simplicity, the rest of this article will use homomorphic encryption to denote somewhat homomorphic encryption. 2.2.2 The proposed HEALER framework Figure 2 illustrated the four key steps of the proposed HEALER framework, which includes Step A: Data preparation and encryption by data owners, Step B: Secure rejection sampling in public cloud, Step C: Secure P-value computation in public cloud, and Step D: Result dissemination to authorized researchers. In step A, data owners can generate the encrypted dummy vector representations (see Supplementary Section S4) of the input data using homomorphic public key. Then, they can securely outsource both computation and storage of homomorphic-encrypted data to the public cloud service, where a compression scheme is proposed to reduce both storage and communication costs of homomorphic-encrypted data. In step B, the public cloud can securely generate samples by performing random permutations over encrypted data. Then, the proposed secure rejection sampling algorithm (see Supplementary Section S2) can be applied to securely label valid samples. In step C, the public cloud first securely computes the statistics based on the permuted samples and the corresponding labels. Then, the cloud securely counts the number of sample statistics that are greater than these from the originally encrypted dummy vector representations (see Supplementary Section S3). Finally, in step D, the authorized researcher can request the decrypted result to obtain the P-value as defined in Equation (S2) in Supplementary Materials. A detailed description of each step and the corresponding mathematical formulas can be found in Supplementary Sections S1S6.
