Contributions: We developed a new lossless compression method for WIG data, named smallWig, offering the best known compression rates for RNA-seq data and featuring random access func-tionalities that enable visualization, summary statistics analysis and fast queries from the compressed files. Our approach results in order of magnitude improvements compared with bigWig and ensures compression rates only a fraction of those produced by cWig. The key features of the smallWig algorithm are statistical data analysis and a combination of source coding methods that ensure high flexibility and make the algorithm suitable for different applications. Furthermore, for general-purpose file compression, the compression rate of smallWig approaches the empirical en-tropy of the tested WIG data. For compression with random query features, smallWig uses a simple block-based compression scheme that introduces only a minor overhead in the compression rate. For archival or storage space-sensitive applications, the method relies on context mixing techniques that lead to further improvements of the compression rate. Implementations of smallWig can be executed in parallel on different sets of chromosomes using multiple processors, thereby enabling desirable scaling for future transcriptome Big Data platforms. Motivation: The development of next-generation sequencing technologies has led to a dramatic decrease in the cost of DNA/RNA sequencing and expression profiling. RNA-seq has emerged as an important and inexpensive technology that provides information about whole transcriptomes of various species and organisms, as well as different organs and cellular communities. The vast volume of data generated by RNA-seq experiments has significantly increased data storage costs and communication bandwidth requirements. Current compression tools for RNA-seq data such as bigWig and cWig either use general-purpose compressors (gzip) or suboptimal compression schemes that leave significant room for improvement. To substantiate this claim, we performed a statistical analysis of expression data in different transform domains and developed accompanying entropy coding methods that bridge the gap between theoretical and practical WIG file compression rates. Results: We tested different variants of the smallWig compression algorithm on a number of integer-and real-(floating point) valued RNA-seq WIG files generated by the ENCODE project. The results reveal that, on average, smallWig offers 18-fold compression rate improvements, up to 2.5-fold compression time improvements, and 1.5-fold decompression time improvements when compared with bigWig. On the tested files, the memory usage of the algorithm never exceeded 90 KB. When more elaborate context mixing compressors were used within smallWig, the obtained compression rates were as much as 23 times better than those of bigWig. For smallWig used in the random query mode, which also supports retrieval of the summary statistics, an overhead in the compression rate of roughly 3–17% was introduced depending on the chosen system parameters. An increase in encoding and decoding time of 30% and 55% represents an additional performance loss caused by enabling random data access. We also implemented smallWig using multi-processor programming. This parallelization feature decreases the encoding delay 2–3.4 times compared with that of a single-processor implementation, with the number of processors used ranging from 2 to 8; in the same parameter regime, the decoding delay decreased 2–5.2 times. Availability and implementation: The smallWig software can be downloaded from:
IntroductionNext-generation sequencing technologies have resulted in a dramatic decrease of genomic data sequencing time and cost. As an illustrative example, the HiSeq X machines introduced by Illumina in 2014 enable whole human genome sequencing in less than 15 h and at a cost of only $1000 (http://www.illumina.com/systems/hiseq-x-sequencingsystem.ilmn). A suite of other-seq techniques has closely followed this development (for a comprehensive overview, see http://res.illumina. com/documents/products/research_reviews/), including the by now well-documented RNA-seq method. RNA-seq is a shotgun sequencing technique for whole transcriptomes () used for quantitative and functional genomic studies. In addition to generating sequence-related information, RNA-seq methods also provide dynamic information about gene or functional RNA activities as measured by their expression (abundance) values. This makes RNA-seq techniques indispensable for applications such as mutation discovery, fusion transcript detection and genomic medicine (). As a result, the volume of data produced by RNA-seq methods can be foreseen to increase at a much faster rate than Moore's law. It is therefore imperative to develop highly efficient lossless compression methods for RNA-seq data. The problem of DNA and RNA sequence and expression compression has received much attention in the bioinformatics community. Compression methods for whole genomes include direct sequence compression (e.g.) and reference-based compression schemes (e.g.). The former class of methods explores properties of genomic sequences such as small alphabet size and large number of repeats. The latter techniques use previously sequenced genomes as references with which to compare the target genome or sequencing reads, leading to dramatic reductions in compressed file sizes. Related similarity-discovery-based schemes are usually applied to a large collection of genomes and they achieve very small per genome compression rates (e.g.). Moreover, recent work also includes the compressive genomics paradigm, which allows for direct computation and alignment on compressed data (). The aforementioned methods and some information-theoretic techniques to biological data compression were reviewed in (). For every base pair in the genome, an RNA-seq WIG file contains an integer or floating-point expression value. Human transcriptome WIG files may contain hundreds of millions of expression values, which amounts to GB of storage space (e.g. one of the subsequently analyzed WIG files randomly chosen from the ENCODE () project has a size of 5 GB). WIG files are usually compressed by bigWig (), which basically performs gzip compression on straightforwardly preprocessed data. Unfortunately, the bigWig format does not appear to offer significant data volume reductions and about 10% of the tracks from the UCSC ENCODE hg19 browser in bigWig format take up 31% in storage space (Hoang and Sung 2014). Recently, another compression suite, termed cWig (Hoang and Sung 2014), was implemented as an alternative to bigWig. The cWig method outperforms bigWig in terms of compression rate, and random query time, although it still relies on suboptimal compression techniques such as Elias delta and gamma coding (). This work focuses on transform and arithmetic compression methods for expression data in the WIG format. Since WIG files capture expressions of correlated RNA sequence blocks, modeling these values as independent and identically distributed random variables is inadequate for the purpose of compression. Hence, we first perform a statistical analysis of expression values to explore their dependencies/correlations and then proceed to devise a new suite of compression algorithms for WIG files. Since the WIG format is not limited to RNA-seq data, our compression methods are also suitable for other types of dense data, or quantitative measurements, such as GC content values, probability scores, proteomic measurements and metabolomic information. The main analytic and algorithmic contributions of our work are as follows:i. Devising a new combination of run length and delta encoding that allows for representing the expression data in highly compact form. As part of this procedure, we identified runs of locations with the same expression value and then computed the differences of adjacent run values. The resulting transformed sequences are referred to as run difference sequences and specialized statistical analysis of difference sequences constitutes an important step towards identifying near-optimal compression strategies. ii. Analyzing the probability distributions of the difference sequences and inferring mixture Markov models for the data. As part of this step, we estimated information-theoretic quantities, such as the (conditional) entropy, to guide us in our design and evaluation process. More precisely, we first fitted power-law distributions to the empirical probability distributions of the difference sequences. Second, we showed that strong correlations exist between adjacent run differences, while there exists only a relatively small correlation between the sequences of run length differences and that of the corresponding run expression differences. These findings provide a strong basis for performing separate compression of the run length and the expression information. iii. Developing arithmetic encoders for compression of the difference sequences, including options such as basic arithmetic coding and context-mixing coding based on the work in. In this step, we were guided by the results of the statistical analysis and performed alphabet size reduction in the difference sequences and subsequent run length and run expression compression. With this step, we were able to achieve 17fold improvements in the compression rate when compared with bigWig: as an illustration, a typical WIG file of size 5 GB was compressed to roughly 6469 MB, depending on the userdefined operational mode; in comparison, traditional gzip and the bigWig () compressors produced files of sizes 1.1 GB and 1.2 GB, respectively.Our new compression algorithm follows the standard requirements for expression data representation/visualization by allowing random access features via data blocking and separate block compression. It also encodes data summary statistics, akin to bigWig data formats. Furthermore, smallWig has two implementation modes, one of which runs on a single processor and another which uses multiple processors in parallel. The parallelized version of the algorithm offers significant savings in computational time, with identical rate performance as the serial version. The remainder of the article is organized as follows. Section 2 provides the idea behind our sequence transformations and coding methods. Section 3 contains our statistical analysis. A detailed description of the smallWig algorithm is provided in Section 4. Compression results and a comparative study of compression methods is given in Section 5. A discussion of our findings and concluding remarks are given in Sections 6 and 7, respectively.
Methods: sequence transformationsWe start our analysis by introducing WIG data transforms that allow for efficient run length encoding and by explaining how to use difference values in subsequent compression steps. To illustrate some of the concepts behind our analysis, we make use of a WIG file from the ENCODE project () pertaining to RNASeq cell line GM12878, for which the RNA fraction is Long PolyA and the compartment is Nucleus. Throughout, we use capital letters to represent sequences, and lower case letters to represent elements in sequences. We write a  f1; 2;. .. ; ag, for any positive integer a 2 N  , and a; b  fa; a  1;. .. ; bg, for two positive integers a b. The WIG files of interest comprise two sequences: @BULLET The Location Sequence A  a 1 ; a 2 ;. .. ; a M , where M denotes the length of the sequence. Sequence A contains chromosomal positions (or locations) satisfying a i 2 N  for all i 2 M, and a i < a i1 for all i 2 M  1. This sequence typically contains consecutive indices of the base pairs, for which a i1  a i  1, except for skipped locations with expression value equal to zero, for which a i1 > a i  1.A run is defined as a sequence of consecutive locations with identical expression value. The number of locations in the run is called the run length, and the corresponding expression value is called the run expression. Note that if for some integers i j, one has a t1  a t  1 for all t 2 i; j  1, and b i  b i1 . ..  b j , then the sequence corresponds to a run of length j  i  1 with run expression equal to b i. On the other hand, if for some integer i there exist skipped locations, i.e. locations for which a i1 > a i  1, and b i ; b i1 6  0, then the run is of length a i1  a i  1 with corresponding run expression value equal to 0. Thus, there is a 1-1 mapping from the sequences A and B to the run length and run expression sequences described below: @BULLET The Run length Sequence C  c 1 ; c 2 ;. .. ; c N ; c i 2 N  ; i 2 N, a sequence of run lengths that describes the runs of consecutive locations with identical expression values. Alternatively, one may define the sequence by stating that for locations confined to  P i t1 c t  1; P i1 t1 c t , the expression values are identical. Here, N denotes the number of runs. If N 0 denotes the number of skipped runs of value 0 in a WIG file, then P N i1 c i  M  N 0. @BULLET The Run Expression Sequence D  d 1 ; d 2 ;. .. ; d N ; d i 2 R, i 2 N, a sequence of expression values that corresponds to the runs. More precisely, the sequence specifies that the ith run has expression value d i , for all i 2 N.For our running example, the original WIG sequences were of length N  3:2e  8, while the run and difference sequences were of lengthHere, we also point out that a related run length transformation has been investigated in BedGraph format, while the idea of run length and difference-value transformations has been studied in (). In the latter work, the authors also demonstrated the potential benefit of using these transformations on WIG data.
Methods: statistical data analysisIn what follows, we describe how to fit empirical probability mass functions and compute empirical entropies for the run length and run expression difference sequences X, Y. Moreover, we study higher order dependencies of adjacent elements within the sequences X and Y, as well as dependencies between the sequences X and Y.
Fitting empirical probability mass functionsWe computed the empirical frequencies for the run expression and run length difference sequences. Both sequences roughly follow a power-law distribution, with probability density functionwhich can consequently be used to approximate the empirical probability mass function [similar to the method in Pavlichin et al.. Therefore, we can parameterize the two empirical distributions with only two parameters, a and b. Goodness of fit may be estimated via the standard Kolmogorov-Smirnov statistics or some other means. For a more detailed analysis of the empirical probability distributions, the reader is referred to the Supplementary Material. smallWig: parallel compression of RNA-seq WIG files
Empirical entropy computationNext, we propose three correlation models for the difference sequences X, Y and estimate the entropy of their underlying distributions. A detailed description of these models may be found in the Supplementary Material. Let Z, W be discrete random variables with alphabet Z; W, respectively. The Shannon entropy of Z is defined asSimilarly, the conditional entropy of Z given W is defined asIn what follows, we assume that X, Y are two random sequences of length N of the formIn the Supplementary Material, we list the entropies of all the aforementioned models and for 14 Wig and 10 different BedGraph files, computed using the information theoretic tools described in (). As one may see, the entropy is 1956% smaller for the Markov model than the independent run difference model. In most cases, this reduction in entropy may be attributed to dependencies in the run length differences. In other words, run length values are more likely to be affected by adjacent run length values. On the other hand, considering dependencies between the run length differences and run expression differences only reduces the entropy by about 516%. As a result, the most effective compression strategy appears to be separate compression of the difference sequences X and Y. Because of the large variations in the run expression and run length difference values, computing and storing all conditional probabilities (about 10 10 such entries) under the Markov model requires very large memory. Hence, we first focus on a compression algorithm for the independent model and then discuss our generalized compression scheme based on context mixing, which requires specialized means for overcoming the memory overflow problem.
Compression algorithmsWe start by describing our basic compression algorithms based on arithmetic coding and then show how to enable random queries within the given algorithmic coding framework. In addition, we describe how to reduce the compressed file sizes even further via context-mixing methods. We conclude this section by introducing parallelization techniques for the proposed algorithms. Diagrams of our compression and decompression architectures are given in the Supplementary Material. To compress the RNA-seq expressions, we used two individual arithmetic encoders and decoders for the difference sequences X, Y defined in Section 2. We observe that since expression values can be real valued, any errors in computing the expression differences may cause error propagation during decompression. As a result, the expression difference alphabet has to be stored as well, with a precision large enough to allow for correct decompression. Arithmetic compression () is an entropy coding method that converts the entire input sequence into a range of values (interval) determined by its cumulative frequency. On length-n sequences in Z n , one defines a total order W 0 Z by requiring that W precedes Z lexicographically. For a sequence Z, its code word is the binary representation of a real number between P W:W0Z PW and P W:W0Z PW  PZ. For sequences with independent and identically distributed entries, arithmetic coding is an entropy-approaching compression scheme, given that the distribution of the sequence is known. To ensure small computational complexity, we used arithmetic compression algorithms with range encoding () and some techniques from the package rangemapper by Polar (http:// ezcodesample.com/reanatomy.html?SourceToarticleandsour cecode). Our implementation is similar to the original version of arithmetic coding, except that the underlying probabilities are represented with binary sequences of fixed length, which allows for more efficient computations. Moreover, encoding/decoding may be performed in a streaming fashion. A buffer is used to store the " unresolved range " depending on the yet unobserved part of the sequence. In our implementation, the precision of the buffer was limited to 30 bits so as to control the number of operations performed. Unlike range encoding, in which the calculations are performed base 256, we used base 2 so as to achieve the best compression rate. To facilitate random queries during decompression, we divided the difference sequences into blocks of fixed length. The length subsequently termed block sizecan be chosen by the user, to allow for desired trade-offs between compression rate and query time. Since the compressed sequences have lengths that vary from block to block, we also store the address of each block. Moreover, to quickly obtain the original sequences from the difference sequences, we also store the (start location, expression, run length) triple a i ; b i ; c j  for every starting element in a block. For this purpose, we implemented a simple binary search procedure originating from the start location to identify the blocks corresponding to a random query. For fast visualization of the WIG data and summary statistics analysis, we stored an additional summary vector for every block. The summary vector contains the following six values: (i) the minimum expression value in the block; (ii) the maximum expression value in the block; (iii) the mean value of the block; (iv) the standard deviation of the block; (v) the number of locations covered in the block and (vi) the total number of locations within the block. If a random region is queried, the aggregated summary vector for the queried region is computed as follows. First, all blocks that are completely included in the queried region are identified, and their summary information is computed from the summary vectors of the blocks; then, the starting and ending blocks partially contained within the query region are retrieved and their summary information is computed directly from the symbols in the blocks. The complexity of the statistics query is linear in the number of queried blocks and in the block size. To explore dependencies among elements in the run sequences, we used the context-mixing algorithm implemented as part of the lpaq1 package (). To illustrate the idea behind context mixing, we focus on context-tree weighting (). In this model, we assume that every element x t 2 f0; 1g in a sequence is generated based on a suffix set S, which can be represented by a degree-two tree of depth not more than D. Here, D is a parameter that indicates the dependency between symbols at a certain distance in the sequence and consequently determines the memory requirements of the algorithm. The root of the tree is indexed by the empty string, while the left (or right) edge of every node represents a 1 (or 0), and every node corresponds to the string associated with its path to the root. Each suffix/leaf s is associated with a parameter h s , which equals the probability of the next source symbol x t1 being equal to 1 conditioned on the suffix of the semi-infinite sequence .. . x t2 x t1 x t beings. Let h s x t 1   Px t1  1jx t tjsj1  s denotes the conditional probability of a symbol given the preceding jsj symbols being equal to s, where we denote by x j i the string x i ; x i1 ;. .. ; x j ; for i j. The probability h s (called the model parameter) is usually not known but can be estimated using the KrichevskyTrofimov (KT) method (Krichevsky and Trofimov 1981). Moreover, the actual tree generating the sequence (called the model) is also unknown. The context-tree weighting algorithm takes a weighted sum over all tree models with depth not exceeding D. The redundancy introduced by the lack of knowledge of both the parameter and the model is bounded, and context-tree weighting is optimal since it achieves the lower bound of redundancy derived in Rissanen (1984). More details regarding this method are provided in the Supplementary Material. The context-mixing algorithm lpaq1 () that we used in our implementation predicts the next bit based on the previous six bytes, as well as the last matching context. Hash tables are built to store the history and the context. During compression, the algorithm adaptively updates the probability distribution of the next bit based on its current prediction and uses arithmetic coding with time varying probability values. Since adaptive schemes perform poorly for short sequence lengths, the context-mixing scheme is only recommended in the one-block compression mode which does not allow random query. As a result, context-mixing compression should be used for archival storage. To speed up compression/decompression, we also implemented a parallel scheme for arithmetic coders with random query. The scheme partitions the original sequences based on its chromosome index and compresses each substring on a separate processor. Details of this implementation and its performance are discussed in the Results Section.
ResultsWe tested our compression algorithm on 14 integer-valued WIG files with sizes ranging from 1.5 to 5.3 GB and on 10 integer and real-valued BedGraph files. All Wig files contain human transcriptome RNA-seq data from the ENCODE hg19 browser. Since smallWig is designed for WIG files, here we mainly focus on the 14file set. A more detailed report on the performance of smallWig on both file sets can be found in Supplementary Material. We measured the performance of smallWig and other existing algorithms through the: @BULLET Compression rate (compression ratio), the compressed file size divided by the original file size. @BULLET Running time of: (i) the encoding, (ii) the decoding and (iii) the random query process.shows the compression rates achieved by various variants of smallWig, compared with the rates of gzip, bigWig and cWig through BedGraph. The depicted entropy is under the independent run difference model. With arithmetic coding, our algorithm offers 18-fold rate improvements compared with bigWig. In fact, the compressed file size of our running example is only 1/80 of the original WIG file. Furthermore, the compression rate is only 1.6% larger than the empirical entropy and may be attributed to storing the empirical probabilities. With context-mixing, one can further improve the compression rate to 23 times compared with bigWig. For compression with random queries, smallWig offers 17-fold rate improvements compared with bigWig. According to the report in Hoang and Sung (2014), the compression rate of the state-of-the art cWig method is about 3.1 times better than that of bigWig. However, we found that one can obtain an even better rate by first converting a WIG file into a BedGraph file and then converting the BedGraph file to cWig with some simple additional processing (BedGraph files are compact representations of WIG files that fundamentally rely on run length coding). Our sequential WIG-BedGraph-cWig pipeline performs about 8.5 times better than bigWig. The newly introduced smallWig method still performs twice as well as the proposed modification of cWig. For databases containing TB/PB of WIG files, a 2-fold reduction in file sizes may lead to exceptionally important storage cost savings. In, we present the running time of smallWig encoding/ decoding schemes, as well as those of gzip, bigWig and cWig. With arithmetic coding, smallWig has a 2.5 times smaller encoding and 1.5 times smaller decoding time compared with that of bigWig. Arithmetic coding with random query has 1.9 times smaller encoding time than bigWig. Context-mixing algorithms are computationally intensive compared with arithmetic coding and require significantly longer running time. To compare the effect of different block sizes used for random query on compression rate and encoding/decoding time, we refer the reader to. In the experiments, the block sizes ranged from 512 to 4096. To enable random query, we introduced a 317% overhead in compression rate and a 30% and 55% overhead in encoding and decoding time, respectively.lists the random query time. Note that the start positions (and for long queries the end positions) of the queries were generated uniformly at random among all allowed chromosomal locations for every chromosome. For short queries, the query length was fixed to 1000, so that one query falls within a single block; in this case, the query time corresponds to the time needed to retrieve the corresponding block. One can see that smallWig is comparable in performance to bigWig for short queries and runs about three times faster for long queries. It is also comparable to cWig for both types), cWig (Hoang and Sung 2014) through BedGraph and smallWig methods, which encompass arithmetic coding, arithmetic coding on blocks of size 1024 and context-mixing algorithms using lpaq1 (). To test cWig, we constructed our own WIG-BedGraph-cWig pipeline. All presented results are averaged over 14 sample files taken from ENCODE hg19. A more detailed table is included in the Supplementary Material smallWig: parallel compression of RNA-seq WIG filesof queries. Moreover, to facilitate visualization, in the random query functions, smallWig outputs the exact summary information together with the queried location-expression pairs. On the other hand, the bigWig summary function only outputs information corresponding to the overlapped blocks but not to that of the exact queried region. We observe that for all the tested files, smallWig with arithmetic coding had a relatively small memory usage, as listed in. In particular, during most of the compression tests, the memory usage was less than 10 KB. With different user-defined parameters, smallWig with context mixing had higher and more variable memory usage, ranging from 90 KB to 1200 MB. We note here that since gzip does not offer random access and summary information, its memory usage is smaller than that of the other algorithms. In, we show the running time of parallel multiprocessor compression methods. The encoding time is decreased by 23.4 times as the number of processors increases from 2 to 8. Furthermore, the decoding time is decreased by 25.2 times. The time does not decrease linearly since we used a uniform sequence partition procedure for individual chromosomes, and chromosomes have largely different lengths. Moreover, after every step in the algorithm (e.g. sequence transformation, empirical probability computation, arithmetic coding), some components of the pipeline have to pause until all processors have finished their computations and their information is aggregated. We also tested smallWig on 10 WIG files that were generated from BedGraph files including integer-valued as well as floatingpoint-valued expressions. The average compression rates are shown in. Note that BedGraph already takes into account the run length transformations and hence the compression rate improvements for these files are not as large as those for WIG files. For integer-valued files, smallWig is 5 and 1.8 times more efficient than bigWig and cWig, respectively. For floating point-valued files, smallWig is 4.3 and 1.9 times more efficient than bigWig and cWig, respectively. More details about these tests can be found in Supplementary Material.
DiscussionIn what follows, we describe the differences in compression strategies used by various methods and attempt to intuitively explain the improved performance of smallWig compared with cWig and bigWig. All three algorithmsbigWig, cWig and smallWiguse run length encoding. Both cWig and smallWig use delta encoding. Moreover, all three algorithms use blocks of a certain size for random query purposes: bigWig and cWig only operate with fixed
Running Time
Compression DecompressionFig. 2. Encoding and decoding time of gzip, bigWig and smallWig algorithms using arithmetic coding, arithmetic coding on blocks of size 1024 and our context-mixing algorithm. The encoding/decoding time is expressed in seconds per MB of the original WIG file. All the results were averaged over 14 sample files from ENCODE hg19. The error bars indicate the standard deviation. A more detailed table is included in the Supplementary MaterialThe label " no block " indicates that the whole sequence is compressed as a single block. The encoding/decoding time is expressed in seconds per MB in the original file. The y-label is for both the rate and the speed (s/MB). All the results are averaged over 14 sample files from ENCODE hg19We list the average query time in seconds per queried location for long queries, and the average query time in seconds for short queries, together with the corresponding standard deviations, over all 14 WIG files and 240 queries on each file.] on each block. As already pointed out, gzip is a universal source coding scheme that does not rely on prior knowledge about the probability distributions. It approaches the entropy rate if the source is stationary and ergodic and as the sequence length goes to infinity. Since the alphabet sizes of the sequences are fairly large (a few thousand to several tens of thousand) but the block sizes are only 512, gzip offers somewhat poor performance. On the other hand, cWig uses Huffman codes for frequent values, and Elias delta codes for less frequent values. Both codes perform symbol-by-symbol encoding. Assume that the data source is producing independent and identically distributed outputs with probability mass function p. Since the code word of a symbol x must be represented by a binary sequence, say of length 'x, the individual symbol redundancy rx  'x  log 2 1 px is a real number in 0; 1. Even for Huffman encoding (i.e. the optimal prefix encoding), the expected per-symbol redundancy may be large enough to create " visible " rate losses. There exist a number of results on the upper and lower bounds of the expected redundancy r  E X rX for a random variable X. For example,showed an upper bound based on the largest symbol probability;bounded the redundancy both from above and below based on the largest and the smallest symbol probability andshowed a tight upper and lower bound based on one known symbol probability p. In particular, in the latter case, the redundancy is lower bounded by r ! mp  Hp  1  plog 2 1  2 m ; where m > 0 is either dlog 2 peorblog 2 pc, depending on which value minimizes the overall expression. Here, H denotes the binary Shannon entropy function: Hp  plog 2 p  1  plog 2 1  p. For our running example, the run expression difference x  1 has the largest probability, p1  0:3374, which leads to the corresponding redundancy of Huffman coding r!0:0275: For a given distribution and a given symbol-by-symbol codebook which may not be optimal, there exists a non-negative and non-negligible coding redundancy r; on blocks of length 512, the overall redundancy equals 512r, which is at least 14 bits per block for Huffman codes. If a different suboptimal code or unmatched Huffman code is used, this redundancy may be even larger. At the same time, arithmetic coding only causes a redundancy up to 2 bits per block if the probability distribution is known. As a result, smallWig files are significantly smaller than cWig files. Furthermore, smallWig is flexible in terms of the block size and enables context-mixing as well as parallel processing.
ConclusionsWe studied compression methods for RNA-seq expression data. We proposed a new algorithm, termed smallWig, which achieves a compression ratio that is at least one order of magnitude better than currently used algorithms. At the same time, the algorithm also improves the running time and flexibility of random access. The presented results included detailed performance evaluations of smallWig in the standard, random access, context mixing and parallel operation mode.. Compression rates for BedGraph files. The bars on the left correspond to compression rates for integer-valued files, and the bars on the right correspond to compression rates for floating-point-valued file formats. Since the tested files have a large variance on their sizes, we take the sum of the compressed file sizes divided by the sum of the original BedGraph file sizes as our average rate smallWig: parallel compression of RNA-seq WIG files
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Z.Wang et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M  3:9e  7. Note that a similar transform is used in the bigBed format, which provides a more succinct representation of sparse WIG data (we will revisit the Bed format in the results section). Since adjacent runs tend to have similar lengths and expressions, the differences between consecutive runs may lead to further compaction of WIG information. To describe the difference sequences, let c 0  0; d 0  0.  The Run length Difference Sequence, X  x 1 ; x 2 ;. .. ; x N , is defined by x i  c i  c i1 , so that x i 2 Z for all i 2 N.  Run Expression Difference Sequence, Y  y 1 ; y 2 ;. .. ; y N , is defined by y i  d i  d i1 , so that y i 2 R for all i 2 N.
