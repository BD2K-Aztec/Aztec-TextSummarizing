Motivation: Protein sequence searching and alignment are fundamental tools of modern biology. Alignments are assessed using their similarity scores, essentially the sum of substitution matrix scores over all pairs of aligned amino acids. We previously proposed a generative probabilistic method that yields scores that take the sequence context around each aligned residue into account. This method showed drastically improved sensitivity and alignment quality compared with standard substitution matrix-based alignment. Results: Here, we develop an alternative discriminative approach to predict sequence context-specific substitution scores. We applied our approach to compute context-specific sequence profiles for Basic Local Alignment Search Tool (BLAST) and compared the new tool (CS-BLASTdis) to BLAST and the previous context-specific version (CS-BLASTgen). On a dataset filtered to 20% maximum sequence identity, CS-BLASTdisis was 51% more sensitive than BLAST and 17% more sensitive than CS-BLASTgenin, detecting remote homo-logues at 10% false discovery rate. At 30% maximum sequence identity , its alignments contain 21 and 12% more correct residue pairs than those of BLAST and CS-BLASTgen, respectively. Clear improvements are also seen when the approach is combined with PSI-BLAST and HHblits. We believe the context-specific approach should replace substitution matrices wherever sensitivity and alignment quality are critical.
INTRODUCTIONInferring the functions and the structures of proteins from those of homologous proteins has proven to be an extremely powerful approach in biology. To predict a homologous relationship between two proteins, their sequences are aligned such as to maximize the sum of scores over all aligned pairs of amino acid residues minus penalties for gaps. A sufficiently high score indicates a homologous relationship. The standard method for calculating scores for pairs of amino acids is the substitution matrix method (). The substitution score for amino acids a and b can be written as Sa, b  const  logPajb=Pa, where Pajb is the probability of amino acid b mutating into a, and P(a) is the background probability of a. The probabilities P(a) and Pajb are derived by counting the numbers of amino acids a and of aligned pairs (a, b) in a large set of trusted sequence alignments. As protein sequences of folded domains are constrained by the necessity to maintain a stable structure, the substitution probabilities for a given residue are largely determined by the structural context within which it resides. Substitution matrices have, therefore, been trained for particular structural contexts, for example, depending on the residue's secondary structure, solvent accessibility or polarity (). Methods that infer substitution probabilities of amino acids solely from their local sequence context have the advantage that they do not require the structure of the query protein to be known (). In Biegert and SodingSoding (2009), we formulated a general approach to predict substitution probabilities from sequence context; for each residue in the query sequence, we compared the 13-residue window centred around it with a precomputed library of 13-column sequence profiles that represent all known sequence contexts. The substitution probabilities are computed as the weighted mixture of the central columns in these context profiles, with weights proportional to the similarity between the context profile and the 13-residue sequence context. The approach was based on a generative model for learning context-specific substitution probabilities. The goal of this work is to further improve the prediction accuracy by developing a discriminative machine learning method for the prediction of substitution probabilities. As in our previous work, we apply the method to enhance Basic Local Alignment Search Tool (BLAST) by storing the predicted substitution probabilities for the query sequence in a sequence profile and jump-starting PSI-BLAST with it. We also apply the new method to generate context-specific pseudocounts for PSI-BLAST () and HHblits (), our highly sensitive iterative sequence search software based on the pairwise comparison of hidden Markov models (HMMs). In all cases, we observe significant improvements over the generative version. *To whom correspondence should be addressed.
METHODS
Generative versus discriminative modelsA generative model explicitly describes the joint distribution Px, y  PxjyPy over the observed variable x and the target variable y. A generative model allows one to generate new data points x, y. Usually, it models the probabilities Pxjy and Py separately (). To predict the unobserved target variable y given the observed data x, the generative model uses Bayes' theorem, Pyjx  PxjyPy= P y PxjyPy. A discriminative model directly models the probability Pyjx of the target variable conditioned on the observed variable (;). It does not model the distribution of the input variable x, which is not needed to predict y given x. Generative models are commonly trained by maximizing the joint probability Q n Px n , y n  over the training data x n , y n , whereas discriminative models are usually trained by maximizing the conditional probability Q n Py n jx n . Therefore, if the goal is to predict y given x, discriminative models seem more appropriate ().
Discriminative model for context-specific substitution probabilitiesGiven a query sequence x 1 ,. .. , x L , we want to predict context-specific substitution probabilities PajC i . PajC i  is the probability to observe amino acid a given sequence context C i. The context C i describes the sequence of l  2d  1 amino acids around position i of the input sequence. More precisely, C i is a binary profile, C i j, a  Ix ij  a for j 2 fd,. .. , dg, whose entries are 1 if x ij  a and zero otherwise. Like the generative approach in Biegert and Soding(summarized in the Supplementary Material), the discriminative approach for modelling the substitution probabilities PajC i  is again based on K context states, indexed by k 2 f1,. .. , Kg. Each context state k is characterized by the following real-valued parameters: emission weights k a, bias weights k and context weights k j, a. The emission probabilities Pajk from context state k are given by the emission weights as follows:In the generative model, the probability for context state k given context C i was obtained with Bayes' theorem as PkjC i   PC i jkPk= P k 0 PC i jkPk, where PC i jkPk was modelled with a multinomial distribution, and the previous cluster probabilities P(k) were model parameters. In the discriminative approach, we model PkjC i  directly by the exponential of an affine function of the context count profile C i j, a,with a normalization constant ZC i  that normalizes PkjC i  to 1. The bias weights k quantify how much cluster k is preferred over the other clusters and roughly correspond to the P(k) of the generative model. The context information is encoded by the context weights; k j, a is positive if amino acid a is preferred in column j and negative otherwise. The k j, a corresponds to the probabilities p k j, a of the context profiles of the generative model [see Equations (57) in Supplementary Material for details]. As in the generative model, we assume that the emitted amino acid a only depends on the context through the context states k:In other words, the target distribution PajC i  is obtained by mixing the emission probabilities Pajk of each context state k weighted by the similarity PkjC i  of C i to k. In essence, our discriminative model is a logistic regression maximum entropy classifier (;) for discriminating between context states k given C i .illustrates the computation of the context-specific substitution probabilities PajC i . To train the model parameters, abbreviated as , , , we constructed a training set consisting of N  6  10 6 training pairs C 1 ,e c 1 ,. .. , C N ,e c N , where C n ,e c n  was sampled from a multiple sequence alignment (MSA) with query sequence x and sequence profile q at position i(n). C n describes the sequence context of x at position i(n), C n j, a  Ix inj  a. The vector e c n stores how often each amino acid a occurs in alignment column i(n),e c n a  N q in qin, a. Here, N q i is the effective number of sequences in column i of the MSA from which q was built. It measures the diversity of the profile and is theof the mean entropy of the amino acid probabilities over all profile columns (Supplementary Material). The generative model was trained by maximizing the product over all probabilities PC n  that context C n can be generated by a mixture of K context profiles p k. However, the actual goal should rather be to predict PajC n , the frequency of a given context C n , not to learn the distribution of the contexts C n , which are observed anyway. We, therefore, trained our model parameters , , by maximizing the logarithm of the conditional probability of target amino acid distributions e c n given the observed sequence contexts C n in the training set as follows:Here, Pe c n jC n , , ,  follows a multinomial distribution,,  are calculated according to Equations (13). The previous probability P, ,  is modelled as product of Gaussian distributions with zero means and with SDs , j  center jjj and v as follows:We used stochastic gradient descent () with initial learning rate 0 for optimizing the log conditional probability f in Equation (4) (see Supplementary Material). The approach described so far can easily be generalized to sequence profiles in a way that all equations (15) remain valid without change. A sequence profile q is built from a MSA of sequences that are homologous to the query sequence. The profile probabilities q(i, a) correspond to the relative frequencies of residues a 2 f1,. .. , 20g in alignment column i. The context C i describes the number of effective residue counts C i j, a at positions i  d,. .. , i  d of profile q, C i j, a  N q i  j qi  j, a, where N q i is the effective number of sequences in column i of the query MSA.
CS-BLAST and CSI-BLASTOur homology search tool CS-BLAST extends BLAST by context-specific (CS) substitution probabilities that are either derived with the generative model (CS-BLASTgen) or with the discriminative model (CS-BLASTdis). Analogously, CSI-BLAST is our context-specific iterative (CSI) version of position-specific iterative BLAST (PSI-BLAST); given a query profile q, CSI-BLAST first computes the pseudocount profile with substitution probabilities PajC i , and then mixes it with the query profile q(i, a) in a way similar to PSI-BLAST () as follows:The pseudocount admixture coefficient i , N q i 7 attains its maximum of ' when the query profile consists of a single sequence (N q i  1). When the effective number of sequences N q i is large, the relative contribution of the pseudocount profile is reduced. We then jump-start PSI-BLAST with a checkpoint file containing the profile matrix p cs multiplied by a constant 2. The profile-to-sequence bit score between profile column i and residue a that PSI-BLAST calculates from this checkpoint file is Sp cs i, , a  log 2 p cs i, a2 Pa 8 where P(a) is the background probability of a. The factor 2 translates into a constant score offset of bits. This offset controls the trade-off between the alignment sensitivity and the alignment precision (see Section 3.3).
RESULTS
Datasets and parameter optimizationThe structural classification of proteins (SCOP) database () provides a hierarchical clustering of protein domains with known structures and is the de facto standard for evaluating sequence search tools. We filtered the SCOP database with a maximum pairwise sequence similarity of 20% (SCOP20) and also 30% (SCOP30), 40% (SCOP40), 60% (SCOP60) and 80% (SCOP80). We randomly assigned every fifth fold to the optimization set (1329 sequences, 215 folds in SCOP20) and all remaining folds to the test set (5287 sequences, 862 folds in SCOP20). This ensures that the optimization set does not share homologous sequences with the test set. We performed an all-against-all comparison and defined members belonging to the same fold as true positives (TPs) and those of different folds as false positives (FPs). Pairs with both proteins within the four-to eight-bladed-propellers (SCOP fold IDs b.66b.70) were treated as unknown, and the same for Rossman-like folds (c.2c.5, c.30, c.66, c.78, c.79, c.111) and-helical and 4Fe-4S ferredoxins (a.1.2, d.58.1). The discriminative model has several adjustable parameters. As shown in (), not only the sensitivity but also the computation time increase with the number of context states K and the window length l. We chose K  4000 and l  13 as a trade-off between sensitivity and run time. Further parameters are the pseudocount admixture parameters ' and , the score offset , the previous parameters , center , and , and the initial learning rate 0. The generative model had positional weight factors w center and instead of the previous parameters. The optimum setting of the parameters for the generative and discriminative models was determined by maximizing the mean receiver operating characteristic five (ROC5) score on the optimization set. The mean ROC5 score is the same as the area under the ROC5 curve, which is explained in Section 3.2. The mean ROC5 score is a single numerical value that measures the mean sensitivity on all query sequences and is robust with respect to overtraining. We iteratively optimized each parameter in turn using line search, several times for each parameter. We found ('  0:88,  14, w center  1:6,  0:85) as the optimum parameter setting for the generative model and ('  1:0,  15,  1:0, center  1:6,  0:85,  1:0, 0  0:13) for the discriminative model. The score offset was manually set. Choosing a negative score offset increases the alignment precision () and the reliability of the reported E-values (Supplementary), but it simultaneously decreases the alignment sensitivity. As a compromise, we chose  0.005 bits for both models.
SensitivityWe analysed the sensitivity of NCBI BLAST (blastpgp, version 2.2.26), CS-BLASTgen and CS-BLASTdis by using two complementary methods, the receiver operating characteristic (ROC) analysis and the ROC5 analysis. The ROC plot () shows the number of TPs versus FPs up to a certain E-value threshold for the SCOP20 test set. It measures how well the matches are ranked by the E-value across all database searches. In S ding and Remmert (2011), it was argued that it is important to weight down the contribution of FP and TP pairs from large superfamilies to avoid large superfamilies from dominating the ROC plot. Indeed, in Biegert and SodingSoding (2009), we reported that CS-BLAST is 139% more sensitive than BLAST at a false discovery rate (FDR) of 20% if FPs and TPs are weighted by 1=size of the query 0 s family. This number drops to 40% if the size of the superfamily is used instead. To be even more conservative, we, therefore, used foldweighted FPs/TPs. CS-BLASTdis detects 20 and 17% more homologues than CS-BLASTgen at a FDR of 1 and 10%, respectively. Compared with BLAST, CS-BLASTdis finds 43 and 51% more homologues, respectively. The improvement of CS-BLASTgen over BLAST could be nearly doubled by CS-BLASTdis. If FPs and TPs are weighted by the reciprocal size of the query's family instead of its fold, the improvements are even stronger (Supplementary). We tested the sensitivity of the iterative search tool CSI-BLAST by performing all but the last search iteration against NCBI's non-redundant database with 16 million sequences to create a MSA (E-value inclusion threshold 10 3 ), which was then used for searching the SCOP20 database. With two iterations, CSI-BLASTdis is 4.7 and 4.5% more sensitive than CSI-BLASTgen at an FDR of 1 and 10%, respectively, and 26.9 and 21.5% more sensitive than BLAST, respectively. Note that two iterations CSI-BLASTdis yield better results than five iterations of PSI-BLAST. In contrast to the ROC plot, the ROC5 plot () reveals how reliably hits are ranked within each database search. It is defined as the normalized area under the ROC curve until the fifth FP. An ROC5 plot shows the fraction of query sequences whose ROC5 score is above the value on the x-axis. It is more robust than the ROC plot analysis, which is prone to overtraining, as a few families of high-scoring FPs can greatly influence the ROC plot (Soding). CS-BLASTdis improves the mean ROC5 score by 9.5% over CS-BLASTgen and by 39.46% over BLAST. The sensitivity increases most for cases with a mean ROC5 score between 0.1 and 0.5. After two search iterations, the ROC5 score is still 4.2 and 19% higher compared with CSI-BLASTgen and PSI-BLAST, respectively.SCOP40, and SCOP80 containing sequence pairs with up to 40 and 80% sequence identity, respectively. These results demonstrate that the discriminative approach for predicting context-specific substitution probabilities improves the homology detection performance both of sequence and profile searches.
Alignment qualityA high quality of pairwise and multiple sequence alignments is essential for many downstream applications. For example, secondary structure prediction could be significantly improved by simply generating MSAs using HHblits instead of PSI-BLAST (). In homology modelling, target-template alignment quality is still the bottleneck for more accurate models. Here, we assessed the quality of CS-BLASTdis alignments by comparing them to reference alignments obtained from pairwise structural alignments. We sampled up to 10 sequence pairs from each family in SCOP80 (for) and SCOP30 (for), yielding 37 663 and 3700 pairs, respectively. We built reference alignments for them using the structural aligner TM-align (). These alignments were compared with sequence alignments built by BLAST (blastpgp, version 2.2.26), CS-BLASTgen and CS-BLASTdis. To make sure that BLAST produced an alignment for each pair of sequences in the test set, we decreased the threshold for extending hits (option-f) from 11 to 8. We used blastpgp's-s option to build alignments with the SmithWaterman algorithm. We then evaluated the precision and sensitivity of each alignment. The alignment precision is the number of correctly aligned pairs divided by the number of aligned pairs. The alignment sensitivity is the number of correctly aligned pairs divided by the number of aligned pairs in the reference alignment. Up to a sequence identity of 50%, context-specific substitution scores improve the alignment sensitivity compared with block substitution matrix (BLOSUM62) scores used in BLAST (). For pairs with sequence identities 530%, the alignment precision improves on average by 5.6% compared with BLAST (). The sensitivity of CS-BLASTdis alignments is 12.3% higher than for CS-BLASTgen and 21% higher than for BLAST. All in all, the improvement in alignment quality from CS-BLASTgen to CS-BLASTdis is of similar magnitude as the improvement from BLAST to CS-BLASTgen. The most striking improvements are seen in the difficult alignments525% pairwise sequence identity (). The score offset in Equation (8) allows CS-BLAST users to control the trade-off between the rate of alignment errors and the length of the alignment or, in other words, between alignment precision and sensitivity. A higher score offset allows CS-BLAST to extend alignments for longer while still accumulating positive score contributions. This leads to longer, less precise but more sensitive alignments ().
CS-BLAST E-valuesE-values are used to assess the significance of sequence search results. Their correctness is essential for iterative search tools, which automatically add all hits with E-values below a specified threshold to the MSA for the next search iteration. To estimate the reliability of E-values, we plotted the reported E-values of all hits from an all-against-all comparison on the SCOP test set (see Section 3.2) against their actual E-value (Supplementary). The actual E-value was estimated as the number of observed FPs with an E-value below the reported E-value on the x-axis, averaged over all searches. We used the score offset for adjusting the reliability of the reported E-values. High-scoring alignments between nonhomologous sequences mainly occur between compositionally biased or repetitive regions. These alignments tend to have weak similarities over relatively long stretches. Therefore, shifting the substitution scores towards the negative range can shrink these alignments and reduce their score, effectively suppressing high-scoring false-positive matches (Supplementary). As a trade-off between E-value reliability and alignment A B. Alignment quality assessment. Structural alignments by TM-align with TM-score ! 0:6 were used as gold standard. (A) Alignment precision and sensitivity binned by sequence identity for 7663 sequence pairs sampled from SCOP80. (B) Average alignment sensitivity versus precision depending on the score offset for 3700 sequence pairs sampled from SCOP30 (pairwise sequence identity 530%). The default score offset is 0.005 bits (dashed lines). CS-BLASTdis alignments have a similar precision to those of CS-BLASTgen but contain, on average, 12% more correctly aligned residue pairs sensitivity (), we choose  0.005 bits. This choice made CS-BLAST's E-values as reliable as BLAST's (Supplementary Figs S3 and S4).
Run timeWe compared the run time of CS-BLASTgen and CS-BLASTdis for generating the context-specific profile p cs for sequences of length L, which were sampled from the SCOP database (). The time complexity for both models is OLKl  20. We used K  4000 context states of length l  13. CS-BLASTdis requires $0.3 s for computing p cs on an Intel quad-core processor with 1.8 GHz given an average sequence length of L  350 residues. CS-BLASTdis is $1.6 times faster than CS-BLAST because Equation (2) can be computed more efficiently. The context specific substitution probabilities Pajc i  are computed in parallel for each position i, and the run time scales inversely with the number of processor cores.
HHblits sensitivityHHblits () is an iterative homology search tool based on HMM-to-HMM (HH) comparison that is not only faster than PSI-BLAST but also much more sensitive and accurate. This is achieved by representing both the query and the database sequences by HMMs, which are derived from MSAs of related sequences and, therefore, contain much valuable evolutionary information. HHblits is an extension of HHsearch (), and both are used in top ranking structure prediction servers like HHpred (). HHblits can be used for fast, iterative searches through clustered versions of large sequence databases, such as universal protein resource (UniProt) or NCBI's non-redundant (NR) database. At the beginning of each search iteration, HHblits uses context-specific substitution probabilities to enrich the query HMM, which is then compared with the database HMMs. Hits with E-values below a predefined threshold are added to the query MSA, from which the HMM for the next iteration is built. We wanted to test whether the discriminative model for context-specific substitution probabilities can further improve the sensitivity of HHblits searches. The present version of HHblits already uses context-specific substitution probabilities computed with the generative model. The same optimization and test set were used as described in Section 3.1. Models with K  4000 context states of length l  13 were compared for one and two iterations of HHblits through the uniprot20_02Sep11 database offered together with HHblits. We optimized the admixture parameters ' and as described in Section 3.1. For one iteration, we found ('  0.95,  24) and ('  1.0,  14) for the generative and discriminative model, respectively, and for two iterations, ('  0.58,  10) and ('  0.58,  18) were optimal. The positional weight factors of the generative model and previous parameters were left as in Section 3.1. The mean ROC5 score, after one iteration HHblits on our SCOP20 test set, could be improved by 3.0% through the discriminative model (). At two iterations, we could gain 1.5% in sensitivity. In relative terms, this is much less than the improvements on single sequences because the HMMs after the first iteration of HHblits already contain detailed position-specific substitution probabilities from homologous sequences. However, the absolute improvement in ROC5 score is retained after the second iteration.
DISCUSSION
Information in sequence contextWhat amino acid substitutions are likely to be observed in homologous proteins is largely determined by the fixation probability of mutations, which depends mostly on whether the protein can still fold into its stable structure. The folding requirement exerts specific constraints on different positions depending on their local structural context. The substitution matrix method merely
iter. HHblits dis
iter. HHblits gen
iter. HHblits dis
The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Modelling of amino acid substitution probabilities at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
C.Angerm ller et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Modelling of amino acid substitution probabilities at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from assesses the similarity of physicochemical properties between the original and the mutated amino acid. In contrast, the sequence context-specific method indirectly makes a fine-grained prediction about the probabilities of various structural contexts and, hence, exquisitely captures the selective constraints at each position. For example, a leucine within a membrane helix will have different substitution probabilities from a leucine on the hydrophobic side of an amphipathic-strand or from a leucine within a natively unfolded region. The dramatic improvements in sensitivity and alignment quality bear testimony to the value of sequence contexts for predicting substitution probabilities. 4.2 Generative versus discriminative model Both the discriminative approach and the previously proposed generative approach for computing context-specific substitution probabilities are based on a library of context states that each represents a specific typical sequence context. Why does the discriminative model perform considerably better than the generative model? First, in contrast to the generative model that describes the joint distribution PC i , k and then indirectly infers PkjC i  through Bayes' theorem, in the discriminative approach we directly model PkjC i . We do not model the probability distribution of the input contexts C i , which is not needed, as the contexts are observed anyway. Second, the discriminative model learns the importance of the various positions individually for each sequence context, whereas in the generative model, we had to set the same weights for all sequence contexts explicitly (Supplementary Material). Third, the discriminative model has a set of parameters k a to model the emission probabilities independent of the context information, whereas in the generative model, the emission distribution is identical to the central context profile column. This gives the discriminative model more flexibility to optimize its objective function. As a consequence of these three points, the generative model with any parameters can be accurately reproduced by the discriminative model with appropriately chosen parameters [Supplementary Material, Equations (57)], showing that the discriminative model has a higher descriptive potential. Fourth, the discriminative model is trained by optimizing the conditional probability of the target variable (the substitution probabilities) given the observed variable (the sequence context). Hence, in contrast to the generative model, it is trained to maximize some measure of prediction quality. 4.3 Model training Although discriminative models typically excel for unlimited amounts of training data, generative models often perform better in practice when training data are scarce or training time is limiting (Ng and Jordan, 2001). The comparison of our discriminative and generative approach is a case in point, as training the generative model worked well by simple expectation maximization, whereas training the discriminative model turned out to be challenging. First, we had to increase the number of training samples from 1.0 to 6.0 million, in line with the findings by Ng and Jordan (2001). Second, the insight that each generative model can be written exactly as a discriminative model allowed us to initialize the discriminative model with the equivalent generative model parameters. Third, we had to try out several optimization techniques to obtain satisfactory results; straightforward stochastic gradient descent worked better in the end than the much more sophisticated Hybrid Monte Carlo algorithm combined with replica exchange Monte Carlo sampling (Neal, 1993). Also, using a simple hyperbola function for controlling the learning rate of stochastic gradient descent and optimizing the initial learning rate 0 (Supplementary Material) proved better than various schemes for dynamic learning rate adaptation proposed by Almeida et al. (1998). 5 CONCLUSION The present work shows that a discriminative approach to context-specific sequence comparison can further improve the sensitivity of sequence searches and, in particular, the alignment quality over a previous generative approach. This was demonstrated by comparing BLAST and PSI-BLAST with its context-specific versions (CS-BLASTgen and CS-BLASTdis). The new discriminative model also increased the sensitivity of our iterative sequence search method HHblits and, hence, will become the default pseudocount model in CS-BLAST and HHblits. We are convinced that the context-specific approach for substitution probabilities presented here is clearly superior to context-ignorant approaches, such as substitution matrices and Dirichlet mixtures pseudocounts (Sjoander et al., 1996), and should supersede those methods wherever maximum performance is critical.
