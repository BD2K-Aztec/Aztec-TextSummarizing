Correlated mutations constitute a fundamental idea in evolutionary biology, and understanding correlated mutations will, in turn, facilitate an understanding of the genetic mechanisms governing evolution. CorMut is an R package designed to compute correlated mutations in the unit of codon or amino acid mutation. Three classical methods were incorporated, and the computation results can be represented as correlation mutation networks. CorMut also enables the comparison of correlated mutations between two different evolutionary conditions. Availability and implementation: CorMut is released under the GNU General Public License within bioconductor project, and freely available at
INTRODUCTIONIn genetics, the Ka/Ks ratio (or !, dN/dS) is the ratio of the number of non-synonymous substitutions per non-synonymous site (Ka) to the number of synonymous substitutions per synonymous site (Ks) (), which can be used as an indicator of selective pressure acting on a protein-coding gene. The selection pressure may reflect a change in the function of a gene or a change in environmental conditions that forces the organism to adapt. For example, the mutations to confer resistance of a highly variable virus, e.g. HIV or HCV, to new antiviral drugs may be expected to undergo positive selection in a patient population treated with the drugs against the corresponding virus. The concept of correlated mutations is a fundamental idea in evolutionary biology. The amino acid substitution rates are expected to be limited by functional constraints (). Given the functional constraints operating on genes, a mutation in one position can be compensated by an additional mutation. As a result, mutation patterns can be formed by correlated mutations responsible for specific conditions. Here, we developed an R/Bioconductor package to detect the correlated mutations among positive selection sites by combining Ka/Ks ratio and correlated mutations analysis. CorMut is suitable for computing the correlated mutations of highly variable genomes, such as HIV and HCV. random variables, making it possible to measure the correlated mutations between two positions (). Jaccard index measures the similarity between two variables, and it has been widely used to measure correlated mutations (). The computation for correlated mutations consists of two steps: First, the positive selection sites are detected using the selection pressure-based method. Second, the mutation correlations are computed among the positive selection sites using the three methods described above. It should, however, be noted that CorMut can also be used to compute correlated mutations without considering selection pressure at all. Meanwhile, CorMut facilitates the comparison of the correlated mutations between two conditions by means of a correlated mutation network.
FUNCTIONS AND SAMPLESCorMut enables the processing of multiple sequence alignment files. Because sequences may have raw bases, the seqFormat function will replace the raw bases with common bases and delete the gaps according to the reference sequence. As one raw base has several common bases, a base causing an amino acid mutation will be randomly chosen. Once this task is completed, CorMut provides various functions to compute the correlated mutations. For the conditional Ka/Ks and mutual information methods, functions are provided to compute correlated mutations in the codon and amino units. However, for Jaccard index method, the computation is only provided for the amino unit. CorMut provides a biCompare function to compare the correlated mutations between two conditions by means of a correlated mutation network. The biCompare results can be visualized by a plot method. Here, 300 HIV protease sequences of treatmentnaive and treatment groups derived from an HIV drug-resistant database will be used as examples. 4library (CorMut) 4examplefile  system.file("extdata", "PI_treatment.aln", package  "CorMut") 4examplefile02  system.file ("extdata", "PI_treatment_naive.aln", package"CorMut") 4example  seqFormat(examplefile) 4example02  seqFormat(examplefile02) 4biexample  biCkaksAA(example02,example) 4result  biCompare(biexample) 4plot(result)As shown in, only positive selection amino acid mutations in treatment-naive or treatment groups were displayed. Square nodes indicate the distinct amino acid mutations of the treatment-navenave group, which means that these nodes will be non-positive selection in the treatment group. Circle nodes indicate that distinct positive amino acid mutations appeared in the treatment group. The plot function also has an option for displaying the unchanged positive selection nodes in both conditions. If plot Unchanged is FALSE, then the unchanged positive selection nodes in both conditions will not be displayed.Many software tools are available for correlated mutation analysis, such as CMAT (), HelixCorr () and OMES-KASS (), but each of these tools has a singular focus. For example, HelixCorr was specifically designed for the transmembrane parts of membrane proteins. In contrast, CorMut is multifunctional and can be applied to highly variable genomes. One particular advantage of CorMut is pre-filtering mutations based on selection pressure methods, which enables user to focus on the mutations of evolutionary interest. CorMut also displays the correlated mutations in network view and intuitively compares the correlated mutations between two conditions by such correlated mutation network.
CONCLUSIONThe CorMut package provides simple and flexible functionality to compute and display the correlated mutations between codons or amino mutations. The representation of correlation mutations as a network and the ability to compare correlated mutations between two conditions make it possible to understand the genetic mechanisms governing evolution.
IMPLEMENTATION CorMut provides functions for computing Ka/Ks for individual sites or specific amino acids and detecting correlated mutations among them. The computation of Ka/Ks for an individual site or specific amino was based on the model of Chen et al. (2004). Traditionally, Ka/Ks computation has been based on sequence alignment, but this model was revised to compute the selection pressure for individual sites or specific amino mutation. The Ka/ Ks of a specific amino acid substitution (X2Y) for a codon is computed as follows: Ka Ks  NY NS nY, t ftnY, v fv nS, t ftnS, v fv where N Y and N S are the count of X!Y mutations at that codon and the count of synonymous mutations observed at that codon, respectively. Then, N Y /N S is normalized by the ratio expected under a random mutation model where selection pressure is absent, which is represented as the denominator of the formula. In the random mutation model, f t and f v indicate the transition and transversion frequencies, respectively. They are measured from the entire dataset according to the following formulas: f t  N t /n t S and f v  N v /n v S, where S is the total number of samples, N t and N v are the numbers of observed transition and transversion mutations, respectively, and n t and n v are the number of possible transitions and transversions in the focused region (simply equal to its length L and 2L, respectively). CorMut incorporates three classical methods to detect correlated mutations, including conditional selection pressure, mutual information and Jaccard index. Conditional selection pressure, also known as conditional Ka/Ks, indicates the Ka/Ks of one mutation (X) in the presence of non-synonymous mutations (Y). It can be used to evaluate the influence of X on Y. Mutual information can be used to measure the mutual dependence of two *To whom correspondence should be addressed.  The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Z.Li et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
CorMut at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
