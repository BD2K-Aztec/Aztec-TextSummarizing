Motivation: Nucleosomes are the basic elements of chromatin structure. They control the packaging of DNA and play a critical role in gene regulation by allowing physical access to transcription factors. The advent of second-generation sequencing has enabled landmark genome-wide studies of nucleosome positions for several model organisms. Current methods to determine nucleosome positioning first compute an occupancy coverage profile by mapping nucleosome-enriched sequenced reads to a reference genome; then, nucleosomes are placed according to the peaks of the coverage profile. These methods are quite accurate on placing isolated nucleosomes, but they do not properly handle more complex configurations. Also, they can only provide the positions of nucleosomes and their occupancy level, whereas it is very beneficial to supply molecular biologists additional information about nucleosomes like the probability of placement, the size of DNA fragments enriched for nucleosomes and/or whether nucleosomes are well positioned or 'fuzzy' in the sequenced cell sample. Results: We address these issues by providing a novel method based on a parametric probabilistic model. An expectation maximization algorithm is used to infer the parameters of the mixture of distributions. We compare the performance of our method on two real datasets against Template Filtering, which is considered the current state-of-the-art. On synthetic data, we show that our method can resolve more accurately complex configurations of nucleosomes, and it is more robust to user-defined parameters. On real data, we show that our method detects a significantly higher number of nucleosomes. Availability: Visit
INTRODUCTIONThe study of the processes governing gene regulation is a central problem in molecular biology. One of the key factors influencing gene expression is the complex interaction between chromatin structure and transcription factors. The fundamental unit of chromatin is the nucleosome, composed of 146  1 bp of DNA wrapped 1.65 turns around a protein complex of eight histones. To elucidate the role of the interactions between chromatin and transcription factors, it is crucial to determine the location of the nucleosomes along the genome. In general, the more condensed the chromatin, the harder it is for transcription factors and other DNA binding proteins to access DNA and carry out their tasks. * To whom correspondence should be addressed.The more accessible is the DNA, the more likely surrounding genes are actively transcribed. The presence (or the absence) of nucleosomes directly or indirectly affects a variety of other cellular and metabolic processes like recombination, replication, centromere formation and DNA repair. A handful of experimental techniques have been developed for genome-wide mapping of nucleosomes. For instance, one can enrich for genomic regions that are either bound to histones (typically via chromatin immuno-precipitation or ChIP) or for genomic regions that are free of nucleosomes (linkers). For instance, MAINEs (MNase-assisted Isolation Nucleosomal Elements) () isolates the portions of the DNA that are attached to nucleosomes, because MNase preferentially digests linker regions. Then, microarrays (ChIP-chip) or sequencing (ChIP-seq/MNaseseq) are applied to the enriched DNA. In this article, we concentrate on the analysis of sequencing data, given the prevalence of MNase/ChiP-seq experiments in the recent literature. The computational analysis of the sequencing data usually consists of two main steps: (i) a nucleosome occupancy coverage is computed from the process of mapping nucleosomeenriched sequenced reads to a reference genome, followed by some normalization steps and (ii) nucleosomes are placed according to the peaks of the coverage profile. Approaches based on peak calling are computationally fast and quite accurate in resolving isolated (stable or arrayed ) nucleosomes; however; they are not entirely reliable when more complex nucleosome configurations are present. Observe that while it is physically impossible for two nucleosomes to be 'overlapping' on the same location on a DNA strand, it is quite common that the population of cells from which the enriched DNA was obtained had nucleosomes slightly 'off-sync' at a given genomic coordinate (transient interaction). As a consequence, the resulting coverage profile will exhibit a 'blurring' of the peaks. Molecular biologists distinguish the case of 'overlapping' nucleosome from 'fuzzy' nucleosomes or 'fuzzy' regions (see). For overlapping nucleosomes, the overlap is relatively small; in the 'fuzzy' case, several nucleosomes are mutually overlapping for a significant fraction of their size (see Zhang and Pugh 2011 for a review). By introducing a threshold parameter on the allowed overlap, one can define precisely the line between 'fuzzy' and 'overlapping'. Another shortcoming of peak-calling approaches is that they can only report nucleosome positions and/or occupancy level. Molecular biologists, however, need additional information about nucleosomes. For instance, they are interested in the level of 'fuzziness' in certain genomic locations with respect to coding regions (i.e. well positioned for all the cells in the sample, or'blurred'), or how strong is the binding between nucleosomes and DNA. To address these shortcomings, we propose a method that determines the accurate position of the nucleosomes independently from the amount of overlaps in the nucleosomes. This method can also extract other important statistics about nucleosomes, e.g. the probability that a nucleosome is actually present, a measure of nucleosome 'fuzziness', and the size of DNA fragments enriched for nucleosomes. Here, we propose a parametric probabilistic model for nucleosome positioning, which we called NOrMAL, for NucleOsome Mapping ALgorithm. NOrMAL uses Expectation Maximization (EM) to infer its parameters. To demonstrate the performance of our method, we report experimental results on MAINE-seq data for Plasmodium falciparum () and Saccharomyces cerevisiae (). We compare the performance of our method against the Template Filtering (TF) algorithm (), which is considered the current state-of-the-art in terms of accuracy and ability to estimate sizes of the DNA fragments bound to nucleosomes. We also discuss a fundamental limitation of greedy peak-calling approaches in the case of overlapping nucleosomes and how our method addresses this issue.
Previous workSeveral landmark studies have been published in the last few years on the chromatin structure of model organisms based on the analysis of genome-wide nucleosome maps (). Existing methods in the literature are based on the analysis of the peaks in the nucleosome occupancy coverages estimated by mapping nucleosome-enriched reads to the reference genome. The coverage occupancy profile is an integer-valued function defined for all genomic locations: given a position i in a chromosome the function is equal to the number of sequenced reads that are mapped to location i. From a probabilistic point of view, the coverage profile represents a non-parametric distribution of the nucleosome positions. At the time of writing, the length of the reads obtained by second-generation sequencing (e.g. Illumina Genome Analyzer) are limited to about 100 bases and the sequencing occurs in the 5  3 direction. In the case of ChIP-seq/MAINE-seq, sequenced reads that can be uniquely mapped to the positive strand originate from the left boundary of nucleosome DNA fragments, while reads uniquely mapped to the negative strand originate from the right boundary (). Recall that nucleosomes are composed of about 146 bp of DNA, so if reads are single end and shorter than 146 bp, we expect to observe a peak in the forward and a peak in the reverse coverage profiles at a distance consistent with the nucleosome size. The problem of associating a peak in the forward strand with the correct peak in the negative strand can be difficult in the case of a large number of complex nucleosome configurations. Some authors artificially extend the reads in the 5  3 direction or they shift the positions of the mapped read position of the forward and reverse toward the middle of potential nucleosomes. Then, they combine (e.g. sum) the forward and reverse modified coverages to build a score function. In both cases, they need to determine the amount of the extension or the size of the shift. In the former case, the extension should account for the expected length of the DNA fragments enriched for nucleosomes; in the latter, the shift should be about half of the DNA fragment size. The problem of this approach is that no extension or shift that will work equally well for all nucleosomes in the genome. While one should expect DNA fragments enriched for nucleosomes to be 146 bp, the reality is that the digestion process can either leave nucleosome-free DNA in the sample, or 'over-digest' the ends of nucleosome-bound DNA. What complicates the matter further is that the rate of digestion is sequence dependent (), so nucleosomes in different genomic locations will end up with different DNA fragment size. For this reason, it is advantageous to 'learn' this information from the input data. TF () is the only method we know that can handle variable fragment sizes in a specified range, whereas other methods require users to decide this value in advance. As said, a variety of peak-calling algorithms have been also developed (). Most of these methods have been proposed for the analysis of ChIP-chip or ChIP-seq data to determine the position and strength of the transcription factors binding to DNA. The problem of detecting transcription factor binding sites is similar to nucleosome positioning: in both cases we need to infer position of proteins binding to DNA from the coverage profiles. However, the size of the nucleosomes is significantly bigger than transcription factor binding sites, as a consequence the resulting configurations of nucleosomes can be more complex. To summarize our experience with existing methods on the genome-wide nucleosome study of human malaria parasite (), peak calling approaches suffer from a variety of problems. First, the coverage profile function has to be cleaned of high-frequency noise, typically via a kernel density estimation method (). The type of kernel and the amount of smoothing can drastically affect the results: too much can merge adjacent peaks, too little can leave too many noisy artifacts that can be interpreted as individual peaks. Second, peak finding algorithms have parameters (like the extension and the shift discussed above) that are difficult to optimize: a set of parameter can work for a region of a chromosome but not for another. Third, peak calling do not properly resolve overlapping nucleosomes. For instance, TF () uses a greedy strategy: nucleosomes are placed i243
A.Polishko et al.according to the 'best' matching peaks in the score function. Once these strong-positioned nucleosome are assigned, TF ignores any nucleosome that overlaps with previous ones. It is relatively easy to show that for overlapping nucleosomes the greedy strategy does not always return the best overall placement (see Section 3 for details).
METHODSNext, we propose a parametric probabilistic model to find the most likely set of nucleosome that best 'explain' the mapped reads. We cast this problem in a modified Gaussian mixture model framework. The problem of positioning nucleosomes is then reduced to the problem of learning the parameters of the model and finding the distribution of mixture components, which is achieved via EM.
A probabilistic model for nucleosomesWe employ a probabilistic model for nucleosome positioning that is described by a set of hidden and observed variables. We use N to denote the number of DNA fragments obtained after MNase digestion. For any DNA fragment i , let x i be the starting position of the 5-end of fragment i (obtained by mapping a corresponding sequenced read), and let variable d i {+1,1} be the strand on which fragment i was mapped (+1 for the positive strand, and 1 for the negative strand). Also, let z i be the length of fragment i. If we use variable m i to denote the position of the center of the fragment i, then we have m i = x i +(d i z i )/2. We denote with X i ,D i ,Z i and M i the random variables associated with variables x i ,d i ,z i and m i , respectively. Since the sequencing process is 5  3 , the value of X i is observable by means of mapping a read originating from fragment i. Similarly, the strand variable D i is also observable. Variables Z i and M i can be observed directly only if sequencing produces paired-end reads, otherwise these variables are hidden. In order to consider the most general case, we only deal with the latter case (single-end reads). We assume for the time being that the number K of nucleosomes is given. We will discuss how to choose K in Section 2.3. For each DNA fragment i, we use a hidden variable C i representing the nucleosome to which it belongs. Each nucleosome j is described by a set of six, where  j denotes the center position of the nucleosome j,  j is the fuzziness associated with the position of nucleosome j, j describes the length of DNA fragments associated with nucleosomerepresents the variation on fragment sizes for positive and negative strands, respectively, and  j is the probability of nucleosome j. The degree of fuzziness captures the variation of the position of a particular nucleosome in the population of sampled cells. Well-positioned nucleosomes have very low degree of fuzziness. We introduce two variables  +1 j and  1 j to model the variation of the fragment size because MNase does not only digest nucleosome-free DNA. Given enough time, it can also digest into the ends of the fragments bounds to nucleosomes, the rate of digestion being sequence dependent [see, e.g. (. Since the sequence composition of the 5 end of a DNA fragment can be quite different from the 3 end, we need to have two different variables. The value of C i is drawn from (1,2,...,K) with corresponding probabilities ( 1 , 2 ,..., K ). Parameter  j models the contribution of j-th nucleosome to the occupancy level, i.e. what portion of the mapped reads belong to nucleosome j. Our nucleosome model assumes that our random variables are distributed according to a normal distribution. For convenience of notation, we set). First, we assume that variable M i associated with the center of the fragment i for a particular nucleosome j is distributed as followswhere  j represents the center of the nucleosome j and  j is its fuzziness. Second, we assume that the length Z i of fragment i for a particular ... C. The proposed graphical mixture model: shaded nodes correspond to observed variables, white nodes correspond to hidden variables nucleosome j is distributed as followswhere j represents the expected size of the fragments for nucleosome j,represents the variation of fragment sizes for positive and negative strands, respectively. Combining Equations (1) and(2) and relation, and then applying the rule of linear combination of independent Gaussians we obtainEquation (3) allows one to compute the probability of a given data point x i given the parameters of a nucleosome. Next, we describe the model for multiple nucleosomes.
Mixture modelNext, we introduce a generative mixture model to describe the likelihood of input data points X = (x 1 ,...,x N ).shows a graphical representation of the mixture model. In Equation (3), the only hidden random variable is C because we already excluded variables z i from the computation. By grouping variables X i ,D i , we can use an approach similar to a naive Bayes classifier. Variable C represents the nucleosome to which the points belong. Thus, we can describe the likelihood of point (x i ,d i ) given the parameters of our model as a mixture of distributions. Using the Bayesian rule we obtainwhere f (x,a,b) = 1/  2 be (xa) 2 /2b is the Gaussian density function. Using Equation (4), we can obtain the log likelihood of observed data points X given parameters asGiven Equation (5) and the input data points X = (x 1 ,...,x N ), we can find an estimate the parameters of the model via maximum likelihood) is a vector whose components are the nucleosome parametersThe presence of parameters  j that correspond to hidden variables C i prevents us from solving Equation (6) directly. We estimate via EM. In our case, the E step requires computing the posterior probabilities P(C i = j|X i = x i ;) of data points x i ,i with respect to the distribution of C i given the current estimate of parameters (t)
i244
NORMAL: Accurate Positioning of NucleosomesDuring the E step, we supplement the missing data in Equation (6) with the expected values under the current parameter estimates (t). In the M step, we find new parameter estimation (t+1) by maximizing EquationIt is relatively straightforward to bound the variation parameters (, +1 , 1 ) during the iterative EM process to converge to a solution with 'reasonable' parameters. We can also easily introduce prior distribution for some of the parameters. For instance, we can specify an expected distribution for DNA fragment sizes j , which can be estimated via gel electrophoresis prior to sequencing.
Choosing the number of nucleosomesThe method described above assumes that the number of clusters K is known. The problem of selecting the best value for K is as challenging as selecting the optimal number of clusters in k-means clustering. One can estimate the number of clusters by looking at the support area of the occupancy coverage, but this will be quite inaccurate because 'fuzzy' nucleosomes correspond to wider peaks, and the support area is bigger for them. Here, we propose a simple but effective heuristic to find K. We start by (1) placing the maximum possible number of non-overlapping nucleosomes uniformly distributed on the chromosome, that is K = (size of the chromosome)/(expected size of a nucleosome), where the expected size of nucleosomes is underestimated. Then, (2) we run our EM algorithm until convergence ('soft learning'). We will then (3) check the distance between the clusters, and merge those that have too much overlap (above a user-specified threshold). In case of multiple overlaps for a nucleosome, we merge it with the closest one. We repeat (2) and (3) until no additional clusters are merged. After a few cycles, we will obtain a set of non-overlapping clusters that best explain the given data points. Overlapping nucleosomes are merged into new ones and then the position of new nucleosomes are learned from the data. This procedure will give us a good estimate on the number of clusters as well as a rough estimate of the nucleosome positions. To further improve accuracy for other model parameters, we perform one iteration of 'hard learning' by assigning each data point x i its maximum probable cluster. Nucleosome clusters will partition the set of input points, which in turns will allow us to compute their parameters more accurately. The pseudo-code of the algorithm is shown on. The running time of NOrMAL is dominated by the running time of Learning step (Algorithm 1, line 6). Observe that the probability that a data point belongs to far-away nucleosomes is close to zero, so one can avoid unnecessary computations by computing updates only for clusters in close vicinity of each point. The running time is dominated by the heuristic used to find the number of nucleosomes K. In order for the algorithm to scale to eukaryotic genomes, additional optimization steps will have to be implemented. For instance, during the early stage of soft learning (i.e. active cluster merging), the algorithm could be applied to small 'chunks' of chromosomes. Then, when the number of merges reduces substantially, the nucleosome maps for each chunk could be combined and algorithm would continue to the hard-learning step.
Practical considerationsOur method requires users to specify three parameters, namely the threshold for allowed overlap between adjacent nucleosomes, the prior on nucleosome sizes and its weight . The threshold for allowed overlap can significantly affect the output: the more overlap is allowed, the more nucleosomes can be placed. In the current implementation, this parameter has to be specified by the user. The prior on the nucleosome size and its weight  control the propagation of 'knowledge' from data points on forward strand to data points on the reverse strand, and vice versa. Based on our experience, if the prior size is within 30 bp of the 'true' fragment size, then the algorithm is consistent in its output. Our implementation has some additional internal parameters that we are not expecting users to change. While inferring the parameters of our mixture models, some clusters will tend to cover most of the data points using large variances: a common trick to avoid this from happening is to introduce hard limits on such parameters. Our implementation has range limits for the nucleosome sizes and variance to force the method to converge to 'reasonable' nucleosome sizes/variances in the early stage of the iterative process. These parameters have been chosen loose enough so by the end of the iterative process, the limits for nucleosome size and variance are rarely hit, and the output is not significantly affected. The hard-learning step completely ignores those upper limits. Additional details on parameter selection will be found in the on-line User Manual.
EXPERIMENTAL RESULTSWe carried out extensive benchmarking between our proposed method NOrMAL and TF (). We selected TF because it is considered the current state-of-the-art. It is the only method that, in addition to inferring nucleosome positions, can extract nucleosome fragment sizes and binding scores. TF differs from the traditional peak-calling algorithms because it does not look for peaks in the coverage profiles, but it places nucleosomes at the peaks of a correlation score matrix. Due to its greedy strategy, i245TF has significant limitations when dealing with fuzzy/overlapping nucleosomes, as explained next. The setup for the comparison is as follows. The input parameters for NOrMAL are the prior size of the nucleosome fragments and the allowed amount of overlap between nucleosomes. For TF, we used default parameters unless specified otherwise. The default allowed range of nucleosome size for TF is, which centered around the expected nucleosomes size of 146 bp.
A.Polishko et al.Synthetic data: first, we want to illustrate the challenge for existing nucleosome positioning methods to deal with the placement of overlapping nucleosomes. The problem derives from the difficulty in distinguishing two overlapping nucleosomes from the 'fuzzy' case. To define precisely this problem, we need to introduce a threshold parameter: if the percentage of overlap between two nucleosomes exceeds the threshold, then they should be considered 'fuzzy', otherwise they should be treated as separate overlapping nucleosomes. It is relatively easy to show that the greedy strategy does not always give the optimal nucleosome placement in case of overlapping nucleosomes. To do so, we have created a small synthetic dataset that contains reads corresponding to two overlapping nucleosomes. Although we could have used our own parametric model to generate the synthetic data, to avoid the possibility of giving an advantage to our method, we generated the input data according to the template function described in (). The parameters for nucleosome positions ( 1 and  2 ) and nucleosome sizes ( 1 and 2 ) that we used to generate the reads are reported in.illustrates the coverage profile for mapped reads. Observe that there are two peaks on forward and reverse strands, which indicates the presence of two nucleosomes. The percentage of overlap is roughly 35%. In the first case, we allowed such amount of overlap in both TF and NOrMAL (for TF andfor NOrMAL). Both methods correctly reported two overlapping nucleosomes. Observe the error bars attached to the boundaries of nucleosomes reported by NOrMAL, which indicate the positional variance (or 'fuzziness') of the corresponding boundary (each bar has length 3). TF does not provide such information. In the second case, when the parameters are set so nucleosomes are not allowed to overlap >30%, only one nucleosome should be reported.and E illustrates the output of TF and NOrMAL, respectively. Observe that now there is a fundamental difference: TFs greedy strategy reports the presence of the first nucleosome, but then it completely ignores the data corresponding to the second nucleosome. This is an entirely arbitrarily choice and the user will not be even aware of this. In contrast, NOrMAL reports one nucleosome positioned near the centroid of the data points and correctly indicates that the variance of the nucleosome boundariessynthetic data (forward strand on top, reverse strand on bottom), where nucleosomes overlap on 35% of their length; nucleosomes detected using TF allowing maximum 35% overlap (B), NOrMAL allowing maximum 35% overlap (C), TF allowing only 30% overlap,(D) and NOrMAL allowing only 30% overlap (E); nucleosome reported by TF with nucleosome size range(F) and(G) in this case is very high, indicating that this nucleosome should be considered 'fuzzy'. In addition, TFs positioning results are very sensitive to its main input parameter, namely the allowed range for nucleosome fragment sizes. With the default size range, TF reports one nucleosome (). When we extend the range to, TF detects one small nucleosome by incorrectly matching the two strongest (but closest) peaks (). If we change the range to, TF reports one large nucleosome, this time matching the outmost peaks (). Even if we allow a larger overlap, TF will still produce the nucleosome in(data not shown). Since the allowed range for nucleosome size in TF is a hard boundary, the results are very dependent from the choice of this parameter. NOrMAL is more robust in that regard because the prior distribution for the fragment sizes in NOrMAL is 'soft' and it can adapt to the data.argue about performance in objective terms. That is why the first dataset we considered is from S. cerevisiae (). This was the original dataset for which TF was designed. The results of TF on this dataset are assumed to be accurate. To compare NOrMAL and TF, we used the following setup. The main range parameter for TF was set to, which is slightly wider than the default parameters. We did not want to penalize TF, since NOrMAL does not have any hard limits for the nucleosome sizes. For NOrMAL, the main parameter is the prior expected value for the nucleosome sizes: we used 140 bp to hit the middle of the specified range of TF. The threshold value of allowed overlap for both methods was set at 35%. All other parameters were left to default values. The results of both methods are reported in. Observe that NOrMAL is slower, but it returns on average 2.6% more nucleosomes than TF. If we compare the distribution of reported nucleosome sizes (), both methods provide consistent results. To compare how reported nucleosomes are related to each other, we performed a matching procedure. We built a bipartite graph, where a node corresponds to a reported nucleosome (each part corresponds to one of the two methods). The bipartite graph is fully connected, and the weight on edge (u,v) is the squared distance between nucleosome u and v: when the distance between u and v exceeded 50 bp, we set the weight to . Then we solved the weighted assignment problem between the two sets using the Hungarian method. The distribution of pairwise distances between matching nucleosomes is shown in. Observe that the distribution is a unimodal bell-shaped curve with mean and mode having near zero value. The number of matched (common) nucleosomes is 81.44% of the total: 8.29% and 10.27% are unique to NOrMAL and TF, respectively. While the dataset for S. cerevisiae is considered to have relatively stable set of nucleosomes (), the dataset for the human malaria parasite P. falciparum has very dynamic nucleosomes (). The considered dataset consists of seven time-points (namely, 0, 6, 12, 18, 24, 30 and 36 h), each related to a different stage on the cell cycle (). The experiment assumes that cells are 'synchronized' at each time-point, but the synchronization is not perfect due to experimental limitations. As a consequence, we expect a large number to nucleosomes to exhibit a 'fuzzy' behavior. First, we performed nucleosome placement with the same setup as with the yeast dataset. The distribution of fragment sizes is quite different in this case ()) and NOrMAL for P. falciparum (chromosome 1) across all seven time-points with a mean value of 105 bp and mode value of about 120 bp, whereas TF reports a distribution with mean and mode of about 84 bp. If we perform the matching of the reported nucleosomes, the distribution of distances is much wider than for yeast ()Template Filtering, rangeNORMALand TF is much higher on this dataset, due to presence of a much higher fraction of overlapping/fuzzy nucleosomes. Two examples of the disagreement between TF and NOrMAL are shown in. Forward and reverse coverage profiles with extension to 35 bp are shown on top. Nucleosomes are represented by ovals, where the height of each oval represents the confidence score. NOrMAL also reports the variance associated with the left and the right boundary, represented with error bars. In(top), we have labeled corresponding nucleosomes 16. Some observations are in order. First, nucleosome 3 is an incarnation of the synthetic example inand E. The coverage profile around coordinate 800 shows two heavily overlapping nucleosomes that should be reported as one 'fuzzy' nucleosome. However, TF reports the position of the nucleosome using the stronger pair of forward/reverse peaks and completely ignores the other pair of peaks. As a consequence, the coordinate of the reported nucleosome is shifted compared to the centroid of the four peaks. NOrMAL instead correctly places one nucleosome at the centroid with a relatively high 'fuzziness' score. Nucleosome 3 is also quite fuzzy, and it is better placed by NOrMAL. Some disagreement exists on nucleosome 6 as well. The left boundary of that nucleosome detected by TF correspond to a very weak peak. This is due to the fact that TFs placement is based on the correlation score rather than the intensity of the peak. In fairness, both methods assign nucleosome 6 a very low confidence score. Finally, TF detects additional nucleosomes a and b, whereas NOrMAL reports additional nucleosome c. All these nucleosomes have low confidence scores. Our method did not report a and b because it explained the data using fuzzy nucleosome 2. NOrMAL should have merged nucleosome c to nucleosome 1, but because the overlap did not exceed the chosen threshold those two nucleosomes were not merged.(bottom) illustrates a more complex example of the coverage profile: even for trained experts placing nucleosomes here would be very challenging. The output of NOrMAL and TF are quite consistent for nucleosomes associated to strong peaks. In the regions with high density of peaks, TF tends to place nucleosomes of small sizes (see also) and pack them as tight as possible according to allowed overlapping threshold.Template Filtering, rangeNORMALThe number of reported nucleosomes for all time-points is shown in. Observe that for time-points 024 h, the number of nucleosomes reported by NOrMAL is between TF with rangeand. However, recall that the extended rangeis likely to be unreliable. For time-point 30 and 36 h, NOrMAL identifies a higher number of nucleosomes. The 30 and 36 h marks correspond to the schizont stage of the P. falciparum life cycle (). During this stage, the parasites divide, the chromatin compacts and a large number of nucleosomes are added.
NORMAL: Accurate Positioning of Nucleosomes
CONCLUSIONWe described a parametric probabilistic model for nucleosomes positioning framed in the context on a modified Gaussian mixture model. Our method directly addresses the challenges imposed by overlapping and fuzzy nucleosomes, their detection and the inference of their characteristics. We demonstrated with a synthetic example that the current state-of-the-art method does not properly handle complex overlapping configurations. We have also shown that NOrMAL is significantly more robust to user-defined parameters. On real data, our method detects a higher number of nucleosomes. Although our method is currently slower than TF, the processing time is still modest compared to other steps in the sequencing pipeline and we believe the efficiency of NOrMAL can be improved.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
500 bp): forward and reverse coverage profiles are shown on top; nucleosomes are represented by ovals where the height of each nucleosome represents the confidence score In order to increase the agreement between TF and NOrMAL, we tried to extend the range of nucleosome sizes for TF to [20,250]. The new fragment size distributions are shown on Figure 10. Observe that by comparing Figures 8 and 10, the size distribution for NOrMAL are the same (only truncated in Fig. 8), while the distribution for TF has changed completely, again pointing out how this range parameter can drastically change the results. Using the extended range, TF was allowed to place smaller nucleosomes so the mode and the mean of the size distribution shifted to smaller values. According to the authors of TF, such small nucleosomes can be due to problems in the experimental procedure, namely overexposing the sample to the MNase digestion. However, the gel electrophoresis analysis shows that the expected size of sequenced fragments in our samples after digestion was about 130 bp in length (without adapters). We speculate that TFs approach might have a problem when the range of admissible nucleosome sizes is too wide, and the algorithm confuses boundaries of neighboring nucleosomes. i248 at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
i249 at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
