Motivation: Gene normalization (GN) is the task of normalizing a textual gene mention to a unique gene database ID. Traditional top performing GN systems usually need to consider several constraints to make decisions in the normalization process, including filtering out false positives, or disambiguating an ambiguous gene mention, to improve system performance. However, these constraints are usually executed in several separate stages and cannot use each other's input/output interactively. In this article, we propose a novel approach that employs a Markov logic network (MLN) to model the constraints used in the GN task. Firstly, we show how various constraints can be formulated and combined in an MLN. Secondly, we are the first to apply the two main concepts of co-reference resolution—discourse salience in centering theory and transitivity— to GN models. Furthermore, to make our results more relevant to developers of information extraction applications, we adopt the instance-based precision/recall/F-measure (PRF) in addition to the article-wide PRF to assess system performance. Results: Experimental results show that our system outperforms baseline and state-of-the-art systems under two evaluation schemes. Through further analysis, we have found several unexplored challenges in the GN
INTRODUCTIONThe task of recognizing named entities in text, i.e. identifying words/phrases that indicate the presence of entities and associating them with their corresponding semantic types has been studied extensively. In biomedical fields, the most commonly used type of named entity recognition is gene mention recognition. In the largest public biomedical text-mining competitions, BioCreative I and II, the top gene mention recognition systems achieve F-scores of 89% () However, gene mention recognition results are still hard to apply in real-world research applications because of two main issues: name variation and entity ambiguity (). Name variation * To whom correspondence should be addressed.is when one gene is referred to by many textual expressions. For example, in, the authors refer to the gene 'EntrezGene ID 966' as 'CD95', 'protectin', 'membrane inhibitor of reactive lysis,' and '(MIRL)'. Entity ambiguity is when the same name can refer to more than one gene. For example, a search for the name 'CD59' in EntrezGene returns 377 matches belonging to over 10 species. To spur development in regards to the above two issues, BioCreative has held several open competitions for the task gene normalization (GN), mapping recognized gene mentions to standard database IDs, such as EntrezGene or UniProt IDs (). Continuing with the example in, a GN system must normalize the human gene 'CD59' and all its instances in the first sentence to the EntrezGene ID 966. However, 'CD59' in the title must be normalized to 12 509 because it is a murine gene. BioCreative has also curated and released standard evaluation datasets as part of its GN tasks, and many novel and useful approaches have come out of the BioCreative workshops. Generally speaking, after gene mention recognition, the current top-performing systems include three main steps: (i) candidate ID matching, (ii) false positive (FP) filtering and (iii) disambiguation. Some research only focuses on improving one of these steps. For example,utilized logistic regression to improve the accuracy of candidate IDs matching.proposed a knowledge-based disambiguation approach that combines features from text and knowledge sources via an information retrieval method.used the maximum entropy model to classify valid IDs from candidate ID lists.collected external knowledge for each gene, such as chromosome locations, gene ontology terms, etc. and calculated the likelihoods stating thePage: 2587 25862594
GN using MLNsimilarity of the current text with the knowledge to improve the disambiguation performance.focused on one source of entity ambiguity, model organism, and developed a corpus for organism disambiguation. For entities that have no corresponding IDs (e.g. 'C9 complex' in),compiled a blacklist from several data sources and dynamically updated the list with full name/abbreviation information found in context to filter out FPs.employed an isolated stage to filter out FPs, including protein families, groups or complexes. Our contributions to GN system development in this article are 3-fold. The first of these contributions is using co-reference information (i.e. whether different mentions refer to the same entity in the same discourse) to boost predictive accuracy. Most previous GN systems do not consider dependencies among gene mentions across sentences in the same article. Here, we propose to model these dependencies in our GN system. Our approach is based on the two main ideas that have been used in co-reference resolution: salience in centering theory () and transitivity (). Discourse salience is a phenomenon that in a given discourse, there is precisely one entity that is the center of attention. Such entity is mentioned over and over again and makes it more salient than others. We can utilize this phenomenon to improve the normalization confidence. Suppose that x is a candidate ID for several gene mentions in a discourse, we can then assume that x is more salient than other IDs. If we can normalize one of these mentions, m, to x with high confidence, then we are more likely to be able to normalize all the other mentions to x as well. Continuing with the example shown in, if ID:966 is a candidate ID for the gene mention 'CD59' and all its instances in the first sentence ('membrane inhibitor of reactive lysis', 'MIRL' and 'protectin'), we can then assume that ID:966 is more salient than other candidate IDs. We can normalize the mention, 'MIRL', to EntrezGene ID 966 with high confidence, because a search for the name in EntrezGene returns only one match. We are, therefore, able to normalize all the other mentions with more confidence, such as the mention 'CD59' with 377 ambiguous IDs, to ID:966 as well, because they are in the same discourse and ID:966 is more salient than others. Similarly, the idea of transitivity allows us to express the concept that if two gene mentions refer to the same gene, and one mention has been normalized to an ID, the other should also be normalized to the same ID. Using the transitivity property, the two ambiguous gene mentions with the same name 'CD59' in the second sentence can be normalized. Salience and transitivity have been used to improve the performance of biomedical relation extraction by, but have not been studied in GN. We will show how to employ them in GN and evaluate their effects. Our second contribution is integrating FP filtering and disambiguation into a joint inference model. Most previous works employed separate stages to execute FP-filtering and disambiguation. However, a separate-stage approach ignores possible dependencies between FP-filtering and disambiguation and can result in error propagation. Continuing with the example shown in, a separate-stage approach is likely to run into trouble. As described above, in the disambiguation stage, we can normalize 'MIRL' to ID:966 with high confidence and use the salience property to normalize the others. Unfortunately, a separate FP-filtering stage may filter out the entity mention 'MIRL' because it is listed as an abbreviation of an organization name, Mineral Industry Research Laboratory. If filtering is executed first and MIRL is removed, the ID:966 will no longer be considered salient, and normalizing the other mentions will not be so easy. With a joint inference process, we can carry out both FP-filtering and disambiguation tasks simultaneously to avoid this type of error propagation. Joint models have become popular in natural language processing (NLP) recently, because they allow different NLP tasks to be carried out simultaneously. This makes it possible for features and constraints to be shared among tasks. The Markov logic network (MLN) () is a joint model which combines first-order logic and Markov networks. Our MLN model unifies the FP-filtering, co-reference resolution and disambiguation stages, and simultaneously exploits contextual information, coreference information and filtering constraints. Our third contribution is to define a new GN evaluation metric for information extraction (IE) applications. Existing GN evaluation schemes mainly aim to assess system performance in terms of effectiveness for database curation (). For each article, they usually compare a list of gene IDs output by the system to a gold standard list for that article. We refer to this evaluation scheme as article-wide resolution. For IE applications, such as the biomolecular event extraction task in the BioNLP shared task, however, GN needs to be much more accurate. For each instance of an ambiguous gene mention, the correct ID must be determined for the dependent application to make the correct inferences. Therefore, to make our results more relevant to the developers of IE applications, we assess our system at a finer-grained resolution, instance by instance in addition to article-wide resolution.
METHODS
Markov logicIn first-order logic, formulae consist of four types of symbols: constants, variables, functions and predicates. Constants represent objects in a specific domain (e.g. gene mention: CD59, MIRL, etc. or EntrezGene IDs). Variables (e.g. x, y) range over the objects. Predicates represent relationships among objects (e.g. interact_with) or attributes of objects (e.g. isNormalizedTo). Constants and variables may belong to specific types. An atom is a predicate symbol applied to a list of arguments, which may be constants or variables (e.g. isNormalizedTo('CD59 , x) or interact_with('CD59 , y)). A ground atom is an atom whose arguments are all constants (e.g. isNormalizedTo('CD59 , 966)). A world is an assignment of truth values to all possible ground atoms. A knowledge base (KB) is a partial specification of a world; each atom in it is true, false or unknown. A Markov network represents the joint distribution of a set of variables X = (X 1 ,...,X n )  X as a product of factors:), where each factor f k is a non-negative function of a subset of the variables x k and Z is a normalization constant. As long as P (X = x ) > 0 for all x, the distribution can be equivalently represented as a log-linear model:), where the features g i (x ) are arbitrary functions of (a subset of) the variables' states. An MLN is a set of weighted first-order formulae. Together with a set of constants representing objects in the domain, it defines a Markov network with one variable per ground atom and one feature per ground formula. The probability distribution over possible worlds x is given by) where Z is the partition function, F is the set of all first-order formulae in the MLN, g j is the set of groundings of the i-th first-order formula and g j (x ) = 1 if the j-th ground formula is true and g j (x ) = 0 otherwise. Markov logic enables us to compactly represent complex models in non-i.i.d. domains. General algorithms for learning and inference in Markov logic are discussed inPage: 2588 25862594
H.-J.Dai et al.Domingos (2006). We employ the beast toolkit (http://code.google.com/p/ thebeast/) to implement our MLN model. It uses 1-best Margin Infused Relax online learning Algorithm (MIRA) () for learning weights and employed cutting plane inference (with integer linear programming as its base solver for inference at test time as well as during the MIRA online learning process.
MLN-based GN methodsOur MLN-based GN system is designed to identify gene mentions in a given biomedical article and normalize them to EntrezGene IDs. First, a gene mention recognizer identifies gene mention boundaries in a given article. The system then looks up each gene candidate in a lexicon of gene names and IDs compiled from EntrezGene and normalizes it to an EntrezGene ID using our MLN-based method. We define three predicates, isNormalizedTo, ShouldBeNormalized and isCoreference, to capture the concept of GN, FP-filter and co-reference, respectively. Before entering into subsections, we introduce some basic logic symbols used in this work to avoid misunderstanding. The Boolean operations of logical conjunction, disjunction and negation are denoted by ,  and , respectively. The symbol, '', means implies; A  B means if A is true, then B is also true; if A is false then nothing is said about B. The symbol, '', is an existential quantification while '!' is a uniqueness quantification. Note that x.P(x) means there is at least one x such that P(x) is true. But !x.P(x) means there is exactly one x such that P(x) is true.
Formulae for GN constraintsFor GN, we use the predicate isNormalizedTo(i, id) to represent that the i-th gene mention is normalized to id. Note that, in our formulae, we refer to a gene mention by its order in the article (e.g. the i-th gene mention) for several reasons. First, not all names can be found in the training data. Secondly, even if two gene mentions have the same name string, they may normalize to different IDs. Lastly, this allows us to model the order information and dependency among all gene mentions for disambiguation. The most general assumption is that if a gene mention is mapped to only one ID, it should be normalized to that ID. This is defined as: Formula 1: !id.isCandidateOf (id, i)  isNormalizedTo(i, id) where isCandidateOf (id, i) represents that the ID candidate id is a candidate of the i-th gene mention. Because the objective of GN task is to discover a unique ID for each gene mention, we must define a formula to ensure that the constraint is satisfied. We use the following formula to ensure that each gene mention is normalized to only one ID:The formula is a hard constraint that must always hold, whereas Formula 1 is soft and can be violated. The weights of soft constraints can be learned from training data. Finally, if a gene mention has two or more candidate IDs, we must determine which is more appropriate through the disambiguation processing. In the next subsection, we discuss the disambiguation formulae defined for isNormalizedTo. We refer to isNormalizedTo and the other two predicates, ShouldBeNormalized and isCoreference, for FP-filter and co-reference as 'hidden' because we need to infer them at test time. In contrast, predicates defined in the following sections are considered 'observed', because they are known in advance.
Formulae for disambiguationAs shown in, there are numerous observed predicates defined for the disambiguation process. These predicates capture several types of information that can be divided into two groups: (i) gene profile information: information extracted from manually curated knowledge resources that are relevant to the gene ID; and (ii) non-profile information: information directly derived from the gene's context in the given abstract.Profile based isCandidateOf (id, i) : id is a candidate ID of the i-th gene mention. hasChromosomeInfo (i, id, sd ) : the chromosome location information of the i-th gene mention, which has the candidate identifier id, can be found in the surrounding text in the sentence distance sd. isPPIPartner(id 1 , id 2 ) : id 1 and id 2 are an interaction pair. hasPPIPartnerRank(i, id, r) : the i-th gene mention has an identifier candidate id that interacts with the rank-r numbers of unambiguous IDs found in the current content among all r's candidates. PPIKeyword (w ) : the word w is a protein-protein interaction keyword. Non-profile based hasPrecedingWord (i, w, l ) : the i-th gene mention has a preceding word w in the range l. hasUnigramBetween (i,j, u ) : there is an unigram u between the i-th and the j-th gene mentions. hasWord(w) : the abstract contain a word w.Please refer to the Supplementary Material for the full list of predicates.
Gene profile-based disambiguationWe define four predicates which have been used in previous researches () to capture recognized genes' profile information, including chromosome location, proteinprotein interactions (PPIs), tissue type and gene ontology. For example, the predicate hasChromosomeInfo (i, id, sd ) indicates that the chromosome location information of the i-th gene mention, which has the identifier id as its candidate ID, can be found in the surrounding text at the range sd. Applying this predicate to the sentence: 'The human UBQLN3 gene was mapped to the 11p15 region of chromosome 11.' The mention UBQLN3 must be normalized to the EntrezGene ID:50613 because 50613's chromosome location, 11p15, is found in the same sentence. The formula describing the relation of hasChromosomeInfo and isNormalizedTo is defined as follows:Here, we can see that there is an additional parameter, +sd, in the predicate hasChromosomeInfo. sd, indicating where the chromosome information corresponding to id locates, has two possible values: 0 indicates the id's chromosome information is located in the same sentence as i. Otherwise, sd is 1. The '+' notation in the above formula indicates that the MLN must learn a separate weight for each grounded variable (sd). For example, hasChromosomeInfo(i, id, 0) and hasChromosomeInfo(i, id, 1) are given two different weights in our MLN model after training. Based on the chromosome information recorded in EntrezGene, we use regular expression patterns, such as '\d{1,2}\d{1,2}\.?\d{1,2}?-??\d{1,2}?\.?\d{1,2}?' to determine whether the chromosome information for a given gene mention exists in the context. The PPI information can be used in disambiguating a gene mention i as follows. Based on the PPI recorded in the database, we assume that the id, which interacted with the most unambiguous IDs, is the most likely id that can be normalized. We define the predicate hasPPIPartnerRank(i, id, r) to represent this concept. The formula defining the relationship between hasPPIPartnerRank and isNormalizedTo is: isNormalizedTo (i, id )Page: 2589 25862594
GN using MLNOne can see that there are two predicates in this formula that check if the article contains proteinprotein interaction (PPI) keywords 1 Two similar predicates, hasGOTermRank and hasTissueTermRank, represent the concept that i should be normalized to the id with the largest number of corresponding gene ontology terms or tissue terms found in the context. For estimating the tissue and the gene ontology term counts, we collected terms from the Human Protein Reference Database and the gene ontology database, using the exact matching approach to calculate the matching counts in the context. For PPI, we further define the following formula to capture the dependency that a gene mention j should be normalized to id 2 if another gene mention i has been normalized to id 1 and id 1 forms an interaction with id 2 :
Non-profilebased disambiguationIf the context does not contain gene profile-related information, non-profile information can be used. For example, a gene mention j may sometimes be followed by its variant i (abbreviation or full name). Usually, the variant i is put in parentheses. If i can be uniquely mapped to id, it is very likely that j is also normalized to id. The actual formula is shown as follows:!u.hasUnigramBetween (i,j, u )u = "("!id.isCandidateOf (id, i)Finally, the salience property described in the introduction section can be exploited in disambiguation as follows:Salience formula: i < j isNormalizedTo(i,id)isCandidateOf (id, j )  isNormalizedTo( j,id) In other words, if the identifier id is normalized to a gene mention i that precedes the current mention j, and id is a candidate of j, then the current mention j should also be normalized to id.
Formulae for FP-filteringIdeally, we should be able to treat all recognized gene mentions and their IDs as candidates, and proceed directly to the disambiguation task. However, it is not always the case, because the employed recognizer may generate FP gene mentions. To capture the concept in our model, we define the predicate ShouldBeNormalized, which indicates that the i-th gene mention of the article should be normalized to an ID. We then employ the following formula to ensure that, whenever i is normalized to an identifier id, a gene mention should be normalized. Formula 4: isNormalizedTo(i, id)  ShouldBeNormalized (i ) Note that the formula is equivalent to isNormalizedTo(i, id)ShouldBeNormalizedwhich models the FP-filtering stage decision determined by traditional separate-stage GN systems: the recognized gene mention i does not have to be normalized to the identifier id; however, the id cannot be assigned to the entity i that has not been proposed as a potential gene mention that should be normalized. The formula is a hard constraint. For GN, FPs can be classified into two types: those that do not belong to any entity class, and those that belong to classes that are not the curation target, e.g. DNA polymerases, protein families or in a specific organism that is not considered. In our model, for the i-th entity, if the possible world ShouldBeNormalized (i ) is false, the entity is considered as an FP. The first formula containing ShouldBeNormalized is associated with different weights by considering the grounded gene name n: hasGeneName(i, +n)  ShouldBeNormalized. Main observed predicates for FP-filtering hasGeneName(i, ws) : the name of the i-th gene mention is ws hasFirstWord(i, w) : the first word of the i-th gene mention is w SpeciesTerm(w) : the word w is a species term. Blacklisted(n) : the word sequence n is blacklisted. containsMoreSpecificMentions(i) : the i-th gene mention collocates with more specific gene mentions in the current context. AllUpperCases(ws) : the word sequence ws are all uppercase. The other formulae are constructed by using the observed predicates defined in Tables 1 and 2 to determine whether i is a true gene mention or not by checking i's context. For example:implies that a certain gene mention i's suitability for normalizing depends on whether or not i's first word is a certain species keyword. Again, the '+' notation in the above formula indicates that the MLN must learn a separate weight for each gene name nfound that abbreviations of gene mentions in biomedical language are highly ambiguous with other biomedical terms, and many of the occurrences in MEDLINE abstracts are not really related to the corresponding genes. We use the following formula to combine the concept with the blacklist.The formula states that if an all-capitalized mention i in parentheses is blacklisted (i.e. such mention is assumed to be an abbreviation), its preceding mention j is very likely not to be normalized. In addition, we use predicate containsMoreSpecificMentions(i) to indicate that i collocates with more specific gene mentions in the same abstract 2 If the grounded value is true, i should not be normalized to any ID. The actual formula is defined as follows:Consider the IL-1 family as an example to clarify this formula. The IL1 family includes IL1 alpha, beta, IL1ra, etc. In the EntrezGene database, there is no ID for the family mention (IL1), but it does include the IDs for IL1alpha/beta and IL1ra. Using the above formula in the sentence, '<entity id=7850>type II IL-1 receptor</entity> can bind all three forms of IL-1 (<entity id=3552>IL-1 alpha</entity>, <entity id=3553>IL-1 beta</entity> and <entity id=3557>IL-1ra</entity>)', the mention 'IL-1' will not be normalized, but following gene mentions, including IL-1 alpha, beta and IL-1ra, will be.
Formulae for co-referenceIn addition to GN, our MLN model infers whether or not the gene mentions i and j are the same instances. The predicate isCoreference (i, j ) is used to indicate that the two mentions i and j are the same instances. By jointly predicting co-references and GN in our model, we can define the following formula Page: 2590 25862594. Observed predicates and formulae for co-reference resolution Predicate isAliasOf (i, j ) : the i-th gene mention is listed as an alias of the j-th gene mention. Distance(i, j, dis) : the distance between the i-th and the j-th gene mention is dis. InAppositionTo(i, j) : the i-th gene mention is in apposition to the j-th gene mention.
H.-J.Dai et al.String match feature: hasGeneName (i, n )hasGeneName( j, n)  isCoreference(i, j) Alias feature: isAliasOf (i, j )hasGeneName (i, n )hasGeneName (j, n )  isCoreference(i, j) Distance feature: Distance(i, j, +g)  isCoreference(i, j)to express the transitivity concept that if the i-th gene mentions and the j-th are co-reference, and i is normalized to id and j has not been normalized, then j should be also normalized to id. There are several co-reference works in general domains (). In this work, we implement a subset of features presented by.lists the additional observed predicates defined for isCoreference, the formula definition and its corresponding feature name defined byPlease refer to their work for details of the feature descriptions. In addition, in this work, we only consider gene mentions as potential co-reference candidates. Following the same concept described for Formula 2, we add the following structural constraint to ensure that whenever i and j are co-reference, they must be gene mentions should be normalized.Finally, we must ignore the first order logic unique names assumption ()i.e. different constants always refer to different objects in the domain. This assumption can be removed by employing the following hard constraint formulae in our models:
RESULTS
Experimental setup
Evaluation schemes Weuse the standard recall, precision and F-measure metrics (RPF) to evaluate our approach and compare it with other GN methods at two resolutions (article and instance). Article-wide evaluation is based on the standard used in the BioCreative II GN challenge (), which was designed to determine a GN system's performance in aiding curation of biological databases. For a given article, the GN system outputs a list of IDs, which is then compared to the gold standard ID list for the article. The RPF scores are calculated based on the sums of true/false positives/negatives (TP, TN, FP, FN). Instance-based evaluation measures the GN performance at a finer-grained IE resolution. In contrast to the first metric, the RPF scores are calculated based on the sums of TP, TN, FP and FN for all instances in the test dataset. We further consider whether the boundaries match those of the normalized identifier's mention. Under this criterion, an FP could normalize a true gene mention to the wrong ID or a false gene mention to any ID while an FN could normalize a true gene mention to the wrong ID or fail to recognize a true gene mention. In cases where a true gene mention is normalized to the wrong ID, both the FN and FP are increased by 1. For TP/FP/FN, we need to determine when the predicted boundaries match those of the gold standard. Most entity recognition tasks use 'exact-matching' as the primary criterion. Under this criterion, a candidate gene mention can only be counted as a TP if both its left and right boundaries fully coincide with the gold answer. However, in a real scenario, a gene mention can be tagged in several ways (e.g. 'no correlation between serum <entity> LH </entity> ' and 'no correlation between <entity> serum LH </entity> ' are both correct), which are intrinsic to the annotation of any gene mention corpus whether developed by humans or machines, and may depend on the annotator's perspective. Furthermore, for the GN task, the correctness of the normalized ID is more important than its boundaries. Therefore, we use approximate-matching () to determine the boundary criterion. For example, a TP is counted when a machine-normalized gene mention is a substring of the gold standard-normalized gene mention or vice versa, and the normalized ID is equal to the gold ID.
Dataset Weuse the training and test sets (281 and 262 abstracts respectively) released by the BioCreative II GN task. The corpus contains annotations for human genes that are normalized to IDs in EntrezGene database. We chose this dataset rather than the more recent one released as part of the BioCreative III GN task () because each abstract in the BioCreative II training/test is accompanied by a list of gene IDs and corresponding name strings found in that abstract. The BioCreative III GN dataset, on the other hand, does not include name-string information in these lists, only gene IDs. This lack of name-string information makes it very difficult for our biologists to manually compile a corpus for instancebased evaluation because one ID can correspond to many name strings. Although the gold BioCreative II standard contains each ID's name string, it does not give the exact location of the corresponding gene mention in the abstract. To obtain instance-based evaluation results, our in-lab biologists annotated the exact locations and the boundaries of the IDs' gene mentions with automated assistance. The automatic annotation process uses the ID's name string from the gold standard to tag the entire corpus. Human annotators then corrected the boundaries and normalized results based on the context. 3 To compile the GN training corpus for our MLN models, we employed a publicly available state-of-the-art GN system released byto recognize all gene mentions and generate candidate IDs for each entity. Lai's gene mention recognition system achieved an F-score of 85.8% on the BioCreative II gene mention tagging corpus. For each mention m in a sentence s recognized by Lai's system and the set of EntrezGene ID candidates for m output by Lai's system, we searched s for the first human annotated mention n overlapping with m and set n's human annotated ID as m's true EntrezGene ID. Other candidates were set as m's incorrect IDs.
Page: 2591 25862594
GN using MLNWe chose Lai's system, which is the core component of the rank 1 system in BioCreative II.5 interactor normalization task (), because it is the only publically available state-of-the-art system developed for the BioCreative II GN task. The performance of another open available library, Moara (), is far from the state-of-the-art on the same dataset. For the FP-filtering corpus, again, for each mention m in a sentence s recognized by Lai's system, we checked whether or not the boundaries of the mention m matched with the human-annotated boundaries. All matched mentions are regarded as TPs while the others are TN instances. Finally, to generate our co-reference resolution corpus, we simply treated gene mentions generated by Lai's system containing the corresponding same gold normalized ID as co-references.
System settingIn order to compare our MLN-based GN system to separate-stage-based systems, we constructed two stagebased GN systems (Systems 1 and 2). Both stage-based systems as well as our system employed Lai's system for gene mention recognition and ID matching for each gene mention. Systems 1 and 2 also share two components: FP-filtering and co-reference resolution. These two components are based on the maximum entropy (ME) model, and are referred to as ME Model 1 and Model 2. In ME modeling, we formulated both the FP-filtering and the co-reference resolution tasks as classification tasks. Model 1 used the features equivalent to the formulae described in Section 2.5 (FP-filtering). Model 2 uses the feature functions equivalent to the co-reference resolution formulae described in Section 2.6. Please refer to our Supplementary Material for details. In the disambiguation stage, Lai's system (2009) was used in System 1 while the ME-based approach with equivalent features described in Section 2.4 was used in System 2. In System 2, we followedto formulate the GN task as a classification problem and transform all formulae described in Section 2.4 except Formula 3 and the Salience formula to binary feature functions. Formula 3 and Salience formula are excluded because they cannot model in ME. We will discuss this in Section 4.1. For Systems 1 and 2, we employed an additional step to select the optimal set of featureswthe greedy backward sequential selection algorithm (). For each system, the algorithm starts from all features transformed from FP-filtering formulae and repeatedly removes a feature whose removal yields the maximal performance improvement in the overall GN task. The same algorithm is then used to select the optimal set of co-reference features. Note that the feature selection procedure is designed for optimizing the performance of GN not FP-filtering or co-reference resolution. We will discuss this in Section 4.4. In contrast to the MLN-based GN system, which performs joint inference for FP-filtering, disambiguation and co-reference resolution at once, to carry out the above stages in System 1 and 2, we followed this procedure: after one or several ID matches were found for a gene mention, Model 1 was employed for both systems to decide whether to keep the mention or discard it. If the mention was kept, each system's disambiguation method was then used to select the most appropriate ID for it. In addition, Model 2 was employed to recognize the co-references in an article. The co-reference information was fed into the assignment algorithm, which was implemented as a post-processing step in both systems.The MLN-based approaches are highlighted in bold.To approximate Transitivity Formula described in Section 2.6, the assignment algorithm was implemented as follows. For each nonnormalized gene mention i, and its co-reference chain determined by Model 2 , the algorithm chose the ID with the highest confidence from the co-reference chain, and then assigned it to i In the next subsection, we discuss the instance-based fine-grained IE results. Then, we derive BioCreative's evaluation results by simply merging the normalized IDs in all locations and removing duplicated IDs.shows the instance-based results derived on the test set. The first row (no disambiguation/MLN-based: 2.3) assesses the performance without applying any disambiguation approaches of Lai's system. This result shows the baseline for Systems 1 and 2 for which all mentions with only one candidate ID were directly treated as answers, and entities with more than one candidate ID were discarded. Our MLN-based model achieves exactly the same performance (MLN-based: 2.3) by applied formulae described in Section 2.3 (GN Constraints Formulae), indicating the MLN-based system can simulate the decision. For each configuration, the last column of its corresponding row shows its F-score improvement over the baseline after employing different GN disambiguation methods, and stage processing or joint inference. Rows of (a)(c) compare our MLN-based disambiguation approach, which uses all formulae defined in Sections 2.3 and 2.4 (MLN-based/2.3+2.4), with) and the ME-based disambiguation approach (System 2). The (e) and (f) employ the ME Model 1 to further filter out FPs. Our MLN-based GN system (d) achieves the same goal by adding on (a) with formulae defined in Section 2.5 that captures the filtering concept. Rows of (g)(i) shows the results of the three systems that further exploits the co-reference information. In contrast to the cost of developing another algorithm to combine the co-reference information into the original GN systems (e) and (f), we can achieve the same goal in MLN by simply adding all formulae in Section 2.6 into our joint model (d). Finally, the results derived on the test set using article-wide criterion are shown in. From (a)(c), we can see that with equivalent disambiguation feature setting, MLN outperforms the other two models. Adding
Experiment results
H.-J.Dai et al.
GN using MLN(id = 3083) into at least one mention, ('hepatocyte growth factor' or 'HGF'). This incorrect boundary leads to errors in GN, and could result in the extraction of an incorrect self-activation event: <entityid=3082> HGF </entity> activates <entityid=3082> HGF </entity>. An experiment conducted on the test set shows that our MLN model can achieve an F-score of 81.7% in fine-grained IE if we replaced the predicted mentions' boundaries with their corresponding overlapping gold boundaries. These results show that a hybrid approach may be useful for generating gene mentions for GN. For example, continuing with the Sentence S.1, if we put it through a syntactic parser like Enju, we find that the adjacent words 'Hepatocyte growth factor (HGF) activator' belong to the same noun phrase, which indicates that we can expand the boundary. We plan to address this issue in future work.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
The regular expression, '\b({0}\s? {1}|type[\s-]?{2} {0}|{0} [\s]?\d+|{0}\s?{2})\b', is used to check the specificity; {0}is the gene mention, {1} denotes the Roman letters and {2} denotes the Roman numbers.
Please refer to our Supplementary Material for the details of the dataset construction. The compiled corpus would be available at https://sites.google .com/site/hongjiedai/projects.
.4 Joint model versus separate-stage models Compared with the two separate-stage Systems 1 and 2, our MLN-based approach has the following two advantages: (i) it performs several predictions using one model and (ii) it finds the global optimal solution. The first advantage has been illustrated by Meza-Ruiz et al. (2009), which is contrasted with separatestage systems where several components need to be trained and integrated by different strategies. The second advantage is based on our observation on the training set, employing all features transformed from FP-filtering formulae in the ME Model 1 that might be able to achieve the best FP-filtering performance, but it does not guarantee that the final integrated GN performance can also be the best. This is the reason why we need to employ the backward feature selection algorithm to optimize GN performance for the separate-stage systems. The same phenomenon is also appeared when combining the ME Model 2 with ME Model 1 and different separate-stage disambiguation approaches. We also observed that each individual component's F-score in the joint model is higher than that of the separate-stage models. For example, the FP-filtering F-score in MLN joint model (79.5%) is 2.7% higher than the F-scores achieved by separate-stage models. In co-reference resolution, the joint model also achieves a better Fscore (66.3% versus 64.9%). These results also state the advantage of joint inference. 5 CONCLUSIONS In this article, we present a novel approach that employs MLN to model the constraints and decisions in the GN task. Our formulae describe several properties, including gene profile and non-profilebased information, which can be used for GN disambiguation. We use dependencies among IDs to model the discourse salience and the transitivity properties. Moreover, we integrate the FP-filtering and disambiguation steps into a simultaneous process and demonstrate the benefit of predicting gene mentions and their corresponding IDs simultaneously in contrast to the stage-based approaches, which identify mentions first and then normalize them to IDs. We also show the performance boost of exploiting co-reference information in GN. For system evaluation, we propose a new fine-grained scheme that assesses results instance by instance, instead of article by article. Our experiments provide the first gene mention evaluation results from a fine-grained IE perspective and highlight problems that need to be addressed in GN systems, e.g. the assignment of non-unique IDs and the boundary issue. 6 ACKNOWLEDGMENTS Authors' contributions H.J.D.: developed the MLN-based GN system, designed all the experiments and wrote most of this paper. H.J.D., Y.C.C. and R.T.H.T. discussed and refined the paper. Y.C.C., one of the biologists in our laboratory, annotated the G.N. corpus for instance-based evaluation. R.T.H.T. and W.L.H. guided the whole project. Funding: National Science Council under grant NSC99-3112-B001-005 and NSC98-2221-E-155-060-MY3, the Academia Sinica Investigator Award 95-02 and the research center for Humanities and Social Sciences under grant IIS-50-23. Conflict of Interest: none declared.
