pyDockWEB is a web server for the rigid-body docking prediction of proteinâ€“protein complex structures using a new version of the pyDock scoring algorithm. We use here a new custom parallel FTDock implementation, with adjusted grid size for optimal FFT calculations , and a new version of pyDock, which dramatically speeds up calculations while keeping the same predictive accuracy. Given the 3D coordinates of two interacting proteins, pyDockWEB returns the best docking orientations as scored mainly by electrostatics and desolva-tion energy. Availability and implementation: The server does not require registration by the user and is freely accessible for academics at http://life. bsc.es/servlet/pydock
INTRODUCTIONProteinprotein interactions mediate most cellular functions; thus, a detailed description of the association process at molecular level is essential to comprehend the fundamental processes that sustain life. In such line, proteinprotein docking tools aim to identify the native binding mode between two proteins (). Such predictions are required to complement experimental techniques that cannot provide structural information at a proteomics scale given their current technical limitations. pyDock () is a rigid-body docking method in which sampling is performed by means of FTDock () and scoring implements an efficient empirical potential, composed of electrostatics and desolvation terms, with a limited contribution from van der Waals energy. The method has been successfully tested in CAPRI (). Here, we present pyDockWEB server, a new fast implementation that allows easy access to non-expert users to state-of-the-art docking predictions.
PYDOCKWEB SERVERpyDockWEB server is a web application for the use of the proteinprotein docking and scoring program pyDock. Users can easily send pyDock jobs to be executed in a five-step process via a user-friendly front-end (). In the first step, users have to introduce a project name and a notification email address. In the second step, the scoring algorithm is selected. In the third step, users can either upload their protein coordinate files or indicate the PDB code, in which case, PDB files will be automatically downloaded from RCSB Protein Data Bank. In both cases, PDB files are automatically parsed to select available receptor and ligand chains. An option to automatically set-up a docking job with example PDB files is also available. In the fourth step, users may specify optional distance restraints, which will be computed using pyDockRST () module. Finally, in the fifth step, users will double-check whether data provided are correct and submit a docking job to the server queues. After job submission, user is redirected to a web page where project status is automatically updated and result files can be downloaded after computation is finished. In this web page, the top 10 models scored by pyDock are displayed using Jmol (http:// jmol.sourceforge.net/). pyDockWEB is technically constituted by three different components: a web front-end, pydockd, a daemon in charge of managing pyDock executions and a data storage system. The web front-end has been implemented using JSF (Java Server Faces, a Java-based web application framework), Ajax4sf (an open source framework that adds Ajax capabilities to JSF framework) and JSP (Java Server Pages) technologies. Data storage system has been implemented via one of the most popular choices in web applications databases, MySQL (http://www.mysql.com). Data tables have been designed to efficiently store the relevant job information and to gather a few statistics about usage and computation and queued times. The controller, pydockd, is an application written in Python version 2.7, which periodically polls job requests created from the web front-end and stored in the MySQL database and submits them as pyDock job instances to the Slurm batch queuing system (https://computing.llnl.gov/ linux/slurm/slurm.html). pyDockWEB uses an optimized pyDock version 3, which also includes a custom parallel version of FTDock, implemented using the MPI (Message Passing Interface) library MPICH2 () to generate docking poses, which is capable to scale to multiple processors/cores. Another optimization *To whom correspondence should be addressed. has been implemented, as follows. FTDock makes use of the FFTW 2.1.5 () library to perform a global scan of translational and rotational space having the two molecules discretized onto orthogonal grids. The size of the transform in the FFTW scope is proportional to the FTDock grid size in number of cells, which was automatically calculated from the single grid unit size and the size of the proteins. However, according to FFTW's documentation, FFTW algorithms are optimal for sizes that follow Equation (1),where e  f is either 0 or 1, and the other exponents are arbitrary. Other sizes are calculated by FFTW using slower algorithms. Therefore, we have adjusted the FTDock grid size, n, to follow Equation (1). This grid size optimization has been implemented in the new custom parallel FTDock version. Supplementaryshows the difference of execution times between the original and the grid optimized FTDock versions, as well as the stability in terms of time of the parallel version using the grid size optimization. The server runs on a multi-user cluster with two nodes. Each node has 16 cores (4 Intel Xeon E5620 Quad Core) at 2.4 GHz. Two cores are reserved for MySQL, JBoss and interactive shells. Physical memory is 65 GB, with 11 TB of total available disk space.
BENCHMARKING AND DISCUSSIONThe pyDockWEB server provides a user-friendly web front-end to allow the academic community to use the pyDock rigid-body docking and scoring method. The user is notified on completion of the execution and is able to visualize online the top 10 models of the predicted complex using Jmol. We have evaluated the performance of pyDockWEB server on the standard protein protein docking benchmark 4.0 (). The quality of the results in terms of generated near-native solutions (ligand RMSD within 10 A  from that in the X-ray complex structure) has not been affected by the optimization and implementation procedure, and the top 10 success rate (i.e. number of cases with near-native solutions within top 10 scored poses) reached 17.0% (Supplementary), in line with previous benchmarks (). This performance is comparable with other reported servers, as shown on available proteinprotein targets from current CAPRI edition (Supplementary). Interestingly, sampling with FTDock with the new custom parallel and variable grid size implementation achieved speed-ups of up to 181 (50 as average) with respect to the default FTDock distribution, whereas the scoring process based on the new pyDock version 3 achieved speed-ups of up to 40 (38 as average) with respect to the previously available version (). Additional pyDock modules and new developments are planned to be implemented in pyDockWEB in the future: patch prediction (pyDockNIP), optimal docking area (pyDockODA), domaindomain assembly (pyDockTET) and SIPPER scoring energy (pyDockSIPPER).
The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
pyDockWEB at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
