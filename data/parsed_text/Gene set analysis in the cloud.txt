Cloud computing offers low cost and highly flexible opportunities in bioinformatics. Its potential has already been demonstrated in high-throughput sequence data analysis. Pathway-based or gene set analysis of expression data has received relatively less attention. We developed a gene set analysis algorithm for biomarker identification in the cloud. The resulting tool, YunBe, is ready to use on Amazon Web Services. Moreover, here we compare its performance to those obtained with desktop and computing cluster solutions. Availability and implementation: YunBe is open-source and freely accessible within the Amazon Elastic MapReduce service at s3n
INTRODUCTIONThe complexity and cost associated with recent advances in highthroughput 'omic' technologies have made cloud computing a cost-effective and powerful resource for bioinformatics. Existing platforms, such as those offered by Amazon Web Services (AWS), provide the computing environment, including CPUs, storage, processing memory, networking and operating systems, required to deploy computationally expensive algorithms and applications. Such environments allow users to configure and exploit resources on a 'pay as you use' basis (). Although cloud computing applications are increasingly being made available for high-throughput DNA sequencing data, there is a need for publicly available algorithms that can enable other translational biomedical research applications, such as large-scale gene set analysis of expression data (). In this context, expression data of thousands of genes are mapped to biologically relevant sets of genes, e.g. curated biological pathways, and differential expression of such gene sets is estimated across phenotypes. The objective of our research is 2-fold: (i) to develop a cloud compute version of a published gene set analysis algorithm (); and (ii) to perform a comparative analysis of performance across different computing platforms.
ALGORITHMIn our original gene set analysis algorithm, kipuMarkers, there are two main processing steps (): expression data overlay and * To whom correspondence should be addressed. pathway scoring. In the overlay task the aim is to map expression measurements from samples (e.g. patients) onto gene sets (e.g. molecular pathways) provided by the user. In this step 'activity levels' for each sample-specific pathway are calculated. In the case considered here, an activity level refers to the mean expression value observed in a pathway. This is followed by the computation of a 'perturbation score' for each gene set, which is based on the comparison of differential activity levels across two sample groups defined in the data (e.g. disease classification). We developed a cloud compute version of this method, YunBe, which is written in Java using the MapReduce framework (). The overlay step corresponds to a matrix multiplication task: gene expression data matrix (M) is multiplied by a pathway matrix (N) to produce a new matrix (K) with samples matched to the pathways available. Matrix M is uploaded to the Hadoop Distributed File System (HDFS), while the matrix N is uploaded to a distributed cache system upon execution. Thus, in each processing iteration, sample data are 'multiplied' by (i.e. mapped to) the entire pathway collection, one by one. Hence, a mapping task processes two inputs: samples (from matrix M) and pathways (from matrix N) to produce a key/value pair, where key is a pathway ID and value is an 'activity value'. The 'reduce' phase connects all values associated with the same key (pathway ID), followed by the calculation of 'perturbation scores' and P-values for each pathway as reported in ().
DATA AND IMPLEMENTATIONTo test YunBe we analyzed published and simulated gene expression datasets: a human liver gene expression dataset () and synthetic datasets of varying sizes. The liver dataset includes 466 samples from 31 842 transcripts and grouped by gender, i.e. twoclass phenotype. To generate the simulated data, we first selected transcript names lists from the Agilent Whole Human Genome Oligo Microarray (i.e. 19 634 transcript names). We then randomly grouped 1000 samples and computed (normally distributed) values for each transcript in the sample. As gene sets, we used a canonical pathway list with 880 gene sets from the Molecular Signatures DataBase (MSigDB) (). Gene expression data, pathways and YunBe Jar files were uploaded to an Amazon S3 bucket. A job flow was created with Amazon Elastic MapReduce service (1, 2, 4 and 8 EC2 m1.large instances were compared with 2, 4, 8 and 16 cluster cores running at BGI. We also made comparisons with a desktop program running on a duo-core Intel E7500 Wolfdale CPU.
Gene set analysis in the cloud
COMPARATIVE ANALYSIS RESULTSThe desktop computer version of our algorithm required 120 and 173 min (wall clock time) to perform gene set analysis of the liver and simulated datasets, respectively. In both datasets, YunBe reduced the execution time from hours to minutes (). The execution time was significantly reduced even when using only two cores. In the case of the liver dataset and in relation to the desktop implementation, speedups of 10.9 and 24.1 times were obtained with the Amazon EC2 and BGI cluster, respectively. Major execution time improvements were also observed on the simulated dataset: 8.6 and 16.4 faster with Amazon EC2 and BGI cluster, respectively. Overall, the BGI platform produced faster results than AWS. This result may be expected due to overheads incurred by the cloud's virtualization layer. Another factor to take into account is that speed also depends on the specific hardware utilized for execution. Note that in our analyses, we equalized the bit size of computer architecture (64-bit) and the number of cores between Amazon EC2 and BGI cluster. Nevertheless, other factors, such as memory and I/O performance, may have influenced our comparison. Moreover, differences in networking hardware, inter-node communication and geographical distance should be considered when interpreting observed differences in speed. YunBe's running time scales with nearly linear speedup over the desktop program performance as the number of cores increases (). For instance, on Amazon EC2 and liver data, we obtained a speedup of 11 and 20 for 2 and 4 virtual cores, respectively. For the simulated data, the speedup was of 8 and 14 for 2 and 4 cores, respectively. However, such proportional increases were not observed above eight cores, more significantly on Amazon EC2. In theory, MapReduce computations are independent, and therefore the (wall clock) running time should scale linearly with the number of processor cores available. In practice, the speedup of a program running on multiple processors may be limited by serial processing overheads, as described by Amdahl's law. YunBe analyses on the AWS are relatively inexpensive. For example, a full analysis of the liver dataset requiring eight virtual cores was completed for about US$ 1.7 (EUR 1.2). In conclusion, we offer YunBe, a new open-source gene set analysis tool for the cloud. YunBe is freely available and ready to run on AWS. We showed how, in comparison to a desktop implementation, YunBe significantly improves execution times. YunBe can accelerate pathway-based biomarker identification through inexpensive and secure distributed computing.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
