Motivation: An increasing number of discrete mathematical models are being published in Systems Biology, ranging from Boolean network models to logical models and Petri nets. They are used to model a variety of biochemical networks, such as metabolic networks, gene regulatory networks and signal transduction networks. There is increasing evidence that such models can capture key dynamic features of biological networks and can be used successfully for hypothesis generation. Results: This article provides a unified framework that can aid the mathematical analysis of Boolean network models, logical models and Petri nets. They can be represented as polynomial dynamical systems, which allows the use of a variety of mathematical tools from computer algebra for their analysis. Algorithms are presented for the translation into polynomial dynamical systems. Examples are given of how polynomial algebra can be used for the model analysis.
INTRODUCTIONFinite dynamical systems, that is, discrete dynamical systems with a finite state space, have been used extensively in systems biology to model a variety of biochemical networks, such as metabolic networks, gene regulatory networks and signal transduction networks. For many such networks, the available data quantity and quality is not sufficient to build detailed quantitative models such as systems of ordinary differential equations, which require many parameters that are frequently unknown. In addition, discrete models tend to be more intuitive and easily accessible to life scientists. There is ample evidence that such models can capture key dynamic features of biological networks and can be used successfully for hypothesis generation (G.submitted for publication;). Boolean networks and their generalization, the so-called multistate logical models (; Thomas and D'), are the main types of finite dynamical systems that have been used successfully in modeling biological networks (e.g.). Petri nets have also been shown to be a good modeling * To whom correspondence should be addressed. paradigm for this field (e.g.). Together, these model types represent a large class of discrete models in systems biology, which are capable of simulating deterministic as well as stochastic processes. Several tools and techniques have been developed to simulate and analyze discrete models. For logical models, the open-source software GINsim (http://gin.univ-mrs.fr) is available, and for Petri nets, the user has access to a wide variety of software. The laboratory of M. Heiner provides software with a particular focus on applications to systems biology (http://www-dssz.informatik.tucottbus.de/). Analysis tools for logical models, including Boolean networks, are described in. In addition to a variety of simulation and visualization tools, other graph theoretic analysis tools are available for the identification of steady states and strongly connected components of the regulatory graph. There are algorithms to compute dead states (steady states), as well as T-and P-invariants, which can be computed via linear algebra methods. A survey of the use of Petri nets in systems biology is given by. The purpose of this article is to describe a mathematical framework that encompasses both types of models and makes accessible a broad range of mathematical tools for model analysis, in order to complement existing tools in these domain areas. The fundamental observation underlying this framework is that logical models and k-bounded Petri nets are particular instantiations of what we shall call 'algebraic models,' i.e. timediscrete dynamical systemswhere each coordinate function f i is a function of the n variables x 1 ,...,x n , each of which takes on values in a finite set F with algebraic structure, and each f i is a polynomial. Aside from the mathematical simplicity of their definition, an important feature of polynomial dynamical systems is that one can employ a number of mathematical tools for their analysis. For our purposes, the principle tool is the capability to symbolically solve systems of nonlinear polynomial equations quite efficiently. This can be used, for instance, to compute the steady states and other features of an algebraic model. We give algorithms that translate both logical models and Petri nets into this framework. Our algorithms are compatible with the algorithm in, which translates logical models into Petri nets. We furthermore provide several examples, using models from the literature, of how this translation can be used to analyze their dynamic properties. The article is organized as follows. In Section 2, we briefly describe polynomial dynamical systems (PDSs). We then show how to use the algebraic framework in the analysis of logical models andPage: 1638 16371643
A.Veliz-Cuba et al.
k-bounded Petri nets in Sections 3 and 4, respectively; furthermore, we present concrete examples for each. We close with a discussion in Section 5.
METHODWe consider models of biological systems, such as biochemical networks with n interacting molecular species, whose states can be described by an n-tuple with entries from a finite set F. The model consists of a set of rules that allow the system to evolve from one state to the next, so that it can be represented as a timediscrete dynamical system f : F n  F n. Both logical models and k-bounded Petri nets are of this form. For example, in a model of a gene regulatory network, the set F is {0,1}, representing the state of a gene as either ON (1) or OFF (0). If we consider f only as a set function, then there are few mathematical tools that can help to analyze f. One way to introduce mathematical structure, and thereby mathematical tools to study f , is by imposing the structure of a number system on F, akin to the introduction of a coordinate system in affine space, which gives access to analytical methods in geometry. It can be shown that this can be done whenever the cardinality of F is a power of a prime number, and we will show in this article that it can always be accomplished in the cases of interest here (we will consider |F| to be a prime number to simplify the notations). It is worth pointing out that this algebraic structure is used heavily in the case of Boolean networks. The evaluation of Boolean functions uses the fact that F ={0,1} is equipped with an addition, where 0 is the additive identity, and with a multiplication, where 1 is the multiplicative identity. The two are connected through the rule 1+1 = 0. Once F carries such a structure, we can make use of a fundamental property of finite fields: Let h : F n  F be a function. Then, there exists a polynomial g : F n  F such that h(x) = g(x) for all x  F n. One can find g using the formula g(), where the right-hand side is computed modulo p. We will write h, h(x) or cF n h(c) n j=1 (1(x j c j ) p1 ), depending whether or not there is the need to specify x or the polynomial form of h. Thus, we can represent f via its coordinate functions: f = (f 1 ,...,f n ) : F n  F n , where each f i is a polynomial function, so that evaluation and analysis of f can be done using polynomial arithmetic over F. We shall call f a PDS over F of dimension n. In the next sections, we will show that logical models and bounded Petri nets can be represented as PDSs. One can then use powerful symbolic computation software, from open source specialty packages such as CoCoA (http://cocoa.dima.unige.it/), Singular (http://www .singular.uni-kl.de) and Macaulay2 (http://www.math.uiuc.edu/Macaulay2) to general commercial packages such as Mathematica and Maple. In this article, we will use Macaulay2 for all computations.
ALGORITHM FOR LOGICAL MODELSLogical models have been used for modeling biological phenomena and have been useful for obtaining valuable insight and qualitative information (Thomas and D'). Such analysis is based on the topology of the network and the type of regulation of the different interactions in the network, which are believed to be the key features that determine dynamical properties (; Thomas and D'). Logical models have the advantage of being intuitive and relatively simple to construct, even with no information about reaction rates or functionality, and still keeping qualitative information (). However, their analysis is not a trivial task. For example, the problem of finding the steady states of a logical model is NP-complete, that is, it is one of the hardest problems in the nondeterministic polynomial-time class (even to determine the existence of steady states is NP-complete;).
Definition of logical modelsThere are several ways to define logical models (), and here we use the definition given inDefinition 3.1. A logical model is a triple (V,E,K), where:,i = 1,.
..n} is the set of parameters.Consider a state x = (x 1 ...,x n ). The future value for node v i , with I(i) ={v i 1 ,...,v i r }, is determined as follows: compute, indicating that the k j-th interaction for input v i j of v i is active; then compute f i (x) = K i (k 1 ,...,k r ). This last value determines whether the value of v i tends to increase, decrease or remain the same. To be precise, the future value of v i is given byWith this notation, g = (g 1 ,...,g n ) : S  S is a finite dynamical system, and so isNotice that g ensures that each variable changes at most one unit (continuity), whereas f does not. The dynamics of a logical model is given by the phase space, defined as the graph S with an edge from x to y if {i : x i = y j }={j} for some j and y j = g j (x) (asynchronous dynamics) or as the graph S with an edge from x to y if y = g(x) (synchronous dynamics). Notice that g may be replaced by f if we do not require continuity. An edge i  j is called positive (negative) if increasing the i-th entry of x causes g i (x) to increase (decrease) using the natural order on the integer sets. If changing the i-th entry of x does not cause any change in g i (x), we say that the edge is nonfunctional.
Polynomial form of logical modelsLet (V,E,K) be a logical model as above. Choose a prime number p such that p  m i +1 for all 1  i  n (has m i +1 elements) Page: 1639 16371643
Polynomial algebra of discrete modelsWeel MPF String Fizzy,...,p1} be the field with p elements. Note that we may consider S  F n. Consider a vertex v i and let g i (or f i if we do not require continuity) be its coordinate function. Our goal is to represent g i as a polynomial in terms of its inputs, say x i 1 ,...,x i r. That is, we need a polynomial function defined on F r with values in F. Denote ab = min{a,b}, using the natural order on the set F, viewed as integers. To extend the domain of g i fromThe polynomial form of g i : F r  F is thenwhere the right-hand side is computed modulo p.
ExampleThis example is based on a simplified model for the Drosophila cell cycle first presented in. The Boolean logical model is given inandSupplementary Material for a formal definition of functional circuit), rather than the three assumed in. In the transition from the complete model to the simplified model, some functionality may be lost and the algebraic framework can easily detect this. This is important because in order to deduce dynamical properties from the network structure it is necessary to have the correct wiring diagram. In Property 10 in, it is shown that the logical model has no steady states (this was done by proving that an equivalent Petri net is deadlock free). Algebraically, however, this corresponds to solving the system of equationswhich has no solution, as the first two equations imply that x 2 = x 2 +1, showing that there are no steady states.
Algebra and parametersAn important feature of the algebraic framework is the ability to treat the parameters as variables and study all corresponding models at the same time, which we illustrate with a small logical model. (The same analysis can be done for Petri nets.) Suppose, for example, that in the model for the Drosophila cell cycle (Section 3.3) some parameters are unknown. The polynomial form of the logical model is:For the derivation of these equations, see the Supplementary Material. Now, let us focus on finding steady states of this logical model. This model has three unknown parameters, and if we were to analyze each model, we would have to analyze 2 3 = 8 logical models, as the complexity grows exponentially with respect to the number of unknown parameters. However, using the algebraic framework we can treat the parameters K 1 ,K 2 ,K 3 as variables and analyze the eight models at the same time. Using polynomial algebra (see Supplementary Material), we find that an equivalent system isFrom this system, we can obtain valuable information. For example, if x is a steady state, then x 1 = x 2 = x 4 = x 3 1; that is, the only possible steady states are (0,0,1,0) and (1,1,0,1). This is true no matter what the parameters K 1 ,K 2 and K 3 are. We can also easily solve this system and see the steady states for any choice of parameters. For example, consider K 1 = 1,K 3 = 0. Since they do not satisfy the first equation, there are no steady states.= 0, where r = 1,...,5. The networks used were: fission yeast (), budding yeast (), Th cell differentiation (), Th cell differentiation (), Th cell differentiation (), T-cell receptor (), respectively. All networks were Boolean except the fourth one which had some nodes with three states.
Page: 1640 16371643
A.Veliz-Cuba et al.; we have the systemwhich has the unique steady state x = (0,0,1,0). We can also use the system above to determine for which choice of parameters a given state is a steady state of the system. For example, suppose we are interested in finding the parameters for which (0,0,1,0) is a steady state, then we have the system K 1 (K 3 1) = 0,0(K 3 1) = 0,K 1 = 0; therefore, K 1 = 0 and the other parameters are 'free.' Hence, (0,0,1,0) is a steady state for K = (0,K 2 ,K 3 ). Suppose now we are interested in finding the parameters for which (1,1,0,1) is a steady state. In this case, we have the system K 1 (K 3 1) = 0,K 3 1 = 0,K 1 = 0; i.e. K 1 = 0,K 3 = 1 and K 2 is free.) is a steady state for K = (0,K 2 ,1) (note that in this case (0,0,1,0) is a steady state as well).
PerformanceWe tested our algorithm to compute steady states of several published models, that is, we recorded the required time for computing a lexicographic Grbner basis (which then allows backward substitution to solve the system of equations f 1 (x)x 1 = 0, , f n (x)x n = 0.) The results are shown in. Furthermore, to compute limit cycles (using a parallel update) of length r, one can compute the lexicographic Grbner basis for the system f t 1 (x)x 1 = 0, , f t n (x)x n = 0, where t = 1,...,r. It is clear that the solution set for t = 1 is the set of steady states; the states in the solution set for t = 2, which are not steady states, are periodic states with period two and so on. Notice that in, the size of the network does not seem to be correlated to the computation time. This is due to the fact that polynomial algebra computations depend more strongly on the complexity of the polynomial equations and not as much on the size or complexity of the logical model. This means that the method can scale well to large networks and that it can complement other methods very well. (Typically, the more terms the polynomial form of the model has the more complex the Grbner basis calculation. In the Boolean case, for instance, a conjunction leads to a polynomial with one term, whereas a disjunction results in three terms.)
ALGORITHM FOR K-BOUNDED PETRI NETS
Definition of Petri netsA k-bounded Petri net is a 4-tuple (S,T ,F,W ), where:is the set of places.is the set of transitions.(3) F  (S T )(T S) is the set of 'regular' arcs. F   (S T ) is the set of inhibitory arcs.(4) W : F  N gives the arc weights of the regular arcs. W  : F   N gives the arc weights of the inhibitory arcs.For a transition t, defineWe denote by A t the column of A T (or the row of A) corresponding to a transition t  T. Notice that A t = A T U t , where the entry of U t corresponding to t is 1 and all others are 0.for all places is called a marking. Let x be a marking; a transition t is said to beThus, a transition t is enabled for x if C t (x) = 1. The evolution of the Petri net is given by firing transitions; by firing an enabled transition t, we update the value of the places with regular arcs from/to t. The phase space of the Petri net is obtained by firing transitions in an asynchronous manner. Let x be a marking: if a transition t is enabled, then firing t results in the marking x +A t. This implies that for any marking x and any transition t, the Petri net can always evolve from x to f tare the elements of T. A trajectory is a path xThe reachability graph for a marking x is the graph made up of all trajectories starting at x. The reachability graph of a set of markings S is the graph made up of all reachability graphs of all the elements of S. We say that (X 1 ,...,X m ) > 0 if X i  0 and at least for one i we have X i > 0. A P-invariant is an integer solution, X > 0, of AX = 0. A T-invariant is an integer solution, Y > 0, of A T Y = 0. A marking x is dead if no transition is enabled, that is, if C t (x) = 0 for all t  T ; this is equivalent to f t (x) = x for all t  T. A marking is k-bounded if the value of each place is at most k. The Petri net is k-bounded if any reachable marking (obtained by firing some sequence of transitions) from any k-bounded marking is also a k-bounded marking, that is, if {x : x i  k} contains the vertices of its reachability graph, which is equivalent to f t (for all transitions t. Examples of 1-bounded Petri nets are Boolean regulatory Petri nets, presented in). When each place has its own 'k', we have a more general definition:Page: 1641 16371643
Polynomial algebra of discrete modelsfor all transitions t. Examples of such Petri nets are multi-level regulatory Petri nets, presented in (). Our framework is applicable to K-bounded Petri nets (including k-bounded Petri nets). For a given Petri net, the analysis of its dynamics, checking for dead markings and the type of liveness are some of the typical questions that can be viewed as algebraically as we will see next. Also, when modeling biological systems, there is not a unique marking that is of interest, but a whole family of markings corresponding to different initial states of the biological system. By looking at a Petri net as a polynomial dynamical system, we can study all those markings at the same time.
Polynomial form of K-bounded Petri netsSince the algebraic framework relies on finite fields, we consider K-bounded Petri nets and focus on the analysis of markings inWe need to extend the functions f t to all of F n and determine their polynomial form. It suffices to give algebraic structure to the functionthe polynomial form of C t will automatically give the polynomial form of f t ). To do this, consider the function c(z) = 1 if a  z  b and c(z) = 0 otherwise (i.e. cis the characteristic function of). Since), we only need to give algebraic structure to c(the polynomial form of C t will be given by the product of the polynomial forms of its factors). It is not difficult to see that the polynomial function arb (1(z r) p1 ) is equal to 1 if a  z  b and 0 otherwise. Hence, the polynomial form of cis c(z) = arb (1(z r) p1). This gives the polynomial form of C t (x), which, in turn, gives the polynomial form of f t (x) = x +C t (x)A t , where f t : F n  F n. Example 4.1. Consider a transition t of a 1-bounded Petri net such that @BULLETt ={x 1 ,x 2 } and t ={x 3 ,x 4 } (with weights equal to 1). Then C t (x) = c(x 1 )c(x 2 )c(x 3 )c(x 4 ). Since c(z) = 1z and cNow, we can state and solve algebraically some Petri net problems. For example, the problem of finding dead markings becomes the problem of solving polynomial equations, which can be easily addressed within the algebraic framework, as was the case for logical models. More precisely, we have the following remark. Remark 4.
A marking x of a K-bounded Petri net is dead if and only if
ExampleConsider the Petri net model infor the core lambda switch S ={CI,Cro}.This Petri net is (1,2)-bounded () and, therefore, we can use the algebraic framework. Notice that (). The polynomial forms for all the transitions areTo find the dead markings, we have to solve the systemThe last equation corresponds to the requirement that x  S. Using Macaulay2, we obtain the marking (1,0) as the only dead marking.
DISCUSSIONThe problem of giving mathematical structure to logical models has been studied by several authors (e.g. Egri). For the purpose of computation and analysis, the structure proposed here provides a class of simple and easily defined mathematical objects that can model both logical models and bounded Petri nets. It has the advantage that it makes accessible the theoretical concepts, algorithms and software from polynomial algebra, such as Grbner Page: 1642 16371643
A.Veliz-Cuba et al.basis theory, which underlies many of the algorithms for solving systems of polynomial equations. It is important to mention that in this article we focus on finding steady states and dead markings, not because that is the only application of our framework, but because it can be translated directly into the algebraic problem of solving polynomial equations without much difficulty; the framework we propose can be also used to answer other questions. For instance, theory, algorithms and software were used in Laubenbacher and Stigler (2004) and subsequent papers to give a solution to the problem of reverseengineering of gene regulatory networks from experimental time course data. This allows us to find all logical models that satisfy certain properties as done by SMBioNet (http://smbionet.lami.univevry.fr) with the additional advantage of allowing a systematic study and classification of such models. One can also solve the reverse problem, that is, given a family of models, by using our framework, we find properties that they all satisfy (see Section 3.4). Furthermore, the theory inherent in the algebraic framework can give rise to theorems. For example, the algebraic structure was used to give an exact formula for the structure of the phase space of linear systems () and lower and upper bounds for the number of limit cycles of conjunctive and disjunctive Boolean networks (). Also, the family of nested canalizing functions has been shown to have an algebraic structure (toric variety) that allows their characterization (). These functions appear frequently in Boolean models of regulatory networks and their dynamics have desirable properties. Functionality of circuits can also be studied within this framework (see Supplementary Material). Polynomial algebra can, therefore, complement the existing analysis tools for logical models and Petri nets, and we have shown several examples of its use. It is also worth mentioning that Petri nets are a special case of bipartite models, consisting of two sets of nodes, representing 'places' and 'events,' respectively, connected by directed edges. More general bipartite models are quite common in systems biology (e.g.), and they might be amenable to analysis with similar methods. It is also worth mentioning that, while the examples used here are all gene regulatory networks, there are examples of logical/Petri net models of other kinds of molecular networks (e.g.), so that the analysis framework described here is more widely applicable. A potential disadvantage of the algebraic framework is that it is less intuitive than either logical models or Petri nets. Even in the Boolean case it is often difficult to give a biological interpretation to a Boolean function in polynomial form, even if the equivalent Boolean expression is quite meaningful. However, with appropriate software, the typical user wanting to analyze a logical model or Petri net does not need to explicitly manipulate polynomial functions or even be aware that they are used in the analysis. On the other hand, some questions or aspects of logical models and Petri nets may not currently have a direct counterpart in the algebraic framework; for example, the asynchronous update commonly used in logical models does not currently have a direct counterpart in the polynomial algebra framework. This deserves further investigation.
The Author 2010. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oxfordjournals.org 1637 at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
