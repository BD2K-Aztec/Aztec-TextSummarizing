We present Proteomatic, an operating system independent and user-friendly platform that enables the construction and execution of MS/MS data evaluation pipelines using free and commercial software. Required external programs such as for peptide identification are downloaded automatically in the case of free software. Due to a strict separation of functionality and presentation, and support for multiple scripting languages, new processing steps can be added easily. Availability and Implementation: Proteomatic is implemented in C++/Qt, scripts are implemented in Ruby, Python and PHP. All source code is released under the LGPL. Source code and installers for Windows, Mac OS X, and Linux are freely available at
INTRODUCTIONMass spectrometry has evolved as a powerful tool for the high-throughput analysis of complex protein mixtures, producing immense amounts of data (). Dedicated software is essential for the identification of peptides and proteins from tandem mass spectra (MS/MS). In addition to commercial software, the increasing availability of free tools for different purposes allows for manifold alterations in the choice of individual programs and their arrangement in an MS/MS data evaluation pipeline. Most programs are controlled via the command-line interface (CLI), which is necessary in order for the program to be included into an automated pipeline. On the other hand, this mode of interaction makes the program less accessible to users. Some programs are delivered with a dedicated graphical user interface (GUI), which facilitates changing parameters and running the program. However, in order to create an automated processing pipeline in which multiple programs are chained together, CLI tools must be used and programming knowledge is required. Here, we report on Proteomatic, a versatile and user-friendly platform for the construction of MS/MS data processing pipelines. Although alternatives exist (), we chose to design a system that implements a strict separation of functionality and the GUI, where new processing steps
METHODSOn the conceptual level, albeit transparent to the user, Proteomatic is split into three distinct parts: (i) program descriptions (CLI tools atlas), (ii) processing scripts (Proteomatic scripts) and (iii) the Proteomatic GUI. The separation of functionality from the GUI is achieved through the use of the external program descriptions, which provide all necessary information to automatically construct a GUI for a certain external program and to allow its incorporation into a pipeline.
CLI tools atlasInformation about various free and commercial mass spectrometry-related programs is stored as YAML-formatted descriptions. These descriptions contain information about parameters, input/output files and download locations in the case of free software. Possible parameter types include integer and real numbers, strings, text fields, drop-down boxes and boolean flags.
Proteomatic scriptsThe Proteomatic scripts implement all functionality available in Proteomatic. Features such as automatic software downloading and output file tracking are provided by a framework implemented in Ruby. Scripts implemented in other languages implicitly access the same functionality through an 'any language hub', which acts as an abstraction layer between the Ruby framework and scripting languages other than Ruby. As available for external programs, a YAML-formatted description also exists for every Proteomatic script. If a script acts as a wrapper around an external program, its description may reflect the external program's parameters by including its description from the CLI tools atlas. The implementation of a Proteomatic script is straightforward, regardless of the actual scripting language used (Ruby, Python and PHP are currently supported). In general, a Proteomatic script defines a subclass of ProteomaticScript and implements the virtual run() method. The underlying framework collects user-provided input files and parameters, as well as the requested output files and makes this information available in the three instance variables input, param and output. A complete developer's documentation can be found on the web site.The pipeline shown implements a protein identification pipeline, using a target/decoy approach in conjunction with OMSSA. The processing pipeline can be seen on the left-hand side of the window, composed of existing input files (blue font), yet to be created output files (gray font) and scripts in between. The right-hand side of the window contains the user-adjustable parameters of the Run OMSSA script. Once a pipeline has been constructed, it can be saved and rerun on a different set of input files at a later time.
M.Specht et al.
Proteomatic GUIThe Proteomatic GUI is implemented as a C++/Qt application, enabling seamless integration with Windows, Mac OS X and Linux desktops. The application itself does not provide any MS/MS data evaluation functionality but acts as a user interface layer on top of the Proteomatic scripts. Users may choose various processing steps from a menu. Every script is depicted as a box on a canvas and its parameters can be modified in the right-hand pane (). Files can be added to the canvas and specified as input files to a script by connecting both boxes via an arrow. By connecting the output files of one script to another script, increasingly complex pipelines can be constructed. Once a pipeline has been created, it can be executed by clicking the Start button. Although the Proteomatic GUI does not provide any means to inspect result files, output files can be opened via a double-click, thereby delegating the handling of the output file to the underlying operating system.
RESULTSProteomatic contains more than 70 scripts for various purposes, e.g. peptide and protein identification at a user-defined false discovery rate using a target/decoy approach (). In addition, protein groups can be determined, thus reducing the amount of peptides matching to multiple sequences (). Proteomatic can also be used for peptide and protein quantitation using a novel quantitation tool, qTrace (), as demonstrated in. Detailed documentation of Proteomatic and all available scripts can be found on the Proteomatic web site.
* To whom correspondence should be addressed. can be provided using various programming languages. Proteomatic enables the incorporation of programs such as BLAST (Altschul et al., 1990), PEAKS (Ma et al., 2003) or OMSSA (Geer et al., 2004) and provides a GUI to adjust the parameters of each program. In contrast to other workflow management systems like Taverna (Oinn et al., 2004) and Galaxy (Goecks et al., 2010), Proteomatic operates in a decentralized fashion. Web servers are not required, and all programs are executed locally on the user's machine. Whenever freely available external programs are required, Proteomatic will download and unpack the appropriate packages automatically, thus facilitating the application of such programs.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from [09:24 26/3/2011 Bioinformatics-btr081.tex]
CONCLUSIONS Proteomatic provides a high-throughput data evaluation platform for protein identification, using a variety of freely available programs that are downloaded automatically when required, thus providing a straightforward system to evaluate large MS/MS datasets. Through the use of scripting languages, existing functionality can easily be adjusted and new processing steps can be added using Ruby, Python, PHP or potentially any other operating systemindependent scripting language (see Supplementary Material for a detailed example). The storage of program descriptions and source code for Proteomatic scripts and the GUI in separate, publicly accessible Git repositories facilitates the enhancement of the system. We hope that the variety of supported scripting languages and the straightforward deployment to the Proteomatic GUI encourages community contributions and fuels the development of novel MS/MS data evaluation tools. Funding: Deutsche Forschungsgemeinschaft [FU780/2-1 to C.F.]; Bundesministerium fr Bildung und Forschung (0315265C to M.H.). Conflict of Interest: none declared.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
