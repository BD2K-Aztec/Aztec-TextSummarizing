Motivation: Pattern discovery algorithms are widely used for the analysis of DNA and protein sequences. Most algorithms have been designed to find overrepresented motifs in sparse datasets of long sequences, and ignore most positional information. We introduce an algorithm optimized to exploit spatial information in sparse-but-populous datasets. Results: Our algorithm Tree-based Weighted-Position Pattern Discovery and Classification (T-WPPDC) supports both unsupervised pattern discovery and supervised sequence classification. It identifies positionally enriched patterns using the Kullbackâ€“ Leibler distance between foreground and background sequences at each position. This spatial information is used to discover positionally important patterns. T-WPPDC then uses a scoring function to discriminate different biological classes. We validated T-WPPDC on an important biological problem: prediction of single nucleotide polymorphisms (SNPs) from flanking sequence. We evaluated 672 separate experiments on 120 datasets derived from multiple species. T-WPPDC outperformed other pattern discovery methods and was comparable to the supervised machine learning algorithms. The algorithm is computationally efficient and largely insensitive to dataset size. It allows arbitrary parameterization and is embarrassingly parallelizable. Conclusions: T-WPPDC is a minimally parameterized algorithm for both pattern discovery and sequence classification that directly incorporates positional information. We use it to confirm the predictability of SNPs from flanking sequence, and show that positional information is a key to this biological problem. Contacts:
INTRODUCTIONPattern discovery algorithms have been widely used in bioinformatics to analyze recurrent groups of symbols, such * To whom correspondence should be addressed. as DNA and protein sequences. Existing methods can be divided into two classes based on their underlying approach: probabilistic versus deterministic. Probabilistic methods maximize the likelihood between a motif pattern model and a background pattern model. Gibbs sampling and its variants are the prototypical probabilistic methods (). Some deterministic methods construct candidate patterns from a given pattern length and alphabet size [e.g. Oligo-Analysis/Dyad-Analysis (van) and YMF (, some enumerate possible patterns from given sequences [e.g. MOPAC (, while others use tree structures [e.g. Weeder (or other mathematical approaches [e.g. Projection (. Despite this methodological diversity, there are three issues not well-addressed by the existing algorithms. First, positional variability in sequences is typically ignored. Most widely used pattern discovery methods focus on finding high-frequency sequences independent of their location, primarily representing patterns with position-specific scoring matrices () or Markov models (). However, these techniques assume equal occurrence probabilities at all positions within a sequence. This assumption does not hold for many biological datasets (). A recent method Amadeus uses a localization score to estimate whether the occurrences of the motif tend to cluster at specific distance from the transcription start site (); however, they focused on the specific distance or a range of sequences, not all the positions of each sequences. Second, it is unclear how to handle the numerous, lowinformation content motifs that occur in biological datasets. The presence of such motifs is a major reason for the low accuracy of current pattern discovery methods (). Third, current algorithms focus on analyzing sparse datasets comprising a small number of long sequences. The advent of next-generation genome sequencing has led to much populous, short-sequence data. To address these issues, we developed a new pattern discovery algorithm called Tree-based Weighted-Position Pattern Discovery and Classification (T-WPPDC). T-WPPDC first applies KullbackLeibler distance between foreground and background sequences to determine a weight for each sequence position. It next integrates this spatial data to discover positionally important patterns. Such patterns are used to classify sequences. Moreover, the tree structure used by T-WPPDC allows handling of different
T-WPPDCpattern lengths, sequence lengths and alphabet sizes. In addition, the algorithm is embarrassingly parallel. Another tree structure method, Weeder (), applies a suffix tree to spell the sequences. Our method differs from Weeder since trees in T-WPPDC do not only hold the possible candidate of motifs, but also the positional weights. Furthermore, our method is used for classification. We tested T-WPPDC on an important biological problem: predicting single nucleotide polymorphisms (SNPs). SNPs are single base pair variations in the genome, and are likely the most common form of genetic variation. On average, 1 out of every 1000 bp may be SNPs (). The function of most SNPs remains unclear; especially those not associated with changes in protein sequence. Genome-wide linkage analyses have implicated a large number of SNPs in disorders ranging from Crohn's disease () to cancer () and to quantitative traits such as height (). Many groups are attempting to predict the functional effects of individual SNPs (), and this problem has grown in importance with the advent of cheap genome-sequencing (). In contrast, less research has focused on the causes of SNPs: why do they occur where they do? Zhao studied two SNPs databases such as Celera's CgsSNP and RefSNP and found that natural selection influences patterns of genome variations (). Another study described a map with 1.42 million SNPs and showed that SNPs have been historically passed on across generations (). However, recent study has discovered the effect sequence position () and our previous work also characterized sequence-based determinants of SNPs (). Surprisingly, we were able to predict SNPs from flanking sequences alone using machine-learning methods. Pattern discovery methods failed at this task, with near-chance prediction accuracies (). To further examine this question, we tested T-WPPDC on the DNA sequences flanking known SNPs. Information is unevenly distributed in these sequences, with many motifs showing positional bias. Moreover, some biological factors such as natural selection, non-uniform experimentation and stochasticity interfere with sequence-based SNP analysis. T-WPPDC is able to select informative motifs despite these factors and shows superior performance relative to existing pattern discovery methods.
MATERIALS AND METHODS
DatasetsWe evaluated SNP datasets from different species: (i) human chromosomes 21 and 22 and (ii) human and mouse chromosome X (which have a high degree of synteny). Both SNP datasets were generated as described previously (), with minor modifications. Repeat-masked human genome sequence (build hg18), and mouse genome sequences (mm8) and SNP annotations were downloaded from the University of California, Santa Cruz (UCSC) genome browser database () and dbSNP build126 for human and mouse. The SNP sequence is combined with equal length of 5 and 3 flanking sequence from chromosomes 21 and 22 for human, chromosome X for human and mouse, parsed by a Perl script (v5.8.8). We create a negative control sequence for each SNP by randomly selecting a base of the same reference allele from the same chromosome. To avoid SNPs under strong selection, we applied four criteria to both positive and negative sequences: first, SNPs within 5000 bp of any known exon (RefSeq annotation of February 8, 2007) were excluded. Second, SNPs with discordant UCSC and dbSNP allelic annotations were excluded. Third, non-SNP polymorphisms (e.g. indels) and SNPs with unknown strandedness were excluded. Fourth, SNPs with ambiguous or repeat-masked bases in their 5 or 3 flanking regions were excluded. These criteria removed two-thirds of SNPs. For each of the 12 SNP alleles, our dataset contains equal numbers of true positives (TP) and true negatives (TN). It is possible that some randomly selected negative controls are novel polymorphisms but this contamination is predicted to be under 0.1% (). For method evaluation, we divided each allelic dataset into equal-sized training and testing groups. Combined, there are 120 datasets are used, 72 datasets for chromosome 21 and 22 with symmetrical flanking sequences of 50, 100 and 150 bp (12 alleles  training/testing  3 flanking lengths) and 48 datasets for chromosome X (12 alleles  training/testing  2 species), which leads to 672 experiments (724 pattern lengths + 482 cross-species  4 pattern lengths). Our final chromosomes 21 and 22 human datasets contain 50 bp sequences (average number of sequences  SD: 54354114), 100 bp sequences (49393750) and 150 bp sequences (45183434). Our final chromosome X datasets contain 50 bp sequences with 41882703 for human and 94616465 for mouse (shown in Supplementary Table S1).
Tree-based weighted position pattern discovery and classification (T-WPPDC)T-WPPDC is designed to combine positional information and a novel scoring system to identify maximally predictive patterns. It uses a tree structure to greatly reduce algorithmic complexity. First, Tree Construction builds trees from training sequences. Each node of the tree holds a value representing the likelihood of a given pattern at a given sequence position. Second, T-WPPDC calculates the KullbackLeibler (K L) Distance () for each tree to measure positional differences. Third, Leaf Selection introduces a new scoring system that identifies high information content patterns to handle the low-signal motifs. Fourth, T-WPPDC scans through each test sequence and performs Sequence Classification.Here are the notations used in this section: T-WPPDC requires two sets of sequences, foreground and background. To simplify the description, we use class A as foreground and B as background in this section. Letters N and L represent sequence number and length, respectively. We study DNA sequences, therefore, the alphabet is M {A,C,G,T} and number of letters in the alphabet M is 4. As with most pattern discovery methods, the length of a pattern P, called K, must be fixed prior to analysis. We use l to describe a particular sequence, and lowercase letters, i and j represent a position within a particular sequence.
Tree constructionT-WPPDC first constructs trees for the two sequence classes A and B. We scan all patterns with a K-width window fromin all sequences and use patterns at the i-th position construct tree-A(i) and tree-B(i). Therefore, for the training class A sequences, we built Forest-A of (L K +1) A-trees
. Tree Construction Rules:@BULLET A node of a tree i has M children. @BULLET A child has exactly one parent.@BULLET Each child corresponds to an element of M.@BULLET A node holds an alphabet, score V , and a pointer to its child. @BULLET The depth of tree is the pattern length K.@BULLET There are L K +1 trees in each Forest.@BULLET Tree-size depends on M (alphabet size) and K (pattern length). One can generate a j-bp pattern by traversing the tree from the root node to the node at depth j (Supplementary)(1)
KullbackLeibler distance T-WPPDC uses KullbackLeibler distance (KL distance) to measure positional difference between class A and B. The KL distance usually measures the distance from a true probability distribution p to a target probability distribution q (Kullback, 1987;), but can also be viewed as the information content between two distributions. KL(A i , B i ) is the distance between distributions A and B at position i (0  i  L):where A i,m (or B i,m ) represents the probability of alphabet m shows at position i in class A (or B). Because KL distance is asymmetric, KL(A i ,B i ) = KL(B i , A i ). The distance of each corresponding position i between A and B, KLD(i), can be defined as the sum of the KL(A i ,B i ) and KL(B i ,A i ). Each position in the sequence has an individual KLD, giving L distinct KLD weights. As above, we multiply the log frequency value (Formula 1) by KLD for each node at class A:where V A (i,j) represents the node value at depth j for tree i in class A. The same process is repeated identically on each node on class B. In other words, the value at each node is the sum of its parents and its own weighted value. These weighted values are the product of the normalized log frequency ratio and the KL distance. Intuitively, summing the parent weighted scores reflects the influence of neighboring positions. The weighted value for a node at depth j for tree i reflects the likelihood that this j-bp pattern occurs at position i. Therefore, each leaf node collects the sum of all its ancestors and every node in a tree hold values reflecting the likelihood that a specific pattern occurs at this position. This design allows handling of arbitrary pattern lengths.
Leaf selectionAs noted above, some patterns with low information simply reflect noise in the dataset and do not aid in discrimination. T-WPPDC is designed to select high signal patterns. Filtering based on signal strength trades sensitivity for increased specificity. The difference between corresponding leaf nodes from Forest-A and Forest-B (i.e. V A (i,j)V B (i,j) >>) shows how well the pattern distinguishes A from B. If this difference is positive, then it is overrepresented in class A. The larger this difference, the more informative a pattern is. By altering we can change the sensitivityspecificity trade-off. Theoretically,  0 and should be set small enough to determine the optimal performance. Performance varies with different values of and T-WPPDC defines with n equally spaced points in the range [V A (i,j)V B (i,j)], shown in Formula 4. To optimize , one can preset n and choose the local/global optimal performance accordingly. When is zero leaf selection is disabled, meaning that all leaves are used for classification.
Sequence classification Asin the training procedure, a K-width window is applied to a test sequence, l. The matching pattern at each position is selected from Forest-A and Forest-B. A final score, A(l), is calculated as the sum of all K-bp patterns in l, as below in Formula 5. Patterns that do not meet the leaf selection threshold, , will not contribute. This process is repeated on Forest-B to generate B(l). The sequence l then is classified to the class with the larger score. The detailed workflow is shown in.
ImplementationAssuming it takes a unit time t 1 to construct a single tree, T-WPPDC requires (L K + 1)t 1 to construct each Forest. Updating nodes with KL distance therefore requires (L K + 1)t 2 , assuming t 2 time per tree for updating. Leaf selections can be combined with sequence classification, involving matching patterns from testing sequence to the trees, which requires logK comparisons per pattern, leading to N (L K + 1)logK comparisons. Therefore, the computation complexity of T-WPPDC is a polynomial function, O(N (L K)logK) [i.e. N (L K)logK + (L K) = (L K)(N logK + 1)]. T-WPPDC loads the Forests into memory, with (L K +1) trees. Each tree size depends on the alphabet number M and the depth of trees K, |M| K , giving space requirements of O(L |M| K ). Tree structure design provides flexibility. It is easy to adapt to different alphabets or sequence and pattern lengths. As noted above, each tree holds patterns starting at one sequence position. The current implementation handles DNA sequences (|M|=4). Running time is unaffected by different alphabets, while total memory usage is a function of alphabet size. To further reduce running time and memory requirements, T-WPPDC can be distributed to multiple nodes for parallel computing. As trees are independent from one another, each can be distributed to a separate computing node for simultaneous KL distance calculation, leaf selection and classification. Thus, parallel memory requirements are only O(|M| K ), and computation complexity reduces to O(N logK). T-WPPDC was implemented in C++ with the STL-like template tree class (http://www.aei.mpg.de/~peekas/tree/). While we expect it to be platform independent, we have only tested it under RedHat Linux (v2.6.24) and compiled with GCC (v4.2.4). To evaluate computational performance in a consistent way, we ran all pattern discovery algorithms on a single system.
Related work
T-WPPDCthey tested on 156 yeast ChIP-chip datasets (). The second group developed an approach called LocalMotif that applies three scoring schemes (). Both PSP-MEME and LocalMotif require prior information on the motif, with PSP-MEME assuming OOPS (one motif per sequence) or ZOOPS models (zero or one motif per sequence) and not supporting ANR models (arbitrary number of motifs per sequence). LocalMotif requires the number of motifs to output, the number of candidates and the weights for three scoring schemes. Most of these parameters are unknown and must be estimated. Moreover, LocalMotif involves an exhaustive enumeration strategy, causing exponential complexity with pattern length, while T-WPPDC has polynomial complexity with pattern length (K), O(N (L K)logK). Aside from these algorithmic details, T-WPPDC is the only one of these techniques that can do both motif discovery and sequence classification.
Pattern discovery analysesTo evaluate the performance of T-WPPDC, we used three publicly available pattern discovery methods: BioProspector (version. 2004) () and Oligo (downloaded on September 21, 2007) () and LocalMotif (). We ran each method (including T-WPPDC) using default parameter settings. Oligo returned all possible motifs for analysis (n =|M| K ). We ranked the motifs by Z-score and selected the top 20 overrepresented (or underrepresented) motifs. The value 20 was selected to allow these methods to slightly exceed the number of motifs identified by BioProspector. First, BioProspector, Oligo and LocalMotif were run separately on the foreground (true positive, TP) and background (true negative, TN) datasets. BioProspector and LocalMotif returns both consensus motifs and position weight matrices; Oligo only returns consensus motifs. Second, motifs from Oligo found identically in the TP and TN sets were excluded. Third, a Perl script (v5.8.7) was used to scan through each test sequence for motifs found only in the TP or TN training datasets. If a motif occurred exactly in the test sequence one or more times, then the sequence was predicted to have the same class (SNP or non-SNP) as the motif. Fourth, the actual and predicted classes for all test sequences were used to generate two-way tables giving the number of TPs, TNs, false-positives (FPs) and false-negatives (FNs). Fifth, overall accuracy was calculated from this two-way table in the standard way. Sixth, these steps were repeated with inversion of the testing and training datasets. Seventh, position weight matrices from BioProspector and LocalMotif were analyzed by using logistic regression analysis (). Finally, the entire procedure was repeated separately for each pattern discovery algorithm for sequence lengths of 50, 100 and 150 bp and pattern lengths infor Oligo and LocalMotif andfor BioProspector (BioProspector has a minimum pattern length of 4 bp). The pattern discovery methods were run on two Linux GNU 2.6.15-29 64-bit servers with identical hardware/software configuration, and compiled with GCC (v4.0.3). Logistic regression analysis was run using Weka (v3-6-2).
Machine-learning analysesTwo machine-learning algorithms were employed for comparison: Random Forests (RF) and K-nearest neighbors (KNN). These methods are wellestablished, minimally parameterized techniques representative of diverse fields of machine learning. RF is a non-metric classification technique () that uses an ensemble of decision trees. KNN is a standard non-parametric classification method (). Machinelearning analyses were performed largely as described previously (). Each base of flanking sequence was expanded into four predictor variables, one for each nucleotide, and was assigned a binary value from the sequence. Machine-learning methods were implemented in the R statistical environment (v2.5.1) with RandomForests in the RandomForest package (v4.5-18) and KNN in the class package (v7.2-36). RF contained 1000 trees and K was set to 51 for KNN analysis, based on our previous analysis ().
Data visualization and statistical analysesAll plots and statistical analyses were generated in the R statistical environment (v2.11.1) using the lattice (v0.19-11) and latticeExtra (v0.6-14) packages. To evaluate the relationship between SNP position and weight w, we employed Spearman's rank-order correlation using the absolute value of the position as Spearman's correlation has minimal assumptions:(i) two variables are ordinal, interval or ratio; and (ii) there is a monotonic relationship between variables. As such, it can be used as a non-parametric test. Statistical analysis of differences in means was determined using unpaired, two-tailed Wilcoxon signed-rank test, due to its minimal assumptions: (i) the differences of two observations are assumed to be independent; and (ii) directional comparisons can be given. Both these assumptions are met in the datasets used here. To improve visualization, weights were scaled for plotting as:Similarly, information content values were scaled as: IC scaled = 0.3 [log 2 |IC|min(log 2 |IC|)] (0.3 is chosen for better visualization). These operations are monotonic and only alter the centering of the distributions. Pattern discovery methods CPU running time was loess-smoothed with a span of 0.2 (0.2 is chosen for the best smoothing fit).
RESULTS
Distribution of the KL distanceOur previous work showed that classification methods greatly outperform pattern discovery algorithms in predicting SNPs from flanking sequences (). Machine-learning methods can incorporate positional information, and so to assess the importance of this factor, we performed an information content analysis. For all SNPs that met our stringent inclusion criteria (Section 2.1), we extracted 50 bp of flanking sequence centered on the SNP. We selected an equal number of 50 bp sequences flanking non-SNP positions on the same chromosomes. For each position and for each of the 12 SNP alleles, we calculated the mutual information as:Here b is the nucleotide base {A,C,G,T} and A b (B b ) is the frequency of base b at the current position from sequence A (or B). In our analysis, we set sequence set A as the TPs and B as the TNs.shows that positions close to the SNP (position 0) are generally more informative than those further away. However, some positions that are quite distal to the SNP itself carry information. To incorporate this information directly into pattern discovery, we developed T-WPPDC, which uses the KL distance (). KL distance captures positional dependency in information content (Supplementary). For most (10/12) alleles, the distance of a position to the SNP is proportional to the KL distance (i.e. Spearman's rank-order correlation is significant, P < 0.05). This holds true for flanking sequences of 50, 100 and 150 bp from human chromosomes 21, 22 and X. As noted above, each leaf node holds a value that represents the likelihood that a specific pattern occurs at this position. As shown in, the Foreground scores come from the leaf values from Forest-A (representing the Foreground class) and Background scores are from the leaf values of Forest-B (representing the Background class) (). Symmetric scores indicate little difference betweenmotifs from foreground and those from background. Most SNPs have symmetric score distributions except C/T and G/A SNPs (see Supplementary Figs 35), which shows that the C/T and G/A are more different from background. This might explain the better prediction performance of C/T and G/A alleles that is discussed below.
Prediction accuracyT-WPPDC was evaluated by selecting half of each dataset for training and half for testing/validation. The training and testing datasets were then inverted and the procedure repeated (i.e. 2-fold cross-validation). We used sequences of lengths 50, 100 and 150 bp for SNPs from human chromosomes 21, 22 and X. We also performed four species-specific tests: Hs-Hs (train and test on human sequences), Mm-Mm (train and test on mouse sequences), Hs-Mm (train on human sequences and test on mouse sequences) and Mm-Hs (train on mouse sequences and test on human sequences). We used four different pattern lengths of 36 bp. In total, we conducted 672 experiments: 288 experiments on chromosome 21/22 and 384 experiments on chromosome X. We focus on overall prediction accuracy [(TP + TN)/(TP + TN + FP + FN)], but report multiple metrics (Supplementary Tables S2 and S3). T-WPPDC with leaf selection off consistently outperforms existing pattern discovery methods. First, the overall prediction accuracy is 55.53.6% when threshold = 0(for chromosome 21/22 and Supplementaryfor chromosome X). This is a statistically significant improvement over Oligo, BioProspector and LocalMotif (Oligo: 50.00.8%, P = 5.6110 81 ; BioProspector: 50.80.9%, P = 1.4610 72 ; LocalMotif: 51.31.2%, P = 1.3910 70 ). We are unable to detect a difference between T-WPPDC in this nave mode and KNN, a fully supervised method (54.92.9%, P = 0.61), but remains lower than that of RF (58.93.8%, P = 2.6610 4 ). These modest prediction accuracies suggest that not all SNPs are predicable because of non-sequence factors like natural selection. To demonstrate this, we exploited the fact that not all patterns carry equivalent information. Patterns with similar frequencies in TP and TN cases are mostly noise and have little independent predictive capacity. Enabling leaf selection helps to removes these patterns. The performance varies with threshold stringency (i.e. value), so we executed T-WPPDC at 20 equally spaced point (i.e. n = 20 in Formula 4) (). We chose the last point prior to any decline as the optimum position. Leaf-selection improves median accuracy, at the expense of increased SDs. In this mode, it classifies 40% of sequences (Supplementary) and outperforms KNN on the Chromosome X (P = 2.0010 3 ) and RF on Chromosome 21/22 (P = 0.05) datasets. T-WPPDC with leaf selection also is statistically indistinguishable from performance of KNN in the Chromosome 21/22 datasets (P = 0.24) and RF in Chromosome X (P = 0.69) datasets. We note that these analyses are not precisely comparable as we did not exploit the potential of RF or KNN to prioritize sequences based on vote numbers.To determine if prediction accuracy is a function of dataset characteristics, we analyzed sequence length, pattern length, SNP allele and species (). Shorter sequence () and pattern lengths () perform better than longer ones. For example, patterns with 3 bp perform on average 12% better than those with 6 bp long. More datasets should be examined in the future to explicitly test this observation. In all datasets, the C/T and G/A alleles have the best prediction accuracy (1516% better than the overall median performance, P = 8.6810 9 for C/T and P = 1.9810 9 for G/A,), reflecting the powerful (and known) influence of the bases immediately adjacent to the SNP for these alleles. We also noticed that interspecies performance is significantly better than the cross-species test (P = 2.7710 11 for Hs species test, mean accuracy for Hs-Hs: 61.0%, Hs-Mm: 58.6%; and P = 4.8210 9 for Mm species test, mean accuracy for MmMm: 62.4%, Mm-Hs: 56.8%,), which suggests that patterns are partially conserved across species.
CPU performanceTWPPDC is an efficient algorithm with O(N L logK) running time. Of our 672 experiments, 95% finished within 2 min on a Linux GNU 2.6.15-29-AMD64 server with Intel Xeon x5355 2.66 GHc CPUs and 16 GB RAM. T-WPPDC runs, on average, 39.7% faster than Oligo (P = 0.01) and 46.5% faster than BioProspector (P = 1.3310 43 ).demonstrates that T-WPPDC is able to provide a lower bound of CPU running time (solid line), suggesting it is less sensitive to data size.
CONCLUSIONS AND FUTURE WORK
ConclusionsWe have developed a new pattern discovery algorithm, T-WPPDC, which identifies positional biases between two classes of sequences. We optimized search processes with tree structures, which dynamically improve the computation complexity and allow superior parallelization. By incorporating the pattern selection, T-WPPDC is able to reach the optimal classification performance.It was designed to perform well for large datasets and especially those with relatively short position size. Such datasets are increasingly common, given the high resolution of next-generation sequencing. Our previous work demonstrated the possibility of SNP prediction from flanking DNA (), but indicated that the presence/absence of specific short patterns was not predictive. Here, we demonstrate that integrating positional and frequency data improves SNP prediction accuracy, superior to the best patterndiscovery algorithms and comparable to the best machine learning methods tested. Compared to the existing methods, T-WPPDC requires no prior information of motifs and are capable of performing both discovery and classification efficiently [O(N L logK)]. Our work also suggested that not all SNP sequences are predicable. Some are more dominated by the nature selection and random chance, while others can be predicated by short patterns. For example, C/T and G/A SNPs can reach 79% median prediction accuracy while T/A SNP can only receive 53% median accuracy. Furthermore, T-WPPDC is an efficient and flexible method that can be adapted to other sequences and parallel computing systems.
Page: 2060 20542061
R.Yan et al.
Future workT-WPPDC is a flexible and effective algorithm. Current design supports variable pattern length, sequence length and alphabets. Future expansions can focus on three main areas. First, the algorithm is embarrassingly parallel, so a parallel implementation would be advantageous. Second, the binary classifier can be extended to many groups. Third, T-WPPDC currently assumes exact positional conservation and many overlook patterns with high information content but weak or fuzzy positional conservation. Future work will expand T-WPPDC to search for positional conservation in moving windows and/or to use fuzzy motif matching. Finally, it is possible that T-WPPDC provides a way of assessing the importance of positional information in specific datasets.
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
