Motivation: Gene regulatory networks serve as models from which to derive therapeutic intervention strategies, in particular, stationary control policies over time that shift the probability mass of the steady state distribution (SSD) away from states associated with undesirable phenotypes. Derivation of control policies is hindered by the high-dimensional state spaces associated with gene regulatory networks. Hence, network reduction is a fundamental issue for intervention. Results: The network model that has been most used for the study of intervention in gene regulatory networks is the probabilistic Boolean network (PBN), which is a collection of constituent Boolean networks (BNs) with perturbation. In this article, we propose an algorithm that reduces a BN with perturbation, designs a control policy on the reduced network and then induces that policy to the original network. The coefficient of determination (CoD) is used to choose a gene for deletion, and a reduction mapping is used to rewire the remaining genes. This CoD-reduction procedure is used to construct a reduced network, then either the previously proposed mean first-passage time (MFPT) or SSD stationary control policy is designed on the reduced network, and these policies are induced to the original network. The efficacy of the overall algorithm is demonstrated on networks of 10 genes or less, where it is possible to compare the steady state shifts of the induced and original policies (because the latter can be derived), and by applying it to a 17-gene gastrointestinal network where it is shown that there is substantial beneficial steady state shift.
INTRODUCTIONA key objective for modeling gene regulatory networks is to derive intervention strategies for beneficially altering cell * To whom correspondence should be addressed. dynamics (). To address the issue of changing the long-run behavior, stochastic control has been employed to find stationary control policies that affect a network's steady state distribution (SSD;); however, owing to the inherent computational complexity of optimal control methods (), it is often infeasible to design optimal control policies for large networks. A possible approach to complexity reduction in the finite-horizon model is to use a discrete linear model (); however, we do not wish to be constrained to a finite horizon or a linear model. We proceed in the nonlinear case with network dynamics described by a Markov chain. Even restricting ourselves to the Boolean model, where gene states are binary, 0 and 1, if there are n genes in the network, then there are 2 n states and the transition probability matrix is of size 2 n 2 n. Given this level of complexity, even approximation via re-inforcement learning () and greedy control methods () are quite restricted in the size of networks they can handle. For instance, rather than doing a full optimization relative to some objective function and facing the 'curse of dimensionality' associated with dynamic programming, greedy methods utilize statistical characteristics of the network, including mean first-passage times (MFPT;) and the SSD (). But these still require manipulating the transition probability matrix, which effectively limits their use to not more that 13-gene networks using our current workstation computing environment. This article takes the approach of reducing the size of the network, designing a control policy on the reduced network, and from this inducing a control policy on the full network. It is motivated by a previously proposed network reduction algorithm that removes genes in such a way that the deleted gene induces a specific collapsing of pairs of states from the state space of the original network (). A more detailed discussion about the reduction mapping from that article and its comparison to the current proposed algorithm for designing stationary control policies is provided in the Supplementary Material. While other reduction algorithms have been developed to obtain reduced models for Boolean or probabilistic Boolean networks (PBNs) to maintain either the structural consistency () or the dynamical behavior of the original network (), the specific intent in this article is to find a reduction strategyPage: 1557 15561563
CoD-based reduction algorithmthat can provide beneficial stationary control policies for the original network. In this study, we use Boolean networks (BNs) with perturbation, BN p s, to model gene regulatory networks and ultimately design stationary control policies to alter the dynamics of the network. BNs have been used in variety of other contexts and with different objectives in biological applications. Huang (2007) generates Boolean gene regulatory networks for validating the hypothesis that the attractors of such networks represent functional cellular states, whereas Kauffman model () proposes that the cell types are the attractors. He introduces randomization into the networks in terms of environmental noise (random perturbation of the individual genes) and mutation, which refers to changes in the wiring of the network. In another prospective, BNs are claimed to have biologically meaningful behavior when they are in the critical phase ().study this phenomena and discover that gene regulatory networks have stable, near critical, dynamics. They also propose an analytical approximation of the size distribution of perturbation avalanches for BNs using the branching process. They test their analytical method with simulations using different synthetic BNs and also a biological dataset. Random BNs and their characteristics have been extensively studied by. In a random BN, the average function indegrees are constant and function outputs are assigned randomly.study the effects of perturbation in the context of random BNs by knocking out one gene. Additionally, the attractor structure of BN p s (), inference of BN p s (), and their use as models for gene regulation, in particular, intervention in BN p s (), have been studied. Complexity reduction has been considered for other classes of models, including discrete network models such as BNs () or logical regulatory graphs (), and continuous biochemical networks (). All past efforts focus on reducing the complexity while preserving network dynamics, either by maintaining the attractor structures as in discrete mathematical frameworks () or partitioning large systems into smaller subsystems to enable better analysis and understanding for continuous network models as in,. In this article, we focus on BNs with perturbation owing to their role in modeling gene regulatory networks, a key point being that their dynamics can be modeled using Markov chains; thereby facilitating the development of control policies that can shift the network SSD toward desirable states. The main objective of our work is to design suboptimal stationary control policies and our proposed reduction mappings provide the means to this end. Although the literature mainly focuses on reduction of biochemical networks in a continuous simulation framework (), while our work models gene regulatory networks in a discrete mathematical framework, the idea of partitioning large systems into multiscale or hierarchical small subsystems could be an interesting future research direction on model reduction for BN-based gene regulatory networks if one can suitably abstract the relationships within subnetworks. As typically formulated, the control problem is characterized by a target gene whose expression is to be altered by the control policy and one or more control genes whose expressions are altered by intervention. For instance, in the well-studied control model for gene WNT5A in the case of metastatic melanoma, the upregulation of WNT5A is associated with increased metastatic competence, so that the goal of the control policy is to downregulate WNT5A (). The control gene in the WNT5A network is pirin. The control policy acts by observing the state of the network at each time point and, based on the state, decides whether to alter the value of the control gene. From our perspective here, were the network is too large to derive the optimal control policy, we would like to delete one or more genes from the network (neither the target nor the control gene) so that we could derive a policy on the reduced network that would induce a suboptimal policy on the original network. There are four basic steps in this procedure: (i) apply an algorithm to the network to select a gene for deletion; (ii) apply an algorithm to construct the gene logic for the reduced network; (iii) apply a control algorithm to the reduced network to derive a control policy on the reduced network; and (iv) induce a control policy on the original network based on the control policy derived for the reduced network. Step 1 can be amended by selecting more than one gene for deletion. The method proposed herein employs the coefficient of determination () to choose genes for deletion, adapts the collapsing heuristic of Ivanov and Dougherty (2004) to construct the wiring of the reduced network, designs a control policy on the reduced network using either the MFPT control policy () or the SSD control policy (), and finishes with a procedure to induce a control policy on the original network. The MFPT and SSD control policies have been chosen on account of their computational efficiency and generally satisfactory performance; however, other control policies could be applied on the reduced network. Performance of the CoD-based reduction procedure is evaluated by its effects on the SSD and on how well it approximates the stationary control designed on the full network. The main effect on the SSD that interests us is the shift of the probability mass toward the desirable states. This shift is computed as the absolute value of the difference between the SSDs of the network before and after applying the control policy. The algorithm is formulated for BNs () with perturbation; however, since a binary context-sensitive PBN () is a collection of BNs with perturbation endowed with a selection probability structure (and a general PBN is a collection of more finely quantized versions of BNs), the algorithm can be applied to a PBN by applying it to each constituent BN for the same gene, thereby reducing the PBN. As formulated in this article, the control problem involves a single control gene and a single target gene, but there is no restriction relative to either the number of control genes or target genes insofar as the reduction algorithm is concerned, so long as the control algorithm applied on the reduced network has no such restrictions. Neither the MFPT nor the SSD control algorithms have such restrictions.Page: 1558 15561563
N.Ghaffari et al.
SYSTEMS AND METHODS
BNsA BN with perturbation p, BN p = (V ,f), on n genes is defined by a set of nodes V ={x 1 ,...,x n } and a vector of Boolean functions f =[f 1 ,. The variable x i {0,1} represents the expression level of gene i, with 1 representing high and 0 representing low expression (). f represents the regulatory rules between genes. At every time step, the value of x i is predicted by the values of a set, W i , of genes at the previous time step, based on the regulatory function f i. W i ={x i 1 ,...,x i k i } is called the predictor set and the function f i is called the predictor function of x i. A state of the BN p is a vector s = (x 1 ,...,x n ) {0,1} n , and the state space of the BN p is the collection S of all states of the network. The perturbation parameter p  (0,1] models random gene mutations, i.e. at each time point there is a probability p of any gene changing its value uniformly randomly. The underlying model of a BN p is a finite Markov chain and its dynamics are completely described by its 2 n 2 n transition probability matrix,is the probability of the chain undergoing the transition from the state s i to the state s j. The perturbation probability p makes the chain ergodic and therefore it possesses a steady state probability distribution  defined by  T P =  T , where T denotes transpose.
CoDCoD measures how a set of random variables improves the prediction of a target variable, relative to the best prediction in the absence of any conditioning observation (). Let X = (X 1 ,X 2 ,...,X n ) be a vector of predictor binary random variables, Y a binary target variable and f a Boolean function such that f (X) predicts Y. The mean square error of f (X) as a predictor of Y is the expected squared difference, E[|f (X)Y | 2 ]. Let  opt (Y ,X) be the minimum MSE among all predictor functions f (X) for Y and  0 (Y ) be the error of the best estimate of Y without any predictors. The CoD is defined asLetting x 1 ,x 2 ,...,x 2 n denote the 2 n possible values for X, running from(0,0,...,0) to (1,1,...,1), the relevant quantities are given by(2)(). For more information and a numerical example, refer to Supplementary Material. The CoD determines the strength of the connection between a target gene and its predictors and has been used since the early days of DNA microarray analysis to characterize the nonlinear multivariate interaction between genes () and has more recently been used to characterize canalizing genes () and contextual genomic regulation (). We have restricted ourselves to the Boolean case; thereby arriving at the preceding representations of  opt (Y ,X) and  0 (Y ); however, the basic definition for CoD X (Y ) is not so restricted ().
MFPT control policyOptimal intervention is usually formulated as an optimal stochastic control problem (). We focus on intervention via a single control gene g, and stationary control policies  g : S {0,1} based on g. The values 0/1 are interpreted as off/on for the application of the control: 1 meaning that the current value of g is flipped, and 0 meaning that no control is applied. The MFPT policy is based on the comparison between the MFPTs of a state s and its flipped (with respect to g) statesstate states g (). When considering intervention, the state space S can be partitioned into desirable D and undesirable U states according to the expression values of a given target set W of genes. For simplicity, we assume W ={x}, the target gene x is the leftmost gene in the state's binary representations, i.e. x 1 = x, s = (x,x 2 ,...,x n ), and the desirable states correspond to the value x = 0. With these assumptions, the transition probability matrix P of the network can be written asUsing this representation, one can compute the MFPT required for a state s to reach the boundary between desirable and undesirable states. Computation of these average times is performed in the time scale used for the state transitions of the network. If one uses the states of the network to index the components of the vectors in the 2 n-dimensional Euclidean space R 2 n , then one can form the vectors K U and K D that contain the MFPTs needed for the states in D and U to reach the undesirable and the desirable states, respectively. For example, the coordinate K D (s) of K D gives the MFPT for the undesirable state s to reach the set D of desirable states. The two vectors K U and K D are of dimension 2 n1 , and, according to a well-known result from the theory of Markov chains (), are given as solutions to the following system of linear equations:where e denotes the vector of dimension 2 n1 with all of its coordinates equal to 1. For more details on the definitions and theorems behind MFPT equations, refer to the Supplementary Material. To understand the intuition behind the MFPT algorithm, it is important to notice that, because the control gene g is different from the target gene, every state s belongs to the same class of states, D or U, as its flipped statesstate states g. With this in mind, if a desirable state s reaches U on average faster tha s g , it is reasonable to apply control and start the next network transition from its flipped statesstate states g. Thus, the design of the stationary MFPT control policy is based on the differences. To avoid too frequent application of control, the MFPT algorithm uses a tuning parameter >0, and these differences are compared with the value of , which is related to the cost of applying control. For example,  is set to a larger value when the ratio of the cost of control to the cost of the undesirable states is higher, the intent being to apply the control less frequently ().
SSD control policyThe SSD policy () uses the analytic formulation of the steady state mass of a perturbed Markov chain given into quantify the shifted steady state mass after applying possible controls. A perturbation (change) in the logic defining a BN results in the original transition probability matrix P and SSD  being changed t P and and and, respectively. In, the fundamental matrix, Z, is used to representrepresent represent in terms of .denotes transpose and e is a column vector whose components are all unity (). For a rank-one perturbation, the perturbed Markov chain has the transition matrixPmatrix matrixP = P +ab T , where a,b are two arbitrary vectors satisfying b T e = 0, and ab T represents a rank-one perturbation to the original Markov chain P. In the special case where the transition mechanisms before and after perturbation differ only in one state, say state k,where  T = b T Z and e(k) is the elementary vector with a 1 in the k-th position and 0s elsewhere (). The results for these special cases can be extended to arbitrary types of perturbations so that it is possible to compute the SSDs of arbitrarily perturbed Markov chains in an iterative fashion ().
Page: 1559 15561563
CoD-based reduction algorithmTo define the SSD control policy, let statesstate states g be the flipped state (with respect to control gene g) corresponding to state s (as with the MFPT control policy). Let  U be the original steady state mass of the undesirable states and letlet let U (s) andand and U ( s g ) denote the steady state masses of the undesirable states resulting from altering the original transition probability matrix by forcing s t s g and forcingsforcing forcings g to s, respectively. The SSD policy is defined on pairs of states, s andsand ands g , in the following manner: if bothboth both U (s) andand and U ( s g ) are larger than  U , then control is applied to neither; otherwise, ifif if U (s)    U ( s g ), then control is applied to s, and ifif if U (s) >   U ( s g ), then control is applied t s g .
Selection policiesAssuming gene d is to be deleted from the network, a reduction mapping can be used to define the transition rules for states in the reduced network (). The critical issue is how to design the reduction mapping. For every two statessstates statess d and s that differ only in the value of d, consider the states to which they transition: s  w andsand ands d  v. Following deletion, d becomes a latent variable and, under the reduction mapping, the states s andsand ands d collapse to a stat s in the reduced network. The stat s is obtained from either s orsor ors d by removing their d-th coordinate. The design of a reduction mapping is equivalent to filling in the entries of the truth
ALGORITHMThe procedure we propose has three aspects. First, the original network must be reduced. This entails two steps: gene deletion and a reduction mapping to construct the regulatory structure for the remaining genes. Second a control policy must be designed on the reduced network. We will use either the MFPT or SSD algorithm to design the control policy. Lastly, a control policy for the original network must be induced from the control policy designed on the reduced network. We refer to the overall algorithm as CoD-Reduce.
DeletionThe algorithm selects the gene to delete based on two criteria. If there are genes isolated from the rest of the genes, then the algorithm randomly selects one of them as the candidate for deletion. A gene is called isolated if it does not predict any other genes and no other gene predicts it. Otherwise, the combination of three genes that has the smallest steady state CoD in determining the target gene is found and the gene chosen for deletion is the one with the weakest influence in terms of CoD value on the target gene from that triple of genes. We have based the CoD on triples of genes because, as Kauffman points out, the average connectivity of the model cannot be too high if its dynamics is not chaotic (), and threee-predictor connectivity is commonly assumed in BN and PBN modeling (). The procedure we have adopted ensures that the candidate gene for deletion from the network has small influence on the target gene if the model has reached its SSD. The deletion procedure is described in detail in Algorithm 1.Finding an optimal selection policy would require testing each one of the 2 2 n1 possible reduced networks, which is computationally infeasible for large networks. In the present article, a heuristically chosen selection policy is combined with an inducement procedure to design a control policy on the original network. The selection policy we use here is designed by considering the SSD of the network. The intuition behind this approach relies on two facts: first, attractors are an essential part of the network and therefore should be preserved during the reduction; second, states with larger steady state probabilities are more likely to be visited during the long-run transitions of the network. Based on these considerations, the selection policy proceeds as follows: for states s andsand ands d that only differ in the deleted gene d, the state transitions of the states possessing larger steady state probability mass will be kept as transitions for the reduced states, excluding the gene for deletion; however, if either s orsor ors d is an attractor and the other is not, then the attractor state is chosen to determine the function structure. Algorithm 2 represents the steps of reduction mapping. This selection policy has 1 for the states whose functions are kept as the result of reduction and 0 for the rest. If two states that differ only in their d coordinate, then only one of them can have a 1 in the corresponding selection policy.
Algorithm
InducementSuppose the original network has n genes, the reduced network has m < n genes based on nm deletionreduction applications, and, without loss of generality, suppose the last nm genes have been deleted. Then, for any state (x 1 ,x 2 ,in the reduced network, there are 2 nm states in the original network of the form (x 1 ,). If  red is the control policy designed on the reduced network, then the induced policy on the original network Page: 1560 15561563
N.Ghaffari et al.is defined byfor any z 1 ,...,z nm {0,1}.
DISCUSSIONWe have carried out several simulations to study the performance of the CoD-Reduce algorithm.
Randomly generated networksAn inherent difficulty in a simulation study on the performance of CoD-Reduce is how to choose the target and control genes. In practice, the target gene is chosen in such a way that its behavior is closely related to the phenotype of interest and the control gene can either be selected via biological knowledge or according to some criterion related to its ability to control the target gene. If it were not for the computational burden, one might simply choose all nontarget genes as control genes and see which one has the largest beneficial impact. One approach that has been taken to identify a good control gene in the case of both finite-and infinite-horizon dynamic programming-based control is to choose the gene whose influence is the greatest with respect to the target gene (). Here, we use the fact that the CoD provides a measure of gene interdependence and use it to choose the control gene. Specifically, we can compute for each non-target gene the CoD as a predictor of the target gene and choose the control gene to be the one with the largest CoD. It is important to recognize that a strong CoD for gene g 1 predicting gene g 2 does not imply that g 1 and g 2 are directly connected in the model or, if the model were inferred from expression data, that they are directly biochemically connected, nor does it mean that g 1 is the best control gene for g 2 based on the MFPT control policy or, for that matter, any other control policy. In random network simulations, we also have the issue of how to choose the target gene, since the randomly generated networks are of a purely computational nature. Since we are interested in networks in which the target gene is controllable, we need to choose a target gene for which there exists a non-target gene that can exercise control over it. A simple way to do that is to consider all gene-to-gene CoDs and pick the control and target genes to be the two genes possessing the largest gene-to-gene CoD, the former being the control gene and the latter being the target gene. While it is true that this choice provides greater controllability than would normally be expected in a real biological problem, it affords us the opportunity to get a good measure of the loss of controllability that results from CoD-Reduce, that is, from deletion, reduction and inducement. Given this protocol for choosing the controltarget pair, to study the performance of the CoD-Reduce algorithm, we have performed a simulation study on sets of 100 randomly generated Boolean networks with perturbation, with 7,8,9 and 10 genes. These have been generated using the algorithm developed in, subject to the constraint that for each network half of its attractors are among the desirable states. For each network of size n {7,8,9,10}, we have reduced the original network to n1,n2,...,4 genes and for each reduction designed either the MFPT or SSD control policy on the reduced network and induced a policy on the original network of size n. We have limited networks to 10 genes because we need to compute the control policy on each originally generated network in order to make the comparisons. However, in general CoD-Reduce is not restricted to any number of genes and can handle large networks, as long as the SSD is obtainable. In such large networks CoD-Reduce is used to make reductions by deleting genes until the point that it is feasible to compute the control policy of the reduced network. For each generated network of size 710 genes, we apply the MFPT and SSD algorithms directly to it and compute the amount of steady state mass shifted from undesirable to desirable states. Lettingdenote the probability vectors composed of steady state masses of the desirable states before and after control, respectively, the shift is defined byprovides a measure of the effectiveness of the overall algorithm deletion, reduction and inducementthe goal being to decrease the probability of being in undesirable states and increase the probability of being in desirable states in the long run. We also apply the induced policies arising from reductions to n1,n2,...,4 genes and compute the mass shifts.shows, for each n, the average shift of the SSD under the MFPT policy on the original network and the average shift for the induced policies arising from reductions to n1,n2,...,4 genes.gives analogous results using the SSD policy. The salient point regarding the 9-and 10-gene networks is that, after an initial drop off for a few-gene reduction, the shift tends to stabilize for further reduction and, in all cases, the induced policy achieves significant beneficial results. Note that the beneficial steady state shift when designing the control policy on the original network is, on average, slightly better for the SSD policy in comparison with the MFPT policy, and that this agrees with the findings in. On the other Page: 1561 15561563hand, the induced policy arising from the MFPT policy designed on the reduced network slightly outperforms the induced policy arising from the SSD policy designed on the reduced network.
CoD-based reduction algorithm
Gastrointestinal cancer network applicationTo test CoD-Reduce on a larger, real-world network, we have applied it to a 17-gene network designed from a gastrointestinal cancer dataset (). To infer the BN p , the microarray data were normalized, filtered and binarized using methods from Shmulevich and Zhang (2002). Network inference is based on a network-growing algorithm that requires an initialization with a seed gene, a variant of the algorithm proposed in. As the seed, we use OBSCN, one of two genes composing the best classifier in. The network is grown by adding genes that have strong connectivity to this gene, as measured by the CoD. The seed gene, OBSCN, is set as the target gene and the second gene added to the network, GREM2, is set as the control gene. Unless there is a biologically known relation between a target gene and a particular phenotype, as in the case of WNT5A and metastatic competence in melanoma, there is no standard way to select a target and control gene pair; however, it is reasonable to expect that the best 1-gene classifier, OBSCN, that discriminates between two types of cancer can also be a potential target for a possible therapeutic intervention. GERM2 has the strongest CoD connection to this gene and thus, could be viewed as a good candidate for a control gene. At each iterative step, the gene having the strongest connectivity, measured by the CoD, to one of the genes from the current network is added to the network. Then, the network is rewired taking into account that a new gene in the network can change the way genes influence each other. The 17-gene network includes the following genes: OBSCN, GREM2, HSD11B1, UCHL1, A_24_P920699, BNC1, FMO3, LOC441047, THC2123516, NLN, COL1A1, IBSP, C20orf 166, KUB3, TPM1, D90075 and BC042026. The CoD computations are based on the SSD of the current network. After generating the 17-gene network, CoD-Reduce is applied consecutively to reduce it to a 10-gene network. The final 10 genes that are remained in the network are: OBSCN, GREM2, Page: 1562 15561563
N.Ghaffari et al.
Fig. 2. The average shiftsof the SSD produced by applying the original SSD and the stationary-induced control policies, using different number of genes: (a) 7 genes, (b) 8 genes, (c) 9 genes and (d) 10 genes. The original SSD control policies were obtained before any reductions. The induced control policies were designed on the reduced networks after applying reduction several times and then inducing the control policy of the reduced networks back to the original network. Each one of the four sets of 100 BN p s was generated using randomly generated attractor sets; attractors are evenly distributed between desirable and undesirable states. HSD11B1, BNC1, LOC441047, NLN, C20orf 166, KUB3, D90075 and BC042026. At each reduction step, using an algorithm from, the network SSD, which is required for the CoD computations, is estimated by first running the network for a long time and using the KolmogorovSmirnov test to decide if the network has reached its steady state. After reducing the original network down to 10 genes, the MFPT control policy for the reduced network is determined and induced back on the original 17-gene network.shows the considerable shift in the SSD of the network, about 0.15 of the probability mass after applying the induced control policy, toward desirable states.
Concluding remarksThe overall performance of CoD-Reduce depends on the individual performance of its components: gene deletion, the reduction mapping and inducement, and how these components interact with each other and with the control policy designed on the reduced network. While the CoD does not measure regulation directly, one can be fairly confident that if the CoD for gene d predicting the target gene is small, then d is unlikely to have much to do
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from [16:54 12/5/2010 Bioinformatics-btq225.tex] Page: 1563 15561563 CoD-based reduction algorithm with controlling the target and therefore deletion of d from the network is unlikely to seriously impact a control policy for the target. It is impossible to say that our proposed selection policy is the best one available, but it is based on considerations closely tied to the long-run behavior of the network, whose control is our objective. Finally, the inducement procedure introduces some loss of optimality because, in effect, it identifies several states in the original network with a single state in the reduced network; nevertheless, it maintains the integrity of the control on the gene state vector for which it has been designed and this kind of criterion has a long history in system decompression in the absence of any further qualifying knowledge. Of course, the performance of CoD-Reduce depends on how these three components work in consort. The simulations for 10-gene and smaller networks indicate that CoD-Reduce provides significant beneficial steady state shift relative to the shift for the control policy designed on the original network. Perhaps more importantly, even though we cannot compare the shifts on the 17-gene gastrointestinal network produced by CoD-Reduce and the control policy designed on the original network (since we cannot obtain the latter), CoD-Reduce yields a substantial shift in the steady state mass, which is our pragmatic goal. Conflict of Interest: none declared.
