The LabelHash server and tools are designed for large-scale substructure comparison. The main use is to predict the function of unknown proteins. Given a set of (putative) functional residues, LabelHash finds all occurrences of matching substructures in the entire Protein Data Bank, along with a statistical significance estimate and known functional annotations for each match. The results can be downloaded for further analysis in any molecular viewer. For Chimera, there is a plugin to facilitate this process. Availability: The web site is free and open to all users with no login requirements at http://
INTRODUCTIONThe function of many proteins is still poorly understood. For proteins with low sequence identity to any other proteins, structural comparison can be used to identify distant homologs. Both the number and diversity of structures is rapidly increasing. This helps make the results of a structural approach to functional annotation more informative, but at the same time also computationally more challenging. The function of a protein can often be characterized by a structural motif : a representative substructure formed by functional residues. The function of an unknown protein can therefore be inferred from high similarity of a substructure in this protein to a motif with known function. A variety of methods have been proposed that compute matches to a motif in a collection of structures, some of which are also accessible through a web server or as downloadable program (). They differ significantly in one or more of the following aspects: representation of a motif, matching algorithm, statistical model and the set of targets a motif can be matched against. The underlying algorithm for the LabelHash web server makes it possible to match motifs against the entire Protein Databank with minimal restrictions and still obtain results within a matter of minutes. * To whom correspondence should be addressed.
METHODSThe LabelHash algorithm () consists of two stages: a preprocessing stage and a matching stage. During the preprocessing stage, the algorithm builds up lookup tables for n-tuples of residues that occur in a set of target structures. These n-tuples are indexed by their residue labels. For a given n-tuple of residues, we can instantly find all occurrences in all targets. The n-tuples are subject to mild geometric constraints that guarantee spatial coherence and proximity to the molecular surface. The preprocessing stage needs to be executed only once for a given set of target structures. During the matching stage, the algorithm first looks for partial matches of size n and incrementally expands these partial matches to complete matches in a depth-first fashion. The motif information required by LabelHash is very simple. Motifs consist of the C  positions of the functionally important (possibly non-sequential) residues, labeled with the admissible residue types. There is no need for importance ranking of motif residues. To determine the statistical significance of a match, we use a non-parametric model based on the LRMSD's of all matches that were found (). This model corrects for systematic algorithmic bias. We have shown that LabelHash can achieve extremely high specificity with high sensitivity on a benchmark set of motifs for 20 different Enzyme Commission classes (). On average, we obtained a sensitivity of 86% and a specificity of 99.94% at a P-value of 0.001 for these motifs. By default, the LabelHash algorithm returns only the best complete match for each target, but it can optionally also compute partial matches (of a given minimum size) and multiple matches per protein. With these features, the user can filter and postprocess the matches in variety of ways, e.g. by employing a different selection mechanism for the 'best' match per target.
THE LABELHASH WEB SERVER AND TOOLSThe LabelHash server provides an easy-to-use front-end to our implementation of the LabelHash algorithm. The server uses a LabelHash table that contains all the indexing information for the full Protein Data Bank (PDB). Each PDB entry often has more than one chain. Each chain is inserted as a separate target in the LabelHash table. This results in more than 180 000 target structures. The user can specify a motif by filling out a web form that asks for a PDB ID, a chain ID and a number of residue sequence numbers. For each residue, the user can specify allowed substitutions. It is also possible to upload an arbitrary PDB file and use that to define a motif. The motif can be matched against either the PDB, the non-redundant PDB (at different sequence identity levels), or a single target. Upon submission of the motif, a job will be submitted to a scheduler, and the user is presented with a URL of the page where the match results will appear, typically, after a few minutes. If a user filled out an email address on the main page, an email will be sent when the results are ready.The match results are made available in different formats so as to accommodate several different workflows. The main results page shows the top 20 matches rendered in alignment with the motif in individual images. For each match, the corresponding Enzyme Commission classification and Gene Ontology terms are shown, when they are available (). On a second results page, a more compact table view of the top 100 matches with known annotations is shown (). From both pages, the user can download individual PDB files of the aligned structures or an archive with PDB files of the top 100 aligned structures. This is intended for users who want to further analyze the results in any molecular viewer. Finally, the user can also download an XML file with all matches. This file can be viewed as plain text, but one can also open this file in Chimera, a molecular modeling program, using a plugin we developed called ViewMatch. This plugin allows the user to quickly scroll through the matches, see their annotations and filter them by different attributes. Although the LabelHash web server is very easy to use, it offers very little flexibility in how the matching is performed. For more advanced users we have created a set of command line tools that allow for more extensive experimentation. First, the user can create LabelHash tables for arbitrary sets of PDB files. Second, all the parameters to the algorithm can be set by the user. In particular, one can choose to enable partial matches or multiple matches per protein. The tools include a Python module. This, combined with a simple XML input/output format, facilitates pre-and postprocessing. The LabelHash algorithm enables applications that benefit from structural analysis and go beyond what was described in the introduction. For example, we were able to identify subtle patterns of substructural variation in large protein (super)families that correlate with, e.g. phylogenetic distance, conformational rearrangement upon binding or homology ().
The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
