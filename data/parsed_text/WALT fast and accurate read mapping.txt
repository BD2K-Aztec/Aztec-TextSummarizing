Whole-genome bisulfite sequencing (WGBS) has emerged as the gold-standard technique in genome-scale studies of DNA methylation. Mapping reads from WGBS requires unique considerations that make the process more time-consuming than in other sequencing applications. Typical WGBS data sets contain several hundred million reads, adding to this analysis challenge. We present the WALT tool for mapping WGBS reads. WALT uses a strategy of hashing periodic spaced seeds, which leads to significant speedup compared with the most efficient methods currently available. Although many existing WGBS mappers slow down with read length, WALT improves in speed. Importantly, these speed gains do not sacrifice accuracy.
IntroductionDNA methylation is essential for many biological processes and is found altered in a variety of human diseases (). Technological advances over the past decade have enabled wholegenome bisulfite sequencing (WGBS), which has become the goldstandard approach for studying cytosine (C) methylation due to its ability to quantify methylation levels unambiguously for nearly all Cs in mammalian genomes. Treatment with sodium bisulfite converts each unmethylated C into uracil, which is reported as thymine (T) in sequenced reads. The most computationally intensive step analysis of WGBS data is to map reads to the reference genome. The bisulfite conversion makes mapping more complicated, and each data set typically includes hundreds of millions of reads. In recent years, several mappers have been developed specifically for reads from bisulfite sequencing, which we refer to here as 'bisulfite reads'. These mappers use a variety of strategies. For example, Bismark () converts every C in the reads and the reference genome to T, then applies Bowtie () to map the converted reads to the converted reference genome. BSMAP () builds a pre-compiled hash table to minimize the cache-miss latency when searching possible genome positions for k-mers. BSMAP also applies a bitwise masking method to efficiently count the number of mismatches for asymmetric conversion of C!T. Existing tools are not fast enough to map a large WGBS data set in a day using a single processing core. The challenge in mapping bisulfite reads is derived from two related sources: accommodating the asymmetric conversion of C!T, and the reduced entropy of the alphabet (i.e. nearly 50% T). Here we present WALT, a new mapper for bisulfite reads. WALT is faster than existing methods, and has advantages in accuracy.
MethodsWALT employs periodic spaced seeds, originally described by, to filter candidate mapping positions for each read. Three spaced seeds (010) *, 0(010) * and 00(010) * are used to guarantee full sensitivity for two mismatches (Supplementary). The ones ('1') in the spaced seeds indicate positions that must match, while the zeros ('0') indicate positions that are not required to match. The star ('*') indicates repeating of the 010 pattern until V C The Author 2016. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com the spaced seed reaches the desired weight. Three seeds are generated for a given read, and each seed is obtained by concatenating all positions in the read corresponding to a '1' in the spaced seed. WALT converts all Cs in both the reads and the reference genome to Ts for mapping. When processing paired-end reads, or in the case of post-bisulfite adaptor ligation, some reads will be complementary to the original converted strand. For those A-rich reads, guanines (G) are converted to adenines (A). WALT builds four hash tables for converted reference genomes: C!T forward and reverse, G!A forward and reverse. For one hash table, the 3 k possible kmers over {A, G, T} or {A, C, T} are used as hash keys. Each hash bucket contains genome positions where the corresponding spaced seed can be found. The genome positions in each bucket are sorted by their spaced seed subsequences (Supplementary). When mapping a read, the first k nucleotides of each seed are used to locate hash buckets and binary search is applied for nucleotides after the first k. WALT validates each candidate position by aligning the whole read against the genome sequence to count the number of mismatches. For a given read, exact matching genomic positions are identified using the first seed, positions with one mismatch are covered by first two seeds, and using all three seeds guarantees full sensitivity for two mismatches (Supplementary).
ResultsWe assessed the performance of WALT in comparison with Bismark, BSMAP and other tools shown in Supplementary Material. All tests were run using identical Intel Xeon processors using a single core (details in Supplementary Material). We used three datasets: (1) SRR1532534, (2) SRR948855 () and (3) SRR2296821 () for this comparison, evaluating both speed and accuracy. All of them are paired-end data by Illumina HiSeq 2000. The read length, reference genome and number of reads in each dataset are shown in. For the two human datasets,shows a comparison of runtimes for WALT, Bismark and BSMAP. WALT is about 36 faster than Bismark and 7 faster than BSMAP in single-end mapping. For paired-end mapping, WALT is approximately 15 faster than Bismark and 7 faster than BSMAP. WALT does a look-up for three seeds when reads have more than one mismatch, but only one seed for exact matches, and two for one or two mismatches. Since In our experiments, on the average 61.8% and 11.1% of reads are matched with 0 and 1 mismatch, respectively, the average number of lookups per read is only 1.49 (Supplementary). The Arabidopsis thaliana genome is relatively small, leading to fewer candidates in each hash bucket. Even with this small genome, WALT nearly matches the speed of BSMAP and is still approximately 25 faster than Bismark.shows the runtime on reads with different lengths generated from SRR948855 (Supplementary). WALT runs faster on longer reads, while Bismark and BSMAP slow down significantly. WALT and BSMAP both are based on hash table method. The time required to validate each candidate mapping location is proportional to the read length. However, WALT uses heavier seeds for longer reads and gets less false positive candidates, while BSMAP uses fixed seed length. Bismark uses Bowtie to map the reads, which essentially conducts an inexact search in a compressed suffix array, which is also more costly for longer reads. Mapping accuracy is essential in WGBS as incorrect mapping may lead to bias in estimates of methylation levels and other epigenomic features in downstream analyses. Ambiguously mapping readsthose for which the best matching genome position is not uniqueare excluded from most analyses as their interpretation requires project-specific considerations. We used the program mrsFAST (), with C!T converted reads and reference genome, to obtain all possible mapping positions for all reads; mrsFAST is designed to produce all mappings. This provided a ground truth in measuring mapping accuracy. For a uniquely mappable read (as determined by mrsFAST), if the bisulfite mapper reports it as uniquely mapping, then it counts as true positive (TP),
Bioinformatics, 2016, 13 doi: 10.1093/bioinformatics/btw490 Advance Access Publication Date: 27 July 2016 Applications Note Bioinformatics Advance Access published August 14, 2016 at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from otherwise false negative (FN). For a read found to be ambiguously mapped or unmapped, if the bisulfite mapper reports it as such it counts as TN, otherwise FP. We then compute precision and recall for each mapper: Recall  TP=TP  FN and Precision  TP=TP  FP: WALT had the best precision while BSMAP had the best recall on all datasets (Table 3). Bismark had the lowest recall and precision. BSMAP reported 27 and 293% more incorrect uniquely mapped reads than WALT in single-and paired-end mapping, respectively.
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
