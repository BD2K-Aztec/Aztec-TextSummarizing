From conformational studies to atomistic descriptions of enzymatic reactions, potential and free energy landscapes can be used to describe biomolecular systems in detail. However, extracting the relevant data of complex 3D energy surfaces can sometimes be laborious. In this article , we present MEPSA (Minimum Energy Path Surface Analysis), a cross-platform user friendly tool for the analysis of energy landscapes from a transition state theory perspective. Some of its most relevant features are: identification of all the barriers and minima of the landscape at once, description of maxima edge profiles, detection of the lowest energy path connecting two minima and generation of transition state theory diagrams along these paths. In addition to a built-in plotting system, MEPSA can save most of the generated data into easily parseable text files, allowing more versatile uses of MEPSA's output such as the generation of molecular dynamics restraints from a calculated path.
IntroductionThe development of efficient conformational space sampling methodologies, coupled with a dramatic increase in the computational capacities and capabilities, has made the calculation of energy landscapes significantly more accessible (). A 3D energy surface may provide a lot of detailed information about biomolecular processes such as protein or nucleotide folding (), ligand binding () or enzymatic reactions (); but the extraction and analysis of such data are often cumbersome tasks. MEPSA (Minimum Energy Path Surface Analysis) provides a GUI-based tool to analyse these landscapes from a transition state theory point of view, making the analysis of 3D energy landscapes agile.
MEPSA softwareMEPSA is an open-source program written in Python (compatible with both Python 2.7.x and 3.4.x) that describes the connectivity of the minima (called nodes in MEPSA) present in a given energy landscape (called map in MEPSA). The graphic interface is built with TKinter (), plots are drawn using Matplotlib () and NumPy (Van der) is employed for the calculations.MEPSA supports three column formatted plain text files as input and can save most of the generated data in column formatted plain text files as well. There is no restriction related to technique with which the map has been generated, apart from being rectangular and uniformly distributed (e.g. calculation of the minimum elevation path connecting Geneva and Turin is included in Supplementary Material). In addition, any plot obtained (e.g.) can be directly saved in many different image formats (png, eps, pdf. .. ). The GUI structure consists of one main window to load, unload and plot maps and two secondary windows to manage specific tasks. The 'connectivity analyses' window gives access to the 'global connectivity analysis', 'path generator' and 'well sampling analysis' tools; and the 'map editor' window gives access to the 'modify map', 'smooth map' and 'invert map' functionalities. 'Global connectivity analysis' simultaneously samples the whole map, starting from every node and iteratively occupying the lowest energy points available. The node where each particular propagation comes from is kept in memory in order to assign a domain to each node. As the lowest energy points in the borders between domains are necessarily the barriers connecting the nodes, all the minima and barriers of the map are identified at once (). 'Path generator' detects the lowest energy path connecting two points (named origin and target). The resulting trajectory only depends on the points selected and not on the path direction. MEPSA offers two sampling modes: 'global' and 'node by node'. 'Global' mode uses an approach similar to Dijkstra's algorithm (), with small differences in the sampling and the trace back. The algorithm samples the map from the origin point, propagating to the lowest energy points available on each iteration, until the target point is reached. The iteration in which each node has been occupied is stored in memory and, after the target node is reached, a trace-back is performed from the target, iteratively selecting the points with lowest iteration counters. 'Node by node' mode uses a 'global' mode sampling to define the order in which the nodes are visited, then performing a series of runs connecting all the consecutive nodes in a pairwise fashion. This way the path is forced to pass through every node whose domain is crossed by the shortest lowest energy path. The paths generated with the 'path generator' can be stored in memory using the 'path stack', enabling the comparison of several paths at once (and C), even if those were generated using different maps. 'Well sampling analysis' determines the area of the map that has to be sampled from the origin node to reach the closest barrier to the target node and vice versa (). The data obtained can be plotted in several ways, the path trajectories can be smoothed and most of the data generated (even the 'path stack' as a whole) can be stored into text files to be plotted or analysed with other software (e.g. parsing path files in order to generate molecular dynamics restraints, see Supplementary Material). In the 'map editor window', 'modify map' performs simple modifications of the energy values in a defined region of the map, which can be useful, e.g. to block favourable paths in order to evaluate alternative ones (and C); 'smooth map' applies a simple running average smoothing to the map, allowing the user to remove unwanted local minima in noisy maps; and 'invert map' changes the sign of the energy values, enabling the characterization of maxima edge profiles (see Supplementary Material).
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
