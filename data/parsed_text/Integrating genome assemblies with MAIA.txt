Motivation: De novo assembly of a eukaryotic genome with next-generation sequencing data is still a challenging task. Over the past few years several assemblers have been developed, often suitable for one specific type of sequencing data. The number of known genomes is expanding rapidly, therefore it becomes possible to use multiple reference genomes for assembly projects. We introduce an assembly integrator that makes use of all available data, i.e. multiple de novo assemblies and mappings against multiple related genomes, by optimizing a weighted combination of criteria.
INTRODUCTIONNext-generation sequencing (NGS) platforms, such as 454 (Roche, Branford, CT), Solid (AB, Foster City, CA) and Solexa (Illumina, San Diego, CA) allow for gigabytes of data generation at an affordable cost. The third generation sequencing platforms (Helicos, Cambridge, MA; Pacific Biosciences, Menlo Park, CA) may even let the cost per megabase drop under $1 per megabase (). Considering the relatively low cost of these platforms, compared with classical Sanger sequencing, it becomes possible to use them for de novo sequencing projects. However, the millions of short DNA sequences generated by NGS platforms, called reads, are still relatively small. Given this limited read length and the many repetitive regions in a eukaryotic genome, de novo assembly is still a challenging task. To alleviate this problem it is essential to design algorithms that make full use of all available data. Over the past few years, several assemblers have been developed for NGS data. Assemblers pull millions of reads together into larger contiguous sequences, called contigs. A typical assembly of a eukaryotic genome is a set with thousands of contigs. These contigs are unordered as well as unoriented, i.e. it is unknown whether they come from the forward or reverse strand. The process to determine orientation and relative ordering of contigs is called scaffolding. * To whom correspondence should be addressed.Some assemblers have built-in scaffolders; otherwise, an external scaffolder can be used, such as Bambus (). An alternative to de novo assembly is mapping the reads against a finished or draft genome from a close relative (a template). From such a mapping a consensus can be called, generating a comparative assembly (). As the number of known genomes is growing rapidly, in the future, it will be more often the case that multiple close relative genomes are available to create such assemblies. However, mapping against a closely related genome will only yield those parts that are identical in target and template genome. To get the unique components in the target genome, a de novo assembly will always be required. Assemblers are often specialized for a specific type of reads. De Bruijn graph-based assemblers, such as Velvet (), Abyss () and ALLPATHS () are most suitable for short reads (Solid; Solexa), whereas overlap-layout-consensus algorithms, such as Newbler (Roche) and CABOG (), are more suitable for the longer 454 sequences. It is not trivial to deal efficiently with different read types simultaneously or to combine outputs of different assemblers. Hybrid strategies (using two types of sequencing data) mostly work by altering the output of a first assembler to make it suitable for application on a second.generated contigs with VCAKE () using Solexa data, which were subsequently used as input to the Newbler assembler together with 454 data.simulated Sanger reads from a set of contigs assembled by Newbler with 454 data. These reads were subsequently used as input to the Celera assembler combined with true Sanger reads. We are aware of only one de novo assembler designed to integrate Sanger and NGS data, called Forge (). However, Forge does not allow for integration of comparative assemblies. Other hybrid strategies () combine assemblies using Minimus (). Minimus is restricted to only two assemblies, so to combine three or more assemblies it has to be applied iteratively. Minimus also does not allow for weighted combinations of contigs. In this article, we describe MAIA (Multiple Assembly IntegrAtor), a graph-based algorithm for integration of several de novo and comparative assemblies. Assembly integration is related to both de novo assembly and scaffolding, but differs in its input. An assembler deals with short sequences (reads) and high genome coverage to account for read errors and repeats in the genome. A scaffolder tries to determine the relative ordering and orientation of large sequences (contigs) of a single de novo assembly, assuming the target genome is covered once. An integrator is a hybrid ofAn overlap graph is constructed, in which nodes represent contigs and edges represent overlaps. A forward and a reverse edge is added between the pairs of nodes, but these are indicated by an undirected edge for simplicity. A start node and an end node is determined using a reference genome. Edges are assigned weights based on several properties of the alignments and contigs, combined using weighted Z-scores. (D) An orientation is assigned to the contigs by traversing the graph depth-first in order of weight (indicated by the numbers). Edge 9 [dashed box in (B)] assigns reverse orientation to the blue node, while a forward orientation has already been assigned via edge 1, therefore it is recognized as conflicting and it is removed. (E) Oriented contigs and end-to-end overlaps form a directed graph. (F) The highest scoring path is found using a Tabu search procedure, which leads to the assembly of a chromosome. these, dealing both with contigs and manifold genome coverage, allowing a number of assemblies to be considered simultaneously. MAIA is not restricted in the number of assemblies and uses the full contigs produced, not requiring these to be broken into reads or k-mers of any type. Pairwise alignments of contigs are calculated to generate an overlap graph. In this graph nodes represent contigs and edges represent alignments. These edges are weighted with several properties of the contigs and alignments, which are combined using weighted Z-scores. Assemblies are integrated at chromosome level by finding the combination of contigs which yields the highest score. This is achieved by optimizing a path in the overlap graph between the contigs that align closest to the 5 and 3 ends of a reference genome. The assembled chromosome directly follows from this path. The MAIA approach has two main advantages. First, multiple known related genomes can be used simultaneously in the assembly process. Second, different NGS sources can be assembled with specific de novo assemblers, to be integrated afterwards with MAIA. As a demonstration of the algorithm, MAIA is applied to the Saccharomyces cerevisiae strain CEN.PK 113-7D, a strain widely used for systems biology research and metabolic engineering (). Its genome is assembled using Solexa reads, 454 reads and three genomes of previously sequenced, closely related S.cerevisiae strains. The method is compared with two other hybrid approaches, using Minimus and Velvet.
METHODSMAIA is an assembly integrator using the overlap-layout-consensus paradigm, known from genome assembly algorithms, to combine several assemblies into a single integrated assembly. The algorithm takes as input sets of contigs, each set originating from either a de novo or a comparative assembly, i.e. from mapping against a related genome (). Overlap between contigs is detected by pairwise aligning the contigs in an allvs-all fashion among the sets (). An undirected overlap graph is then constructed, with nodes representing contigs and edges representing overlaps. Using a reference genome, i.e. the evolutionary closest of the related genomes available that is of high quality, a 5 start and 3 end node is determined to guide the integration (). The edges are weighted, reflecting the likelihood that the alignment represents an actual overlap in the genome (). The graph is then directed by assigning orientation to the contigs, i.e. forward or reverse (). Assembly integration is finally achieved by finding a highest scoring path between the start and end nodes in the overlap graph and calling the consensus (). These steps are described in detail below.
Constructing an overlap graph from pairwise alignments of contigsA graph G = (V ,E) is created in which V ={v 1 ,v 2 ,...,v n } is the set of nodes and E ={{v i ,v j }|v i ,v j  V } is the set of edges. Each contig c  C is assigned to a node. Overlapping regions in contigs are detected by pairwise aligning all contig pairs in different sets. For every aligned pair of contigs, two filters are applied. First, only the longest mutually consistent set of alignments is selected. Second, if there still is more than one match between two contigs, only the longest is retained. For these steps we used Nucmer and Delta-filter, both part of the Mummer package (), although other tools could be used. The resulting alignments a  A are used to generate the edges in G. Contigs v i and v j that overlap end-to-end with a minimum alignment length l A,min and maximum length l O,max of nonaligned overhang (), i.e. the part of the contig that will be clipped when merging the two, are then joined by a forward and a reverse edge,Page: i435 i433i439, the contig length l C and the length of the non-aligned overhang l O are three of the four properties used for edge weighting, the fourth is an assembly quality score.
i434
Integrating genome assemblies with MAIA
Weighting the edges in the overlap graphA score Z(e) is assigned to each edge e  E to reflect the quality of the alignment and the quality of the contig to which the edge leads. Edge weights differ between forward and reverse edges. For three properties of contigs and alignments (), a P-value is calculated. Null distributions for these properties are inferred using all contigs and possible contig pairs. These distributions reflect the probability that the property occurs by chance in a pair of contigs, which do not overlap in the target genome. The P-values are transformed into Z-scores using the inverse of the cumulative density function N 1 , and combined into LiptakStouffer's weighted Z-score, where the weights w i are user-specified per property ():For each edge e  E the following four properties (illustrated in) are calculated:(1) The length of the contig; longer contigs are preferred over smaller contigs. A P-value for a particular contig c is estimated as p(, where l C c is the length of the contig c to which edge e points and |C| is the total number of contigs.(2) The length of the alignment; longer overlap between contigs is preferred. For the calculation of the P-value, only the number of correctly aligned nucleotides l A * = l A f A are considered, where l A is the full length of the alignment and f A is the fraction of aligned nucleotides that are identical. The P-value for a particular alignmentis the total number of possible contig pairs, x is the assembly number and n is the total number of assemblies.(3) The percentage of non-aligned overhang; the length of the non-aligned overhang l O should ideally be zero. For a particular alignment a a P-value is calculated as p(is the fraction of non-aligned overhang and l O a is the number of nucleotides that have to be clipped if the two contigs would be merged. We consider the number of nucleotides overhang relative to the contig length to avoid connecting small contigs with large overhangs. Finally, a manually assigned score Z 4 is added for the quality of the assembly, which can differ per assembly source. This score attribute is used to have MAIA prefer high-quality assemblies.
Directing the overlap graphAll contig alignments are end-to-end and can be represented as directed edges in the overlap graph. The direction of each edge depends on the orientation of the contigs it connects. If the upstream end of node v i aligns to the downstream end of node v j , the edge in the graph would be e = (v i ,v j ). Since the orientation of the contigs is unknown, taking the reverse complement of the two contigs flips the edge to e = (v j ,v i ). These two edges represent the forward and reverse strands of the DNA. Since only one strand needs to be assembled, the orientation of the contigs is fixed. Assigning an orientation to the contigs can cause problems, by introducing cycles in the graph that disagree on orientation. These cycles are caused by alignments of contigs that are not actually overlapping in the genome. Edges causing these conflicts have to be removed. An optimal solution would be to assign an orientation to the contigs which minimizes the number of conflicting edges. Since this problem is non-deterministic polynomial-time hard (NP-hard), a greedy approach is used, similar to the contig orientation method in Bambus (). This approach starts by fixing the orientation of the start node to forward. Next, the graph is traversed depthfirst in order of descending weights. For every node an orientation is assigned based on the alignment and orientation of the previously visited node. The contig orientation is illustrated by the example in, in which arrows represents contigs and dashes their alignments. Node v 1 is the start node and has a fixed forward orientation. The graph is traversed to v 2. Since the reverse complement of v 2 aligns to v 1 (opposing arrows), a reverse orientation is assigned to v 2. Subsequently, using the same reasoning, a forward and reverse orientation will be assigned to v 3 and v 4 , respectively. If v 4 had already been visited and was assigned a forward orientation, the edge between v 3 and v 4 conflicts with the previously assigned orientation and will be removed from the graph. After all nodes have been oriented it is known for each end of a contig whether it is the up-or downstream end. The endto-end alignments can now be used to direct the graph, e.g. as node v 2 aligns to the downstream end of node v 1 , the directed edge will be e = (v 1 ,v 2 ).
Finding the highest scoring path
..v k connected by edges e 1 e 2 ...e kin the overlap graph, visiting no node more than once (). A start node v 0 and end node v k are determined to avoid having to evaluate paths between all possible node pairs in the graph. These nodes are set to be those contigs that originate from the 5 and 3 ends of comparative assembly against the reference genome (). The combination of contigs connecting v 0 and v k is optimized by maximizing the sum of the edge scores S(). This optimization can be shown to be NPcomplete by taking an instance of G with only positively weighted edges, thereby reducing the maximization to a search for a Hamiltonian path, which is known to be NP-complete. This makes finding the global optimum computationally expensive; therefore, we search for the highest scoring path using a Tabu procedure (). The Tabu search starts by finding an initial solution for P by performing a Dijkstra shortest path search on the graph with inverted edge weightsZ weights weightsZ(e). These inverted weights are calculated for each edge e asZas asZ+1. The Tabu search proceeds by systematically applying the change to the path that yields the most improvement in terms of S(P). All pairs of adjacent edges in P are considered for modification (2-opt). Four modifications are possible to a set of two edges.shows an example for a set of three nodesThe possible modifications are: (i) v j is bypassed by directly connecting v i and v k with edge (v j ,v k ); (ii) v i and v k are connected via a fourth node v l ; (iii) v i or v j are connected via v l ; and (iv) v i and v j are connected via v l. After the change has been applied, the inverse of the change (the 'undo') is stored in the Tabu list. Changes in the Tabu list are not allowed to be applied to avoid entrapment in cycles of repeated identical changes. After a certain number of cycles (here, 3) the change is removed from the Tabu list. The algorithm proceeds until for a certain number of changes (15) no improvement is seen compared with the best path found so far. As the initial solution is often close to the final one, convergence is often fast. In practice, the algorithm is limited by memory size (to hold the overlap graph) rather than computational complexity.
Connecting unconnected subgraphsIf no path exists between start and end node, contigs from one or more assemblies are aligned to the reference. If a region of the reference genomeis not covered by an aligned contig, a pseudo nodevnode nodev is created, containing the DNA sequence of this non-covered region (). Edges with a low score (i.e. a penalty) are inserted betwee v and the pair of nodes that align on both sides ofvof ofv. The number of pseudo nodes in the graph is kept minimal by gradually increasing the allowed pseudo node size until a path between start and end node is found.
i435
Post-processing of the pathThe start and end node determined using the reference genome are not necessarily the ends of the target chromosome. Therefore, the path P is greedily extended toward the 5 and 3 extremes of the target genome. P is iteratively extended from the current last node to the node connected with the highest edge weight, provided that it has a specified minimum alignment length l A,min and minimum percentage alignment identity f A,min. The maximum size of a pseudo node is set to l C,maxc max maxc . P is split at pseudo nodes exceeding l C,maxc max maxc and backtracked to the nearest branchpoint on both sides of the pseudo node. From there on the paths are greedily extended until no extension is possible, similar to the end extension described above, resulting in multiple contigs per chromosome.gives an example of splitting P at a large pseudo node.
Calling the consensusFinally, the integrated contigs follow from the path found by the Tabu search. The contigs and their associated pairwise alignments are transformed into an alignment matrix with one row for every source assembly. The consensus is called by taking for each column the base or gap (arising from the nucmer gapped alignment) of the highest quality assembly present in that column. In the resulting consensus, gaps are removed and the bases are tagged with the assembly from which they originate. This information can be used in further analyses of the assembly.
Assembly validationTo assess the quality of both the individual assemblies and the MAIA integrated assembly, the paired-end Solexa reads were mapped onto the assemblies using the Burrows-Wheeler Alignment tool BWA (). Two statistics were extracted from the mappings using Samtools (). First, to assess the completeness of an assembly, the percentage of reads that mapped on the assembly was calculated. Second, to assess the accuracy of an assembly, the percentage supporting read pairs was calculated. This is calculated as the percentage of the total number of mapped pairs that map at a proper distance from each other on a contig. The insert size distribution N() and the maximum allowed insert size ( 6) were estimated by BWA.
Experimental setupDNA of the S.cerevisiae lab strain CEN.PK 113-7D (MATa MAL2-8c SUC2) was prepared (). A library of 200 bp fragments was created and sequenced paired-end using the Illumina Solexa system, generating  56 million paired reads. A second library with mate-pair reads with an insert size of 8 kb was prepared sequenced on the Roche 454 Titanium. Both libraries were prepared according to manufacturer recommendations (Illumina and Roche). The pairing rate for the 454 mate pair library was 19%, yielding 149 900 paired reads. De novo unscaffolded assemblies were performed with Abyss () and the Celera assembler () on the Solexa and 454 reads, respectively. Abyss was tested for all combinations of k-mer size {23,...,33} and coverage cut-off {0,...,12}; the combination yielding the best N50 was chosen. The Celera assembler was used with standard settings as described in Lee (2007). Comparative assemblies were made by mapping the Solexa reads to the (draft) genomes of the S.cerevisiae strains S288c, YJM789 and RM11-1A using MAQ (). These genomes are 99.3, 98.4 and 98.0% identical to CEN.PK, calculated by dividing the number of identical bases by the length of the genome. The consensus sequences were split into contigs at every occurrence of an 'N'. Contigs <200 bp have been discarded. Integration of the assemblies with MAIA has been performed per chromosome. From the S288c comparative assembly, only contigs originating from the chromosome being assembled were used. A minimum alignment length l A,min of 20 nt is used for finding pairwise alignments. MAIA finds all contigs that align end-to-end. The maximum allowed nonaligned overhang l O,max was set to 10 nt. Scores for the assembly qualities were set to Z = 3,2.5,2,1,0.5 for the Abyss, Celera, S288c, YJM789 and RM11-1A assembly, respectively, reflecting our beliefs concerning the relative quality of the assemblies. De novo assemblies received the highest Z-scores, since these may contain structural variants unique to the target genome. The weights in the combined Z-score for the contig length, alignment length, non-aligned overlap and assembly quality were rather arbitrarily set to be 0.35, 0.25, 0.15 and 0.25, respectively, corresponding to the relative importance of the forms of evidence for merging contigs. Pseudo nodes are iteratively added with increasing sizes until a path from start to end node is found. Only contigs from the S288c assembly were used to create pseudo nodes. The edge weight of a pseudo node is set to 10 and maximum pseudo node size l C,maxc max maxc was set to 250. Two other hybrid methods were applied as a comparison. First, a de novo assembly with Velvet was performed on a combination of the Solexa reads and 454 data-based contigs pre-assembled by the Celera assembler. The parameters (k-mer size and coverage cut-off) were optimized w.r.t. the N50. The paired-end information of the Solexa reads was then used for scaffolding.Page: i437 i433i439Second, an assembly integration with Minimus was performed by merging two assemblies and iteratively applying Minimus to the merged result and a next assembly, whereby the singletons were discarded in every step. The order of combination was: S288c + Abyss, + Celera, + YJM789, + RM11-1A.
i436
Integrating genome assemblies with MAIA
RESULTS AND DISCUSSION
Individual assemblies are fragmented and vary in error ratesTwo de novo and three comparative assemblies have been made for CEN.PK. The results for the individual assemblies are shown in. Despite the high genome coverage ( 160X for the Solexa and  20X for the 454 data), the Abyss and Celera de novo assemblers generated fragmented assemblies, with an N50 of 20.3 and 2.7 kb, respectively. The N50 is the smallest possible contig length, such that the sum of lengths of all contigs c  C with l C c  N50 is at least 50% of the total assembly size. The level of fragmentation of the comparative assemblies depends on evolutionary closeness and quality of the genome. The comparative assembly using S288c as template yields the best individual assembly, covering 12.06 million nucleotides with only 375 contigs. The available S288c genome is of high quality and evolutionary closer to CEN.PK than the other strains (). Most reads could be mapped to the S288c comparative assembly, which is therefore the most complete; only 3.1% of the reads could not be mapped. The least number of reads mapped to the Celera and Velvet hybrid assemblies. Running Velvet to assemble only Solexa reads (results not shown) allowed 10% more reads to be mapped. That the use of more 454 reads lowers the percentage of mapped Solexa reads, hints at 454 data quality problems.
MAIA drastically lowers the number of contigsThe number of contigs >200 bp in the individual source assemblies range from 375 to 1,223. MAIA reduces this to 29. Most chromosomes have been assembled in a single contig, except for chromosomes 1, 3, 8, 10, 12 and the mitochondrial DNA, which consist of 5, 4, 3, 2, 2 and 2 contigs, respectively. These chromosomes are known to be relatively divergent among
S.cerevisiaestrains.showed deleted regions in every one of these chomosomes using a whole-genome tiling array. The most apparent of these deletions is the 10 kb deleted region at the extreme of the left arm of chromosome 1, which is also seen in the MAIA assembly (). The splits in the chromosomes assembled by MAIA are generally observed near their ends, which are known to be divergent regions in yeast (). Divergent regions can benefit less from comparative assemblies and therefore MAIA cannot fully close the genome. The final integrated CEN.PK genome is compiled of five source assemblies; two de novo and three comparative assemblies. Four additional MAIA runs were performed where in each step one of the assemblies was incrementally added to its input, starting with only the S288c comparative assembly.shows that each individual input assembly positively contributes to the final result.andshow the assemblies and their use for integration. The usage differs from only 0.8% for the comparative assembly with RM11-1A as template to 80% with S288c as template. The S288c genome is fully finished and of high quality. S288c and CEN.PK are both laboratory strains, known to be evolutionary close (); therefore mapping yields large contigs. Both contig quality and contig length are reflected in the Z-scores i437Page: i438 i433i439on the edges in the overlap graph. Therefore, MAIA has a preference for the S288c contigs and often selects them for integration. On the contrary, the RM11-1A genome is a draft genome composed of a set of supercontigs. RM11-1A is a phylogenetically more distant wine strain and therefore contributed to a much lower extend in the final assembly. The MAIA assembly contains 0.04% sequences from 102 pseudo nodes, which are 4340 nt in stretches individually not >250 bp. These sequences do no originate from read data, but from the reference genome. As an illustration the overlap graph of chromosome 9 is shown in. All five input assemblies are used to construct chromosome 9 of CEN.PK. The contigs of the YJM789 comparative assembly have been grouped by the chromosome from which they originate and are divided among three levels in the layout, indicated by the arrows in. Contigs originating from YJM789's chromosomes 14 and 15 appear in this graph because of repeat sequences that are present in both these chromosomes and CEN.PK's chromosome 9. Although these repeat-induced connections are present, the Tabu search does not include them in the path. Only the contigs originating from YJM789's chromosome 9 are incorporated in the MAIA integrated chromosome 9 of CEN.PK.
J.Nijkamp et al.
0
MAIA integrates assemblies at low error rateThe quality of both the integrated and single assemblies has been assessed using the percentage of mapped pairs that map at a proper distance from each other (). These supporting pairs reflect the accuracy of the assembly algorithms. In both the MAIA and the Minimus assemblies, 99.3% of the mapped pairs can be mapped at their proper distance, showing that these assemblies are of the highest quality in the list. However, only 92.1% of the reads mapped on the Minimus assembly. The S288c comparative assembly is 50 kb longer than the MAIA assembly. This is also reflected in the percentage of reads that map to the assemblies; 96.9% of the reads map to the S288c comparative assembly compared with 96.5% to the MAIA assembly ().The length difference can be partially attributed to the relaxed comparative assembly settings that were used for Maq; no minimum read depth and mapping quality was used. Analysis of the reads mapped by BWA on both the MAIA integrated assembly and the S288c comparative assembly showed that a far larger part of the latter is covered by only few reads (). In particular, 15 kb of the nucleotides were covered by five reads or less, whereas for the MAIA assembly this was the case for only 3 kb.
Other hybrid strategies are less completeThe Minimus assembly contains >12 million base pairs, but only 92.1% of the reads mapped to it. This indicates the iterative approach taken with Minimus results in overlapping information within the integrated assembly. The hybrid de novo assembly generated with Velvet is less complete than the MAIA assembly; only 75.5% of the reads can be mapped to it.
CONCLUSIONSWe developed MAIA, an integrator for assembly information. Our work extends previously developed algorithms for de novo and comparative assembly, enabling integration of multiple assemblies at once. MAIA makes it possible to use specific assemblers for different NGS data sources, to use multiple reference genomes for comparative assemblies or to combine outputs of different runs of an assembler. The number of known genomes is currently increasing rapidly. In the future it will be more common that multiple closely related genomes are available, as is the case already for S.cerevisiae. These genomes can be leveraged by using MAIA in combination with a comparative assembler. MAIA improves genome assemblies by making use of all available information. The algorithm integrates single assemblies from different sources into longer contigs, up to chromosomal length as shown in the S.cerevisiae assembly integration. Five single assemblies were integrated into 29 contigs covering 12.01 Mb. In the MAIA integrated assembly, 99.3% of the mapped read pairs mapped at a correct distance from each other. This percentage is higher than for each of the single assemblies, indicating that the integrated assembly is of higher quality than the single assemblies. The edge weighting system in MAIA can be extended. Integration is achieved by building an overlap graph from pairwise aligned contigs and subsequently finding the highest scoring path. Edges in this graph are weighted by properties of the involved contigs and alignments. Currently, four properties for the edge weighting i438
Integrating genome assemblies with MAIAare implemented. These can be extended by calculating P-values for additional properties such as alignment-overspanning mate pair data, distances of contigs on the related genomes, or physical or genetic map information.
at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
i439 at :: on August 31, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
