Motivation: De novo transcriptome assemblies of RNA-Seq data are important for genomics applications of unsequenced organisms. Owing to the complexity and often incomplete representation of transcripts in sequencing libraries, the assembly of high-quality transcrip-tomes can be challenging. However, with the rapidly growing number of sequenced genomes, it is now feasible to improve RNA-Seq assemblies by guiding them with genomic sequences. Results: This study introduces BRANCH, an algorithm designed for improving de novo transcriptome assemblies by using genomic information that can be partial or complete genome sequences from the same or a related organism. Its input includes assembled RNA reads (transfrags), genomic sequences (e.g. contigs) and the RNA reads themselves. It uses a customized version of BLAT to align the trans-frags and RNA reads to the genomic sequences. After identifying exons from the alignments, it defines a directed acyclic graph and maps the transfrags to paths on the graph. It then joins and extends the transfrags by applying an algorithm that solves a combinatorial optimization problem, called the Minimum weight Minimum Path Cover with given Paths. In performance tests on real data from Caenorhabditis elegans and Saccharomyces cerevisiae, assisted by genomic contigs from the same species, BRANCH improved the sensitivity and precision of transfrags generated by Velvet/Oases or Trinity by 5.1–56.7% and 0.3–10.5%, respectively. These improvements added 3.8–74.1% complete transcripts and 8.3–3.8% proteins to the initial assembly. Similar improvements were achieved when guiding the BRANCH processing of a transcriptome assembly from a more complex organism (mouse) with genomic sequences from a related species (rat).
INTRODUCTIONRecent advances in next generation sequencing (NGS) technologies have transformed de novo sequencing of genomes and transcriptomes into routine tasks that are not only feasible for large sequencing centers anymore but also for individual research groups (). The main factors driving this development are reduced NGS run costs, and improvements of sequence volume and read length. Although it is now relatively straightforward to obtain a draft shotgun sequence of a new genome, fragmented into thousands of contigs and scaffolds, the finishing and annotation steps of a complete genome sequence are still very time consuming tasks. Transcriptome sequencing can be often a much more targeted alternative, especially when working with large genomes, or projects where the expressed gene sequences are the main features of interest to gain insight into the functionally relevant regions (e.g. proteins) encoded in a genome (). For an unsequenced organism, this includes the sequencing and assembly of RNA samples where most of the genes of interest are expressed, followed by functional annotation routines of the assembled transcripts using sequence similarity searches against protein reference databases. Subsequently, one can perform RNA-Seq gene expression profiling experiments where the assembled transcripts serve as reference in the read mapping step. Challenges related to transcriptome sequencing and assembly include the following: (i) abundance differences of RNA sequences make it difficult to obtain RNA samples representing most of the expressed genes of an organism and (ii) secondary structures as well as instability of RNA molecules can result in uneven read coverage of the underlying RNA sequences. As a result, transcriptome assemblies will usually only represent a subpopulation of genes in a genome, and the assembled RNA sequences are often fragmented or incomplete with respect to their full length. This study proposes a new method, named BRANCH, for improving the completeness of de novo transcriptome assemblies by making use of partial or complete genomic sequence information from the same or closely related species. It involves the initial de novo assembly of the RNA-Seq reads to transfrags and DNA reads to genomic contigs using existing NGS assembly software for both types of data. For instance, the genomic reads can be assembled with Velvet (), ABySS (), ALLPATHS (), SOAPdenovo () or IDBA (), whereas the RNA reads can be assembled with de novo transcriptome assemblers like Velvet/Oases (), Trinity (), Trans-ABySS (), SOAPdenovo-Trans () or T-IDBA (). In a downstream transcriptome assembly enhancement step, the genomic contig information is used to identify novel exons, extend incomplete transfrags and join fragmented ones using the BRANCH algorithm introduced in this study. This hybrid approach of guiding transcriptome assemblies with preliminary genomic sequencing information is a practical and cost-effective possibility, as one can sequence nowadays a genomic sample of a 1 GB genome of interest at 2050 coverage with the read output from only 12 flow cell lanes of a modern NGS instrument. Technically, the collection and sequencing of a genomic sample is also very straightforward, and stability issues or abundance variations of sequences are less a concern with genomic DNA than RNA. Alternatively, the genome contigs can be substituted by an existing genome sequence from a related species with high enough DNA sequence identity (usually 49095%) to the RNA-Seq sample. This option eliminates the need for generating the genomic contig dataset. The genomic sequences provide an additional backbone of evidence for improving de novo transcriptome assemblies by minimizing their typical errors and limitations, such as incomplete transfrags (e.g. missing exons), fragmented transfrags, chimeric transfrags, and so forth owing to low read coverage and base calling errors. When aligning the transfrags and RNA-Seq reads against given genomic contigs, one can extend and correct many of these fragmented or incomplete transfrags. For instance, two transfrags aligned next to each other on the same contig can be joined if a sufficient number of RNA reads can be aligned to support this merger. Similarly, a transfrag can be extended if the RNA read coverage along the corresponding region of the genomic sequences indicates a truncated transcript sequence. Because genomic contigs also contain errors, it is important to allow in this process only those transfrag modifications that are supported by high-quality alignments. BRANCH contains features that intersect in parts with reference-based splice variant assembly tools (sometimes referred to as ab initio assemblers;), such as the identification of splice variants from RNA sequence alignments against a reference. What makes BRANCH distinct from these tools is that it is designed to maximize the number and completeness of exons contained in preassembled transfrags guided by partial or complete genome sequences from the same or a closely related organism. It does this even for sequence regions with low RNA read coverage. This functionality is novel and relevant for de novo transcriptome assembly projects of unsequenced or only partially sequenced genomes because the additional exonic sequence information will contribute to the functional annotatability of the coding regions of RNA sequences in downstream protein similarity searches.
METHODS
Overview of the algorithmBRANCH consists of two major components: Exon Detection and Transfrag Extension. The Exon Detection component aligns the RNA reads against the preassembled de novo transfrags, and then it aligns both the transfrags and the remaining reads (that failed to align) against preassembled genomic contigs or a closely related genome using a modified version of the BLAT alignment program (see the discussion later in the text;). Subsequently, it identifies exons and splice junctions in the read pileups against the contigs. Pileup regions meeting certain minimum length and read coverage requirements are considered exons, and low coverage regions between them are introns if they are spanned by gapped alignments and splice junction signals. In addition to the exons contained in the initial transfrags, this step identifies novel candidate exons that are often missed in de novo transcriptome assemblies, mainly owing to uneven RNA read coverage. Guided by the additional DNA sequence information, BRANCH is designed to resolve those low coverage regions very efficiently. The Transfrag Extension component builds a weighted directed acyclic graph where the nodes represent the detected exons and the edges splice junctions while recording the paths through the graph corresponding to each transfrag. The weight of an edge is determined by the read density supporting the connectivity between the nodes. It then extends the recorded paths (i.e. transfrags) by finding the minimum number of paths with the minimum total weight that cover all recorded paths as well as the remaining nodes (i.e. the novel exons), resulting in extended transfrags. The following describes the BRANCH algorithm in more details. Section 2.2 introduces the BLAT-based alignment method, and Sections 2.3 and 2.4 describe BRANCH's exon detection and transfrag extension algorithms, respectively. Some illustrations of the algorithms are given in Figures 1 and 2.
Alignment stepsAn important preprocessor for our method is an alignment tool that can accurately align short RNA reads as well as much longer transfrags against genomic contigs while inserting gaps at exonintron junctions. Several alignment tools are available for mapping short RNA reads with gaps and limited numbers of mismatches against genome sequences. These include TopHat (), GMAP (), SpliceMap () and MapSplice (). For aligning longer transfrag sequences, software tools designed for generating long gapped alignments, such as BLAT, are more suitable than short read aligners. Hence, the current implementation of BRANCH uses a modified version of BLAT that. Input, processing steps and output of BRANCH. RNA reads are assembled with existing assembly software to de novo transfrags. BRANCH maps the RNA reads to the transfrags, and the transfrags and the remaining RNA reads to the genomic sequences. The latter are usually custom assembled contigs or gene sequences from a related organism. Guided by the resulting read pileups, BRANCH identifies existing and novel exons and splice junctions and uses this information to extend the initial transfrags we have optimized to align both types of RNA sequences with acceptable run time, sensitivity and error tolerance against genomic contigs. These changes to the BLAT executable are similar to those introduced by, but they have been customized for our specific needs of aligning long and short sequences. They include early filtration of candidate alignments to minimize execution time, disk space and support for handling paired-end (PE) read data. In addition, the boundaries of identified introns are screened for the presence of canonical (GT-AG) and non-canonical (e.g. GC-AG, AT-AC) splice sites. This information is used to optimize the exonintron junctions obtained from the alignment results.
Exon detection algorithmThe Exon Detection (ED) Algorithm identifies exons and splice junctions. It uses the modified BLAT software described in the previous section to first align the RNA reads (single or PE) against the transfrags and then the transfrags as well as all the remaining reads (not mapped in previous step) against the contigs or a related genome reference. The latter read pool contains RNA reads derived from exon sequences missing in the transfrag sequences, whereas others may have failed to align owing to base calling errors. After aligning the transfrags and reads to the contigs, the ED Algorithm identifies exons and splice junctions guided by the coverage information obtained from the alignment result. Regions with a minimum RNA read coverage b and a minimum width a are considered exons. Both a and b are user definable parameters. In future upgrades of BRANCH, these thresholds will be optimized for the user dynamically to minimize false positive exon predictions owing to contaminations with unspliced pre-mRNAs and other sources of noise in the data. After identifying candidate exons, the algorithm locates splice junctions between them based on the gap positions in the tranfrag sequences and/or RNA junction reads aligned against the contig sequences. Alternative splice sites within exons are identified in areas where a minimum number of junction reads share the same gap that spans across one or more exon regions.illustrates these steps with an example. The outcome of the ED Algorithm is additional exonic sequences not contained in the initial transfrag sequences. This includes extensions of incomplete exons and the identification of novel exons (complete or partial) along with their connections. The detailed steps of the ED Algorithm and its pseudo code are given below. Step 1 is the alignment of the RNA reads, transfrags and contigs as described earlier in the text. Step 2 identifies an exon region based on the alignment, where we denote the coverage of a contig position i by covi. In, the coverage of junction base i 3 is the number of junction reads overlapping with it in rectangles X and Y. The reads in rectangle X align over their full length against the transfrag t 3 and the contig, whereas the reads inrectangle Y align completely only against the contig. Both read sets overlap with position i 3. The algorithm computes the coverage for each contig base and identifies any contig region, with start and end positions l, r, as an exon range, if the width of the contig region satisfies r  l  1 ! a and the average coverage of the contig region satisfies P Algorithm 1 Exon detection: ED(R, T, C)1: Align reads R to de novo transfrags T with BLAT and then align T and the unaligned reads R n to contigs C 2: Record the coverage for each base at contig position i, and identify each region l, r in a contig, where r  l  1 ! a and P l i r covi rl1 ! b 3: Record the upstream and downstream junction coverages for each base at contig position i, split a region l, r at bases i and i  1l i5i  1 r, if ujci ! c or djci  1 ! c and identify the resulting regions as exons 4: Record the connectivity for each pair of bases at contig positions i and j4i and identify the splice junction of each exon pair l 1 , r 1  and l 2 , r 2 r 1 5l 2 , if conr 1 , l 2  ! d
Transfrag extension algorithmThe Transfrag Extension (TE) Algorithm extends and often joins de novo transfrags based on the additional exon sequences and splice junctions identified in the previous Exon Detection step. For this, it identifies the connections best supported by the data and then joins the corresponding sequence fragments accordingly. The final output is extended transfrag sequences, as well as novel transfrags. For example, if the connectivity data obtained in the previous step indicate that a newly identified exon 2 is connected with an existing exon 0 , and 0 appears in two separate transfrags t and t 0 , then the algorithm has to decide if is connected with t and/or t 0. A similar, but not identical, problem is solved by the Cufflinks algorithm for identifying transcript variants in RNA-Seq data (). Thus, our algorithm adopts certain components of this method, whereas others are specific to BRANCH's main application addressing the transfrag extension problem.
Mathematical formulationsDEFINITION 1. A junction graph is a directed acyclic graph, where each node represents an exon and each edge represents a splice junction.Based on the exons and splice junctions identified by the ED Algorithm, BRANCH builds a junction graph G where each node v represents an exon and the connecting edges are splice junctions among exons. Two nodes v and v 0 are connected by an edge ev, v 0  if their corresponding exons and 0 are junction exons. Similar to the approach chosen by, the graph is weighted based on the percentspliced-in value introduced byIn the above formula, the overlap and compatibility of an aligned RNA read and an exon are defined as follows. Read and exon overlap if and only if their start coordinates l and l and end coordinates r and r in the reference genome satisfy l l and r ! l, or l l and r ! l. Overlapped read and exon are compatible if and only if any gap i, j in the alignment of does not overlap with the exon. The value for any exon pair and 0 [and thus edge ev, v 0 ] is defined as the absolute difference of their weights with amplification: w2, 2 0   log1  j  0 j 2The smaller w is, the more likely that the and 0 are from the same transcript. Clearly, each given transfrag corresponds to a path in G. These are called given paths. As we are interested in extending the transfrags by possibly merging them and adding more novel exons, we formulate the transfrag extension problem in BRANCH as a combinatorial optimization problem called the Minimum weight Minimum Path Cover with given Paths (MMPCP) problem. An MMPCP is a smallest set of paths with the minimum weight in the junction graph G that contains all the given paths P as subpaths and cover all the nodes of V. Here, we seek the smallest number of paths because we would like to maximize the length of each extended transfrag. The minimum total weight requirement guarantees that any two exons and 0 in each extended transfrag are from the same true transcript.
Outline of the TE algorithmOur idea to find an MMPCP is to build a new junction graph G 0 from G by (i) converting each given path p 2 P to a node vp and (ii) maintaining the connection between any two nodes v and v 0 = 2p through a subpath of p by introducing an edge ev, v 0 . The new node vp will be referred to as path node and the new edge ev, v 0  as path edge. To keep the two graphs equivalent, the total weight of a given path will be added to each in-edge of the corresponding path node, and the path edges will be weighted using the total weights of the corresponding subpaths. This conversion is illustrated inand c. Then, we invoke a Combinatorial Optimization (CO) Algorithm for solving the Minimum weight Minimum Path Cover (MMPC) problem in the new graph G 0 (see Supplementary Materials). If P 0 is the resulting MMPC for G 0 from the CO Algorithm, the paths in P 0 , or the transfrags they represent, may not be fully extended. To address this, we can iterate the above process for solving the MMPCP problem by recording P 0 as new given paths and extending them recursively, until they cannot be extended anymore. The TE Algorithm is more formally outlined in the following pseudocode. The final output of the TE Algorithm consists of transfrags that have been extended with exonic sequences from the Exon Detection step, as well as some novel transfrags.
Algorithm 2 Transfrag extension: TE(G, P)Assign weights to the edges of G using Equation (2) for each given path p 2 P do Convert p to path node vp and add the total weight of p to each in-edge of vp for any pair of nodes v and v 0 = 2p do if there is a path p 0 = 2P from v to q 2 subpathp and then to v 0 then Introduce a path edge ev, v 0  Weight ev, v 0  end if end for Delete p from G end for {G is converted toend if
Implementation and performanceBRANCH has been implemented in C with the LEMON library () for Linux operating systems. The modified BLAT executable is distributed along with BRANCH. The expected input includes RNA reads (single or PE), assembled transfrags and genomic contigs or gene sequences from a closely related species. Most of BRANCH's execution time is spent on the initial alignment with BLAT ranging from 0.10.5 h per million reads. The subsequent steps are more memory than CPU intensive for storing the genomic contigs (0.1 GB RAM per million nucleotides). Both the execution time and memory usage of BRANCH are approximately linear in the number of RNA-Seq reads and size of the genomic contigs, respectively.
EVALUATION
Test results with simulated data
BackgroundThe performance of BRANCH was tested with real and simulated data. The main objective of these experiments was to assess the efficiency of BRANCH for improving the representation of full-length transcripts in de novo transcriptome assemblies, but also its splice variant resolution, error tolerance and robustness with respect to variable degrees of incomplete representation of transcript and genomic sequences. Although tests on real data provide more reliable results for the performance of an algorithm, simulated data were included here because they allow a more systematic evaluation of a wide variety of data properties than this would be possible with real data only. To mimic in these tests real data as much as possible and minimize bias toward any method, all sequences were randomly sampled from a real genome, meaning they were only partially synthetic. The results on real datasets are given in the next section. In the tests with simulated data, we varied the number of RNA reads, the average length of the contigs, the relative genome coverage by the contigs and the base call error rates in both the RNA reads and the contigs. Benchmarking BRANCH's main utilitythe enhancement of RNA-Seq assemblies guided by genomic sequencesagainst other tools is currently not easily possible owing to the lack of software designed for this purpose. However, a very informative performance measure is to determine how well BRANCH can improve de novo assembled transfrags with respect to their full-length and gene coverage in a genome. For this, we compared the final results generated by BRANCH with the initial de novo transfrags that we generated in the tests on simulated data with the Velvet/ Oases and Trinity transcriptome assemblers. Velvet/Oases and Trinity were chosen here among other software options (e.g. Trans-ABySS, SOAPdenovo-Trans) because of their good sensitivity and precision performance ().
DataSets and TestsThe simulated test datasets were randomly sampled from the genome and transcriptome sequences of Caenorhabditis elegans provided by Ensembl's FTP site. From the genome sequence, we sampled three types of contig sets and from the transcriptome two types of RNA-Seq sets as follows: (i) contigs of variable length of 1, 10, 50 and 100 kb; (ii) contigs with variable coverage of the C.elegans genome of 40, 60, 80 and 100%; (iii) contigs with variable sequence error rates of 0, 1, 2 and 3% by substituting bases at random positions; (iv) different numbers (10, 30, 50 and 70 million) of PE RNA reads of 2  100 bp length and 200300 bp insert length while maintaining an abundance distribution among the reference transcripts that is typical for RNA-Seq samples (see Supplementary Table S-1); and (v) RNA reads with variable error rates of 0, 1, 2 and 3%. The simulated RNA-Seq sets were assembled to transfrags using Velvet/Oases with its parameter optimization script and Trinity with its default parameter settings. To be consistent with recent studies on de novo RNA assemblies, we define in our tests sensitivity and precision in a similar manner. Sensitivity is the number of reference transcripts, which could be aligned, here with BLAT, to a transfrag with !95% identity over !80% of the transcript's length and !95% of the transfrag's length (). Additionally, test results with variable length coverage values are given in Section 3.2.3 and. Precision is defined as the percentage of transfrags, which could be aligned to a reference transcript with !95% identity over !95% of the transfrag's length, but without a minimum length coverage requirement for the transcript (). Moreover, we compare among the different assembly methods the following performance parameters: numbers of covered transcripts, complete transcripts and completely represented exonic regions of genes. For the latter two, we also require !95% identity and !95% length coverage of the reference and the transfrag.and Supplementary Tables S-2 to S-6 give the test results for the simulated data sets for variable contig lengths, contig sequence error rates, contig coverages, numbers of RNA reads and RNA read base call error rates, respectively. All other parameters are constant settings, which are specified in the legends. Compared with the input transfrags generated by Velvet/Oases and Trinity, BRANCH post-processing improves their sensitivity and precision substantially by 2.3 19.9% and 1.715.7%, respectively. The relative sensitivity improvements by BRANCH for both assemblers are $2-fold higher when the coverage of the genome by contigs is raised from 40% to 100% (and Supplementary Table S-4), whereas increasing sequence error rates from 0 to 3% in the contigs have a less pronounced impact by reducing the relative sensitivity improvements in the most extreme cases by 2034% (
Results
Test results with real data
Experimental designThe performance of BRANCH on real data was tested with published Illumina NGS samples available in NCBI's Sequence Read Archive. To generate meaningful test results, it was important to choose here NGS data meeting today's standards for efficient RNA-Seq transcriptome assemblies with respect to read length (450 bp) and PE read information. BRANCH's performance on the two main types of genomic guide sequences was evaluated by including in one set of tests custom genomic contigs assembled from NGS reads of the same organism as the RNA reads, and in another case existing genome sequence from a closely related organism (). The influence of the completeness of the genomic sequence information on the performance of BRANCH was tested by comparing the results guided by assembled contigs with those from complete gene sequences. Two datasets were chosen from diverse multicellular eukaryotic organisms (C.elegans and mouse) to account for splice variants and variable degrees of sequence complexity, and a third one was from a unicellular eukaryotic organism (Saccharomyces cerevisiae) with a densely organized genome and rare alternative splicing. To evaluate the impact of directional information in the RNA reads, we used in two cases non-strand-specific RNA-Seq samples and in another case a strand-specific sample. The RNA reads from all sample sets were assembled with Velvet/Oases and Trinity (). In case of Trinity, the default parameter settings recommended by its developers were used. DNA reads were assembled to contigs with Velvet using the VelvetOptimiser tool for parameter optimization. To also compare against an alignment-based splice variant assembler, we included Cufflinks, which is a fundamentally different method compared with the above de novo assemblers. Cufflinks was only included in the test case with the known genome sequences as guide reference because it was the only situation where the minimal input data types, required for this method, were available. The splice junction information was obtained by aligning the RNA reads with Tophat (version 2) against the genomic sequences. Both Tophat and Cufflinks were run with their default parameter settings. The results obtained from the different tests were used to compute similar quality parameters () as in the previous section assessing among other properties the full-length andsplice variant resolution of the transfrags. To also evaluate the functional annotatability of the assembled transcripts before and after processing them with BRANCH, they were used as queries in BLASTX searches (E-value cutoff 10 9 ) against the protein databases of the corresponding organisms. The obtained results were queried for nearly complete protein matches requiring ! 95% identity on the protein sequence level.
DatasetsThe first NGS sample set is from C.elegans. Its genomic read set contained 57 million 2  5476 bp long PE reads (accessions: SRR066623, SRR066625;) and its RNA-Seq set contained 72 million 2  100 bp PE reads (accession: SRR316929;). The second sample set is from mouse (Mus musculus) with 34 million 2  76 bp PE RNA-Seq reads (accessions: SRR290901, SRR290902; unpublished). The gene sequences from rat (Rattus norvegicus) were used in this case as genomic guide sequence to test BRANCH's performance for a situation where a related genome sequence is available. The third sample set is from S.cerevisiae with 4 million 2  76 bp long PE genomic reads (accessions: SRR527545, SRR527546; unpublished), and 10 million 2  76 bp strand-specific PE RNA-Seq reads (accession: SRR059177;).
Assemblies assisted with custom genome contigsThe performance test results for the C.elegans data are given in. In comparison with the initial transfrags assembled by Velvet/Oases, BRANCH shows a 6.3 and 10.5% improved sensitivity and precision performance, respectively, when guided by the 88 175 genome contigs assembled for this experiment representing 90.4% of its genome. To evaluate the sensitivity performance over a wider threshold range of transcript length coverage values,compares among the different assembly methods the number of reference transcripts from C.elegans that aligned with the transfrags over increasing minimum overlap values from 10% to 90%. BRANCH exhibits here a consistent improvement compared with the other methods over the full range of overlap thresholds. When comparing the sensitivity performance among the different methods for variable expression levels (see), BRANCH shows the greatest improvements for weaker expressed transcripts. This is in agreement with its design feature for improving the assembly of transfrags with low read coverages. With respect to the other performance parameters recorded in, BRANCH also increases the number of complete transcripts, complete genes, covered transcripts and exons annotated in the C.elegans genome by 6.1, 5.8, 8.9 and 11.9%, respectively. When using the transfrags in translated BLASTX searches against the C.elegans protein database, the BRANCH results show a remarkable increase (22.0%) of the number of complete protein sequences encoded in the assembled transcript set. In, the number of nearly complete protein sequences is usually larger than the number of complete transcripts because the latter also contain untranslated 5 0 and 3 0 regions that make the full-length cut-off criteria (!95% sequence identity over !95% of the reference length) more stringent for transcripts than for proteins. BRANCH processing extends 5726 transfrags from the initial assembly, and it identifies many novel transfrags28.3% but shows a slightly lower precision (5.4%). For the remaining test parameters, BRANCH's performance is consistently superior over Cufflinks'. In addition, Cufflinks is unable to produce even nearly as good results (data not shown) in the tests with the other types of genomic guide sequences, BRANCH has been specifically designed for, including custom contigs and genomic sequences from related genomes. The main reasons for these performance difference are as follows. First, Cufflinks has been designed for a different use case, which is the prediction of splice variants for completed genomes, preferentially with well-defined gene/exon boundary annotations. Second, owing to its transfrag input, BRANCH's performance greatly depends on the quality of the upstream de novo assemblies. If those were of poor quality, then Cufflinks' ranking in this comparison could change. Third, BRANCH has been optimized to extend transfrags in sequences regions with very low RNA read coverage (). Despite those utility differences, the performance results presented here demonstrate that it is currently not possible to replace BRANCH's main functionality with a reference-based splice variant assembly tool, even when an 'idealized' reference gene set is available as in the Cufflinks result given in3.2.4 Assemblies with strand-specific rna-seq data and custom genome contigsgives the results for S.cerevisiae where strand-specific RNA-Seq data was used along with 1360 custom assembled guide contigs representing 92.4% of this genome. With this dataset, BRANCH improves the sensitivity and precision of the transfrags generated by Velvet/Oases by 56.7 and 1.2%, and those from Trinity by 30.8 and 0.3%, respectively. At the same time, the numbers of complete transcripts, complete genes, covered transcripts and proteins annotated in the S.cerevisiae genome increase with BRANCH relative to the input data from both de novo assemblers by 41.174.1%, 41.1 74.1%, 29.960.6% and 8.333.8%, respectively. In general, the improvements achieved by BRANCH are more pronounced for the Velvet/Oases input because Trinity performs better on this dataset, leaving less room for improvements. Nonetheless, the results for both de novo assemblers demonstrate that BRANCH post-processing can lead to considerable. Transcript length coverage. The number of reference transcripts of the C.elegans dataset is plotted that aligned with the transfrags over increasing overlap thresholds from !10% to !90%. The acronyms assigned to the different methods in the legend are defined in the first column ofimprovements of transfrags generated from strand-specific RNA-Seq data. This is even the case for a unicellular eukaryotic organism like S.cerevisiae where the risk of assembling chimeric transfrags is elevated compared with the other organisms chosen in, mainly owing to the much higher gene density and frequency of overlapping genes in its genome. Because chimeric events negatively impact the precision performancea metric BRANCH improvestheir frequency is likely to be lower in the transfrags post-processed by BRANCH than the ones from the upstream de novo assemblers. It is important to point out here that the current version of BRANCH does not detect or correct chimeric transfrags generated by the de novo assemblers. However, future improvements to our software will include such a feature.
The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Fig. 2. Illustration of important features of BRANCH algorithm. (a) A sample pileup is shown containing PE RNA reads, preassembled transfrags (t 1 to t 3 ) and one contig with exons A to G. Reads of good quality are indicated in blue and low quality reads in grey. PE pairs and spliced read fragments are connected with thin black and green lines, respectively. The red bars (B, C, D, F and G) in the contig are the exons identified by BRANCH based on the alignment of the preassembled transfrags against the contig. The blue bars (A and E) in the contig are two additional exons identified by BRANCH based on spliced and PE reads aligning with both contig regions covered by transfrags and those not covered by transfrags. Those exons (here A and E) are often missed by de novo transcriptome assemblers owing to insufficient read coverage and/or sequence errors. The sequencing gap g in exon A could be closed with PE reads in rectangle Z, because their insert size obtained from the alignment against the contig, agrees with the expected insert size of the library. Another situation where BRANCH improves transcriptome assemblies is given on the right side of the diagram. Here the exon region FG, corresponding to transfrag t 3 , is subdivided by an internal splice site i 1 =i 2 into two exons. This is supported by a minimum number of splice junction reads with gaps (rectangle Y) spanning contig positions i 1 and i 3. The coverage covi 3  is the number of junction reads overlapping with base position i 3 , here reads in rectangles X and Y; the downstream junction coverage djci 3  is the number of junction reads overlapping with base positions i 1 and i 3 in rectangle Y where i 1  15i 3 ; the connectivity coni 2 , i 3  between positions i 2 and i 3 is the number of reads overlapping with bases i 2 and i 3 in rectangle X where i 2 5i 3. (b) A junction graph has been constructed from the alignment. In this graph, exons are nodes and edges are connections among them that are weighted based on the read support from the spliced alignments. Source and sink nodes are added at the beginning (S) and the end (T) of the graph, respectively. The paths corresponding to the de novo transfrags are marked in red: B ! D, C ! D and F ! G. (c) The TE Algorithm collapses these paths to path nodes BD, CD and FG. The resulting Minimum weight Minimum Path Cover with given Paths (MMPCP) in the original graph (b) includes the paths indicated by round arrows: S ! A ! BD ! E ! G ! T and S ! CD ! E ! FG ! T. Each of them corresponds to an extended transfrag
E.Bao et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
l i r covi rl1 ! b, where a and b are the minimum width and the minimum coverage requirements, respectively. In certain cases, the newly identified exon regions may be fragmented in areas with very low or no RNA read coverage. Suppose a novel exon range l, r contains sufficient read coverage in subranges l, i and j, r i5j, but subrange i, j has zero coverage. In such a case, two partial exons l, i and j, r will be identified instead of the complete exon l, r. Such gaps can be closed, if there is a sufficient number of PE reads spanning l, i and j, r, and the mapping distances of the read pairs agree with the approximate insert length of the library. An example of such a case is given in Figure 2a, where the coverage gap g divides exon A into two parts, but it can be closed with the PE read support shown in rectangle Z. To minimize the risk of incorporating introns, this type of gap closures are only performed if the mapping distances of the read pairs agree with the approximate insert length of the RNA-Seq library. Alternatively, the user can specify this parameter. Step 3 identifies alternative splice junction sites within exons. Here, we define the upstream and the downstream junction coverage. The upstream junction coverage at contig position i, denoted as ujci, is the number of reads having bases at positions j and j  1 aligned at contig positions i and k4i  1, respectively. Similarly, the downstream junction coverage at contig position i, denoted as djci, is the number of reads having bases at positions j  1 and j aligned at contig positions k5i  1 and i, respectively. For example, the downstream junction coverage at base i 3 , djci 3 , is the number of junction reads in rectangle Y of Figure 2a covering i 3. The aligned junction reads overlap with bases i 1 and i 3 , where i 1  15i 3. The algorithm records the upstream and downstream junction coverages for each contig base, and then splits such a region l, r at contig positions i and i  1l i5i  1 r, if the upstream junction coverage at i satisfies ujci ! c or the downstream junction coverage at i  1 satisfies djci  1 ! c, where c is the minimum upstream/downstream junction coverage requirement to split exon regions. Step 4 determines which exons are joined based on their connectivity in the alignment result. The connectivity between the last base of an exon and the first base of a downstream exon at contig positions i and j4i, denoted as coni, j, is the number of reads having bases at positions k and k  1 aligned at contig positions i and j. In Figure 2a, the connectivity between i 2 and i 3 is the number of reads in rectangle X with matching bases at positions i 2 and i 3. The algorithm computes the connectivity for each pair of exons and identifies two exons at positions l 1 , r 1  and l 2 , r 2 r 1 5l 2  as a junction, if the connectivity of the pair of boundary bases at r 1 and l 2 satisfies conr 1 , l 2  ! d, where d is the minimum connectivity requirement to connect two exons.
BRANCH at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
.2.5 Assemblies assisted with a related genome The sequencing and assembly of a genomic guide sequence can be avoided if a genome from a closely related organism is available, which is an important use case of BRANCH. Table 1c gives the test results for such a situation where the genes from rat served as guide sequence for improving the assembly of RNA-Seq data from mouse. In this dataset, the sensitivity and precision improves with BRANCH post-processing for Velvet/Oases by 4.4 and 1.1%, and for Trinity by 7.0 and 1.8%, respectively. The other test parameters also show noticeable improvements. The numbers of complete transcripts, complete genes, covered transcripts and proteins annotated in the mouse genome increase by 5.28.0%, 6.39.6%, 7.010.2% and 4.06.2%, respectively. Overall, the improvements with a closely related genome are slightly less pronounced than with guide contigs from the same organism. This is expected, as heterologous sequences represent a more challenging situation where it is important to perform the read and transfrag mapping against the related genome sequences with stringent enough mapping parameters to minimize the formation of false positive extension and fusion events of transfrags. When relaxing these parameters, one can increase the number of extension events, but often this will result in a decreased precision. In summary, the aforementioned test results demonstrate BRANCH's efficiency in improving the representation of fulllength transcripts in de novo assemblies by taking advantage of genomic guide sequence information from the same or a closely related organism. 4 CONCLUSIONS AND FUTURE WORK This study introduces BRANCH as an efficient reference assisted post-processing method for enhancing de novo transcriptome assemblies. It can be used in combination with most de novo transcriptome assembly software tools. The assembly improvements are achieved with help from partial or complete genomic sequence information. They can be obtained by sequencing and assembling a genomic DNA sample in addition to the RNA samples required for a transcriptome assembly project. This approach is practical because it requires only preliminary genome assembly results in form of contigs. Nowadays, the latter can be generated with very reasonable cost and time investments. In case the genome sequence of a closely related organism is available, one can skip the genome assembly step and use the related gene sequences instead. This type of reference assisted assembly approach provides many attractive opportunities for improving de novo NGS assemblies in the future by making use of the rapidly growing number of reference genome information available to us.
