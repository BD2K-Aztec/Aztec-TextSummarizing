Motivation: The main challenge for structure-based computational protein design (CPD) remains the combinatorial nature of the search space. Even in its simplest fixed-backbone formulation, CPD encompasses a computationally difficult NP-hard problem that prevents the exact exploration of complex systems defining large sequence-con-formation spaces. Results: We present here a CPD framework, based on cost function network (CFN) solving, a recent exact combinatorial optimization technique , to efficiently handle highly complex combinatorial spaces encountered in various protein design problems. We show that the CFN-based approach is able to solve optimality a variety of complex designs that could often not be solved using a usual CPD-dedicated tool or state-of-the-art exact operations research tools. Beyond the identification of the optimal solution, the global minimum-energy con-formation, the CFN-based method is also able to quickly enumerate large ensembles of suboptimal solutions of interest to rationally build experimental enzyme mutant libraries. Availability: The combined pipeline used to generate energetic models (based on a patched version of the open source solver Osprey 2.0), the conversion to CFN models (based on Perl scripts) and CFN solving (based on the open source solver toulbar2) are all available at
INTRODUCTIONThe engineering of tailored proteins with desired properties holds great interest for applications ranging from medicine, biotechnology () and synthetic biology to nanotechnologies (). Although, directed evolution techniques coupled with high-throughput automated procedures have met with some success, they do not provide structural design principles to guide the rational design of novel proteins.The development of generic and effective protein engineering methodologies, both experimental and computational, is thus of utmost interest to speedup the design of tailored proteins having the desired properties. Structure-based computational protein design (CPD) approaches have demonstrated their potential to adequately capture fundamental aspects of molecular recognition and interactions, which have already enabled the successful (re)design of several enzymes for various purposes (). Despite these outstanding results, the efficiency, predictability and reliability of CPD methods have shown that they still need to mature. CPD is faced with several challenges. The first lies in the exponential size of the conformational and protein sequence space that has to be explored, which rapidly grows out of reach of computational approaches. Another obstacle to overcome is the unsolved issue of accurate structure prediction for a given sequence. Therefore, the design problem is usually approached as an inverse folding problem (), to reduce the problem to the identification of an amino acid sequence that can fold into a target protein 3D-scaffold that matches the design objective. This paradigm typically assumes a fixed protein backbone and, for each type of amino acid considered at a given position, allows the side chains to move only among a set of discrete and lowenergy conformations, called rotamers (). CPD is thus formulated as an optimization problem, which consists in choosing combinations of rotamers at designable specified positions such that the fold is stabilized and the desired property is achieved. To solve this problem, we need a computationally tractable energetic model to evaluate the energy of any combination of rotamers. We also require computational optimization techniques that can efficiently explore the sequence-conformation space to find the sequence-conformation model of global minimum energy (GMEC: global minimum-energy conformation) or an ensemble of low-energy sequence-conformation models. Indeed, several reasons can motivate the generation of multiple near-optimal solutions. First, the sequence-conformation model with the lowest predicted energy may not fold into the targeted protein scaffold owing to inaccuracies in the modeling of protein energetics. Secondly, the GMEC solution may be so stabilized that it can lack the flexibility required to operate the protein biological function (). Such suboptimal ensembles can then be analyzed to rationally guide the *To whom correspondence should be addressed.
yThe authors wish it to be known that, in their opinion, the first two authors should be regarded as joint First Authors. experimental construction of protein libraries while enhancing the chances of success to identify a protein hit. The protein design problem modeled with a rigid backbone, a discrete set of rotamers and pairwise energy functions, has been proven to be NP-hard (). Hence several meta-heuristic methods have been applied to it, including MonteCarlo with simulated annealing (), genetic algorithms () and other methods (). These approaches can usually find a relatively low-energy model fairly quickly but without any guarantees of completeness or accuracy. Indeed, these stochastic optimization routines may end up trapped in local minima and miss the GMEC with no indication. Conversely, there exist methods that solve the GMEC exactly, such as approaches based on the dead-end elimination (DEE) theorem (), on the branch-and-bound algorithm (), on integer linear programming () or on dynamic programming (). These exact methods offer several advantages. First, they ensure that discrepancies between CPD predictions and experimental results come exclusively from the inadequacies of the biophysical model and not from the algorithm. Next, because provable methods can determine that the optimum is reached, they may actually stop before meta-heuristic approaches. Finally, empirical studies on solving the GMEC problem reported that the accuracy of meta-heuristic approaches tend to degrade as the problem size increases (). In this article, we modeled the CPD problem as either a binary cost function network (CFN) or an integer linear programming (ILP) problem (Section 2.4). We compared the performance of the open source CFN solver toulbar2 and the IBM TM ILOG ILP solver cplex against that of the combined DEE/A* approach as implemented in the dedicated CPD software Osprey (Section 3.2), for design problems (Section 3.1). The CFN-based method outperformed by several orders of magnitude the other methods both in identifying the GMEC but also in producing a set of low-energy sequence-conformation models. This second step was not attainable in most of the study cases using DEE/ A* (Section 3.3). Therefore, on the basis of the CFN approach, we propose a new CPD framework (). Our methodology, which we describe in Section 2, is well-adapted to solving exactly macromolecular design problems of large sequence-conformation spaces. It also has the potential to improve methods that integrate flexibility to a larger extent in protein design, as this considerably expands the size of the search space or may require solving a large number of GMEC instances (). These aspects are highly relevant to CPD and we shall address them here.
METHODSThe CPD strategy introduced in this work () is composed of five main stages discussed in more details in the following subsections. The whole CPD framework and the approaches used to handle the sequenceconformation combinatorial optimization problem were assessed for the design of more stable proteins and cofactor-bound proteins as well as proteinligand and proteinprotein interfaces.
Preparation of structural molecular systemsThree-dimensional models of proteins in free and complex states were derived from their respective crystallographic structures deposited in the protein data bank (PDB) () (Supplementary). Missing heavy atoms in crystal structures as well as hydrogen atoms were added using the tleap module of the Amber 9 software package (). Cofactors as well as crystallographic water molecules specified in SITE and LINK records of PDB files were kept in structural models. Histidine protonation states and disulfide bonds were assigned using the tleap module. For multimeric proteins, the transformation matrix specified in the PDB file was applied to reproduce missing chains. Parameters for non-amino acid type ligands and cofactors were generated with the Antechamber module of Amber 9 (). The molecular all-atom ff99SB (), Glycam06 () and gaff force fields () were used for the proteins, carbohydrates and other non-standard molecules, respectively. Each molecular system was then subjected to 500 steps of minimization with the Sander module of Amber 9, using the generalized born/surface area implicit solvent model ().
Definition of sequence-conformation spacesThe residues of each protein were classified into three layers (labeled core, boundary or surface) according to their burial in the 3D-model (Supplementary). This burial of residues was defined by calculating their solvation radius from atomic solvation radii, as defined by (). The salvation radius B R of residue R is given as follows:where b i and q i are the atomic solvation radius of atom i from residue R and its partial charge, respectively. From these calculations, three layers of decreasing residue-solvation radius from the core to the surface of the protein were defined. The set of amino acid types considered at each mutable residue (i.e. candidate positions for redesign) of the proteins (in their apo form or bound to a cofactor) depends on the layer to which the residue belongs to. Further details regarding the selection of designed positions and the allowed amino acids can be found in the Supplementary data.
Computation of pairwise energiesThe total energy (E total ) of a sequence-conformation model defined by the selection of one specific amino acid associated with a given conformation (rotamer) for each variable amino acid type is assessed as follows:where E c is a constant energy contribution capturing interactions between fixed parts of the model, Ei r   E self i r   E ref i r  is the difference between the self energy of rotamer r at position i capturing internal interactions or interactions with fixed regions E self i r  and its reference energy E ref i r , which corresponds to the lowest computed intra-rotamer energy for each amino acid type by variable residue position () and Ei r , j s  is the pairwise interaction energy between rotamer r at position i and rotamer s at position j. In this formulation, the conformations (i.e. rotamers) of amino acidtype ligands are processed as rotamers of amino acid side chains. All pairwise energy terms were pre-computed and stored using Osprey 2.0 (). These calculations were based on the Amber all-atom ff94 parameters implemented in Osprey 2.0 as well as on additional force field parameters generated from Glycam06 and gaff force fields using the Antechamber module of Amber 9. These parameters were added in the parameter files of Osprey 2.0 () and were used for modeling carbohydrates and other non-standard molecules. The energy functions consisted in the sum of the Amber electrostatic terms (with a distance-dependent dielectric constant), van der Waals and dihedral energy terms and the EEF1 implicit solvation energy term. No cutoff was used for non-bonded interactions.
Sequence-conformation optimizationThe problem of finding the set of rotamers that will optimize the total energy (E total ) was modeled as either a binary CFN or an ILP problem. The complete interaction graph and large tree-width excluded the use of dynamic programming (). The performance of CFN and ILP was compared against that of the combined DEE/A* CPD-dedicated approach.
CFNmodel A CFN, or weighted constraint satisfaction problem P, is composed of a set of local cost functions, each involving a set of specific variables (). CFNs have been used as a modeling framework for representing and solving various combinatorial optimization problems in bioinformatics and resource allocation (). Formally, a CFN P is a triple P  X, D, C, where X  {1, 2,. .. , n} is a set of n variables. Each variable i 2 X has a discrete domain d i 2 D. C is a set of local cost functions. Each cost function c s 2 C is defined over a subset of variables S X (called its scope), has domain  i2S d i and takes its values in N [ 1 f g. Cost functions must be non-negative but are otherwise totally arbitrary and are often described by cost tables. The infinite cost is used to represent hard constraints. An assignment A is a mapping from variables to values from their domains. The cost of an assignment A for a local cost function is the value of the cost function for the projection of A to the scope of the function. The global cost of A is the sum of the costs of A over all local cost functions. It is usually assumed that C contains one constant cost function, with an empty scope, denoted as c 0. A CFN P defines a joint cost distribution over all the variables X defined by the cost of the assignments. Because all cost functions in a CFN are non-negative, the constant cost function c 0 2 C defines a lower bound on this joint cost distribution. Solving a CFN consists in finding an assignment that minimizes the joint cost distribution.Modeling a CPD problem as a CFN is straightforward. Each mutable or flexible residue i is represented by a variable i. The set of rotamers available to the residue defines the domain d i of the variable i. Finally, each interaction energy term in E total can be represented as a cost function. The constant term E c is captured as a constant cost function with empty scope. The terms Ei r , which depend on one residue only, are captured as unary cost functions involving one variable i each. Finally, interaction terms Ei r , j s  can be captured as binary cost functions involving variables i and j. To enforce the non-negativity requirement on cost functions, one can simply subtract the minimum of every cost function from its cost table. The joint cost distribution defined by the corresponding CFN is then equal to the energy, up to a known constant shift. The optimal solution of the CFN is an assignment that corresponds to a GMEC for the CPD problem. When the maximum number of available rotamers over all residues is d, the resulting binary CFN takes space in On 2 d 2 . Solving a CFN consists in finding a combination of values for all the variables in X that minimizes the joint cost distribution. Such an optimal solution defines a GMEC for the CPD problem. Existing exact algorithms for solving CFN are usually depth-first branch and bound (DFBB) algorithms integrating strong incrementally computed polynomial time lower bounds. The use of depth-first search algorithms avoids the worst-case exponential space of the A* algorithm used in the DEE/A* approach. The incremental lower bounds are produced by algorithms that enforce so-called local consistencies (). Enforcing a local consistency on a given CFN P transforms it to an equivalent CFN P' (defining the same joint cost distribution) with a possibly increased constant cost function c 0 , providing an improved lower bound. This lower bound is used to prune the search tree and to delete rotamers. To identify the GMEC of all CPD instances, we used the open source toulbar2 (Toulbar2 is an international collaborative CFN solver development. All sources are available on our software forge at http://mulcyber. toulouse.inra.fr/projects/toulbar2) solver (release 0.9.6.0) with options d:l  3-m and no initial upper bound. By default, toulbar2 maintains existential directional arc consistency () for incremental lower bounding, dynamic value ordering (based on minimum unary cost) and a variable ordering heuristics (based on the median energy of terms involving a given residue following preprocessing) combined with last conflict heuristics (). The counterpoint to the improved space complexity of a DFBB search instead of A* is that DFBB search cannot directly provide a sorted list of suboptimal solutions. To enumerate all suboptimal solutions within E cut  2.0 kcal.mol 1 of the GMEC, we first computed the GMEC and its associated energy E GMEC as above and performed a second exhaustive search for all solutions with energy below E GMEC  E cut (options a and ub in toulbar2 to, respectively, produce all solutions and set a global upper bound).
ILP modelWe also modeled the CPD problem as an integer linear program (01LP) problem using the usual translation from CFN to ILP initially proposed in (). An ILP is defined by a linear criteria and a set of linear constraints on integer variables. For every value/rotamer i r of the variable/residue i, we introduced one Boolean variable E cut d ir that indicates whether the rotamer i r is used d ir  1   or not d ir  0   . To enable the expression of the energy as a linear function of variables, we introduced an extra Boolean variable P irjs for every pair of rotamers i r , j s , capturing the fact that this pair of rotamers is used. The energy can then be expressed directly as the linear function to be minimized (the constant term can be ignored as it cannot change the optimal solution):Ei r , j s :p irjs 3Additional constraints enforce that exactly one rotamer is selected for each variable position and that a pair is used if and only if theEi r , j s :p irjs 4 such that:The resulting ILP contains On 2 d 2  variables and On 2 d constraints. It is equivalent to the model proposed for CPD in (). Note that because the objective function is non-linear, it is fundamentally impossible to express it in ILP without introducing a quadratic number of variables. Hence, this ILP model cannot be improved significantly in size. To identify the GMEC, we used the IBM TM ILOG ILP solver cplex (version 12.4.0.0) on this ILP with parameters EPAGAP, EPGAP and EPINT set to zero to avoid premature stop. Dead-end-elimination / A* combined approach (DEE/A*) The DEE algorithm iteratively eliminates rotamers and pairs of rotamers that cannot possibly be part of the GMEC () by using a dominance criterion. The original DEE single elimination criterion removes a rotamer r at position i if there exists another rotamer u at the same position such thatIn this case, r can be removed because any conformation using r can be transformed into a lower energy conformation by substituting u for r. The pruning criterion is applied until a single solution remains (i.e. the GMEC) or all solutions outside an energy window of E cut have been pruned or otherwise when no more pruning is identified during a given round. The DEE pruning step is followed by an A* branch-and-bound like search, which uses the remaining rotamers () to identify the GMEC or produces a sorted list of all models whose energy is within a specified energy E cut of the GMEC energy. The A* algorithm is a worst-case exponential space and exponential time algorithm whose efficiency is tightly linked to the quality of the heuristic admissible evaluation function used to decide which node to explore next. Interestingly, the heuristic used in the A* approach applied in this study is equivalent to the CFN heuristic used in the PFC-DAC algorithm (). This lower bound as well as an improved variant of it () has been obsoleted by the incremental local consistencies introduced in (). In this study, we used Osprey 2.0 to perform the DEE/A* procedure to find the GMEC and suboptimal models within a E cut  2.0 kcal.mol 1 of the GMEC energy (option initEw  2). The procedure starts by extensive DEE (algoOption  3, which enables simple Goldstein, Magic bullet pairs, 1-and 2-split positions, bounds and pairs pruning) and is followed by the A* search. We also optionally applied a procedure including a prefiltering step before the DEE, which eliminates rotamers i r such that Ei r 430 kcal.mol 1 and pairs i r , j s  such that Ei r , j s 4100 kcal.mol 1 (pruning and stericE parameters). All computations (toulbar2, cplex and Osprey) were performed on one core of an AMD Opteron TM Processor 6176@2.3 GHz. We used 128 GB of RAM and a 100 h time-out.
Analysis of top-score modelsFor four design cases (PDB ids: 1TEN, 1UBI, 2PCY, 1CSK), the 3D structure of the best conformation of each unique sequence found within a 2 kcal mol 1 window of the GMEC energy was built using Osprey 2. These 3D structure models were then subjected to 1000 steps of minimization with the Sander module of Amber 9, using the generalized born/ surface area implicit solvent model. During these minimizations, heavy atom positions were restrained using a harmonic potential (force constant  1 kcal.mol 1 A  2 ). The score of minimized structures was computed with Osprey 2.0. Finally, the conformational variability of the minimized models was assessed by carrying out an optimization step allowing all variable amino acids (mutable and flexible) to repack. This step was performed using the CFN-based approach with a E cut of 0.2 kcal mol 1 and involved the pre-computing of pairwise energy terms for each minimized model using Osprey 2.
RESULTS AND DISCUSSION
Benchmark setA tailored benchmark set was produced to assess the performance of combinatorial optimization algorithms on sequence-conformation spaces of various sizes and complexity as well as the potential of the CPD methodology proposed herein () for tackling the redesign of diverse structural systems involving free proteins or proteins bound to a cofactor, a ligand or a protein. The studied systems have all been extracted from previously published articles about protein engineering, in silico protein design or protein structural studies (see references Supplementary). A detailed description of our benchmark preparation protocol is given in Supplementary Data. In our benchmark set, the number of mutable residues varies from 3 to 119 (Supplementary). They are located either in the core of (holo)proteins (except when data are available in the literature) or at the proteinprotein or proteinligand interfaces. We then defined a set of flexible residues (from 1 to 93) (Supplementary) that surrounds mutable positions and mainly occupies the core and the boundary regions of proteins. The resulting number of variable residues ranges then from 23 to 120 and, given the penultimate rotamer library used, from 3 to 194 amino acid rotamers were considered at each variable position. Our resulting benchmark set covers thus a wide range of combinatorial spaces (from 4.10 26 to 2.10 249 ) and allows us to evaluate different combinatorial optimization problems of varying complexity.
GMEC-based designFirst, we evaluated the performance of CFN and ILP methods for solving the GMEC identification problem exactly and compared them against the exact CPD-specific method DEE/A*. We compared the CFN solver toulbar2, the ILP solver cplex and the DEE/A* implemented in the Osprey software on the benchmark set of 35 design cases (Supplementary) and present the results in. Out of the 35 design cases, the CFN solver toulbar2 and the ILP solver cplex solved, respectively, 30 and 27 cases within the 100 h time-out, whereas the DEE/A* CPD-dedicated approach identified only 18 GMEC (). The DEE/A* method managed to find the 18 GMEC with CPU times ranging from a few minutes to 41 h. Only four cases (1MJC, 1CSK, 1SHF and 1NXB) corresponding to the exploration of small combinatorial spaces on small proteins took 51 min to be solved. The DEE step converged to a single solution in only three instances (1MJC, 1NXB, 1CSE) (Supplementary). The A* search successfully identified 15 further GMEC using the subset of rotamers remaining after the DEE step. It failed for 12 instances owing to time limit (10 cases) or memory limit (2 cases). In these cases, the size of the combinatorial search space of non-pruned rotamers after the DEE step ranged $10 19 to 10 36. This was not a sufficient reduction to enable A* to extract the GMEC from the subset of remaining rotamers with the available computational resources. Supplementary Table S3 gives fractions of times spent during DEE and A* for each instance. Using toulbar2 instead of A* after the DEE step allowed to quickly identify the GMEC for the 12 DEE/A* unsolvable instances. A* is therefore the limiting step for these 12 instances. Finally, the DEE step failed to complete within the 100 h time-out for five tests covering initial combinatorial spaces from $10 61 to 10 249 and the highest number of variable residues at the surface of the proteins. One can expect the surface residues to be more flexible than the buried residues, and such flexibility may then lead to a high density of conformations with similar energy and a corresponding increase in the complexity of the combinatorial space to be explored. These results clearly underline the limits of the DEE-based approach to handle large and complex problems. To improve the efficiency of the DEE-based approach, a preprocessing is usually applied to eliminate rotamers and pairs of rotamers of high energy, which are not expected to appear in the GMEC. We then performed such pre-filtering using a 30 kcal mol 1 threshold for rotamers and a 100 kcal mol 1 threshold for pairs of rotamers. Using these parameters in one instance (1CSE), the optimal solution after preprocessing did not match the GMEC obtained in the absence of this pre-processing step. However, when we increased the threshold for rotamers 30 50 kcal mol 1 , the optimal solution remained the same with and without preprocessing. Besides losing the guarantee of optimality, the preprocessing step did not improve the performance of DEE/A* in terms of the number of instances that were solved (18 GMEC identified out of the 35 cases) (Supplementary). Furthermore, seven instances required more CPU time for identifying the GMEC when preprocessing was used. The ILP solver cplex solved nine additional instances from our benchmark set (2DRI, 1UBI, 1CTF, 1CM1, 1BRS, 1LZ1, 2RN2, 3CHY, 1L63) compared with DEE/A* (). In all these cases, DEE/A* timed out during the A* search. Among these nine design cases, only two (3CHY and 1L63) cover combinatorial spaces of greater size ($10 92 and 10 94 ) than the largest combinatorial problem (1HNG $10 88 ) solved by DEE/A* (). The other 18 instances solved by cplex are the ones that were successfully solved by DEE/A*. Although the ILP solver was faster in 13 of these 18 instances, the time is overall similar for both methods. Nevertheless, the total number of solved instances shows that the ILP solvers can be more efficient for several design cases, as previously reported (). More concise quadratic programming (cplex QP solver) and partial weighted MaxSAT (akmaxsat, MaxHS and BinCore-Dis solvers) models were also tried, but they all failed on all instances. The CFN solver toulbar2 solved, respectively, 12 and 3 more cases compared with DEE/A* and cplex (). Therefore, CFN only failed on five instances (1PGB, 1ENH, 2CI2, 3HHR, 1STN) out of the 35 handled. These instances correspond to vast combinatorial spaces (from about 10 61 to 10 249 ), which mostly include variable residues scattered over the three layers of the proteins (Supplementary). There are no cases solved by DEE/A* or ILP that CFN could not solve. Moreover, CFN outperformed the two other approaches by an impressive margin in terms of speed. Among the 30 instances solved by CFN and including large combinatorial spaces, 11 cases were solved in 51 s, 23 in 510 s and only five instances required a few minutes. Given its running time performance and its success rate for handling large protein design problems, the CFN approach appears as an appealing alternative to current exactNote: A 'M' indicates an exceeded memory size (128 GB) and a 'T' indicates an exceeded computation time (100 h). For the DEE/A* approach, the A* and the DEE associated with M or T indicate the step during which occurred the exceeding of memory or computation time.
Computational protein designCPD-dedicated methods, especially for solving highly complex GMEC-based design problems. There is no single explanation for the performance advantage of the CFN solver toulbar2 over the ILP solver cplex and the DEE/A* implemented in the Osprey. Indeed, solvers are complex systems involving various mechanisms. The effect of their interactions during solving is hard to predict. Moreover, the IBM TM ILOG ILP solver cplex is a totally closed-source industrial black box solver. Compared with the CFN solver toulbar2, Osprey uses a lower bound considered as obsolete in CFN () instead of the recent incremental stronger lower bounds offered by soft local consistencies such as EDAC (). This, together with the associated informed value ordering provided by these local consistencies, explains why the CFN approach outperforms the DEE/A* method. Considering ILP, it is known that the LP relaxation lower bound used in ILP is (by duality) the same as the Optimal Soft AC () lower bound when no upper bounding occurs. Because OSAC dominates all other local consistencies at the arc level, this provides an explanation for the efficiency of cplex compared with Osprey. Finally, compared with ILP, the formulation of the deeply non-linear problem is more direct in CFN. This likely contributes, together with the upper bounding, variable and value ordering heuristics of toulbar2, to the efficiency of the CFN approach compared with ILP.
Suboptimal ensemble generationWe also performed computational design tests to assess the ability of the CFN method to generate an ensemble of provably near-optimal sequence-conformation models in addition to the GMEC. The performance of the CFN approach was compared against DEE/A*. For this purpose, the 35 design cases of the benchmark set (Supplementary) were again investigated using the CFN toulbar2 solver and the DEE/A* implemented in Osprey software to access the set of sequence-conformation models comprised within an energy window of 2 kcal mol 1 of the GMEC energy. Out of the 35 design cases, the CFN solver toulbar2 managed to produce the suboptimal ensembles of solutions for 30 design cases, whereas the DEE/A* approach only successfully handled one instance (). The DEE/A* approach failed for 34 instances owing to time (30 cases) or memory (4 cases) limits. It only identified the set of near-optimal models for one instance (1SHF) among the 18 successfully handled for the GMEC problem (). Although this solved instance corresponds to one of the smallest investigated combinatorial spaces ($10 34 ) (Supplementary), $37 h of computation were needed to find the ensemble of lowenergy models compared with 51 s for the CFN approach. This running time is even 4$7 h required by the CFN method in the worst case (1L63) including an important combinatorial space ($10 94 ) and a large number of suboptimal solutions (8  10 8 ). The CFN method only failed to identify the near-optimal ensemble on the five instances (1PGB, 1ENH, 2CI2, 3HHR, 1STN) for which the GMEC problem was also unsolved (). In addition to the high success rate achieved by CFN, the method was also efficient: 10 cases were solved by CFN in 51 min, 15 required several minutes and only five instances needed several hours (). While the task of finding a set of low-energy sequence-conformation models proved to be an insurmountable computational hurdle for DEE/A* as implemented in Osprey, the CFN solver toulbar2 successfully solved most of the design cases tested. Moreover, the CFN approach gave access to sets of provably suboptimal solutions with outstanding running time performances. The CFN approach efficiently uses the knowledge of the GMEC solution in the enumeration procedure of the near-optimal models. The GMEC defines an upper bound corresponding to the energy of the GMEC  2 kcal mol 1. In CFN, this upperNote: A 'M' indicates an exceeded memory size (128 GB) and a 'T' indicates an exceeded computation time (100 h). For the DEE/A* approach, the A* and the DEE associated with M or T indicate the step during which occurred the exceeding of memory or computation time. 'n.d' indicates not determined. bound is systematically compared with the lower bound provided by local consistency enforcing. The DEE implemented in Osprey uses the same upper bound (parameter pruningE) but exploits a weaker lower bound. This likely explains the performance gap compared with the toulbar2 CFN solver.
Suboptimal ensemble analysisFirst, we analyzed the sequence and conformational variability of the near-optimal models obtained for four design cases (1CSK, 1TEN, 1UBI, 2PCY) of proteins adopting distinct structural folds (Supplementary). These instances include from 9 to 16 mutable residues and from 21 to 30 flexible residues (Supplementary). Within a window of 2 kcal mol 1 of the GMEC, the CFN-based approach produced410 5 sequence-conformation models for each of the four design cases (). The score of these models is lower by as much as $20 kcal mol 1 than that of the wild-type model (Supplementary Figs S2cS5c). In these ensembles of models, 144, 194, 199 and 294 unique sequences were found, respectively, for 2PCY, 1UBI, 1CSK and 1TEN design cases. Only few unique sequences were then generated compared with the high number of enumerated models within a small energy window of 2 kcal mol 1 of the GMEC energy. However, when the experimental construction of the protein library is considered, it is important to have access to a larger ensemble of distinct sequences. For this purpose, the outstanding performances of the CFN solver () could be harnessed to provably predict suboptimal models distributed on a wider energy window of the GMEC and thus attempt to generate more diverse sequence ensembles. For the four design cases, the wild-type amino acid was the most often either substituted by an amino acid of slightly larger size or conserved (Supplementary Figs S2aS5a). Nevertheless, the entire wild-type sequence of the protein was never found within the suboptimal ensembles. It is noteworthy that the mutable residues of glycine type were not found substituted by another amino acid type (Supplementary Figs S2a, S3a and S4a). The number of conformations adopted by each sequence decreases gradually as the energy value of the sequence becomes more unfavorable (Supplementary Figs S2dS5d). The superposition of the best conformation of each unique sequence showed that each flexible residue adopts almost the same rotamer in all best conformations (Supplementary Figs S2bS5b). Moreover, the orientation of mutable residue side-chains is similar in all the best models regardless the assigned amino-acid type. For the protein design problems studied here, we expected that mutations would favor the introduction of bulkier amino acids to fill up the free space available in the core of proteins. However, changes in amino acid sizes were subtle. A visual inspection of the 3D structures of mutants suggests that some slight adjustments of side chains and/or backbone of surrounding residues could enable accommodation of larger side chains, which were here assigned with high interaction energies. This lack of conformational relaxation seems also to be at the origin of the observed conservation of glycine amino acid types. Therefore, the sequence selection may be biased and restricted by the lack of flexibility of surrounding residues. These results highlight the key role of the local molecular flexibility to extend the accessible sequence space, as shown by previous work (). We then subjected each unique sequence of the four suboptimal ensembles to energy minimization to assess the effect of the relaxation of side chains and backbone freedom degrees on the energy ranking of the sequence ensembles. Overall, the minimization decreased the energy values of these models from $20 to 60 kcal mol 1 depending on the design case (Supplementary Figs S2cS5c). Nonetheless, the superposition of the structures before and after minimization only showed slight rearrangements of protein side chains and backbone. This clearly indicates that slight geometrical adjustments can significantly lower model energies. The conformational variability of these low-energy sequences were further investigated by carrying out an optimization step (with a E cut of 0.2 kcal mol 1 ), which enables all variable amino acids (mutable and flexible) to be repacked. Despite an E cut value, which is 10 times smaller, the number of conformations adopted by each unique sequence was found extremely high whatever the energy ranking of the sequence (Supplementary Figs S2dS5d). Therefore, the significant differences observed among mutants before minimization step, is probably the result of the discretization of conformational freedom degrees. The minimization step thus allows us to extend the accessible conformational space. Current trends in CPD refine the exact DEE/A* approach along various directions, allowing, respectively, for continuous rotamers (), for continuous () or discrete (,b) backbone conformation adjustments or both (). The CFN approach could further be extended to handle such flexibilities descriptions. In addition to lowering the energy and increasing the conformational variability of models, the geometry relaxation step reranks the sequence ensemble. The GMEC obtained after minimization (refined GMEC) does not match with the original GMEC. The energy values of the minimized suboptimal models are spread within an energy window up to $6 kcal mol 1 of the refined GMEC (Supplementary Figs S2cS5c). Therefore, with a E cut ofdiscrete integration (capturing entropic effects and affinity) to be directly tackled.
The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
S.Traor et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
kcal mol 1 , from 92 to 185 unique sequences depending on the design case would be removed of these minimized ensembles. Even on a small energy window, these results demonstrate the advantage of the post-minimization to re-rank and post-screen the most promising candidate sequences to evaluate experimentally. 4 CONCLUSION In this article, we have formulated a novel open-source based computational framework to provably identify the GMEC as well as a set of low-energy protein sequences within the context of atomic protein design. This CFN-based approach provides remarkable speedups, allowing us to explore vast sequenceconformational spaces much more efficiently than the DEE/A* algorithm or state-of-the-art ILP algorithms. Despite the significant change in terms of problem complexity, it is surprising to see that this efficiency extends to the generation of gap-free sets of suboptimal solutions. This article and the companion open-source computational tools we offer will therefore facilitate the optimization of new CPD systems, without requiring expensive computational resources. Ultimately, we hope that CFN technology will allow complex CPD problems, mixing optimization of flexible systems and Computational protein design
