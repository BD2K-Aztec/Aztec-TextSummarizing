Hidden Markov models (HMMs) are probabilistic models that are well-suited to solve many different classification problems in computation biology. StochHMM provides a command-line program and Cþþ library that can implement a traditional HMM from a simple text file. StochHMM provides researchers the flexibility to create higher-order emissions, integrate additional data sources and/or user-defined functions into multiple points within the HMM framework. Additional features include user-defined alphabets, ability to handle ambiguous characters in an emission-dependent manner, user-defined weighting of state paths and ability to tie transition probabilities to sequence. Availability and implementation: StochHMM is implemented in Cþþ and is available under the MIT License. Software, source code, documentation and examples can be found at
INTRODUCTIONSince the first application of hidden Markov models (HMMs) to biological sequences in the 1980s, they have become a fundamental tool in bioinformatics. This is because of their robust statistical foundation, conceptual simplicity and malleability that allow researchers to adapt them to fit diverse classification problems (). Many HMM-based programs have adapted the basic HMM framework to solve unique biological problems, such as development of generalized HMM (GHMM) to simplify state durations (), stochastic sampling to predict alternative splicing () and integration of additional data sources into the decoding algorithms to improve gene predictions (). Currently, there are a small number of different applications, libraries and compilers available to quickly develop HMMs, such as MAMOT (SchutzSchutz and), HMMoc (), HMMlib (), GHMM (), HMMConverter (), R HMM and Matlab. Each tool differs in the level of expertise required to use them and the features available to the users (see). StochHMM is a program and C library that provides the ability to implement HMMs quickly from a simple text file. It provides accessibility to a broader audience by providing many of the features available in the higher-level libraries, without requiring the same level of programming skill. In addition to providing traditional HMM algorithms, StochHMM implements a few stochastic decoding algorithms and provides multiple ways to integrate additional data sources into the model either as multiple independent or joint emissions. The C library provides the flexibility to integrate additional user-defined functions into the HMM framework, thereby allowing us to integrate existing bioinformatics tools into the HMM. in the human genome (). In collaboration with Diane Schroeder, we created a simple 2-state model, which uses a unique alphabet based on percent methylation of CpG sites, to classify high and partial methylation domains in multiple Methyl-Seq datasets (). The StochHMM library was used to implement Ploidamatic, a 12-state HMM to identify copy-number variation using nextgeneration whole genome sequence from a diploid organism (Porter et al., submitted for publication). We are currently using StochHMM to create gene prediction models that integrate existing bioinformatics tools and additional data sources into the HMM framework to improve gene prediction.
CONCLUSIONSStochHMM is a flexible hidden Markov model program and C library that gives researchers the ability to implement traditional HMMs from a simple text file. The application provides similar performance and features previously available only in libraries, such as HMMoc. It provides multiple ways to integrate additional dataset or user-defined functions into the HMM framework. To encourage the use of StochHMM, we have set up forums on Google Groups to assist researchers in development of HMMs using StochHMM. We look forward to comments, suggestions and future collaborative development of StochHMM.
HMM ARCHITECTURE StochHMM implements the traditional HMM architecture (discrete or continuous emissions, and constant transitions). It also supports multiple joint or independent discrete emissions and continuous emissions per state, lexical transitions (transitions that are based on the observation sequence) and user-defined emission/ transition functions (see Table 1). Like other HMM application/ libraries, StochHMM supports user-defined alphabets. However, StochHMM also allows users to define ambiguous alphabets and provides multiple ways to score ambiguity in an emissiondependent manner. Finally, StochHMM allows researchers to violate the strict probabilistic framework of an HMM, thereby giving them the power to produce conditional random field models (Brejovand Brown, 2008). These additional features provide the researchers the freedom to adapt the HMM architecture to generate more powerful and accurate models. 3 PERFORMANCE StochHMM is comparable with HMMoc in speed and memory usage. In 10 side-by-side comparisons with HMMoc using the common occasionally dishonest casino HMM and a 30 Mb sequence, StochHMM performed Viterbi decoding analysis in an average of 18.15 s (1.36 GB RAM) compared with average of 10.83 s (2.30GB RAM) for HMMoc. Calculating the posterior probability for the same sequence, StochHMM calculated the posterior in an average of 52.8 s (1.40 GB RAM) compared with 148.1 s (0.98 GB RAM) for HMMoc. An additional factor for researchers to consider is the amount of development time that is required to get a model to run. Starting with model in hand, StochHMM provided the ability to run, test and tweak the model without any additional code development, whereas HMMoc requires additional code development to run or change the model and requires recompilation of the code after each change to model. 4 CASE STUDIES We have used StochHMM to develop models to solve a diverse set of problems. StochHMM allowed us to quickly develop a 4-state model called SkewR, which predicts R-loop formation *To whom correspondence should be addressed.  The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
3 3 3 3 3 Linux, Windows, OS X None a Stochastic decoding available with further code implementation. "3" indicates support for feature within the application. (Kulp et al., 1996; Lam and Meyer, 2009; Lunter, 2007; Sand et al., 2010; SchutzSchutz and Delorenzi, 2008).
P.C.Lott and I.Korf at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
