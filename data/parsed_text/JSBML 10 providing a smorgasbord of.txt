JSBML, the official pure Java programming library for the Systems Biology Markup Language (SBML) format, has evolved with the advent of different modeling formalisms in systems biology and their ability to be exchanged and represented via extensions of SBML. JSBML has matured into a major, active open-source project with contributions from a growing, international team of developers who not only maintain compatibility with SBML, but also drive steady improvements to the Java interface and promote ease-of-use with end users. Availability and implementation: Source code, binaries and documentation for JSBML can be freely obtained under the terms of the LGPL 2.1 from the website http://sbml.org/Software/JSBML. More information about JSBML can be found in the user guide at
IntroductionThe Systems Biology Markup Language (SBML) is a widely used format that enables easy distribution of systems biology data, models and diagrams, and it allows the easy exchange of data and models between a variety of software systems (). Given the wide coverage of the latest SBML version, it is unsurprising that the standard is relatively complex. An appropriate computational architecture greatly simplifies V C The Author 2015. Published by Oxford University Press.
3383This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited., including all community-approved (and several prototype) SBML packages for L3, as described later. One important aspect of SBML is its ability to provide additional capabilities to encode specific types of systems biology models. These capabilities are extensions of the core SBML L3 format and are known as 'packages'. Although many models can be fully represented using only the core set of SBML constructs, these extensions support (i) other model features that cannot be formulated with the SBML core standards and (ii) additional constructs that enable users in specific fields to formulate, interface and use the SBML framework more easily within their modeling approaches. SBML packages enable the ability to build models that encompass several formalisms within one overall framework. Several tools today use JSBML 1.0 in this way and encode multiple types of systems biology models; examples include iBioSim (), KEGGtranslator () and GINSim (). In addition, because JSBML is built to be an interpreter for SBML, this functionality, represented by a single data structure, can easily be embedded into existing Java programs. Since its inception, JSBML has fostered a community of active developers who aim to provide regular code updates, provide major and minor bug fixes to releases, and partake in discussions on standards for the systems biology modeling community (COMBINE,). These community interactions have helped improve JSBML substantially since its launch.
Results
ImprovementsJSBML's first public release was in 2011 () and it has since undergone considerable change and expansion. A major goal of the initial release was to present a software package which differentiated itself from libSBML, JSBML's C language counterpart (), and its Java-language bindings. Since then, JSBML has maintained compatibility with SBML and libSBML and has introduced extra functionalities.In addition to support for SBML L3 core and packages, JSBML 1.0 has incorporated improvements to software efficiency. For instance, improvements to internal interfaces now speed up model input/output operations. The different identifier namespaces in SBML are now managed with an IdManager interface which is able to reconcile redundant identifiers among packages. A new Math infix parser is able to mimic the same behavior as the libSBML L3 Math parser and can handle complex mathematical formulas. The manipulation and merging of Units in SBML has also been greatly improved. Also, several features have been added to JSBML 1.0 to improve end-user convenience and accessibility. For instance, various utility methods have been added that allow users to manipulate JSBML's in-memory data object. Furthermore, user-defined objects can be temporarily added to the JSBML data structure for any model component. XML annotations in SBML are read as XMLNode object instead of Strings, making it easier to manipulate non-standard annotations in SBML. Advanced logging functionalities via the Apache log4j project allows users to monitor JSBML actions. Finally, JSBML has been better integrated with other software such as Apache Maven, a dependency management tool, BioJava 3 (), a bioinformatics toolbox, and CellDesigner (), a biochemical network modeling and visualization tool.
Support for SBML packages
Approved packagesAt the time of writing, all approved SBML L3 extensions are supported by JSBML 1.0. We describe the support below, and provide insights into the mapping between modeling formalisms and the corresponding JSBML data objects. An abbreviated version of the JSBML class hierarchies are presented in Supplementary. The JSBML User Guide has figures that lay out the JSBML class hierarchy for each SBML package, displaying the full capabilities of the JSBML data objects that encode each package. In, approved SBML packages constitute the first four rows. The Qualitative Models package (qual, for short) allows species in a model to have non-quantitative or non-continuous levels (). This may manifest as Boolean or discrete values, and is primarily employed in modeling gene regulation, signaling pathways, logical/Boolean networks (), and Petri nets (). Flux Balance Constraints (fbc,) encodes components for constraintsbased modeling (), which employs a class of models in which the canonical stoichiometric relations between reactionsand metabolites are specified as constraints for mathematical optimization. Layout provides the ability to encode graphical information for model diagrams. The structure for this extension mirrors the SBML core hierarchy by introducing graphical counterparts to reactions and species. The fourth approved package, Hierarchical Model Composition (comp) provides a generic framework to encode models as hierarchical entities in SBML (). JSBML's comp implementation provides access to elements within sub-models and interfaces with other models.
Draft packagesDraft specifications are available for the remaining SBML packages; they are encoded in JSBML with varying maturity. JSBML fully supports the current specifications of seven packages whose community approvals are pending: Spatial Processes (spatial,) specifies geometric descriptions of biochemical models' components using a cellular coordinate system that can describe non-uniform molecular distributions, diffusive transport and spatially localized reactions; Groups (groups,) agglomerates SBML model elements and can be linked to annotations and SBO terms () to contextualize sets of objects for other programmers and modelers; Arrays (arrays,) extends SBML variables to include arrays of values, thereby representing repeated or regular model structures more efficiently; Required Elements (req,) allows a model to indicate which components have had their mathematical meanings changed by (e.g.) the use of another SBML package; Distributions (distrib,) encodes statistical distributions and their sampling; Dynamic Structures (dyn,), which supports the definition of dynamical behaviors for model entities; and Rendering (render,), used in conjunction with layout to provide symbol and style information for diagrams. The last package, Multistate and Multicomponent Species () is still under development. The JSBML project is committed to support all SBML packages as their specifications come out and are deemed stable by the community.
JSBML and package formationSome package specifications have been influenced by JSBML development. For example, protocols for validation and flattening of array constructs in the arrays package. Prior to the development of arrays in JSBML, the specification lacked important validation rules that serve as quality controls for math operations done with arrays data structures. JSBML also provided the environment to ensure arrays was compatible with other SBML L3 packages, helping to build a more robust specification. Finally, JSBML development of the arrays package was used to generate simulatable examples for the SBML L3 arrays specification. Therefore, JSBML provides a means to test and implement new package development for future versions of SBML.
ConclusionsJSBML version 1.0 marks the maturation of this software library as an essential component for any systems biology pipeline that runs in the Java Virtual Machine, and joins other biological exchange format interpreters () to support users' ability to disseminate models in a diverse array of modeling formalisms.In addition, as SBML is updated and novel modeling techniques arise, the active, open-source community behind JSBML will continue to provide a comprehensive, computable interface for systems biology models.
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
N.Rodriguez et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
