Motivation: Calculating multiple protein structure alignments (MSAs) is important for understanding functional and evolutionary relationships between protein families, and for modeling protein structures by homology. While incorporating backbone flexibility promises to circumvent many of the limitations of rigid MSA algorithms, very few flexible MSA algorithms exist today. This article describes several novel improvements to the Kpax algorithm which allow high quality flexible MSAs to be calculated. This article also introduces a new Gaussian-based MSA quality measure called 'M-score', which circumvents the pitfalls of RMSD-based quality measures. Results: As well as calculating flexible MSAs, the new version of Kpax can also score MSAs from other aligners and from previously aligned reference datasets. Results are presented for a large-scale evaluation of the Homstrad, SABmark and SISY benchmark sets using Kpax and Matt as examples of state-of-the-art flexible aligners and 3DCOMB as an example of a state-of-the-art rigid aligner. These results demonstrate the utility of the M-score as a measure of MSA quality and show that high quality MSAs may be achieved when structural flexibility is properly taken into account. Availability and Implementation: Kpax 5.0 may be downloaded for academic use at http://kpax.
IntroductionCalculating multiple structure alignments (MSAs) of proteins is an important step towards understanding the evolutionary and functional relationships between different proteins and protein families (). Calculating high quality structural alignments can be crucial for the accurate modelling of three-dimensional (3D) protein structures by homology (), and can improve the generation of MSA-based sequence profiles for protein fold prediction (). Many algorithms for calculating protein structure alignments (SAs) have been described and reviewed in recent years (), and several of these can calculate MSAs. Some examples of multiple structural aligners are SSAP (), MUSTA (), CE-MC (), MultiProt (), POSA (), MAMMOTH-multi (), Vorolign () MUSTANG (), PROMALS3D (), BLOMAPS (), SALIGN (), MISTRAL (), 3DCOMB (), MAPSCI (), Smolign (), msTALI () and mulPBA (). Most of the above approaches first use dynamic programming (DP) to align pairs of structures, and they then progressively merge the pair-wise alignments to make a MSA. A few approaches subsequently optimize the resulting MSA using distance-based (e.g. CEMC and MAMMOTH-multi) or energy-based (e.g. MISTRAL) minimization techniques. However, when aligning many structures, the progressive alignment approaches can become computationally expensive because they require an initial set of all-against-all pair-wise alignments to build a guide tree, which means that the computational cost scales as O(N) 2 in the number of structures, N. In order to avoid such computational costs, the MAPSCI and mulPBA algorithms build a multiple alignment with respect to a given 'pivot' structure, which leads to a computational cost of O(N). But this requires prior knowledge of which structure should serve as the pivot. An effective alternative to conventional 'row-first' multiple alignment algorithms is 3DCOMB (), which uses a 'column-first' approach to identify 'highly similar fragment blocks' to guide the calculation of MSAs. While 3DCOMB has been shown to give excellent MSAs (), the complexity of its column-first algorithm also appears to scale as O(N) 2 in the number of structures. Because it is difficult to optimize simultaneously the number of aligned residues and their C a root mean squared deviation (RMSD) (), different structure aligners make different number/ RMSD trade-offs which can lead to producing locally different alignments, even within proteins that share common motifs. Thus, current SA algorithms can introduce errors or inconsistencies even in pairwise alignments (), and these errors can accumulate considerably in MSA algorithms that progressively merge multiple pair-wise alignments. Furthermore, such effects can confound efforts to compare different MSA algorithms against reference SAs, because the programs used to calculate the reference SAs are themselves subject to the same number/RMSD trade-off problem. Incorporating backbone flexibility offers one way to tackle such problems. Although some flexible SA algorithms have been described, such as FlexProt (), FATCAT (), POSA (), FlexSnap (), Matt () and RAPIDO (), still only a very few algorithms can flexibly align multiple structures. Furthermore, other 'flexible' aligners such as Vorolign () and GR-Align (MalodDognin and Pr zulj, 2014) can align pairs of structures that cannot be completely superposed rigidly, but they do not perform superpositions. To my knowledge, the only aligners that can calculate multiple superpositions flexibly are POSA (), Matt () and Smoalign (). POSA essentially extends the pair-wise FATCAT approach to MSAs. Both POSA and Smolign calculate partial-order alignment graphs, i.e. lists of locally aligned segments which are common to all structures but which are not necessarily sequential in the primary protein sequences. In contrast, both Matt and Kpax calculate strictly sequential MSAs which do not allow non-sequential permutations of residues. Unfortunately, POSA is publicly available only as a web server (), which makes it infeasible for large-scale studies, and Smolign is no longer available for download. While the original Kpax pair-wise alignment algorithm is sufficiently fast to be able to search large 3D structural domain databases in just a few seconds, the first version was limited to performing only rigid-body superpositions of entire protein structures. This article describes several extensions to the earlier Kpax algorithm () which allow pairs of proteins of arbitrary size (including multi-domain proteins) to be aligned flexibly, and which allow multiple proteins to be assembled into a MSA using a pivot-based approach. It seems obvious that a pre-requisite for calculating high quality MSAs is to begin with an algorithm that can calculate high quality pair-wise SAs. However, there does not yet exist an accepted standard for assessing the quality of pair-wise alignments or MSAs. 3DCOMB (), calculates its MSA quality measure from the pair-wise TM-score () taken over all fully aligned columns. On the other hand, for columns with an occupancy of 70% or more, mulPBA uses a quality measure based on a weighted average of the numbers of residues whose pairwise distances fall within certain given distance ranges (). This may be considered as an extension of the Local-Global Alignment (LGA) scoring method which calculates a weighted average over several number/RMSD bins of a pair-wise alignment (). More recently, the STOVCA program () has been proposed to compare the quality of structural superpositions calculated by other pair-wise aligners, but this program is limited to evaluating pair-wise superpositions using its own internal pair-wise alignment algorithm.proposed a method for measuring SA quality based on information compression, but this approach is also limited to pair-wise alignments. Thus, there exists a need for a simple and general way to compare the quality of both the alignments and the corresponding superpositions of different MSA algorithms. To try to address the problem of comparing different SA algorithms, this article proposes a novel atomic Gaussian based MSA scoring function, called 'M-score', which circumvents the number/RMSD trade-off problem. In previous studies,showed that 3DCOMB gives highly competitive rigid MSAs compared to MAPSCI, MAMOTH, Matt, BLOMAPS, MUSTANG and MultiProt when applied to the large Homstrad () and SABmark () benchmark sets, andshowed that Matt gave the best overall performance on a sub-set of their challenging SISY benchmark. Therefore, a similar large-scale comparison using these datasets is presented here to compare Kpax with 3DCOMB as an example of a state-of-the-art rigid multiple aligner, and with Matt as the best available flexible multiple aligner.
Methods
Normalized atomic Gaussian overlap SAsKpax pair-wise SAs are calculated using two C a-based scoring functions, both of which are based on Gaussian density distributions. In the main scoring function, each C a atom is represented as a normalized 3D atomic Gaussian shape-density distribution.where r  jxj is the distance from the nucleus and r is the atomic radius. I put r  1:4 A  , which is slightly less than the van der Waals radius of 1.5 A  often used in molecular mechanics force fields. A similar 3D Gaussian representation has been shown to provide an effective model of molecular shape for small-molecule shape comparison and virtual drug screening (). It is well known that Gaussian functions have special mathematical properties. For example, it has long been known that the overlap between a product of two Gaussian functions is also a). In particular, it can be shown that the 3D overlap between two of the above normalized 3D Gaussian functions on atoms i and j located at x i and x j and separated by a distance R ij  jx i  x j j is given by G ij   /x i /x j dx  e R 2 ij =4r 2 :This overlap expression has the nice property that it gives a value of one unit when two C a atoms are perfectly superposed because e 0  1. Furthermore, when the distance between atoms i and j exceeds the sum, S, of their C a radii, we have S  2r and e R 2 =S 2 tends to zero very rapidly when R > S. Thus, while other Gaussian scoring functions have been used to provide probabilistic or 'elastic' scoring functions in previous SA algorithms, notably STAMP () and DALI (), it can be seen that the form of Equation 2 is rather special, and is certainly not arbitrary. Using the above physical model of protein shape, a SA between two proteins may be scored by summing pairs of Gaussian overlaps to give a global alignment score, or 'G-score'where the coefficient l ij  1 when residue i of the first protein is aligned to residue j of the second protein, and zero otherwise. However, the above scoring function requires that a pair-wise alignment and 3D superposition are already known, which is initially not the case. Therefore, in order to identify candidate aligned fragment pairs (AFPs) for least-squares fitting and superposition, Kpax calculates an initial pose-invariant similarity score for all possible residue pairs using a scoring function based on a sliding window of 7 residues on each chain (i.e. 6 C a pairs, around the pair of interest), and using products of normalized Gaussian overlaps at each position, which I call 'K-scores', as described previously (). Products, rather than sums, of local Gaussian overlap scores are used to calculate an initial alignment in order that a pair-wise K-score tends rapidly to zero whenever any of its component distances are large. Thus, only those residue pairs that share highly similar local environments will have large K-scores. Applying dynamic programming (DP) to a matrix of such K-scores, produces an initial seed alignment, or 'K-alignment', from which runs of 4 or more pairs (AFPs) having large K-scores may be identified and used as 3D superposition seeds. The K-alignment of a pair of similar protein domains typically contains up to about 10 AFPs, whereas a pair of large domains with many similar secondary structure elements may give up to around 50 AFPs. For each candidate 3D superposition seed proposed by a K-alignment AFP, an all-against all matrix of C a G-scores (the 'Gmatrix') is calculated, from which a global alignment may be calculated by DP with no gap penalties. The residue pairs extracted from the resulting 'G-alignment' are then used to define a new 3D leastsquares fitting transformation, and the cycle is iterated until convergence (typically just 3 or 4 iterations are required). The G-alignment that gives the best global G-score is then retained as the the 'optimal' global alignment. From my experiments with the examples presented here, using any value of r that differs much from 1.4 A  generally gives poorer alignments (details not shown). Hence, putting r  1:4 A  appears to be numerically 'optimal' in practice, as well as theory.
Detecting conserved motifs using tiled DPAlthough Kpax uses the very fast and robust quaternion minimization least squares fitting method of, and only a relatively small number of least-squares fits are necessary, the overall computational cost of the above procedure scales as O(N) 2 in the number of residues to be aligned. This makes it is relatively expensive to align large multi-domain proteins by iterating on multiple candidate G-matrices. Furthermore, it is possible that the optimal DP trace-back from the K-matrix might not contain any 3D fitting seeds that correspond to an optimal 3D G-alignment. Therefore, when one or both proteins has more than 120 residues, a series of small 'tiled' SAs is calculated, in which each protein is divided into overlapping strips of 72 residues, and a local SA is calculated between each strip of one protein and the whole of the other protein using DP on the tiles of the K and G matrices. For example, when aligning two proteins each having 144 residues, a total of 6 tiled alignments are calculated using the residue ranges (1:71,1:144), (37:108,1:144), (73:144, 1:144), (1:144,1:71), (1:144, 37:108), (1:144,73:144). The 3D transformation from the tile that gives the greatest G-score is retained and used in a final DP iteration on the the full G-matrix. This approach is easily generalized to the case where the number of residues is not a whole multiple of the tile size.where F is the number of AFPs in the global alignment, f is the average number of fragments in a tile, T is the number of tiles of size n, and where n < N and T ( N. Furthermore, tiling allows the possibility of finding good local 3D seeds in the K-alignment which might not appear in the (globally optimal) trace-back path of the full K-matrix. In other words, small conserved motifs may be detected in a tiled alignment whereas they might be completely missed in a global alignment. Since it is not known in advance whether a given pair of proteins will align well globally or whether a tiled alignment should be applied, Kpax first attempts a global alignment and if the global alignment M-score (see below) is less than 0.5, it applies a tiled alignment in order to find the best seed for a global alignment.
Flexible alignments using multiple DP boxessuperposition segment. Note, when superposing a moving segment to a rigid template structure, the coordinates of the neighbouring residues relative to the moving segment are taken into account whenever possible. Thus, the final flexibly aligned structure has few obvious gaps or tears in its backbone atom coordinates.
Pivot-first method of calculating MSAsIn Kpax, MSAs are calculated using a rigid pivot structure onto which the remaining structures are either rigidly or flexibly aligned and superposed. By default, in both rigid and flexible MSAs, each structure is used in turn as the pivot structure, and the MSA that yields the best overall M-score is retained as the pivot. Thus, for N structures, there will be N-1 alignments between the selected pivot and each of the remaining structures. A MSA may then be induced from the N-1 pair-wise alignments by introducing additional gaps as necessary to re-align the N-2 gapped pivot structures with the pivot of the first alignment. While this induced MSA (IMSA) is not necessarily optimal, it provides a fast way to identify highly conserved columns in the alignment. Any column of the IMSA which is occupied with 60% or more residues is noted as a highly conserved column. The IMSA is used to provide a look-up table for building a final MSA. Kpax first sorts the N-1 other structures by their G-score similarity to the pivot. It then takes the most similar structure as a seed alignment, and it builds the final MSA by incrementally aligning the remaining N-2 structures in a 'pile-up' manner onto this seed. Each in-coming conserved residue is biased to appear close to its position in the initial IMSA by calculating column-wise G-scores for a window of 6 16 residues around the corresponding IMSA position. Thus, the alignment of conserved regions may be further optimized by DP, and in-coming non-conserved residues have the opportunity to be re-aligned against the preceding structures. Consequently, the Kpax MSA algorithm may be considered as a 'pivot-first' hybrid between the row-first and column-first approaches. Although it is conceivable that one could use a guide-tree to align multiple pairs of flexibly aligned structures, this could lead to many false AFPs and many tears in the moving structures. The above pileup approach helps to ensure that the number of deformations to the flexible structures is small, and that each non-rigid structure is deformed only once. A pile-up approach also allows for easy parallel execution on multiple processors.
What is wrong with RMSD?There are two fundamental problems with RMSD as a quality measure. First, it is non-linear in the number of distances concerned. Second, RMSDs can hide many sins. Consider one column of a MSA of 10 structures, in which 9 of the C a atoms superpose perfectly, but one is displaced by 5 A  and therefore probably belongs to an adjacent column (recall that the distance between consecutive C a backbone atoms is normally 3.8 A  ). Suppose we calculate the RMSD with respect the average column coordinate (which for convenience can be assumed to be at the coordinate origin, and where the displacement is along one of the principal axes). This gives 9  0:5 2  1  4:5 2 =10 1=2  1:50 A . Now consider one column of a MSA of 20 structures, with one C a again displaced by 5 A . This gives 19  0:25 2  1  4:75 2 =20 1=2  1:08 A . In other words, increasing the number of rows has spread the displacement over more samples and hence apparently reduced the RMSD by about 30%. But one should not forget that RMSD has units of 'distance'/ ('number-of-pairs. ') 1/2. So it would be more precise to label each RMSD with the number of pairs involved, e.g. RMSD 10  1:50 A  , and RMSD 20  1:08 A . This reminds us that it is incorrect to compare or combine RMSD10 and RMSD20 directly because they were calculated using different distance scales. Consequently, a fairer way to compare these two cases is to extract the average deviations as RMSD 10 = ffiffiffiffiffi ffi 10 p  0:47 A  and RMSD 20 = ffiffiffiffiffi ffi 20 p  0:24 A . But this obviously amounts to not using RMSD in the first place. If we wish to score and compare SAs reliably, it seems much more desirable to call a gap for the displaced residue, and to award scores of 9 out of 10 (say) for the first example and 19 out of 20 for second. This is what the M-score aims to achieve.
MSA quality assessment using the M-scoreThe M-score extends the pair-wise C a Gaussian overlap model to MSAs of arbitrary dimensions. First, let N be the total number of rows (i.e. structures) in a MSA, C be the total number of columns, T be the total number of residues over all structures, and L be the number of residues in the longest structure. Thus, an 'ideal' MSA may be considered to have at least one row of L residues and the remaining T  L residues from the other structures would each align perfectly with one of the residues of the longest structure. This implies than many of the MSA columns must contain 2 or more completely overlapping C a atoms. A simple way to estimate this mutual overlap is to calculate an average coordinate for each column, and then to calculate the degree of overlap between this average coordinate and each of the column members. Using these ideas, the column overlap score C j with respect to the average 3D coordinate, c j , for the jth column may be defined as:where l ij is either 1 or 0 according to whether the position at row i and column j contains a residue or a gap, respectively, and x ij is the coordinate of the C a atom at row i and columns j. Note that one wrongly placed C a atom will reduce this score by at most one unit. On the other hand, if all of the C a coordinates in column j coincide with the average coordinate, then C j will be numerically equal to the number of residues in that column. Thus, a global overlap score may be calculated for the MSA aswhere the max function ensures that at least one unit is subtracted for each column, and thus deals with columns that contain only a few very poorly superposed C a atoms, which may occur at the termini of an alignment or in the loop regions around an AFP. If all of the C a atoms in each column coincide completely with the average column coordinate, then C  L and P C j1 maxC j ; 1  T, and hence M 0  0. On the other hand, in the worst possible case of no aligned residue pairs, we have c j  x ij for all i and hence C j  1 for all j. Therefore, for any MSA, M 0 will have the range 0 M 0 T  L. However, because it is more intuitive to let large scores correspond to good alignments, the above expression may be scaled and shifted using M  1  M 0 =T  L to giveT  L :With this scoring function, a perfect multiple alignment of any number of structures (e.g. between any protein and one or more identical copies of itself) would give a score of unity. Furthermore, for pairwise alignments, the factor T  L will be equal to the number of residues in the smaller structure, and a score of unity will correspond to the complete overlap of all C a atoms of the smaller structure with some subset of the C a atoms of the larger structure. If desired, the M-score may be multipled by T  Lr 3 to give an absolute quality measure in A  3 units. It may be noted that the M-score contains no gap penalties and has no distance bins or distance cut-offs. Its only potentially adjustable parameter is the C a radius, which in practice should be fixed at 1.4 A . Furthermore, by construction, the only way to maximize M is to have as few columns as possible of which some subset must each contain two or more maximally overlapping C a atoms. This means that the M-score smoothly circumvents the number/RMSD trade-off problem. In cases where two or more proteins share only a small motif, or where they have long unaligned N or C termini, it can be useful to restrict the M-score to a given block of the MSA. For example, to score the alignment of a motif between columns J and K, it is straight-forward to calculatewhere C JK and T JK denote the number of columns and total number of residues between columns J and K, respectively, and L JK is the longest chain within that block.
Comparing pair-wise SA algorithmsAs a first but important comparison,the other example pairs in both tables. In general, it can be seen that Matt tends to align fewer pairs for a lower RMSD, whereas FATCAT aligns more pairs for a higher RMSD. Of the rigid aligners, it can be seen that MUSTANG gives the poorest rigid alignment figures with an average of 125 pairs at 3.2 A  yielding M  0.398. More importantly, it can be seen from these two tables that for a comparable number of aligned pairs, a lower RMSD yields a higher M-score, and for similar RMSDs a larger number of aligned pairs yields a higher M-score. This shows that the M-score captures rather well the simultaneous objective of finding a large number of aligned pairs with a low RMSD. Overall, according to the M-scores,shows that Kpax produces better flexible alignments than both Matt and FATCAT, while Supplementaryshows that Kpax and 3DCOMB produce amongst the best rigid alignments.
Flexibly aligning multi-domain proteinsTo my knowledge, the FlexProt algorithm of) is the first structure aligner to have been developed to handle structural flexibility in large multi-domain proteins which cannot be rigidly superposed. According to the M-scores in, Kpax often produces better flexible alignments for the 18 structure pairs of Shatsky et al. (average Kpax M-score: 0.794) than both Matt (M  0.732) and FATCAT (M  0.689). Although the average numbers of aligned residues and residue identities are similar for Kpax and FATCAT (245 and 129 for Kpax compared to 254 and 132 for FATCAT, respectively), the lower average RMSD for Kpax (1.4 A  compared to 2.3 A  ) accounts for its greater average M-score. As in, Matt produces some very low RMSD alignments, but this is at the expense of finding fewer aligned pairs and pair-wise identities. It may be noted that Matt finds sub-optimal alignments in at least three cases (2bbm/1cll, 2bbm/1top and 1mcp/1tcr) in which the M-scores and numbers of aligned residues are significantly lower than those for Kpax and FATCAT. In contrast, Kpax finds only one sub-optimal alignment (1a21/1hwg) relative to the Matt and FATCAT alignments. Although FATCAT finds respectable alignments for all of the examples in Tables 1 and 2, in each case either Kpax or Matt produces a better alignment according to the M-score.Listed are the numbers of segments (S; not available for Matt), aligned pairs (A), aligned residue identities (I), the alignment RMSD in A  units (R) and the Mscore (M). The highest M-score for each pair is shown in bold. The Matt alignments were made using Matt-1.00 (). The FATCAT alignments were made using jFATCAT (). bThe A chain is used in all PDB structures except for 3hhr (chain B), 1cew (chain I), 1nsb (chain B) and 1bge (chain B).
Highquality multiple flexible protein structure alignmentsshows two examples of the rigid and flexible MSA superpositions produced by Kpax using the SABmark superfamily group104 ('sup-group104') and twilight-zone group202 ('twigroup202'). In this figure, the structures are coloured using a simple but informative 'rainbow' colour-coding scheme, in which the residues in consecutive columns of a MSA are coloured in consecutive colours of the rainbow. These examples demonstrate the benefit of using each member structure as a candidate rigid pivot structure. For sup-group104 (consisting of the four SCOP structures: d1lgpa_, d1dmza_, d1g6ga_ and d1gxca_), the best rigid MSA pivot is found to be d1dmza_, giving M  0.626 and 68 core columns, while the worst pivot (d1lgpa_) gives M  0.541 and 64 core columns. However, for a flexible MSA with d1lgpa_ as pivot, the above quality measures increase to M  0.779 and 97 core columns. On the other hand, the best pivot changes to d1g6ga_, giving M  0.784 and 98 core columns. This shows that the best pivot for a flexible MSA cannot necessarily be predicted from rigid pair-wise SAs. Whilesuggests that calculating a MSA for supgroup104 should be relatively easy, it also shows that aligning all three members of twi-group202 (SCOP codes d1l2wi_, d1k8kd1 and d1jyoa_) is much more challenging. In this case, the rigid Kpax MSA gives only 14 core columns and M  0.285. In contrast, the Kpax flexible MSA (lower right in) gives 51 core columns and M  0.750. This demonstrates the improvement that may be achieved on going from a rigid to a flexible MSA.
Two flexible MSA examples
The Homstrad, SABmark and SISY benchmarksThe version of Homstrad used here () consists of 1032 families of homologous protein families containing a total of 3458 structures. Each Homstrad family contains from 2 to 25 members, where no two members of any family have more than 90% sequence identity (). The Homstrad SAs were calculated using STAMP, MNYFIT () and COMPARER (). The SABmark dataset (version 1.65) contains multiple alignments for 3320 structures belonging of 425 superfamilies with low sequence identity and 1740 structures belonging to 209 'twighlight zone' families with very low sequence identity. The SABmark dataset has only sequence-based pair-wise reference alignments. It has been shown that these alignments contain mutual inconsistencies (), hence it impossible to reconstruct MSAs from the reference pairs. Consequently, it is not possible to calculate M-scores or core columns for SABmark. The SISY datasets were collected by, who calculated the SISY reference alignments using CE and DALI. SISYFamilies consists of 106 families of single chain SCOP domains with less than 40% sequence identity. SISY-pairs consists of 130 protein pairs with low sequence similarity drawn from the SISYPHUS database (). SISY-RIPC (repetitions, insertions,Column heading are the same as in. For each pair, the highest M-score is shown in bold. bThe A chain in all PDB structures is used here except for PDB code 1mcp (chain L). permutations and conformational variability) consists of 23 pairs which Berbalk et al. report to be difficult to align. Many of the SISY reference alignments are given not as full alignments but as 'trimmed' alignments, consisting of a small list of highly conserved reference pairs or MSA columns. Several of the examples in the SISY-Pairs and SISY-RIPC datasets contain non-sequential alignments or small motifs within large unrelated folds which can be difficult to detect. As noted by Berbalk et al., some aligners can fail when presented with a PDB file that contains more than one structure, or when a PDB file contains SEQRES records that differ from the ATOM records. Therefore, all SISY structures involving more than one chain per PDB file were excluded, and the remaining PDB files were cleaned by running Kpax with the '-preprocess' option to change HETERO amino acid records to ATOM records, and to remove all other HETERO and SEQRES records. After cleaning, 3DCOMB was found to fail with a memory fault on 2 of the SISY examples and Matt gave a memory fault or failed to terminate on 6 examples. Excluding the above cases left a total of 77 SISY-Families, 111 SISYPairs and 23 SISY-RIPC examples. Applying the same cleaning procedure to the Homstrad dataset detected 7 PDB files with duplicate or corrupted PDB chains, and these were also excluded. Additionally, 5 SABmark superfamily groups and 4 SABmark twighlight zone groups were eliminated because their reference alignments contained no pairs.presents results for the alignments calculated by Kpax, Matt and 3DCOMB for the above benchmark datasets. The Homstrad dataset provides superposed structures and a PIR-format MSA alignment file. Hence it is possible to calculate several common quality measures such as the number of fully aligned core columns ('#Core' in), the number of aligned pairs ('#Pair'), the number of aligned residue identities ('#Identity'), and the average RMSD over all aligned pairs. Additionally, since such global measures do not take into account local alignment quality, it is useful calculate the number of badly aligned pairs, and the number of superposed fragment pairs ('#SFP'), where a SFP is taken to be a run of three or more aligned pairs in which the distance between each pair does not exceed 3.5 A  , and where any pair-wise distance that exceeds 8.0 A  is counted as a distance violation ('#Viol'). The columns labeled " 'M 1C ' and 'M JK ' show the M-scores calculated for the full and trimmed MSAs, respectively, where M 1C ranges over all MSA columns and M JK is calculated between the columns containing the first and last pair of aligned residues. The values shown for the number of pairs, identities, distance violations, SFPs and RMSD values are normalized by the number of pairs of structures involved (i.e. for N structures, the normalization factor is NN  1=2). Supplementary Figures S2S10 show more detailed 'box-whisker' plots () of the results in. Spread-sheets of numerical results are provided as Supplementary Files. For this table, the RMSD values for the SABmark reference alignments were calculated using the pair-wise reference alignments to superpose the corresponding structures. The RMSD values for the SISY reference alignments were calculated by iteratively superposing the SISY structures onto an average coordinate for each reference column. Because several of the SISY reference alignments contain non-sequential SAs that cannot be fully aligned by sequential aligners, these datasets are grouped separately inSeveral revealing observations may be made from. First, it can be seen that some of the reference alignments contain many distance violations, notable the Homstrad and SISY-RIPC-seq datasets. As observed previously for multiple sequence alignments (), this means that structural reference alignments sometimes contain significant errors, and it is therefore dangerous to treat even well curated reference alignments as a gold standard against with different algorithms should be compared. In particular, for Homstrad, it can be seen that 3DCOMB, Matt and Kpax all achieve higher M-scores with lower numbers of cores columns and residue identities than the Homstrad reference alignments, while the Homstrad reference alignments give a higher average RMSD and more distance violations than these three methods. For the SISYRIPC-seq reference set, most of the distance violations come from just 3 pairs, with the pair d2bbma_/4clna_ having 114 distance violations, which is clearly incorrect, and the pairs d1ggga_/d1wdna_ and d1l5ba_/d1l5ea_ having 25 and 19 violations, respectively, which make them of doubtful quality. The large numbers of core columns calculated by 3DCOMB is impressive, and no doubt reflects 3DCOMB's strategy of aiming to produce many filled columns (), but this is often at the expense of higher RMSDs and more distance violations than Kpax and Matt. In contrast, Matt-flex gives amongst the lowest RMSDs and lowest numbers of distance violations on all datasets. However, with the exception of some of the trimmed SISY reference alignments, this is always at the expense of finding fewer aligned pairs and residue identities than the other alignments. It can be seen fromthat Kpax-flex produces the largest average M-score while also finding the greatest number of residue identities in all datasets except for Homstrad and the small SISYRIPC-nonseq group. Kpax-flex also finds the largest average trimmed M-score for the Homstrad and SABmark datasets, and it is interesting to note that average trimmed M-score for Kpax-flex is larger than that of the reference alignments for the SISY-RIPC-seq group. Furthermore, Kpax, Matt and 3DCOMB all find more aligned pairs, residue identities, and AFPs in the SISY datasets than are present in the SISY reference alignments. While the trimmed SISY reference alignments have high M JK values, which is to be expected, the rigid alignments calculated by Kpax and Matt for the full structures from the two SISY-Pairs datasets give lower RMSDs than the RMSDs of the SISY reference alignments. Taken together, these observations indicate that a high proportion of the SISY reference alignments contain sub-optimal alignments compared to those calculated by Kpax, Matt and 3DCOMB. The box-whisker plots in Supplementary Figures S5S10 further support this observation. Apart from the surprisingly high number of residue identities in the Homstrad reference alignments, the Kpax flexible alignments contain the greatest number of aligned identities in all datasets except for the SISY-Families-nonseq and SISY-RIPC-nonseq groups. Additionally, the final column ofshows that the flexible Kpax alignments contain the largest average number of SFPs in all datasets. While it might be argued that flexible Kpax is 'over-fitting' the 3D structures, it should be noted that the Kpax rigid alignments also contain the most SFPs for all datasets except for the SISY-RIPCseq and SISY-Pairs-nonseq groups. Because it would seem to be very difficult to match runs of 3 or more low RMSD pairs purely by chance, these results strongly suggest that the Kpax alignments contain more conserved structural regions than the 3DCOMB and Matt alignments, and indeed more than many of the reference alignments. More certainly, the results inshow that high M-scores are highly correlated with high numbers of SFPs, core residues, aligned pairs and low RMSDs. Therefore, these results demonstrate the utility of the M-score as a measure of MSA quality. Nonetheless, since current high quality alignments can still contain distance violations, a useful future extension could be to add a term to penalize such occurrences. It is worth mentioning that Kpax is considerably faster than 3DCOMB and Matt. Aligning the 77 SISY-Families MSAs using Kpax takes around 13 minutes for rigid alignments and 17 minutes for flexible alignments on a workstation with eight E5410 2.3 GHz processors and 12 Gb memory. In comparison, 3DCOMB takes 49 minutes for its rigid alignments and Matt takes 200 minutes for both rigid and flexible alignments.
MSA benchmark quality comparison
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Calculating flexible alignments may be considered as a natural extension of the above tiled approach, in which the tiles no longer have a pre-determined size. For Kpax flexible alignments, all residues are initially labelled as belonging to a default segment (Segment 0), and after the optimal rigid superposition has been calculated as described above, all pairs of residues that fall within a given distance threshold (3 A  , by default) are assigned to a new segment (Segment 1). The remaining Segment 0 residues of each structure are then considered as candidates for flexible refinement. More specifically, the first DP problem corresponds to the entire DP matrix, and consecutive runs of four or more residue pairs belonging to Segment 0 are identified and superposed by least-squares fitting. The initial DP matrix is then divided into three or more 'boxes', where the first box spans the first and last residue pairs of segment 1, thus leaving one N-terminal and one C-terminal box of the DP matrix, each of which contains candidate residues for flexible refinement. It is also possible for one or more DP boxes to be found within the interior of a superposed segment (i.e. segments do not necessarily contain continuous runs of superposed residues). In any case, each new DP box may be considered as a new SA sub-problem, which may be treated exactly as described above. Thus, by maintaining a list of DP boxes to be processed on a stack, the flexible alignment procedure continues recursively, and it terminates when no more DP boxes remain in the stack. The evolution of the DP matrix for the first few iterations of this procedure is illustrated schematically in Supplementary Figure S1. Each residue in the moving structure is transformed in 3D space at most two times: once during the rigid body superposition, and possibly once again if it belongs to a DP box that produces a High quality multiple flexible protein structure alignments
D.W.Ritchie at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Conclusions This article has described a novel approach for calculating flexible protein SAs by recursively dividing a DP scoring matrix into multiple boxes. Each box of the DP matrix corresponds to a rigid SA sub-problem. This allows flexible SAs to be calculated almost as easily as rigid alignments. This approach is easily extended to calculating flexible MSAs by flexibly aligning each mobile structure onto an automatically selected rigid pivot. This article has also described the M-score, a novel Gaussianbased measure of MSA quality. The results presented for three large benchmark datasets show that high M-scores correspond to SAs with high numbers of aligned pairs with low RMSD. These results show that Kpax, Matt and 3DCOMB generally produce SAs with more aligned pairs, residue identities and aligned fragments than are present in the Homstrad, SABmark and SISY reference alignments. It has also been shown that the rigid SAs from Matt and 3DCOMB, as well as several reference datasets, can contain a high proportion of pair-wise distances that exceed 8 A  , indicating the presence of significant alignment errors. While the flexible SAs produced by Matt are free of distance violations, these SAs are often much shorter than those produced by Kpax. In contrast, the full-length Kpax flexible SAs contain more residue identities and structurally aligned fragments than the Matt SAs, while still showing few distance violations and reduced RMSDs. Overall, these results show that high quality SAs may be achieved when structural flexibility is properly taken into account, and they support the utility of the M-score as a measure of MSA quality.
