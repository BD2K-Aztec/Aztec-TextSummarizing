Motivation: The growth of next-generation sequencing (NGS) has not only dramatically accelerated the pace of research in the field of gen-omics, but it has also opened the door to personalized medicine and diagnostics. The resulting flood of data has led to the rapid development of large numbers of bioinformatic tools for data analysis, creating a challenging situation for researchers when choosing and configuring a variety of software for their analysis, and for other researchers trying to replicate their analysis. As NGS technology continues to expand from the research environment into clinical laboratories, the challenges associated with data analysis have the potential to slow the adoption of this technology. Results: Here we discuss the potential of virtual machines (VMs) to be used as a method for sharing entire installations of NGS software (bioinformatic 'pipelines'). VMs are created by programs designed to allow multiple operating systems to co-exist on a single physical machine, and they can be made following the object-oriented paradigm of encapsulating data and methods together. This allows NGS data to be distributed within a VM, along with the pre-configured software for its analysis. Although VMs have historically suffered from poor performance relative to native operating systems, we present bench-marking results demonstrating that this reduced performance can now be minimized. We further discuss the many potential benefits of VMs as a solution for NGS analysis and describe several published examples. Lastly, we consider the benefits of VMs in facilitating the introduction of NGS technology into the clinical environment. Contact:
INTRODUCTION
Next-generation sequencingIn recent years, novel approaches in the development of massively parallel DNA sequencing chemistry technologies have resulted in a dramatic increase in the amount of DNA sequence data that is being produced (). As a result, these novel sequencing machines, often called second-generation or next-generation sequencing (NGS) technologies, have simultaneously reduced the cost of sequencing a human genome by a factor of41 million, while reducing the time required from years to a single day. Moreover, this process of improvement is continual: the amount of sequencing data obtained from an Illumina DNA sequencer, for instance, has quintupled in 2009 alone (), and to date, this trend shows no signs of reaching a plateau. In addition, the cost of sequencing hardware has also decreased, resulting in an extremely rapid adoption of this (). Although the scientific value of this immense and ongoing flood of data has been profound, it has created dramatic new bioinformatic challenges in managing and analyzing the resulting data. The 'mapping' of short DNA sequences ('sequence reads') to a reference genome, a frequent first step of analysis, typifies the problem. Although traditional DNA mapping software, such as BLAST () and BLAT (), are highly accurate, they operate at speeds that are orders of magnitude slower than the rate at which NGS sequence data can be generated (). This large (and continually growing) asymmetry between data generation and analysis capacity has forced a rapid evolution in the algorithms for read mapping. A recent example is provided by the Spliced Transcripts Alignment to a Reference () short read-mapper, which can process4550 million 76 bp reads/h, on a 12 core server. The requirement to rapidly adapt or develop bioinformatic tools suitable for the volume and nature of NGS data being generated by large-scale genomics projects worldwide is not limited to read mapping, but also implicates every step of the downstream analysis. An enormous collection of tools (both commercial and open-source) for NGS analysis are currently available, a small subset of which are shown in, grouped by analysis task. Even as the bioinformatics community has clearly responded to the need to develop new tools for NGS analysis, the diversity of available tools has also paradoxically created another level of complexity, hindering the potential impact of this technology. In a typical NGS analysis, for instance, 58 separate bioinformatic tools might be required to map reads, call sequence variants, analyze splicing patterns, assess differential expression and perform gene set enrichment analysis [e.g. DAVID (Da Wei. Ideally, these tools would be installed and *To whom correspondence should be addressed.
yThe authors wish it to be known that, in their opinion, the first two authors should be regarded as joint First Authors. configured in such a way that the raw sequence data could be pushed through each of the tools sequentially (in a bioinformatic 'pipeline') in a largely automated way, to generate biologically meaningful results. Creating such a pipeline first requires end users to download a number of individual programs, in addition to dependencies, such as gene annotation files, while ensuring that the format of the annotations is compatible with all of the tools. Using multiple NGS analysis programs also presents other challenges: despite many tools having a standard form of input, in many cases the resulting output from one program cannot be directly used in a subsequent tool without additional (often minor) reformatting to ensure compatibility. Furthermore, most NGS programs have a wide variety of specific parameters that need to be set, all of which may produce subtle or gross differences in the output. Although default values are generally included, end users may not often understand the precise impact of changing these values for their analysis without investing substantial time to perform systematic testing. A final complication in this scenario arises from the constant and asynchronous development and release of individual software tools, which can lead to losses of compatibility and breakdowns in established analysis pipelines when software is updated. The end result of this situation is that the process of establishing and maintaining a bioinformatic pipeline is neither trivial nor does it foster reproducibility of analysis results, given the wide variety of tools and parameters involved (). The impact of the complexity of NGS bioinformatic analysis is not limited to difficulties in extracting biological meaning from experiments, but it may also directly impede the adoption of NGS technology (e.g. within clinical settings where it has already been demonstrated to have enormous utility). Indeed, novel DNA sequencing technologies have empowered the concept of 'personalized medicine', whereby medical treatment is tailored to differences in individual patient genomes (). Despite the success of NGS-based studies of cancer () and rare diseases (), the use of sequencing-based diagnostics is still lagging far behind its use in research. Part of the reason for this is certainly the validation of such techniques, but another significant factor is likely to be the limited bioinformatics resources available within hospitals to perform sequence analysis. Although general IT resources are likely to be available in major hospitals and clinics, the specialized knowledge to install and optimize NGS bioinformatics software, and to configure these for a variety of clinical uses (e.g. cancer genomics, bacterial meta-genomics), is unlikely to exist. As a result of this lack of resources, the potential benefits of NGS technology will undoubtedly take longer to arrive as a standard of practice for medical diagnostics. In light of the problems highlighted above, there are several basic requirements that all bioinformatics tools developed for NGS analysis should ideally fulfill to offer the greatest benefit to the biomedical community:(1) Compatibility: Within the domain of NGS analysis, the data generated are principally images and DNA sequences derived from these images, although in practice the primary images are no longer retained. The past 56 years have seen the emergence of de facto standards for sequence files (FASTQ) (), sequence alignments(2) Facility to reproduce analysis: At present, a majority of NGS tools was designed to be used on a command line in a Unix environment. The effort involved in exactly recreating a specific configuration for a server with identical software and annotation used for a published analysisrepresents a significant barrier for direct comparisons between experimental datasets.(3) Open-source tools: There is a broad understanding that publicly funded academic software should be freely available to the entire research community, and the distribution of the source code obviously has numerous advantages. The distribution of open-source software not only allows other researchers the opportunity to critically evaluate the underlying algorithm, but examination of the methodology used can also serve as a mechanism to stimulate research into novel approaches to improve performance.
Centralized resources and cloud computingTo address these concerns, a practical method should be developed to distribute NGS tools that ensure that all tools work compatibly and allow a comprehensive analysis. An excellent example of such a package is Genome Analysis Tool Kit (GATK) () developed by the Broad Institute that, excluding initial read mapping, allows users to perform an integrated analysis using a single application. Individual tools within GATK (called 'walkers') must still be run individually at the command line, however, using all appropriate parameters. Other commercial software packages that allow for an integrated analysis are also available (Tables 1 and 2); however, the license fees required and proprietary/closed source code can be disincentives for their use by some laboratories. Simultaneously, the development of centralized resources, in contrast to tools meant primarily to be downloaded by end users, have also been developed. One popular example of such a resource is Galaxy, an open-source web-based platform developed by Penn State and Emory University for data analysis and manipulation (). Galaxy was developed in 2005, and the published description of the system 5 years later notes that the public web server processes $5000 jobs/day, clearly demonstrating the demand for tools for largescale integrative analysis. Within Galaxy, multiple steps in an analysis method can be saved and shared as a 'workflow', enabling others to precisely replicate the same process used by another group. Despite such useful features, Galaxy still requires users to either upload their data to the public Web site (presenting practical limitations when working with large amounts of raw sequence data) or to download the Galaxy software and configure it to run locally. Because the Galaxy software is currently not distributed containing a suite of bioinformatic software, a local installation presents similar issues for configuration of all of the individual software tools as discussed above. Although the Galaxy interface can be customized to include whatever tools are required, it is not clear that the system was designed to meet Clinical Laboratory Improvement Amendments/Health Insurance Portability and Accountability Act certification requirements for use within clinical settings (although it is possible that it could be modified in such a way as to do this). Therefore, despite its utility and popularity, Galaxy does not at the moment represent a simple, hands-off and pre-configured solution for NGS analysis for all potential users. Because of the significant computational resources required for NGS analysis, there has also been growing interest in the use of cloud computing to address current bioinformatic bottlenecks. The dramatic growth in remote computing services by such companies as Amazon (Amazon EC2), Microsoft (Windows Azure), Rackspace (Rackspace cloud) and Google (Google Cloud platform) now means that researchers have the option of simply paying for their computing requirements on an ad hoc basis, rather than building and maintaining their own physical computing infrastructure. For many small laboratories, this represents a highly cost-effective solution, especially when their demands for such hardware are highly periodic. These same cloud resources can be used for large-scale data storage and sharing, which is also an attractive option for small to mid-sized laboratories that do not wish to invest in computer hardware. The costs associated with the use of cloud computing for storage and analysis are low enough that it would not represent a barrier to their use, although the research community will likely still prefer 'permanent' repositories for data (e.g. Gene Expression Omnibus (GEO)/SRA at NCBI, Arrayexpress at EBI) for long-term data storage. Although cloud computing does offer many advantages for NGS analysis, there have been sporadic large-scale failures of cloud resources (e.g. Amazon EC2) in the past that have left popular hosted web services unavailable. In the context of highly critical, rapid turnaround diagnostic sequencing, the potential risk of such outages for cloud-based clinical NGS analysis might be considered too high.
VIRTUAL MACHINESAnother potential solution to the problems with NGS data analysis has arisen through an unrelated advance in computer software, namely, the development of virtual machines (VMs). The basic principle of a VM is the use of software to emulate the architecture, behavior or functionality of another computer system. As discussed below, because VMs can be created and distributed already containing the software that will run within the VM, they can be used to make collections of NGS tools available as a single downloadable unit.
Development of VMsThe implementation of the concept of a VM has evolved from pioneering work carried out by International Business Machine (IBM) in the 1960s and 70s (), with their development of VM operating systems for mainframe computers, to the enormous range of systems currently available. Although the term 'virtual machine' is used to describe a wide variety of systems, they can be broadly classified into two categories, based on the level for which they provide abstraction (). For the purpose of encapsulating analysis pipelines, we will focus on system VM where, using a virtual machine manager (VMM), an entire hardware platform is emulated. The VM thus encompasses software tools, libraries and operating systems and, when active, reserves both physical disk space and RAM on the underlying hardware (). Such VMs enable what are termed 'guest operating systems' (guest OS) to simultaneously operate on the same hardware as a native OS, but in strong isolation. Because an active VM is seen as a simple process to the host OS, it can readily be interrupted and its exact state saved to a file. This 'snapshot' can then be archived and reactivated at any time, including after being transferred to a different hardware platform. A number of different VMMs have been developed over the past decade (). Because of their capacity to abstract and share underlying hardware, the development of VM has also largely underpinned the growth of cloud computing services offered by companies such as Amazon, Google, Microsoft and others. The growth of VMs has also been aided through efforts of commodity processor manufacturers [e.g. Integrated Electronics (Intel), Advanced Micro Devices (AMD)] to include hardware support for virtualization, in the form of new processor extensions to the x86 architecture. This has led to substantial improvements in both performance and flexibility of VMs. This growth in support, along with the utility of VMs within a variety of commercial domains, has created what is now a highly competitive market for VMMs. Interestingly, there has been little adoption of this software within the setting of academic and biomedical research, despite its potential to address the problems discussed above.
VMs as a solution for NGS software distributionThe application of VMs for the distribution of tools for NGS analysis has a number of potentially compelling advantages, largely because it offers the possibility of following an objectorientated paradigm of encapsulating data and methods together. Because VMs can recreate all aspects of an entire OS, it is possible for such virtual systems to be created already containing a variety of preconfigured bioinformatic software. The distribution of such a VM would then allow end users to circumvent issues of ensuring compatibility between various versions of software and compiling and configuring such tools. Given that many research centers with large NGS projects will likely have already invested substantial resources in testing and optimizing software choices and parameters for their analysis, a VM built to reflect this testing would allow many other centers to benefit from this effort and avoid 'reinventing the wheel'. Indeed, this idea of a central repository of validated file versions is similar to the approach taken for the distribution of various flavors of Linux. At the same time, the distribution of VMs containing bioinformatic pipelines, rather than individual tools, would also enable researchers to more easily replicate precise analysis steps performed by other groups, helping to ensure that conclusions drawn from such comparisons are not artifacts of software parameters used for analysis. This is facilitated by the fact that NGS-VMs exist as a collection of files, making it simple to save a 'snapshot' of the NGSVM used for a publication, which can then be directly shared with other laboratories. An illustration of the differences in current and potential VM-based NGS software distribution is shown in. For archiving, repositories such as GEO and ArrayExpress, which already store NGS data (which represents 99% of the space required for an NGSVM), it should be straightforward to store the data within a VM, allowing end users to download and rerun exactly the same analysis as the original authors. Such transfers could also be made directly to cloud compute resources to facilitate analysis or reuse of the published methods with new data. Although such 'NGSVMs' would not, by themselves, remove issues of different NGS software choices between groups, it is entirely likely that there would be coalescence around a few specific VMs developed by large institutes (e.g. genome centers), in the same way as has occurred for individual NGS tools [e.g. BWA () or Bowtie () for read mapping].. Schematic view of a VM. A typical system VM and the guest operating system (guest OS) will exist in the form of a number of files on the hard drive of the host operating system (host OS). The guest OS is accessed through software that runs through the hypervisor or virtual machine manager (VMM), which interprets instructions from the guest OS to execute these on the underlying hardware. Data and programs of the host and guest OS generally exist in strong isolation even on the same hardware, allowing large numbers of operating systems to co-exist independently Even with this possibility, however, it would remain straightforward for end users to download such a VM and adjust any of the parameters for the bioinformatic tools within the VM exactly as they would for the tool in a native system. Given the relatively small size of most NGS software, a slightly more sophisticated approach for NGSVMs could be to include a wide variety of software (e.g. several mappers and several variant callers) such that multiple pipelines could be available to end users. Indeed, given the fairly universal availability of high-speed Internet connections, even the distribution of NGSVMs containing preinstalled genomes and sequence databases could be a practical solution. The development of scientific peer-to-peer networking tools, such as BioTorrents (), could also simplify the distribution of large NGSVMs. With the addition of a simple graphical user interface to direct the underlying bioinformatic tools and access parameters for the programs, NGS VMs could dramatically simplify the process of performing NGS data analysis.
Published examples of bioinformatics VMsThe potential application of NGSVMs in research has already started to be recognized with the development of several examples of systems to facilitate specific types of analyses. For example, a recent publication described Cloud BioLinux, a publicly accessible VM composed of 4135 bioinformatics packages, along with documentation, desktop interface and graphical software applications (). This resource is publicly available as a web service, hosted on the Amazon EC2 cloud, providing high-performance infrastructure for bioinformatics computing that can be configured according to user requirements. This tool presents a useful and scalable solution that allows researchers to specify the required environment for their data, in addition to the time required for analysis. Although designed to run on compute farms, such as EC2, this is not a requirement of the system and local private versions can also be installed. Although this VM contains an extensive array of) identical versions of software and then configure them using equivalent parameters. Raw sequencing data are generally transferred from central repositories (e.g. GEO at NCBI), wheras annotation data and parameters are obtained from the laboratory or publication. Alternatively, an NGSVM used by the first laboratory (below black dotted line) could be redistributed as a single unit, either directly or through storage intermediates, that could include the annotation, precise parameters and the data used bioinformatic tools, it is not specifically tailored to NGS analysis, but rather represents a sort of comprehensive bioinformatics tool box. In contrast, other published VMs such as CloVR () use similar methodologies to Cloud BioLinux, but in this case the VM has been specialized to deal with a specific type of NGS analysis. Using either a cloud-hosted VM or a local instantiation, the CloVR VM uses a variety of software targeted toward metagenomics, microbial genomics and small genome phylogenetics. The CloVR VM features a dashboard function with color-coded pre-configured analysis pipelines that allow users to alter any parameters for the analysis though graphical user interface widgets (e.g. drop-down menus and radio buttons). Aside from downloading the required free VM software (e.g. VirtualBox or VMware), users only need to download the appropriate VM image file (.vdi or .vmdk, respectively) to get started. Another targeted NGSVM program suite for distributed de novo genome construction and motif finding has also recently been developed (), and Corwin and colleagues also demonstrate the applicability of their VM in running either locally or on a cluster. The development of such NGSVMs is highly encouraging; however, at the moment they remain highly targeted for specific analysis types. Additionally, although there are more examples of software developed and distributed as VMs, such as XperimentR () and NGSSNP (), a simple and comprehensive NGSVM pipeline, complete with scripts to automate underlying tools that could address all of the issues we have raised, has, to our knowledge, yet to be published.
VM PERFORMANCEAlthough the use of a comprehensive NGSVM would remove a number of critical bottlenecks in NGS analysis, VMs have historically suffered from the inherent inefficiency caused by the requirement of trapping and emulating privileged instructions within the host OS. This step is essential to allow commands from the guest OS in the VM to be converted and executed on the underlying hardware. Although significant improvements have been made in hardware support for virtualization in the past few years, any VM will still be limited by the underlying memory, central processing unit (CPU), input/output (I/O) and disk space requirements, all of which must also be shared with the host OS. Despite these constraints, the continuing trend for rapidly decreasing costs for memory and disk space, along with the modest requirements for most VM software, means that this does not represent a real limitation. Regardless, the systematic evaluation of the extent to which current VMs perform relative to native hardware has not been well explored, and so we examine this issue.
Performance of VMs as a barrier to practical useTo directly assess the impact of some of these constraints in a setting relevant for NGS analysis, we performed a benchmarking comparison using five different configurations on identical hardware (). We first examined VM performance through mapping and CPU intensive analysis of 8 million 100 bp RNA sequence reads using TopHat (), Casava and SAMtools () software. All software was run on either on a native Linux OS or a guest Linux OS running on either a Linux or Windows host OS using VMware or VirtualBox. As expected, most VM configurations suffered a performance penalty of $25% on average, relative to the same task run on the native Linux configuration. Although such a modest decrease in performance would likely be acceptable in most academic settings, one of the configurations (VirtualBox 4.2.Edition) was in fact remarkably efficient. Although this particular configuration averaged only an $7% decrease in speed compared with the native Linux configuration, in two of the benchmark tests (variant calling and multithreaded read mapping) it was actually faster than the native configuration. This VM/OS combination is of particular interest, given that many end users work in a Windows environment, whereas most NGS software is developed to run specifically on Linux machines. Given the large file sizes associated with NGS data, we also wanted to test the hard drive and file system performance of these configurations using the Bonnie utility, a file system benchmarking tool that measures specific parameters such as file creation, write, read and removal times (). As with the CPU tests, we found that the performance penalty of a VM was relatively modest, on average ($23%); however, there were again specific tests where VM configurations remarkably outperformed the native Linux configuration. Although our VM benchmarking was not exhaustive (especially given the number of VMs and bioinformatic tools available), the results nevertheless suggest that, perhaps contrary to common belief, VMs do not necessarily have significantly poorer performance compared with a native OS. In agreement with our results, other benchmarking tests have also concluded the computational 'cost' of VMs is relatively low compared with native execution on hardware (). In addition, because VMs physically exist as several files on the hard drive of the host machine, the entire system, and all the data it contains, can simply be transferred to newer hardware on a regular basis to further improve performance when required. Despite the caveat that the final performance will ultimately be highly dependent on the hardware setup, software tool configuration and the specific VM used, our results indicate that a suitable NGSVM could be configured in such a way that reduces its impact on performance. Given the interest in cloud computing, we also performed benchmarking of our VM on Amazon EC2 in an m1.xlarge instance. Although the results indicate a longer runtime on EC2, it is important to note that differences in the hardware used (e.g. processor differences, RAM available;), and the potentially way in which instances are managed on EC2, likely influenced performance results. More importantly, the Amazon cloud allows job scaling over orders of magnitude, such that the absolute time required for an analysis could be arbitrarily reduced by simply initiating additional instances and dividing the data among the instances. Although we cannot directly compare our local versus cloud-based results, the ease with which we could transfer and run our VM highlights the potential of these remote resources to enable small laboratories with no computation infrastructure to download a VM, populate it with their data, and then transfer this to a cloud compute center for rapid and on-demand analysis.
running Scientific Linux 6.3 on Windows 7 Enterprise
CONCLUSIONSThe advent of extremely rapid, inexpensive high-throughput DNA sequencing will likely be considered to be one of the most significant developments in the history of biomedical research. At the same time, the power of this approach has become limited by the very factors that made it revolutionary to begin with, namely, the ability to rapidly and cheaply produce massive amounts of sequence data. Although new bioinformatic tools have successfully dealt with specific challenges associated with analyzing NGS data, the creation of a large and disparate collection of tools has made it difficult to ensure reproducibility of computational analysis and is hindering the adoption of NGS technology. VMs present a simple and realistic option for addressing both of these concerns, and their potential has, until now, been only partially exploited. Despite the requirement for a significant shift in the paradigm for distribution of bioinformatic tools, the future alternative of an even great collection of individual OS-specific NGS tools will carry far fewer benefits for end users of this technology. By exploiting the object-oriented model of distributing data and methods as a single entity, VMs cannot only simplify NGS analysis, but will also facilitate the growth and integration of this technology into additional fields.
The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
J.Nocq et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Virtual machines for NGS analysis at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
.2 Potential for NGSVM growth in biomedical field The concept of bundling software within a VM is not novel; indeed one of the largest VM developers, VMware, currently markets this configuration of tools within a VM as a 'Virtual Appliance'. The possibility for NGSVM usage to be broadly adopted by the research community will be dependent on a significant change in philosophy, although there is already a growing appreciation that there are problems with the current methods of software use and distribution (Nekrutenko and Taylor, 2012). Beyond the research environment, a more compelling push for the development of NGSVMs will likely come from the growing application of NGS to clinical diagnostics. According to the American Hospital Association, there were almost 37 million hospital admissions in the USA alone in 2012 (http://www.aha.org/ research/rc/stat-studies/fast-facts.shtml). If only a fraction of these admissions would require diagnostic sequencing (e.g. metagenomic analysis of bacterial infections prior to antibiotic treatment), the informatics requirements at thousands of hospitals would be enormous. Therefore, as great as the current difficulties are in research centers (where some bioinformatic resources are often available), the problem for hospitals and medical clinics may soon be orders of magnitude worse. The possibility of developing a standardized, and clinically certified, NGS-VM could dramatically reduce the complexity of integrating NGS technologies into diagnostic settings, allowing its broader adoption and use. With respect to clinical certification for VMs (e.g. Clinical Laboratory Improvement Amendments /Health Insurance Portability and Accountability Act compliance), issues around information security, audit trails, access controls, etc. could conceivably be addressed within the initial design of the VM itself, similar to any other hospital information system. For example, if one hospital (in conjunction with a laboratory or research center) developed an NGSVM that could be clinically validated for a specific purpose (e.g. identifying mutations in a panel of cancer genes), this same NGSVM should be able to be downloaded and used with little or no modification by another hospital for the same purpose. Because there are a finite number of diagnostic procedures likely to be adapted to NGS technology, a repository of such clinical NGSVMs could be created, along with any details of their implementation. This approach would not only remove the incredible redundancy of every hospital and clinic independently downloading and configuring multiple tools for analysis, but it would also facilitate meta-analysis of diagnostic results between centers.
