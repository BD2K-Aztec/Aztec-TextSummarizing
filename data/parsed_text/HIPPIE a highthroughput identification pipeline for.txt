We implemented a high-throughput identification pipeline for promoter interacting en-hancer element to streamline the workflow from mapping raw Hi-C reads, identifying DNA–DNA interacting fragments with high confidence and quality control, detecting histone modifications and DNase hypersensitive enrichments in putative enhancer elements, to ultimately extracting possible intra-and inter-chromosomal enhancer–target gene relationships. Availability and implementation: This software package is designed to run on high-performance computing clusters with Oracle Grid Engine. The source code is freely available under the MIT license for academic and nonprofit use. The source code and instructions are available at the Wang lab website (http://wanglab.pcbi.upenn.edu/hippie/). It is also provided as an Amazon Machine Image to be used directly on Amazon Cloud with minimal installation. Contact:
IntroductionGenome-wide chromosome conformation capture (Hi-C) has been utilized to reveal three-dimensional connectivity of chromatin regions in eukaryotic nuclei (). Because of its capability to capture all possible chromatin interactions in a genome, it has been recently employed to observe long-range regulatory elements with their geographically proximal target gene promoters (). Although there have been workflows successfully expediting the analysis of one-dimensional highthroughput sequencing results such as whole-exome sequencing, ChIP-seq, DNase-seq and RNA-seq, there are limited tools to untangle two-dimensional DNADNA physical interactions using Hi-C datasets. In an effort to reduce the obstacle of processing these largescale datasets and to establish an analysis protocol to detect candidate long-range regulatory elements, we implemented an automated workflow that processes Hi-C results starting from read mapping with quality controls and corrects for biases in interactions based on the linear distance, mappability, GC content and fragment lengths of each pair of Hi-C reads. This pipeline identifies candidate promoterinteracting enhancer elements by integrating Hi-C results with epigenomics data such as histone modifications and DNase hypersensitivity sites.
Materials and MethodsHigh-throughput identification pipeline for promoter interacting enhancer element (HIPPIE) takes Hi-C raw reads as the input and generates a list of enhancers with their interacting target gene(s) as the output. We built HIPPIE with five step-wise phases (): (i) read mapping, (ii) quality control, (iii) identification of significant DNADNA interacting regions, (iv) enhancertarget gene predictions and (v) characterization of these long-range interactions. Although HIPPIE is streamlined and automated, each phase of HIPPIE can be independently called with commonly used file formats generated by different platforms and programs, such as FASTQ, SAM, BAM or BED. Thus, it can readily be combined with other upstream processing and/or downstream analyses. The implementations of each phase are described below. Read mapping in HIPPIE uses the sequence alignment package BWA (). It takes raw Hi-C paired-end sequencing reads in FASTQ format as input and applies SAMtools () to compress the read alignment SAM files to BAM files and produces mapping quality metrics. The quality control steps discard reads not passing a user-defined mapping quality criterion (default minimum quality score  30), remove potential polymerase chain reaction duplicates, ignore mitochondrial sequences and exclude random contigs. Identification of interacting DNA fragments consists of calling significant Hi-C peaks and annotating their genomic features. Because the resolution of Hi-C is constrained by the length distribution of the fragments produced by the chosen restriction enzyme (the sequence between two consecutive restriction sites along the genomic DNA), we retained the restriction fragments that harbor significantly higher specific than nonspecific read coverage (Supplementary Material) as 'Hi-C peaks'. Next, we applied BEDtools () to annotate these peaks with genetic features downloaded from the UCSC Genome Browser (), including annotations for promoters, exons, introns, other functional RNAs, etc. Enhancertarget gene prediction reveals the interactions of the annotated peaks and produces a list of candidate enhancer elements (CEEs) and the gene(s) with which they interact as supported by HiC reads. To correct for Hi-C experimental biases in their linear distance between restriction fragments, GC content, mappability and length reported in Yaffe and Tanay (2011), we implemented the algorithm introduced byand extracted statistically significant DNADNA interactions (P 0.1, negative binomial distribution test). For enhancer prediction, our pipeline selects Hi-C peaks that interact with a promoter, resides in a DNase hypersensitive region and harbors high levels of enhancer-associated histone modifications (H3K27ac or H3K4me1) but not promoter-associated marks or repressive marks (H3K4me3 and H3K27me3). An option of using ENCODE genome segmentations () for candidate enhancers is also provided. This step is followed by characterization of enhancerpromoter interactions, which summarizes the overall properties of the interactions such as their linear distance distribution and reports the enrichment of specific histone modifications and GWAS single-nucleotide polymorphisms within the CEEs. Note the phases are not only streamlined with error control but also modularized for individual calls. For instance, users can map their Hi-C reads with other algorithms and call peaks with HIPPIE starting at phase III; or one can directly import the interaction regions and utilize HIPPIE for enhancertarget gene identifications (phase IV).
Using HIPPIEHIPPIE was built specifically for long-range enhancergene pair interaction detection upon the architecture of our previous DNA sequencing workflow (). For instance, we implemented job dependencies and error checking to automate the entire process. To run HIPPIE, users first prepare a configuration file describing the software and data paths, as well as their Hi-C library information. For each library, HIPPIE generates a corresponding bash script for Oracle Grid Engine job submission commands that can be invoked at the command line. When errors occur, all following jobs will be held for users to troubleshoot and re-execute the stalled phase or step. This modular architecture reduces the potential for unnecessary, repeated jobs. A complete run of HIPPIE produces CEEs in BED format that are annotated with their target gene symbol(s), together with Hi-C read count supporting the interaction and interaction P-values. To run HIPPIE, users can either install the package on their own cluster system or simply access a pre-created Amazon Machine Image (AMI) from Amazon Web Services on an Elastic Compute Cloud instance (AMI ID: ami-3b0fb252). We evaluated HIPPIE on our cluster using publicly available HiC datasets (). These datasets are 36 and 100 bp paired-end sequencing with a total of 59.4 giga bases (1.35 billionsingle reads) from the Illumina GA II platform (GEO accessions GSM862723 and GSM892306). The total CPU time required for HIPPIE to process these datasets is 437.26 core hours. The breakdown of CPU time for each phase is as follows: read mapping: 64.4%, quality control: 5.8%, identification of peaks: 26.8%, enhancertarget gene interaction prediction: 2.8% and characterization: 0.1%. The maximum memory usage is 4.77 G for read mapping. We identified 3,707 CEEs with 3,190 targeted RefSeq genes.
V C The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com
Bioinformatics, 31(8), 2015, 12901292 doi: 10.1093/bioinformatics/btu801 Advance Access Publication Date: 4 December 2014 Applications Note at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
Comparison with other tools While there are publicly available pipelines for processing Hi-C reads, there are no open-source software packages that take raw reads as input and ultimately identify enhancertarget gene pairs along with their interaction characteristics (Table 1). Among them, Hicpipe takes mapped reads and corrects the contact maps based on possible experimental biases (Yaffe and Tanay, 2011). HiC-inspector aligns reads and generates a contact matrix with user-defined read densities but does not have statistical filtering steps for the identified fragments (https://github.com/HiC-inspector). HiCUP maps reads with filtering out artifacts and self-interacting reads without any statistical model (http://www.bioinformatics.babraham.ac.uk/ projects/hicup/). None of those identify long-range regulatory elements nor provide error checking.
Y.-C.Hwang et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
