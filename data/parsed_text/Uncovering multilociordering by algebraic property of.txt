Motivation: The loci-ordering, based on two-point recombination fractions for a pair of loci, is the most important step in constructing a reliable and fine genetic map. Results: Using the concept from complex graph theory, here we propose a Laplacian ordering approach which uncovers the loci-ordering of multiloci simultaneously. The algebraic property for a Fiedler vector of a Laplacian matrix, constructed from the recombination fraction of the loci-ordering for 26 loci of barley chromosome IV, 846 loci of Arabidopsis thaliana and 1903 loci of Malus domes-tica, together with the variable threshold uncovers their loci-orders. It offers an alternative yet robust approach for ordering multiloci. Availability and implementation: Source code program with data set is available as supplementary data and also in a software category of the website (http:// biophysics.
IntroductionA locus is the chromosome location of a gene, a genetic marker or any specific DNA sequence, and can be regarded as a point on a line. The loci-ordering is a linear arrangement of genes or genetic markers in a linkage group which is a group of genes with their loci located on the same chromosome. For these genes, the segregation ratio for the genotypes and phenotypes departs from the Mendelian law. Therefore, the loci-ordering is the most important step in constructing a reliable and fine genetic map. The loci-ordering also includes localizing a new locus, a disease, or a marker locus, on an existing map. However computational estimation of loci-ordering for dense genes is rate-limiting step in genetic mapping procedures including linkage grouping or distance spacing between genes. Genetic recombination is estimated by the recombination fraction, which is the ratio of recombinant gametes to total gametes (). For homologous recombination, we expect that the greater the physical distance between two loci on a chromosome, the greater the chance they will recombine. Let l 1 , l 2 ,. .. , l n denote n loci in a linkage group, then our interest is ordering n loci to construct genomic map based on two-point recombination fractions r ij , 1 i < j n for a pair of loci i and j, which usually ranges from 0 to 0.5. If two loci i and j are closely located, i.e. tightly linked, then r ij is close to 0, and if not it is away from 0. With n loci, there are n!/2 possible orderings if the orientation of the orders is ignored. Locus ordering searches for the best locus order among the possible orders and it amounts to evaluating the maximum likelihood for each order. With only 10 loci, for example, there are 1 814 000 possible orders, and therefore, the loci-ordering entails a formidable computational problem and is practically unfeasible. In overcoming such difficulties, the loci-ordering minimizing the number of crossovers was regarded as the best ordering, and thismethod has been shown to be the maximum likelihood ordering under the full penetrance assumption, i.e. lack of interference (). Also, several other approaches, closely related with this idea, have been suggested. Examples for objective score functions used in other approaches are the minimum of adjacent recombination fractions criterion (), the maximum sum of adjacent lod scores criterion (), minimum sum of the probability of double recombinants (), maximum likelihood (), and minimum obligatory crossovers (). Most searching procedures for optimizing those objective score functions are exhaustive and the efficient techniques for searching strategies are necessary. To reduce the exhaustive searching procedures, seriation () and branch-andbound (). Softwares for computing genetic maps by using various objective score functions and optimizing techniques have been developed and distributed such as MAPMAKER (), JoinMap (), CarthaGene (), Neighbour mapping (), MapManger QTX (), RECORD (), AntMap (), MSTMAP (), MadMapper (). Here we suggest a conceptually different yet a simple Laplacian ordering method for the loci-ordering via the Fiedler vector (), taking the close analogy with the recent development for characterizing complex network phenomenon in broad areas (), which circumvents most of the difficulties in the previous approaches (). We view that the elements of a correlation matrix, constructed from twopoint recombination fractions r ij , 1 i < j n for a pair of loci i and j, share a complex correlation for n loci in a linkage group. The Fiedler vector from the graph theory has been used for several graph manipulations such as partitioning (), linear labelling () and envelope minimization (). Recently, the Fiedler vector was successfully employed in clustering and classification problem of complex networking phenomena ().
Methods
Laplacian matrix and Fiedler vectorThe adjacency matrix A of a graph G with n vertices is defined as an n  n symmetric matrix with components a ij , where the diagonal elements a ii are equal to zero for all i  1, 2,. .. , n. The Laplacian matrix of a graph G is defined as L  D-A, where D, called the degree matrix, is a diagonal matrix with the ith diagonal element d i  X n j1 a ij. Note that the Laplacian matrix is symmetric and positive semidefinite. The exact algebraic property of the Laplacian matrix is the following. If the graph is one connected cluster as a whole, the rank of the Laplacian matrix is n-1, so that the smallest eigenvalue of L  L(G) is always zero with constant eigenvector and all other eigenvalues are positive. Let 0  k 1 < k 2 <  < k n be n eigenvalues of L in an increasing order, then an eigenvector corresponding to k 2 , the nonzero smallest eigenvalue, is called the Fiedler vector and an eigenvector corresponding to k n , the largest eigenvalue, is called the Frobenius vector. The sum of eigenvector elements for each of nonzero eigenvalue is always zero. If the graph, however, consists of M disconnected clusters, the number of zero eigenvalue of the Laplacian matrix L(G) for the whole graph is equal to M. For each disconnected cluster, the exact algebraic property for eigenvalues and eigenvectors mentioned above still holds.
Eigenvalue equation for a Laplacian matrixLet a ij denote a closeness in the sense of genetic distance such as the Haldane distance or the Kosambi distance between two loci i and j, which are proportional to r ij for very small distance. That is to say, if two loci i and j are closely located, then a ij is large, and if they are far away from each other, then a ij is small. Also let z  (z 1 ,. .. , z n )', where z i denotes the relative order of the ith locus among n loci. Then, the motivation on loci ordering is as follows; if two loci i and j are closely located (i.e. large a ij) , then z i and z j should be very close. On the other hand, if two loci i and j are located far away from each other (i.e. small a ij) , then z i and z j should be very different. Hence, our goal can be achieved by minimizing the weighted sum of squaresTo avoid the trivial solution z i  0 for all i, the constraint z 0 z  1 is imposed. Also, the constraint z 0 1  0, where 1  (1,. .. , 1)', is imposed since the minimum is invariant under translations. Therefore, the problem can be rewritten as arg minsubject to z 0 z1 and z 0 10 To solve the problem, note thatTo minimize Q subject to z 0 ;z  1, use Lagrangian method, i.e. for a Lagrangian multiplier k,) L  kIz  0 which yields a nontrivial solution z if and only if k is an eigenvalue of L and z is the corresponding eigenvector. By multiplying z 0 on both sides, we haveTherefore, the nonzero smallest eigenvalue and the associated eigenvector, which is just the Fiedler vector, yield the optimal solution.
Results
Strategy of Laplacian ordering method for loci-orderingWe describe how to use the Fiedler vector to the loci-ordering based on estimates of recombination fraction r ij between two loci i and j, 1 i < j n. Let the adjacency between two loci i and j be a ij  1  r ij because if two genes are closely located the a ij will be close to 1. On the other hand, if these are far away from each other, a ij will be small because r ij becomes large. Also let z  (z 1 ,. .. , z n )', where z i denotes the relative order of the ith gene among n genes. For example, if z  1= ffiffiffi 6 p ; 0; 1= ffiffiffithen the resulting order is (2, 3, 4, 1, 5) or (4, 3, 2, 5, 1). Therefore, estimating the order of n loci corresponds to finding z. It can be shown that z is the eigenvector associated with the nonzero smallest eigenvalue of the Laplacian matrix of a ij , and is just the Fiedler vector. For an illustrative example, we consider 26 loci of barley chromosome IV generated by the North American Barley Genome Mapping Project (NABGMP) (). The adjacency matrix for 26 loci is represented by a heat map inwhen they are randomly ordered. The simple subjection of Laplacian ordering method to the adjacency matrix for 26 loci produced loci-ordering results which are contrary to our expectation because raw data are quite often contaminated by noise which might give rise to poor results. Several methods are available to remove the noise, and the idea of shrinkage () is one of the widely used methods among them and further developed (). Among methods of shrinkage, the hard-threshold, given by t H (x)  xI (jxj > d) where d > 0 is a threshold parameter to be estimated, is often used. We note that the hard-threshold is a fixed threshold in the sense that it annihilates all the components, which are less than d, of the adjacency matrix. In the Fiedler vector, the ordering is given when a small d is used, and the clustering given when a large d is used, however, it is not easy to choose an appropriate d for either ordering or clustering (). Here we propose a new method of shrinkage, called the variable threshold which turns out to be especially useful in the multilociordering problem. The idea of variable threshold is intuitive and very simple. In each row (or column) of the adjacency matrix a ij , we replace each value by a very small value D, for example D  0.01 in order to keep the whole cluster as a connected one, except k largest values, where k is a parameter to be estimated. Consequently, the degree of threshold for each row (or column) of the adjacency matrix will be different, and that's why we call this method the variable threshold. Therefore, it is apparent that the hard-threshold does not consider the characteristic aspects of each row (or column) of the adjacency matrix whereas the variable threshold is flexible because it keeps characteristics of at least k adjacent loci in networks. Determination of k is based on the following arguments. Note that for large k, there will be a lot of non-small components still keeping the noisy contributions in the adjacency matrix. On the other hand, for small k, there will be a lot of very small components in the adjacency matrix. In general, the components of Fiedler vector corresponding to the non-zero smallest eigenvalue manifest relative weight hence ordering among them, and contain different values for large k. For small k, they contain several groups of same values, and each group corresponds to a different cluster. These different clusters could also be identified easily if we take D  0.0 since in this case the number of zero eigenvalues upon diagonalizing a Laplacian matrix a ij is equal to the number of disconnected hence different clusters. To be more specific, the Fiedler vector shows the clustering pattern for small k, and the ordering pattern for large k. We choose k at which the pattern of the Fiedler vector changes from the clustering to the ordering. Therefore, we need to increase k from 2 to the integer at which the clustering pattern disappears and the ordering behaviour is maximally achieved since the noisy components of the adjacency matrix are minimally included. To see how variable threshold affects estimation of loci-ordering, we first define three measures for the performance of estimators. Let t  (t(1),. .. , t(n)) and e  (e(1),. .. , e(n)), where t(i) denotes the true order of the ith gene and e(i) denotes the estimated order of the ith gene, respectively. Also, let c  (c(1),. .. , c(n)), where c(i) denotes the bootstrap confidence interval of 95% for the locus of ith gene, implying that among 1000 bootstrap gene orders made by resampling technique the locus is located at the map position 95% of the time (). Therefore, the best possible order of the 26 loci is 1, 2,. .. , 26, where each number represents the relative locus of each gene. If t and c are known, the accuracy of the estimated order e can be measured by NCLIei 2 ci, and SAD X n i1 jti  eij, where NCL denotes the number of correctly ordered loci, NCLCI denotes the number of correct loci contained in the bootstrap confidence interval and SAD denotes the sum of absolute difference between the true order and the estimated order. Note that NCLCI is a relaxed accuracy measure compared to NCL. Therefore, good estimates should have both the large value of NCL and NCLCI and the small value of SAD simultaneously.
Loci-ordering of 26 loci of barley chromosome IV dataHaving a simple and general conceptual picture for both the clustering and the ordering of any given adjacency matrix, guaranteed by the exact algebraic property of a Laplacian matrix and its Fiedler vector, we apply the Laplacian ordering method with the variable threshold to the 26 loci of barley chromosome IV data. Firstly, we take D  0.0 and diagonalize Laplacian matrices L for k  2, 3, 4,. .. , 25 in order to identify a value k* which separates the clustering behaviour from the ordering behaviour of the Fiedler vector. It turns out that the number of zero eigenvalues is 2 for k  2, and 1 for k > 2. It immediately implies that k* is 3 at which the ordering behaviour of components of the Fiedler vector is best envisaged compared to those for k > 3. Secondly, we also take D  0.01 and repeat diagonalizing L. In this case the number of zero eigenvalues is 1 for all k  2, 3, 4,. .. , 25. The Fiedler vector for k  2, however, also shows a clustering pattern of two distinct region of loci whereas those for k > 2 show an ordering pattern as listed in the second row of Supplementary. Since the components of Fiedler vector manifest the relative weight of each of 26 loci, we rank order them for k > 2 in the ascending order, and list both the component of Fiedler vector and the corresponding rank next to it in Supplementary Table S1. The quality of the predicted loci-order compared to the true lociorder is estimated for each k by the values of NCL, NCLCI and SAD. Supplementaryillustrates the values of these threeLaplacian matrix and its Fiedler vectorestimators as k changes from 25 down to 3. The best loci-ordering occurs at k  3 at which NCL, NCLCI (SAD) attains the maximum (minimum) value of 18, 26 (12) simultaneously. The fact that NCLCI is also 26 for k  1619 does not necessarily imply the occurrence of the best loci-order because NCL and SAD for these k values are much worse than those for k  3. Based on the predicted loci-order for k  3 from our Laplacian ordering method, we also illustrate the closeness of a predicted heat map (see) of the adjacency matrix, which is constructed from the random heat map (see) without any loci-ordering a priori, to that (see) from the true loci-order.
Practical application to a high-density genetic mapWe apply the Laplacian ordering method to data with a high-density genetic map. We use an experimental data with single feature polymorphism (SFP) makers and a recombinant inbred lines (RIL) genotype population derived from Arabidopsis thaliana, which is available in ATGC website served by Kozik (http://www.atgc.org/ XLinkage/MadMapper/ath_sfp_map_example). This website provides detail procedures constructing the linkage maps by the MadMapper software scripts (). The RIL population with 846 genetic markers is employed in this work, which is believed to be high quality data and obtained by filtering steps such as non-redundant scores and 'parental min-max method', 'RIL distribution' algorithms for removing ambiguous genotypes and reducing missing genotype scores (). The recombination fractions from the RIL population for 846 makers are constructed by using a MadMapper script. The initial adjacency matrix given by randomized index-headers is constructed (see). We diagonalize the Laplacian matrix with D  0.00 at different variable threshold k by increasing from k  342. It takes 533 seconds over total 39 diagonalizing processes based on a Linux machine with 3.3GHz Xeon CPUs. The numbers of clusters (linkage groups) versus k inare identified by counting the number of zero eigenvalue. Interestingly we find five clusters at very wide range of variable threshold from k  12 to k  41. Grouping of 846 genetic markers into 5 chromosomes are made by the clustering pattern (grouping elements with same values) in the Fiedler vector at k  12 and with D  0.01. Classification into five linkage groups exactly correspond to the separation of genetic markers on the five chromosome (209, 122, 156, 140, 219 markers for chromosome 1, 2, 3, 4, 5, respectively) in Arabidopsis. The heat map inshows not ordering but clustering of genetic markers by the Fiedler vector (five block sizes are 209, 122, 219, 140, 156). Loci-ordering of 846 genetic markers should be performed separately on five chromosomes. And the quality of the resulting loci-order from Laplacian approach in this work should be compared with that from the existing other method, such as MadMapper (). The RIL populations of five linkage groups (seee) are plotted by the MadMapper script for chromosome 1, 2, 3, 4, 5, respectively. We generate the initial adjacency matrix (seej) given by randomized index-headers of markers and the heat maps ordered by the MadMapper software scripts (seeo). The Laplacian lociordering method also provides heat maps (seet) which are very similar to the heat maps by the MadMapper method. The variable threshold k* at which clustering pattern disappears are 8, 12, 11, 7, 11 for chromosome 1, 2, 3, 4, 5, respectively. For the chromosome 1 having 209 markers, we checked the computation time. By the MadMapper script which uses the usual optimization algorithm minimizing total scores, it takes 1 h and 32 min based on a Linux machine with 3.3GHz Xeon CPUs. By using the Laplacian loci-ordering method, it takes only 3.6 s for performing total 11 Laplacian procedures from k  3 to k  12 with D  0.00 and at k*  8 with D  0.01. The comparison plots between two approaches in loci-ordering (seey) show globally similar but slight differences in dense regions where recombination fractions between neighboring loci are very small.
Missing data and reliability score for each locusThe 148 RIL population with 209 genetic markers on the chromosome 1 has 0.6% missing genotypes through filtering process. All recombination fractions between loci (genetic markers) can be evaluated even through filtering process. Now we check how the Laplacian loci-ordering method works well even with missing genotypes. We randomly replace genotypes to be missed artificially from 1% to 10% composition more in the RIL data. For missing replacements from 1% (total 1.6%) to 4% (total 4.6% missing genotypes), all recombination fractions can be evaluated. However values of recombination fractions are somewhat changed so that the loci-ordering is also changed (SAD between two loci-orders with 0.6% and 4.6% missing genotypes is 148) inand b. With total 5.6% missing genotypes, we observe missing recombination fractions. In constructing adjacency matrix, we assign the recombination fraction to be 0.5 for those missing data. While we see a little missing data (0.096%) in the adjacency matrix for total 5.6% missing genotypes, we see many missing data (18.2%) infor total 8.6% missing genotypes, but the loci-ordering is not significantly changed (SAD between two loci-orders is 290) in. For further missing recombination fractions (37.6%) infor total 9.6% missing genotypes, the loci-ordering is not working as shown in. The heat map shows bad ordering due to many missing data. The comparison in loci-ordering between 0.6% and 9.6% missing genotypes shows no more linear correlation (SAD between two loci-orders is 8058). Therefore we recognize that our Laplacian approach is working even with 8.6% missing genotypes and 18.2% missing recombination data for 209 loci on the chromosome 1. The input data of our software using the Laplacian matrix are not the RIL populations or f2 intercross populations directly determined by experiments but the recombination fractions evaluated from the RIL or f2 intercross data. Hence we do not present any criteria in filtering process for reducing missing genotype scores and removing uncertain genotypes. Instead our program provides a key algorithm for loci-ordering based on recombination fractions not providing whole packages from processing experimental data to mapping linkage maps. Even though we do not have the filtering steps, our method provides excellent loci-ordering among high quality loci data even under the condition that low quality loci data were slightly embedded.The Laplacian loci-ordering method could not add any weighting factor on specific loci of previously known maps or recombination fractions derived from high quality statistics. It means that the elements of Laplacian matrix after filtering the variable threshold process have equal weights in diagonalizing L, so that we could not assign any reliability scores for each locus at a given k. Instead we have to determine the reliability scores for each locus analyzing over several loci-orders at variable threshold k > k*. As we see in the previous sections and Supplementary, we obtain the best lociordering at k* where clustering pattern disappears in increasing k. At k > k*, a bit poor orders might be given at some markers due to a little noisy data. But we get reliable placements of markers checking over loci-orders at k > k*. Reliability scores for 26 loci of barley chromosome and 209 loci of Arabidopsis are given in the program package of the supplementary data.
Application to F1 populations in outbreeding speciesWe apply the Laplacian ordering method to additional complex data with F1 apple populations (). ThisLaplacian matrix and its Fiedler vectoroutbreeding heterozygous system is analyzed by the next-generation DNA sequencing method, which are cost-effective but provide relatively low quality data with many missing data. Initially 273 835 SNP markers were identified by sequence alignments but after many filtering processes only 1903 markers could be considered in constructing genetic linkage maps. We constructed two-point recombination fractions r ij by counting recombinant events and using the Newton-Raphson algorithm to find out the maximum LOD score (). The Laplacian clustering procedure for 1903 markers results in 17 linkage groups which are exactly consistent with published results by Gardner et al. Loci-ordering by Laplacian method was performed for all 17 chromosomes. The heat maps and comparison plots of orders for the chromosome 3 are shown in. We observe moderate correlations between two orders by using the JoinMap package and the Laplacian loci-ordering method. The comparison plots of physical map to genetic maps constructed by different methods reveal that both correlations are moderate since the original data were not good enough to provide high quality genetic maps. But we can advocate that our Laplacian loci-ordering can be applicable to the further complex genotyping populations. The detailed descriptions and results for other chromosomes are given in the supplementary data.
Software for the Laplacian loci-ordering methodWe provide three key files (main fortran program, input parameter data file, input recombination fraction data file) and peripheral files (Manual.txt, Score.f, GeneMarker.dat, Aij_three.gnu, etc) for describing software package and analyzing output data. Here we present the brief procedures for making use of the loci-ordering approach. The detailed step-by-step procedures for using the lociordering and clustering linkage groups are presented in manual files of software package. 1. Run a main program (executable file for Laplacian_Loci.f) with D  0.0 and at variable threshold k2, 3, 4, 5,. .. 2. Check the number of clusters by counting the number of zero eigenvalues in an output file (Output file: Laplacian_ Eigenvalues.dat). Determine k* (when the number of zero eigenvalue is 1 in increasing k). 3. Run a main program (executable file for Laplacian_Loci.f) with D  0.01 and at k*. 4. Sorting the elements of the Fiedler vector. We provide two orders (ascending order and descending order in sorting the elements. Output files: Loci_ordering_ascending.dat and Loci_ ordering_descending.dat)
ConclusionsIn this work we present a simple Laplacian loci-ordering method which enables one to uncover the loci-order of multiloci simultaneously, which has been known as a challenging problem. This approach is made possible by taking the close analogy with the important conceptual development recently achieved for characterizing various complex network phenomena. Once constructing a Laplacian matrix from the recombination fraction of multiloci, the exact properties for the Fiedler vector of Laplacian matrix together with the variable threshold are directly applied to uncover the lociorder of 26 loci of barley chromosome IV data, 846 loci of Arabidopsis chromosome data and 1903 loci of heterozygous apple data. It offers both a simple method without any assumptions a priori and a very fast one computationally for uncovering not only the clustering behaviour but also the ordering behaviour of any number of loci simultaneously.Conflict of Interest: none declared.. The heat maps ordered by Laplacian loci-ordering method and the loci-order comparison plots between 0.6% missing genotype (MG) in the RIL data for the chromosome 1 and (a, b) 4.6%, (c, d) 8.6% and (e, f) 9.6% missing genotypes. Missing genotypes are assigned randomly in the 148 RIL population with 209 genetic markers. The heat maps ordered by (a, d) JoinMap package, (b, e) Laplacian method and (c, f) loci-order comparison plots between two methods. The adjacency matrix was built under assigning the missing data as (ac) r ij  0.5 (MRF 0.5) and (df) approximate r ij (MRF App). The loci-order comparison plots of physical map to orders by using (g) JoinMap package published in G3 paper, Laplacian ordering with (h) r ij  0.5 missing data (MRF 0.5) and(i) approximate r ij
at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
M.Cheon et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from
