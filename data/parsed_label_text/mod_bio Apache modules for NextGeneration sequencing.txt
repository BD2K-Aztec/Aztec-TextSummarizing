We describe mod_bio, a set of modules for the Apache HTTP server that allows the users to access and query fastq, tabix, fasta and bam files through a Web browser. Those data are made available in plain text, HTML, XML, JSON and JSON-P. A javascript-based genome browser using the JSON-P communication technique is provided as an example of cross-domain Web service. Availability and implementation: https://github.com/lindenb/mod_ bio. Contact:
INTRODUCTIONThe open-source Apache HTTP Server is the most widely used Web server (http://en.wikipedia.org/wiki/Apache_HTTP_ Server). It has a generalized programming interface extending the functionality of the basic server. Those pieces of C code, named 'modules', register custom hooks in the core server. A module has an access to the server's data structures and is able to customize the response back to the client. The Apache server is used by the main centers in bioinformatics like the NCBI, UCSC, Ensembl, 1000Genomes and most of the time, they provide an online area where the users can download some structured raw files. It is often a FTP server, which can go with a HTTP server: at the time of writing, the 1000Genomes data are available through both protocols. Common tasks such as getting the first lines of a file or accessing the data in a given genomic region are easily provided using standard linux tools or using the coordinate-sorted index of samtools () and tabix (), but this index needs to be downloaded, and it remains difficult for the biologists to quickly get an overview of those data. An interactive program such as Integrative Genomics Viewer (IGV) () allows viewing the content of a remote BAM file but the index for the file must be downloaded too, and interaction is limited to the software itself. The Distributed Annotation System (DAS) () protocol was also developed to answer those coordinate-based queries, but the response is limited to the XML format, and it requires to define a registry and some entry points, and it doesn't allow to fetch the original data. Ultimately, it becomes hard to develop some Web interactive applications, which need to access remote data without downloading the whole dataset, especially because of cross-site scripting security issues. A first way to circumvent this problem is to return a JSON-P document, a communication technique used in Javascript programs to request data from a server in a different domain. Another solution is to enable the server to use the 'Cross-origin resource sharing' (CORS) protocol, a strategy implemented by the 'Dalliance genome browser' (). Dalliance uses CORS in combination of the HTTP 'Range:' header to fetch chunks of NGS data, but it depends of multiple javascript libraries, and the whole indexes for the BAM or Tabix files must be loaded in the browser's memory.