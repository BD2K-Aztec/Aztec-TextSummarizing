Motivation: Expression vectors used in different biotechnology applications are designed with domain-specific rules. For instance, promoters , origins of replication or homologous recombination sites are host-specific. Similarly, chromosomal integration or viral delivery of an expression cassette imposes specific structural constraints. As de novo gene synthesis and synthetic biology methods permeate many biotechnology specialties, the design of application-specific expression vectors becomes the new norm. In this context, it is desirable to formalize vector design strategies applicable in different domains. Results: Using the design of constructs to express genes in the chloroplast of Chlamydomonas reinhardtii as an example, we show that a vector design strategy can be formalized as a domain-specific language. We have developed a graphical editor of context-free grammars usable by biologists without prior exposure to language theory. This environment makes it possible for biologists to iteratively improve their design strategies throughout the course of a project. It is also possible to ensure that vectors designed with early iterations of the language are consistent with the latest iteration of the language. Availability and implementation: The context-free grammar editor is part of the GenoCAD application. A public instance of GenoCAD is available at http://www.genocad.org. GenoCAD source code is available from SourceForge and licensed under the Apache v2.0 open source license.
INTRODUCTIONMost bioinformatics software packages include sequence editors that facilitate the design and assembly of new DNA sequences. Automatic recognition of sequence features, identification of restriction sites and tools to add sequence annotations help biologists visualize the different elements of the DNA sequences they manipulate. Software lets users switch between graphical representations of DNA sequences that provide a macroscopic view and textual representations more suitable to examine sequences with a base-level resolution. Irrespective of the software environment used, the cut-and-paste approach to sequence editing increases the chance of introducing errors, such as leaving or deleting a DNA segment, accidently inserting it twice or truncating a functional element. For a large multigene construct (e.g. an expression cassette encoding all components of a biochemical pathway), these risks could become unacceptably high. In many cases, errors are uncovered only after several months of unsuccessful attempts to express a gene. Many of these errors can be avoided by developing a library of genetic parts before designing DNA sequences. The Registry of Standard Biological Parts () was the first database of genetic parts. The notion of genetic parts supports a different approach to sequence design: complex genetic constructs can be designed using drag-and-drop user interfaces that rely on icons to represent different categories of genetic parts (). This added level of abstraction makes it easier to understand the structure of a new sequence. It also avoids sequence manipulation errors. However, it still makes it possible to design sequences lacking components required for proper gene expression. We demonstrated that the structure of many gene expression vectors can be modeled as context-free grammars (). GenoCAD, a web-based application to design synthetic DNA sequences, relies on the notion of 'grammars' to organize large collections of genetic parts (). It also includes a wizard-like sequence editor that guides users through a series of design decisions corresponding to the rewriting rules of a grammar selected by the user (). Initially, users could only choose from a set of public grammars when designing sequences. These public grammars were developed by manually adding records in the GenoCAD backend database. The process was tedious and only GenoCAD administrators familiar with the application data model could develop new grammars. These early grammars were interesting as proof of concepts, but they did not necessarily reflect the design rules that users wished to use for specific research projects. We have now formalized the grammar development process and developed a graphical user interface enabling life scientists to develop context-free grammars. The GenoCAD grammar editor allows users to revise existing grammars or even to develop brand-new grammars. These grammars can be fairly generic to generate a broad range of expression vectors for a new host. Alternatively, they can be made specific to capture projectspecific design constraints, such as the ones resulting from intellectual property licensing agreements. These languages describing families of synthetic DNA molecules are comparable with domain-specific languages (DSL) used in computer programming. Specialized DSLs facilitate communication between *To whom correspondence should be addressed.  The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com programmers and domain experts by directly expressing concepts specific to the domain. The Structured Query Language (SQL) is an example of a DSL used for programming databases. The design of vectors to express polycistronic genes in the chloroplast of Chlamydomonas reinhardtii is an example of a domain that calls for the development of a DSL. Site-specific gene insertion into Chlamydomonas chloroplast can be performed through homologous recombination, making it an attractive system to study processes such as photosynthesis. It has been previously shown that recombinant protein can accumulate at much higher levels when expressed in the chloroplast genome of Chlamydomonas compared with the nuclear genome (). Also its generally oxidizing environment makes the formation of disulfide bonds possible, hence enabling expression of large complex proteins such as full-length antibodies (). Owing to these characteristics, Chlamydomonas chloroplast recently gained much attention as a venue for recombinant protein production (). Interestingly, Chlamydomonas chloroplast is capable of carrying out anaerobic reactions such as hydrogen production under well-studied specific circumstances, despite its generally oxidizing environment (). Also, Chlamydomonas chloroplast genome has a prokaryotic arrangement, encoding both mono-and polycistronic genes, which offers the potential for introduction of polycistronic synthetic expression cassettes like in bacteria ().These characteristics make Chlamydomonas chloroplast an attractive venue to introduce genes required for nitrogen fixation, as (i) appropriate stoichiometry between the components is essential, which can be better controlled in a system that allows expression from polycistronic operons and homologous recombination; (ii) high level of expression is essential due to the slow kinetics of nitrogenase; and (iii) even though such a state is transient, anaerobicity can be achieved. Yet, the DSLs that are available for bacterial synthetic constructs would not be sufficient because in many cases the exact locations of regulatory components are not known. For example, ribosomal binding sequences (RBSs) are not characterized for most of the genes, and it is predicted that the translational initiation is more complex than the ancestry bacterial system. This necessitates more flexibility than a simple promoter-RBS-coding sequence (CDS) arrangement found in synthetic constructs for bacteria; in some cases, it is not practical to separate the promoter from 5 0 untranslated region sequence that potentially includes RBS and other regulatory elements. Undoubtedly, the expression of multiple genes from a complex polycistronic unit would require empirical optimization of genetic parts through biological assays, hence a rapid method to assemble multiple parts without risk of introducing sequence mistakes is highly beneficial.
DISCUSSIONA grammar should be flexible enough to support a variety of designs applicable to a certain application domain. Although there are often multiple ways to express a set of design principles, some grammar development strategies are better than others. Rewriting rules that resolve to a long list of categories are usually an indication of bad grammar design. It is often possibleto break down this transformation into a set of simpler rewriting rules by introducing intermediate categories corresponding to shorter aggregations of categories. Defining these new categories is an opportunity to formalize an abstraction hierarchy. When defining categories and rules, it is important to identify reusable patterns and implement rules that group these categories together. This limits the number of categories and rewriting rules. A good grammar should be expressive enough to allow the generation of a broad range of constructs but should also be constrained enough to limit the possibilities of designing faulty constructs. How constraining it needs to be is something that should be discussed with a domain expert. For example, the grammar presented here allows users to design constructs distributed over two different plasmids. When two plasmids are used together, it may be helpful to ensure that they rely on different selection markers. It was decided that it was not necessary to express this constraint in rule 2plas, but the grammar could easily be modified should it become necessary to enforce this constraint. The need to provide biologists with tools to express custom design strategies is somewhat antithetic of the need for standardization. For instance, we could not identify any GenBank qualifier corresponding to the domain-specific categories defined in the grammar, such as SIS, start codon (ATG), stop codon (STP) or vector (VEC). This limitation would lead to an incomplete rendering of designs built with this grammar if exported in GenBank format for import into another application. Similarly, it proved challenging to use SBOLv, the set of standard icons developed by the Synthetic Biology Open Language (SBOL) project (). This difficulty forced us to develop a custom set of icons. GenoCAD's grammar editor has been used to develop other DSLs. It has been used to model the structure of a family of vaccine vectors derived from the vesicular stomatitis virus (). A grammar has also been developed for the design of synthetic transcription factors based on zinc fingers, transcription activator-like effectors and the recently developed clustered regularly interspaced short palindromic repeats CRISPR/Cas-based system (Purcell O., Peccoud J., Lu T.K., Grammar for the Design of Eukaryotic Synthetic Transcription Factors, submitted). To make it easier for potential users to develop DSLs for their own applications using the GenoCAD grammar editor, this feature is introduced in the GenoCAD tutorial available from Figshare (doi:10.6084/m9.figshare.153827). Potential users are encouraged to familiarize with this tutorial and complete the exercises before starting the development of their own grammars. Funding: National Science Foundation (Grant EF-0850100 to J.P.). Conflict of Interest: JP has a financial interest in GenoFAB, LLC.