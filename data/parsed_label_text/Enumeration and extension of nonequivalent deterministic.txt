Motivation: Boolean networks (BNs) are commonly used to model genetic regulatory networks (GRNs). Due to the sensibility of the dynamical behavior to changes in the updating scheme (order in which the nodes of a network update their state values), it is increasingly common to use different updating rules in the modeling of GRNs to better capture an observed biological phenomenon and thus to obtain more realistic models. In Aracena et al. equivalence classes of deterministic update schedules in BNs, that yield exactly the same dynamical behavior of the network, were defined according to a certain label function on the arcs of the interaction digraph defined for each scheme. Thus, the interaction digraph so labeled (update digraphs) encode the non-equivalent schemes. Results: We address the problem of enumerating all non-equivalent deterministic update schedules of a given BN. First, we show that it is an intractable problem in general. To solve it, we first construct an algorithm that determines the set of update digraphs of a BN. For that, we use divide and conquer methodology based on the structural characteristics of the interaction digraph. Next, for each update digraph we determine a scheme associated. This algorithm also works in the case where there is a partial knowledge about the relative order of the updating of the states of the nodes. We exhibit some examples of how the algorithm works on some GRNs published in the literature. Availability and implementation: An executable file of the UpdateLabel algorithm made in Java and the files with the outputs of the algorithms used with the GRNs
IntroductionGene regulation networks (GRNs) consist of interacting genes and gene products, which give rise to complex cell behaviors. Due mainly to the lack of detailed kinetic information and quantitative data, qualitative logical models have been used for a better understanding and simulation of GRNs. Examples of these models are the Boolean networks (BNs), which despite their simplicity are able to capture key dynamical features and predict some activation patterns). Boolean networks were introduced by Stuart Kauffman into model GRNs. The gene expression level, in this case, is modeled by binary values, 1 or 0, indicating two transcriptional states, either active or inactive, respectively, and this level changes in time according to some local activation function which depends on the states of a set of nodes (genes or gene products). The interactions between the elements of a BN is represented by a directed graph (digraph), named interaction digraph, where there is an arc (i, j) in the interaction digraph if the state value of the node j depends on the state value of the node i. The dynamics of the network, is governed by an update schedule which determines when each node has to be updated. In the original model, the updating scheme was considered to be synchronous, that is at each time step, the state of all nodes is updated at the same time. Some examples of GRNs modeled by synchronous Boolean networks are exhibited in. However, due to the synchronous scheme is considered not being very realistic many GRN modelers have used other update schedules with different levels of asynchronism (). The difficulty of determining time delays of updating in a GRN makes modelers often sample different update schedules to better capture an observed biological phenomenon. In this context, some used schemes are the deterministic update schedules, where the set of nodes of a network is partitioned into blocks, which are updated sequentially while within the blocks, the nodes are updated synchronously in every time step, (see for example). This family of update schedules, introduced by F. Robert in, includes the sequential schedules (each group has size one), the parallel schedule (there is only one group) and the block-sequential schedules. In the past, a lot of analytical work has been done about the dynamical behavior of BNs with this kind of scheme (). In BNs with deterministic update schedules the relative order of updating of two nodes interacting can be represented by a label on the respective arc of the interaction digraph. More precisely, we put on the arc (i, j) the label  if the node i is updated after or at the same time than j, according to a given update schedule of the network, and the label I otherwise. The interaction digraph of a BN labeled in this way is called update digraph (). In this paper we also deal with deterministic update schedules which are not fully defined, that is, the relative order of updating for some pairs of nodes is unknown. In such cases we put on the corresponding arcs the label L. Inwas proved that given a BN with two different deterministic update schedules, if the schemes have the same update digraph associated, then the dynamical behaviors of the networks under these schemes are equal. Hence, equivalence classes of deterministic update schedules in a given BN can be defined according to the update digraph associated, and such that two equivalent schemes yield exactly the same dynamical behavior of the network. Thus, in order to know the different dynamical behaviors of a BN (for example to study the robustness of the dynamics against to changes in the updating scheme), modelers of GNRs need to test only non-equivalent update schedules, being this set of schemes usually much smaller than the total set (see Supplementary information and). Similarly, if someone wants to determine the dynamics of a BN with updating schemes that are compatible with a set of constraints (on the relative order of updating of some pairs of nodes) then it is sufficient to test the non-equivalent extensions of this update schedule partially defined; this is useful, for example, when there are constraints that come from wanting to keep some dynamical property of a BN. In this way, two important problems to solve are determining all non-equivalent deterministic update schedules of a BN and the nonequivalent extensions of an updating scheme partially defined. In this paper, we address both problems and construct efficient algorithms to solve them. For that, we first build algorithms that determine the update digraphs associated to a given BN, which encoding the non-equivalent updates schedules. Next, we use the algorithm introduced in, and shown in Supplementary information, to determine in polynomial time a scheme associated to each found update digraph and hence to enumerate all nonequivalent update schedules of the network. The algorithms designed to calculate the update digraphs associated to a BN use two strategies. The first one is to avoid infeasible solutions using a polynomial algorithm. The second one is to make use of the structural characteristics of the digraph of interaction associated to a BN, as the presence of bridges, to divide the problem into subproblems, with smaller instances, which can be solved independently and whose solutions can be combined to determine the general solution. This procedure significantly reduces the total execution time of the main algorithm. As example of application of the constructed algorithms we determined in few seconds the whole set of non-equivalent deterministic schemes of four Boolean models of GRNs published in the literature: Arabidopsis Thaliana regulatory network (), Yeast transcriptional network (), the network for Body segmentation in Drosophila Melanogaster () and Mammalian Cell Cycle network (). Besides, for this latter network we determine the non-equivalent extensions of an update schedule partially defined, whose restrictions are necessary in order to keep the unique limit cycle of the network synchronously updated.
DiscussionThe problem of testing different deterministic update schedules of a BN modeling a GRN, for example to better capture an observed biological phenomenon or to study the robustness of the dynamics against to changes in the updating scheme, is reduced to use only nonequivalent schemes. This set, defined according to the update digraphs associated to a network, can be much smaller than the total set of schemes (Supplementary information and). In this article we addressed the problems of determining all non-equivalent deterministic update schedules of a BN and the non-equivalent extensions of an updating scheme partially defined. To solve them, we first construct an algorithm, named UpdateLabel, determining the label functions on the arcs of the interaction digraph of a BN that have an update schedule associated (i.e. the set of update digraphs of a BN). The UpdateLabel algorithm uses two major ideas in its design. The first one is the base of the Force algorithm, which in polynomial time checks whether the given labels on some arcs uniquely determine the label in others (only possible extension), allowing to eliminate infeasible solutions in polynomial time. The second one is to make use of the structural characteristics of the interaction digraph associated to a BN, as the presence of bridges, to divide the problem into subproblems, with smaller instances, which can be solved independently and whose solutions can be combined to determine the general solution. This procedure significantly reduces the total execution time of the main algorithm as observed in. Next, for each update digraph found with UpdateLabel algorithm we determine an update schedule scheme belonging to the class, by using a polynomial algorithm. Results obtained when the main algorithm is used with and without divisions on some digraphs K n and P n. Here, jV j and j Aj denote the number of nodes and arcs of each digraph, respectivelyshow that in few seconds we can obtain the whole set of non-equivalent update schedules of each studied network, whose cardinals correspond to the maximum number of possible dynamical behaviors of the studied networks when they are modeled by BNs with deterministic update schedules. It is important to note that despite the UpdateLabel algorithm with divisions on the interaction digraph is faster, it is limited by the RAM memory of the computer. So for large networks is advisable to use simply the UpdateLabel algorithm without division, when the number of non-equivalent schemes so allows.