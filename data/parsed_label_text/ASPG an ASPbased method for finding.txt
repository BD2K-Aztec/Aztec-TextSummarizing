Motivation: Boolean network models are suitable to simulate GRNs in the absence of detailed kinetic information. However, reducing the biological reality implies making assumptions on how genes interact (interaction rules) and how their state is updated during the simulation (update scheme). The exact choice of the assumptions largely determines the outcome of the simulations. In most cases, however, the biologically correct assumptions are unknown. An ideal simulation thus implies testing different rules and schemes to determine those that best capture an observed biological phenomenon. This is not trivial because most current methods to simulate Boolean network models of GRNs and to compute their attractors impose specific assumptions that cannot be easily altered, as they are built into the system. Results: To allow for a more flexible simulation framework, we developed ASP-G. We show the correctness of ASP-G in simulating Boolean network models and obtaining attractors under different assumptions by successfully recapitulating the detection of attractors of previously published studies. We also provide an example of how performing simulation of network models under different settings help determine the assumptions under which a certain conclusion holds. The main added value of ASP-G is in its modularity and declarativity, making it more flexible and less error-prone than traditional approaches. The declarative nature of ASP-G comes at the expense of being slower than the more dedicated systems but still achieves a good efficiency with respect to computational time. Availability and implementation: The source code of ASP-G is available at
INTRODUCTIONGene Regulatory Networks (GRNs) consist of genes, proteins and other regulatory molecules that undergo complex and dynamic interactions, which drive gene expression, and ultimately, complex cellular behavior. To be able to understand and predict this behavior, various mathematical models have been developed that describe the dynamics of these GRNs. Different model formalisms have been used, as reviewed in De Jong (2002). One of the earliest models to describe GRNs are Boolean network models (). Boolean network models are attractive because of their simplicity (): by reducing the complexity of GRNs to qualitative logical models, Boolean network models are able to cope with the largely incomplete kinetic information of biological networks. Despite their highly simplified representation of biological reality, Boolean network models were shown to still grasp the important dynamic properties of GRNs, such as the networks' attractors. An attractor represents a stable set of states toward which the transiently changing gene expression values converge to. Evolving toward an attractor thus corresponds to reaching a specific developmental stage (cell types, development stages of cells, etc.) or functional mode (De), and the analysis of attractors in a regulatory network thus hints toward the functional modes of the regulatory network (De). Current knowledge regarding GRNs is generally incomplete (). Comparing simulated with observed attractors (states, e.g. developmental stages) of a certain network model can thus aid in evaluating existing network models and/or predict missing information in the current knowledge. For instance, Mendoza and Alvarezand more recently, Espinosastudied flower development in Arabidopsis thaliana using Boolean network models of which the network attractors corresponded to stable gene expression levels during the different stages of flower development. These models helped predicting mutant phenotypes and the existence of a yet uncharacterized gene involved in the transition from the *To whom correspondence should be addressed. non-flowering to the flowering state. Davidich andused a Boolean network model and its steady states to describe the different stages in yeast cell cycle, where the stages of the cycle correspond to the strong attractors of the network.is the choice of the proper assumptions. These assumptions refer to the activation rules and update scheme. Activation rules determine the way the activation state of each gene depends on the activation states of its interactors in the previous transition step. The update scheme determines how these activation states are updated, i.e. either synchronously or asynchronously. The exact choice of these assumptions largely determines the number and characteristics of the attractors. As in most cases, the true biological activation rules and update scheme are not known, one should be able to easily test different activation rules and schemes, as this allows to have an idea on the conditions under which the simulated network model would be able to capture an observed biological phenomenon (boundary conditions). Several computational tools have been developed to perform the computation of attractors in Boolean network models.developed genYsis, which uses techniques involving binary decision diagrams (BDD) to compute attractors.used techniques based on Temporal Logic model checking in Antelope.used state space pruning and randomized state space traversal methods to improve the scalability of the attractor computation. Dubrova andused a Boolean Satisfiability (SAT) solver, typically used for combinatorial modeling and problem solving, to compute attractors of GRNs and obtained a better computational time and space efficiency compared with the BDD-based approach. More recently,developed geneFatt based on the reduced-order BDD (ROBDD) data structure, which further improves the efficiency of the attractor computation. Most of the aforementioned systems to simulate Boolean network models in principle can perform simulations with different assumptions. However, changing these assumptions would require tedious modifications on these systems. For instance, using the SAT approach (), modifying the structure of the network and the updating rules would require updating the truth tables in the cnet format. To allow for a more flexible simulation framework, we developed ASP-G, which makes use of the declarative programming paradigm Answer Set Programming (ASP;). The declarative nature of ASP allows one to specify and modify the domain-specific logic (here the definition of the network interactions, activation rules and update schemes) required to represent and solve the computational problem at hand (here dynamical modeling and attractor calculation) in an intuitive and modular way (). To illustrate the flexibility of our approach, we applied it to calculate attractors of previously published Boolean network models of GRNs of different sizes and complexity, and different simulation assumptions. By trying to mimic previous results under diverse settings, we can show that the main advantage of our approach consists of making the modeling more flexible and less error-prone, and therefore helps delineate the boundary conditions under which the biological conclusions based on simulations of Boolean network models are valid. At the same time, we also show that, with the use of fast and efficient ASP solvers, the computational efficiency of our method is in the same range as that of the most efficient dedicated methods for the simulation of Boolean network models and the calculation of their attractors.
CONCLUSIONIn this article, we presented ASP-G, a modular system to simulate Boolean network models of GRNs and to subsequently compute their attractors. ASP-G is based on the declarative ASP programming paradigm, which has already been previously applied in the context of biological network data analysis and modeling (see, e.g.). Recently,showed in a theoretical comparison between Boolean networks and the underlying semantics of ASP, that a strong mathematical relation exists between the attractors/steady states of Boolean networks and the notion of stable models commonly used in ASP. We built on this earlier result in our proposed method, ASP-G. The main added value of ASP-G is in its declarativity and modularity: it allows users to easily test different update schemes and activation rules when simulating the dynamics of their Boolean network model by selecting and modifying the appropriate modules. In addition, the fact that ASP-G is based on a declarative language makes it less error-prone than other approaches such as SAT, which depend on the definition of difficult to interpret and tedious to construct truth tables. Using an underlying declarative programming paradigm also makes ASPG easily extendable to other parameter settings. Decoupling the problem definition from its solution thus allows for a greater flexibility compared with other ad hoc systems such as genYsis () and geneFAtt (), where assumptions such as update scheme and activation rules are already built into the system. We showed the correctness of ASP-G in simulating Boolean network models and obtaining attractors under different assumptions by successfully recapitulating the detection of attractors of previously published studies. Relying on a modular and flexible declarative programming paradigm definitely comes at the expense of being slower than the more dedicated systems to compute attractors, such as genYsis () and geneFAtt (). However, in terms of computational efficiency, ASP-G proved to be fast (for small networks, i.e. up to 23 genes, computations are below a second, for larger networks, i.e. up to 51 genes, the longest computation time took 54.5 min). Also, ongoing research in ASP solvers () will make it possible for ASP to reach a point where it outperforms other logic paradigms. This is definitely the case when comparing ASP with Binary (or multiple) decision diagrams () used to calculate attractors in Boolean Networks models for GRNs () as they suffer from memory explosion when the size of the network starts to become large (). For larger-sized networks, any exhaustive method will face a challenge, as the state space of the network increases exponentially with respect to the number of nodes in the network. When dealing with such larger networks, methods that avoid an exhaustive search as inmight become more suitable under these conditions. Conclusively, ASP-G is tailored to simulate Boolean network models of GRNs and to compute attractors in a diagnostic mode, where one wants to test different update schemes and activation rules to find the setting that best matches experimental data or to correctly delineate the boundary conditions under which the biological conclusions based on these simulations are valid.