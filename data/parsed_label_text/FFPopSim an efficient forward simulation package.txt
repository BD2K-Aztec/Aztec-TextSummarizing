Motivation: The analysis of the evolutionary dynamics of a population with many polymorphic loci is challenging, as a large number of possible genotypes needs to be tracked. In the absence of analytical solutions, forward computer simulations are an important tool in multi-locus population genetics. The run time of standard algorithms to simulate sexual populations increases as 8 L with the number of loci L, or with the square of the population size N. Results: We have developed algorithms to simulate large populations with arbitrary genetic maps, including multiple crossovers, with a run time that scales as 3 L. If the number of crossovers is restricted to at most one, the run time is reduced to L2 L. The algorithm is based on an analogue of the Fast Fourier Transform (FFT) and allows for arbitrary fitness functions (i.e. any epistasis). In addition, we include a streamlined individual-based framework. The library is implemented as a collection of Cþþ classes and a Python interface.
INTRODUCTIONForward simulations of population genetics track either the number of individuals carrying each possible genotype or the genotype of every individual in the population, as illustrated in. The latter strategy has been implemented in a number of flexible simulation packages (). In large populations with a moderate number of loci L, storing the abundance of all possible 2 L genotypes is often faster. Simulating such large populations with a small number of loci is for example essential when studying the evolution of drug resistance in viral or bacterial pathogens. Individual-based population genetics simulations are straightforward and usually use a discrete generation scheme in which processes such as mutation, selection and migration are applied at every generation to every individual. Individuals are then paired up via a mating scheme and recombinant offspring are produced. Existing toolboxes often emphasize biological realism and allow the user to specify complex life cycles. Our emphasis here is on efficient simulation of large populations. The class haploid_lowd of FFPopSim tracks the distribution P(g) of gametes across all possible 2 L genotypes, denoted by g  s 1 ,. .. , s L  where s i  0/1 (see). This genotype distribution changes owing to mutation, selection and recombination. In our implementation, selection acts on haploid gametes, precluding dominance effects. Recombination is a computationally expensive operation, as it involves pairs of parents (up to 4 L of them) that can combine their genome in many different ways (2 L for arbitrary genetic maps, 2L when allowing single crossovers only). As a consequence, a naive implementation requires O8 L  or OL4 L  operations to calculate the distribution of recombinant genotypes for arbitrary or single crossover recombination, respectively. It is intuitive that the complexity of this algorithm can be reduced: given a recombination pattern, only a fraction of the genome is passed on and all genotypes that agree on that fraction contribute identically. We show in the Supplementary Material that the distribution of recombinants can be calculated in O3 L  steps for arbitrary crossover patterns and in OL2 L  steps if only a single crossover is allowed. This reduces the complexity of evolving sexual populations to that of asexual populations. The crucial ingredient for the increased performance is a Fast Fourier Transform on genotype spaces explained in detail in the Supplementary Material. The genotype space is an L dimensional hypercube on which Fourier and Taylor expansions can be defined. After selection, mutation and recombination, the population distribution P(g) contains the expected number of individuals of genotype g in the next generation. For stochastic population genetics, we still need to resample the population in a way that mimics the randomness of reproduction. This is achieved by resampling individuals according to a Poisson distribution with mean N P(g) for each genotype. The resulting population has a size of approximately N AE O ffiffiffiffi N p . The fluctuations in the population size are small if N is large and do not propagate since the population is resampled de novo each generation. The user can set the expected population size before resampling and generate any desired time-dependent population size. For a general discussion of multi-locus evolution see e.g. ().shows how the time required to simulate one generation increases with the number of loci, confirming the expected scaling behaviour of the computational complexity.results, such as a mutationselectiondrift equilibrium or the decay of linkage disequilibrium. The C library can be linked against custom code and modified for specific purposes. The class itself is called haploid_lowd, as it simulates a haploid population with a relatively small number of loci. As an example, we discuss here the problem of fitness valley crossing, which has recently received attention in the population genetics literature () and requires forward simulation of large populations while tracking the state of several loci. Consider a fitness landscape where the wild-type genotype has (Malthusian) fitness s 1 , the quadruple mutant has fitness s 1  s 2 , and all intermediate genotypes have the same slightly deleterious fitness 0 (s 1 relative to wild type). The time required for crossing the valley can be computed by the following routine: import FFPopSim L  4 # number of loci N  1e10 # population size # create population and set rates p  FFPopSim.haploid_lowd(L) p.set_recombination_rates(0.001) p.set_mutation_rates(1e-5) # start with wildtype: 0b0000  0 p.set_genotypes (,) # set positive relative fitness for wildtype # and quadruple mutant: 0b1111  15 p.set_fitness_function (,) # evolve until the quadruple mutant spreads while p.get_genotype_frequency(0b1111)50.5: p.evolve(100) print p