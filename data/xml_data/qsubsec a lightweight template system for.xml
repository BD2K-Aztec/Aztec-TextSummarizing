
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:51+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Data and text mining qsubsec: a lightweight template system for defining sun grid engine workflows</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Alastair</forename>
								<forename type="middle">P</forename>
								<surname>Droop</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">MRC Medical Bioinformatics Centre</orgName>
								<orgName type="institution">University of Leeds</orgName>
								<address>
									<addrLine>Clarendon Way</addrLine>
									<postCode>LS2 9NL</postCode>
									<settlement>Leeds</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Data and text mining qsubsec: a lightweight template system for defining sun grid engine workflows</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btv698</idno>
					<note type="submission">Received on 10 September 2015; revised on 2 November 2015; accepted on 23 November 2015</note>
					<note>*To whom correspondence should be addressed. Associate Editor: Jonathan Wren Contact: a.p.droop@leeds.ac.uk Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The Sun Grid Engine (SGE) high-performance computing batch queueing system is commonly used in bioinformatics analysis. Creating re-usable scripts for the SGE is a common challenge. The qsubsec template language and interpreter described here allow researchers to easily create generic template definitions that encapsulate a particular computational job, effectively separating the process logic from the specific run details. At submission time, the generic template is filled in with specific values. This system provides an intermediate level between simple script-ing and complete workflow management tools. Availability and implementation: Qsubsec is open-source and is available at https://github.com/ alastair-droop/qsubsec.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>High-performance computing (HPC) is fast becoming an essential part of all but the smallest bioinformatics analyses. Increasingly, shared HPC resources are available for research use. Although a great asset to bioinformatics, these systems are usually shared across multiple disciplines and are utilized by multiple simultaneous users. Such multiuser, multi-application systems require scheduling software to ensure fair use of the resources between multiple users and to make sure that the resources are optimally utilized. These schedulers demand researchers submit their analyses in a specific format with suitable metadata on memory and time limits. The Sun Grid Engine (SGE: https:// arc.liv.ac.uk/trac/SGE) is a popular version of such a system. To make full use of the available HPC, researchers must adapt their analysis scripts to work with the associated scheduling systems. Frequently, this involves breaking down large or time consuming analyses into smaller steps to make better use of resource limitations imposed by the HPC, or to parallelise independent tasks. Ordered collections of individual computational steps constitute a protocol or workflow. Workflow management software, for example Taverna Workbench (<ref type="bibr" target="#b5">Wolstencroft et al., 2013</ref>), Pegasus (<ref type="bibr" target="#b1">Deelman et al., 2015</ref>) and Galaxy (<ref type="bibr" target="#b2">Giardine et al., 2005</ref>), aims to simplify the creation, management and execution of workflows. These systems attempt to be complete data management and integration tools. As such, they allow users to search online data repositories, download relevant data and provide sets of common analysis tools (<ref type="bibr" target="#b0">Deelman et al., 2009</ref>). These systems ultimately attempt to simplify common bioinformatics analyses but there can be several major hurdles: installation and maintenance are not trivial, workflow definitions often require knowledge of languages such as CWL (https://github.com/common-workflow-lan guage/common-workflow-language) or SCUFL (<ref type="bibr" target="#b4">Oinn et al., 2004</ref>), and the user is conceptually removed from the running code. Furthermore, the multi-application nature of HPC often precludes installation of complex domain-specific software suites; in these cases, a full workflow management suite might well not be available. In many cases, these complex management suites are unnecessary, and a simpler framework for defining a workflow element is required. I here describe qsubsec, a Python-based mini-language that separates the core logic of a computational task from the specific data for a single instance without the overhead of a workflow management system. This enables users to easily write SGE job scripts in a generic form that is processed at submission time into a specific computational task. This greatly simplifies the process of defining and maintaining computational pipelines on general-purpose HPC systems. The qsubsec template mini-language and interpreter allow the computational logic of a job, along with the metadata required by the SGE queueing system, to be defined in a simple, generalised form. Specific data (for example sample names or identifiers) are provided to the interpreter at submission time. The template and specific data are then used to create and submit a job to the SGE queue. This system allows simple scripts written for use in the terminal to be trivially converted to qsubsec template files. By separating computational logic and specific data, template files can be reused in different analyses saving a large amount of code repetition. Generalization is implemented using tokens; a token (specified as an uppercase identifier surrounded by curly braces) is used wherever a run-specific data value is required. Tokens can be used in all parts of the template, including the scheduler resource definitions and job names. At submission time, the script is parsed and the values of all tokens present in the template file provided by the user. The qsubsec tool temporarily appends the specific qsubsec language functions (such as section, limits and command) to the Python 3 built-in function list and parses the supplied template using this superset. This allows the template scripts to utilize the full power of Python during job pre-processing. For example, data can easily be read from web servers or from SQL databases before the parsed job is submitted to SGE. A full description of the qsubsec built-in functions is provided in the Supplementary Material.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Example usage</head><p>Alignment to a reference genome using bwa (<ref type="bibr" target="#b3">Li and Durbin, 2009</ref>) is a common task.<ref type="figure">Figure 1</ref>shows a simple bwa alignment task (alignment and conversion of the output SAM file to BAM format) implemented as a qsubsec template file. The reference used, the relevant data directories and the sample ID are all expressed as tokens.</p><p>More complicated examples are provided in the project repository. The section command defines the job section, and provides a job name. The limits command specifies the limits that SGE will allocate to the job. Each command function defines executable code that will be run. In this example, the third command submits a subsequent template to the queue. By default, script error and output files are captured in files with names based upon the section ID. As the processor is a Python 3 script, there are very few dependencies to install on the HPC system used. This allows extremely simple deployment on mixed use machines, as there is a very low installation and maintenance overhead. Although developed and tested on SGE, multiple scheduling systems (such as the Open Grid Engine) use a very similar syntax. The scripts generated by qsubsec are likely to be compatible with these other systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Iterated tokens</head><p>If a series of related jobs are to be submitted with different parameters, multiple values for each token can be provided. The interpreter builds a job script for each unique combination of token values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Logging</head><p>All jobs submitted to SGE have both standard output and error pipes. The qsubsec system catches these and writes them to files named based upon the job ID. By default, qsubsec appends time-stamped progress messages to the output file (corresponding to stdout), allowing job progress to be monitored. Many SGE implementations will provide a short warning time before terminating a job that has overrun its allocated resources. Imminent job terminating is also recorded to the output file. Each command can optionally be tested for successful completion, and the whole job halted on failure.<ref type="figure">Figure 1</ref>shows example output from the alignment section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Summary</head><p>Here I describe qsubsec, a mini-language and interpreter to describe grid jobs on the SGE queueing system. The interpreter is very easy to use and requires minimal installation on HPC systems. Existing computational tasks can be easily converted into generic qsubsec templates. The qsubsec system provides a simple system that allows researchers to write generic job templates and thus to run their analyses on high-performance computing systems using SGE. The reporting system ensures analysis workflows, including software versions, are adequately captured.<ref type="figure">Fig. 1</ref>Example template file syntax and submission. A bwa alignment of a pair of samples followed by SAM to BAM conversion is shown. The template file does not contain specific file names. Upon submission, the script is filled in with user-supplied token values. More complex examples are provided in the online project repository</p></div>
			<note place="foot">V C The Author 2015. Published by Oxford University Press.</note>

			<note place="foot">A.P.Droop at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding</head><p>This work has been supported by the Leeds MRC Medical Bioinformatics Centre (MR/LO1629X), and the Cancer Research UK Leeds Centre (infrastructure award C37059/A18080). Conflict of Interest: none declared.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Workflows and e-Science: an overview of workflow system features and capabilities. Futur</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Deelman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Gen. Comp. Syst</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="528" to="540" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Pegasus, a workflow management system for science automation</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Deelman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Futur. Gen. Comp. Syst</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="page" from="17" to="35" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Galaxy: a platform for interactive large-scale genome analysis</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Giardine</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1451" to="1455" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Fast and accurate short read alignment with Burrows–Wheeler Transform</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Durbin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="1754" to="1760" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Taverna: a tool for the composition and enactment of bioinformatics workflows</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Oinn</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="3045" to="3054" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">The Taverna workflow suite: designing and executing workflows of Web Services on the desktop, web or in the cloud</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Wolstencroft</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nucleic Acids Res</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="557" to="561" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>