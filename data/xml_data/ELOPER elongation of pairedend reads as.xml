
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:58+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genome analysis ELOPER: elongation of paired-end reads as a pre-processing tool for improved de novo genome assembly</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2013">2013</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">David</forename>
								<forename type="middle">H</forename>
								<surname>Silver</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Biology</orgName>
								<orgName type="institution">Technion–Israel Institute of Technology</orgName>
								<address>
									<postCode>32000</postCode>
									<settlement>Haifa</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Shay</forename>
								<surname>Ben-Elazar</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Biology</orgName>
								<orgName type="institution">Technion–Israel Institute of Technology</orgName>
								<address>
									<postCode>32000</postCode>
									<settlement>Haifa</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Alexei</forename>
								<surname>Bogoslavsky</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="institution">Daynix Computing Ltd</orgName>
								<address>
									<postCode>42317</postCode>
									<settlement>Netanya</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Itai</forename>
								<surname>Yanai</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Biology</orgName>
								<orgName type="institution">Technion–Israel Institute of Technology</orgName>
								<address>
									<postCode>32000</postCode>
									<settlement>Haifa</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genome analysis ELOPER: elongation of paired-end reads as a pre-processing tool for improved de novo genome assembly</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">29</biblScope>
							<biblScope unit="issue">11</biblScope>
							<biblScope unit="page" from="1455" to="1457"/>
							<date type="published" when="2013">2013</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btt169</idno>
					<note type="submission">Received on August 30, 2012; revised on April 6, 2013; accepted on April 8, 2013</note>
					<note>Associate Editor: Martin Bishop Contact: yanai@technion.ac.il Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Paired-end sequencing resulting in gapped short reads is commonly used for de novo genome assembly. Assembly methods use paired-end sequences in a two-step process, first treating each read-end independently, only later invoking the pairing to join the contiguous assemblies (contigs) into gapped scaffolds. Here, we present ELOPER, a pre-processing tool for pair-end sequences that produces a better read library for assembly programs. Results: ELOPER proceeds by simultaneously considering both ends of paired reads generating elongated reads. We show that ELOPER theoretically doubles read-lengths while halving the number of reads. We provide evidence that pre-processing read libraries using ELOPER leads to considerably improved assemblies as predicted from the Lander–Waterman model. Availability: http://sourceforge.net/projects/eloper.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Sequencing a genome involves the production of a large number of relatively short sequences, termed reads, which collectively comprise the entire genomic sequence, several fold over. Reconstructing the genomic sequence from a set of such reads constitutes the assembly problem. A typical de novo assembler iteratively merges overlapping reads, until no additional overlap is detected (<ref type="bibr" target="#b3">Miller et al., 2010</ref>). To predict how a given library of reads will perform in the assembly process, the Lander– Waterman (LW) statistical model is generally invoked (<ref type="bibr" target="#b1">Lander and Waterman, 1988</ref>). Paired-end reads refer to the sequencing of short ($100 bp) portions of both ends of a DNA fragment. Paired-end sequencing was used extensively in Sanger sequencing of most large genomes and is also common for genome sequencing using high-throughput methods. A paired-end read amounts to more than two independent single-end reads, as the two map to proximate regions in the genome, where the proximity is defined by the known size of the library of fragments. As useful as this information is, however, methods to assemble paired-end data generally disregard the pairing information in the first stage of assembly that generates contigs, and invoke the pairing only later to build scaffolds. Here, we present ELOPER, a pre-processing tool for a library of reads to be invoked before their submission to any assembler. ELOPER exploits the notion that the paired-end information essentially doubles the read length, permitting the detection of up to double the original overlap while maintaining the minimum required sequence overlap. Thus, ELOPER detects 'gapped overlap' where sub-threshold overlaps occurring in both ends reach significant thresholds. ELOPER then returns the 'elongated' paired-end reads according to the gapped overlap detected with all other reads in the library (<ref type="figure">Fig. 1a</ref>). The result is a new library of paired-end reads, longer than the original reads. The ELOPER-processed library can be assembled using de novo assemblers (<ref type="bibr" target="#b3">Miller et al., 2010</ref>). Although ARACHNE (<ref type="bibr" target="#b0">Batzoglou et al., 2002</ref>) uses a similar approach as part of a full assembler, ELOPER allows an elongation pre-processing step followed by assembly using any assembler. Here, we show, both empirically and mathematically, that ELOPER-processing leads to better assemblies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">THE ELOPER APPLICATION</head><p>ELOPER is written in C and compatible with Linux and Windows. The application receives as command-line inputs files containing paired-end reads in FASTA format and returns elongated reads. For each paired-end read 1 in a library<ref type="bibr">[L]</ref>of short paired-end reads, ELOPER operates as follows. The shortest common superstring of 1 and i is identified if Overlap (r 1 ,r i ) þ Overlap(l 1 ,l i ) ! T, where T is an overlap length threshold and l and r are the left and right read ends. ELOPER identifies overlap of T base pairs, if both reads share the exact T base pairs. ELOPER merges all the paired-end reads, which surpass the overlap threshold into 1 0 , an elongated substitute for 1 (<ref type="figure">Fig. 1a</ref>). ELOPER implements elongation using a highly parallelized hash table creation and match detection (Supplementary Note 1).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RESULTS</head><p>The LW model predicts the expected length of a contig () and the number of contigs (Ã) as:</p><formula>¼ Ne Àc ; Ã ¼ Lððe c À 1Þ=c þ 1 À Þ,</formula><p>*To whom correspondence should be addressed.</p><p>where N is number of reads, L is the length of the reads, c is the expected coverage (LN/G) and G is the genome length. Finally, is 1-, where is the fraction of the read required for an overlap T/L. In this formulation, contigs and reads are treated synonymously. The equal sign here represents almost sure convergence as arises from ergodic theorems. The LW model bases expectation analyses on the probability of covering a base in the genome. We show that using paired-end information provides the same expectation for covering a base as single-end reads of twice the length. Given two paired-end reads, each of length L/2, which both map to a previously uncovered region in the genome, let us assume that the overlap between the pairs of ends is of length T 1 and T 2 , where T 1 þ T 2 ¼ T. The number of newly covered bases is then 2(L/2)-T 1 þ 2(L/2)-T 2 , or 2L-T. This is equivalent to the number of newly covered bases by two single-end reads of length L and overlap T. We further considered the probability for erroneous read merges. The probability of observing an overlap of T 1 þ T 2 between a pair of paired-end reads is G À 2f ð ÞÁ4 ÀðT1þT2Þ , where f is the fragment size (assuming it is constant) of the paired reads, and G is the genome size. This is roughly equal to the probability of finding an overlap of length T at random between two single-end reads G À 2T ð ÞÁ4 ÀT. Thus, using both ends of the paired-end sequences simultaneously to detect overlap (<ref type="figure">Fig. 1a</ref>) effectively halves the number of reads in the library, but doubles the length of each read in terms of the detection and error rate. Substituting these parameters in the LW model, we arrive at the following theoretical improvement to the number of contigs and to their expected length:<ref type="figure">Fig. 1</ref>. ELOPER pre-processing and its performance. (a) Schematic of the ELOPER method. Library,<ref type="bibr">[L]</ref>, of three paired-end reads, 1-3 , is shown in the top. Reads are marked in gray, and ends belonging to the same fragment are connected by a dashed line. Overlap among reads is indicated in red. ELOPER converts 1 to 1 0 after elongating using 2 and 3. The overlap between 1 and 3 is less than the threshold in either end of the read; however, taking both overlaps into account, ELOPER is able to merge these reads. (b and c) Dashed and continuous lines represent the theoretically expected and empirically measured values, respectively. Red and blue lines represent SOAPdenovo results starting from a pre-processed library of bacteriophage reads and the unprocessed library, respectively. (b) The number of contigs and the average length of a contig are shown as a function of coverage. Discrepancies between theoretical and observed values occur because the assembly includes a scaffolding step. The theoretical model is skewed when the average contig length is greater than the genome length (G). (c) A comparison of the N50 and the fraction of 'N's in the scaffolds as a function of coverage. The parameters for ELOPER and SOAPdenovo were T ¼ 30 and k ¼ 29, respectively per minute per thread with 10 GB RAM, with a chosen k-mer of 30. The runtime scales linearly with the size of the library such that the limit on the size of the library for pre-processing is restricted only by the computational resources. ELOPER thus provides a valuable pre-processing for improved de novo assemblies of short paired-end libraries.</p><formula>0 ¼ 1 2 Á e Àc 2 % Oðe Àc Þ,</formula><formula>Ã 0 Ã ! ðe c 1À</formula></div>
			<note place="foot">ß The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="2"> ð Þ À 1Þ ðe c 1À ð Þ À 1Þ % Oðe c Þ, where 0 and Ã 0 are based on a library of 2L and N/2, relative to the and Ã libraries of L and N. For a real genome with repetitive regions, these relationships will hold with a deviation of a smaller magnitude than Oðe Àc Þ and Oðe c Þ, respectively. The theoretical improvement with the paired-end information adequately included is thus expected to be exponential in terms of both the number of contigs and their mean length (dashed lines in Fig. 1b). We examined the performance of SOAPdenovo (Li et al., 2010) in assembling a library of bacteriophage reads (Sabehi et al., 2012) with and without pre-processing by ELOPER (Fig. 1b and c). We found that ELOPER pre-processing improves the quality of the assembly across a range of coverages (Fig. 1b), genomes and assemblers (Supplementary Fig. S1, Supplementary Tables S1–3). Beyond the predicted statistics, ELOPER-pre-processed libraries yield larger and more complete scaffolds, as measured by the N50 and the fraction of N&apos;s (Fig. 1c). ELOPER run-time mainly depends on the chosen k-mer; a larger k-mer results in faster pre-processing. For example, ELOPER processes 100 000 paired-end reads</note>

			<note place="foot">D.H.Silver et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">ELOPER: elongation of paired-end reads at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">ARACHNE: a whole-genome shotgun assembler</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Batzoglou</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="177" to="189" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Genomic mapping by fingerprinting random clones: a mathematical analysis</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<forename type="middle">S</forename>
				<surname>Lander</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">S</forename>
				<surname>Waterman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genomics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="231" to="239" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">De novo assembly of human genomes with massively parallel short read sequencing</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Li</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="265" to="272" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Assembly algorithms for next-generation sequencing data</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">R</forename>
				<surname>Miller</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genomics</title>
		<imprint>
			<biblScope unit="volume">95</biblScope>
			<biblScope unit="page" from="315" to="327" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">A novel lineage of myoviruses infecting cyanobacteria is widespread in the oceans</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Sabehi</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Natl Acad. Sci. USA</title>
		<meeting>. Natl Acad. Sci. USA</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="2037" to="2042" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>