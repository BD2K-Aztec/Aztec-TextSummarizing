
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:41+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genome analysis GenoMetric Query Language: a novel approach to large-scale genomic data management</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Marco</forename>
								<surname>Masseroli</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Elettronica, Informazione e Bioingegneria</orgName>
								<orgName type="institution">Politecnico di Milano</orgName>
								<address>
									<postCode>20133</postCode>
									<region>Milan</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Pietro</forename>
								<surname>Pinoli</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Elettronica, Informazione e Bioingegneria</orgName>
								<orgName type="institution">Politecnico di Milano</orgName>
								<address>
									<postCode>20133</postCode>
									<region>Milan</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Francesco</forename>
								<surname>Venco</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Elettronica, Informazione e Bioingegneria</orgName>
								<orgName type="institution">Politecnico di Milano</orgName>
								<address>
									<postCode>20133</postCode>
									<region>Milan</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Abdulrahman</forename>
								<surname>Kaitoua</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Elettronica, Informazione e Bioingegneria</orgName>
								<orgName type="institution">Politecnico di Milano</orgName>
								<address>
									<postCode>20133</postCode>
									<region>Milan</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Vahid</forename>
								<surname>Jalili</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Elettronica, Informazione e Bioingegneria</orgName>
								<orgName type="institution">Politecnico di Milano</orgName>
								<address>
									<postCode>20133</postCode>
									<region>Milan</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Fernando</forename>
								<surname>Palluzzi</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Elettronica, Informazione e Bioingegneria</orgName>
								<orgName type="institution">Politecnico di Milano</orgName>
								<address>
									<postCode>20133</postCode>
									<region>Milan</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Heiko</forename>
								<surname>Muller</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">Center for Genomic Science of IIT@SEMM</orgName>
								<orgName type="institution">Istituto Italiano di Tecnologia (IIT)</orgName>
								<address>
									<postCode>20139</postCode>
									<settlement>Milan</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Stefano</forename>
								<surname>Ceri</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Elettronica, Informazione e Bioingegneria</orgName>
								<orgName type="institution">Politecnico di Milano</orgName>
								<address>
									<postCode>20133</postCode>
									<region>Milan</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genome analysis GenoMetric Query Language: a novel approach to large-scale genomic data management</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btv048</idno>
					<note type="submission">Received on October 20, 2014; revised on January 4, 2015; accepted on January 21, 2015</note>
					<note>*To whom correspondence should be addressed. Associate Editor: Inanc Birol Contact: marco.masseroli@polimi.it Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Improvement of sequencing technologies and data processing pipelines is rapidly providing sequencing data, with associated high-level features, of many individual genomes in multiple biological and clinical conditions. They allow for data-driven genomic, transcriptomic and epigenomic characterizations, but require state-of-the-art &apos;big data&apos; computing strategies, with abstraction levels beyond available tool capabilities. Results: We propose a high-level, declarative GenoMetric Query Language (GMQL) and a toolkit for its use. GMQL operates downstream of raw data preprocessing pipelines and supports queries over thousands of heterogeneous datasets and samples; as such it is key to genomic &apos;big data&apos; analysis. GMQL leverages a simple data model that provides both abstractions of genomic region data and associated experimental, biological and clinical metadata and interoperability between many data formats. Based on Hadoop framework and Apache Pig platform, GMQL ensures high scalability, expressivity, flexibility and simplicity of use, as demonstrated by several biological query examples on ENCODE and TCGA datasets. Availability and implementation: The GMQL toolkit is freely available for non-commercial use at</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Next generation sequencing (NGS) allows high-throughput genome sequencing (DNA-seq), transcriptome profiling (RNA-seq), DNAâ€“protein interaction assessment (ChIP-seq) and epigenome characterization (ChIP-seq, BS-seq, DNase-seq). Continuous improvements of NGS technologies in quality, cost of results (http:// www.genome.gov/sequencingcosts/) and sequencing time are leading shortly to the possibility of sequencing an entire human genome in few minutes for a cost of &lt;$1000 (<ref type="bibr" target="#b7">Hayden, 2014;</ref><ref type="bibr" target="#b18">Sheridan, 2014</ref>). Sequencing of genomes in several different biological and clinical conditions for their genomic, transcriptomic and epigenomic characterization is becoming widespread. Very large-scale sequencing projects are emerging. The 1000 Genomes Project aims at establishing an extensive catalogue of human genomic variation (1000 Genomes<ref type="bibr" target="#b0">Project Consortium et al., 2010</ref>); it recently released a list of more than 79 million variant sites, using data from 2535 individuals from 26 different populations (http://www.1000genomes.org/announcements/initial-phase-3variant-list-and-phased-genotypes-2014-06-24/). The Cancer Genome Atlas (TCGA) project is a full-scale effort to systematically explore the<ref type="bibr">, 2012</ref>) provides public access to more than 4000 experimental datasets, including the just released data from its Phase 3: more than 760 experiments of mainly ChIP-seq and RNA-seq assays in human and mouse (https://www.encodedcc.org/). Thanks to such high availability of several different types of NGS data from numerous individual genomes, it is now possible to look at multiple instances of many different genomic features simultaneously, so as to characterize their functional role and elucidate genetic and epigenetic phenomena. This requires a new generation of informatics systems and languages for querying heterogeneous datasets; it also requires the state-of-the-art parallel computing strategies for distributing the computation upon clouds of computing elements, to achieve scalability and performance. Although most of current bioinformatics analysis tools do not support parallelization, lately cloud computing and high-performance parallel systems, mainly based on Hadoop (<ref type="bibr" target="#b19">Shvachko et al., 2010</ref>) and MapReduce (<ref type="bibr" target="#b2">Dean and Ghemawat, 2010</ref>) frameworks, which are typically used in other areas, have also been adopted in bioinformatics (O'<ref type="bibr">Driscoll et al., 2013;</ref><ref type="bibr">Taylor, 2010;</ref><ref type="bibr">Zou et al., 2014</ref>). A few specific parallel tools have been implemented (<ref type="bibr" target="#b10">McKenna et al., 2010;</ref><ref type="bibr" target="#b12">Nordberg et al., 2013;</ref><ref type="bibr" target="#b17">Schumacher et al., 2014;</ref><ref type="bibr">Weiwiorka et al., 2014</ref>). In particular, BioPig (<ref type="bibr" target="#b12">Nordberg et al., 2013</ref>) and SeqPig (<ref type="bibr" target="#b17">Schumacher et al., 2014</ref>) have been proposed for the efficient processing of bioinformatics programs using Pig Latin (<ref type="bibr" target="#b14">Olston et al., 2008</ref>), a high-level language for batch data processing. Recently, also SparkSeq (<ref type="bibr">Weiwiorka et al., 2014</ref>) has been proposed as general purpose tool for processing of DNA and RNA sequencing data using the Apache Spark (<ref type="bibr">Zaharia et al., 2012</ref>) engine. In this article, we propose GenoMetric Query Language (GMQL), with the associated data model and data management system, to query and compare multiple and heterogeneous genomic datasets for biomedical knowledge discovery. GMQL uses the Genomic Data Model (GDM) based on the notion of genomic region, which may span several bases. Each region can be compared with millions of other regions, typically using metric properties (this justifies the language name); in addition, GDM also covers metadata of arbitrary structure. GMQL is a high-level, declarative language that allows expressing queries easily over genomic regions and their metadata, in a way similar to what can be done with the well-known Relational Algebra and Structured Query Language (SQL) over a relational database; thus, it does not require software programmer expertise. From a system perspective, GMQL is part of GenData 2020 (http://www.bioinformatics.deib.polimi.it/gendata/), a system, which supports a data warehouse layer for storing data files in their original formats, providing suitable privacy levels, and a data selection layer, enabling abstractions from file formats and parallelization. The work in<ref type="bibr" target="#b8">Kozanitis et al. (2014)</ref>is the closest to ours, as it reports a Genome Query Language (GQL) for NGS data using an SQL extension. Our approach exhibits two main differences with respect to GQL and to all mentioned previous works. First and foremost, they start from the reads of NGS machines, i.e. raw data, and thus they must address a number of problems for identifying regions of interest on the genome, which in the current practice are normally solved by ad hoc specific tools (e.g. mutation and peak callers); conversely, GMQL starts from processed datasets. Processing raw data from within an integrated system is potentially very powerful, as no information is left outside of the query system; but there is as well a risk of replicating efforts and of giving up the efficiency of specialized data analysis tools that are widely accepted by the scientific community. A second major difference with previous works is that none of them integrate metadata within their computation; conversely, GMQL supports metadata management. Thus, it can use metadata for sample selection and matching, and query results carry along metadata that can be inspected after query execution. Many widely available experimental data (e.g. in ENCODE and TCGA) provide processed datasets and metadata; thus, GMQL can directly be used on them. In addition, each research laboratory produces data in many processed formats; through GMQL they can be compared with both locally produced and publicly available data. In a mid-term perspective, GMQL will be the appropriate tool for querying millions of processed genomic datasets and samples that will become available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Genomic data model</head><p>GDM describes genomic samples by means of two fundamental abstractions, one for genomic regions and one for their metadata. The former one characterizes the sample regions with their coordinates, relative to a reference genome, and a free number of structured, high-level properties [e.g. variation from a reference sequence, level of expression or protein binding enrichment ('peak') characteristics such as peak statistical or geometric properties]. The latter one defines the metadata of a sample (e.g. experimental conditions, biological specimen features, cell line or the patient phenotypes when data have clinical nature). The key aspect of the model is the notion of genomic region; a genomic region r i is a well-defined portion of a genome, qualified by a quadruple of values called region coordinates: r i Â¼&lt; chr; left; right; strand &gt;; where chr is the genome chromosome name, left and right are the two ends of the region along the chromosome coordinates, strand represents the DNA strand (i.e. the direction of DNA reading), encoded as either Ã¾ or Ã€, and can be missing (encoded as *). According to the UCSC notation (http://genome.ucsc.edu/FAQ/ FAQtracks.html#tracks1), we use the 0-based, half-open inter-base coordinates, i.e. the considered genomic sequence is [left, right). Thus, a region r i corresponds to all the nucleotides whose position is between its left and right ends; however, in general, we do not include nucleotide sequences within region data, but rather we store high-level properties of the region (e.g. for ChIP-seq peak samples, the peak's p-value and q-value). Metadata describe the experimental, biological and clinical properties associated with each genomic data sample; due to the great heterogeneity of information that can be associated with a data sample, in the GDM they are represented as arbitrary attributevalue pairs. We expect metadata to include at least the experiment type or the sequencing and analysis method used for the data production, the experimental condition (e.g. antibody target), the sequenced organism and tissue or cell line; in case of clinical study, individual's descriptions including phenotypes. Formally, in the GDM a sample s is defined as a triple:</p><formula>s Â¼&lt; id; &lt; r i ; v i &gt; f g ; m j Ãˆ Ã‰ &gt;;</formula><p>where id is the sample identifier (of type long); each pair &lt; r i , v i &gt; represents a region, with coordinates r i (the four fixed attributes chr, left, right and strand of type string, integer, integer and string, respectively) and values v i (which are typed attributes; we assume attribute names of a sample to be different and their types to be of any elementary type, i.e. Boolean, integer, long, float or string); m j are attribute-value pairs, with values of type string. Thus, each sample s has specific attributes describing its region properties and an associated set of attribute-value pairs referred to as the metadata of s. The region data schema of s is the set of all attribute names used for region coordinates and values, and the region data type of s is the record of all the elementary types of the corresponding attributes. The use of a type system to express region data allows for controlled arbitrary operations upon type-compatible values. In GDM, a dataset is a collection of samples with the same region data schema and type, which contain region values compliant with the data schema and a sample identifier that is unique within each dataset; thus, datasets are homogeneous collections of samples, which are typically produced within the same project (either at a genome research center, or within an international consortium) using the same technology and tools. Datasets are represented using two normalized data structures, one for region data and one for metadata; an example representing a dataset of ChIP-seq experiments is shown in<ref type="figure" target="#tab_1">Tables 1</ref>and 2. Note that the sample id attribute (first column in each data structure) provides a many-to-many connection between regions (<ref type="figure" target="#tab_1">Table 1</ref>) and metadata (<ref type="figure" target="#tab_2">Table 2</ref>) of a sample (e.g. in Tables 1 and 2, sample 1 has four regions and six metadata attributes, whereas sample 2 has three regions and five metadata attributes). Through the use of a data type system to express region data and of arbitrary attributevalue pairs for metadata, GDM provides interoperability across datasets produced by different experimental techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">GenoMetric Query Language</head><p>GMQL is a high-level language inspired by classic traditions of database management (Edward T. Codd's relational algebra dating 1971), which aims at substantially changing the level of interaction between biologists and NGS data. It extends conventional algebraic operations with bioinformatics domain-specific operations specifically designed for genomics; thus, it supports knowledge discovery across thousands or even millions of samples, both for what concerns regions that satisfy biological conditions and their relationship to experimental, biological or clinical metadata. The name 'GenoMetric Query Language' stems from the language's ability to deal with genomic distances, which are measured as nucleotide bases between genomic regions (aligned to the same reference) and computed using arithmetic operations between region coordinates. GMQL is inspired by the Pig Latin language (<ref type="bibr" target="#b14">Olston et al., 2008</ref>), which combines high-level declarative style in the spirit of SQL with the low-level procedural form of MapReduce (<ref type="bibr" target="#b2">Dean and Ghemawat, 2010</ref>); yet, it is much simpler and demands much less informatics expertise. A GMQL query (or program) is expressed as a sequence of GMQL operations with the following structure:</p><formula>&lt; variable &gt;Â¼ operator &lt; parameters &gt; Ã° Ãž &lt; variables &gt;;</formula><p>where each variable stands for a GDM dataset. Operators apply to one or more operand variables and construct one result variable; parameters are specific for each operator. Parameters of several operators include predicates, used to select and join samples; predicates are built by arbitrary Boolean expressions of simple predicates, as it is customary in relational algebra. Predicates on region data must use attributes in the region's data schema; predicates on metadata may use arbitrary attributes. Thus, when a predicate on region data uses an illegal attribute, the query is also illegal; when a predicate on metadata uses an attribute not present in the metadata, the predicate is unknown. GMQL operators form a closed algebra; hence, operator results are expressed as new datasets derived from their operands and from the operator specifications. The language supports a very rich set of predicates describing distal conditions, i.e. distal properties of regions (e.g. being among the regions at minimal distance above a given threshold from given genes). Furthermore, the management of stranded regions (i.e. regions with an orientation) is facilitated by predicates that deal with such orientation (e.g. to locate the region's starts and stops according to the strand, or the upstream or downstream directions with respect to the region's ends). GMQL includes operators on metadata (SELECT, AGGREGATE, ORDER) and regions (PROJECT, COVER, SUMMIT), as well as operators on multiple datasets (UNION, DIFFERENCE, JOIN, MAP); the full description and language specification of GMQL is provided at the GMQL web site http://www.bioinformatics.deib.polimi.it/GMQL/. A typical GMQL query starts with a SELECT operation, which creates a dataset with only the data samples that it filters out from an input dataset by using a predicate upon their metadata attributes (the input dataset can be any available data collection in a standard data format, such as BED, bedGraph, broadPeak, narrowPeak, VCF, GTF). Then, the query proceeds by processing the selected samples in batch with operations applied on their region data and/or metadata. Finally, it ends with a MATERIALIZE operation, which stores a dataset by saving the region data of each of its samples in an individual text file in standard GTF format and the related metadata in an associated tab delimited text file. We note a fundamental difference between GMQL and other available systems, namely the ability to express operations over datasets with thousands of samples in a compact way, by using few</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Examples</head><p>We demonstrate the power and flexibility of GMQL by presenting some typical queries that show GMQL at work in a rich set of biological use case examples. GMQL shows its assets in particular when it is applied on numerous samples containing many regions and of multiple data types, in order to identify their genomic regions that satisfy given distance constraints. At http://www.bioinformatics.deib.polimi. it/GMQL/ we provide an easy to install toolkit for stand-alone use of GMQL, together with the below GMQL example queries and smallscale datasets just for example testing. Note that GMQL performs worse than some other available systems on a small number of smallscale datasets, but these other systems are not cloud-based; hence, they are not adequate for efficient big data processing and, in some cases, they are inherently limited in their data management capacity, as they only work as RAM memory resident processes.This GMQL query starts by selecting all the ChIP-seq peak samples from the dataset HG19_PEAK, which can represent, e.g., all the ENCODE peak samples called from human NGS experiments aligned to the human reference genome assembly 19 (https:// genome.ucsc.edu/ENCODE/dataMatrix/encodeChipMatrixHuman. html). From an annotation base for the same human genome assembly (represented by the dataset HG19_ANN), it also selects the transcription start sites (TSS), provided by the UCSC database (https:// genome.ucsc.edu/cgi-bin/hgTables) from SwitchGear Genomics (http://switchgeargenomics.com/) and defines the promoter regions as the ones extending from 2000 bases upstream a TSS to 1000 bases downstream of the same TSS (using only TSS with high confidence score based on existing experimental evidence). Finally, it maps the peaks of each sample to the promoter regions and, for each promoter, counts how many of such peaks co-localize with the promoter, saving the obtained results. Although very simple, this example shows the power of the Map operation, which easily relates experimental data to known annotations. Note that a Select-Project-Map sequence of GMQL operations is comparable with the basic Select-From-Where sequence of SQL statements. When applied to the entire ENCODE data collection, at the time of writing this GMQL query selects 2423 samples including a total of 83 899 526 peaks, which are mapped to 131 780 promoters, saving as result 29 GB of data files in standard GTF format. Executed in a Hadhoop framework on a single server equipped with a Dual Intel Xeon ES-2650 processor, 64 GB of RAM and 16 TB of disks (RAID 5, 5 disks), it required 18 min and 33 s.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Example</head><p>3.2 Example 2: find distal bindings in transcription regulatory regions " Find all enriched regions (peaks) in CTCF transcription factor (TF) ChIP-seq samples from different human cell lines which are the nearest regions farther than 100 kb from a transcription start site (TSS). For the same cell lines, find also all peaks for the H3K4me1 histone modifications (HM) which are also the nearest regions farther than 100 kb from a TSS. Then, out of the TF and HM peaks found in the same cell line, return all TF peaks that overlap with both HM peaks and known enhancer (EN) regions " .<ref type="bibr">respectively]</ref>. Then, for each sample, it computes in TF1 the TF regions that are at minimal distance from a TSS, provided that such distance is greater than 100 000 bases, and in HM1 the HM regions that are also at minimal distance from a TSS, with the same constraint. Note that, in addition to the distal condition, the Join parameter also indicates that the result must include only the right sample matching regions, for TF1 and HM1 respectively.Next, in HM2 the query computes those HM1 regions that intersect with enhancer regions in EN, by taking the intersection of resulting regions. Finally, in TF_res, which is then saved as a result, for each cell line, it computes the TF regions in TF1 that intersect with regions in HM2, also this time taking only the right sample matching regions. At the time of writing, all enriched region samples from ENCODE human ChIP-seq amount to 2423 samples from 120 cell lines, which become 987 samples after merging sample replicates. When applied to such merged replicate samples, initially this example query selects 90 CTCF and 21 different H3K4me1 samples from 93 cell lines, including a total of 3 317 361 peaks; finally, as the result it finds 42 CTCF peaks in 11 samples from 11 cell lines. The Map operation (in Examples 1, 3 and 4) as well as the Join operation with distance and first after distance functions (in Example 2) highlight the power of GMQL in performing genometric evaluations in batch on multiple samples at a time; they are normally performed by executing data manipulation scripts, developed by individual researchers in different programming languages. Some tools provide libraries for supporting genometric queries (<ref type="bibr" target="#b11">Neph et al., 2012;</ref><ref type="bibr" target="#b15">Ovaska et al., 2013;</ref><ref type="bibr" target="#b16">Quinlan and Hall, 2010</ref>), but they are not intended for large-scale querying.This third example shows that datasets produced by different experiment types, such as RNA-seq and ChIP-seq, can be used in the same GMQL query, thanks to the interoperability provided by GDM; the UNION operator takes care of automatically unifying their different region data schemas. For each RNA-seq sample, the signal in exons with reproducible expression [i.e. with Irreproducibility Discovery Rate (IDR) &lt; 0.05] is averaged (in the new attribute signal) over two replicates (ENCODE provides RNAseq data files with expression data quantified for two replicates separately as RPKM, i.e. reads per kilobase of exon per million reads mapped). Then, the Map operation averages, within each exon, the signal in each RNA-seq or ChIP-seq sample and constructs a query result, called Genome Space, which is the ideal starting point for subsequent data analysis steps; they are not covered by GMQL, but can be performed using classical tools, which are immediately applicable to GMQL output. For instance, these analyses may include building lists of top k genes with most similar expression to that of a given gene, or identifying groups of genes and their associated histone modifications and transcription factors with similar signal patterns, e.g. by using bi-clustering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Example</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Example 4: find somatic mutations</head><p>in exons " Consider mutation data samples of human breast cancer cases. For each sample, quantify the mutations in each exon and select the exons with at least one mutation. Return the list of samples ordered by the number of such exons ". data, which are increasingly available within public large data collections (e.g. 1000 Genomes Project, TCGA and ENCODE); public data can be used not only by themselves, but also together with in house produced experimental data, for integrated evaluations and comparisons with increased support. The rich variety of provided biological use case examples, which are based on public datasets from relevant data collections such as ENCODE and TCGA, proves the declarative expressivity, power, flexibility and ease of use of GMQL, as well as its effectiveness in support of answering typical relevant biological questions on massive data. Although several tools for genomic data processing have been proposed, none of them encompasses all the GMQL features and none can perform all those evaluations, at least not with the simplicity and power of GMQL. As clarified in 'Methods' section, another important aspect of GMQL is that the language design was also inspired by dominant cloud computing paradigms, such as the Apache Pig platform and Lucene indexing, which are supported in Hadoop and by a variety of next-generation cloud-based systems. GMQL queries are translated into such paradigms and then executed. Thus, the evolution of GMQL (in terms of performance, portability, scalability) is very well-supported by the key actors of cloud computing. BEDTools (<ref type="bibr" target="#b16">Quinlan and Hall, 2010</ref>) and BEDOPS (<ref type="bibr" target="#b11">Neph et al., 2012</ref>) easily and efficiently process region data, but of individual samples (at most two at a time, for their comparison), requiring verbose scripts for multiple sample processing, with lower performance. Furthermore, they cannot manage sample metadata and do not have an internal standard for data format; this may lead different scripts to generate different output formats, with the need for external languages (e.g. AWK or SED) to manipulate their outputs, which increases the verbosity of their scripts (see Supplementary material for thorough comparison). GROK (<ref type="bibr" target="#b15">Ovaska et al., 2013</ref>) supports abstractions, but of lower-level than GMQL, and some low-level operations which are not directly supported by GMQL (e.g. region flipping); in contrast, GMQL supports high-level declarative operations, such as Join and Map. Furthermore, GROK does not support sample metadata and big data processing, being unsuitable for parallelization. GQL (<ref type="bibr" target="#b8">Kozanitis et al., 2014</ref>) offers a declarative query language for genomics, but limited to variant calling, starting from DNA-seq aligned data. As well as all the other tools, it cannot deal with metadata describing experimental, biological or clinical characteristics of the data samples; however, it is amenable to parallelization, as any SQL-like language. Some other tools for parallel processing of genomic data have been developed [e.g. GATK (<ref type="bibr" target="#b10">McKenna et al., 2010</ref>), SAMtools (<ref type="bibr" target="#b9">Li et al., 2009</ref>), BioPig (<ref type="bibr" target="#b12">Nordberg et al., 2013)]</ref>, but all of them deal with raw or aligned data; thus, they focus on data preprocessing or feature calling, without taking advantage of the quickly increasing amount of processed data which are available for knowledge discovery. BioPig provides a set of Pig Latin extensions for specific processing of data files produced by NGS machines. In BioPig, a software developer can write user defined functions (UDFs) in Java programming language, but then s/he has to manage the Pig Latin scripts manually. We stress that GMQL is designed for cloud computing processing of big data in the Hadoop framework. This makes it suitable also for remotely running in the cloud, using web services and appropriate software frameworks like Galaxy, which allows for the pipelining/integration of multiple analysis tools (<ref type="bibr" target="#b5">Giardine et al., 2005;</ref><ref type="bibr" target="#b6">Goecks et al., 2010</ref>); this avoids the need for extensive infrastructure on the user's part and allows taking advantage of the genomic data already available in the cloud, e.g. the 1000 Genomes Project data available on Amazon Elastic Compute Cloud (http:// aws.amazon.com/datasets/4383). GMQL can be used also with small data and on non-parallel computing frameworks; in these cases other available tools may show much shorter running times. When used with small data on parallel systems, slower performance is due to the latency of Hadoop's initialization, which is not a problem with big datasets since the time for data processing far exceeds the cost for the startup latency. Recently, the Hadoop community has started to address this issue and to reduce Hadoop's start-up latency with certain commercial or in memory cluster computing implementations of MapReduce, such as Apache Spark (<ref type="bibr">Zaharia et al., 2012</ref>). Although inspired by and focused on NGS technology, GMQL can process any genomic region based data in standard data format (e.g. from high-throughput array-based technology such as copy number, SNP, gene, exon, miRNA or protein arrays). Furthermore, GMQL ensures interoperability with both upstream data processing and downstream data analysis tools, by both dealing with data in a variety of standard tab delimited text formats and saving extracted results within tab delimited text files in standard GTF data format; in so doing, GMQL results can then be further processed with usual tools, or visualized in a common genome browser (e.g. the UCSC Genome Browser, Integrated Genome Browser or Integrative Genomics Viewer) for further investigation. In conclusion, GMQL leverages the many increasingly available and valuable high-level genomic data and their associated biological and clinical metadata for comprehensive and comparative querying for biomedical knowledge discovery, beyond the functionalities offered by existing tools. The provided GMQL toolkit well addresses all the three main challenges in data-intensive genomic analysis: (i) declarativeness: it provides abstractions which allow focusing on the meaning of queries to answer biological questions, rather than on its formulation; (ii) portability: it is portable to various IT infrastructures; (iii) scalability: it scales with data size, providing best performances with large data. The choice of a declarative syntax separated from, but automatically mapped to, the implementation allows for optimizations in the implementation that are transparent to the naive user, enabling researchers to effectively use big genomic data to answer key biological questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Methods</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Metadata indexing</head><p>In order to support efficient search and selection over many data samples based on their possibly very numerous metadata, we use Apache Lucene (http://lucene.apache.org/core/), a free/open source information retrieval software library. With Lucene we create and manage indexes over sample metadata and search them to filter the data samples required to answer a query; thus, only data files relevant for the query are loaded in the system and involved in query processing. The created indexing allows any arbitrary Boolean expression over metadata values to be expressed in a query.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">GMQL to Pig Latin translator</head><p>Rather than creating a specific execution engine for our GMQL, we developed a GMQL translator to Pig Latin (<ref type="bibr" target="#b14">Olston et al., 2008</ref>), a high-level data-flow language for batch processing of large datasets. This enables us to leverage two of the main features of Pig Latin: automatic execution optimization and extensibility. The former one allows focusing on semantics rather than efficiency of Pig Latin scripts, and the latter one enables the seamless integration of functions in Java programming language for special-purpose processing; we took advantage of this feature by creating specific genometric Join, Map and Cover functions. We implemented the GMQL translator in Racket (<ref type="bibr" target="#b4">Flatt, 2012</ref>), a general-purpose functional programming language in the Lisp/ Scheme family that serves as a platform for language creation, design and implementation. The syntax-directed translator has two components, the lexer and the parser. The former one scans the GMQL query and generates a list of tokens classified as keywords, variable identifiers, numbers, etc; the latter one identifies sub-sequences of the tokens that correspond to grammar rules. Once a rule is matched, a procedure emits the equivalent Pig Latin code. In addition, given that GMQL computes variables with an associated schema, a state describing such schemas is kept up-to-date during the translation. Datasets of data samples that are referred to in GMQL queries are mapped to suitable Pig Latin variables, where, at execution time, they are loaded using the internal format illustrated in Tables 1 and 2, which allows efficient management and processing in Pig Latin; each dataset that corresponds to a variable is internally mapped into two bags, one for the dataset sample metadata and one for the sample region data. The translation deals with each bag separately; while their correspondence is maintained by the suitable use of sample identifiers.<ref type="figure">Figure 2</ref>shows the translation of the first GMQL JOIN in the Example 2: TF1 Â¼ JOINÃ°first 1 Ã° Ãž after distance 100000; right distinctÃžTSS TF;</p><p>The function GenometricPig.Join computes the join between regions in the TSS and TF input datasets by capitalizing on the fact that matching regions are at a bound distance, which can be inferred from the query parameters; then, it creates tuples that satisfy the join predicate and loads them in the region and metadata bags of the TF1 output dataset, where they share the same identifier. Note that a single GMQL operation is translated into many statements of several lines of Pig Latin code; this clearly illustrates the higher level, neatness and ease of GMQL with respect to Pig Latin. To manage Pig Latin scripts, we use Apache Pig (http://pig.apache.org/), an open source platform for analyzing large datasets, which includes a compiler that turns Pig Latin scripts into sequences of MapReduce programs executable on large-scale parallel implementations of the Hadoop open-source framework (http://hadoop.apache. org/). GMQL performance on big datasets has been optimized by executing many operations in parallel; both genomic region data and datasets are partitioned by associating to each partition a distinct data sample and genome chromosome (the id and chr pair), and then computing operations in parallel upon each such partition. Recently, Apache Pig has also added a pluggable execution engine to allow Pig Latin scripts with small input data size running in-process on non-MapReduce frameworks. Although this option offers low performance and is not in line with the GMQL big data focus, we leverage it to enable local GMQL use for users who deal with a few small data samples and do not have access to parallel computing frameworks.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>1: find ChIP-seq peaks in promoter regions " In each enriched region (often called 'peak') sample from ENCODE human ChIP-seq experiments, find how many peaks co-occur in each promoter region ". HM_TF Â¼ SELECT(dataType Â¼Â¼ 'ChipSeq' AND view Â¼Â¼ 'Peaks') HG19_PEAK; TSS Â¼ SELECT(ann_type Â¼Â¼ 'TSS' AND provider Â¼ Â¼ 'UCSC') HG19_ANN; PROM Â¼ PROJECT(score &gt;Â¼ 1000; start Â¼ start-2000, stop Â¼ stop Ã¾ 1000) TSS; PROM_HM_TF Â¼ MAP(COUNT) PROM HM_TF; MATERIALIZE PROM_HM_TF;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>TF</head><figDesc>Â¼ SELECT(dataType Â¼Â¼ 'ChipSeq' AND view Â¼Â¼ 'Peaks' AND antibody_target Â¼Â¼ 'CTCF') HG19_PEAK; HM Â¼ SELECT(dataType Â¼Â¼ 'ChipSeq' AND view Â¼Â¼ 'Peaks' AND antibody_target Â¼Â¼ 'H3K4me1') HG19_PEAK; TSS Â¼ SELECT(ann_type Â¼Â¼ 'TSS' AND provider Â¼Â¼ 'UCSC') HG19_ANN; EN Â¼ SELECT(ann_type Â¼Â¼ 'enhancer' AND provider Â¼Â¼ 'UCSC') HG19_ANN; TF1 Â¼ JOIN(first(1) after distance 100 000, right_distinct) TSS TF; HM1 Â¼ JOIN(first(1) after distance 100 000, right_distinct) TSS HM; HM2 Â¼ JOIN(distance &lt; 0, int) EN HM1; TF_res Â¼ JOIN(left-&gt;cell Â¼Â¼ right-&gt;cell, distance &lt; 0, right_distinct) HM2 TF1; MATERIALIZE TF_res; This second example, whose context is illustrated in Figure 1, shows that GMQL is a powerful expressive language to answer frontier epigenomics questions. The GMQL query selects TF and HM enriched region samples from HG19_PEAK [a collection of experimental data files of signal enrichment called regions from NGS human samples aligned to the human genome assembly 19, e.g. provided by ENCODE (https:// genome.ucsc.edu/ENCODE/dataMatrix/encodeChipMatrixHuman. html)]. It also selects TSS and EN known human annotation regions from HG19_ANN [e.g. provided by the UCSC database (https:// genome.ucsc.edu/cgi-bin/hgTables) from SwitchGear Genomics (http://switchgeargenomics.com/) and Vista Enhancer (http://enhan cer.lbl.gov/),</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig.1.</head><figDesc>Fig. 1. Representation of the histone modification (HM) and transcription factor (TF) binding site enriched regions ('peaks'), known reference DNA regions and their distance relationships involved in Example 2</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><figDesc>3: associating transcriptomics and epigenomics " In RNA-seq experiments of human cancer cell line HeLa-S3, find the average expression of each exon. Then, in ChIP-seq experiments of the same cell line, find the average signal of H3K4me3 histone modifications within each exon ". Exon Â¼ SELECT(ann_type Â¼Â¼ 'exons' AND provider Â¼Â¼ 'RefSeq') HG19_ANN; HM Â¼ SELECT(dataType Â¼Â¼ 'ChipSeq' AND view Â¼Â¼ 'Peaks' AND cell Â¼Â¼ 'HeLa-S3' AND antibody_target Â¼Â¼ 'H3K4me3') HG19_PEAK; RNA Â¼ SELECT(dataType Â¼Â¼ 'RnaSeq' AND view Â¼Â¼ 'ExonsDeNovo' AND cell Â¼Â¼ 'HeLa-S3') HG19_RNA; RNA2 Â¼ PROJECT(iIDR &lt; 0.05; signal AS RPKM1 / 2 Ã¾ RPKM2 / 2) RNA; Exp Â¼ UNION RNA2 HM; Genome_space Â¼ MAP(signal_avg AS AVG(signal)) Exon Exp; MATERIALIZE Genome_space;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Taylor,R.C. (2010)</head><figDesc>An overview of the Hadoop/MapReduce/HBase framework and its current applications in bioinformatics. BMC Bioinformatics, 11(Suppl. 12), S1. Weiwiorka,M.S. et al. (2014) SparkSeq: fast, scalable and cloud-ready tool for the interactive genomic data analysis with nucleotide precision. Bioinformatics, 30, 2652â€“2653. Zaharia,M. et al. (2012) Resilient distributed datasets: a fault-tolerant abstraction for in-memory cluster computing. In: Proceedings of the 9th USENIX Symposium on Networked Systems Design and Implementation, USENIX Association, San Jose, CA, pp. 15â€“28. Zou,Q. et al. (2014) Survey of MapReduce frame operation in bioinformatics. Brief. Bioinform., 15, 637â€“647.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 1881 Bioinformatics, 31(12), 2015, 1881â€“1888 doi: 10.1093/bioinformatics/btv048 Advance Access Publication Date: 3 February 2015 Original Paper</figDesc><table>entire spectrum of genomic changes involved in human cancer (Cancer 
Genome Atlas Research Network et al., 2013). Through its data portal 
(https://tcga-data.nci.nih.gov/tcga/), it offers access to clinical informa-
tion as well as genomic characterization of the tumor genomes of more 
than 11 000 cases regarding about 30 different cancer types. The 
Encyclopedia of DNA elements (ENCODE) project (ENCODE Project 
Consortium</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><figDesc>Table 1. Excerpt of region data of a dataset with two ChIP-seq samples</figDesc><table>id 
chr 
left 
right 
strand 
p-value 

1 
2 
2476 
3178 
* 
0.00000000200 
1 
2 
15 235 
15 564 
* 
0.00000000052 
1 
5 
8790 
11 965 
* 
0.00000000009 
1 
5 
75 980 
76 342 
* 
0.00000000037 
2 
16 
862 
923 
* 
0.00000000018 
2 
16 
1276 
1409 
* 
0.00000000006 
2 
20 
3852 
4164 
* 
0.00000000031 

Corresponding sample metadata are in Table 2. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><figDesc>Table 2. Excerpt of metadata of a dataset with two ChIP-seq samples</figDesc><table>id 
attribute 
value 

1 
antibody_target 
CTCF 
1 
cell 
HeLa-S3 
1 
cell_karyotype 
cancer 
1 
cell_organism 
human 
1 
dataType 
ChipSeq 
1 
view 
Peaks 
2 
antibody_target 
JUN 
2 
cell 
H1-hESC 
2 
cell_organism 
human 
2 
dataType 
ChipSeq 
2 
view 
Peaks 

Corresponding sample region data are in Table 1. 

</table></figure>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">M.Masseroli et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">Mut Â¼ SELECT(dataType Â¼Â¼ &apos;DNASeq&apos; AND tumor_tissue_site Â¼Â¼ &apos;Breast&apos;) HG19_MUT; Exon Â¼ SELECT(ann_type Â¼Â¼ &apos;exons&apos; AND provider Â¼Â¼ &apos;RefSeq&apos;) HG19_ANN; Exon1 Â¼ MAP(mut_count AS COUNT) Exon Mut; Exon2 Â¼ PROJECT(mut_count &gt;Â¼ 1) Exon1; Exon3 Â¼ AGGREGATE(exon_count AS COUNT) Exon2; Exon_res Â¼ ORDER(DESC exon_count) Exon3; MATERIALIZE Exon_res; This fourth example shows that GMQL is very effective at counting, in batch on multiple samples, mutations that are mapped upon known regions (in this case exons) and extracting those regions having more mutations than a given threshold, ordering samples according to their number of regions extracted. Known human protein-coding and non-protein-coding exon regions are selected from HG19_ANN; such regions are provided by the UCSC database (https://genome.ucsc.edu/cgi-bin/hgTables), after retrieving them from the NCBI RNA reference sequences collection (RefSeq). Count of data sample items is performed by the Map and Aggregate operations. The Map counts mutations in each sample within each exon while mapping the mutations to the exon regions; after removal of the exons in each sample that do not contain mutations, the Aggregate counts how many exons remain in each sample and stores the result in the sample metadata as a new attributeâ€“value pair. Note that, also in this example, the query is applied in batch on multiple data samples, i.e. all those samples selected from the HG19_MUT collection, which can be very many (in the case of the publicly available TCGA data, at the time of writing the available breast cancer patient samples were 963 for a total of 87 131 mutations). By applying this GMQL query to the curated somatic mutation data publicly available in TCGA from breast cancer patients and considering all 482 313 exon regions of 46 949 human proteincoding and non-protein-coding genes provided by RefSeq, at the time of writing it extracted 963 breast cancer patient samples with mutations involving 54 688 distinct exons of 41 364 genes. 4 Discussion Our system supports efficient high-level query processing of thousands of experimental data samples, produced with a variety of experimental methods and encoded in a variety of data formats, together with their biological and clinical metadata descriptions as well as multiple annotation data. Focused on assisting knowledge extraction, it is meant to operate on higher level data obtained after raw data preprocessing and feature calling, rather than on raw data directly. This offers the advantage of not interfering with the variety of data preprocessing tools and pipelines that are already in place in the different research centers, as well as of directly benefitting of their output, thanks to the interoperability and data integration support ensured by the data model and the standard data formats used. Thus, it also allows leveraging the high-level data, including variant calling, gene expression and region enrichment (i.e. peak) calling GMQL: a novel approach to large-scale genomic data management</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding</head><p>This work was part of and supported by the 'Data-Driven Genomic Computing<ref type="bibr">[GenData 2020]</ref></p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">A map of human genome variation from population-scale sequencing</title>
		<author>
			<persName>
				<forename type="first">Consortium</forename>
				<surname>Genomes Project</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">467</biblScope>
			<biblScope unit="page" from="1061" to="1073" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">The Cancer Genome Atlas Pan-Cancer analysis project</title>
		<author>
			<persName>
				<forename type="first">Cancer</forename>
				<surname>Genome Atlas Research</surname>
			</persName>
		</author>
		<author>
			<persName>
				<surname>Network</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Genet</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page" from="1113" to="1120" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">MapReduce: a flexible data processing tool</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Dean</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Ghemawat</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="page" from="72" to="77" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">An integrated encyclopedia of DNA elements in the human genome</title>
	</analytic>
	<monogr>
		<title level="j">ENCODE Project Consortium. Nature</title>
		<imprint>
			<biblScope unit="volume">489</biblScope>
			<biblScope unit="page" from="57" to="74" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Creating languages in Racket</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Flatt</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="page" from="48" to="56" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Galaxy: a platform for interactive large-scale genome analysis</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Giardine</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1451" to="1455" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Goecks</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Biol</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page">86</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">Technology: The $1,000 genome</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<forename type="middle">C</forename>
				<surname>Hayden</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">507</biblScope>
			<biblScope unit="page" from="294" to="295" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Using Genome Query Language to uncover genetic variation</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Kozanitis</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1" to="8" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">The Sequence Alignment/Map format and SAMtools</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Li</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="2078" to="2079" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Mckenna</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="1297" to="1303" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">BEDOPS: high-performance genomic feature operations</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Neph</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="1919" to="1920" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">BioPig: a Hadoop-based analytic toolkit for largescale sequence data</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Nordberg</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="3014" to="3019" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<analytic>
		<title level="a" type="main">Big data&apos;, Hadoop and cloud computing in genomics</title>
		<author>
			<persName>
				<forename type="first">O &apos;</forename>
				<surname>Driscoll</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Biomed. Inf</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="page" from="774" to="781" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<analytic>
		<title level="a" type="main">Pig Latin: a not-so-foreign language for data processing</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Olston</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2008 ACM SIGMOD International Conference on Management of Data</title>
		<editor>L.V.S. Lakshmanan et al.</editor>
		<meeting>the 2008 ACM SIGMOD International Conference on Management of Data<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1099" to="1110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">Genomic region operation kit for extensible processing of deep sequencing data</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Ovaska</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Comput. Biol. Bioinform</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="200" to="206" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">BEDTools: a flexible suite of utilities for comparing genomic features</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">R</forename>
				<surname>Quinlan</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">I</forename>
				<forename type="middle">M</forename>
				<surname>Hall</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="841" to="842" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<analytic>
		<title level="a" type="main">SeqPig: simple and scalable scripting for large sequencing data sets in Hadoop</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Schumacher</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="119" to="120" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b18">
	<analytic>
		<title level="a" type="main">Illumina claims $1,000 genome win</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Sheridan</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Biotechnol</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page">115</biblScope>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<analytic>
		<title level="a" type="main">The Hadoop distributed file system</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Shvachko</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 IEEE 26th Symposium on Mass Storage Systems and Technologies (MSST)</title>
		<meeting>the 2010 IEEE 26th Symposium on Mass Storage Systems and Technologies (MSST)<address><addrLine>Washington, DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b20">
	<monogr>
		<title level="m" type="main">Translation of the first GMQL JOIN in Example 2 into Pig Latin GMQL: a novel approach to large-scale genomic data management</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>