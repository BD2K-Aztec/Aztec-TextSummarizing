
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:37+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genome analysis VAGUE: a graphical user interface for the Velvet assembler</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2013">2013</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">David</forename>
								<forename type="middle">R</forename>
								<surname>Powell</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Victorian Bioinformatics Consortium</orgName>
								<orgName type="institution" key="instit2">Monash University</orgName>
								<address>
									<postCode>3800</postCode>
									<settlement>Clayton</settlement>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName>
								<forename type="first">Torsten</forename>
								<surname>Seemann</surname>
							</persName>
							<email>torsten.seemann@monash.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Victorian Bioinformatics Consortium</orgName>
								<orgName type="institution" key="instit2">Monash University</orgName>
								<address>
									<postCode>3800</postCode>
									<settlement>Clayton</settlement>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Alfonso</forename>
								<surname>Valencia</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">Life Sciences Computation Centre</orgName>
								<orgName type="institution">Victorian Life Sciences Computation Initiative</orgName>
								<address>
									<postCode>3053</postCode>
									<settlement>Parkville</settlement>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genome analysis VAGUE: a graphical user interface for the Velvet assembler</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">29</biblScope>
							<biblScope unit="issue">2</biblScope>
							<biblScope unit="page" from="264" to="265"/>
							<date type="published" when="2013">2013</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/bts664</idno>
					<note type="submission">Received on September 6, 2012; revised on October 10, 2012; accepted on November 8, 2012</note>
					<note>Associate Editor: Availability and implementation: VAGUE is implemented in JRuby and targets the Java Virtual Machine. It is available under an open-source GPLv2 licence from http://www.vicbioinformatics.com/. Contact:</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Velvet is a popular open-source de novo genome assembly software tool, which is run from the Unix command line. Most of the problems experienced by new users of Velvet revolve around constructing syntactically and semantically correct command lines, getting input files into acceptable formats and assessing the output. Here, we present Velvet Assembler Graphical User Environment (VAGUE), a multi-platform graphical front-end for Velvet. VAGUE aims to make sequence assembly accessible to a wider audience and to facilitate better usage amongst existing users of Velvet.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Velvet was one of the first de novo genome assemblers, which handled short read sequences from the original Illumina Genome Analyzer (<ref type="bibr" target="#b0">Zerbino and Birney, 2008</ref>). It has become popular because it is relatively simple to install, has no dependencies, produces good results, runs fast and has a strong user community (<ref type="bibr" target="#b3">Zhang et al., 2011</ref>). The main drawback of Velvet is its complex command line interface. Projects consisting of multiple sequence libraries are challenging to specify correctly. The user needs to provide the exact file format and compression type of the input sequence files. Standard paired-end read files need to be interleaved manually beforehand. To address these and other issues, we developed Velvet Assembler Graphical User Environment (VAGUE), a graphical user interface to Velvet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">DESCRIPTION</head><p>The purpose of the VAGUE graphical user interface is to simplify running Velvet properly. The application consists of one window with four tabs: Setup, Advanced, Log and Results (<ref type="figure" target="#fig_0">Fig. 1</ref>). The active tab on starting VAGUE is Setup. It clearly lists the key parameters to be set, and Section 2.1 describes the choice of the defaults. If desired, all other Velvet parameters are accessible on the Advanced tab, which is populated dynamically by parsing the output of the Velvet executables, avoiding hard coding of any options and partially future-proofing VAGUE. The input sequence files to assemble are also added on the Setup tab. If the files came from separately prepared DNA libraries, they should be placed in different Library sections via the Add new library button. As described in Section 2.2, this now supports non-interleaved paired-end reads and bzip2 compression. The final parameter to be supplied is the k-mer size. Most first time users of Velvet find this troublesome. In Section 2.3, we describe how VAGUE can auto-detect a reasonable k value. The assembly process is launched by clicking the Run button at the bottom right corner. The view automatically switches to the Log tab, where the output of the velveth and velvetg commands can be observed while they are running behind the scenes. When the assembly is complete, the view automatically changes to the Results tab. Here, all the contigs are listed and can be individually viewed in FASTA format. Gross statistics *To whom correspondence should be addressed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Better Velvet defaults</head><p>The Velvet software has evolved significantly since its first release, with many new features now considered standard. However, to maintain backward compatibility, many of these features remain turned off by default. VAGUE changes the default values of two parameters, which improve greatly the quality of assembly produced. Both-exp_cov and-cov_cutoff are set to auto rather than left disabled. This allows for improved repeat resolution and more reliable contig sequences (<ref type="bibr" target="#b1">Zerbino et al., 2009</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Velvet command line improvements</head><p>Velvet requires the user to provide the file format (fasta, fastq, etc.) and whether it is gzip compressed. We considered implementing auto-detection of these settings within VAGUE but opted instead to add new functionality to the Velvet source code. This also allowed us to add support for bzip2 compression. The new-fmtAuto option is now part of standard Velvet and may be used by VAGUE to load input files. Illumina paired-end reads are typically distributed as two separate files, one for the left mates and one for the right mates. Velvet requires that paired reads be provided in a single interleaved file. This is an unnecessary waste of disk space and temporary files. To resolve this drawback, we extended Velvet by adding the-separate option, which allows pairs of filenames to be supplied. By adding this feature to Velvet itself, rather than within VAGUE, the benefits extend to the whole Velvet community.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Estimating the k-mer size</head><p>The key parameter for any de Bruijn graph-based assembler is the word size k. Larger values of k increase specificity but reduce depth of coverage. The author of Velvet suggests a k-coverage of 20 is a good starting point for experimentation (<ref type="bibr" target="#b2">Zerbino, 2010</ref>). VAGUE can optionally select k based on the read files the user has provided, and an estimate of the target genome size. The input read files are scanned, and the k-coverage calculated for all possible k. The k value closest to a k-coverage of 20 is automatically chosen, but it can be adjusted as the user wishes. The authors have found this strategy to choose k at or close to the value they would have chosen via manual assessment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CONCLUSIONS</head><p>The VAGUE package is free, open-source and easy to use. It runs on any platform, which supports the Java runtime environment. It comes pre-packaged with 64-bit Velvet binaries for both Linux and Mac OS X, but will preferentially use a local copy in the user's path if it is at least version 1.2.07 or higher. VAGUE will introduce Velvet to a new audience and give existing users a friendlier alternative that saves time, reduces trial and error and ultimately improves the quality of de novo assemblies produced. Additionally, the new-separate command line option and bzip2 support will save significant amounts of compute time and disk space.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig.1.</head><figDesc>Fig. 1. Screenshot of VAGUE's Setup tab on Mac OS X</figDesc></figure>

			<note place="foot">ß The Author 2012. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>The authors thank Daniel Zerbino for useful discussion and accepting our source code changes into the Velvet project; Tim Stinear, Dieter Bulach and Simon Gladman for testing VAGUE; and the reviewers of this manuscript for their helpful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Velvet: algorithms for de novo short read assembly using de Bruijn graphs</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">R</forename>
				<surname>Zerbino</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Birney</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="821" to="829" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Pebble and rock band: heuristic resolution of repeats and scaffolding in the velvet short-read de novo assembler</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">R</forename>
				<surname>Zerbino</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS One</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page">8407</biblScope>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Using the Velvet de novo assembler for short-read sequencing technologies</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">R</forename>
				<surname>Zerbino</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Curr. Protoc. Bioinformatics</title>
		<imprint>
			<biblScope unit="issue">11</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">A practical comparison of de novo genome assembly software tools for next-generation sequencing technologies</title>
		<author>
			<persName>
				<forename type="first">W</forename>
				<surname>Zhang</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS One</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page">17915</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>