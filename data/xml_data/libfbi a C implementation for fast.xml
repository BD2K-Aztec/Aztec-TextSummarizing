
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:35+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Gene expression libfbi: a C++ implementation for fast box intersection and application to sparse mass spectrometry data</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2011">2011</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Marc</forename>
								<surname>Kirchner</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Proteomics Center</orgName>
								<orgName type="institution">Children&apos;s Hospital Boston</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Children&apos;s Hospital Boston</orgName>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Harvard Medical School</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Buote</forename>
								<surname>Xu</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Proteomics Center</orgName>
								<orgName type="institution">Children&apos;s Hospital Boston</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Children&apos;s Hospital Boston</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Hanno</forename>
								<surname>Steen</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Proteomics Center</orgName>
								<orgName type="institution">Children&apos;s Hospital Boston</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Children&apos;s Hospital Boston</orgName>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Harvard Medical School</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Judith</forename>
								<forename type="middle">A J</forename>
								<surname>Steen</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Proteomics Center</orgName>
								<orgName type="institution">Children&apos;s Hospital Boston</orgName>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department" key="dep1">Department of Neurobiology</orgName>
								<orgName type="department" key="dep2">Harvard Medical School and T. M. Kirby Neurobiology Center</orgName>
								<orgName type="institution">Children&apos;s Hospital</orgName>
								<address>
									<postCode>02115</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Gene expression libfbi: a C++ implementation for fast box intersection and application to sparse mass spectrometry data</title>
					</analytic>
					<monogr>
						<title level="j" type="main">BIOINFORMATICS APPLICATIONS NOTE</title>
						<imprint>
							<biblScope unit="volume">27</biblScope>
							<biblScope unit="issue">8</biblScope>
							<biblScope unit="page" from="1166" to="1167"/>
							<date type="published" when="2011">2011</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btr084</idno>
					<note type="submission">Received on October 29, 2010; revised on February 7, 2011; accepted on February 10, 2011</note>
					<note>Page: 1166 1166–1167 Associate Editor: Martin Bishop Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Algorithms for sparse data require fast search and subset selection capabilities for the determination of point neighborhoods. A natural data representation for such cases are space partitioning data structures. However, the associated range queries assume noise-free observations and cannot take into account observation-specific uncertainty estimates that are present in e.g. modern mass spectrometry data. In order to accommodate the inhomogeneous noise characteristics of sparse real-world datasets, point queries need to be reformulated in terms of box intersection queries, where box sizes correspond to uncertainty regions for each observation. Results: This contribution introduces libfbi, a standard C++, header-only template implementation for fast box intersection in an arbitrary number of dimensions, with arbitrary data types in each dimension. The implementation is applied to a data aggregation task on state-of-the-art liquid chromatography/mass spectrometry data, where it shows excellent run time properties. Availability: The library is available under an MIT license and can be downloaded from http://software.steenlab.org/</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Modern high-resolution liquid chromatography/mass spectrometry (LC/MS) datasets are a prominent example of data stored in a sparse representation: instead of storing vectors holding all sampled measurement values, dataset sizes are minimized by dropping zero measurements, thus abolishing underlying fixed sampling grids and their implicit neighborhood relations. This choice of representation has fundamental consequences for data processing algorithms. For LC/MS, aggregation of raw measurements into (i) high mass accuracy centroid data; (ii) combination of centroids into extracted ion current (XIC) measurements; and (iii) determining XIC patterns that correspond to isotopic envelopes of analytes of interest, are standard preprocessing steps (<ref type="bibr" target="#b0">Cox and Mann, 2008;</ref><ref type="bibr" target="#b1">Khan et al., 2009</ref>). * To whom correspondence should be addressed. † The authors wish it to be known that, in their opinion, the first two authors should be regarded as joint First Authors. Each of these steps requires fast neighborhood evaluation for hundreds of thousands of single measurements. A straightforward approach to this problem is the use of space partitioning data structures such as BSP trees, Octrees, R-trees or kd-trees and to evaluate neighborhood relations on the fly using datadependent range queries (<ref type="bibr" target="#b1">Khan et al., 2009</ref>). However, real-world measurements are often subject to varying magnitudes of noise. Consequently, aggregation methods will deliver varying uncertainty estimates for e.g. calculated centroids and/or XICs. This context gives rise to a major conceptual reservation against simple range query approaches: although a range query is a natural representation for the detection of measurements that fall into the uncertainty bound of the point from which the query is issued, it cannot take into account the uncertainty of the points that should be returned by the query. Consequently, the range query assumes that the queried observations are noise free, and is bound to miss observations where points fall outside the query range but query and target uncertainty ranges overlap (<ref type="figure" target="#fig_1">Fig. 1</ref>). The key to overcoming this limitation is to reformulate the classical range query in terms of a (potentially multi-dimensional) box intersection problem with point-specific box sizes. Observations and range queries both define a set of axis-parallel boxes, and the goal is to determine all box intersections between the sets. This contribution introduces an implementation of a fast box intersection procedure termed libfbi and illustrates its application to state-of-the-art MS data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">METHOD AND IMPLEMENTATION</head><p>A box X is defined as the Cartesian product of half-open intervals</p><formula>[l 1 ,u 1 )⊗[l 2 ,u 2 )⊗···⊗[l D ,u D )</formula><p>, where the l d and u d , d ∈{1,...,D} are the lower and upper interval bounds in dimension d. The box intersection problem takes two sets of boxes A ={A i }, i ∈{1,...,M} and B ={B j }, j ∈{1,...,N} and determines an adjacency list holding the set of index pairs {(i,j) k }, k ∈{1,...,K} of intersecting boxes. libfbi provides an implementation of the fast box intersection algorithm proposed in Zomorodian and Edelsbrunner (2000). The approach follows a divide and conquer scheme, iteratively separating the sets of boxes in every dimension based on implicitly constructed segment trees. Reaching the last dimension or a threshold θ in the number of boxes, the algorithm switches to a brute-force scanning procedure to avoid the comparatively large hidden constants of the segment tree. Such a hybrid approach yields O(M +N) space complexity, O((M +N)log D ((M +N)/θ)+K) time complexity for the partitioning and O((N +M)(log(θ)+θ )) for the scan, with θ ∈{1,...,θ}.libfbi is a standard C++, template header-only implementation that makes heavy use of generic programming techniques and relies on C++0x variadic templates to support arbitrary numbers and types of dimensions. The user provides problem-specific functor classes to construct uncertainty and query intervals, and supplies suitable comparison operators, if necessary. The underlying data containers are only required to supply a forward iterator type, and their data are never copied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">APPLICATION</head><p>Data. LC/MS raw data were acquired from a HeLa cell lysate on an LTQ-Orbitrap (Thermo). Centroids were extracted using an inhouse program and fed into the libfbi example application. See Supplementary Material for details. Adjacency list construction for extracted ion current (XIC) determination. XIC construction determines groups of centroid measurements that belong to the same isotope peak (<ref type="bibr" target="#b0">Cox and Mann, 2008</ref>). Algorithmically, this amounts to determining the connected components among the centroids, where two centroids c i and c j are connected if the range query for c i intersects the uncertainty region of c j. We use libfbi to generate the adjacency list that serves as an input to the connected components algorithm. For illustration purposes, we ran libfbi with four different setups, combining two dimension ordering choices (m/z first versus retention time/scan number first) with two cutoffs θ low = 250 and<ref type="bibr">[</ref><ref type="figure" target="#fig_3">Figure 2</ref>shows the run times for different thresholds θ and different dimension orderings on datasets of increasing size. libfbi is applicable in practical settings. With average run times for ∼ 10 6 points below 10 s, libfbi is well suited for adjacency list determination in MS data analysis settings and beyond (see Supplementary Material for detailed benchmark results).Parameter selection. In libfbi, box dimensions are processed sequentially. The m/z dimension is much more discriminative, yields a smaller set of potential overlaps and hence leaves a smaller computational burden for the determination of retention time interval intersections. Hence, for θ high , the libfbi setup with m/z in the first dimension runs faster (<ref type="figure" target="#fig_3">Fig. 2</ref>, crosses and squares) and the plot reveals the quadratic complexity of the underlying scanning procedure when selectivity in the first dimension is low. As a consequence, for large θ an adequate dimension ordering is mandatory. Conversely, choosing θ = θ low (<ref type="figure" target="#fig_3">Fig. 2</ref>, circles and triangles) eliminates the tremendous influence of dimension ordering. If optimization of θ is infeasible (e.g. due to significant variance in the data), low cutoffs enhance run time stability. This is the recommended modus operandi.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION</head><p>libfbi is a library for the computation of box intersections in an arbitrary number of dimensions. Application scenarios include LC/MS feature extraction, feature correspondence estimation, bounding volume determination and collision detection in geometric and image processing problems and more. libfbi is available from http://software.steenlab.org/libfbi.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>[11:48 21/3/2011 Bioinformatics-btr084.tex] Page: 1167 1166–1167 Fast Box Intersection with libfbi.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig.1.</head><figDesc>Fig. 1. Schematic illustrations of the box intersection method (a and b) and application to (pre-identification) liquid chromatography/mass spectrometry data (c and d). Points and uncertainty estimates are denoted by dashed rectangles with crosses at their center. Active range queries are shown as solid rectangles and circles. (a) The target point falls into the range query and is correctly detected by standard range queries as well as box intersection queries. (b) The target point lies outside the range query but the target point uncertainty and the query overlap. This query only succeeds for the box intersection approach. (c) Regular range query attempting to detect points that belong to an isotope pattern. Isotope candidates fall into subsequent range queries, and standard range queries are sufficient. (d) Isotope candidates are distorted. Overlapping uncertainty regions can only be detected using box intersection queries.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><figDesc>θ high = 2×10 6 ].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig.2.</head><figDesc>Fig. 2. libfbi run time analysis. The plot shows run times (in seconds) for a selection of pruning threshold θ for increasing dataset sizes and under different dimension ordering. This illustrates that libfbi is applicable in practical settings and that low cutoffs exhibit stable run time behavior.</figDesc></figure>

			<note place="foot">© The Author 2011. Published by Oxford University Press. All rights reserved. For Permissions, please email: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>The authors thank Dominic Winter for data acquisition.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Maxquant enables high peptide identification rates, individualized p.p.b.-range mass accuracies and proteome-wide protein quantification</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Cox</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Mann</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Biotechnol</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="1367" to="1372" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Protein quantification across hundreds of experimental conditions</title>
		<author>
			<persName>
				<forename type="first">Z</forename>
				<surname>Khan</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Natl Acad. Sci. USA</title>
		<meeting>. Natl Acad. Sci. USA</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="15544" to="15548" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Fast software for box intersections</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Zomorodian</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Edelsbrunner</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SCG &apos;00: Proceedings of the sixteenth annual symposium on Computational geometry</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="129" to="138" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>