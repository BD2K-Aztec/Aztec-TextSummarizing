
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:34+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Data and text mining Bioclojure: a functional library for the manipulation of biological sequences</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2014">2014</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Jordan</forename>
								<surname>Plieskatt</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Microbiology, Immunology and Tropical Medicine</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">School of Medicine and Health Sciences</orgName>
								<orgName type="laboratory">Research Center for Neglected Diseases of Poverty</orgName>
								<orgName type="institution">George Washington University</orgName>
								<address>
									<postCode>20052</postCode>
									<settlement>Washington</settlement>
									<region>DC</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Gabriel</forename>
								<surname>Rinaldi</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Microbiology, Immunology and Tropical Medicine</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">School of Medicine and Health Sciences</orgName>
								<orgName type="laboratory">Research Center for Neglected Diseases of Poverty</orgName>
								<orgName type="institution">George Washington University</orgName>
								<address>
									<postCode>20052</postCode>
									<settlement>Washington</settlement>
									<region>DC</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Paul</forename>
								<forename type="middle">J</forename>
								<surname>Brindley</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Microbiology, Immunology and Tropical Medicine</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">School of Medicine and Health Sciences</orgName>
								<orgName type="laboratory">Research Center for Neglected Diseases of Poverty</orgName>
								<orgName type="institution">George Washington University</orgName>
								<address>
									<postCode>20052</postCode>
									<settlement>Washington</settlement>
									<region>DC</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Xinying</forename>
								<surname>Jia</surname>
							</persName>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">QIMR Berghofer Medical Research Institute</orgName>
								<orgName type="institution" key="instit2">Infectious Disease and Cancer</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jeremy</forename>
								<surname>Potriquet</surname>
							</persName>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">QIMR Berghofer Medical Research Institute</orgName>
								<orgName type="institution" key="instit2">Infectious Disease and Cancer</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jeffrey</forename>
								<surname>Bethony</surname>
							</persName>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">QIMR Berghofer Medical Research Institute</orgName>
								<orgName type="institution" key="instit2">Infectious Disease and Cancer</orgName>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Jason</forename>
								<surname>Mulvenna</surname>
							</persName>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">QIMR Berghofer Medical Research Institute</orgName>
								<orgName type="institution" key="instit2">Infectious Disease and Cancer</orgName>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">School of Biomedical Sciences</orgName>
								<orgName type="institution">The University of Queensland</orgName>
								<address>
									<postCode>4072</postCode>
									<settlement>Brisbane</settlement>
									<region>Queensland</region>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Data and text mining Bioclojure: a functional library for the manipulation of biological sequences</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">30</biblScope>
							<biblScope unit="issue">17</biblScope>
							<biblScope unit="page" from="2537" to="2539"/>
							<date type="published" when="2014">2014</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btu311</idno>
					<note type="submission">Received on January 16, 2014; revised on April 4, 2014; accepted on April 25, 2014</note>
					<note>Associate Editor: Jonathan Wren</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: BioClojure is an open-source library for the manipulation of biological sequence data written in the language Clojure. BioClojure aims to provide a functional framework for the processing of biological sequence data that provides simple mechanisms for concurrency and lazy evaluation of large datasets. Results: BioClojure provides parsers and accessors for a range of biological sequence formats, including UniProtXML, Genbank XML, FASTA and FASTQ. In addition, it provides wrappers for key analysis programs, including BLAST, SignalP, TMHMM and InterProScan, and parsers for analyzing their output. All interfaces leverage Clojure&apos;s functional style and emphasize laziness and composability, so that BioClojure, and user-defined, functions can be chained into simple pipelines that are thread-safe and seamlessly integrate lazy evaluation. Availability and implementation: BioClojure is distributed under the Lesser GPL, and the source code is freely available from GitHub</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Functional programming is a programming style that treats computation as the evaluation of mathematical functions (<ref type="bibr" target="#b4">Hudak, 1989</ref>). In its purest form, functional programming removes the need for variable assignment by using immutable data structures that eliminate the use of state and side effects (<ref type="bibr" target="#b0">Backus, 1978</ref>). This ensures that functions will always return the same value given the same input. This greatly simplifies debugging and testing, as individual functions can be assessed in isolation regardless of a global state. Immutability also greatly simplifies concurrency and facilitates leveraging of multi-core computing facilities with little or no modifications to functionally written code. Accordingly, as a programming style, functional programming offers advantages for software development, including (i) brevity, (ii) simple handling of concurrency and (iii) seamless integration of lazy evaluation, simplifying the handling of large datasets. Clojure is a Lisp variant that encourages a functional style of programming by providing immutable data structures, functions as first-class objects and uses recursive iteration as opposed to state-based looping (<ref type="bibr" target="#b3">Hickey, 2008</ref>). Clojure is built on the Java virtual machine (JVM), and thus, applications developed using BioClojure can be compiled into Java byte code and ran on any platform that runs the JVM. Moreover, libraries constructed using Clojure can be called in Java programs and, conversely, Java classes and methods can be called from Clojure programs, making available a large number of thirdparty Java libraries. BioClojure aims to leverage the tools provided by Clojure to provide a functional interface with biological sequence data and associated programs. BioClojure is similar in intent to other bioinformatics packages such as BioPerl (<ref type="bibr" target="#b6">Stajich et al., 2002</ref>), BioPython (<ref type="bibr" target="#b1">Cock et al., 2009</ref>), Bio++ (<ref type="bibr" target="#b2">Dutheil et al., 2006</ref>) and BioJava (<ref type="bibr">Prlic√©t al., 2012</ref>) but differs from these bioinformatics software libraries in its embrace of the functional style. With the decreasing cost of biological analyses, for example, next-generation sequencing, biologists are dealing with greater amounts of data, and BioClojure is an attempt to provide tools, emphasizing concurrency and lazy evaluation, for manipulating these data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">METHODS</head><p>BioClojure source code and extensive documentation are available via GitHub (https://github.com/s312569/clj-biosequence). The library is available as a Java jar file from Clojars (https://clojars.org/clj-biose quence) and can be easily incorporated into Clojure projects using lein (http://leiningen.org/). BioClojure is organized into name-spaces (modules), each either providing access to a particular sequence format, providing a wrapper to key programs, BLAST and SignalP, or providing other functionality, for example, indexing and biological alphabets. When designing functions contained within BioClojure, efforts have been made to maintain laziness and composability. This, in combination with the Clojure threading macros, facilitates the construction of analysis pipelines that can process sizeable files using minimal memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">The core module</head><p>The core module provides core functions such as DNA and protein alphabets as well as translation, key accessors and file functions. More *To whom correspondence should be addressed. √ü The Author 2014. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0/), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited. importantly, it establishes a framework for parsing sequence files using the functions 'bs-reader' and 'biosequence-seq'. Almost every module in BioClojure implements these functions to access its particular sequence format or type of data. When used in combination with the in-built Clojure macro 'with-open', these functions provide lazy access to ondisk data. For example, a simple pipeline to translate a file of nucleotide sequences in six-reading frames would use these functions in the following way: user4 (with-open<ref type="bibr">[</ref>{ " neurotrophin TRK receptor signaling pathway " 36, .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>.. .</head><p>The defined interfaces of BioClojure are designed to be lazy and composable in this way, and thus, more complex examples of these simple lazily evaluated pipelines can be developed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Sequence formats</head><p>At present, BioClojure supports sequence data formatted as Uniprot XML, Genbank XML FASTA and FASTQ. For each format, apart from parsers, BioClojure provides accessors specific to that format (see https://github.com/s312569/clj-biosequence for detailed documentation). BioClojure also provides functions for remote searching and sequence retrieval from UniProt and GenBank. For mapping of identification numbers, BioClojure provides the 'id-convert' function that uses the UniProt accession mapping service to convert accession numbers from one database format to another. Integration of diverse file formats with the structure provided by the core module is implemented using Clojure protocols; therefore, implementation of modules for new formats is facile, with additional formats, in particular GFF and GTF, expected to be supported in the near future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Application wrappers</head><p>In addition to sequence data, BioClojure also provides wrappers for running BLAST, SignalP, THMHH and Interproscan as well as parsers for their output. Once again, integration of these tools with BioClojure emphasizes lazy evaluation and composability, which simplifies integration of the tools with other parts of BioClojure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Persistence</head><p>The 'index' module provides functions for producing compressed and indexed files. An indexed file implements 'biosequence-seq' and thus can be used the same way as described above, but without the requirement for using 'with-open' or 'bs-reader'. Indexed files also provide rapid random access to indexed sequences using the 'get-biosequence' function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Concurrency</head><p>One of the primary motivations for using Clojure is the built-in support for concurrent operations. One simple example of this support is the 'pmap' function. The Clojure function 'map' serially applies a function to a list of inputs, returning a list of the outputs, and 'pmap' performs the same operations using multiple threads. If the computational cost of the applied function outweighs the coordination costs, significant performance gains are possible, as shown below using the SwissProt database: user4 (time (with-open<ref type="bibr">[</ref>(last (pmap protein-charge (biosequence-seq r)</p><p>)))) " Elapsed time: 30552.548286 msecs "</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.778330187793381</head><p>In practice, 'pmap' initiates a limited number of threads, based on the number of cores; therefore, for large datasets, or asynchronous calls, a finer-grained control over the number of threads and their behavior can be obtained using Clojure's software transactional memory, agent and atom systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CONCLUSION</head><p>BioClojure is a functional software library specifically designed for parsing and processing biological sequence data. It provides a lazy and thread-safe framework for accessing and streaming these data while using minimal amounts of memory. Presently, we extensively use the library for the annotation of nucleotide and peptide sequences arising from next-generation sequencing and the proteomic analysis of complex protein mixtures. We plan to extend the functionality of the library by incorporating modules for phylogenetic and proteomic analyses, and we welcome contributions from the community.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>provides a lazy sequence of FASTA protein sequences representing the six-frame translation of nucleotide sequences from 'FASTAfile'. The final call to 'realized?' merely illustrates the lazy nature of the calculation. The resulting sequences can be sent to the file using the BioClojure function 'biosequence-4file' or further processed using BioClojure and/or user-defined functions. The use of immutable objects and stateless iteration can lead to simple and easily understandable code. A simple example of this is the following code, which returns counts for biological process GO terms from secreted proteins in the UniProt Human proteome dataset: (with-open [r (bs-reader up-hs-proteome)]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><figDesc>r (bs-reader swissprot)] (last (map protein-charge (biosequence-seq r))))) " Elapsed time: 101232.610534 msecs " 5.778330187793381 user4 (time (with-open [r (bs-reader swissprot)]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><figDesc>Funding: National Health and Medical Research Council, Australia (grant number 1051627), as well as award R01CA155297 from the National Cancer Institute. Conflict of Interest: none declared.</figDesc></figure>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">J.Plieskatt et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="2539"> A functional library for the manipulation of biological sequences at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Backus</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="613" to="641" />
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Biopython: freely available Python tools for computational molecular biology and bioinformatics</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">J</forename>
				<surname>Cock</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="1422" to="1423" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Bio++: a set of C++ libraries for sequence analysis, phylogenetics, molecular evolution and population genetics</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Dutheil</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page">188</biblScope>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">The clojure programming language</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Hickey</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2008 symposium on Dynamic languages</title>
		<meeting>the 2008 symposium on Dynamic languages<address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Conception, evolution, and application of functional programming languages</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Hudak</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Comput. Surv. (CSUR)</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="359" to="411" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Biojava: an open-source framework for bioinformatics in 2012</title>
		<author>
			<persName>
				<forename type="first">Prlic¬¥</forename>
				<surname>Prlic¬¥</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="2693" to="2695" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">The bioperl toolkit: Perl modules for the life sciences</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">E</forename>
				<surname>Stajich</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="1611" to="1618" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>