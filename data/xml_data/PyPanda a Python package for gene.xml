
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:43+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">PyPanda: a Python package for gene regulatory network reconstruction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">David</forename>
								<forename type="middle">G P</forename>
								<surname>Van Ijzendoorn</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Pathology</orgName>
								<orgName type="institution">Leiden University Medical Center</orgName>
								<address>
									<addrLine>The Netherlands</addrLine>
									<postCode>2300RC</postCode>
									<settlement>Leiden</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Kimberly</forename>
								<surname>Glass</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Channing Division of Network Medicine</orgName>
								<orgName type="department" key="dep2">Department of Medicine</orgName>
								<orgName type="department" key="dep3">Brigham and Women&apos;s Hospital</orgName>
								<orgName type="institution">Harvard Medical School</orgName>
								<address>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">John</forename>
								<surname>Quackenbush</surname>
							</persName>
							<affiliation key="aff2">
								<orgName type="department" key="dep1">Department of Biostatistics and Computational Biology</orgName>
								<orgName type="department" key="dep2">Dana-Farber Cancer Institute</orgName>
								<address>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">Department of Biostatistics</orgName>
								<orgName type="institution" key="instit1">Harvard T.H</orgName>
								<orgName type="institution" key="instit2">Chan School of Public Health</orgName>
								<address>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff4">
								<orgName type="department" key="dep1">Department of Cancer Biology</orgName>
								<orgName type="department" key="dep2">Dana-Farber Cancer Institute</orgName>
								<address>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Marieke</forename>
								<forename type="middle">L</forename>
								<surname>Kuijjer</surname>
							</persName>
							<affiliation key="aff2">
								<orgName type="department" key="dep1">Department of Biostatistics and Computational Biology</orgName>
								<orgName type="department" key="dep2">Dana-Farber Cancer Institute</orgName>
								<address>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">Department of Biostatistics</orgName>
								<orgName type="institution" key="instit1">Harvard T.H</orgName>
								<orgName type="institution" key="instit2">Chan School of Public Health</orgName>
								<address>
									<postCode>02215</postCode>
									<settlement>Boston</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">PyPanda: a Python package for gene regulatory network reconstruction</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btw422</idno>
					<note type="submission">Received on May 3, 2016; revised on June 13, 2016; accepted on June 27, 2016</note>
					<note>Systems biology *To whom correspondence should be addressed. Associate Editor: Jonathan Wren Contact: mkuijjer@jimmy.harvard.edu or d.g.p.van_ijzendoorn@lumc.nl</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>PANDA (Passing Attributes between Networks for Data Assimilation) is a gene regulatory network inference method that uses message-passing to integrate multiple sources of &apos;omics data. PANDA was originally coded in C þþ. In this application note we describe PyPanda, the Python version of PANDA. PyPanda runs considerably faster than the C þþ version and includes additional features for network analysis. Availability and implementation: The open source PyPanda Python package is freely available at http://www.cbil.ece.vt.edu/software.htm.
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Accurately inferring gene regulatory networks is one of the most important challenges in the analysis of gene expression data. Although many methods have been proposed (<ref type="bibr" target="#b0">Altay et al., 2011;</ref><ref type="bibr" target="#b1">Ernst et al., 2008;</ref><ref type="bibr" target="#b2">Faith et al., 2007;</ref><ref type="bibr" target="#b9">Lemmens et al., 2006</ref>), computation time has been a significant limiting factor in their widespread use. PANDA (Passing Attributes between Networks for Data Assimilation) is a gene regulatory network inference method that uses message passing between multiple 'omics data types to infer the network of interactions most consistent with the underlying data (<ref type="bibr" target="#b3">Glass et al., 2013</ref>). PANDA has been applied to understand transcriptional programs in a variety of systems (<ref type="bibr" target="#b4">Glass et al., 2014</ref><ref type="bibr" target="#b6">Glass et al., , 2015b</ref><ref type="bibr" target="#b8">Lao et al., 2015</ref>). Here we introduce PyPanda, a Python implementation of the PANDA algorithm, following the approach taken in<ref type="bibr" target="#b5">Glass et al. (2015a)</ref>and optimized for matrix operations using NumPy (van der<ref type="bibr" target="#b9">Walt et al., 2011</ref>). This approach enables the use of fast matrix multiplications using the BLAS and LAPACK functions, thereby significantly decreasing run-time for network prediction compared with the original implementation of PANDA, which was coded in C þþ and used for-loops (<ref type="bibr" target="#b5">Glass et al., 2015a</ref>). We observe further speed increase over the C þþ-code because PyPanda automatically uses multiple processor-cores through the NumPy library. We have also expanded PyPanda to include common downstream analyses of PANDA networks, including the calculation of network in-and out-degrees and the estimation of single-sample networks using the recently developed LIONESS algorithm (<ref type="bibr" target="#b7">Kuijjer et al., 2015</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Approach</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Comparing PANDA C 11-code to Python-code</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1</head><p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0/), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited. LIONESS equation and in-and out-degree calculation. Without these features the Python-code is only 155 lines of code. Because the Python implementation is much more concise than the C þþ-code it is easier to interpret and modify. Next we performed a speed comparison test between the C þþcode and the Python-code. We used built-in timing functions for both languages, directly before and after the message passing part of the code as this is the step that consumes the most time (<ref type="bibr" target="#b5">Glass et al., 2015a</ref>). For the C þþ-code, we used gettimeofday() to record time in milliseconds before and after the message passing algorithm. For the Python code we implemented the time.time() function around the message passing algorithm. The C þþ-code was compiled using the clang compiler (version 3.8.0) with speed optimization flag-O3. Python (version 2.7.10) was used with NumPy (version 1.10.1) using the BLAS and LAPACK algebraic functions. All analyses were run on a server running Â86_64 GNU/Linux. The speed of the network prediction was tested using simulated networks of Ne¼ Na dimensions, where Ne is the number of effector nodes and Na is the number of affected nodes. For each of several different network sizes (Ne ¼ Na ¼ 125 to Ne ¼ Na ¼ 2000 nodes, in steps of 125) we generated ten random 'motif data' networks according to the method described in Glass et al. (2015a). We then ran the Python and C þþ versions of PANDA using these simulated motif data together with identity matrices for the protein-protein interaction and co-expression information. For runs on the same initial 'motif data' networks, we verified that the C þþ-code and Python-code returned exactly the same output network, as expected due to the deterministic nature of PANDA. The C þþ-code only uses one CPU core. In comparing the C þþcode with the Python-code using a single core, we found a 2.07-fold speed-up relative to the C þþ-code for the smallest network (Ne ¼ Na ¼ 125) tested. The speed increase of the Python-code over the C þþ-code became larger as the network size increased. For example, the Python-code performed 12.31 times faster for the largest network (Ne ¼ Na ¼ 2000) (<ref type="figure">Fig. 1A</ref>). Recorded run times across the ten random networks had a standard deviation of 0.04s and 2.59 s for the smallest (Ne ¼ Na ¼ 125) and largest (Ne ¼ Na ¼ 2000) networks, respectively using the C þþ code. Using the Python code these were reduced to 0.03s and 0.099 s. Given the abundance of multicore computing resources currently available, we also tested the speed increase when running the Python-code on multiple cores compared with running the Pythoncode on a single core. We found that for the smallest network the speed was 1.45 times faster when using 6 cores compared with using only a single core; for the largest network the speed increase was 3.7-fold (<ref type="figure">Fig. 1B</ref>). This increase in speed enables reconstruction of networks with larger numbers of regulators and target genes. For example, using the Python-code significantly decreases the time required to infer a human gene regulatory network (Ne ¼ 1000, Na ¼ 20 000), from $18 h with the C þþ-code to only about 2 h with the Python-code. This speed-up is especially important as transcription factor motif databases are frequently updated to include more motifs. Further, the decreased running time helps to enable the estimation of network significance by making the use of bootstrapping/jackknifing methods much more feasible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Additional features</head><p>In addition to reconstructing one regulatory network based on a data set consisting of multiple samples, PyPanda can also reconstruct single-sample networks using the LIONESS algorithm (<ref type="bibr" target="#b7">Kuijjer et al., 2015</ref>). In PyPanda, the LIONESS method uses PANDA to infer an 'aggregate' network representing a set of N input samples, infers a network for N – 1 samples, and then applies a linear equation to estimate the network for the sample that had been removed. The process is then repeated for each sample in the original set, producing N single-sample networks. PyPanda can also use LIONESS to reconstruct single-sample networks based on Pearson correlation. PyPanda also includes functions to calculate in-degrees (the sum of edge weights targeting a specific gene) and out-degrees (the sum of edge weights pointing out from a regulator to its target genes). These summary metrics can be used for downstream network analysis (<ref type="bibr" target="#b4">Glass et al., 2014</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding</head><p>ThisConflict of Interest: none declared.<ref type="figure">Fig. 1</ref>. Speed comparison for network reconstruction on networks of different sizes using (A) the C þþ-code and the Python-code, (B) the Python-code running on a single CPU compared with multicore (6 CPU cores)</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>We compared the C þþ-code and Python-code versions of PANDA using several metrics. First, we assessed the two implementations by comparing the number of lines of code. Using the cloc utility we counted the number of lines of C þþ-code and Python-code. The C þþ-code counted 1132 lines of code. The Python-code counted 258 lines of code, significantly shorter (4.4 times) than the C þþ-code. The Python-code also includes features such as the V C The Author 2016. Published by Oxford University Press.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><figDesc>work has been supported by the National Institutes of Health (R01 HL111759 to J.Q., K.G., P01 HL105339 to J.Q., K.G., M.L.K.) and Leiden University Fund (5259/4-6-2015/Gg to D.G.P.IJ).</figDesc></figure>

			<note place="foot">Bioinformatics, 2016, 1–3 doi: 10.1093/bioinformatics/btw422 Advance Access Publication Date: 10 July 2016 Applications Note Bioinformatics Advance Access published August 4, 2016 at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="3"> Conclusion PANDA is a proven method for gene regulatory network inference but, like most sophisticated network inference methods, its runtime has limited its utility. The Python implementation of PANDA uses matrix operations and incorporates the NumPy libraries, resulting in a significant simplification of the code and a dramatic increase in computing speed, even on a single processor. When applied to a test data set and run on multiple processing cores, this increase in speed was even greater, decreasing processing times by a factor of 46 relative to the original C þþ-code. This creates opportunities to greatly expand the use of PANDA and to implement additional measures of network significance based on bootstrapping/jackknifing. PyPanda also includes the LIONESS method, which allows inference of single-sample networks, as well as a number of other useful network metric measures. The open source PyPanda package is freely available at http://github.com/davidvi/pypanda.</note>

			<note place="foot">D.G.P.van IJzendoorn et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The authors would like to thank Judith V.M.G. Bovée, MD, PhD and Karoly Szuhai, MD, PhD for thoughtful discussions and Cho-Yi Chen, PhD for testing PyPanda.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Differential c3net reveals disease networks of direct physical interactions</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Altay</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page">296</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">A semi-supervised method for predicting transcription factor–gene interactions in escherichia coli</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Ernst</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLOS Comput. Biol</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Large-scale mapping and validation of escherichia coli transcriptional regulation from a compendium of expression profiles</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">J</forename>
				<surname>Faith</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLOS Biol</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page">8</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Passing messages between biological networks to refine predicted interactions</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Glass</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Plos One</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">64832</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Sexually-dimorphic targeting of functionally-related genes in copd</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Glass</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Syst. Biol</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">118</biblScope>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">High performance computing of gene regulatory networks using a message-passing model</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Glass</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">High Performance Extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="2015" to="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">A network model for angiogenesis in ovarian cancer</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Glass</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page">115</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<monogr>
		<title level="m" type="main">Estimating sample-specific regulatory networks</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">L</forename>
				<surname>Kuijjer</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Haploinsufficiency of hedgehog interacting protein causes increased emphysema induced by cigarette smoke through network rewiring</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Lao</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Med</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page">12</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">Inferring transcriptional modules from chip-chip, motif and microarray data The numpy array: a structure for efficient numerical computation</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Lemmens</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Biol. Comput. Sci. Eng</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">13</biblScope>
			<biblScope unit="page" from="22" to="30" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<monogr>
		<title level="m" type="main">Pypanda: a package for regulatory network reconstruction</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>