
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:45+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">BGT: efficient and flexible genotype query across many samples</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Heng</forename>
								<surname>Li</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Medical Population Genetics Program</orgName>
								<orgName type="institution">Broad Institute</orgName>
								<address>
									<postCode>02142</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Alfonso</forename>
								<surname>Valencia</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Medical Population Genetics Program</orgName>
								<orgName type="institution">Broad Institute</orgName>
								<address>
									<postCode>02142</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">BGT: efficient and flexible genotype query across many samples</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note type="submission">Received on June 28, 2015; revised on September 23, 2015; accepted on October 16, 2015</note>
					<note>Genome analysis</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>BGT is a compact format, a fast command line tool and a simple web application for efficient and convenient query of whole-genome genotypes and frequencies across tens to hundreds of thousands of samples. On real data, it encodes the haplotypes of 32 488 samples across 39.2 million SNPs into a 7.4 GB database and decodes up to 420 million genotypes per CPU second. The high performance enables real-time responses to complex queries. Availability and implementation: https://github.com/lh3/bgt Contact: hengli@broadinstitute.org</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>VCF/BCF (<ref type="bibr" target="#b1">Danecek et al., 2011</ref>) is the primary format for storing and analyzing genotypes of multiple samples. It however has a few issues. First, VCF is a site-oriented format. Although accessing a site and all the associated genotypes is efficient with indexing, retrieving site annotations or the genotypes of a few samples always requires to decode the genotypes of all samples, which is unnecessarily expensive. Second, VCF does not take advantage of linkage disequilibrium (LD), while using this information can dramatically improve compression ratio (<ref type="bibr" target="#b2">Durbin, 2014</ref>). Third, a VCF record is not clearly defined. Each record may consist of multiple alleles with each allele composed of multiple SNPs and INDELs. This ambiguity complicates annotations, query of alleles and integration of multiple datasets. At last, most existing VCF-based tools do not support expressive data query. We frequently need to write scripts for advanced queries, which costs both development and processing time. GQT (<ref type="bibr" target="#b3">Layer et al., 2015</ref>) attempts to solve some of these issues. Although it is very fast for selecting a subset of samples and for traversing all sites, it discards phasing, is inefficient for region query and is not compressed well. The observations of these limitations motivated us to develop BGT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">PBWT overview</head><p>PBWT (<ref type="bibr" target="#b2">Durbin, 2014</ref>) is a generic way to encode binary matrices. Let ðA k Þ k ¼ ðA 0 ;. .. ; A nÀ1 Þ denote a list of m-long binary strings. ðA k Þ k can be regarded as an n Â m binary matrix with A k ½i representing the cell at row k and column i. For simplicity, introduce a sentinel row A À1 ¼ $ 0 $ 1 Á Á Á $ mÀ1 with a lexicographical order $ 0 &lt; Á Á Á &lt; $ mÀ1. Define binary string:</p><p>P ki ¼ A k ½iA kÀ1 ½i. .. A 0 ½iA À1 ½i to be the reverse of the column prefix ending at (k, i) and define S k ðiÞ to be the column index of the i-th smallest prefix among set fP kj g j. S k ðiÞ is a bijection on f0;. .. ; m À 1g and thus invertible. In a special case, S À1 ðiÞ ¼ i because P À1;i ¼ A À1 ½i ¼ $ i. The PBWT of ðA k Þ k is ðB k Þ k , which is calculated byGiven A k and S kÀ1 , we can compute S k and B k in the order of B k ! / k ! S k , starting from k ¼ 0. Conversely, given B k and S kÀ1 , computing / k ! S k ! A k derives A k from B k. When there are strong correlations between adjacent rows, which is true for haplotype data due to LD, 0 s and 1 s tend to form long runs in B k. This usually makes B k much more compressible than A k under run-length encoding. For our test dataset, 32 000 genotypes in a row can be compressed to &lt; 200 bytes in average.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Query genotypes and output</head><p>A BGT query may consist of three types of conditions: (a) genotypeindependent sample selection, such as a list of sample names or an arbitrary expression on phenotypes; (b) genotype-independent site selection, such as a genomic region, a list of alleles or an arbitrary expression on variant annotations; (c) genotype-dependent site conditions, such as alleles being common among selected samples. We may select multiple groups of samples with (a)-typed conditions. For each group, BGT will compute aggregate variables, including the number of called samples and the allele count, which can be outputted or used in (c)-typed conditions. BGT usually outputs VCF/BCF with aggregate variables written to the INFO field. It may optionally output a TAB-delimited table on user selected fields. BGT may also output the samples having a list of alleles, and the counts of haplotypes across requested alleles in multiple sample groups. The BGT server tries to solve a bigger problem: data sharing. Instead of always delivering full data in VCF, projects could have a new option to serve data publicly with the BGT server, letting users select the summary statistics of interest on the fly while keeping samples unidentifiable. This is an improvement to<ref type="bibr" target="#b4">Stade et al. (2014)</ref>which only provide precomputed summary. We acknowledge that our MGS-based data sharing policy might have oversimplified real scenarios, but we believe this direction, with proper improvements and more importantly the approval of ethical review boards, will be more open, convenient, efficient and secure than our current share-everything-with-trust model.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>B k ½i ¼ A k ½S kÀ1 ðiÞ An important use of ðB k Þ k is to compute S k. Define / k ðiÞ ¼ C k ðB k ½iÞ þ rank k ðB k ½i; iÞ where C k ðbÞ gives the number of symbols in B k that are lexicographically smaller than b and rank k ðb; iÞ the number of b symbols in B k before position i. The i-th smallest column in row k – 1 is ranked / k ðiÞ in row k. Thus S k ð/ k ðiÞÞ ¼ S kÀ1 ðiÞ</figDesc></figure>

			<note place="foot" n="2"> Methods Unlike VCF which stores sample phenotypes, site annotations and genotypes all in one file, BGT separates the three types of information into individual files. BGT keeps diploid genotypes as a 2-bit integer matrix ðH ki Þ with row indexed by a pair of overlapping reference/ non-reference alleles and column by a sample haplotype (thus for m 0 samples, the matrix has 2m 0 columns). H ki takes value 0 if the i-th haplotype has the reference allele in the allele pair at row k, takes 1 if the haplotype has the non-reference allele, 2 if unknown and 3 if the haplotype has a different non-reference allele. BGT arbitrarily phases unphased genotypes and always breaks complex variants in VCF down to the smallest possible variants. It keeps the allele pairs (i.e. rows) in a site-only BCF, disallowing multiple alleles per VCF line, and stores the integer matrix as two positional BWTs (PBWTs), one for the lower bit and the other for the higher bit. BGT obtains phenotypes and site annotations from files in the Flat Metadata Format (FMF). FMF is TAB-delimted with the first column showing the row name and following columns giving typed key-value pairs. An example looks like: sample1 gender:Z:M height:f:1.73 foo:i:10 sample2 gender:Z:F height:f:1.64 bar:i:20 BGT can retrieve rows via an arbitrary expression such as &apos;height &gt; 1.65&apos;. The multi-file design makes BGT unfriendly to data streaming but it enables BGT to use one set of site annotations across multiple BGT files and allows users to modify phenotypes and annotations without re-encoding all the genotypes. V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com</note>

			<note place="foot">at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="2">.3 BGT server BGT comes with a standalone web server frontend implemented in the Go programming language. The server has a similar interface to the command line tool but with additional consideration of sample anonymity. With BGT, each sample has an attribute &apos;minimal group size&apos; or MGS. If a query selects a group containing a sample with a MGS larger than the requested group size, the server will refuse the request. In particular, if a sample has MGS larger than one, users cannot access its sample name and individual genotypes but can retrieve allele counts computed together with other samples. This prevents users to access data at the level of a single sample. 3 Results We generated the BGT database for the first release of Haplotype Reference Consortium (HRC; http://bit.ly/HRC-org). The input is a BCF containing 32 488 samples across 39.2 million SNPs on autosomes. The BGT file size is 7.4 GB, 11% of the genotype-only BCF or 8% of GQT. Decoding the genotypes of all samples across 142 k sites in a 10 Mbp region takes 11 CPU seconds, which amounts to decoding 420 million genotypes per second. This speed is even faster than computing allele counts and outputting VCF. We use the following command line to demonstrate the query syntax of BGT: bgt view-G-d var.fmf.gz-a&apos;gene¼¼ &quot; BRCA1 &quot; &apos; \-s &apos;source¼¼ &quot; IBD &quot; &apos;-s &apos;source¼¼ &quot; 1000G &quot; &apos; \-f &apos;AC1/AN1&gt;¼0.001&amp;&amp;AC2/AN2&gt;¼0.001&apos; \ HRC-r1.bgt It finds BRCA1 variants annotated in &apos;var.fmf.gz&apos; that have !0.1% frequency in both the IBD dataset (http://www.ibdresearch.co.uk) and 1000 Genomes (1000 Genomes Project Consortium, 2012). In this command line,-G disables the output of genotypes. Option-a selects variants with the &apos;gene&apos; attribute equal to &apos;BRCA1&apos; according to the variant database specified with-d. This condition is a (b)typed condition independent of sample genotypes. Each option-s sets an (a)-typed condition, selecting a group of samples based on phenotypes. For the #-th sample group/-s, BGT counts the total number of called alleles and the number of non-reference alleles and writes them to the AN# and AC# aggregate variables, respectively. Option-f then use these aggregate variables to filter output. This is a (c)-typed condition. The command line earlier takes 12 CPU seconds with most of time spent on reading through the variant annotation file to find matching alleles. The BGT server reads the entire file into memory to alleviate the overhead but a better solution would be to use a proper database for variant annotations. To demonstrate the server frontend, we have also set up a public BGT server at http://bgtdemo.herokuapp.com. It hosts 1000 Genomes haplotypes for chromosome 11 and 20. 4 Discussion Given a multi-sample VCF, most BGT functionalities can be achieved with small scripts, but as a command line tool, BGT has a few advantages. First, it saves development time. Extracting information from multiple files can be done with a command line instead of a script. Second, BGT saves processing time. With high-performance C code at the core, BGT is much faster than processing VCF in a scripting language such as Perl or Python. For example, deriving allele counts in a 10 Mbp region for the HRC data takes 30 s with BGT, but doing the same with a Perl script takes 40 min, a 80-fold difference. Third, the design of one non-reference allele per record simplifies BGT merge and makes it twice as fast as bcftools merge on two genotype-only input files. BGT: efficient genotype query</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The authors are grateful to HRC for granting the permission to use the data for evaluating the performance of BGT and thank the Global Alliance Data Working Group for the helpful suggestions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">An integrated map of genetic variation from 1 092 human genomes</title>
	</analytic>
	<monogr>
		<title level="j">Genomes Project Consortium. Nature</title>
		<imprint>
			<biblScope unit="volume">491</biblScope>
			<biblScope unit="page" from="56" to="65" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">The variant call format and VCFtools</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Danecek</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="2156" to="2158" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Efficient haplotype matching and storage using the positional Burrows-Wheeler transform (PBWT)</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Durbin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1266" to="1272" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<monogr>
		<title level="m" type="main">Efficient compression and analysis of large genetic variation datasets</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">M</forename>
				<surname>Layer</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">GrabBlur–a framework to facilitate the secure exchange of whole-exome and-genome SNV data using VCF files</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Stade</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Genomics</title>
		<imprint>
			<biblScope unit="page" from="15" to="23" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>Suppl. . 4</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>