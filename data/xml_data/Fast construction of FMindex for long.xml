
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:50+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Sequence analysis Fast construction of FM-index for long sequence reads</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2014">. 22 2014</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName>
								<forename type="first">Heng</forename>
								<surname>Li</surname>
							</persName>
							<email>lh3/ropebwt2 Contact: hengli@broadinstitute.org</email>
							<affiliation key="aff0">
								<orgName type="department">Medical Population Genetics Program</orgName>
								<orgName type="institution">Broad Institute</orgName>
								<address>
									<addrLine>75 Ames Street</addrLine>
									<postCode>02142</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Sequence analysis Fast construction of FM-index for long sequence reads</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">30</biblScope>
							<biblScope unit="page" from="3274" to="3275"/>
							<date type="published" when="2014">. 22 2014</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btu541</idno>
					<note type="submission">Received on June 2, 2014; revised on July 15, 2014; accepted on August 4, 2014</note>
					<note>Associate Editor: Michael Brudno</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We present a new method to incrementally construct the FM-index for both short and long sequence reads, up to the size of a genome. It is the first algorithm that can build the index while implicitly sorting the sequences in the reverse (complement) lexicographical order without a separate sorting step. The implementation is among the fastest for indexing short reads and the only one that practically works for reads of averaged kilobases in length. Availability and implementation: https://github.com/</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>FM-index plays an important role in DNA sequence alignment, de novo assembly (<ref type="bibr" target="#b6">Simpson and Durbin, 2012</ref>) and compression (<ref type="bibr" target="#b2">Cox et al., 2012</ref>). Fast and lightweight construction of FMindex for a large dataset is the key to these applications. In this context, a few algorithms (<ref type="bibr" target="#b0">Bauer et al., 2013;</ref><ref type="bibr" target="#b5">Liu et al., 2014</ref>) have been developed that substantially outperform earlier algorithms. However, they are only efficient for short reads. A fast and practical algorithm for long sequence reads is still lacking. This work aims to fill this gap.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">METHODS</head><p>Let S=fA; C; G; T; Ng be the alphabet of DNA with a lexicographical order A5C5G5T5N. Each element in S is called a symbol and a sequence of symbols called a string over S. Given a string P, jPj is its length and P½i the symbol at position i. A sentinel $ is smaller than all the other symbols. For simplicity, we let P½À1=P½jPj=$. We also introduce ~ P as the reverse of P and P as the reverse complement of P. Given a list of strings over S, ðP i Þ 0 i5m , let T = P 0 $ 0. .. P m – 1 $ m – 1 with $ 0 5 Á Á Á 5$ mÀ1 5A5C5G5T5N. The suffix array of T is an integer array S such that S(i), 0 i5jTj, is the starting position of the i-th smallest suffix in the collection T. The Burrows-Wheeler Transform, or BWT, of T can be computed as B½i=T½SðiÞ À 1. For the description of the algorithm, we segment B into B=B $ B A B C B G B T B N , where B a ½i=B½i +CðaÞ with CðaÞ=jfj : T½j5agj being the array of accumulative counts. By the definition of suffix array and BWT, B a consists of all the symbols with their next symbol in T being a. The above defines BWT for an ordered list of strings. We next seek to define BWT for an unordered set of strings C by imposing an arbitrary sorting order on C. We say list ðP i Þ i is in the reverse lexicographical order or RLO, if ~ P i ~ P j for any i5j; say it is in the reverse-complement lexicographical order or RCLO, if P i P j for any i5j. The RLO-BWT of C, denoted by B RLO ðCÞ, is constructed by sorting strings in C in RLO and then applying the procedure in the previous paragraph on the sorted list. RCLO-BWT B RCLO ðCÞ can be constructed in a similar way.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RESULTS AND DISCUSSION</head><p>We implemented the algorithm in ropeBWT2 and evaluated its performance together with BEETL (http://bit.ly/beetlGH), the original on-disk implementation of BCR and BCRext, ropeBWT-BCR (https://github.com/lh3/ropebwt), an inmemory reimplementation of BCR by us, and NVBio (http:// bit.ly/nvbioio), a GPU-based algorithm inspired by CX1 (<ref type="bibr" target="#b5">Liu et al., 2014</ref>).<ref type="figure">Table 1</ref>shows that for $100 bp reads, ropeBWT2 has comparable performance to others. For the $875 bp Venter dataset, NVBio aborted due to insufficient memory under various settings. We did not apply BCR because it is not designed for long reads of unequal lengths. Only ropeBWT2 works with this data set and the even longer moleculo reads.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>Funding: NHGRI U54HG003037; NIH GM100233. Conflict of Interest: none declared.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><figDesc>Table 1. Performance of BWT construction</figDesc><table>Data a Algorithm 
RCLO Real 
CPU% RAM b 
(GB) 

Comments 

worm nvbio 
– 
316 s 
138 
12.9 
See note c 
worm ropebwt-bcr – 
480 s 
223 
2.2 
-btORf 
worm Algorithm 3 Yes 
506 s 
250 
10.5 
-brRm10g 
worm Algorithm 3 No 
647 s 
249 
11.8 
-bRm10g 
worm beetl-bcr 
– 
965 s 
259 
1.8 
RAM disk d 
worm beetl-bcr 
– 
2092 s 122 
1.8 
Network e 
worm Algorithm 1 – 
5125 s 100 
2.5 
-bRm0 
worm beetl-bcrext – 
5900 s 48 
0.1 
Network e 
12 878 ropebwt-bcr – 
3.3 h 
210 
39.3 
-btORf 
12 878 nvbio 
– 
4.1 h 
471 
63.8 
See note f 
12 878 Algorithm 3 Yes 
5.0 h 
261 
34.0 
-brRm10g 
12 878 Algorithm 3 No 
5.1 h 
248 
60.9 
-bRm10g 
12 878 beetl-bcr 
– 
11.2 h 131 
31.6 
Network e 
Venter Algorithm 3 Yes 
1.4 h 
274 
22.2 
-brRm10g 
Venter Algorithm 3 No 
1.5 h 
274 
22.8 
-bRm10g 
mol 
Algorithm 3 No 
6.8 h 
285 
20.0 
-bRm10g 

a </table></figure>

			<note place="foot">In B RCLO ðfP i g i [ fP j g j Þ, the k-th smallest sequence is the reverse complement of the k-th sequence in the FM-index. This property removes the necessity of keeping an extra array to link the rank and the position of a sequence in the FM-index, and thus helps to reduce the memory of some FM-index–based algorithms (Simpson and Durbin, 2012). For short reads, RLO/RCLO-BWT is also more compressible (Cox et al., 2012). As a preparation, we further define two string operations: rankðc; k; BÞ and insertðc; k; BÞ, where rankðc; k; BÞ=jfi5k : B½i=cgj gives the number of symbols c before the position k in B, and insertðc; k; BÞ inserts symbol c after k symbols in B with all the symbols after position k shifted to make room for c. We implemented the two operations by representing each B c in a B+-tree in memory, where a leaf keeps a run-length encoded string and an internal node keeps the count of each symbol in the leaves descended from the node. Algorithm 1 appends a string to an existing index by inserting each of its symbol from the end of P. It was first described by Chan et al. (2004). Algorithm 2 constructs RLO/RCLO-BWT in a similar manner to Algorithm 1 except that it inserts P½i to ½l; uÞ, the suffix array interval of P&apos;s suffix starting at i + 1, and that BWT symbols in this interval are already sorted. This process implicitly applies a radix sort from the end of P, sorting it into the existing strings in the BWT in RLO/RCLO. Note that if we change line 1 to &quot; l u jfi : B½i=$gj &quot; , Algorithm 2 will be turned into Algorithm 1. Recall that the BCR algorithm (Bauer et al., 2013) is, to some extent, the multi-string version of Algorithm 1. Following similar reasoning, we can extend Algorithm 2 so as to insert multiple strings at the same time, which gives Algorithm 3. We use an array A(j) to keep the state of the j-th sequence after inserting its d-long suffix. At line 2, AðjÞ:c is the previously inserted symbol and ½AðjÞ:l; AðjÞ :uÞ is the interval to which the new symbol is inserted. In implementation, we may speed up the sorting mode by inserting multiple symbols at line 3. When B is represented by a balanced tree structure, the time complexity of all three algorithms is Oðn log nÞ, where n is the total number of symbols in the input. However, we will see later that for short strings, Algorithm 3 is substantially faster than the first two algorithms, due to the locality of memory accesses, the possibility of cached B+-tree update and the parallelization of the &apos;for&apos; loop at line 1. These techniques are more effective for a larger batch of shorter strings. Disregarding RLO/RCLO, Algorithm 3 is similar to BCR except that BCR keeps B in monolithic arrays. As a result, the time complexity of BCR is O(nl), where l is the maximum length of reads, not scaling well to l.</note>

			<note place="foot">ß The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">Fast construction of FM-index at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">Lightweight algorithms for constructing and inverting the BWT of string collections</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">J</forename>
				<surname>Bauer</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">483</biblScope>
			<biblScope unit="page" from="134" to="148" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">Compressed index for a dynamic collection of texts</title>
		<author>
			<persName>
				<forename type="first">H.-L</forename>
				<surname>Chan</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lecture Notes in Computer Science</title>
		<editor>Sahinalp,S.C. Muthukrishnan,S. and Dogrus€ oz,U. CPM,</editor>
		<imprint>
			<publisher>Springer</publisher>
			<biblScope unit="volume">3109</biblScope>
			<biblScope unit="page" from="445" to="456" />
			<date type="published" when="2004" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Large-scale compression of genomic sequence databases with the burrows-wheeler transform</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">J</forename>
				<surname>Cox</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="1415" to="1419" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">A framework for variation discovery and genotyping using next-generation DNA sequencing data</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">A</forename>
				<surname>Depristo</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Genet</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="491" to="498" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">The diploid genome sequence of an individual human</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Levy</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS Biol</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page">254</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<monogr>
		<title level="m" type="main">GPU-accelerated BWT construction for large collection of short reads</title>
		<author>
			<persName>
				<forename type="first">C.-M</forename>
				<surname>Liu</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">Efficient de novo assembly of large genomes using compressed data structures</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">T</forename>
				<surname>Simpson</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Durbin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Res</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="549" to="556" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">Datasets—worm: 66MÂ 100 bp Caenorhabditis elegans reads from SRR065390</title>
	</analytic>
	<monogr>
		<title level="m">1206MÂ 101 bp human reads for sample NA12878 (Depristo et al</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<monogr>
		<title level="m" type="main">average) human reads by Illumina&apos;s Moleculo sequencing</title>
		<author>
			<persName>
				<surname>Venterlevy</surname>
			</persName>
		</author>
		<editor>Sanger sequencing</editor>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="32" to="875" />
		</imprint>
	</monogr>
	<note>in</note>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">70 GHz; GPU: one Nvidia Tesla K40; RAM: 128 GB; Storage: Isilon IQ 72000x and X400 over network. CPU time, wall-clock time and peak memory are measured by GNU time. c Run with option &apos;-R-cpu-mem 4096-gpu-mem 4096</title>
	</analytic>
	<monogr>
		<title level="m">Hardware—CPU: 48 cores of Xeon E5-2697v2 at 2 NVBio uses more CPU and GPU RAM than the specified</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<monogr>
		<title level="m" type="main">d Results and temporary files created on in-RAM virtual disk &apos;/dev/shm</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<monogr>
		<title level="m" type="main">e Results and temporary files created on Isilon&apos;s network file system. f Run with option &apos;-R-cpu-mem 48000-gpu-mem 4096</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>