
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:39+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Enumeration and extension of non-equivalent deterministic update schedules in Boolean networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Eduardo</forename>
								<surname>Palma</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Departamento de Ingeniería Informá tica y Ciencias de la Computació n</orgName>
								<orgName type="institution">Universidad de Concepció n</orgName>
								<address>
									<addrLine>Piso 3, Concepció n</addrLine>
									<country key="CL">Chile</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Lilian</forename>
								<surname>Salinas</surname>
							</persName>
							<affiliation key="aff0">
								<orgName type="department">Departamento de Ingeniería Informá tica y Ciencias de la Computació n</orgName>
								<orgName type="institution">Universidad de Concepció n</orgName>
								<address>
									<addrLine>Piso 3, Concepció n</addrLine>
									<country key="CL">Chile</country>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Centro de Investigació n en Ingeniería Matemá tica</orgName>
								<address>
									<region>CI</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Julio</forename>
								<surname>Aracena</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">Departamento de Ingeniería Matemá tica</orgName>
								<orgName type="institution">Universidad de Concepció n</orgName>
								<address>
									<addrLine>Concepció n</addrLine>
									<postCode>160-C</postCode>
									<settlement>Casilla</settlement>
									<country key="CL">Chile</country>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Centro de Investigació n en Ingeniería Matemá tica</orgName>
								<address>
									<region>CI</region>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<address>
									<postCode>160-C</postCode>
									<settlement>Casilla, Concepción</settlement>
									<region>MA</region>
									<country key="CL">Chile</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Enumeration and extension of non-equivalent deterministic update schedules in Boolean networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btv628</idno>
					<note type="submission">Received on March 13, 2015; revised on October 13, 2015; accepted on October 25, 2015</note>
					<note>Systems biology *To whom correspondence should be addressed. Associate Editor: Igor Jurisica are available at: www.inf.udec. cl/ $lilian/UDE/ Contact: lilisalinas@udec.cl Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Boolean networks (BNs) are commonly used to model genetic regulatory networks (GRNs). Due to the sensibility of the dynamical behavior to changes in the updating scheme (order in which the nodes of a network update their state values), it is increasingly common to use different updating rules in the modeling of GRNs to better capture an observed biological phenomenon and thus to obtain more realistic models. In Aracena et al. equivalence classes of deterministic update schedules in BNs, that yield exactly the same dynamical behavior of the network, were defined according to a certain label function on the arcs of the interaction digraph defined for each scheme. Thus, the interaction digraph so labeled (update digraphs) encode the non-equivalent schemes. Results: We address the problem of enumerating all non-equivalent deterministic update schedules of a given BN. First, we show that it is an intractable problem in general. To solve it, we first construct an algorithm that determines the set of update digraphs of a BN. For that, we use divide and conquer methodology based on the structural characteristics of the interaction digraph. Next, for each update digraph we determine a scheme associated. This algorithm also works in the case where there is a partial knowledge about the relative order of the updating of the states of the nodes. We exhibit some examples of how the algorithm works on some GRNs published in the literature. Availability and implementation: An executable file of the UpdateLabel algorithm made in Java and the files with the outputs of the algorithms used with the GRNs</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Gene regulation networks (GRNs) consist of interacting genes and gene products, which give rise to complex cell behaviors. Due mainly to the lack of detailed kinetic information and quantitative data, qualitative logical models have been used for a better understanding and simulation of GRNs. Examples of these models are the Boolean networks (BNs), which despite their simplicity are able to capture key dynamical features and predict some activation patterns<ref type="bibr" target="#b0">Albert and Othmer, 2003;</ref><ref type="bibr" target="#b5">Davidich and Bornholdt, 2008</ref>). Boolean networks were introduced by Stuart Kauffman in<ref type="bibr" target="#b12">Kauffman (1969)</ref>to model GRNs. The gene expression level, in this case, is modeled by binary values, 1 or 0, indicating two transcriptional states, either active or inactive, respectively, and this level changes in time according to some local activation function which depends on the states of a set of nodes (genes or gene products). The interactions between the elements of a BN is represented by a directed graph (digraph), named interaction digraph, where there is an arc (i, j) in the interaction digraph if the state value of the node j depends on the state value of the node i. The dynamics of the network, is governed by an update schedule which determines when each node has to be updated. In the original model, the updating scheme was considered to be synchronous, that is at each time step, the state of all nodes is updated at the same time. Some examples of GRNs modeled by synchronous Boolean networks are exhibited in<ref type="bibr">Albert</ref>. However, due to the synchronous scheme is considered not being very realistic many GRN modelers have used other update schedules with different levels of asynchronism (<ref type="bibr" target="#b8">Fauré et al., 2006;</ref><ref type="bibr" target="#b16">Mendoza and Alvarez-Buylla, 1998;</ref><ref type="bibr" target="#b25">Thomas, 1973</ref>). The difficulty of determining time delays of updating in a GRN makes modelers often sample different update schedules to better capture an observed biological phenomenon. In this context, some used schemes are the deterministic update schedules, where the set of nodes of a network is partitioned into blocks, which are updated sequentially while within the blocks, the nodes are updated synchronously in every time step, (see for example<ref type="bibr" target="#b6">Demongeot et al., 2014;</ref><ref type="bibr" target="#b11">Goles et al., 2013;</ref><ref type="bibr" target="#b19">Ruz and Goles, 2013;</ref><ref type="bibr">Ruz et al., 2014a,b;</ref><ref type="bibr" target="#b17">Meng and Feng, 2014</ref>). This family of update schedules, introduced by F. Robert in<ref type="bibr" target="#b19">Robert (1986)</ref>, includes the sequential schedules (each group has size one), the parallel schedule (there is only one group) and the block-sequential schedules. In the past, a lot of analytical work has been done about the dynamical behavior of BNs with this kind of scheme (<ref type="bibr" target="#b3">Aracena et al., 2013a;</ref><ref type="bibr" target="#b9">Goles and Noual, 2012;</ref><ref type="bibr" target="#b7">Elena, 2009;</ref><ref type="bibr" target="#b10">Goles and Salinas, 2008;</ref><ref type="bibr" target="#b18">Mortveit and Reidys, 2001;</ref><ref type="bibr" target="#b19">Robert, 1986</ref>). In BNs with deterministic update schedules the relative order of updating of two nodes interacting can be represented by a label on the respective arc of the interaction digraph. More precisely, we put on the arc (i, j) the label È if the node i is updated after or at the same time than j, according to a given update schedule of the network, and the label I otherwise. The interaction digraph of a BN labeled in this way is called update digraph (<ref type="bibr" target="#b1">Aracena et al., 2009</ref>). In this paper we also deal with deterministic update schedules which are not fully defined, that is, the relative order of updating for some pairs of nodes is unknown. In such cases we put on the corresponding arcs the label L. In<ref type="bibr" target="#b1">Aracena et al. (2009)</ref>was proved that given a BN with two different deterministic update schedules, if the schemes have the same update digraph associated, then the dynamical behaviors of the networks under these schemes are equal. Hence, equivalence classes of deterministic update schedules in a given BN can be defined according to the update digraph associated, and such that two equivalent schemes yield exactly the same dynamical behavior of the network. Thus, in order to know the different dynamical behaviors of a BN (for example to study the robustness of the dynamics against to changes in the updating scheme), modelers of GNRs need to test only non-equivalent update schedules, being this set of schemes usually much smaller than the total set (see Supplementary information and<ref type="bibr" target="#b4">Aracena et al., 2013b</ref>). Similarly, if someone wants to determine the dynamics of a BN with updating schemes that are compatible with a set of constraints (on the relative order of updating of some pairs of nodes) then it is sufficient to test the non-equivalent extensions of this update schedule partially defined; this is useful, for example, when there are constraints that come from wanting to keep some dynamical property of a BN. In this way, two important problems to solve are determining all non-equivalent deterministic update schedules of a BN and the nonequivalent extensions of an updating scheme partially defined. In this paper, we address both problems and construct efficient algorithms to solve them. For that, we first build algorithms that determine the update digraphs associated to a given BN, which encoding the non-equivalent updates schedules. Next, we use the algorithm introduced in<ref type="bibr" target="#b2">Aracena et al. (2011)</ref>, and shown in Supplementary information, to determine in polynomial time a scheme associated to each found update digraph and hence to enumerate all nonequivalent update schedules of the network. The algorithms designed to calculate the update digraphs associated to a BN use two strategies. The first one is to avoid infeasible solutions using a polynomial algorithm. The second one is to make use of the structural characteristics of the digraph of interaction associated to a BN, as the presence of bridges, to divide the problem into subproblems, with smaller instances, which can be solved independently and whose solutions can be combined to determine the general solution. This procedure significantly reduces the total execution time of the main algorithm. As example of application of the constructed algorithms we determined in few seconds the whole set of non-equivalent deterministic schemes of four Boolean models of GRNs published in the literature: Arabidopsis Thaliana regulatory network (<ref type="bibr">Sá nchezCorrales et al., 2010</ref>), Yeast transcriptional network (<ref type="bibr" target="#b13">Kauffman et al., 2003</ref>), the network for Body segmentation in Drosophila Melanogaster (<ref type="bibr" target="#b0">Albert and Othmer, 2003</ref>) and Mammalian Cell Cycle network (<ref type="bibr" target="#b8">Fauré et al., 2006</ref>). Besides, for this latter network we determine the non-equivalent extensions of an update schedule partially defined, whose restrictions are necessary in order to keep the unique limit cycle of the network synchronously updated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Definitions and notation</head><p>A Boolean network N ¼ ðF; sÞ is defined by a finite set V of n elements; n state variables x v 2 f0; 1g; v 2 V; a function F ¼ ðf v Þ v2V : f0; 1g n ! f0; 1g n called global activation function, where its component functions f v : f0; 1g n ! f0; 1g are called local activation functions, and an update schedule defined by a function s : V ! f1;. .. ; ng, where s(v) ¼ k means that in each unit of time the state of node v is updated in the kth place (see an example in Supplementary information). An update schedule s is also denoted by s ¼ fv : sðvÞ ¼ 1gfv : sðvÞ ¼ 2g Á Á Á fv : sðvÞ ¼ ng. The state values in a Boolean network with update function s are given by x kþ1 v ¼ f v ðx lu u : u 2 VÞ, where l u ¼ k if sðvÞ sðuÞ and l u ¼ k þ 1 if sðvÞ &gt; sðuÞ. Given a digraph G we will denote its set of vertices as V G and its set of arcs as A G. The digraph associated to a function F ¼ ðf v Þ v2V , called interaction digraph, is the directed graph G F , where V G F ¼ V and ðu; vÞ 2 A G F if and only if f v depends on x u , i.e. if there exists x 2 f0; 1g n such that f v ðxÞ 6 ¼ f v ðx u Þ, with x u different of x only in position u (see an example of an interaction digraph in<ref type="figure" target="#fig_6">Fig. 1</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Non-equivalent update schedules in Boolean networks</head><p>Given a digraph G a label function is any function lab : A G ! fÈ; É; Lg. We call labeled digraph to ðG; labÞ. We denote A È ðG;labÞ ¼ fðu; vÞ 2 A G jlabðu; vÞ ¼ Èg. Analogously we define A É ðG;labÞ and A L ðG;labÞ. Given a label function lab, we call support of lab to the set SupðlabÞ ¼ A È ðG;labÞ [ A É ðG;labÞ. The arcs in the support are also called labeled arcs; remaining arcs of G will be called unlabeled arcs. We say that ðG; labÞ is fully labeled if SupðlabÞ ¼ A G. Otherwise, we say that it is partially labeled (see Example 1 in Supplementary information). The label function f lab : A G ! fÈ; É ; Lg is an extension of lab : A G ! fÈ; É ; Lg if 8a 2 SupðlabÞ; f labðaÞ ¼ labðaÞ. If Supð f labÞ ¼ A G , we call f lab a full extension. Given a digraph G and a partial label function lab. If labðaÞ ¼ L, we define the simple extension lab a¼È , as the function where: 8e 2 A G n fag; lab a¼È ðeÞ ¼ labðeÞ and lab a¼È ðaÞ ¼ È. Analogously, we define the simple extension lab a¼ É. In<ref type="bibr" target="#b1">Aracena et al. (2009)</ref>was defined the update digraph associated to a BN N ¼ ðF; sÞ as ðG F ; lab s Þ; where lab s is the label function related to the scheme s, that is given by lab s ði; jÞ ¼ È if sðiÞ ! sðjÞ and lab s ði; jÞ ¼ É if sðiÞ &lt; sðjÞ. In this way, given any label function lab : A G ! f É ; Èg, we say that the digraph ðG; labÞ is update if there exists s such that ðG; labÞ ¼ ðG; lab s Þ, which can be found in polynomial time using for example the algorithm exhibited in<ref type="bibr">Aracena</ref>In<ref type="figure">Figure 2</ref>we show two labeled digraphs. In (a) it is shown an update digraph. Indeed, for the update schedule s ¼ f3; 4g f5gf1; 2g we have that lab 1 ¼ lab s. In (b), the labeled digraph ðG; lab 2 Þ is not an update digraph. Since otherwise, for any given update schedule s, sð3Þ &lt; sð5Þ &lt; sð4Þ sð3Þ, which is a contradiction.</p><p>In this work we extend the concept of update digraph to partially labeled digraphs. We say that ðG; labÞ is an update digraph, if there exists a full extension lab 0 such that ðG; lab 0 Þ is update (see Example 2 in Supplementary information). We denote by SðG; labÞ the set of full extensions of lab 0 that make ðG; lab 0 Þ an update digraph. The condition required for a labeled digraph to be an update digraph it is related to the notion of reverse graph defined as follows: Given a labeled digraph ðG; labÞ, we define the reverse digraph</p><formula>ðG R ; lab R Þ, where V GR ¼ V G ,</formula><p>A GR ¼ fðu; vÞjðu; vÞ 2 A È ðG;labÞ _ ðv; uÞ 2 A É ðG;labÞ g and lab R ðu; vÞ ¼ É if ðv; uÞ 2 A É ðG;labÞ and lab R ðu; vÞ ¼ È otherwise. In<ref type="figure" target="#fig_5">Figure 3</ref>In other words, if there exists a path from v 1 to v n in the reverse digraph.</p><p>There is a negative reverse path from v 1 to v n , if there exists a path in the reverse digraph that contains a negative arc. In<ref type="figure" target="#fig_5">Figure 3c</ref>the path marked by the gray arrows is a reverse path from 6 to 5. This is also a negative reverse path, because the arc (3, 2) is on the sequence. A forbidden cycle is a negative reverse path ðv 1 ; v 2 ;. .. ; v n Þ where v 1 ¼ v n (see an example in<ref type="figure">Fig. 2b</ref>, where the forbidden cycle is defined by the gray arrows). It was proved in Aracena et al.</p><p>(2011) that a labeled digraph is an update digraph if and only if there does not exist any forbidden cycle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Complexity of update digraph extension problem</head><p>In this article we are interested in finding a set of non-equivalent deterministic update schedules satisfying some constraints (if any) about the relative order of updating of some nodes of a BN or equivalently the extensions of a partially labeled digraph (eventually with empty support) that are update digraphs. More precisely, we address the following problem:</p><p>Update digraph extension (UDE):</p><p>Given a labeled digraph ðG; labÞ, find the set SðG; labÞ of all full extensions lab 0 of lab such that ðG; lab 0 Þ is an update digraph. To know the computational complexity of the UDE problem, we study the following counting problem associated to UDE: Counting update digraph extensions (CUDE):</p><p>Given ðG; labÞ a labeled digraph, determine the number of all full extensions lab 0 of lab such that ðG; lab 0 Þ is an update digraph. We will prove that CUDE is a difficult problem, thereby we can conclude the complexity of the UDE problem.The proof (see Supplementary information) is based on the idea that an acyclic labeled digraph is an update digraph if and only if its reverse digraph is acyclic. This is because in the reverse digraph of an update digraph the only allowed cycles have every arc labeled as positive. In this way, it is easy to define a bijection between an update digraph and the acyclic orientation of its underlaying graph. Note that previous result tell us that the enumeration of all extensions from a partially labeled digraph is a hard problem, whilewhere the gray arrows form a forbidden cycle the related existence problem is known to be polynomial (<ref type="bibr" target="#b2">Aracena et al., 2011</ref>).</p><formula>(a) ( b) ( c)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Algorithms</head><p>In this section we present the theoretical results that lead to design an algorithm that solves the UDE problem. In first place, we focus on verify the existence of one solution, then we reduce our problem contracting each positive strongly connected component (i.e. strongly connected component in the digraph induced by the positive arcs of the labeled digraph) in one vertex. In second place, we present the two main results of this article: they are the effect of forcing arcs, that allows to eliminate infeasible solutions in polynomial time, and the division of our problem into smaller pieces using algorithms to find bridges and strongly connected components.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Verify</head><p>First, we verify whether the labeled digraph is an update digraph. To check this, we use the ReversePaths algorithm to search any forbidden cycle. ReversePaths algorithm is an adaptation of Floyd– Warshall algorithm, where instead of finding minimum weight paths, we determine the existence of reverse paths and negative reverse paths between each pair of vertices. The algorithm returns the matrix M where: Mðu; vÞ ¼ À1 if there exists a negative reverse path from u to v; Mðu; vÞ ¼ 1 if there is a reverse path from u to v, but not a negative one and Mðu; vÞ ¼ 1 otherwise. See details of ReversePaths and Verify algorithms in Supplementary information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Reducing the size of the instances of UDE problem</head><p>As we mentioned above, the UDE problem belongs to a class of problems for which there are not known polynomial algorithms that solve them. Hence, the decrease in size of an instance of UDE problem is very important. In this way, we define the reduced digraph of an update digraph which involves replacing each positive strongly connected by a single vertex. The following lemma is a property of the update digraphs which allows to define correctly the reduced digraph of an update digraph.</p><formula>Lemma 2:</formula><p>Let ðG; labÞ be an update digraph, G 1 and G 2 two positive strongly connected components of G, and f lab a full extension such that ðG; f labÞ is a fully labeled update digraph. Then</p><formula>8a; a 0 2 A G \ ðV G1 Â V G2 Þ: f labðaÞ ¼ f labða 0 Þ.</formula><p>The proof of this lemma (detailed in Supplementary information) uses the fact that if f labðaÞ 6 ¼ f labða 0 Þ then there exists a forbidden cycle in the labeled digraph. From the previous lemma we know that we can preliminarily label some arcs. This help us to avoid a multidigraph when we obtain the reduced digraph or problems in its label function.Furthermore, lab rd ðv i ; v j Þ ¼ labðu; vÞ, if 9ðu; vÞ 2 ðV Gi Â V Gj Þ \SupðlabÞ and lab rd ðv i ; v j Þ ¼ L otherwise. We say that a labeled digraph ðG; labÞ is reduced if ðG; labÞ ¼ RðG; labÞ. Note that if ðG; labÞ is connected, then obviously RðG; labÞ is also connected. Furthermore, as ðG; labÞ is an update digraph, then RðG; labÞ is an update digraph, since otherwise there would be a forbidden cycle.</p><p>Example 2: In<ref type="figure" target="#fig_11">Figure 4</ref>an example of a reduced digraph is shown. The nodes 4, 5 and 6 are in a positive strongly connected component, so in the reduced digraph they are all represented by node v 4 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 3:</head><p>The elements of the solution set of the UDE problem for ðG; labÞ are in bijection with those of the UDE problem for RðG; labÞ.</p><p>The proof of this theorem uses the previous lemma (details in Supplementary information). In fact, if we have an unlabeled arc between nodes in the same positive strongly connected component, this must be labeled positive to avoid a forbidden cycle. In terms of update schedule, that means that every node in the positive strongly connected component is updated at the same time, so we can represent all these nodes in one. Also, the arcs between different positive strongly connected components must have the same direction in the reverse digraph to avoid forbidden cycles, hence we can represent all of them by just one that has the right direction in the reverse digraph. The application of this results leads to Algorithm 1. In this algorithm we use SCC þ , i.e. the algorithm that returns the positive strongly connected components of a digraph. This is very easy to construct using, for example, Tarjan algorithm (<ref type="bibr" target="#b24">Tarjan, 1972</ref>).3: A G rd ; 4: for i ¼ 1 to k do 5: for j ¼ 1 to k do 6: if 9ðu; vÞ 2 A G with u 2 V Gi and v 2 V Gj then 7:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Force</head><p>Given an update digraph ðG; labÞ with SupðlabÞ 6 ¼ A G , there are situations in which an unlabeled arc ði; jÞ 2 A G may be labeled just in one way to keep the update digraph property. In fact, if every unlabeled arc is forced to have a unique label the solutions of the UDE problem is unique.In Figure 5a we see that there exist negative reverse paths (marked for gray arrows) from 3 to 2 (3,1,2) and from 2 to 4 (2,4), then the unlabeled arcs (2,3) and (2,4) must be labeled negative and positive respectively, as shown in b.The fact that there exists an unlabeled arc forced to have an unique label, called simply forced arc, depends only on the existence of reverse and negative reverse paths in the interaction digraph as shown in the following proposition.1. For all ði; jÞ 2 A G there exists a negative reverse path from j to i if and only if ðG; lab ði;jÞ¼È Þ is a nonupdate digraph; then we say that the arc (i, j) is forced to be negative. 2. For all ði; jÞ 2 A G there exists a reverse path from i to j if and only if ðG; lab ði;jÞ¼ É Þ is a nonupdate digraph; then we say that the arc (i, j) is forced to be positive. Proof: We will prove the first case, the second one is analogous.</p><p>()) If we consider that there exists a negative reverse path from j to i, then if we label (i, j) positive, there will be a negative reverse path (forbidden cycle) from j to j. Hence, G; lab ði;jÞ¼È is a nonupdate digraph. (() If G; lab ði;jÞ¼È is a nonupdate digraph and ðG; labÞ is, then a forbidden cycle is produced by labeling positive the arc (i, j). Hence there exists a negative reverse path from j to i in ðG; labÞ. n It is important to observe that the order in which the forced arcs are chosen to be labeled is irrelevant in the label obtained. Because, the labeling of forced arcs does not give us additional information in terms of reverse and negative reverse paths in the interaction digraph. Indeed, if there exists a negative reverse path from j to i we label negative the forced arc (i, j), i.e. we add a new negative reverse path from j to i. Analogously, if there is a reverse path from i to j in the interaction digraph, we label (i, j) positive, i.e. we add a new reverse path from i to j. To check the existence of forced arcs allows to avoid extensions that are not update schedules. Hence, we build Algorithm 2 that labels all the forced arcs. Applying this algorithm to an update digraph we obtain the maximal extension, which is the extension of G such that every forced arc is labeled.Next, we introduce a simple algorithm that name SimpleLabel, to find all the extensions of a given partially labeled update digraph and which uses Force algorithm. Firstly, this algorithm finds the maximal extension of the given label function. Thereafter, the algorithm labels an unlabeled arc positive and recursively calls itself. In this way, it finds all the solutions with this arc labeled positive, then it repeats the procedure labeling the arc negative. Finally the total solution is the union of both solution sets (see Algorithm 3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 3 SimpleLabel</head><p>Require: An update digraph ðG; labÞ Ensure: The set SðG; labÞ denoted by S and its cardinal r :¼ jSj 1: ðS; rÞ ð;; 0Þ 2: lab ForceðG; labÞ 3: if SupðlabÞ ¼ AðGÞ then 4: return ðlab; 1Þ 5: else 6: Let be a 2 AðGÞ n SupðlabÞ 7:</p><formula>ðS 1 ; r 1 Þ SimpleLabelðG; lab a¼È Þ 8: ðS 2 ; r 2 Þ SimpleLabelðG; lab a¼ É Þ 9: ðS; rÞ ðS 1 [ S 2 ; r 1 þ r 2 Þ 10: return (S, r)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Divide and conquer</head><p>In order to improve the efficiency of the SimpleLabel algorithm, we use structural properties of the digraph to divide the problem into subproblems, by partitioning the arc set, such that their combined solutions give us the solution of the original problem. To formalize this combination of solutions we define the operator .</p><formula>Definition 2:</formula><p>Given a digraph G; fA i g k i¼1 a partition of A G and fL i g k i¼1 a family of label functions such that for every i 2 f1;. .. ; kg; L i flabjlab : A i ! fÈ; É ; LgisalabelfunctionofGg, we define:</p><formula>L 1. .. L k ¼ flab : A G ! fÈ; É ; Lgj 8i ¼ 1; ... ; k; labj Ai 2 L i g:</formula><p>The following result is directly obtained from the previous definition.</p><formula>1 ;. .. ; G k , then SðG; labÞ ¼ SðG 1 ; labj AG 1 Þ. .. SðG k ; labj AG k Þ:</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.1">Division by bridges</head><p>The first division is to separate nodes joined by a bridge in the underlying graph (i.e. the graph obtained by replacing all directed edges of G with undirected edges). This idea comes from the fact that any forbidden cycle cannot contain any bridge.The proof of this proposition is detailed in Supplementary information. In<ref type="figure" target="#fig_18">Figure 6</ref>we can see an example of division by bridges of a labeled digraph with the associated partition of the arc set.and (2, 4) are forced to be negative and positive, respectively. The gray arrows define reverse paths. (b) ðG; f lab Þ is the maximal extension of ðG; labÞ</p><formula>(a) ( b)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.2">Division by strongly connected components</head><p>Another way to simplify the digraph consists in divide it by its strongly connected components in the extended reverse digraph, i.e. the reverse digraph where unlabeled arcs are replaced by unlabeled arcs in both directions. As in the case of bridges, forbidden cycles cannot use arcs connecting different strongly connected components.Let ðG; labÞ be an update digraph with G 1 ;. .. ; G k its strongly connected components of the extended reverse digraph, we define the set of arcs:</p><formula>A T ¼ [ i;j A G \ ðV Gi Â V Gj Þ;</formula><p>which it is composed by the arcs between strongly connected components of the extended reverse digraph of ðG; labÞ. Then,</p><formula>SðG; labÞ ¼ Sð e G 1 ; labj A e G 1 Þ. .. Sð e G k ; labj A e G k Þ flabj AT g</formula><p>where 8i 2 f1;. .. ; kg; e G i ¼ G½V Gi . In<ref type="figure" target="#fig_21">Figure 7</ref>we can see an example of division by strongly connected components of an update digraph with the associated partition of the arc set. The proof of this last proposition is similar to that of the Proposition 6 shown in Supplementary information, and is based on the fact that (G, lab) is an update digraph if and only if every labeled</p><formula>digraph ð e G i ; labj A G $ i Þ is update digraph.</formula><p>Next we define the Algorithm 4, called Label, that requires as input an update digraph with a label function without forced arcs, and which uses the divisions defined above to partition our problem. It applies the same ideas of SimpleLabel, i.e. to force arcs, label one and apply recursively the same algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 4 Label</head><p>Require: ðG; labÞ, a maximal extension of an update digraph. Ensure: The set SðG; labÞ denote by S and its cardinal number r :¼ jSj 1: ðS; rÞ ð;; 1Þ 2:Finally, we present the main algorithm, to solve the UDE problem, named UpdateLabel, which first checks if the labeled digraph (G, lab) received as input is an update digraph, i.e. if SðG; labÞ 6 ¼ ; (see Algorithm 5).</p><formula>fðG 1 ; lab G1 Þ;. .. ; ðG k ; lab G k Þg BridgesðG U Þ 3: for i ¼ 1 to k do 4: if Supðlab Gi Þ ¼ A Gi then 5: S</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Comparison of algorithms with and without divisions</head><p>To illustrate the efficiency of doing divisions in the main algorithm we compare the performance of our algorithm Label against SimpleLabel algorithm that only uses the idea of forced arcs. As the algorithms require an update digraph as input, we use UpdateLabel algorithm to call both. The tests were run in complete digraphs and chains (see<ref type="figure" target="#fig_20">Fig. 8</ref>) of different sizes and with empty supports in a laptop with Processor: 2.4 GHz Intel Core i5, RAM memory: 8 GB 1600 MHz DDR3, operating system: OS X 10.9.5. In<ref type="figure" target="#tab_1">Table 1</ref>we can see as the main algorithm with Label runs (column Label) faster than with SimpleLabel (column SimpleL), even in the case of complete digraphs where there is a small number of divisions. However, when the number of solutions (i.e. jSðG; labÞj) is big it is convenient to use SimpleLabel instead of Label, because the latter uses a lot of RAM memory (see for example the case of K 9 ). It is important to mention that the times listed in columns SimpleL and Label of<ref type="figure" target="#tab_1">Table 1</ref>correspond to the runtimes of the implementation of UpdateLabel algorithm available at www.inf.udec.cl/$lilian/UDE/ with output the list of non-equivalent schemes associated to the update digraphs of S(G, lab). In the cases of columns Coded and Count, they correspond to the implementation with output S(G, lab) and jSðG; labÞj respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 5 UpdateLabel</head><p>Require: A labeled digraph ðG; labÞ Ensure: The set SðG; labÞ denote by S and its cardinal number r :¼ jSðG; labÞj. 1: if VerifyðG; labÞ ¼ false then 2: return ð;; 0Þ 3: else 4: ðG rd ; lab rd Þ ReduceðG; labÞ 5: f labNon-equivalent update schedules in Boolean networks</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Application to genetic regulatory networks</head><p>We apply our algorithm UpdateLabel to enumerate the non-equivalent deterministic update schedules of four Boolean models of GRNs published in the literature: Mammalian Cell Cycle network (<ref type="bibr" target="#b8">Fauré et al., 2006</ref>), Arabidopsis Thaliana regulatory network (Sá nchez<ref type="bibr" target="#b22">Corrales et al., 2010</ref>), Yeast transcriptional network (<ref type="bibr" target="#b13">Kauffman et al., 2003</ref>) and the network for body segmentation in Drosophila Melanogaster (<ref type="bibr" target="#b0">Albert and Othmer, 2003</ref>), also studied in (Marques<ref type="bibr" target="#b15">Pita and Rocha, 2013</ref>). The mammalian cell cycle network has 10 nodes and 31 arcs. A detailed description of the network can be found in Supplementary information. For this network we used the implementation of UpdateLabel algorithm available at www.inf.udec.cl/$lilian/UDE/ without divisions and with divisions to enumerate all non-equivalent deterministic update schedules of the network (row Mammalian1 of<ref type="figure" target="#tab_2">Table 2</ref>) and those that are extensions of the partially labeled interaction digraph shown in Supplementary information, and corresponding to label eight arcs of the network as positive, in order to preserve the limit cycle C of the synchronous dynamical behavior also specified in Supplementary information (row Mammalian2 of<ref type="figure" target="#tab_2">Table 2</ref>). The times listed in<ref type="figure" target="#tab_2">Table 2</ref>correspond to the same of those specified in<ref type="figure" target="#tab_1">Table 1</ref>. It is important to observe that the quantities 466712 and 1440 represent an upper bound for the total number of different dynamics and for the number of possible dynamics exhibiting the limit cycle C, of the mammalian cell cycle network with deterministic update schedules, respectively. Besides, these number are much less than the total number of deterministic update schedules for the network, which it is approximately 1 Â 10 8 (see Supplementary information). We also applied the implementation of the algorithms to the other mentioned networks labeling some arcs as negative when the 'head' vertex of the arc has associated a constant function as local activation function. The corresponding partially labeled interaction digraphs are shown in Supplementary information. In the case of Arabidopsis Thaliana we only use SimpleLabel algorithm because the size is too big to process in RAM Memory. The results obtained are shown in<ref type="figure" target="#tab_2">Table 2</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Discussion</head><p>The problem of testing different deterministic update schedules of a BN modeling a GRN, for example to better capture an observed biological phenomenon or to study the robustness of the dynamics against to changes in the updating scheme, is reduced to use only nonequivalent schemes. This set, defined according to the update digraphs associated to a network, can be much smaller than the total set of schemes (Supplementary information and<ref type="bibr" target="#b4">Aracena et al. 2013b</ref>). In this article we addressed the problems of determining all non-equivalent deterministic update schedules of a BN and the non-equivalent extensions of an updating scheme partially defined. To solve them, we first construct an algorithm, named UpdateLabel, determining the label functions on the arcs of the interaction digraph of a BN that have an update schedule associated (i.e. the set of update digraphs of a BN). The UpdateLabel algorithm uses two major ideas in its design. The first one is the base of the Force algorithm, which in polynomial time checks whether the given labels on some arcs uniquely determine the label in others (only possible extension), allowing to eliminate infeasible solutions in polynomial time. The second one is to make use of the structural characteristics of the interaction digraph associated to a BN, as the presence of bridges, to divide the problem into subproblems, with smaller instances, which can be solved independently and whose solutions can be combined to determine the general solution. This procedure significantly reduces the total execution time of the main algorithm as observed in<ref type="figure" target="#tab_1">Table 1</ref>. Next, for each update digraph found with UpdateLabel algorithm we determine an update schedule scheme belonging to the class, by using a polynomial algorithm<ref type="figure" target="#tab_1">Table 1</ref>. Results obtained when the main algorithm is used with and without divisions on some digraphs K n and P n. Here, jV j and j Aj denote the number of nodes and arcs of each digraph, respectively<ref type="figure" target="#tab_2">Table 2</ref>show that in few seconds we can obtain the whole set of non-equivalent update schedules of each studied network, whose cardinals correspond to the maximum number of possible dynamical behaviors of the studied networks when they are modeled by BNs with deterministic update schedules. It is important to note that despite the UpdateLabel algorithm with divisions on the interaction digraph is faster, it is limited by the RAM memory of the computer. So for large networks is advisable to use simply the UpdateLabel algorithm without division, when the number of non-equivalent schemes so allows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Funding</head><p>This work was partially supported by project Fondecyt 1131013 (J.A. and L.S.) and Master's scholarship CONICYT (E.P.). Conflict of Interest: none declared.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>and Othmer (2003), Kauffman et al. (2003), Li et al. (2004), Davidich and Bornholdt (2008) and Singh et al. (2012)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><figDesc>et al. (2011) (see Supplementary information).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><figDesc>we show an example of a labeled digraph and its associated reverse digraph. Given a labeled digraph ðG; labÞ, there is a reverse path, from node v 1 to v n in G, if there exists a sequence of nodes ðv 1 ; v 2 ;. .. ; v n Þ which verifies: 8i 2 f1;. .. ; n À 1g; ðv i ; v iþ1 Þ 2 A È ðG;labÞ _ ðv iþ1 ; v i Þ 2 A É ðG;labÞ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig.3.</head><figDesc>Fig. 3. (a) A labeled digraph ðG; labÞ. (b) The associated reverse digraph ðG R ; lab R Þ. (c) A negative reverse path (marked by gray arrows): ð6; 4; 2; 3; 5Þ in ðG; labÞ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig.1.</head><figDesc>Fig. 1. Interaction digraph associated to a Boolean network. Notice that f 4 does not depend on x 3</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Let</head><figDesc>ðG; labÞ be an update digraph and fG 1 ;. .. ; G k g its positive strongly connected components. We define its reduced labeled digraph RðG; labÞ by RðG; labÞ ¼ ðG rd ; lab rd Þ, where G rd ¼ ðV rd ; A rd Þ; V rd ¼ fv 1 ;. .. ; v k g and A rd ¼ fðv i ; v j Þj9ðu; vÞ 2 A G \ ðV Gi Â V Gj Þg</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig.4.</head><figDesc>Fig. 4. (a) An update digraph. (b) The reduced digraph</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>(</head><figDesc>Forced arc) Let ðG; labÞ be an update digraph, ði; jÞ 2 A G and labði; jÞ ¼ L. Then:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><figDesc>Proposition 5: Let ðG; labÞ be a digraph such that its connected components are G</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Fig.5.</head><figDesc>Fig. 5. (a) Example of update digraph where the arcs (2, 3) and (2, 4) are forced to be negative and positive, respectively. The gray arrows define reverse paths. (b) ðG; f lab Þ is the maximal extension of ðG; labÞ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Fig.6.</head><figDesc>Fig. 6. (a) Labeled digraph. (b) Underlying graph. (c) Partition of the arc set produced by the division by bridges</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head></head><figDesc>, where jSðG; labÞj is an upper bound of the number of possible dynamics of each network when are modeled by BNs with deterministic update schedules. The files with the outputs of the algorithms for each network can be found at: www. inf.udec.cl/$lilian/UDE/Files/.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Fig.8.</head><figDesc>Fig. 8. Example of a chain P n where n ¼ 5</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Fig.7.</head><figDesc>Fig. 7. (a) Update digraph ðG; labÞ. (b) Extended reverse digraph ðG 0 ; lab 0 Þ. (c) Strongly connected components of ðG 0 ; lab 0 Þ. (d) Partition of the arc set of G produced by the division by strongly connected components</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><figDesc>V C The Author 2015. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com 722 Bioinformatics, 32(5), 2016, 722–729 doi: 10.1093/bioinformatics/btv628 Advance Access Publication Date: 31 October 2015 Original Paper of GRNs (</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><figDesc>Table 2.</figDesc><table>Results obtained when the main algorithm is used with 
and without divisions on some networks. Here, jV j and jAj denote 
the number of nodes and arcs of the interaction digraph of each 
network, respectively 

Graph 
jVj jAj jSðG; labÞj Count SimpleL Label Coded 
(s) 
(s) 
(s) 
(s) 

Mammalian1 10 31 
466 712 
0.755 
5.230 2.966 1.327 
Mammalian2 10 23 
1 440 
0.005 
0.016 0.033 0.009 
Arabidopsis 
13 39 7 062 567 11.349 113.851 – 
19.237 
Yeast 
30 22 
206 427 
0.222 30.768 3.595 0.322 
Drosophila 
18 12 
2 368 
0.001 
0.093 0.023 0.001 

</table></figure>

			<note place="foot">at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">E.Palma et al. at University of California, Los Angeles on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<analytic>
		<title level="a" type="main">The topology of the regulatory interactions predicts the expression pattern of the drosophila segment polarity genes</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Albert</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">H</forename>
				<forename type="middle">G</forename>
				<surname>Othmer</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">223</biblScope>
			<biblScope unit="page" from="1" to="18" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<analytic>
		<title level="a" type="main">On the robustness of update schedules in Boolean networks</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Aracena</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biosystems</title>
		<imprint>
			<biblScope unit="volume">97</biblScope>
			<biblScope unit="page" from="1" to="8" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b2">
	<analytic>
		<title level="a" type="main">Combinatorics on update digraphs in Boolean networks</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Aracena</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete Appl. Math</title>
		<imprint>
			<biblScope unit="volume">159</biblScope>
			<biblScope unit="page" from="401" to="409" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title level="a" type="main">Limit cycles and update digraphs in Boolean networks</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Aracena</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete Appl. Math</title>
		<imprint>
			<biblScope unit="volume">161</biblScope>
			<biblScope unit="page" from="1" to="2" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">On the number of different dynamics in boolean networks with deterministic update schedules</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Aracena</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math. Biosci</title>
		<imprint>
			<biblScope unit="volume">242</biblScope>
			<biblScope unit="page" from="188" to="194" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">Boolean network model predicts cell cycle sequence of fission yeast</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">I</forename>
				<surname>Davidich</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Bornholdt</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PloS One</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page">1672</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">Stability, complexity and robustness in population dynamics</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Demongeot</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Biotheoretica</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="243" to="284" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<monogr>
		<title level="m" type="main">Robustesse des réseaux d&apos;automates booleéns a seuil aux modes d&apos;itération. Application a la modélisation des réseaux de régulation génétique</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Elena</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<pubPlace>Grenoble I) ; Grenoble, France</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">Dynamical analysis of a generic Boolean model for the control of the mammalian cell cycle</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Fauré</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="124" to="131" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">Disjunctive networks and update schedules</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Goles</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Noual</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Appl. Math</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="646" to="662" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">Comparison between parallel and serial dynamics of Boolean networks</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Goles</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">L</forename>
				<surname>Salinas</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">396</biblScope>
			<biblScope unit="page" from="247" to="253" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">Deconstruction and dynamical robustness of regulatory networks: application to the yeast cell cycle networks</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Goles</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bull. Math. Biol</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="page" from="939" to="966" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">Metabolic stability and epigenesis in randomly connected nets</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Kauffman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="437" to="67" />
			<date type="published" when="1969" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<analytic>
		<title level="a" type="main">Random Boolean network models and the yeast transcriptional network</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Kauffman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Natl Acad. Sci</title>
		<meeting>. Natl Acad. Sci</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="14796" to="14799" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<analytic>
		<title level="a" type="main">The yeast cell-cycle network is robustly designed</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Li</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Natl Acad. Sci. USA</title>
		<meeting>. Natl Acad. Sci. USA</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="4781" to="4786" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">Canalization and control in automata networks: Body segmentation in drosophila melanogaster</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Marques-Pita</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">L</forename>
				<forename type="middle">M</forename>
				<surname>Rocha</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS ONE</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">55946</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">Dynamics of the genetic regulatory network for arabidopsis thaliana flower morphogenesis</title>
		<author>
			<persName>
				<forename type="first">L</forename>
				<surname>Mendoza</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Alvarez-Buylla</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">193</biblScope>
			<biblScope unit="page" from="307" to="319" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<analytic>
		<title level="a" type="main">Function perturbations in Boolean networks with its application in a d. melanogaster gene network</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Meng</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Feng</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Control</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="87" to="94" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b18">
	<analytic>
		<title level="a" type="main">Discrete, sequential dynamical systems</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Mortveit</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Reidys</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete Math</title>
		<imprint>
			<biblScope unit="volume">226</biblScope>
			<biblScope unit="page" from="281" to="295" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<analytic>
		<title level="a" type="main">Discrete Iterations: A Metric Study Learning gene regulatory networks using the bees algorithm</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Robert</surname>
			</persName>
		</author>
		<author>
			<persName>
				<surname>Berlin</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<forename type="middle">A</forename>
				<surname>Ruz</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Goles</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Comput. Appl</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="63" to="70" />
			<date type="published" when="1986" />
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b20">
	<analytic>
		<title level="a" type="main">Dynamical and topological robustness of the mammalian cell cycle network: A reverse engineering approach</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<forename type="middle">A</forename>
				<surname>Ruz</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biosystems</title>
		<imprint>
			<biblScope unit="volume">115</biblScope>
			<biblScope unit="page" from="23" to="32" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b21">
	<analytic>
		<title level="a" type="main">Neutral space analysis for a boolean network model of the fission yeast cell cycle network</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<forename type="middle">A</forename>
				<surname>Ruz</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biol. Res</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="page">64</biblScope>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b22">
	<analytic>
		<title level="a" type="main">The arabidopsis thaliana flower organ specification gene regulatory network determines a robust differentiation process</title>
		<author>
			<persName>
				<forename type="first">Y.-E</forename>
				<surname>Sánchez-Corrales</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">264</biblScope>
			<biblScope unit="page" from="971" to="983" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b23">
	<analytic>
		<title level="a" type="main">Boolean approach to signalling pathway modelling in hgf-induced keratinocyte migration</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Singh</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="495" to="501" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b24">
	<analytic>
		<title level="a" type="main">Depth-first search and linear graph algorithms</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Tarjan</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Comput</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="146" to="160" />
			<date type="published" when="1972" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b25">
	<analytic>
		<title level="a" type="main">Boolean formalization of genetic control circuits</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Thomas</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="563" to="585" />
			<date type="published" when="1973" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b26">
	<monogr>
		<title level="m" type="main">Non-equivalent update schedules in Boolean networks</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>