
<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/joey/Project/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.2-SNAPSHOT" ident="GROBID" when="2017-08-10T23:30+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">An efficient algorithm for the blocked pattern matching problem</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2015">2015</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Fei</forename>
								<surname>Deng</surname>
							</persName>
						</author>
						<author>
							<persName>
								<forename type="first">Lusheng</forename>
								<surname>Wang</surname>
							</persName>
						</author>
						<author>
							<persName>
								<forename type="first">Xiaowen</forename>
								<surname>Liu</surname>
							</persName>
							<affiliation key="aff1">
								<orgName type="department">Department of BioHealth Informatics</orgName>
								<orgName type="institution">University—Purdue University Indianapolis</orgName>
								<address>
									<region>Indiana</region>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Center for Computational Biology and Bioinformatics</orgName>
								<orgName type="institution">Indiana University School of Medicine</orgName>
								<address>
									<postCode>46202</postCode>
									<settlement>Indianapolis</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">John</forename>
								<surname>Hancock</surname>
							</persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">City University of Hong Kong</orgName>
								<address>
									<settlement>Kowloon, Hong Kong</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">An efficient algorithm for the blocked pattern matching problem</title>
					</analytic>
					<monogr>
						<imprint>
							<biblScope unit="volume">31</biblScope>
							<biblScope unit="issue">4</biblScope>
							<biblScope unit="page" from="532" to="538"/>
							<date type="published" when="2015">2015</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1093/bioinformatics/btu678</idno>
					<note type="submission">Sequence analysis Advance Access publication October 15, 2014 Received on June 25, 2014; revised on October 1, 2014; accepted on October 13, 2014</note>
					<note>BIOINFORMATICS ORIGINAL PAPER Associate Editor: Supplementary information: Supplementary data are available at Bioinformatics online.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Motivation: Tandem mass spectrometry (MS) has become the method of choice for protein identification and quantification. In the era of big data biology, tandem mass spectra are often searched against huge protein databases generated from genomes or RNA-Seq data for peptide identification. However, most existing tools for MS-based peptide identification compare a tandem mass spectrum against all peptides in a database whose molecular masses are similar to the precursor mass of the spectrum, making mass spectral data analysis slow for huge databases. Tag-based methods extract peptide sequence tags from a tandem mass spectrum and use them as a filter to reduce the number of candidate peptides, thus speeding up the database search. Recently, gapped tags have been introduced into mass spectral data analysis because they improve the sensitivity of peptide identification compared with sequence tags. However, the blocked pattern matching (BPM) problem, which is an essential step in gapped tag-based peptide identification, has not been fully solved. Results: In this article, we propose a fast and memory-efficient algorithm for the BPM problem. Experiments on both simulated and real datasets showed that the proposed algorithm achieved high speed and high sensitivity for peptide filtration in peptide identification by database search.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>With the developments of high-throughput genomics, transcriptomics and proteomics, combining multiple omics data provides a new way for studying complex biological systems. In multiple omics data analysis, tandem mass (MS/MS) spectra are searched against protein databases generated from genomes or RNA-Seq data for peptide identification. These protein databases are often huge. For example, in human microbiome studies, MS/MS spectra are searched against databases containing protein sequences generated from hundreds, even thousands, of genomes (<ref type="bibr" target="#b7">Dewhirst et al., 2010;</ref><ref type="bibr" target="#b20">Rudney et al., 2010</ref>). Most mass spectrometry (MS)-based peptide identification tools match an MS/MS spectrum against all peptides in a database whose molecular masses are similar to the precursor mass of the spectrum (<ref type="bibr" target="#b6">Craig and Beavis, 2003;</ref><ref type="bibr" target="#b8">Eng et al., 1994;</ref><ref type="bibr" target="#b10">Geer et al., 2004;</ref><ref type="bibr" target="#b19">Perkins et al., 1999</ref>). These tools become slow when the database is large. An alternative approach is based on peptide sequence tags: peptide sequence tags are extracted from an MS/MS spectrum and searched against a database to identify a small number of candidate peptides that match at least one of the tags, then a rescoring function is applied to report the highest scoring candidate peptide (<ref type="bibr" target="#b16">Ma et al., 2011;</ref><ref type="bibr" target="#b17">Mann and Wilm, 1994;</ref><ref type="bibr" target="#b21">Tabb et al., 2003;</ref><ref type="bibr" target="#b22">Tanner et al., 2005</ref>). The trade-off between speed and sensitivity is an important problem in tagbased methods. To increase the sensitivity, it is essential that the set of sequence tags extracted from a spectrum contains a correct one that matches the target peptide. To increase the speed, long sequence tags (length ! 5) are preferred because they are efficient in filtering out incorrect peptides. As a result, correct long sequence tags are extremely useful in tag-based methods because they speed up database searches without losing sensitivity. However, correct long sequence tags may not be found in MS/ MS spectra because of missing and noise peaks (<ref type="bibr" target="#b11">Jeong et al., 2011</ref>). To utilize long sequence tags,<ref type="bibr" target="#b13">Kim et al. (2009)</ref>proposed to generate a spectral dictionary containing full-length peptide constructions from an MS/MS spectrum for peptide identification. A drawback of this approach is that a spectral dictionary of an MS/MS spectrum with a large precursor mass may contain billions of peptides.<ref type="bibr" target="#b11">Jeong et al. (2011)</ref>introduced gapped peptides to solve this problem. Since a gapped peptide represents many non-gapped peptides, the use of gapped peptides significantly reduces the sizes of spectral dictionaries and speeds up peptide identification without losing sensitivity. Similar to the method proposed by<ref type="bibr" target="#b11">Jeong et al. (2011)</ref>, replacing sequence tags with gapped tags can achieve both high speed and high sensitivity in tag-based peptide identification. A gapped tag is represented by a sequence of mass values instead of amino acids. Each mass value is the mass of one amino acid residue or the sum of the masses of several consecutive amino acid residues. Many MS/MS spectra do not contain long sequence tags because of missing peaks, but contain long gapped tags. Gapped tags and gapped peptides give rise to the blocked pattern matching (BPM) problem in which a blocked pattern generated from a gapped tag is searched against a text to find matched substrings.<ref type="bibr" target="#b18">Ng et al. (2011)</ref>proposed an O(m) algorithm for querying a blocked pattern of length m against a text of length n. However, the time and space needed for the preprocessing step of the algorithm is Oð2 k Þ, where k is the length of the longest substring to identify. When k = 30, the preprocessing step is slow and the space required by the algorithm is huge. *To whom correspondence should be addressed.</p><p>In this article, we present a fast and memory-efficient algorithm for the BPM problem. The time and space complexity of the preprocessing step of the algorithm is O(n). In the application of MS-based peptide identification, the time complexity for querying a blocked pattern is sublinear in n. Experiments on both simulated and real MS/MS data sets showed that the proposed algorithm achieved high speed and high sensitivity for peptide filtration in peptide identification by database search.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">METHODS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">The BPM problem</head><p>Let N be the set of all natural numbers and S a subset of N. A string over N is called a pattern string, and a string over S is called a text string. When a pattern string is searched against a text string, the pattern string is called a blocked pattern. Let S=s 1 ; s 2 ;. .. ; s n be a text string. The mass of a substring s i ; s i+1 ;. .. ; s j of S is the sum of all numbers in the substring, i.e. s i +s i+1 + Á Á Á +s j. Substrings s i ; s i+1 ;. .. ; s j and s j+1 ; s j+2 ;. .. s k are called consecutive substrings of S. A partition R of S is a sequence of consecutive substrings A 1 ; A 2 ;. .. ; A k of S where A 1 starts from s 1 and A k ends at s n. The mass string of the partition R is a string comprised of the masses of the consecutive substrings of R. For example, when S=f71; 113; 114; 128g; S=71; 113; 114; 128; A 1 =71; A 2 =113; 114 and A 3 =128, the substrings A 1 ; A 2 ; A 3 is a partition of S and the corresponding mass string is 71, 227, 128, where 227 is the mass of A 2. A blocked pattern matches a text string if there is a partition of the text string such that the mass string of the partition is identical to the blocked pattern. In the previous example, the blocked pattern 71, 227, 128 matches the text string 71, 113, 114, 128.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.1">The BPM problem</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">An efficient algorithm for the BPM problem</head><p>In this subsection, we present an efficient algorithm for the BPM problem, in which the text T is represented by a suffix tree. Although the proposed algorithm works for suffix trees in which each edge is labeled with a text string with one or more letters, here we assume that each edge is labeled with only one letter to simplify the following analysis. Before discussing the new algorithm, we review the steps to search a text string against a suffix tree. To find substrings in T matching a text string a 1 ; a 2 ;. .. ; a m , we start from the root N 0 of the suffix tree and find a list of nodes N 1 ; N 2 ;. .. ; N m such that the path from the root to N i , for 1 i m, spells out the prefix a 1 ; a 2 ;. .. ; a i. In addition, the letter a i is the label on the edge connecting N iÀ1 and N i. We cannot search the blocked pattern P against the suffix tree directly since the text T is over S (S &amp; N ), whereas P is over N. Alternatively, we can first convert P into the set of all text strings matching P and then search each text string in against the suffix tree. Let V i be the set of all text strings whose masses equal p i. An example of V i is shown in Supplementary Table S1. Each text string in is the concatenation of a list of text strings v 1 ; v 2 ;. .. ; v m in which v i 2 V i for 1 i m. The number of text strings in is Å m i=1 jV i j, which may introduce a combinatorial explosion when jV i j41 for most p i in P. As a result, it is not fast to search P by converting it to explicitly. Prefixes of P are used to speed up blocked pattern searches. A text string S is a prefix text string of P if S matches a prefix pattern string of P. Moreover, if a prefix text string of P is identical to a substring of T, we say it is an identifiable prefix text string of P. For example, when S=f71; 113; 114; 128g, P = 71, 227, 128, and T=87; 71; 113; 114; 128; 97, both 71, 113, 114 and 71, 114, 113 are prefix text strings of P. The string 71, 113, 114 is an identifiable prefix text string of P, but 71, 114, 113 is not. If a prefix text string is not identifiable, then all text strings in with the prefix are not identifiable, making it not necessary to generate and search these text strings. The idea of the BPM algorithm is to speed up blocked pattern searches by removing non-identifiable prefix text strings (<ref type="figure" target="#fig_2">Fig. 1</ref>). Each identifiable prefix text string corresponds to a unique node in the suffix tree. Let U i be the set of nodes corresponding to all identifiable prefix text strings that match the prefix p 1 ; p 2 ;. .. ; p i of P. Similar to searching a text string, we initialize U 0 as the set containing only the root of the tree and find U 1 ; U 2 ;. .. ; U m progressively. The set U m contains the solution to the BPM problem because the identifiable prefix text strings that match p 1 ; p 2 ;. .. ; p m are substrings in T that match P. To find U i from U iÀ1 , we start from each node u 2 U iÀ1 and search for each text string S 2 V i. If there exists a node v such that the path from u to v spells out the string S, then the node v is added to U i. The total number of searches in the iteration, i.e. finding U i from U iÀ1 , is jU iÀ1 j Â jV i j. After the last set U m is found, the BPM problem is solved by reporting all substrings corresponding to U m and their positions in T, which are stored in U m. Since the text T is represented by a suffix tree, the space complexity of the algorithm is O(n).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Time complexity</head><p>Representing the text T as a suffix tree is a preprocessing step for pattern queries. Its time complexity is O(n). Let G be the largest number in the blocked pattern P, that is, G=max m i=1 p i. We denote by W k the set of all text strings whose masses equal k. To obtain V 1 ; V 2 ;. .. ; V m , we generate a lookup table W 0 ; W 1 ;. .. ; W G. The number of operations for computing W 0 ; W 1 ;. .. ; W G is an exponential function of G (see the Supplementary Material). In peptide identification by tandem mass spectra, the value G is not extremely large and the sets W 0 ; W 1 ;. .. ; W G can be computed in a short time (see Section 3.2). Below we focus on the query time complexity of the BPM algorithm (steps 2–7 of the algorithm in<ref type="figure" target="#fig_2">Fig. 1</ref>). When prefix text strings of P are long, most of them cannot be found in the text T (i.e. they are not identifiable) and will be removed from further consideration. As a result, the size of U i is often smaller than jU iÀ1 j Â jV i j. That is the reason why pattern queries in the BPM algorithm are fast. Let N=max m i=1 jV i j. The running time of searching P against the suffix tree is determined by</p><formula>X m i=1 jU i j= X L l=1 jY l j.</formula><p>The expectation of jY l j is determined by the size of X l and the probability that a length l text string is found in T. As a result, the running time of the pattern query is related to the sizes of Y l and X l. Each length l prefix text string in X l has only one partition A 1 ; A 2 ;. .. ; A k such that the mass string of the partition, which is a length k pattern string, is the same to a prefix of P. Let l i be the length of A i for 1 i k. We say l 1 ; l 2 ;. .. ; l k is the configuration of the prefix text string. For example, when S=f2; 3g and P = 3, 6, 4, we have V 1 =fð3Þg; V 2 = fð3; 3Þ; ð2; 2; 2Þg and V 3 =fð2; 2Þg. The configuration of the length 4 prefix text string 3, 2, 2, 2 is 1, 3 because it has only one partition A 1 =3 andThe subset V i;j contains all length j text strings in V i. The size of X C l is Å k i=1 jV i;li j. Because the probability that a prefix text string in X C l is found in T is a function of l, we want to represent the upper bound of jX C l j as a function of l. To this end, we introduce an expansion factor r i;j =jV i;j j 1=j for each set V i;j. The largest expansion factor is denoted as r=max i;j r i;j. Since jV i;li j r li for 1 i k,</p><formula>jX C l j=Å k i=1 jV i;li j Å k i=1 r li =r X k i=1 l i =r l :</formula><p>Because the number of configurations of prefix text strings in X l is bounded by 2 l , we can prove that ð2rÞ l is an upper bound of jX l j and further give the average-case time complexity of a pattern query in the BPM algorithm. THEOREM 1. When the size of S is a constant and 152r5jSj, the averagecase time complexity of a pattern query in the BPM algorithm is Oðn log jSj 2r N+MÞ, where M is the number of matched substrings in T.</p><p>A proof of the above theorem is given in the Supplementary Material. The average-case time complexity is obtained by analyzing the expectation of the size of Y l. In the worst case, the size of Y l is bounded by the length of the text. Consequently, the worst-case time complexity of a pattern query in the BPM algorithm is O(mnN).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Peptide identification by BPM</head><p>In peptide identification, blocked patterns are often obtained from gapped tags. A gapped tag of a spectrum is represented by a list of masses, each of which is the distance between two peaks in the spectrum, which may correspond to one or more amino acids.<ref type="figure">Figure 2</ref>gives an example spectrum for the peptide FTALNQVR from which we can generate a gapped tag 71.04, 227.13, 128.06 rather than a sequence tag ALNQ because the peak for the fragment FTAL is missing. A gapped tag is converted into a blocked pattern by rounding each mass in the gapped tag into an integer. Although rounding masses to integers has been successfully applied to analyzing low accuracy mass spectra (<ref type="bibr" target="#b12">Kim et al., 2008</ref>), it may introduce large errors in analyzing high accuracy mass spectra. For example, a large error 0.23 is introduced by rounding the mass 426.23 (with an accuracy of 0.01) of the fragment ion ALNQ in<ref type="figure">Figure 2</ref>to 426. To avoid this problem, mass values are multiplied by a scale factor before rounded to integers (<ref type="bibr" target="#b14">Liu et al., 2013</ref>). For example, when the scale factor is 100, the mass of the amino acid residue A is converted into 7 104. High-accuracy fragment ion peaks and a large scale factor are important in reducing the number of text strings matched to a blocked pattern and speeding up pattern queries. Since the BPM algorithm is designed for high-accuracy MS/MS spectra with high-accuracy precursors, it may fail to efficiently search blocked patterns generated from low-accuracy MS/MS spectra. Blocked patterns can also be generated from sequence tags when local confidence scores of amino acids in the sequence tags are available (<ref type="bibr" target="#b15">Ma et al., 2003;</ref><ref type="bibr" target="#b21">Tabb et al., 2003</ref>). In general, amino acids with low confidence scores tend to be incorrect. A sequence tag is converted into a gapped tag by replacing neighboring amino acids that have low confidence scores with the sum of their masses and substituting an amino acid that has a high confidence score with its single mass. The gapped tag is further converted into a blocked pattern by rounding its masses to integers. In practice, gaps in gapped tags are no larger than 500 Da (<ref type="bibr" target="#b18">Ng et al., 2011</ref>). When a sequence tag contains several consecutive amino acids with low confidence scores such that the sum of their masses is larger than 500 Da, the sequence tag is broken into two short sequence tags by the large gap from which gapped tags are generated. The threshold for confidence scores determines which amino acids in a sequence tag are combined. When the threshold is lower than the smallest confidence score in a sequence tag, every amino acid in the sequence tag is converted to a mass in the gapped tag. When the threshold is extremely high, all amino acids in a sequence tag is combined to a large mass and the search of the blocked pattern is equivalent to peptide identification by using its precursor mass. In peptide identification, the residue mass values of the 20 standard amino acid are converted into integers by using a scale factor. The alphabet S of text strings is the set of the resulting integers. Since leucine (L) and isoleucine (I) have the same mass, they are treated as the same in blocked pattern searches. As a result, the size of S is 19. A protein database is converted to a text over S by replacing each amino acid in the database by its corresponding integer in S. Blocked patterns are generated from a tandem mass spectrum and searched against the text translated from a protein database to find candidate peptides. After the candidate peptides are identified, they are filtered by the precursor mass of the spectrum. The resulting peptidespectrum-matches (PSMs) are further rescored to find the highest scoring one (Supplementary<ref type="figure">Fig. S2</ref>). Any scoring function can be utilized in the rescoring step to improve the sensitivity of peptide identification. Searching blocked patterns against the text generated from a database is an essential step that determines the speed and sensitivity of peptide identification. In peptide identification by tandem mass spectra, the numbers (letters) in P are usually not extremely large. When the largest gap in gapped tags<ref type="figure">Fig. 2</ref>. An example spectrum for the peptide FTALNQVR. A gapped tag 71.04, 227.13, 128.08 is extracted from the spectrum based on the distances between peak pairs, where 71.04 is the mass of the amino acid residue A, 227.13 is the sum of the masses of the amino acid residues L and N and 128.08 is the mass of the amino acid residue Q. A blocked pattern 71, 227, 128 is generated by rounding each mass in the gapped tag to an integer is 500 Da and the scale factor is 100, the largest number in P is 50 000. In this case, the number N in Theorem 1 can be treated as a constant value. In addition, log jSj 2r in Theorem 1 is usually smaller than 1. In this application, the average-case time complexity for a pattern query is sublinear in the size of the database. The numbers in a blocked pattern may have small errors that are introduced in measuring the m/z values of fragment ions. To account for these errors, an error tolerance is allowed when blocked patterns are searched against a text. In the BPM algorithm, a text string is included into the set V i if the difference between p i and the sum of all the numbers in the text string is within a predefined error tolerance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RESULTS</head><p>We implemented the BPM algorithm in Java and tested it on both simulated and real datasets. All the tests were performed on a Linux (64-bit) desktop PC with a 1.4 GHz CPU and 32 GB RAM. We were not able to compare the BPM algorithm with that described in<ref type="bibr" target="#b18">Ng et al. (2011)</ref>because it is not available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Dataset</head><p>A dataset generated from human cell lysate (<ref type="bibr" target="#b9">Frese et al., 2011</ref>) was used to test the BPM algorithm. In the preparation of the dataset, the protein mixture was analyzed on an Orbitrap Velos (Thermo Fisher Scientific) coupled with a high-performance liquid chromatography system. High-accuracy MS and MS/MS spectra were collected at a resolution of 30 000 and 7500, respectively. Triplicate higher energy collisionally activated dissociation datasets were then acquired, of which only one with 37 810 tandem mass spectra was selected to evaluate the BPM algorithm. Details of the experiment can be found in<ref type="bibr" target="#b9">Frese et al. (2011</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Running time analysis</head><p>The human proteome database (about 12 MB) was downloaded from the Swiss-Prot database. We constructed a suffix tree from the human proteome database using the Ukkonen's algorithm (<ref type="bibr" target="#b23">Ukkonen, 1995</ref>) implemented by Nelson and ported to Java by Havsiyevych (The source code of the implementation can be found at http://illya-keeplearning.blogspot.com/2009/04/suffixtrees-java-ukkonens-algorithm.html). The running time for the suffix tree construction was about 30 s. In the implementation of the BPM algorithm, the scale factor is 100. Let S be the alphabet generated from the 19 amino acids (the amino acids I and J are treated as the same). In practice, gaps typically do not exceed 500 Da (<ref type="bibr" target="#b18">Ng et al., 2011</ref>), and the largest number in blocked patterns is 50 000. For each number k between 0 and 50 000, we generated the set W k of all text strings on S such that the sum of the numbers in the text string is the same to k with an error tolerance of 5. The size of the lookup table</p><formula>W 1 ; W 2 ;. .. ; W 50000 , that is, X 50000 k=1 jW k j,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>.. ;</head><p>W k;j ;. . ., where W k;j contains all length j text strings in W k. Let r k =max j jW k;j j 1 j. The histogram of r k shows that r k 5:7 (Supplementary<ref type="figure" target="#fig_6">Fig. S3</ref>). Since log 19 ð2 Â 5:7Þ % 0:83, the average-case time complexity of the BPM algorithm is sublinear in the size of the database in this application. When a blocked pattern of length m is generated from a sequence tag with n amino acids, we define n/m as the gap ratio of the pattern. For example, the blocked pattern 71, 227, 128 can be generated from a sequence tag ALNQ (71, 113, 114, 128), and the gap ratio is 4/3. We tested the BPM algorithm on simulated data to find the relationship between the running time and the gap ratio. Blocked patterns were generated directly from peptides in the human proteome database: A total of 1 million peptides of length 20 were randomly selected from the database.<ref type="bibr">[2.1,5.7]</ref>(Supplementary<ref type="figure" target="#fig_7">Fig. S4</ref>). The blocked patterns were then searched against the suffix tree constructed from the human proteome database. The average query time for blocked patterns was fast for all four gap ratios (Supplementary<ref type="figure">Fig. S5</ref>). When the gap ratio was 4, the average query time was less than 0.003 s per pattern. In addition, the average query time significantly increased as the gap ratio increased, so large gaps should be avoided to guarantee that the query time is fast in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Evaluation on the real dataset</head><p>To evaluate the performance of the BPM algorithm, we generated a set of PSMs from the human lysate dataset. MS-GF+ (<ref type="bibr" target="#b12">Kim et al., 2008</ref>) was employed to search each spectrum in the dataset against a target-decoy concatenated human proteome database. With 1% spectrum level false discovery rate (FDR), MS-GF+ identified 13 135 spectra (in about 18 min), which are assumed correct and used as a gold standard for the following evaluation. The 13 135 spectra are called identifiable spectra. For brevity, the set of 13 135 spectra is referred to as the HUMAN dataset.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Evaluation criteria</head><p>In peptide identification, a set of blocked patterns are extracted from a spectrum and searched against a protein database to find candidate peptides that contain at least one blocked pattern. If one of the extracted blocked patterns is correct (in the target peptide) and the filtration based on the blocked patterns reports a set of candidate peptides that contains the target one, then the spectrum is said to be efficiently filtered. The filtration efficiency is defined as follows: filtration efficiency = Number of identifiable spectra that can be efficiently filtered Number of identifiable spectra :</p><p>The second evaluation criterion is the query speed of blocked patterns. The speed of peptide identification is also related to the number of the candidate peptides reported by blocked patternbased filtration, which is the third evaluation criterion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Pattern generation</head><p>We performed de novo sequencing on the HUMAN dataset using PEAKS 6.0 (<ref type="bibr" target="#b15">Ma et al., 2003</ref>) and reported 10 peptides with the highest scores for each spectrum. Each peptide was converted into a blocked pattern as follows. Consecutive amino acids were replaced by the sum of their masses if they all had a local confidence score 5 c (a predefined threshold), whereas an amino acid with a local confidence score ! c was replaced by its single mass. The masses were multiplied by the scale factor 100 and rounded to integers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.5">Comparison with sequence tags</head><p>For each spectrum in the HUMAN dataset, we generated both ordinary patterns (sequence tags) and blocked patterns from the 10 peptides reported by PEAKS. When ordinary patterns were generated, the confidence score threshold was set as 0, and all amino acids in a peptide were replaced by their single masses. Note that the length of a blocked pattern may not be the same to its corresponding sequence tag. For example, the length of the sequence tag ALNQ (71, 113, 114, 128) is 4, and the length of the blocked pattern 71, 227, 128 is 3. To compare blocked patterns with ordinary patterns, we redefine the length of a blocked pattern as the length of the sequence tag (i.e. number of amino acids) from which the blocked pattern is generated.Both the blocked patterns and ordinary patterns were searched against the suffix tree. The parameter c was fixed as 60 for generating blocked patterns. The BPM algorithm with blocked patterns achieved a higher filtration efficiency than that with ordinary patterns (<ref type="figure" target="#fig_7">Fig. 4a</ref>). The difference in the filtration efficiency increases as the pattern length increases (<ref type="figure" target="#fig_7">Fig. 4a</ref>). By contrast, the running time of the BPM algorithm with blocked patterns is longer than that with ordinary patterns (<ref type="figure" target="#fig_7">Fig. 4b</ref>), especially when pattern length is 4. However, the difference in the running time becomes smaller when the pattern length increases. Particularly, when the pattern length ! 6, the running time is within 20 s for both methods. The experiments demonstrated that replacing sequence tags with blocked patterns improved the filtration efficiency without significant increase of the running time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.6">Comparison with MASCOT</head><p>To further investigate the filtration efficiency of the BPM algorithm, we ran MASCOT (<ref type="bibr" target="#b19">Perkins et al., 1999</ref>) on the whole human cell lysate dataset with 37 810 tandem mass spectra. The error tolerances for precursor masses and fragment ion masses were set as 20 ppm and 0.05 Da, respectively. Using the target-decoy approach, MASCOT identified 10 953 spectra and 9284 distinct peptides with 1% spectrum level FDR in 6.1 min. Without any filtering algorithm, MS-GF+ identified 13 135 spectra and 10 800 peptides with the same FDR. It identified 2141 peptides missed by MASCOT and missed 625 peptide identified by MASCOT. When the BPM algorithm (pattern length = 4, confidence score threshold = 60) was used as a filtering step for MSGF+, a total of 982 peptides were missed because of the filtration, and MS-GF+ identified 11 845 spectra and 9818 peptides. MS-GF+ with the BPM filtering algorithm identified 1456 peptides missed by MASCOT and missed 922 peptides identified by MASCOT. When coupled with the BPM algorithm, the sensitivity of MS-GF+ is still comparable to MASCOT because of the high-filtration efficiency of the BPM algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.7">Searching spectra</head><p>against the human genome Most existing software tools for peptide identification by database search are slow when the protein database is huge. We evaluated the speed of the BPM algorithm by searching the HUMAN dataset against the six-frame translation of the human genome. This approach has found many important applications in proteogenomics studies (<ref type="bibr" target="#b4">Andersen and Mann, 2001;</ref><ref type="bibr" target="#b5">Bitton et al., 2010;</ref><ref type="bibr" target="#b24">Yates et al., 1995</ref>). The complete human genome (Homo_sapiens.GRCh37.74) was downloaded from Ensembl. The translation of each chromosome starts from the first, second and third nucleotide on each strand according to the standard genetic code regardless of the position of the start codon. The HUMAN dataset was searched against the translated putative protein sequences using both MSGF+ and the BPM algorithm. The translated protein database was split into parts of about 100 MB to reduce the memory usage of MS-GF+ and the BPM algorithm. The largest memory usage of the BPM algorithm for searching a 100 MB database was about 12 GB. The average running time for MS-GF+ was 3 s per spectrum while it was 0.3 s for the BPM algorithm when the pattern length was 4 (Supplementary<ref type="figure">Fig. S7</ref>). The running time of the BPM algorithm decreased with the increase of the pattern length. When the pattern length was 6, the running time was about 0.08 s per spectrum.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">CONCLUSIONS</head><p>Peptide identification of MS/MS spectra by database search has been dominated by the approach of comparing a spectrum against all peptides in the protein database whose molecular masses are similar to the precursor mass of the spectrum. However, in the era of big data biology, this approach may become slow with the rapid growth of the sizes of protein databases. An alternative approach based on sequence tags or blocked patterns (gapped tags) is fast for identifying peptides when the database is huge. In this article, we proposed an efficient BPM algorithm for filtering peptides using blocked patterns and tested it on simulated and real datasets. The experiments showed that the BPM algorithm achieved high speed in filtration of peptides, even when the database is huge, e.g. the six frame translation of the human genome. We also compared blocked patterns with sequence tags for peptide filtration and found that blocked patterns outperformed sequence tags in terms of the sensitivity of peptide filtration. Because the BPM algorithm is fast and sensitive, it is a promising tool for searching MS/MS spectra against huge protein databases. In practice, the length of blocked patterns plays an important role in the performance of the BPM algorithm. The experiments on the length of blocked</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><figDesc>Given a text T=t 1 ; t 2 ;. .. ; t n over a finite alphabet S &amp; N and a blocked pattern P=p 1 ; p 2 ;. .. ; p m over N , find all substrings in T that match P.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><figDesc>Let L be the length of the longest prefix text string of P. We define X l as the set of all length l prefix text strings of P and Y l as the set of all length l identifiable prefix strings of P, for 1 l L. Since each node in [ m i=1 U i corresponds to an identifiable</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig.1.</head><figDesc>Fig. 1. An efficient algorithm for the BPM problem</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><figDesc>A 2 =2; 2; 2 such that the mass string of the partition matches the prefix 3, 6 of P. The total number of different configurations of length l prefix text strings of P is bounded by 2 l. Let X C l be the set of all prefix text strings in X l with a configuration C=l 1 ; l 2 ;. .. ; l k satisfying l= X k i=1 l i. Each prefix text string in X C l is the concatenation of k text strings v 1 ; v 2 ;. .. ; v k such that v i 2 V i and the length of v i is l i for 1 i k. We divide V i into subsets V i;1 ; V i;2 ;. .. ; V i;d , where d is the length of the longest text string in V i .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><figDesc>is about 3:34 Â 10 6. The running time for generating the lookup table was about 1 s. In the following analyses, we will ignore the preprocessing time for generating the suffix tree and the lookup table and only consider spectral query time unless otherwise stated. The value log jSj 2r defined in Section 2 is the exponent that determines the time complexity of the BPM algorithm. We estimated the value of r when the largest number in a blocked pattern is 50 000. We divided W k into subsets W k;1 ; W k;2 ; .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><figDesc>Given a peptide A=a 1 ; a 2 ;. .. ; a 20 , a block A½i; j ð1 i j 20Þ denotes the substring of a i ; a i+1 ;. .. ; a j. To construct a blocked pattern from A, we first partition it into blocks of length k (possibly except for the last block), i.e. A½1; k; A½k+1; 2k; ... ; A½lk+1; 20 ðl=d 20 k e À 1Þ, and then sum up the rounded scaled masses (the scale factor is 100) of the amino acids in each block. The resulting list of d 20 k e numbers is a blocked pattern with a gap ratio about k. Four patterns were constructed for each peptide for k = 1, 2, 3 and 4. When the gap ratio increases from 2 to 4, the range of the largest extension factors r for the blocked patterns changes from [1,4.3] to</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig.3.</head><figDesc>Fig. 3. Performance of the BPM algorithm with various settings of the pattern length and the confidence score threshold c on the HUMAN dataset: (a) the filtration efficiency and (b) the running time</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig.4.</head><figDesc>Fig. 4. Comparisons between blocked patterns and ordinary patterns: (a) the filtration efficiency and (b) the running time</figDesc></figure>

			<note place="foot">ß The Author 2014. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">Algorithm for blocked pattern matching problem at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot">F.Deng et al. at :: on August 30, 2016 http://bioinformatics.oxfordjournals.org/ Downloaded from</note>

			<note place="foot" n="3">.3.3 Pattern length and confidence score thresholds We tested the filtration efficiency and speed of the BPM algorithm by varying the two parameters, i.e. the length of blocked patterns and the threshold c for confidence scores, on the HUMAN dataset. To obtain length l blocked patterns, we enumerated all length l substrings of the blocked patterns generated from the dataset. The filtration efficiency of the algorithm decreases and the speed of the algorithm improves with the increase of the length of blocked patterns (Fig. 3). As the patterns become longer, the average number of candidate peptides for each spectrum decreases (Table 1). Particularly, when the pattern length !7, most spectra contain only 0 or 1 candidate peptide. When the pattern length is 5 or 6, the BPM algorithm achieves a good balance between the speed and filtration efficiency. Moreover, when the pattern length is fixed, the filtration efficiency decreases as the parameter c increases, while the running time is almost the same (Fig. 3). Therefore, a relative low cutoff value c should be used in practice. There are three parameters: the pattern length, the confidence score threshold and the number of blocked patterns, which affect the filtration efficiency of the BPM algorithm. When the confidence score threshold is fixed, the number of blocked patterns extracted from a spectrum decreases when the pattern length increases and more shorter blocked patterns can be extracted from a spectrum than longer ones. The high-filtration efficiency of short blocked patterns has two possible reasons: the large number of short patterns and the short pattern length. To find which is the main reason, we tested the filtration efficiency of the BPM algorithm by fixing the confidence score threshold and the number of patterns and varying the pattern length. The experiment results show that the main reason that short gapped tags have high-filtration efficiency is the short pattern length, not the large number of short patterns (see the Supplementary Material). 3.3.4 Comparison with a baseline algorithm We compared the running time of the BPM algorithm with a trivial baseline algorithm. Given a blocked pattern P=p 1 ; p 2 ;. .. ; p m and a text T=t 1 ; t 2 ;. .. ; t n , the baseline algorithm simply examines, for each position i, 1 i n, if there is a prefix of t i ; t i+1 ;. .. ; t n that matches P and outputs matched prefixes. The time complexity of the algorithm is O(nL), where L is the length of the longest text string that matches P. By setting the pattern length as 4 and the confidence score threshold as 60, a total of 170 149 blocked patterns were extracted from the HUMAN dataset using the described method. Although the baseline algorithm took about 9 h to search all the patterns against the human proteome database, the BPM algorithm took only less than 1 min, which is a significant 540 times speedup.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct   xml:id="b0">
	<monogr>
		<title level="m" type="main">showed that the BPM algorithm achieved a good balance between the filtration efficiency and the running time when the length was 5 or 6</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b1">
	<monogr>
		<title level="m" type="main">Funding: This work was supported by National Science Foundation of China (NSFC 61373048 to L.W. and F.D.), a grant from the Research Grants Council of the Hong Kong Special Administrative Region, China (CityU 122511 to L</title>
		<imprint/>
	</monogr>
	<note>to. X.L.</note>
</biblStruct>

<biblStruct   xml:id="b2">
	<monogr>
		<title level="m" type="main">Conflict of interest: none declared</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b3">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">REFERENCES</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b4">
	<analytic>
		<title level="a" type="main">Mass spectrometry allows direct identification of proteins in large genomes</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">S</forename>
				<surname>Andersen</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Mann</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proteomics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="641" to="650" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b5">
	<analytic>
		<title level="a" type="main">An integrated mass-spectrometry pipeline identifies novel protein coding-regions in the human genome</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">A</forename>
				<surname>Bitton</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS One</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page">8949</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b6">
	<analytic>
		<title level="a" type="main">A method for reducing the time required to match protein sequences with tandem mass spectra</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Craig</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<forename type="middle">C</forename>
				<surname>Beavis</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Rapid Commun. Mass Spectrom</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="2310" to="2316" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b7">
	<analytic>
		<title level="a" type="main">The human oral microbiome</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<forename type="middle">E</forename>
				<surname>Dewhirst</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Bacteriol</title>
		<imprint>
			<biblScope unit="volume">192</biblScope>
			<biblScope unit="page" from="5002" to="5017" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b8">
	<analytic>
		<title level="a" type="main">An approach to correlate tandem mass spectral data of peptides with amino acid sequences in a protein database</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">K</forename>
				<surname>Eng</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Am. Soc. Mass Spectrom</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="976" to="989" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b9">
	<analytic>
		<title level="a" type="main">Improved peptide identification by targeted fragmentation using CID, HCD and ETD on an LTQ-Orbitrap Velos</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<forename type="middle">K</forename>
				<surname>Frese</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Proteome Res</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="2377" to="2388" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b10">
	<analytic>
		<title level="a" type="main">Open mass spectrometry search algorithm</title>
		<author>
			<persName>
				<forename type="first">L</forename>
				<forename type="middle">Y</forename>
				<surname>Geer</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Proteome Res</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="958" to="964" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b11">
	<analytic>
		<title level="a" type="main">Gapped spectral dictionaries and their applications for database searches of tandem mass spectra</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Jeong</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mol. Cell. Proteomics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="110" to="002220" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b12">
	<analytic>
		<title level="a" type="main">Spectral probabilities and generating functions of tandem mass spectra: a strike against decoy databases</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Kim</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Proteome Res</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="3354" to="3363" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b13">
	<analytic>
		<title level="a" type="main">Spectral dictionaries: integrating de novo peptide sequencing with database search of tandem mass spectra</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Kim</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mol. Cell. Proteomics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="53" to="69" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b14">
	<analytic>
		<title level="a" type="main">Identification of ultramodified proteins using top-down tandem mass spectra</title>
		<author>
			<persName>
				<forename type="first">X</forename>
				<surname>Liu</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Proteome Res</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="5830" to="5838" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b15">
	<analytic>
		<title level="a" type="main">PEAKS: powerful software for peptide de novo sequencing by tandem mass spectrometry</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Ma</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Rapid Commun. Mass Spectrom</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="2337" to="2342" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b16">
	<analytic>
		<title level="a" type="main">ScanRanker: quality assessment of tandem mass spectra via sequence tagging</title>
		<author>
			<persName>
				<forename type="first">Z</forename>
				<forename type="middle">Q</forename>
				<surname>Ma</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Proteome Res</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="2896" to="2904" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b17">
	<analytic>
		<title level="a" type="main">Error-tolerant identification of peptides in sequence databases by peptide sequence tags</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Mann</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Wilm</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Anal. Chem</title>
		<imprint>
			<biblScope unit="volume">66</biblScope>
			<biblScope unit="page" from="4390" to="4399" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b18">
	<analytic>
		<title level="a" type="main">Blocked pattern matching problem and its applications in proteomics</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Ng</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 15th Annual International Conference on Research in Computational Molecular Biology</title>
		<meeting>15th Annual International Conference on Research in Computational Molecular Biology<address><addrLine>Vancouver, BC, Canada ; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="298" to="319" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b19">
	<analytic>
		<title level="a" type="main">Probability-based protein identification by searching sequence databases using mass spectrometry data</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">N</forename>
				<surname>Perkins</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electrophoresis</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="3551" to="3567" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b20">
	<analytic>
		<title level="a" type="main">A metaproteomic analysis of the human salivary microbiota by three-dimensional peptide fractionation and tandem mass spectrometry</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Rudney</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mol. Oral Microbiol</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="38" to="49" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b21">
	<analytic>
		<title level="a" type="main">GutenTag: high-throughput sequence tagging via an empirically derived fragmentation model</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">L</forename>
				<surname>Tabb</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Anal. Chem</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="page" from="6415" to="6421" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b22">
	<analytic>
		<title level="a" type="main">InsPecT: identification of posttranslationally modified peptides from tandem mass spectra</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Tanner</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Anal. Chem</title>
		<imprint>
			<biblScope unit="volume">77</biblScope>
			<biblScope unit="page" from="4626" to="4639" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b23">
	<analytic>
		<title level="a" type="main">On-line construction of suffix trees</title>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Ukkonen</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="249" to="260" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct   xml:id="b24">
	<analytic>
		<title level="a" type="main">Mining genomes: correlating tandem mass spectra of modified and unmodified peptides to sequences in nucleotide databases</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">R</forename>
				<surname>Yates</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Anal. Chem</title>
		<imprint>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="page" from="3202" to="3210" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>